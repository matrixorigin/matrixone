// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const APPLY = 57421
const LOWER_THAN_ON = 57422
const ON = 57423
const USING = 57424
const SUBQUERY_AS_EXPR = 57425
const LOWER_THAN_STRING = 57426
const ID = 57427
const AT_ID = 57428
const AT_AT_ID = 57429
const STRING = 57430
const VALUE_ARG = 57431
const LIST_ARG = 57432
const COMMENT = 57433
const COMMENT_KEYWORD = 57434
const QUOTE_ID = 57435
const STAGE = 57436
const CREDENTIALS = 57437
const STAGES = 57438
const SNAPSHOTS = 57439
const INTEGRAL = 57440
const HEX = 57441
const FLOAT = 57442
const HEXNUM = 57443
const BIT_LITERAL = 57444
const NULL = 57445
const TRUE = 57446
const FALSE = 57447
const LOWER_THAN_CHARSET = 57448
const CHARSET = 57449
const UNIQUE = 57450
const KEY = 57451
const OR = 57452
const PIPE_CONCAT = 57453
const XOR = 57454
const AND = 57455
const NOT = 57456
const BETWEEN = 57457
const CASE = 57458
const WHEN = 57459
const THEN = 57460
const ELSE = 57461
const END = 57462
const ELSEIF = 57463
const LOWER_THAN_EQ = 57464
const LE = 57465
const GE = 57466
const NE = 57467
const NULL_SAFE_EQUAL = 57468
const IS = 57469
const LIKE = 57470
const REGEXP = 57471
const IN = 57472
const ASSIGNMENT = 57473
const ILIKE = 57474
const SHIFT_LEFT = 57475
const SHIFT_RIGHT = 57476
const DIV = 57477
const MOD = 57478
const UNARY = 57479
const COLLATE = 57480
const BINARY = 57481
const UNDERSCORE_BINARY = 57482
const INTERVAL = 57483
const OUT = 57484
const INOUT = 57485
const BEGIN = 57486
const START = 57487
const TRANSACTION = 57488
const COMMIT = 57489
const ROLLBACK = 57490
const WORK = 57491
const CONSISTENT = 57492
const SNAPSHOT = 57493
const CHAIN = 57494
const NO = 57495
const RELEASE = 57496
const PRIORITY = 57497
const QUICK = 57498
const BIT = 57499
const TINYINT = 57500
const SMALLINT = 57501
const MEDIUMINT = 57502
const INT = 57503
const INTEGER = 57504
const BIGINT = 57505
const INTNUM = 57506
const REAL = 57507
const DOUBLE = 57508
const FLOAT_TYPE = 57509
const DECIMAL = 57510
const NUMERIC = 57511
const DECIMAL_VALUE = 57512
const TIME = 57513
const TIMESTAMP = 57514
const DATETIME = 57515
const YEAR = 57516
const CHAR = 57517
const VARCHAR = 57518
const BOOL = 57519
const CHARACTER = 57520
const VARBINARY = 57521
const NCHAR = 57522
const TEXT = 57523
const TINYTEXT = 57524
const MEDIUMTEXT = 57525
const LONGTEXT = 57526
const DATALINK = 57527
const BLOB = 57528
const TINYBLOB = 57529
const MEDIUMBLOB = 57530
const LONGBLOB = 57531
const JSON = 57532
const ENUM = 57533
const UUID = 57534
const VECF32 = 57535
const VECF64 = 57536
const GEOMETRY = 57537
const POINT = 57538
const LINESTRING = 57539
const POLYGON = 57540
const GEOMETRYCOLLECTION = 57541
const MULTIPOINT = 57542
const MULTILINESTRING = 57543
const MULTIPOLYGON = 57544
const INT1 = 57545
const INT2 = 57546
const INT3 = 57547
const INT4 = 57548
const INT8 = 57549
const S3OPTION = 57550
const STAGEOPTION = 57551
const SQL_SMALL_RESULT = 57552
const SQL_BIG_RESULT = 57553
const SQL_BUFFER_RESULT = 57554
const LOW_PRIORITY = 57555
const HIGH_PRIORITY = 57556
const DELAYED = 57557
const CREATE = 57558
const ALTER = 57559
const DROP = 57560
const RENAME = 57561
const ANALYZE = 57562
const PHYPLAN = 57563
const ADD = 57564
const RETURNS = 57565
const SCHEMA = 57566
const TABLE = 57567
const SEQUENCE = 57568
const INDEX = 57569
const VIEW = 57570
const TO = 57571
const IGNORE = 57572
const IF = 57573
const PRIMARY = 57574
const COLUMN = 57575
const CONSTRAINT = 57576
const SPATIAL = 57577
const FULLTEXT = 57578
const FOREIGN = 57579
const KEY_BLOCK_SIZE = 57580
const SHOW = 57581
const DESCRIBE = 57582
const EXPLAIN = 57583
const DATE = 57584
const ESCAPE = 57585
const REPAIR = 57586
const OPTIMIZE = 57587
const TRUNCATE = 57588
const MAXVALUE = 57589
const PARTITION = 57590
const REORGANIZE = 57591
const LESS = 57592
const THAN = 57593
const PROCEDURE = 57594
const TRIGGER = 57595
const STATUS = 57596
const VARIABLES = 57597
const ROLE = 57598
const PROXY = 57599
const AVG_ROW_LENGTH = 57600
const STORAGE = 57601
const DISK = 57602
const MEMORY = 57603
const CHECKSUM = 57604
const COMPRESSION = 57605
const DATA = 57606
const DIRECTORY = 57607
const DELAY_KEY_WRITE = 57608
const ENCRYPTION = 57609
const ENGINE = 57610
const MAX_ROWS = 57611
const MIN_ROWS = 57612
const PACK_KEYS = 57613
const ROW_FORMAT = 57614
const STATS_AUTO_RECALC = 57615
const STATS_PERSISTENT = 57616
const STATS_SAMPLE_PAGES = 57617
const DYNAMIC = 57618
const COMPRESSED = 57619
const REDUNDANT = 57620
const COMPACT = 57621
const FIXED = 57622
const COLUMN_FORMAT = 57623
const AUTO_RANDOM = 57624
const ENGINE_ATTRIBUTE = 57625
const SECONDARY_ENGINE_ATTRIBUTE = 57626
const INSERT_METHOD = 57627
const RESTRICT = 57628
const CASCADE = 57629
const ACTION = 57630
const PARTIAL = 57631
const SIMPLE = 57632
const CHECK = 57633
const ENFORCED = 57634
const RANGE = 57635
const LIST = 57636
const ALGORITHM = 57637
const LINEAR = 57638
const PARTITIONS = 57639
const SUBPARTITION = 57640
const SUBPARTITIONS = 57641
const CLUSTER = 57642
const TYPE = 57643
const ANY = 57644
const SOME = 57645
const EXTERNAL = 57646
const LOCALFILE = 57647
const URL = 57648
const PREPARE = 57649
const DEALLOCATE = 57650
const RESET = 57651
const EXTENSION = 57652
const RETENTION = 57653
const PERIOD = 57654
const INCREMENT = 57655
const CYCLE = 57656
const MINVALUE = 57657
const PUBLICATION = 57658
const SUBSCRIPTIONS = 57659
const PUBLICATIONS = 57660
const PROPERTIES = 57661
const PARSER = 57662
const VISIBLE = 57663
const INVISIBLE = 57664
const BTREE = 57665
const HASH = 57666
const RTREE = 57667
const BSI = 57668
const IVFFLAT = 57669
const MASTER = 57670
const ZONEMAP = 57671
const LEADING = 57672
const BOTH = 57673
const TRAILING = 57674
const UNKNOWN = 57675
const LISTS = 57676
const OP_TYPE = 57677
const REINDEX = 57678
const EXPIRE = 57679
const ACCOUNT = 57680
const ACCOUNTS = 57681
const UNLOCK = 57682
const DAY = 57683
const NEVER = 57684
const PUMP = 57685
const MYSQL_COMPATIBILITY_MODE = 57686
const UNIQUE_CHECK_ON_AUTOINCR = 57687
const MODIFY = 57688
const CHANGE = 57689
const SECOND = 57690
const ASCII = 57691
const COALESCE = 57692
const COLLATION = 57693
const HOUR = 57694
const MICROSECOND = 57695
const MINUTE = 57696
const MONTH = 57697
const QUARTER = 57698
const REPEAT = 57699
const REVERSE = 57700
const ROW_COUNT = 57701
const WEEK = 57702
const REVOKE = 57703
const FUNCTION = 57704
const PRIVILEGES = 57705
const TABLESPACE = 57706
const EXECUTE = 57707
const SUPER = 57708
const GRANT = 57709
const OPTION = 57710
const REFERENCES = 57711
const REPLICATION = 57712
const SLAVE = 57713
const CLIENT = 57714
const USAGE = 57715
const RELOAD = 57716
const FILE = 57717
const TEMPORARY = 57718
const ROUTINE = 57719
const EVENT = 57720
const SHUTDOWN = 57721
const NULLX = 57722
const AUTO_INCREMENT = 57723
const APPROXNUM = 57724
const SIGNED = 57725
const UNSIGNED = 57726
const ZEROFILL = 57727
const ENGINES = 57728
const LOW_CARDINALITY = 57729
const AUTOEXTEND_SIZE = 57730
const ADMIN_NAME = 57731
const RANDOM = 57732
const SUSPEND = 57733
const ATTRIBUTE = 57734
const HISTORY = 57735
const REUSE = 57736
const CURRENT = 57737
const OPTIONAL = 57738
const FAILED_LOGIN_ATTEMPTS = 57739
const PASSWORD_LOCK_TIME = 57740
const UNBOUNDED = 57741
const SECONDARY = 57742
const RESTRICTED = 57743
const USER = 57744
const IDENTIFIED = 57745
const CIPHER = 57746
const ISSUER = 57747
const X509 = 57748
const SUBJECT = 57749
const SAN = 57750
const REQUIRE = 57751
const SSL = 57752
const NONE = 57753
const PASSWORD = 57754
const SHARED = 57755
const EXCLUSIVE = 57756
const MAX_QUERIES_PER_HOUR = 57757
const MAX_UPDATES_PER_HOUR = 57758
const MAX_CONNECTIONS_PER_HOUR = 57759
const MAX_USER_CONNECTIONS = 57760
const FORMAT = 57761
const VERBOSE = 57762
const CONNECTION = 57763
const TRIGGERS = 57764
const PROFILES = 57765
const LOAD = 57766
const INLINE = 57767
const INFILE = 57768
const TERMINATED = 57769
const OPTIONALLY = 57770
const ENCLOSED = 57771
const ESCAPED = 57772
const STARTING = 57773
const LINES = 57774
const ROWS = 57775
const IMPORT = 57776
const DISCARD = 57777
const JSONTYPE = 57778
const MODUMP = 57779
const OVER = 57780
const PRECEDING = 57781
const FOLLOWING = 57782
const GROUPS = 57783
const DATABASES = 57784
const TABLES = 57785
const SEQUENCES = 57786
const EXTENDED = 57787
const FULL = 57788
const PROCESSLIST = 57789
const FIELDS = 57790
const COLUMNS = 57791
const OPEN = 57792
const ERRORS = 57793
const WARNINGS = 57794
const INDEXES = 57795
const SCHEMAS = 57796
const NODE = 57797
const LOCKS = 57798
const ROLES = 57799
const TABLE_NUMBER = 57800
const COLUMN_NUMBER = 57801
const TABLE_VALUES = 57802
const TABLE_SIZE = 57803
const NAMES = 57804
const GLOBAL = 57805
const PERSIST = 57806
const SESSION = 57807
const ISOLATION = 57808
const LEVEL = 57809
const READ = 57810
const WRITE = 57811
const ONLY = 57812
const REPEATABLE = 57813
const COMMITTED = 57814
const UNCOMMITTED = 57815
const SERIALIZABLE = 57816
const LOCAL = 57817
const EVENTS = 57818
const PLUGINS = 57819
const CURRENT_TIMESTAMP = 57820
const DATABASE = 57821
const CURRENT_TIME = 57822
const LOCALTIME = 57823
const LOCALTIMESTAMP = 57824
const UTC_DATE = 57825
const UTC_TIME = 57826
const UTC_TIMESTAMP = 57827
const REPLACE = 57828
const CONVERT = 57829
const SEPARATOR = 57830
const TIMESTAMPDIFF = 57831
const CURRENT_DATE = 57832
const CURRENT_USER = 57833
const CURRENT_ROLE = 57834
const SECOND_MICROSECOND = 57835
const MINUTE_MICROSECOND = 57836
const MINUTE_SECOND = 57837
const HOUR_MICROSECOND = 57838
const HOUR_SECOND = 57839
const HOUR_MINUTE = 57840
const DAY_MICROSECOND = 57841
const DAY_SECOND = 57842
const DAY_MINUTE = 57843
const DAY_HOUR = 57844
const YEAR_MONTH = 57845
const SQL_TSI_HOUR = 57846
const SQL_TSI_DAY = 57847
const SQL_TSI_WEEK = 57848
const SQL_TSI_MONTH = 57849
const SQL_TSI_QUARTER = 57850
const SQL_TSI_YEAR = 57851
const SQL_TSI_SECOND = 57852
const SQL_TSI_MINUTE = 57853
const RECURSIVE = 57854
const CONFIG = 57855
const DRAINER = 57856
const SOURCE = 57857
const STREAM = 57858
const HEADERS = 57859
const CONNECTOR = 57860
const CONNECTORS = 57861
const DAEMON = 57862
const PAUSE = 57863
const CANCEL = 57864
const TASK = 57865
const RESUME = 57866
const RESTART = 57867
const MATCH = 57868
const AGAINST = 57869
const BOOLEAN = 57870
const LANGUAGE = 57871
const WITH = 57872
const QUERY = 57873
const EXPANSION = 57874
const WITHOUT = 57875
const VALIDATION = 57876
const UPGRADE = 57877
const RETRY = 57878
const ADDDATE = 57879
const BIT_AND = 57880
const BIT_OR = 57881
const BIT_XOR = 57882
const CAST = 57883
const COUNT = 57884
const APPROX_COUNT = 57885
const APPROX_COUNT_DISTINCT = 57886
const SERIAL_EXTRACT = 57887
const APPROX_PERCENTILE = 57888
const CURDATE = 57889
const CURTIME = 57890
const DATE_ADD = 57891
const DATE_SUB = 57892
const EXTRACT = 57893
const GROUP_CONCAT = 57894
const MAX = 57895
const MID = 57896
const MIN = 57897
const NOW = 57898
const POSITION = 57899
const SESSION_USER = 57900
const STD = 57901
const STDDEV = 57902
const MEDIAN = 57903
const CLUSTER_CENTERS = 57904
const KMEANS = 57905
const STDDEV_POP = 57906
const STDDEV_SAMP = 57907
const SUBDATE = 57908
const SUBSTR = 57909
const SUBSTRING = 57910
const SUM = 57911
const SYSDATE = 57912
const SYSTEM_USER = 57913
const TRANSLATE = 57914
const TRIM = 57915
const VARIANCE = 57916
const VAR_POP = 57917
const VAR_SAMP = 57918
const AVG = 57919
const RANK = 57920
const ROW_NUMBER = 57921
const DENSE_RANK = 57922
const BIT_CAST = 57923
const BITMAP_BIT_POSITION = 57924
const BITMAP_BUCKET_NUMBER = 57925
const BITMAP_COUNT = 57926
const BITMAP_CONSTRUCT_AGG = 57927
const BITMAP_OR_AGG = 57928
const NEXTVAL = 57929
const SETVAL = 57930
const CURRVAL = 57931
const LASTVAL = 57932
const ARROW = 57933
const ROW = 57934
const OUTFILE = 57935
const HEADER = 57936
const MAX_FILE_SIZE = 57937
const FORCE_QUOTE = 57938
const PARALLEL = 57939
const STRICT = 57940
const UNUSED = 57941
const BINDINGS = 57942
const DO = 57943
const DECLARE = 57944
const LOOP = 57945
const WHILE = 57946
const LEAVE = 57947
const ITERATE = 57948
const UNTIL = 57949
const CALL = 57950
const PREV = 57951
const SLIDING = 57952
const FILL = 57953
const SPBEGIN = 57954
const BACKEND = 57955
const SERVERS = 57956
const HANDLER = 57957
const PERCENT = 57958
const SAMPLE = 57959
const MO_TS = 57960
const PITR = 57961
const CDC = 57962
const ROLLUP = 57963
const KILL = 57964
const BACKUP = 57965
const FILESYSTEM = 57966
const PARALLELISM = 57967
const RESTORE = 57968
const QUERY_RESULT = 57969

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"APPLY",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"RESTART",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"ROLLUP",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12539

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 134,
	11, 782,
	22, 782,
	-2, 775,
	-1, 158,
	242, 1197,
	244, 1096,
	-2, 1143,
	-1, 185,
	43, 605,
	244, 605,
	271, 612,
	272, 612,
	470, 605,
	-2, 640,
	-1, 225,
	648, 1958,
	-2, 515,
	-1, 529,
	648, 2078,
	-2, 396,
	-1, 587,
	648, 2137,
	-2, 394,
	-1, 588,
	648, 2138,
	-2, 395,
	-1, 589,
	648, 2139,
	-2, 397,
	-1, 725,
	323, 176,
	442, 176,
	443, 176,
	-2, 1861,
	-1, 791,
	84, 1647,
	-2, 2014,
	-1, 792,
	84, 1665,
	-2, 1985,
	-1, 796,
	84, 1666,
	-2, 2013,
	-1, 829,
	84, 1574,
	-2, 2212,
	-1, 830,
	84, 1575,
	-2, 2211,
	-1, 831,
	84, 1576,
	-2, 2201,
	-1, 832,
	84, 2173,
	-2, 2194,
	-1, 833,
	84, 2174,
	-2, 2195,
	-1, 834,
	84, 2175,
	-2, 2203,
	-1, 835,
	84, 2176,
	-2, 2183,
	-1, 836,
	84, 2177,
	-2, 2192,
	-1, 837,
	84, 2178,
	-2, 2204,
	-1, 838,
	84, 2179,
	-2, 2205,
	-1, 839,
	84, 2180,
	-2, 2210,
	-1, 840,
	84, 2181,
	-2, 2215,
	-1, 841,
	84, 2182,
	-2, 2216,
	-1, 842,
	84, 1643,
	-2, 2052,
	-1, 843,
	84, 1644,
	-2, 1845,
	-1, 844,
	84, 1645,
	-2, 2061,
	-1, 845,
	84, 1646,
	-2, 1854,
	-1, 847,
	84, 1649,
	-2, 1862,
	-1, 848,
	84, 1650,
	-2, 2085,
	-1, 850,
	84, 1653,
	-2, 1881,
	-1, 852,
	84, 1655,
	-2, 2097,
	-1, 853,
	84, 1656,
	-2, 2096,
	-1, 854,
	84, 1657,
	-2, 1925,
	-1, 855,
	84, 1658,
	-2, 2009,
	-1, 858,
	84, 1661,
	-2, 2108,
	-1, 860,
	84, 1663,
	-2, 2111,
	-1, 861,
	84, 1664,
	-2, 2113,
	-1, 862,
	84, 1667,
	-2, 2121,
	-1, 863,
	84, 1668,
	-2, 1994,
	-1, 864,
	84, 1669,
	-2, 2039,
	-1, 865,
	84, 1670,
	-2, 2004,
	-1, 866,
	84, 1671,
	-2, 2029,
	-1, 877,
	84, 1552,
	-2, 2206,
	-1, 878,
	84, 1553,
	-2, 2207,
	-1, 879,
	84, 1554,
	-2, 2208,
	-1, 979,
	465, 640,
	466, 640,
	-2, 606,
	-1, 1029,
	126, 1845,
	137, 1845,
	157, 1845,
	-2, 1819,
	-1, 1146,
	22, 809,
	-2, 758,
	-1, 1256,
	11, 782,
	22, 782,
	-2, 1432,
	-1, 1338,
	22, 809,
	-2, 758,
	-1, 1689,
	84, 1718,
	-2, 2011,
	-1, 1690,
	84, 1719,
	-2, 2012,
	-1, 1858,
	85, 968,
	-2, 974,
	-1, 2302,
	109, 1135,
	153, 1135,
	192, 1135,
	195, 1135,
	284, 1135,
	-2, 1128,
	-1, 2460,
	11, 782,
	22, 782,
	-2, 909,
	-1, 2493,
	85, 1805,
	158, 1805,
	-2, 1996,
	-1, 2494,
	85, 1805,
	158, 1805,
	-2, 1995,
	-1, 2495,
	85, 1781,
	158, 1781,
	-2, 1982,
	-1, 2496,
	85, 1782,
	158, 1782,
	-2, 1987,
	-1, 2497,
	85, 1783,
	158, 1783,
	-2, 1913,
	-1, 2498,
	85, 1784,
	158, 1784,
	-2, 1907,
	-1, 2499,
	85, 1785,
	158, 1785,
	-2, 1835,
	-1, 2500,
	85, 1786,
	158, 1786,
	-2, 1984,
	-1, 2501,
	85, 1787,
	158, 1787,
	-2, 1911,
	-1, 2502,
	85, 1788,
	158, 1788,
	-2, 1906,
	-1, 2503,
	85, 1789,
	158, 1789,
	-2, 1895,
	-1, 2504,
	85, 1805,
	158, 1805,
	-2, 1896,
	-1, 2505,
	85, 1805,
	158, 1805,
	-2, 1897,
	-1, 2507,
	85, 1794,
	158, 1794,
	-2, 2029,
	-1, 2508,
	85, 1771,
	158, 1771,
	-2, 2014,
	-1, 2509,
	85, 1803,
	158, 1803,
	-2, 1985,
	-1, 2510,
	85, 1803,
	158, 1803,
	-2, 2013,
	-1, 2511,
	85, 1803,
	158, 1803,
	-2, 1863,
	-1, 2512,
	85, 1801,
	158, 1801,
	-2, 2004,
	-1, 2513,
	85, 1798,
	158, 1798,
	-2, 1886,
	-1, 2514,
	84, 1752,
	85, 1752,
	158, 1752,
	400, 1752,
	401, 1752,
	402, 1752,
	-2, 1834,
	-1, 2515,
	84, 1753,
	85, 1753,
	158, 1753,
	400, 1753,
	401, 1753,
	402, 1753,
	-2, 1836,
	-1, 2516,
	84, 1754,
	85, 1754,
	158, 1754,
	400, 1754,
	401, 1754,
	402, 1754,
	-2, 2057,
	-1, 2517,
	84, 1756,
	85, 1756,
	158, 1756,
	400, 1756,
	401, 1756,
	402, 1756,
	-2, 1986,
	-1, 2518,
	84, 1758,
	85, 1758,
	158, 1758,
	400, 1758,
	401, 1758,
	402, 1758,
	-2, 1967,
	-1, 2519,
	84, 1760,
	85, 1760,
	158, 1760,
	400, 1760,
	401, 1760,
	402, 1760,
	-2, 1912,
	-1, 2520,
	84, 1762,
	85, 1762,
	158, 1762,
	400, 1762,
	401, 1762,
	402, 1762,
	-2, 1891,
	-1, 2521,
	84, 1763,
	85, 1763,
	158, 1763,
	400, 1763,
	401, 1763,
	402, 1763,
	-2, 1892,
	-1, 2522,
	84, 1765,
	85, 1765,
	158, 1765,
	400, 1765,
	401, 1765,
	402, 1765,
	-2, 1833,
	-1, 2523,
	85, 1808,
	158, 1808,
	400, 1808,
	401, 1808,
	402, 1808,
	-2, 1868,
	-1, 2524,
	85, 1808,
	158, 1808,
	400, 1808,
	401, 1808,
	402, 1808,
	-2, 1882,
	-1, 2525,
	85, 1811,
	158, 1811,
	400, 1811,
	401, 1811,
	402, 1811,
	-2, 1864,
	-1, 2526,
	85, 1811,
	158, 1811,
	400, 1811,
	401, 1811,
	402, 1811,
	-2, 1928,
	-1, 2527,
	85, 1808,
	158, 1808,
	400, 1808,
	401, 1808,
	402, 1808,
	-2, 1950,
	-1, 2739,
	109, 1135,
	153, 1135,
	192, 1135,
	195, 1135,
	284, 1135,
	-2, 1129,
	-1, 2757,
	82, 702,
	158, 702,
	-2, 1313,
	-1, 3174,
	195, 1135,
	308, 1400,
	-2, 1372,
	-1, 3353,
	109, 1135,
	153, 1135,
	192, 1135,
	195, 1135,
	-2, 1253,
	-1, 3355,
	109, 1135,
	153, 1135,
	192, 1135,
	195, 1135,
	-2, 1253,
	-1, 3367,
	82, 702,
	158, 702,
	-2, 1313,
	-1, 3388,
	195, 1135,
	308, 1400,
	-2, 1373,
	-1, 3537,
	109, 1135,
	153, 1135,
	192, 1135,
	195, 1135,
	-2, 1254,
	-1, 3565,
	85, 1215,
	158, 1215,
	-2, 1135,
	-1, 3705,
	85, 1215,
	158, 1215,
	-2, 1135,
	-1, 3862,
	85, 1219,
	158, 1219,
	-2, 1135,
	-1, 3909,
	85, 1220,
	158, 1220,
	-2, 1135,
}

const yyPrivate = 57344

const yyLast = 51902

var yyAct = [...]int{
	758, 735, 3955, 760, 3929, 2787, 214, 3948, 3866, 1669,
	3373, 3872, 3705, 3469, 1943, 3765, 3873, 3193, 3865, 3160,
	3791, 744, 3746, 3822, 3593, 3265, 3402, 2582, 1503, 3683,
	3650, 3740, 1291, 737, 3266, 2781, 1665, 3704, 3524, 1436,
	3769, 3525, 3522, 788, 3623, 2784, 624, 1147, 1028, 3473,
	3747, 3674, 3335, 3749, 2699, 1580, 3464, 2790, 1891, 3340,
	643, 1442, 649, 649, 2349, 1716, 3169, 3546, 649, 667,
	676, 2760, 3389, 676, 3534, 3131, 3117, 1672, 3091, 2896,
	3263, 3504, 199, 2039, 2052, 3356, 2491, 2897, 3120, 37,
	2895, 3325, 1730, 2876, 2810, 3189, 3171, 3358, 1141, 2075,
	3305, 733, 688, 65, 2892, 2036, 2962, 2454, 3178, 2617,
	2002, 2150, 3251, 2922, 3539, 2489, 3231, 2352, 2728, 3096,
	684, 3102, 3098, 1903, 3094, 3093, 3140, 2313, 1137, 1496,
	2740, 727, 2259, 3092, 2382, 3177, 2281, 3009, 3089, 2133,
	2108, 1412, 3066, 2258, 2146, 2561, 2117, 1822, 133, 2935,
	1576, 2109, 2116, 36, 732, 2543, 2945, 2032, 673, 2081,
	1584, 952, 2006, 1581, 2145, 2455, 2440, 2003, 2717, 2712,
	2812, 2792, 2435, 2350, 1933, 2752, 2312, 1569, 2302, 2487,
	210, 8, 209, 7, 6, 1867, 1085, 1663, 2180, 2147,
	624, 642, 1512, 1543, 1592, 1481, 1022, 1476, 1405, 1612,
	736, 2293, 2157, 745, 1723, 1425, 726, 1703, 1902, 1163,
	1591, 1654, 2345, 23, 214, 2115, 214, 2650, 1076, 1077,
	27, 2112, 1595, 2097, 1662, 649, 1863, 2071, 681, 1021,
	1480, 2462, 1550, 1866, 988, 1478, 2436, 658, 1372, 951,
	16, 1421, 623, 1534, 1408, 1437, 108, 1445, 881, 734,
	24, 1731, 690, 200, 691, 1542, 1668, 661, 928, 1360,
	17, 196, 2649, 192, 949, 675, 1292, 934, 1336, 687,
	2154, 10, 974, 1073, 883, 3756, 3668, 14, 2685, 884,
	645, 2464, 15, 942, 2685, 943, 2685, 3370, 3147, 672,
	2979, 2978, 958, 1142, 2164, 3497, 1072, 1037, 1074, 3343,
	3258, 1143, 33, 1224, 1225, 1226, 1223, 2605, 2549, 668,
	1224, 1225, 1226, 1223, 1224, 1225, 1226, 1223, 2547, 2546,
	2544, 1835, 1553, 923, 1557, 1069, 728, 198, 644, 654,
	1068, 2257, 1355, 903, 3730, 901, 2263, 937, 679, 933,
	1069, 1604, 1034, 650, 1836, 1069, 670, 1036, 904, 3076,
	2267, 671, 1358, 3059, 1142, 3056, 3061, 1008, 3058, 3940,
	1459, 1829, 1603, 955, 956, 1351, 1555, 3462, 2958, 2956,
	1055, 669, 2086, 3735, 998, 1224, 1225, 1226, 1223, 8,
	3630, 7, 3624, 1067, 2677, 2675, 3465, 1224, 1225, 1226,
	1223, 3264, 2130, 3751, 1286, 914, 2111, 882, 3036, 2103,
	2390, 3690, 893, 1222, 197, 61, 188, 159, 1186, 3509,
	2591, 2151, 3847, 2599, 1367, 3505, 3357, 2304, 197, 61,
	188, 159, 728, 197, 197, 1590, 197, 2679, 2303, 3655,
	197, 3802, 1520, 902, 197, 900, 1366, 1365, 1364, 1363,
	686, 1599, 1056, 903, 1610, 3691, 2746, 901, 1361, 1038,
	3034, 197, 61, 188, 159, 2162, 1397, 1000, 2890, 1380,
	999, 1455, 2297, 1446, 1456, 2481, 197, 1032, 939, 1221,
	932, 1596, 1033, 2482, 1607, 193, 1368, 2015, 132, 936,
	935, 2928, 1621, 898, 197, 197, 61, 188, 159, 193,
	1838, 3657, 197, 3164, 1598, 2744, 917, 1609, 984, 1433,
	924, 193, 2562, 1003, 1001, 193, 1002, 959, 197, 61,
	188, 159, 894, 997, 2981, 1050, 1045, 1040, 1044, 1048,
	931, 2714, 193, 872, 3754, 871, 873, 874, 1635, 875,
	876, 2715, 2970, 2701, 961, 3486, 3060, 193, 3057, 941,
	132, 2929, 2930, 1053, 930, 2747, 1917, 1043, 929, 1158,
	2016, 2017, 1458, 1671, 916, 193, 193, 1848, 1849, 2468,
	922, 1655, 2467, 193, 1659, 2469, 197, 61, 188, 159,
	2049, 2702, 1155, 3844, 1482, 1219, 1484, 1443, 1444, 193,
	2713, 1031, 920, 1201, 1030, 1441, 1202, 2246, 1658, 1440,
	1443, 1444, 3162, 1379, 1009, 3753, 1214, 3752, 1051, 983,
	981, 3754, 3835, 3897, 3876, 3877, 3840, 1054, 3753, 3834,
	3752, 3833, 1556, 1554, 1204, 3738, 1005, 3827, 3933, 3934,
	940, 980, 3741, 3742, 3743, 3744, 3627, 1765, 1161, 1041,
	3267, 3267, 2963, 954, 3824, 2680, 3824, 193, 2964, 2586,
	2965, 1152, 2166, 2831, 960, 993, 921, 649, 649, 2033,
	3762, 3280, 1675, 1052, 1166, 1169, 3849, 3850, 649, 1151,
	3326, 2158, 1166, 1169, 3113, 2023, 3514, 3333, 989, 3845,
	3846, 158, 1644, 195, 1660, 3485, 1650, 2425, 676, 676,
	1007, 649, 2292, 3487, 3103, 2094, 3659, 3660, 940, 2999,
	2720, 1563, 1562, 1042, 185, 2704, 1199, 3414, 1657, 3842,
	1431, 1217, 1218, 3107, 990, 994, 2997, 184, 1216, 1079,
	2596, 2163, 2703, 2388, 1189, 1457, 1150, 3463, 2957, 2428,
	2429, 2882, 1469, 938, 977, 2427, 975, 979, 997, 685,
	3664, 2027, 976, 973, 972, 3511, 978, 963, 964, 962,
	965, 966, 967, 968, 1264, 995, 1381, 996, 1354, 2368,
	2678, 3309, 673, 673, 673, 2348, 2371, 1006, 991, 992,
	1200, 3875, 927, 3118, 3755, 3667, 2484, 3283, 3192, 1037,
	1049, 1674, 1673, 3003, 2433, 2684, 1143, 1143, 2697, 1144,
	3166, 2141, 1143, 896, 1211, 641, 722, 3429, 1181, 724,
	1151, 3904, 3620, 3129, 723, 987, 3784, 2152, 3426, 2152,
	2152, 986, 3190, 3191, 2264, 3779, 1046, 3141, 1605, 1047,
	1212, 1213, 1837, 2370, 1034, 1656, 2698, 982, 3105, 1036,
	2753, 897, 1069, 1295, 2420, 2047, 2048, 2878, 1160, 2888,
	1069, 2153, 674, 678, 3111, 677, 2299, 1203, 2980, 3770,
	1069, 1069, 1037, 1143, 1069, 2977, 674, 1296, 3689, 2185,
	2165, 3695, 1069, 1168, 1167, 3687, 3419, 1194, 2369, 3067,
	1196, 1168, 1167, 915, 913, 3848, 3786, 3374, 1206, 3792,
	3161, 1207, 2277, 2786, 1443, 1444, 3119, 2169, 2171, 2172,
	1170, 2545, 3381, 672, 672, 672, 1420, 1034, 1197, 3654,
	3108, 3109, 1036, 1558, 62, 985, 3316, 1004, 1357, 1209,
	1359, 957, 953, 668, 668, 668, 3110, 3080, 62, 1157,
	1057, 1039, 3430, 674, 3318, 3195, 2423, 1377, 643, 882,
	1154, 1156, 1159, 3658, 1146, 3761, 1432, 1139, 1334, 1145,
	2355, 1339, 3584, 1258, 1033, 3510, 674, 1178, 160, 2600,
	670, 670, 670, 1174, 1175, 671, 671, 671, 2676, 2860,
	1265, 952, 160, 2400, 3966, 1180, 1362, 160, 160, 2399,
	160, 3476, 899, 3119, 160, 669, 669, 669, 160, 1839,
	1190, 3951, 1172, 1443, 1444, 62, 1645, 194, 2726, 1646,
	3114, 1205, 3317, 3573, 3642, 160, 3643, 2484, 2034, 1260,
	1261, 1262, 1263, 1492, 674, 3642, 1192, 3643, 62, 3104,
	160, 3579, 3637, 3661, 649, 2719, 3000, 1471, 1195, 1198,
	3167, 649, 3696, 1439, 624, 624, 3688, 1491, 160, 160,
	1210, 3106, 3841, 1179, 624, 624, 160, 1418, 1507, 1507,
	2832, 649, 2833, 2834, 1191, 1681, 1684, 1685, 3515, 1417,
	3645, 942, 160, 943, 1416, 1208, 1682, 2782, 2783, 3793,
	2786, 3645, 676, 1535, 643, 3675, 62, 1509, 3170, 1546,
	1546, 2024, 2723, 2724, 1505, 1505, 1138, 1307, 1308, 2354,
	214, 3644, 1651, 3864, 2356, 2421, 2422, 2722, 3055, 624,
	1514, 3709, 3644, 1435, 1434, 2348, 2391, 2625, 3594, 3595,
	3596, 3600, 3598, 3599, 3597, 3190, 3191, 998, 3359, 1414,
	160, 2732, 2735, 2736, 2737, 2733, 2734, 2365, 3194, 1378,
	3952, 1193, 1255, 2924, 2926, 1129, 1125, 1126, 1127, 1128,
	3460, 2630, 2170, 2629, 2628, 2626, 3270, 2026, 2357, 1373,
	1470, 1588, 2940, 2941, 686, 3821, 1593, 1479, 3186, 3071,
	1564, 3127, 2592, 1602, 2473, 2386, 1340, 2155, 1186, 2022,
	2000, 1389, 1338, 1374, 1375, 1501, 1502, 3222, 2276, 1384,
	1385, 1386, 1387, 1388, 2690, 1390, 3002, 1395, 1394, 2358,
	1841, 1396, 1633, 1427, 1428, 3187, 1393, 1392, 1010, 680,
	1000, 3319, 3586, 999, 1628, 1629, 1507, 1383, 1507, 1151,
	2167, 2168, 2627, 1611, 946, 947, 948, 2829, 3306, 1402,
	1411, 2861, 2863, 2864, 2865, 2862, 2694, 1419, 998, 2270,
	1486, 1488, 3708, 1407, 1429, 1404, 1060, 1065, 1066, 2181,
	1499, 1500, 1448, 1449, 1371, 1451, 1452, 1597, 1453, 1851,
	1382, 1852, 1460, 1461, 1608, 3575, 1185, 3580, 3581, 3574,
	1850, 1037, 998, 3949, 3950, 1536, 1670, 673, 1037, 1447,
	673, 673, 1450, 3863, 3011, 3010, 1507, 944, 1578, 1579,
	2272, 2271, 3495, 1643, 1567, 909, 1570, 1571, 1601, 1369,
	1370, 1490, 3128, 1729, 3073, 1559, 1632, 2269, 1572, 1573,
	1683, 2851, 2852, 905, 2925, 1631, 2385, 1778, 2412, 1586,
	1583, 1000, 1717, 1587, 999, 1515, 3638, 941, 906, 1521,
	3639, 654, 2359, 3547, 1527, 3974, 2284, 3638, 1413, 3967,
	3962, 3748, 1413, 3831, 1222, 1547, 908, 1533, 2364, 3228,
	911, 910, 2362, 1548, 1148, 1000, 2758, 2484, 999, 2285,
	2286, 2452, 1667, 2631, 2632, 886, 887, 888, 889, 1691,
	1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701,
	1702, 3224, 3957, 1151, 1186, 1714, 1715, 2564, 3271, 1840,
	3146, 1148, 3322, 1843, 3282, 1845, 2251, 1847, 2591, 1619,
	3199, 1763, 1622, 1853, 1820, 1855, 1856, 1648, 672, 3188,
	1535, 672, 672, 2160, 1686, 1864, 1507, 1869, 1870, 2691,
	1872, 1471, 649, 1614, 1641, 1842, 2215, 649, 668, 2214,
	1507, 668, 668, 1787, 952, 3197, 2850, 1892, 3065, 1652,
	1831, 1062, 1063, 1064, 1638, 1620, 1507, 2295, 1623, 1624,
	1642, 1823, 1471, 3063, 1640, 3958, 3946, 667, 2074, 1422,
	1426, 1426, 1426, 1777, 1639, 670, 2759, 1661, 670, 670,
	671, 1666, 1664, 671, 671, 1636, 1011, 1916, 2453, 3911,
	2194, 1637, 3228, 1705, 1422, 1422, 1923, 1923, 2453, 1471,
	669, 1471, 1471, 669, 669, 649, 649, 2759, 1990, 1864,
	1994, 1222, 1222, 1507, 1997, 1998, 1768, 1769, 1770, 2013,
	1224, 1225, 1226, 1223, 1653, 891, 1184, 1760, 1761, 1784,
	1764, 1871, 1785, 3884, 624, 3878, 1507, 3860, 1779, 3912,
	3812, 1712, 1713, 1224, 1225, 1226, 1223, 3787, 1335, 1798,
	1799, 1786, 1920, 1788, 1873, 1789, 1790, 1791, 1224, 1225,
	1226, 1223, 3912, 649, 1864, 1507, 2193, 2057, 1819, 649,
	649, 649, 684, 684, 2294, 2453, 3775, 2943, 1826, 2067,
	2068, 2069, 2070, 2355, 2358, 1183, 2076, 2706, 2681, 3032,
	1893, 3728, 729, 214, 2050, 2328, 214, 214, 2581, 214,
	1992, 1792, 2569, 2151, 2191, 2014, 3885, 2341, 3671, 2072,
	3861, 1908, 2256, 3671, 886, 887, 888, 889, 2250, 3727,
	2160, 1945, 1926, 2249, 1821, 1827, 2222, 1915, 3722, 2142,
	1918, 1919, 3721, 3720, 3719, 2028, 2045, 1999, 3699, 1778,
	1778, 2119, 1403, 1720, 1493, 3698, 3959, 2042, 2043, 3776,
	1778, 1778, 3670, 2059, 2060, 2061, 2019, 2135, 2021, 1860,
	1861, 1862, 1184, 1859, 3729, 1186, 3370, 3435, 2056, 2040,
	2041, 1875, 1876, 1877, 1878, 2085, 1909, 1888, 2088, 2089,
	2035, 2091, 1868, 1889, 1224, 1225, 1226, 1223, 1914, 3383,
	1892, 2129, 2317, 1518, 1507, 2149, 1884, 3349, 1899, 1894,
	1895, 3671, 1900, 1901, 1905, 3671, 3671, 3671, 2947, 1927,
	1928, 2160, 1897, 1904, 2761, 1906, 1907, 2359, 2160, 1910,
	1911, 3298, 2354, 2348, 2353, 3671, 2351, 2356, 2594, 1913,
	2327, 1597, 1922, 1924, 2593, 1991, 1925, 2585, 2343, 1921,
	2484, 2121, 1037, 2335, 2210, 1037, 1996, 2195, 2143, 2140,
	2001, 2079, 2065, 1037, 1616, 673, 2018, 3294, 2020, 1272,
	3207, 2919, 3384, 2029, 891, 2656, 1171, 1135, 1130, 1868,
	3350, 1464, 1465, 3332, 1467, 1468, 2648, 1472, 1473, 1474,
	3610, 2357, 2607, 2589, 2577, 2114, 2571, 1034, 2125, 2055,
	2054, 3433, 1036, 1255, 3299, 2566, 2114, 2558, 1034, 2044,
	2062, 2063, 1239, 1036, 1070, 1071, 2556, 3151, 2554, 1075,
	1522, 1523, 1524, 1525, 1526, 2080, 1528, 1529, 1530, 1531,
	1532, 1664, 2082, 2994, 1538, 1539, 1540, 1541, 907, 3968,
	3295, 761, 771, 3208, 2453, 2552, 2316, 2252, 1222, 2099,
	1751, 762, 2229, 763, 767, 770, 766, 764, 765, 1222,
	1037, 2228, 2178, 2179, 2131, 1222, 2317, 2567, 1423, 2572,
	2213, 3780, 2204, 2203, 2120, 2202, 2128, 2544, 2567, 3548,
	2559, 2126, 2355, 2358, 2159, 2137, 2139, 2261, 2262, 2557,
	2265, 2553, 3937, 2268, 1625, 2383, 672, 1240, 1241, 1242,
	1243, 1244, 1245, 1246, 1239, 1034, 768, 3757, 727, 1454,
	1036, 649, 649, 649, 2144, 3781, 668, 1495, 2553, 2317,
	2251, 1767, 1766, 3549, 3669, 1222, 649, 649, 649, 649,
	1422, 3142, 3634, 2138, 1222, 3362, 1767, 1766, 769, 2314,
	3360, 2173, 3577, 1222, 1426, 1222, 1222, 3256, 1222, 2320,
	1471, 2174, 2182, 670, 3576, 1409, 1426, 2160, 671, 1410,
	3562, 1705, 3518, 3342, 3229, 2175, 2614, 1626, 1242, 1243,
	1244, 1245, 1246, 1239, 773, 134, 1471, 2187, 669, 3363,
	134, 1497, 3220, 912, 3361, 3214, 3209, 1424, 1793, 1794,
	1795, 1796, 1498, 2377, 1800, 1801, 1802, 1803, 1805, 1806,
	1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 2176, 2177,
	3143, 1409, 3122, 2885, 2884, 1410, 2359, 1747, 2730, 1494,
	2686, 2354, 2348, 2353, 1744, 2351, 2356, 2604, 1746, 1743,
	1745, 1749, 1750, 2570, 1804, 2475, 1748, 2124, 2223, 2224,
	655, 2226, 2123, 134, 2384, 2122, 1399, 1398, 2233, 1797,
	649, 1923, 1711, 1153, 3144, 1224, 1225, 1226, 1223, 2457,
	2457, 2013, 2457, 2538, 2083, 1724, 3259, 2332, 1708, 1710,
	1707, 2334, 1709, 2336, 1724, 2949, 2188, 2253, 1226, 1223,
	2357, 624, 624, 2245, 2247, 2248, 1551, 1854, 2083, 1151,
	3832, 1223, 2322, 2323, 3589, 1507, 649, 3588, 2966, 2337,
	2821, 2819, 2325, 2326, 1224, 1225, 1226, 1223, 2798, 649,
	2796, 2347, 2346, 3257, 2278, 1151, 2528, 643, 3519, 3520,
	3568, 2296, 1295, 1546, 1274, 2013, 3942, 2669, 2533, 2670,
	2535, 2479, 3941, 3512, 214, 2389, 3888, 1273, 2392, 2393,
	2394, 2395, 2396, 2397, 2398, 3859, 1296, 2401, 2402, 2403,
	2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2321, 2413,
	2414, 2415, 2416, 2417, 1037, 2418, 3858, 2459, 1035, 2463,
	3782, 2461, 2492, 134, 2574, 2470, 2333, 2471, 3330, 2340,
	1754, 1755, 1756, 1757, 1758, 1759, 1752, 1753, 134, 2700,
	134, 2587, 3513, 2486, 3724, 2149, 2476, 2477, 3965, 3712,
	2360, 2361, 1507, 2366, 1507, 2872, 1507, 2324, 2329, 1034,
	2870, 1151, 2330, 3702, 1036, 2331, 2539, 1782, 3692, 2606,
	1238, 1237, 1247, 1248, 1240, 1241, 1242, 1243, 1244, 1245,
	1246, 1239, 1783, 3625, 3551, 2532, 2868, 3331, 3550, 2217,
	2597, 1224, 1225, 1226, 1223, 1507, 2634, 2434, 2430, 1237,
	1247, 1248, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1239,
	2465, 2641, 3964, 2530, 2871, 3375, 1507, 3364, 2601, 2869,
	2729, 2857, 2537, 2633, 3329, 3210, 3025, 1486, 1488, 3112,
	2990, 1505, 1224, 1225, 1226, 1223, 2961, 2960, 2480, 1224,
	1225, 1226, 1223, 2548, 2642, 2867, 2583, 2584, 2616, 2855,
	2483, 2854, 1505, 1224, 1225, 1226, 1223, 2058, 2529, 2853,
	2206, 3961, 2540, 2845, 2688, 2689, 2531, 2839, 2692, 2838,
	3013, 2645, 2646, 1224, 1225, 1226, 1223, 2618, 2837, 2618,
	2856, 2836, 1552, 1227, 1151, 2682, 2560, 3024, 1151, 2472,
	2255, 1257, 2102, 3960, 2101, 1507, 2100, 2096, 1471, 2095,
	1267, 2051, 2622, 3869, 1994, 1224, 1225, 1226, 1223, 2603,
	1846, 1844, 2757, 1551, 1224, 1225, 1226, 1223, 2763, 2643,
	2598, 1224, 1225, 1226, 1223, 1275, 1617, 1353, 2205, 2579,
	1224, 1225, 1226, 1223, 2590, 2673, 2773, 3470, 2612, 2595,
	3336, 2707, 3341, 2588, 3097, 2492, 1151, 1224, 1225, 1226,
	1223, 3662, 3663, 3935, 2795, 1224, 1225, 1226, 1223, 3768,
	3903, 1151, 1151, 1151, 1923, 2608, 2609, 1151, 3902, 2805,
	2806, 2807, 2808, 1151, 2815, 1133, 2816, 2817, 3899, 2818,
	2624, 2820, 722, 3491, 1426, 724, 1224, 1225, 1226, 1223,
	723, 3838, 2815, 3837, 2742, 2745, 3651, 2754, 3819, 3764,
	2011, 3523, 3745, 3736, 2457, 3716, 3711, 3710, 1664, 1037,
	1224, 1225, 1226, 1223, 3666, 3653, 3652, 2741, 2873, 2801,
	2802, 2727, 2764, 3626, 2804, 3570, 2776, 2716, 624, 2192,
	2811, 2611, 3530, 1132, 1994, 3516, 2774, 3498, 1151, 2013,
	2013, 2013, 2013, 2013, 1230, 1231, 1232, 1233, 1234, 1235,
	1236, 1228, 2640, 1151, 2013, 3496, 1945, 2457, 3493, 3490,
	2190, 2198, 648, 648, 3489, 3468, 2766, 2708, 656, 2793,
	3466, 2769, 3443, 2793, 1507, 3479, 3440, 3437, 2879, 2789,
	2725, 2877, 3328, 3327, 2748, 649, 649, 2709, 2756, 2711,
	3324, 2651, 2652, 3314, 2800, 2898, 8, 2657, 7, 3307,
	2762, 3478, 1224, 1225, 1226, 1223, 1224, 1225, 1226, 1223,
	2898, 3291, 3289, 3217, 2775, 3423, 2778, 3216, 3211, 2827,
	2828, 3205, 3204, 2791, 3123, 3286, 3084, 2797, 1224, 1225,
	1226, 1223, 2915, 3083, 2843, 2844, 2803, 1224, 1225, 1226,
	1223, 214, 1224, 1225, 1226, 1223, 214, 1224, 1225, 1226,
	1223, 1868, 1224, 1225, 1226, 1223, 1224, 1225, 1226, 1223,
	2881, 3079, 2835, 3077, 3075, 3072, 2765, 3070, 1778, 2847,
	1778, 2260, 3004, 2976, 3028, 2770, 2771, 3001, 2959, 2944,
	2933, 2772, 2866, 2858, 2848, 2846, 2989, 134, 134, 134,
	1035, 2794, 1507, 2842, 2880, 2996, 2841, 2840, 2695, 2886,
	2687, 1224, 1225, 1226, 1223, 2683, 2899, 2900, 2901, 2902,
	2903, 1545, 1545, 828, 827, 3811, 2916, 2913, 2580, 2273,
	2266, 2105, 2918, 2950, 2883, 656, 2098, 1834, 2954, 1833,
	3027, 1618, 1303, 2934, 1299, 1489, 1298, 1136, 2931, 1247,
	1248, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1239, 1823,
	3026, 895, 3799, 2917, 2975, 3795, 2971, 1224, 1225, 1226,
	1223, 1578, 1579, 1256, 3647, 3646, 197, 2982, 188, 159,
	1037, 3635, 1571, 3492, 3477, 2927, 3355, 1224, 1225, 1226,
	1223, 1037, 1572, 1573, 3018, 3354, 3020, 1586, 1583, 3353,
	3321, 1587, 3074, 3303, 2948, 2993, 3301, 3300, 2952, 3078,
	3297, 2951, 3296, 3081, 3082, 3290, 3288, 3272, 3262, 2973,
	2998, 1151, 2667, 2969, 2972, 3261, 2967, 3100, 3247, 2983,
	3246, 2986, 2974, 3152, 3087, 2666, 2985, 3116, 3062, 2984,
	3030, 3023, 649, 3015, 3014, 3008, 2992, 193, 2788, 1224,
	1225, 1226, 1223, 2942, 3132, 1151, 2705, 2555, 649, 3005,
	1151, 1151, 1224, 1225, 1226, 1223, 2665, 2551, 3012, 2013,
	2314, 2550, 3150, 2234, 2227, 3006, 2221, 2220, 2219, 3021,
	3022, 2218, 2216, 2212, 3064, 1676, 1677, 1678, 1679, 1680,
	3019, 2377, 2211, 1224, 1225, 1226, 1223, 2209, 2200, 2197,
	3126, 2196, 2104, 3176, 3086, 3179, 1817, 3179, 3179, 1816,
	1815, 1781, 1151, 3016, 3017, 2664, 1780, 1771, 197, 1341,
	1519, 1517, 3887, 1293, 3794, 3731, 3718, 1721, 3069, 3713,
	3200, 1725, 1726, 1727, 1728, 1566, 3196, 3068, 1507, 1507,
	1762, 2663, 1224, 1225, 1226, 1223, 3135, 3604, 1772, 3198,
	3587, 3139, 3583, 3085, 3163, 3165, 3561, 3545, 1037, 3453,
	1037, 3451, 3421, 3420, 2741, 1037, 3201, 3202, 1224, 1225,
	1226, 1223, 3417, 3416, 1505, 1505, 3382, 3159, 3154, 3148,
	3125, 1468, 3379, 3377, 3344, 649, 1577, 3174, 1568, 193,
	1582, 1037, 3100, 3134, 3145, 1585, 1574, 3149, 3137, 3138,
	1824, 1471, 1406, 1034, 1994, 1994, 2874, 3184, 1036, 2799,
	2750, 3175, 3158, 2749, 2347, 2346, 2743, 3153, 3809, 2662,
	3037, 3038, 3155, 3156, 2710, 2668, 3039, 3040, 3041, 3042,
	2565, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051,
	3052, 2474, 3180, 3181, 2419, 3185, 1224, 1225, 1226, 1223,
	2315, 2287, 2254, 1706, 1151, 1250, 193, 1254, 2634, 2064,
	1858, 1830, 2914, 2661, 1649, 1600, 1575, 3260, 1516, 3206,
	2660, 1352, 655, 1251, 1253, 1249, 1896, 1252, 1238, 1237,
	1247, 1248, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1239,
	1224, 1225, 1226, 1223, 1337, 1333, 1332, 1224, 1225, 1226,
	1223, 1912, 1331, 1330, 134, 2610, 1329, 1328, 3225, 3226,
	3212, 2492, 1327, 649, 3213, 1326, 3219, 1325, 3218, 1324,
	1323, 1322, 1321, 3215, 3223, 1320, 1319, 3157, 3236, 1238,
	1237, 1247, 1248, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
	1239, 1318, 1317, 1316, 1315, 3240, 2659, 3182, 3227, 1314,
	1313, 1312, 3243, 3244, 3245, 1311, 1310, 648, 1140, 1824,
	1309, 1306, 1305, 1304, 1824, 1824, 1302, 3239, 1149, 3249,
	2658, 3255, 134, 1224, 1225, 1226, 1223, 1301, 1300, 134,
	1297, 1290, 1289, 2076, 3311, 1287, 1286, 3313, 1285, 1284,
	1283, 1177, 134, 1282, 1281, 134, 134, 1224, 1225, 1226,
	1223, 1280, 3275, 1279, 3278, 1278, 3807, 2655, 134, 1277,
	2618, 3292, 1276, 1271, 2084, 3279, 1270, 2087, 3805, 2654,
	2090, 3273, 1269, 2092, 2653, 1268, 1188, 1134, 3418, 649,
	1994, 2319, 3274, 3284, 1224, 1225, 1226, 1223, 2301, 3917,
	3348, 1176, 2647, 3232, 3233, 3315, 1224, 1225, 1226, 1223,
	3915, 1224, 1225, 1226, 1223, 3874, 2457, 2013, 3367, 3235,
	2731, 3703, 2637, 2485, 2107, 1187, 2906, 3238, 3304, 1224,
	1225, 1226, 1223, 3237, 2907, 2910, 2613, 2905, 2134, 3308,
	2911, 3385, 3310, 3566, 1151, 2904, 118, 64, 3320, 1224,
	1225, 1226, 1223, 3176, 2908, 3323, 63, 1151, 2578, 2909,
	1719, 2568, 1037, 1224, 1225, 1226, 1223, 1400, 1151, 1037,
	3432, 1886, 1887, 3337, 1507, 1238, 1237, 1247, 1248, 1240,
	1241, 1242, 1243, 1244, 1245, 1246, 1239, 1224, 1225, 1226,
	1223, 3121, 3369, 649, 3339, 1994, 1881, 1882, 1883, 1151,
	3455, 3386, 3434, 2912, 2988, 2448, 2449, 2387, 3456, 3415,
	1505, 2823, 651, 652, 3425, 3428, 3276, 3277, 2824, 2825,
	2826, 3250, 653, 3365, 1983, 2811, 3372, 3366, 214, 1560,
	2563, 3345, 3346, 3347, 3376, 2602, 3378, 3351, 3352, 1613,
	3172, 1151, 3173, 2184, 3444, 3447, 1594, 2189, 2583, 2584,
	2274, 2066, 3424, 3427, 3457, 1182, 2898, 3454, 3095, 3408,
	3368, 3422, 3431, 3088, 2437, 2777, 2751, 2339, 3926, 3371,
	2310, 1890, 3436, 3438, 1857, 3439, 3715, 3445, 3442, 3203,
	3494, 1767, 1766, 3449, 2431, 3446, 3448, 2426, 2201, 3501,
	1995, 3441, 1463, 1151, 1348, 1349, 2208, 1462, 2898, 1215,
	3475, 2443, 2447, 2448, 2449, 2444, 2451, 2445, 2450, 3242,
	3461, 2446, 1346, 1347, 2936, 1151, 1507, 1507, 2225, 2275,
	3471, 3132, 2136, 2230, 2231, 2232, 3472, 1415, 2235, 2236,
	2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 3538, 1391,
	3538, 3499, 3500, 1438, 3528, 1344, 1345, 3894, 1151, 3555,
	1151, 3892, 1505, 1717, 3852, 3532, 3533, 3558, 3829, 3560,
	1342, 1343, 3828, 3826, 3771, 3732, 3618, 1507, 3617, 3556,
	3467, 3507, 3526, 2012, 1466, 3508, 3503, 3506, 3293, 3269,
	3268, 1477, 3529, 3253, 3517, 649, 2372, 1151, 1151, 2342,
	1615, 1151, 1151, 3252, 2946, 1413, 3531, 3919, 3918, 3918,
	3543, 1513, 3542, 1717, 3312, 1670, 2991, 1670, 2693, 3369,
	3554, 3606, 2303, 3535, 3601, 2199, 1356, 1173, 3459, 3919,
	3585, 3564, 1892, 3415, 3615, 3591, 3592, 1037, 3248, 3602,
	3603, 3567, 3571, 3621, 3622, 1148, 2121, 886, 887, 888,
	889, 1430, 1148, 72, 3526, 3526, 1507, 134, 3526, 3526,
	134, 134, 2, 134, 3563, 201, 3, 3612, 3488, 3938,
	3939, 1, 2674, 1828, 3569, 1350, 3648, 890, 885, 1483,
	2466, 2046, 3611, 3408, 3633, 1511, 3641, 3552, 3553, 1832,
	3613, 892, 1505, 2920, 2443, 2447, 2448, 2449, 2444, 2451,
	2445, 2450, 2921, 1035, 2446, 3241, 134, 2923, 3607, 3628,
	2696, 2156, 2887, 2424, 1035, 3636, 3632, 2291, 3640, 3115,
	1401, 952, 945, 1773, 1630, 1059, 3684, 1165, 1627, 1164,
	134, 3480, 3678, 3481, 1162, 1722, 775, 2110, 2875, 2849,
	3614, 3925, 1151, 3954, 3608, 3886, 3928, 1647, 3609, 759,
	3665, 3701, 1824, 3820, 1824, 3737, 3890, 3739, 3631, 2161,
	3707, 1220, 3672, 2968, 970, 816, 786, 1288, 3679, 1606,
	3035, 3475, 3680, 1824, 1824, 3681, 3033, 1061, 785, 3334,
	3693, 2721, 3697, 3619, 2939, 1151, 3686, 1058, 971, 2093,
	1507, 3734, 3629, 1561, 1565, 2338, 3694, 3790, 3565, 1670,
	3168, 2785, 1589, 3785, 3559, 1545, 3676, 3380, 3484, 3714,
	3482, 1256, 3483, 692, 2025, 622, 1019, 3605, 3725, 2106,
	1037, 693, 2318, 3723, 3843, 3717, 1505, 925, 2300, 926,
	918, 2739, 2738, 1687, 1229, 1704, 3760, 3053, 3054, 3750,
	1266, 731, 3526, 2186, 2718, 3403, 2932, 71, 70, 69,
	68, 222, 1151, 3733, 777, 2573, 221, 2576, 1238, 1237,
	1247, 1248, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1239,
	3649, 3521, 3772, 3816, 3930, 757, 756, 755, 754, 753,
	3767, 752, 2442, 2441, 2439, 2438, 2008, 2007, 2073, 3758,
	3130, 3763, 2814, 3766, 2809, 1934, 1932, 1475, 2367, 1151,
	3789, 2374, 3774, 1931, 3871, 3800, 3801, 1507, 3582, 3526,
	3814, 2859, 3817, 3783, 3474, 3804, 3806, 3808, 3810, 1880,
	2363, 2615, 1951, 3788, 2621, 3726, 3818, 3797, 2830, 1948,
	1947, 2635, 2636, 2822, 3578, 3813, 3572, 3803, 1979, 2638,
	2639, 3682, 3537, 1505, 3387, 3388, 3394, 2309, 1084, 1080,
	1082, 3825, 1083, 3823, 1507, 2644, 3526, 3684, 1081, 2623,
	3221, 2344, 3090, 2283, 2282, 2280, 2279, 3836, 1376, 3759,
	3839, 3502, 1874, 3862, 2490, 2488, 3851, 1879, 1131, 3870,
	3234, 3230, 3854, 1676, 1824, 2118, 3855, 3853, 2132, 2987,
	1505, 3856, 3857, 2009, 3773, 2005, 2004, 2889, 2432, 3777,
	3778, 3656, 1885, 919, 2298, 41, 115, 105, 176, 56,
	3879, 175, 3880, 55, 3881, 113, 3882, 173, 54, 3883,
	3893, 100, 3895, 3896, 99, 112, 171, 3891, 3889, 53,
	3798, 206, 205, 1151, 3750, 3898, 208, 207, 204, 2541,
	2542, 203, 1549, 202, 3830, 1929, 1930, 3541, 880, 44,
	43, 177, 42, 3907, 106, 3909, 57, 3707, 40, 39,
	2767, 2768, 3908, 3910, 3557, 3916, 3924, 3913, 3932, 3914,
	38, 3931, 34, 13, 12, 3920, 3921, 3922, 3923, 35,
	22, 21, 1634, 20, 26, 3943, 32, 1151, 3936, 31,
	3905, 127, 126, 30, 125, 124, 3944, 123, 3945, 122,
	121, 3947, 120, 2053, 3789, 29, 19, 3953, 3956, 2053,
	2053, 2053, 3031, 48, 47, 2460, 46, 9, 1238, 1237,
	1247, 1248, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1239,
	116, 3963, 111, 197, 61, 188, 159, 109, 28, 3932,
	3970, 110, 3931, 3969, 1670, 107, 103, 101, 83, 3956,
	3971, 189, 82, 81, 3392, 3975, 96, 95, 180, 3900,
	3901, 94, 190, 93, 92, 91, 1238, 1237, 1247, 1248,
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1239, 89, 2012,
	90, 132, 969, 197, 61, 188, 159, 80, 134, 79,
	78, 77, 76, 98, 3404, 104, 119, 102, 87, 97,
	88, 189, 86, 85, 193, 84, 75, 3395, 180, 2183,
	74, 73, 190, 157, 156, 155, 154, 153, 3390, 151,
	152, 150, 149, 3412, 3413, 148, 147, 146, 145, 3391,
	49, 132, 50, 1238, 1237, 1247, 1248, 1240, 1241, 1242,
	1243, 1244, 1245, 1246, 1239, 51, 119, 52, 167, 166,
	168, 170, 172, 169, 193, 174, 164, 162, 165, 163,
	161, 66, 11, 114, 18, 25, 3396, 4, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2953, 0, 2955,
	0, 141, 142, 0, 143, 144, 1238, 1237, 1247, 1248,
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1239, 1824, 0,
	0, 0, 0, 1824, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 142, 0, 143, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3007,
	0, 0, 0, 158, 186, 195, 187, 117, 0, 0,
	0, 0, 3411, 0, 2353, 0, 0, 0, 0, 0,
	0, 0, 0, 3029, 0, 0, 185, 179, 178, 0,
	0, 0, 0, 67, 0, 0, 0, 0, 0, 3400,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 158, 186, 195, 187, 117, 0, 0,
	134, 3397, 3401, 3399, 3398, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 185, 179, 178, 0,
	0, 0, 0, 67, 0, 0, 0, 0, 0, 0,
	0, 2288, 2289, 2290, 181, 182, 183, 0, 0, 0,
	0, 3406, 3407, 0, 0, 0, 2305, 2306, 2307, 2308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 181, 182, 183, 0, 128, 3414,
	0, 0, 184, 0, 129, 0, 0, 0, 0, 0,
	0, 3393, 0, 0, 0, 0, 0, 3405, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 3183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2012, 2012, 2012, 2012, 2012, 128, 0,
	0, 0, 184, 0, 129, 0, 0, 0, 2012, 0,
	0, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1980, 0, 0, 0, 0,
	1941, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 60, 0, 1513, 0, 0, 0,
	1983, 1950, 0, 0, 0, 0, 0, 0, 0, 2053,
	1984, 1985, 0, 0, 0, 134, 0, 3410, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 138, 194,
	0, 139, 140, 0, 0, 0, 1949, 160, 0, 0,
	0, 134, 58, 62, 704, 703, 710, 700, 0, 0,
	0, 0, 134, 1957, 0, 0, 707, 708, 0, 709,
	713, 0, 0, 694, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 718, 0, 0, 0, 0, 138, 194,
	0, 139, 140, 0, 0, 0, 0, 160, 0, 0,
	0, 0, 58, 0, 3409, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 45,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 5,
	0, 1973, 0, 0, 0, 0, 0, 0, 3285, 135,
	136, 0, 0, 137, 0, 3287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 45,
	0, 0, 0, 0, 0, 59, 3302, 0, 0, 0,
	1980, 0, 0, 0, 0, 1941, 0, 0, 0, 135,
	136, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1940, 1942, 1939, 0, 0, 1936, 0,
	0, 0, 0, 1961, 0, 1983, 1950, 0, 0, 0,
	0, 0, 0, 0, 1967, 1984, 1985, 0, 0, 1035,
	0, 134, 1952, 0, 1935, 0, 134, 0, 0, 0,
	0, 0, 0, 2012, 1955, 1989, 0, 0, 1956, 1958,
	1960, 1949, 1962, 1963, 1964, 1968, 1969, 1970, 1972, 1975,
	1976, 1977, 134, 0, 0, 0, 0, 0, 1957, 1965,
	1974, 1966, 2755, 0, 695, 697, 696, 0, 0, 0,
	0, 1944, 0, 0, 0, 702, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 706, 0, 0,
	0, 0, 0, 0, 721, 1981, 0, 0, 0, 0,
	0, 699, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1824, 0,
	0, 0, 1937, 1938, 0, 0, 1973, 0, 0, 0,
	0, 0, 1824, 0, 0, 3450, 0, 0, 3452, 0,
	1978, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3458, 0, 1954, 0, 0,
	0, 0, 0, 0, 1953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1971, 0,
	0, 0, 0, 0, 0, 0, 0, 1959, 1940, 2780,
	1939, 0, 0, 2779, 0, 0, 0, 0, 1961, 0,
	1987, 1986, 0, 701, 705, 711, 0, 712, 714, 1967,
	0, 715, 716, 717, 0, 0, 719, 720, 0, 0,
	0, 1224, 1225, 1226, 1223, 2937, 2938, 0, 0, 1955,
	1989, 0, 0, 1956, 1958, 1960, 0, 1962, 1963, 1964,
	1968, 1969, 1970, 1972, 1975, 1976, 1977, 0, 0, 0,
	0, 0, 0, 1946, 1965, 1974, 1966, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1944, 0, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1981, 0, 0, 0, 0, 0, 1982, 0, 0, 1988,
	1751, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1937, 1938, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1978, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1954, 134, 0, 0, 0, 0, 0, 1953,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 698, 0, 0, 0, 0, 0, 0,
	0, 0, 1103, 1971, 0, 0, 0, 0, 0, 0,
	0, 0, 1959, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1987, 1986, 0, 0, 0,
	0, 2012, 0, 1111, 1115, 1117, 1119, 1121, 1122, 1124,
	3673, 1129, 1125, 1126, 1127, 1128, 0, 1106, 1107, 1108,
	1109, 1086, 1087, 1112, 0, 1089, 0, 1091, 1092, 1093,
	1094, 1090, 1095, 1096, 1097, 1098, 1099, 1102, 1104, 1100,
	1101, 1110, 0, 0, 0, 0, 0, 0, 1946, 1114,
	1116, 1118, 1120, 1123, 0, 0, 0, 1747, 0, 0,
	0, 0, 3124, 0, 1744, 0, 0, 0, 1746, 1743,
	1745, 1749, 1750, 0, 0, 0, 1748, 0, 3136, 0,
	0, 0, 1751, 0, 0, 0, 0, 0, 1105, 0,
	0, 1982, 0, 0, 1988, 1088, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 1111, 1115, 1117, 1119, 1121,
	1122, 1124, 0, 1129, 1125, 1126, 1127, 1128, 1275, 1106,
	1107, 1108, 1109, 1086, 1087, 1112, 1103, 1089, 0, 1091,
	1092, 1093, 1094, 1090, 1095, 1096, 1097, 1098, 1099, 1102,
	1104, 1100, 1101, 1110, 0, 0, 0, 0, 0, 0,
	0, 1114, 1116, 1118, 1120, 1123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3796, 0, 0, 0,
	1105, 0, 0, 0, 0, 2053, 0, 0, 134, 1732,
	1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742,
	1754, 1755, 1756, 1757, 1758, 1759, 1752, 1753, 0, 2619,
	2620, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1747,
	0, 0, 0, 0, 0, 0, 1744, 0, 0, 1088,
	1746, 1743, 1745, 1749, 1750, 0, 0, 0, 1748, 0,
	0, 0, 0, 0, 0, 0, 0, 3867, 0, 1111,
	1115, 1117, 1119, 1121, 1122, 1124, 0, 1129, 1125, 1126,
	1127, 1128, 0, 1106, 1107, 1108, 1109, 1086, 1087, 1112,
	0, 1089, 0, 1091, 1092, 1093, 1094, 1090, 1095, 1096,
	1097, 1098, 1099, 1102, 1104, 1100, 1101, 1110, 0, 0,
	0, 0, 0, 0, 0, 1114, 1116, 1118, 1120, 1123,
	0, 0, 0, 3281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 3867, 0, 0, 0, 0,
	0, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740,
	1741, 1742, 1754, 1755, 1756, 1757, 1758, 1759, 1752, 1753,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 793, 0, 0, 0, 0, 0, 0, 0, 0,
	388, 0, 513, 546, 535, 619, 501, 0, 0, 2053,
	0, 3973, 0, 746, 0, 0, 0, 328, 0, 0,
	358, 550, 532, 542, 533, 518, 519, 520, 527, 338,
	521, 522, 523, 493, 524, 494, 525, 526, 784, 549,
	500, 418, 372, 567, 566, 0, 1113, 851, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 738, 0, 0, 774, 828, 827, 761, 771, 0,
	0, 301, 220, 495, 615, 497, 496, 762, 0, 763,
	767, 770, 766, 764, 765, 0, 843, 0, 0, 0,
	0, 0, 0, 730, 742, 0, 747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2053, 0, 0, 0, 0, 0, 0,
	739, 740, 0, 0, 0, 0, 794, 0, 741, 0,
	0, 789, 768, 772, 0, 0, 0, 0, 291, 424,
	441, 302, 414, 454, 307, 421, 297, 387, 411, 0,
	0, 293, 439, 420, 369, 348, 349, 292, 0, 406,
	326, 340, 323, 385, 769, 792, 796, 322, 865, 790,
	449, 295, 0, 448, 384, 435, 440, 370, 364, 0,
	294, 437, 368, 363, 352, 330, 866, 353, 354, 344,
	396, 362, 397, 345, 374, 373, 375, 0, 0, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 0, 0,
	1113, 0, 0, 0, 0, 0, 0, 608, 787, 0,
	612, 0, 451, 0, 0, 849, 0, 0, 0, 423,
	0, 0, 355, 0, 0, 0, 791, 0, 409, 390,
	862, 0, 0, 407, 360, 436, 398, 442, 425, 450,
	403, 399, 286, 426, 325, 371, 298, 300, 320, 327,
	329, 331, 332, 380, 381, 393, 413, 427, 428, 429,
	324, 308, 408, 309, 342, 310, 287, 316, 314, 317,
	415, 318, 289, 394, 433, 0, 337, 404, 367, 290,
	366, 395, 432, 431, 299, 458, 464, 465, 554, 0,
	470, 637, 638, 639, 479, 3590, 400, 484, 485, 486,
	488, 489, 490, 491, 555, 572, 539, 509, 472, 563,
	506, 510, 511, 575, 1775, 1774, 1776, 463, 356, 357,
	0, 335, 283, 284, 632, 847, 386, 577, 610, 611,
	502, 0, 861, 842, 844, 845, 848, 852, 853, 854,
	855, 856, 858, 860, 864, 631, 0, 556, 571, 635,
	570, 627, 392, 0, 412, 568, 515, 0, 560, 534,
	0, 561, 530, 565, 0, 504, 0, 419, 444, 456,
	473, 476, 505, 590, 591, 592, 288, 475, 594, 595,
	596, 597, 598, 599, 600, 593, 863, 537, 514, 540,
	455, 517, 516, 0, 0, 551, 795, 552, 553, 376,
	377, 378, 379, 850, 578, 306, 474, 402, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 544,
	541, 640, 0, 601, 602, 0, 0, 468, 469, 334,
	341, 487, 343, 305, 391, 336, 453, 350, 0, 480,
	545, 481, 604, 607, 605, 606, 383, 346, 347, 416,
	351, 361, 405, 452, 389, 410, 303, 443, 417, 365,
	531, 558, 872, 846, 871, 873, 874, 870, 875, 876,
	857, 751, 0, 802, 868, 867, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 585,
	584, 583, 582, 581, 580, 579, 0, 0, 528, 430,
	315, 277, 311, 312, 319, 628, 625, 434, 629, 630,
	0, 285, 508, 359, 0, 401, 333, 573, 574, 0,
	0, 835, 809, 810, 811, 748, 812, 806, 807, 749,
	808, 836, 800, 832, 833, 776, 803, 813, 831, 814,
	834, 837, 838, 877, 878, 820, 804, 249, 879, 817,
	839, 830, 829, 815, 801, 840, 841, 783, 778, 818,
	819, 805, 823, 824, 825, 750, 797, 798, 799, 821,
	822, 779, 780, 781, 782, 0, 0, 0, 459, 460,
	461, 483, 0, 445, 507, 626, 0, 0, 0, 0,
	0, 0, 0, 557, 569, 603, 0, 613, 614, 616,
	618, 826, 620, 422, 0, 621, 793, 633, 498, 499,
	634, 609, 0, 743, 0, 388, 0, 513, 546, 535,
	619, 501, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 328, 1825, 0, 358, 550, 532, 542, 533,
	518, 519, 520, 527, 338, 521, 522, 523, 493, 524,
	494, 525, 526, 784, 549, 500, 418, 372, 567, 566,
	0, 0, 851, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2037, 0, 0, 738, 0, 0, 774,
	828, 827, 761, 771, 0, 0, 301, 220, 495, 615,
	497, 496, 762, 0, 763, 767, 770, 766, 764, 765,
	0, 843, 0, 0, 0, 0, 0, 0, 730, 742,
	0, 747, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 739, 740, 0, 0, 0,
	0, 794, 0, 741, 0, 0, 2038, 768, 772, 0,
	0, 0, 0, 291, 424, 441, 302, 414, 454, 307,
	421, 297, 387, 411, 0, 0, 293, 439, 420, 369,
	348, 349, 292, 0, 406, 326, 340, 323, 385, 769,
	792, 796, 322, 865, 790, 449, 295, 0, 448, 384,
	435, 440, 370, 364, 0, 294, 437, 368, 363, 352,
	330, 866, 353, 354, 344, 396, 362, 397, 345, 374,
	373, 375, 0, 0, 0, 0, 0, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 787, 0, 612, 0, 451, 0, 0,
	849, 0, 0, 0, 423, 0, 0, 355, 0, 0,
	0, 791, 0, 409, 390, 862, 0, 0, 407, 360,
	436, 398, 442, 425, 450, 403, 399, 286, 426, 325,
	371, 298, 300, 320, 327, 329, 331, 332, 380, 381,
	393, 413, 427, 428, 429, 324, 308, 408, 309, 342,
	310, 287, 316, 314, 317, 415, 318, 289, 394, 433,
	0, 337, 404, 367, 290, 366, 395, 432, 431, 299,
	458, 464, 465, 554, 0, 470, 637, 638, 639, 479,
	0, 400, 484, 485, 486, 488, 489, 490, 491, 555,
	572, 539, 509, 472, 563, 506, 510, 511, 575, 0,
	0, 0, 463, 356, 357, 0, 335, 283, 284, 632,
	847, 386, 577, 610, 611, 502, 0, 861, 842, 844,
	845, 848, 852, 853, 854, 855, 856, 858, 860, 864,
	631, 0, 556, 571, 635, 570, 627, 392, 0, 412,
	568, 515, 0, 560, 534, 0, 561, 530, 565, 0,
	504, 0, 419, 444, 456, 473, 476, 505, 590, 591,
	592, 288, 475, 594, 595, 596, 597, 598, 599, 600,
	593, 863, 537, 514, 540, 455, 517, 516, 0, 0,
	551, 795, 552, 553, 376, 377, 378, 379, 850, 578,
	306, 474, 402, 0, 538, 0, 0, 0, 0, 0,
	0, 0, 0, 543, 544, 541, 640, 0, 601, 602,
	0, 0, 468, 469, 334, 341, 487, 343, 305, 391,
	336, 453, 350, 0, 480, 545, 481, 604, 607, 605,
	606, 383, 346, 347, 416, 351, 361, 405, 452, 389,
	410, 303, 443, 417, 365, 531, 558, 872, 846, 871,
	873, 874, 870, 875, 876, 857, 751, 0, 802, 868,
	867, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 586, 585, 584, 583, 582, 581, 580,
	579, 0, 0, 528, 430, 315, 277, 311, 312, 319,
	628, 625, 434, 629, 630, 0, 285, 508, 359, 0,
	401, 333, 573, 574, 0, 0, 835, 809, 810, 811,
	748, 812, 806, 807, 749, 808, 836, 800, 832, 833,
	776, 803, 813, 831, 814, 834, 837, 838, 877, 878,
	820, 804, 249, 879, 817, 839, 830, 829, 815, 801,
	840, 841, 783, 778, 818, 819, 805, 823, 824, 825,
	750, 797, 798, 799, 821, 822, 779, 780, 781, 782,
	0, 0, 0, 459, 460, 461, 483, 0, 445, 507,
	626, 0, 0, 0, 0, 0, 0, 0, 557, 569,
	603, 0, 613, 614, 616, 618, 826, 620, 422, 0,
	621, 0, 633, 498, 499, 634, 609, 0, 743, 197,
	793, 0, 0, 0, 0, 0, 0, 0, 0, 388,
	0, 513, 546, 535, 619, 501, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 328, 0, 0, 358,
	550, 532, 542, 533, 518, 519, 520, 527, 338, 521,
	522, 523, 493, 524, 494, 525, 526, 1259, 549, 500,
	418, 372, 567, 566, 0, 0, 851, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	738, 0, 0, 774, 828, 827, 761, 771, 0, 0,
	301, 220, 495, 615, 497, 496, 762, 0, 763, 767,
	770, 766, 764, 765, 0, 843, 0, 0, 0, 0,
	0, 0, 730, 742, 0, 747, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 739,
	740, 0, 0, 0, 0, 794, 0, 741, 0, 0,
	789, 768, 772, 0, 0, 0, 0, 291, 424, 441,
	302, 414, 454, 307, 421, 297, 387, 411, 0, 0,
	293, 439, 420, 369, 348, 349, 292, 0, 406, 326,
	340, 323, 385, 769, 792, 796, 322, 865, 790, 449,
	295, 0, 448, 384, 435, 440, 370, 364, 0, 294,
	437, 368, 363, 352, 330, 866, 353, 354, 344, 396,
	362, 397, 345, 374, 373, 375, 0, 0, 0, 0,
	0, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 608, 787, 0, 612,
	0, 451, 0, 0, 849, 0, 0, 0, 423, 0,
	0, 355, 0, 0, 0, 791, 0, 409, 390, 862,
	0, 0, 407, 360, 436, 398, 442, 425, 450, 403,
	399, 286, 426, 325, 371, 298, 300, 320, 327, 329,
	331, 332, 380, 381, 393, 413, 427, 428, 429, 324,
	308, 408, 309, 342, 310, 287, 316, 314, 317, 415,
	318, 289, 394, 433, 0, 337, 404, 367, 290, 366,
	395, 432, 431, 299, 458, 464, 465, 554, 0, 470,
	637, 638, 639, 479, 0, 400, 484, 485, 486, 488,
	489, 490, 491, 555, 572, 539, 509, 472, 563, 506,
	510, 511, 575, 0, 0, 0, 463, 356, 357, 0,
	335, 283, 284, 632, 847, 386, 577, 610, 611, 502,
	0, 861, 842, 844, 845, 848, 852, 853, 854, 855,
	856, 858, 860, 864, 631, 0, 556, 571, 635, 570,
	627, 392, 0, 412, 568, 515, 0, 560, 534, 0,
	561, 530, 565, 0, 504, 0, 419, 444, 456, 473,
	476, 505, 590, 591, 592, 288, 475, 594, 595, 596,
	597, 598, 599, 600, 593, 863, 537, 514, 540, 455,
	517, 516, 0, 0, 551, 795, 552, 553, 376, 377,
	378, 379, 850, 578, 306, 474, 402, 0, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 543, 544, 541,
	640, 0, 601, 602, 0, 0, 468, 469, 334, 341,
	487, 343, 305, 391, 336, 453, 350, 0, 480, 545,
	481, 604, 607, 605, 606, 383, 346, 347, 416, 351,
	361, 405, 452, 389, 410, 303, 443, 417, 365, 531,
	558, 872, 846, 871, 873, 874, 870, 875, 876, 857,
	751, 0, 802, 868, 867, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 586, 585, 584,
	583, 582, 581, 580, 579, 0, 0, 528, 430, 315,
	277, 311, 312, 319, 628, 625, 434, 629, 630, 0,
	285, 508, 359, 160, 401, 333, 573, 574, 0, 0,
	835, 809, 810, 811, 748, 812, 806, 807, 749, 808,
	836, 800, 832, 833, 776, 803, 813, 831, 814, 834,
	837, 838, 877, 878, 820, 804, 249, 879, 817, 839,
	830, 829, 815, 801, 840, 841, 783, 778, 818, 819,
	805, 823, 824, 825, 750, 797, 798, 799, 821, 822,
	779, 780, 781, 782, 0, 0, 0, 459, 460, 461,
	483, 0, 445, 507, 626, 0, 0, 0, 0, 0,
	0, 0, 557, 569, 603, 0, 613, 614, 616, 618,
	826, 620, 422, 0, 621, 793, 633, 498, 499, 634,
	609, 0, 743, 0, 388, 0, 513, 546, 535, 619,
	501, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 328, 3972, 0, 358, 550, 532, 542, 533, 518,
	519, 520, 527, 338, 521, 522, 523, 493, 524, 494,
	525, 526, 784, 549, 500, 418, 372, 567, 566, 0,
	0, 851, 859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 738, 0, 0, 774, 828,
	827, 761, 771, 0, 0, 301, 220, 495, 615, 497,
	496, 762, 0, 763, 767, 770, 766, 764, 765, 0,
	843, 0, 0, 0, 0, 0, 0, 730, 742, 0,
	747, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 739, 740, 0, 0, 0, 0,
	794, 0, 741, 0, 0, 789, 768, 772, 0, 0,
	0, 0, 291, 424, 441, 302, 414, 454, 307, 421,
	297, 387, 411, 0, 0, 293, 439, 420, 369, 348,
	349, 292, 0, 406, 326, 340, 323, 385, 769, 792,
	796, 322, 865, 790, 449, 295, 0, 448, 384, 435,
	440, 370, 364, 0, 294, 437, 368, 363, 352, 330,
	866, 353, 354, 344, 396, 362, 397, 345, 374, 373,
	375, 0, 0, 0, 0, 0, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 787, 0, 612, 0, 451, 0, 0, 849,
	0, 0, 0, 423, 0, 0, 355, 0, 0, 0,
	791, 0, 409, 390, 862, 0, 0, 407, 360, 436,
	398, 442, 425, 450, 403, 399, 286, 426, 325, 371,
	298, 300, 320, 327, 329, 331, 332, 380, 381, 393,
	413, 427, 428, 429, 324, 308, 408, 309, 342, 310,
	287, 316, 314, 317, 415, 318, 289, 394, 433, 0,
	337, 404, 367, 290, 366, 395, 432, 431, 299, 458,
	464, 465, 554, 0, 470, 637, 638, 639, 479, 0,
	400, 484, 485, 486, 488, 489, 490, 491, 555, 572,
	539, 509, 472, 563, 506, 510, 511, 575, 0, 0,
	0, 463, 356, 357, 0, 335, 283, 284, 632, 847,
	386, 577, 610, 611, 502, 0, 861, 842, 844, 845,
	848, 852, 853, 854, 855, 856, 858, 860, 864, 631,
	0, 556, 571, 635, 570, 627, 392, 0, 412, 568,
	515, 0, 560, 534, 0, 561, 530, 565, 0, 504,
	0, 419, 444, 456, 473, 476, 505, 590, 591, 592,
	288, 475, 594, 595, 596, 597, 598, 599, 600, 593,
	863, 537, 514, 540, 455, 517, 516, 0, 0, 551,
	795, 552, 553, 376, 377, 378, 379, 850, 578, 306,
	474, 402, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 544, 541, 640, 0, 601, 602, 0,
	0, 468, 469, 334, 341, 487, 343, 305, 391, 336,
	453, 350, 0, 480, 545, 481, 604, 607, 605, 606,
	383, 346, 347, 416, 351, 361, 405, 452, 389, 410,
	303, 443, 417, 365, 531, 558, 872, 846, 871, 873,
	874, 870, 875, 876, 857, 751, 0, 802, 868, 867,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 585, 584, 583, 582, 581, 580, 579,
	0, 0, 528, 430, 315, 277, 311, 312, 319, 628,
	625, 434, 629, 630, 0, 285, 508, 359, 0, 401,
	333, 573, 574, 0, 0, 835, 809, 810, 811, 748,
	812, 806, 807, 749, 808, 836, 800, 832, 833, 776,
	803, 813, 831, 814, 834, 837, 838, 877, 878, 820,
	804, 249, 879, 817, 839, 830, 829, 815, 801, 840,
	841, 783, 778, 818, 819, 805, 823, 824, 825, 750,
	797, 798, 799, 821, 822, 779, 780, 781, 782, 0,
	0, 0, 459, 460, 461, 483, 0, 445, 507, 626,
	0, 0, 0, 0, 0, 0, 0, 557, 569, 603,
	0, 613, 614, 616, 618, 826, 620, 422, 0, 621,
	793, 633, 498, 499, 634, 609, 0, 743, 0, 388,
	0, 513, 546, 535, 619, 501, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 328, 0, 0, 358,
	550, 532, 542, 533, 518, 519, 520, 527, 338, 521,
	522, 523, 493, 524, 494, 525, 526, 784, 549, 500,
	418, 372, 567, 566, 0, 0, 851, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	738, 0, 0, 774, 828, 827, 761, 771, 0, 0,
	301, 220, 495, 615, 497, 496, 762, 0, 763, 767,
	770, 766, 764, 765, 0, 843, 0, 0, 0, 0,
	0, 0, 730, 742, 0, 747, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 739,
	740, 0, 0, 0, 0, 794, 0, 741, 0, 0,
	789, 768, 772, 0, 0, 0, 0, 291, 424, 441,
	302, 414, 454, 307, 421, 297, 387, 411, 0, 0,
	293, 439, 420, 369, 348, 349, 292, 0, 406, 326,
	340, 323, 385, 769, 792, 796, 322, 865, 790, 449,
	295, 0, 448, 384, 435, 440, 370, 364, 0, 294,
	437, 368, 363, 352, 330, 866, 353, 354, 344, 396,
	362, 397, 345, 374, 373, 375, 0, 0, 0, 0,
	0, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 608, 787, 0, 612,
	0, 451, 0, 0, 849, 0, 0, 0, 423, 0,
	0, 355, 0, 0, 0, 791, 0, 409, 390, 862,
	3868, 0, 407, 360, 436, 398, 442, 425, 450, 403,
	399, 286, 426, 325, 371, 298, 300, 320, 327, 329,
	331, 332, 380, 381, 393, 413, 427, 428, 429, 324,
	308, 408, 309, 342, 310, 287, 316, 314, 317, 415,
	318, 289, 394, 433, 0, 337, 404, 367, 290, 366,
	395, 432, 431, 299, 458, 464, 465, 554, 0, 470,
	637, 638, 639, 479, 0, 400, 484, 485, 486, 488,
	489, 490, 491, 555, 572, 539, 509, 472, 563, 506,
	510, 511, 575, 0, 0, 0, 463, 356, 357, 0,
	335, 283, 284, 632, 847, 386, 577, 610, 611, 502,
	0, 861, 842, 844, 845, 848, 852, 853, 854, 855,
	856, 858, 860, 864, 631, 0, 556, 571, 635, 570,
	627, 392, 0, 412, 568, 515, 0, 560, 534, 0,
	561, 530, 565, 0, 504, 0, 419, 444, 456, 473,
	476, 505, 590, 591, 592, 288, 475, 594, 595, 596,
	597, 598, 599, 600, 593, 863, 537, 514, 540, 455,
	517, 516, 0, 0, 551, 795, 552, 553, 376, 377,
	378, 379, 850, 578, 306, 474, 402, 0, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 543, 544, 541,
	640, 0, 601, 602, 0, 0, 468, 469, 334, 341,
	487, 343, 305, 391, 336, 453, 350, 0, 480, 545,
	481, 604, 607, 605, 606, 383, 346, 347, 416, 351,
	361, 405, 452, 389, 410, 303, 443, 417, 365, 531,
	558, 872, 846, 871, 873, 874, 870, 875, 876, 857,
	751, 0, 802, 868, 867, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 586, 585, 584,
	583, 582, 581, 580, 579, 0, 0, 528, 430, 315,
	277, 311, 312, 319, 628, 625, 434, 629, 630, 0,
	285, 508, 359, 0, 401, 333, 573, 574, 0, 0,
	835, 809, 810, 811, 748, 812, 806, 807, 749, 808,
	836, 800, 832, 833, 776, 803, 813, 831, 814, 834,
	837, 838, 877, 878, 820, 804, 249, 879, 817, 839,
	830, 829, 815, 801, 840, 841, 783, 778, 818, 819,
	805, 823, 824, 825, 750, 797, 798, 799, 821, 822,
	779, 780, 781, 782, 0, 0, 0, 459, 460, 461,
	483, 0, 445, 507, 626, 0, 0, 0, 0, 0,
	0, 0, 557, 569, 603, 0, 613, 614, 616, 618,
	826, 620, 422, 0, 621, 793, 633, 498, 499, 634,
	609, 0, 743, 0, 388, 0, 513, 546, 535, 619,
	501, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 328, 1825, 0, 358, 550, 532, 542, 533, 518,
	519, 520, 527, 338, 521, 522, 523, 493, 524, 494,
	525, 526, 784, 549, 500, 418, 372, 567, 566, 0,
	0, 851, 859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 738, 0, 0, 774, 828,
	827, 761, 771, 0, 0, 301, 220, 495, 615, 497,
	496, 762, 0, 763, 767, 770, 766, 764, 765, 0,
	843, 0, 0, 0, 0, 0, 0, 730, 742, 0,
	747, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 739, 740, 0, 0, 0, 0,
	794, 0, 741, 0, 0, 789, 768, 772, 0, 0,
	0, 0, 291, 424, 441, 302, 414, 454, 307, 421,
	297, 387, 411, 0, 0, 293, 439, 420, 369, 348,
	349, 292, 0, 406, 326, 340, 323, 385, 769, 792,
	796, 322, 865, 790, 449, 295, 0, 448, 384, 435,
	440, 370, 364, 0, 294, 437, 368, 363, 352, 330,
	866, 353, 354, 344, 396, 362, 397, 345, 374, 373,
	375, 0, 0, 0, 0, 0, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 787, 0, 612, 0, 451, 0, 0, 849,
	0, 0, 0, 423, 0, 0, 355, 0, 0, 0,
	791, 0, 409, 390, 862, 0, 0, 407, 360, 436,
	398, 442, 425, 450, 403, 399, 286, 426, 325, 371,
	298, 300, 320, 327, 329, 331, 332, 380, 381, 393,
	413, 427, 428, 429, 324, 308, 408, 309, 342, 310,
	287, 316, 314, 317, 415, 318, 289, 394, 433, 0,
	337, 404, 367, 290, 366, 395, 432, 431, 299, 458,
	464, 465, 554, 0, 470, 637, 638, 639, 479, 0,
	400, 484, 485, 486, 488, 489, 490, 491, 555, 572,
	539, 509, 472, 563, 506, 510, 511, 575, 0, 0,
	0, 463, 356, 357, 0, 335, 283, 284, 632, 847,
	386, 577, 610, 611, 502, 0, 861, 842, 844, 845,
	848, 852, 853, 854, 855, 856, 858, 860, 864, 631,
	0, 556, 571, 635, 570, 627, 392, 0, 412, 568,
	515, 0, 560, 534, 0, 561, 530, 565, 0, 504,
	0, 419, 444, 456, 473, 476, 505, 590, 591, 592,
	288, 475, 594, 595, 596, 597, 598, 599, 600, 593,
	863, 537, 514, 540, 455, 517, 516, 0, 0, 551,
	795, 552, 553, 376, 377, 378, 379, 850, 578, 306,
	474, 402, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 544, 541, 640, 0, 601, 602, 0,
	0, 468, 469, 334, 341, 487, 343, 305, 391, 336,
	453, 350, 0, 480, 545, 481, 604, 607, 605, 606,
	383, 346, 347, 416, 351, 361, 405, 452, 389, 410,
	303, 443, 417, 365, 531, 558, 872, 846, 871, 873,
	874, 870, 875, 876, 857, 751, 0, 802, 868, 867,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 585, 584, 583, 582, 581, 580, 579,
	0, 0, 528, 430, 315, 277, 311, 312, 319, 628,
	625, 434, 629, 630, 0, 285, 508, 359, 0, 401,
	333, 573, 574, 0, 0, 835, 809, 810, 811, 748,
	812, 806, 807, 749, 808, 836, 800, 832, 833, 776,
	803, 813, 831, 814, 834, 837, 838, 877, 878, 820,
	804, 249, 879, 817, 839, 830, 829, 815, 801, 840,
	841, 783, 778, 818, 819, 805, 823, 824, 825, 750,
	797, 798, 799, 821, 822, 779, 780, 781, 782, 0,
	0, 0, 459, 460, 461, 483, 0, 445, 507, 626,
	0, 0, 0, 0, 0, 0, 0, 557, 569, 603,
	0, 613, 614, 616, 618, 826, 620, 422, 0, 621,
	793, 633, 498, 499, 634, 609, 0, 743, 0, 388,
	0, 513, 546, 535, 619, 501, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 328, 0, 0, 358,
	550, 532, 542, 533, 518, 519, 520, 527, 338, 521,
	522, 523, 493, 524, 494, 525, 526, 784, 549, 500,
	418, 372, 567, 566, 0, 0, 851, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	738, 0, 0, 774, 828, 827, 761, 771, 0, 0,
	301, 220, 495, 615, 497, 496, 762, 0, 763, 767,
	770, 766, 764, 765, 0, 843, 0, 0, 0, 0,
	0, 0, 730, 742, 0, 747, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 739,
	740, 1544, 0, 0, 0, 794, 0, 741, 0, 0,
	789, 768, 772, 0, 0, 0, 0, 291, 424, 441,
	302, 414, 454, 307, 421, 297, 387, 411, 0, 0,
	293, 439, 420, 369, 348, 349, 292, 0, 406, 326,
	340, 323, 385, 769, 792, 796, 322, 865, 790, 449,
	295, 0, 448, 384, 435, 440, 370, 364, 0, 294,
	437, 368, 363, 352, 330, 866, 353, 354, 344, 396,
	362, 397, 345, 374, 373, 375, 0, 0, 0, 0,
	0, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 608, 787, 0, 612,
	0, 451, 0, 0, 849, 0, 0, 0, 423, 0,
	0, 355, 0, 0, 0, 791, 0, 409, 390, 862,
	0, 0, 407, 360, 436, 398, 442, 425, 450, 403,
	399, 286, 426, 325, 371, 298, 300, 320, 327, 329,
	331, 332, 380, 381, 393, 413, 427, 428, 429, 324,
	308, 408, 309, 342, 310, 287, 316, 314, 317, 415,
	318, 289, 394, 433, 0, 337, 404, 367, 290, 366,
	395, 432, 431, 299, 458, 464, 465, 554, 0, 470,
	637, 638, 639, 479, 0, 400, 484, 485, 486, 488,
	489, 490, 491, 555, 572, 539, 509, 472, 563, 506,
	510, 511, 575, 0, 0, 0, 463, 356, 357, 0,
	335, 283, 284, 632, 847, 386, 577, 610, 611, 502,
	0, 861, 842, 844, 845, 848, 852, 853, 854, 855,
	856, 858, 860, 864, 631, 0, 556, 571, 635, 570,
	627, 392, 0, 412, 568, 515, 0, 560, 534, 0,
	561, 530, 565, 0, 504, 0, 419, 444, 456, 473,
	476, 505, 590, 591, 592, 288, 475, 594, 595, 596,
	597, 598, 599, 600, 593, 863, 537, 514, 540, 455,
	517, 516, 0, 0, 551, 795, 552, 553, 376, 377,
	378, 379, 850, 578, 306, 474, 402, 0, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 543, 544, 541,
	640, 0, 601, 602, 0, 0, 468, 469, 334, 341,
	487, 343, 305, 391, 336, 453, 350, 0, 480, 545,
	481, 604, 607, 605, 606, 383, 346, 347, 416, 351,
	361, 405, 452, 389, 410, 303, 443, 417, 365, 531,
	558, 872, 846, 871, 873, 874, 870, 875, 876, 857,
	751, 0, 802, 868, 867, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 586, 585, 584,
	583, 582, 581, 580, 579, 0, 0, 528, 430, 315,
	277, 311, 312, 319, 628, 625, 434, 629, 630, 0,
	285, 508, 359, 0, 401, 333, 573, 574, 0, 0,
	835, 809, 810, 811, 748, 812, 806, 807, 749, 808,
	836, 800, 832, 833, 776, 803, 813, 831, 814, 834,
	837, 838, 877, 878, 820, 804, 249, 879, 817, 839,
	830, 829, 815, 801, 840, 841, 783, 778, 818, 819,
	805, 823, 824, 825, 750, 797, 798, 799, 821, 822,
	779, 780, 781, 782, 0, 0, 0, 459, 460, 461,
	483, 0, 445, 507, 626, 0, 0, 0, 0, 0,
	0, 0, 557, 569, 603, 0, 613, 614, 616, 618,
	826, 620, 422, 0, 621, 0, 633, 498, 499, 634,
	609, 793, 743, 0, 2207, 0, 0, 0, 0, 0,
	388, 0, 513, 546, 535, 619, 501, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 328, 0, 0,
	358, 550, 532, 542, 533, 518, 519, 520, 527, 338,
	521, 522, 523, 493, 524, 494, 525, 526, 784, 549,
	500, 418, 372, 567, 566, 0, 0, 851, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 738, 0, 0, 774, 828, 827, 761, 771, 0,
	0, 301, 220, 495, 615, 497, 496, 762, 0, 763,
	767, 770, 766, 764, 765, 0, 843, 0, 0, 0,
	0, 0, 0, 730, 742, 0, 747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	739, 740, 0, 0, 0, 0, 794, 0, 741, 0,
	0, 789, 768, 772, 0, 0, 0, 0, 291, 424,
	441, 302, 414, 454, 307, 421, 297, 387, 411, 0,
	0, 293, 439, 420, 369, 348, 349, 292, 0, 406,
	326, 340, 323, 385, 769, 792, 796, 322, 865, 790,
	449, 295, 0, 448, 384, 435, 440, 370, 364, 0,
	294, 437, 368, 363, 352, 330, 866, 353, 354, 344,
	396, 362, 397, 345, 374, 373, 375, 0, 0, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 787, 0,
	612, 0, 451, 0, 0, 849, 0, 0, 0, 423,
	0, 0, 355, 0, 0, 0, 791, 0, 409, 390,
	862, 0, 0, 407, 360, 436, 398, 442, 425, 450,
	403, 399, 286, 426, 325, 371, 298, 300, 320, 327,
	329, 331, 332, 380, 381, 393, 413, 427, 428, 429,
	324, 308, 408, 309, 342, 310, 287, 316, 314, 317,
	415, 318, 289, 394, 433, 0, 337, 404, 367, 290,
	366, 395, 432, 431, 299, 458, 464, 465, 554, 0,
	470, 637, 638, 639, 479, 0, 400, 484, 485, 486,
	488, 489, 490, 491, 555, 572, 539, 509, 472, 563,
	506, 510, 511, 575, 0, 0, 0, 463, 356, 357,
	0, 335, 283, 284, 632, 847, 386, 577, 610, 611,
	502, 0, 861, 842, 844, 845, 848, 852, 853, 854,
	855, 856, 858, 860, 864, 631, 0, 556, 571, 635,
	570, 627, 392, 0, 412, 568, 515, 0, 560, 534,
	0, 561, 530, 565, 0, 504, 0, 419, 444, 456,
	473, 476, 505, 590, 591, 592, 288, 475, 594, 595,
	596, 597, 598, 599, 600, 593, 863, 537, 514, 540,
	455, 517, 516, 0, 0, 551, 795, 552, 553, 376,
	377, 378, 379, 850, 578, 306, 474, 402, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 544,
	541, 640, 0, 601, 602, 0, 0, 468, 469, 334,
	341, 487, 343, 305, 391, 336, 453, 350, 0, 480,
	545, 481, 604, 607, 605, 606, 383, 346, 347, 416,
	351, 361, 405, 452, 389, 410, 303, 443, 417, 365,
	531, 558, 872, 846, 871, 873, 874, 870, 875, 876,
	857, 751, 0, 802, 868, 867, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 585,
	584, 583, 582, 581, 580, 579, 0, 0, 528, 430,
	315, 277, 311, 312, 319, 628, 625, 434, 629, 630,
	0, 285, 508, 359, 0, 401, 333, 573, 574, 0,
	0, 835, 809, 810, 811, 748, 812, 806, 807, 749,
	808, 836, 800, 832, 833, 776, 803, 813, 831, 814,
	834, 837, 838, 877, 878, 820, 804, 249, 879, 817,
	839, 830, 829, 815, 801, 840, 841, 783, 778, 818,
	819, 805, 823, 824, 825, 750, 797, 798, 799, 821,
	822, 779, 780, 781, 782, 0, 0, 0, 459, 460,
	461, 483, 0, 445, 507, 626, 0, 0, 0, 0,
	0, 0, 0, 557, 569, 603, 0, 613, 614, 616,
	618, 826, 620, 422, 0, 621, 793, 633, 498, 499,
	634, 609, 0, 743, 0, 388, 0, 513, 546, 535,
	619, 501, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 328, 0, 0, 358, 550, 532, 542, 533,
	518, 519, 520, 527, 338, 521, 522, 523, 493, 524,
	494, 525, 526, 784, 549, 500, 418, 372, 567, 566,
	0, 0, 851, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 738, 0, 0, 774,
	828, 827, 761, 771, 0, 0, 301, 220, 495, 615,
	497, 496, 762, 0, 763, 767, 770, 766, 764, 765,
	0, 843, 0, 0, 0, 0, 0, 0, 730, 742,
	0, 747, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 739, 740, 1818, 0, 0,
	0, 794, 0, 741, 0, 0, 789, 768, 772, 0,
	0, 0, 0, 291, 424, 441, 302, 414, 454, 307,
	421, 297, 387, 411, 0, 0, 293, 439, 420, 369,
	348, 349, 292, 0, 406, 326, 340, 323, 385, 769,
	792, 796, 322, 865, 790, 449, 295, 0, 448, 384,
	435, 440, 370, 364, 0, 294, 437, 368, 363, 352,
	330, 866, 353, 354, 344, 396, 362, 397, 345, 374,
	373, 375, 0, 0, 0, 0, 0, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 787, 0, 612, 0, 451, 0, 0,
	849, 0, 0, 0, 423, 0, 0, 355, 0, 0,
	0, 791, 0, 409, 390, 862, 0, 0, 407, 360,
	436, 398, 442, 425, 450, 403, 399, 286, 426, 325,
	371, 298, 300, 320, 327, 329, 331, 332, 380, 381,
	393, 413, 427, 428, 429, 324, 308, 408, 309, 342,
	310, 287, 316, 314, 317, 415, 318, 289, 394, 433,
	0, 337, 404, 367, 290, 366, 395, 432, 431, 299,
	458, 464, 465, 554, 0, 470, 637, 638, 639, 479,
	0, 400, 484, 485, 486, 488, 489, 490, 491, 555,
	572, 539, 509, 472, 563, 506, 510, 511, 575, 0,
	0, 0, 463, 356, 357, 0, 335, 283, 284, 632,
	847, 386, 577, 610, 611, 502, 0, 861, 842, 844,
	845, 848, 852, 853, 854, 855, 856, 858, 860, 864,
	631, 0, 556, 571, 635, 570, 627, 392, 0, 412,
	568, 515, 0, 560, 534, 0, 561, 530, 565, 0,
	504, 0, 419, 444, 456, 473, 476, 505, 590, 591,
	592, 288, 475, 594, 595, 596, 597, 598, 599, 600,
	593, 863, 537, 514, 540, 455, 517, 516, 0, 0,
	551, 795, 552, 553, 376, 377, 378, 379, 850, 578,
	306, 474, 402, 0, 538, 0, 0, 0, 0, 0,
	0, 0, 0, 543, 544, 541, 640, 0, 601, 602,
	0, 0, 468, 469, 334, 341, 487, 343, 305, 391,
	336, 453, 350, 0, 480, 545, 481, 604, 607, 605,
	606, 383, 346, 347, 416, 351, 361, 405, 452, 389,
	410, 303, 443, 417, 365, 531, 558, 872, 846, 871,
	873, 874, 870, 875, 876, 857, 751, 0, 802, 868,
	867, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 586, 585, 584, 583, 582, 581, 580,
	579, 0, 0, 528, 430, 315, 277, 311, 312, 319,
	628, 625, 434, 629, 630, 0, 285, 508, 359, 0,
	401, 333, 573, 574, 0, 0, 835, 809, 810, 811,
	748, 812, 806, 807, 749, 808, 836, 800, 832, 833,
	776, 803, 813, 831, 814, 834, 837, 838, 877, 878,
	820, 804, 249, 879, 817, 839, 830, 829, 815, 801,
	840, 841, 783, 778, 818, 819, 805, 823, 824, 825,
	750, 797, 798, 799, 821, 822, 779, 780, 781, 782,
	0, 0, 0, 459, 460, 461, 483, 0, 445, 507,
	626, 0, 0, 0, 0, 0, 0, 0, 557, 569,
	603, 0, 613, 614, 616, 618, 826, 620, 422, 0,
	621, 793, 633, 498, 499, 634, 609, 0, 743, 0,
	388, 0, 513, 546, 535, 619, 501, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 328, 0, 0,
	358, 550, 532, 542, 533, 518, 519, 520, 527, 338,
	521, 522, 523, 493, 524, 494, 525, 526, 784, 549,
	500, 418, 372, 567, 566, 0, 0, 851, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 738, 0, 0, 774, 828, 827, 761, 771, 0,
	0, 301, 220, 495, 615, 497, 496, 762, 0, 763,
	767, 770, 766, 764, 765, 0, 843, 0, 0, 0,
	0, 0, 0, 730, 742, 0, 747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	739, 740, 0, 0, 0, 0, 794, 0, 741, 0,
	0, 789, 768, 772, 0, 0, 0, 0, 291, 424,
	441, 302, 414, 454, 307, 421, 297, 387, 411, 0,
	0, 293, 439, 420, 369, 348, 349, 292, 0, 406,
	326, 340, 323, 385, 769, 792, 796, 322, 865, 790,
	449, 295, 0, 448, 384, 435, 440, 370, 364, 0,
	294, 437, 368, 363, 352, 330, 866, 353, 354, 344,
	396, 362, 397, 345, 374, 373, 375, 0, 0, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 787, 0,
	612, 0, 451, 0, 0, 849, 0, 0, 0, 423,
	0, 0, 355, 0, 0, 0, 791, 0, 409, 390,
	862, 0, 0, 407, 360, 436, 398, 442, 425, 450,
	403, 399, 286, 426, 325, 371, 298, 300, 320, 327,
	329, 331, 332, 380, 381, 393, 413, 427, 428, 429,
	324, 308, 408, 309, 342, 310, 287, 316, 314, 317,
	415, 318, 289, 394, 433, 0, 337, 404, 367, 290,
	366, 395, 432, 431, 299, 458, 464, 465, 554, 0,
	470, 637, 638, 639, 479, 0, 400, 484, 485, 486,
	488, 489, 490, 491, 555, 572, 539, 509, 472, 563,
	506, 510, 511, 575, 0, 0, 0, 463, 356, 357,
	0, 335, 283, 284, 632, 847, 386, 577, 610, 611,
	502, 0, 861, 842, 844, 845, 848, 852, 853, 854,
	855, 856, 858, 860, 864, 631, 0, 556, 571, 635,
	570, 627, 392, 0, 412, 568, 515, 0, 560, 534,
	0, 561, 530, 565, 0, 504, 0, 419, 444, 456,
	473, 476, 505, 590, 591, 592, 288, 475, 594, 595,
	596, 597, 598, 599, 600, 593, 863, 537, 514, 540,
	455, 517, 516, 0, 0, 551, 795, 552, 553, 376,
	377, 378, 379, 850, 578, 306, 474, 402, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 544,
	541, 640, 0, 601, 602, 0, 0, 468, 469, 334,
	341, 487, 343, 305, 391, 336, 453, 350, 0, 480,
	545, 481, 604, 607, 605, 606, 383, 346, 347, 416,
	351, 361, 405, 452, 389, 410, 303, 443, 417, 365,
	531, 558, 872, 846, 871, 873, 874, 870, 875, 876,
	857, 751, 0, 802, 868, 867, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 585,
	584, 583, 582, 581, 580, 579, 0, 0, 528, 430,
	315, 277, 311, 312, 319, 628, 625, 434, 629, 630,
	0, 285, 508, 359, 0, 401, 333, 573, 574, 0,
	0, 835, 809, 810, 811, 748, 812, 806, 807, 749,
	808, 836, 800, 832, 833, 776, 803, 813, 831, 814,
	834, 837, 838, 877, 878, 820, 804, 249, 879, 817,
	839, 830, 829, 815, 801, 840, 841, 783, 778, 818,
	819, 805, 823, 824, 825, 750, 797, 798, 799, 821,
	822, 779, 780, 781, 782, 0, 0, 0, 459, 460,
	461, 483, 0, 445, 507, 626, 0, 0, 0, 0,
	0, 0, 0, 557, 569, 603, 0, 613, 614, 616,
	618, 826, 620, 422, 0, 621, 793, 633, 498, 499,
	634, 609, 0, 743, 0, 388, 0, 513, 546, 535,
	619, 501, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 328, 0, 0, 358, 550, 532, 542, 533,
	518, 519, 520, 527, 338, 521, 522, 523, 493, 524,
	494, 525, 526, 784, 549, 500, 418, 372, 567, 566,
	0, 0, 851, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 738, 0, 0, 774,
	828, 827, 761, 771, 0, 0, 301, 220, 495, 615,
	497, 496, 2671, 0, 2672, 767, 770, 766, 764, 765,
	0, 843, 0, 0, 0, 0, 0, 0, 730, 742,
	0, 747, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 739, 740, 0, 0, 0,
	0, 794, 0, 741, 0, 0, 789, 768, 772, 0,
	0, 0, 0, 291, 424, 441, 302, 414, 454, 307,
	421, 297, 387, 411, 0, 0, 293, 439, 420, 369,
	348, 349, 292, 0, 406, 326, 340, 323, 385, 769,
	792, 796, 322, 865, 790, 449, 295, 0, 448, 384,
	435, 440, 370, 364, 0, 294, 437, 368, 363, 352,
	330, 866, 353, 354, 344, 396, 362, 397, 345, 374,
	373, 375, 0, 0, 0, 0, 0, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 787, 0, 612, 0, 451, 0, 0,
	849, 0, 0, 0, 423, 0, 0, 355, 0, 0,
	0, 791, 0, 409, 390, 862, 0, 0, 407, 360,
	436, 398, 442, 425, 450, 403, 399, 286, 426, 325,
	371, 298, 300, 320, 327, 329, 331, 332, 380, 381,
	393, 413, 427, 428, 429, 324, 308, 408, 309, 342,
	310, 287, 316, 314, 317, 415, 318, 289, 394, 433,
	0, 337, 404, 367, 290, 366, 395, 432, 431, 299,
	458, 464, 465, 554, 0, 470, 637, 638, 639, 479,
	0, 400, 484, 485, 486, 488, 489, 490, 491, 555,
	572, 539, 509, 472, 563, 506, 510, 511, 575, 0,
	0, 0, 463, 356, 357, 0, 335, 283, 284, 632,
	847, 386, 577, 610, 611, 502, 0, 861, 842, 844,
	845, 848, 852, 853, 854, 855, 856, 858, 860, 864,
	631, 0, 556, 571, 635, 570, 627, 392, 0, 412,
	568, 515, 0, 560, 534, 0, 561, 530, 565, 0,
	504, 0, 419, 444, 456, 473, 476, 505, 590, 591,
	592, 288, 475, 594, 595, 596, 597, 598, 599, 600,
	593, 863, 537, 514, 540, 455, 517, 516, 0, 0,
	551, 795, 552, 553, 376, 377, 378, 379, 850, 578,
	306, 474, 402, 0, 538, 0, 0, 0, 0, 0,
	0, 0, 0, 543, 544, 541, 640, 0, 601, 602,
	0, 0, 468, 469, 334, 341, 487, 343, 305, 391,
	336, 453, 350, 0, 480, 545, 481, 604, 607, 605,
	606, 383, 346, 347, 416, 351, 361, 405, 452, 389,
	410, 303, 443, 417, 365, 531, 558, 872, 846, 871,
	873, 874, 870, 875, 876, 857, 751, 0, 802, 868,
	867, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 586, 585, 584, 583, 582, 581, 580,
	579, 0, 0, 528, 430, 315, 277, 311, 312, 319,
	628, 625, 434, 629, 630, 0, 285, 508, 359, 0,
	401, 333, 573, 574, 0, 0, 835, 809, 810, 811,
	748, 812, 806, 807, 749, 808, 836, 800, 832, 833,
	776, 803, 813, 831, 814, 834, 837, 838, 877, 878,
	820, 804, 249, 879, 817, 839, 830, 829, 815, 801,
	840, 841, 783, 778, 818, 819, 805, 823, 824, 825,
	750, 797, 798, 799, 821, 822, 779, 780, 781, 782,
	0, 0, 0, 459, 460, 461, 483, 0, 445, 507,
	626, 0, 0, 0, 0, 0, 0, 0, 557, 569,
	603, 0, 613, 614, 616, 618, 826, 620, 422, 0,
	621, 793, 633, 498, 499, 634, 609, 0, 743, 0,
	388, 0, 513, 546, 535, 619, 501, 0, 0, 1688,
	0, 0, 0, 746, 0, 0, 0, 328, 0, 0,
	358, 550, 532, 542, 533, 518, 519, 520, 527, 338,
	521, 522, 523, 493, 524, 494, 525, 526, 784, 549,
	500, 418, 372, 567, 566, 0, 0, 851, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 738, 0, 0, 774, 828, 827, 761, 771, 0,
	0, 301, 220, 495, 615, 497, 496, 762, 0, 763,
	767, 770, 766, 764, 765, 0, 843, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	739, 740, 0, 0, 0, 0, 794, 0, 741, 0,
	0, 789, 768, 772, 0, 0, 0, 0, 291, 424,
	441, 302, 414, 454, 307, 421, 297, 387, 411, 0,
	0, 293, 439, 420, 369, 348, 349, 292, 0, 406,
	326, 340, 323, 385, 769, 792, 796, 322, 865, 790,
	449, 295, 0, 448, 384, 435, 440, 370, 364, 0,
	294, 437, 368, 363, 352, 330, 866, 353, 354, 344,
	396, 362, 397, 345, 374, 373, 375, 0, 0, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 787, 0,
	612, 0, 451, 0, 0, 849, 0, 0, 0, 423,
	0, 0, 355, 0, 0, 0, 791, 0, 409, 390,
	862, 0, 0, 407, 360, 436, 398, 442, 425, 450,
	403, 399, 286, 426, 325, 371, 298, 300, 320, 327,
	329, 331, 332, 380, 381, 393, 413, 427, 428, 429,
	324, 308, 408, 309, 342, 310, 287, 316, 314, 317,
	415, 318, 289, 394, 433, 0, 337, 404, 367, 290,
	366, 395, 432, 431, 299, 458, 1689, 1690, 554, 0,
	470, 637, 638, 639, 479, 0, 400, 484, 485, 486,
	488, 489, 490, 491, 555, 572, 539, 509, 472, 563,
	506, 510, 511, 575, 0, 0, 0, 463, 356, 357,
	0, 335, 283, 284, 632, 847, 386, 577, 610, 611,
	502, 0, 861, 842, 844, 845, 848, 852, 853, 854,
	855, 856, 858, 860, 864, 631, 0, 556, 571, 635,
	570, 627, 392, 0, 412, 568, 515, 0, 560, 534,
	0, 561, 530, 565, 0, 504, 0, 419, 444, 456,
	473, 476, 505, 590, 591, 592, 288, 475, 594, 595,
	596, 597, 598, 599, 600, 593, 863, 537, 514, 540,
	455, 517, 516, 0, 0, 551, 795, 552, 553, 376,
	377, 378, 379, 850, 578, 306, 474, 402, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 544,
	541, 640, 0, 601, 602, 0, 0, 468, 469, 334,
	341, 487, 343, 305, 391, 336, 453, 350, 0, 480,
	545, 481, 604, 607, 605, 606, 383, 346, 347, 416,
	351, 361, 405, 452, 389, 410, 303, 443, 417, 365,
	531, 558, 872, 846, 871, 873, 874, 870, 875, 876,
	857, 751, 0, 802, 868, 867, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 585,
	584, 583, 582, 581, 580, 579, 0, 0, 528, 430,
	315, 277, 311, 312, 319, 628, 625, 434, 629, 630,
	0, 285, 508, 359, 0, 401, 333, 573, 574, 0,
	0, 835, 809, 810, 811, 748, 812, 806, 807, 749,
	808, 836, 800, 832, 833, 776, 803, 813, 831, 814,
	834, 837, 838, 877, 878, 820, 804, 249, 879, 817,
	839, 830, 829, 815, 801, 840, 841, 783, 778, 818,
	819, 805, 823, 824, 825, 750, 797, 798, 799, 821,
	822, 779, 780, 781, 782, 0, 0, 0, 459, 460,
	461, 483, 0, 445, 507, 626, 0, 0, 0, 0,
	0, 0, 0, 557, 569, 603, 0, 613, 614, 616,
	618, 826, 620, 422, 0, 621, 793, 633, 498, 499,
	634, 609, 0, 743, 0, 388, 0, 513, 546, 535,
	619, 501, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 328, 0, 0, 358, 550, 532, 542, 533,
	518, 519, 520, 527, 338, 521, 522, 523, 493, 524,
	494, 525, 526, 784, 549, 500, 418, 372, 567, 566,
	0, 0, 851, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 738, 0, 0, 774,
	828, 827, 761, 771, 0, 0, 301, 220, 495, 615,
	497, 496, 762, 0, 763, 767, 770, 766, 764, 765,
	0, 843, 0, 0, 0, 0, 0, 0, 0, 742,
	0, 747, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 739, 740, 0, 0, 0,
	0, 794, 0, 741, 0, 0, 789, 768, 772, 0,
	0, 0, 0, 291, 424, 441, 302, 414, 454, 307,
	421, 297, 387, 411, 0, 0, 293, 439, 420, 369,
	348, 349, 292, 0, 406, 326, 340, 323, 385, 769,
	792, 796, 322, 865, 790, 449, 295, 0, 448, 384,
	435, 440, 370, 364, 0, 294, 437, 368, 363, 352,
	330, 866, 353, 354, 344, 396, 362, 397, 345, 374,
	373, 375, 0, 0, 0, 0, 0, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 787, 0, 612, 0, 451, 0, 0,
	849, 0, 0, 0, 423, 0, 0, 355, 0, 0,
	0, 791, 0, 409, 390, 862, 0, 0, 407, 360,
	436, 398, 442, 425, 450, 403, 399, 286, 426, 325,
	371, 298, 300, 320, 327, 329, 331, 332, 380, 381,
	393, 413, 427, 428, 429, 324, 308, 408, 309, 342,
	310, 287, 316, 314, 317, 415, 318, 289, 394, 433,
	0, 337, 404, 367, 290, 366, 395, 432, 431, 299,
	458, 464, 465, 554, 0, 470, 637, 638, 639, 479,
	0, 400, 484, 485, 486, 488, 489, 490, 491, 555,
	572, 539, 509, 472, 563, 506, 510, 511, 575, 0,
	0, 0, 463, 356, 357, 0, 335, 283, 284, 632,
	847, 386, 577, 610, 611, 502, 0, 861, 842, 844,
	845, 848, 852, 853, 854, 855, 856, 858, 860, 864,
	631, 0, 556, 571, 635, 570, 627, 392, 0, 412,
	568, 515, 0, 560, 534, 0, 561, 530, 565, 0,
	504, 0, 419, 444, 456, 473, 476, 505, 590, 591,
	592, 288, 475, 594, 595, 596, 597, 598, 599, 600,
	593, 863, 537, 514, 540, 455, 517, 516, 0, 0,
	551, 795, 552, 553, 376, 377, 378, 379, 850, 578,
	306, 474, 402, 0, 538, 0, 0, 0, 0, 0,
	0, 0, 0, 543, 544, 541, 640, 0, 601, 602,
	0, 0, 468, 469, 334, 341, 487, 343, 305, 391,
	336, 453, 350, 0, 480, 545, 481, 604, 607, 605,
	606, 383, 346, 347, 416, 351, 361, 405, 452, 389,
	410, 303, 443, 417, 365, 531, 558, 872, 846, 871,
	873, 874, 870, 875, 876, 857, 751, 0, 802, 868,
	867, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 586, 585, 584, 583, 582, 581, 580,
	579, 0, 0, 528, 430, 315, 277, 311, 312, 319,
	628, 625, 434, 629, 630, 0, 285, 508, 359, 0,
	401, 333, 573, 574, 0, 0, 835, 809, 810, 811,
	748, 812, 806, 807, 749, 808, 836, 800, 832, 833,
	776, 803, 813, 831, 814, 834, 837, 838, 877, 878,
	820, 804, 249, 879, 817, 839, 830, 829, 815, 801,
	840, 841, 783, 778, 818, 819, 805, 823, 824, 825,
	750, 797, 798, 799, 821, 822, 779, 780, 781, 782,
	0, 0, 0, 459, 460, 461, 483, 0, 445, 507,
	626, 0, 0, 0, 0, 0, 0, 0, 557, 569,
	603, 0, 613, 614, 616, 618, 826, 620, 422, 0,
	621, 793, 633, 498, 499, 634, 609, 0, 743, 0,
	388, 0, 513, 546, 535, 619, 501, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 328, 0, 0,
	358, 550, 532, 542, 533, 518, 519, 520, 527, 338,
	521, 522, 523, 493, 524, 494, 525, 526, 784, 549,
	500, 418, 372, 567, 566, 0, 0, 851, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 774, 828, 827, 761, 771, 0,
	0, 301, 220, 495, 615, 497, 496, 762, 0, 763,
	767, 770, 766, 764, 765, 0, 843, 0, 0, 0,
	0, 0, 0, 730, 742, 0, 747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	739, 740, 0, 0, 0, 0, 794, 0, 741, 0,
	0, 789, 768, 772, 0, 0, 0, 0, 291, 424,
	441, 302, 414, 454, 307, 421, 297, 387, 411, 0,
	0, 293, 439, 420, 369, 348, 349, 292, 0, 406,
	326, 340, 323, 385, 769, 792, 796, 322, 865, 790,
	449, 295, 0, 448, 384, 435, 440, 370, 364, 0,
	294, 437, 368, 363, 352, 330, 866, 353, 354, 344,
	396, 362, 397, 345, 374, 373, 375, 0, 0, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 787, 0,
	612, 0, 451, 0, 0, 849, 0, 0, 0, 423,
	0, 0, 355, 0, 0, 0, 791, 0, 409, 390,
	862, 0, 0, 407, 360, 436, 398, 442, 425, 450,
	403, 399, 286, 426, 325, 371, 298, 300, 320, 327,
	329, 331, 332, 380, 381, 393, 413, 427, 428, 429,
	324, 308, 408, 309, 342, 310, 287, 316, 314, 317,
	415, 318, 289, 394, 433, 0, 337, 404, 367, 290,
	366, 395, 432, 431, 299, 458, 464, 465, 554, 0,
	470, 637, 638, 639, 479, 0, 400, 484, 485, 486,
	488, 489, 490, 491, 555, 572, 539, 509, 472, 563,
	506, 510, 511, 575, 0, 0, 0, 463, 356, 357,
	0, 335, 283, 284, 632, 847, 386, 577, 610, 611,
	502, 0, 861, 842, 844, 845, 848, 852, 853, 854,
	855, 856, 858, 860, 864, 631, 0, 556, 571, 635,
	570, 627, 392, 0, 412, 568, 515, 0, 560, 534,
	0, 561, 530, 565, 0, 504, 0, 419, 444, 456,
	473, 476, 505, 590, 591, 592, 288, 475, 594, 595,
	596, 597, 598, 599, 600, 593, 863, 537, 514, 540,
	455, 517, 516, 0, 0, 551, 795, 552, 553, 376,
	377, 378, 379, 850, 578, 306, 474, 402, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 544,
	541, 640, 0, 601, 602, 0, 0, 468, 469, 334,
	341, 487, 343, 305, 391, 336, 453, 350, 0, 480,
	545, 481, 604, 607, 605, 606, 383, 346, 347, 416,
	351, 361, 405, 452, 389, 410, 303, 443, 417, 365,
	531, 558, 872, 846, 871, 873, 874, 870, 875, 876,
	857, 751, 0, 802, 868, 867, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 585,
	584, 583, 582, 581, 580, 579, 0, 0, 528, 430,
	315, 277, 311, 312, 319, 628, 625, 434, 629, 630,
	0, 285, 508, 359, 0, 401, 333, 573, 574, 0,
	0, 835, 809, 810, 811, 748, 812, 806, 807, 749,
	808, 836, 800, 832, 833, 776, 803, 813, 831, 814,
	834, 837, 838, 877, 878, 820, 804, 249, 879, 817,
	839, 830, 829, 815, 801, 840, 841, 783, 778, 818,
	819, 805, 823, 824, 825, 750, 797, 798, 799, 821,
	822, 779, 780, 781, 782, 0, 0, 0, 459, 460,
	461, 483, 0, 445, 507, 626, 0, 0, 0, 0,
	0, 0, 0, 557, 569, 603, 0, 613, 614, 616,
	618, 826, 620, 422, 0, 621, 0, 633, 498, 499,
	634, 609, 0, 743, 197, 61, 188, 159, 0, 0,
	0, 0, 0, 0, 388, 0, 513, 546, 535, 619,
	501, 0, 189, 0, 0, 0, 0, 0, 0, 180,
	0, 328, 0, 190, 358, 550, 532, 542, 533, 518,
	519, 520, 527, 338, 521, 522, 523, 493, 524, 494,
	525, 526, 132, 549, 500, 418, 372, 567, 566, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 301, 220, 495, 615, 497,
	496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 424, 441, 302, 414, 454, 307, 421,
	297, 387, 411, 0, 0, 293, 439, 420, 369, 348,
	349, 292, 0, 406, 326, 340, 323, 385, 0, 438,
	466, 322, 457, 0, 449, 295, 0, 448, 384, 435,
	440, 370, 364, 0, 294, 437, 368, 363, 352, 330,
	482, 353, 354, 344, 396, 362, 397, 345, 374, 373,
	375, 0, 0, 0, 0, 0, 477, 478, 0, 0,
	0, 0, 0, 0, 158, 186, 195, 187, 117, 0,
	0, 608, 0, 0, 612, 0, 451, 0, 0, 212,
	0, 0, 0, 423, 0, 0, 355, 185, 179, 178,
	467, 0, 409, 390, 224, 0, 0, 407, 360, 436,
	398, 442, 425, 450, 403, 399, 286, 426, 325, 371,
	298, 300, 320, 327, 329, 331, 332, 380, 381, 393,
	413, 427, 428, 429, 324, 308, 408, 309, 342, 310,
	287, 316, 314, 317, 415, 318, 289, 394, 433, 0,
	337, 404, 367, 290, 366, 395, 432, 431, 299, 458,
	464, 465, 554, 0, 470, 587, 588, 589, 479, 0,
	400, 484, 485, 486, 488, 489, 490, 491, 555, 572,
	539, 509, 472, 563, 506, 510, 511, 575, 0, 0,
	0, 463, 356, 357, 0, 335, 283, 284, 446, 321,
	386, 577, 610, 611, 502, 0, 564, 503, 512, 313,
	536, 548, 547, 382, 462, 215, 559, 562, 492, 225,
	0, 556, 571, 529, 570, 226, 392, 0, 412, 568,
	515, 0, 560, 534, 0, 561, 530, 565, 0, 504,
	0, 419, 444, 456, 473, 476, 505, 590, 591, 592,
	288, 475, 594, 595, 596, 597, 598, 599, 600, 593,
	447, 537, 514, 540, 455, 517, 516, 0, 0, 551,
	471, 552, 553, 376, 377, 378, 379, 339, 578, 306,
	474, 402, 130, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 544, 541, 223, 0, 601, 602, 0,
	0, 468, 469, 334, 341, 487, 343, 305, 391, 336,
	453, 350, 0, 480, 545, 481, 604, 607, 605, 606,
	383, 346, 347, 416, 351, 361, 405, 452, 389, 410,
	303, 443, 417, 365, 531, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 585, 584, 583, 582, 581, 580, 579,
	0, 0, 528, 430, 315, 277, 311, 312, 319, 230,
	296, 434, 231, 232, 0, 285, 508, 359, 160, 401,
	333, 573, 574, 58, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 278, 241, 242, 243, 244, 245, 246,
	247, 250, 251, 252, 253, 254, 255, 256, 257, 576,
	248, 249, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 0, 0, 0, 279,
	280, 281, 282, 0, 0, 273, 274, 275, 276, 0,
	0, 0, 459, 460, 461, 483, 0, 445, 507, 227,
	45, 213, 216, 218, 217, 0, 59, 557, 569, 603,
	5, 613, 614, 616, 618, 617, 620, 422, 197, 621,
	135, 228, 498, 499, 229, 609, 0, 0, 388, 0,
	513, 546, 535, 619, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 0, 358, 550,
	532, 542, 533, 518, 519, 520, 527, 338, 521, 522,
	523, 493, 524, 494, 525, 526, 132, 549, 500, 418,
	372, 567, 566, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 301,
	220, 495, 615, 497, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 2355, 2358, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 424, 441, 302,
	414, 454, 307, 421, 297, 387, 411, 0, 0, 293,
	439, 420, 369, 348, 349, 292, 0, 406, 326, 340,
	323, 385, 0, 438, 466, 322, 457, 0, 449, 295,
	0, 448, 384, 435, 440, 370, 364, 0, 294, 437,
	368, 363, 352, 330, 482, 353, 354, 344, 396, 362,
	397, 345, 374, 373, 375, 0, 0, 0, 0, 0,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 608, 0, 0, 612, 2359,
	451, 0, 0, 0, 2354, 0, 2353, 423, 2351, 2356,
	355, 0, 0, 0, 467, 0, 409, 390, 636, 0,
	0, 407, 360, 436, 398, 442, 425, 450, 403, 399,
	286, 426, 325, 371, 298, 300, 320, 327, 329, 331,
	332, 380, 381, 393, 413, 427, 428, 429, 324, 308,
	408, 309, 342, 310, 287, 316, 314, 317, 415, 318,
	289, 394, 433, 2357, 337, 404, 367, 290, 366, 395,
	432, 431, 299, 458, 464, 465, 554, 0, 470, 637,
	638, 639, 479, 0, 400, 484, 485, 486, 488, 489,
	490, 491, 555, 572, 539, 509, 472, 563, 506, 510,
	511, 575, 0, 0, 0, 463, 356, 357, 0, 335,
	283, 284, 632, 321, 386, 577, 610, 611, 502, 0,
	564, 503, 512, 313, 536, 548, 547, 382, 462, 0,
	559, 562, 492, 631, 0, 556, 571, 635, 570, 627,
	392, 0, 412, 568, 515, 0, 560, 534, 0, 561,
	530, 565, 0, 504, 0, 419, 444, 456, 473, 476,
	505, 590, 591, 592, 288, 475, 594, 595, 596, 597,
	598, 599, 600, 593, 447, 537, 514, 540, 455, 517,
	516, 0, 0, 551, 471, 552, 553, 376, 377, 378,
	379, 339, 578, 306, 474, 402, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 544, 541, 640,
	0, 601, 602, 0, 0, 468, 469, 334, 341, 487,
	343, 305, 391, 336, 453, 350, 0, 480, 545, 481,
	604, 607, 605, 606, 383, 346, 347, 416, 351, 361,
	405, 452, 389, 410, 303, 443, 417, 365, 531, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 585, 584, 583,
	582, 581, 580, 579, 0, 0, 528, 430, 315, 277,
	311, 312, 319, 628, 625, 434, 629, 630, 0, 285,
	508, 359, 160, 401, 333, 573, 574, 0, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 278, 241, 242,
	243, 244, 245, 246, 247, 250, 251, 252, 253, 254,
	255, 256, 257, 576, 248, 249, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	0, 0, 0, 279, 280, 281, 282, 0, 0, 273,
	274, 275, 276, 0, 0, 0, 459, 460, 461, 483,
	0, 445, 507, 626, 0, 0, 0, 0, 0, 0,
	0, 557, 569, 603, 0, 613, 614, 616, 618, 617,
	620, 422, 0, 621, 0, 633, 498, 499, 634, 609,
	388, 0, 513, 546, 535, 619, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 0, 0,
	358, 550, 532, 542, 533, 518, 519, 520, 527, 338,
	521, 522, 523, 493, 524, 494, 525, 526, 0, 549,
	500, 418, 372, 567, 566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1294, 0, 0, 219, 0, 0, 761, 771, 0,
	0, 301, 220, 495, 615, 497, 496, 762, 0, 763,
	767, 770, 766, 764, 765, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 768, 0, 0, 0, 0, 0, 291, 424,
	441, 302, 414, 454, 307, 421, 297, 387, 411, 0,
	0, 293, 439, 420, 369, 348, 349, 292, 0, 406,
	326, 340, 323, 385, 769, 438, 466, 322, 457, 0,
	449, 295, 0, 448, 384, 435, 440, 370, 364, 0,
	294, 437, 368, 363, 352, 330, 482, 353, 354, 344,
	396, 362, 397, 345, 374, 373, 375, 0, 0, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 0, 0,
	612, 0, 451, 0, 0, 0, 0, 0, 0, 423,
	0, 0, 355, 0, 0, 0, 467, 0, 409, 390,
	636, 0, 0, 407, 360, 436, 398, 442, 425, 450,
	403, 399, 286, 426, 325, 371, 298, 300, 320, 327,
	329, 331, 332, 380, 381, 393, 413, 427, 428, 429,
	324, 308, 408, 309, 342, 310, 287, 316, 314, 317,
	415, 318, 289, 394, 433, 0, 337, 404, 367, 290,
	366, 395, 432, 431, 299, 458, 464, 465, 554, 0,
	470, 637, 638, 639, 479, 0, 400, 484, 485, 486,
	488, 489, 490, 491, 555, 572, 539, 509, 472, 563,
	506, 510, 511, 575, 0, 0, 0, 463, 356, 357,
	0, 335, 283, 284, 632, 321, 386, 577, 610, 611,
	502, 0, 564, 503, 512, 313, 536, 548, 547, 382,
	462, 0, 559, 562, 492, 631, 0, 556, 571, 635,
	570, 627, 392, 0, 412, 568, 515, 0, 560, 534,
	0, 561, 530, 565, 0, 504, 0, 419, 444, 456,
	473, 476, 505, 590, 591, 592, 288, 475, 594, 595,
	596, 597, 598, 599, 600, 593, 447, 537, 514, 540,
	455, 517, 516, 0, 0, 551, 471, 552, 553, 376,
	377, 378, 379, 339, 578, 306, 474, 402, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 544,
	541, 640, 0, 601, 602, 0, 0, 468, 469, 334,
	341, 487, 343, 305, 391, 336, 453, 350, 0, 480,
	545, 481, 604, 607, 605, 606, 383, 346, 347, 416,
	351, 361, 405, 452, 389, 410, 303, 443, 417, 365,
	531, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 585,
	584, 583, 582, 581, 580, 579, 0, 0, 528, 430,
	315, 277, 311, 312, 319, 628, 625, 434, 629, 630,
	0, 285, 508, 359, 0, 401, 333, 573, 574, 0,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 278,
	241, 242, 243, 244, 245, 246, 247, 250, 251, 252,
	253, 254, 255, 256, 257, 576, 248, 249, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 0, 0, 0, 279, 280, 281, 282, 0,
	0, 273, 274, 275, 276, 0, 0, 0, 459, 460,
	461, 483, 0, 445, 507, 626, 0, 0, 0, 0,
	0, 0, 0, 557, 569, 603, 0, 613, 614, 616,
	618, 617, 620, 422, 0, 621, 0, 633, 498, 499,
	634, 609, 197, 61, 188, 159, 0, 0, 0, 0,
	0, 0, 388, 659, 513, 546, 535, 619, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	0, 0, 358, 550, 532, 542, 533, 518, 519, 520,
	527, 338, 521, 522, 523, 493, 524, 494, 525, 526,
	0, 549, 500, 418, 372, 567, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 666, 0, 0, 0,
	0, 0, 0, 665, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 301, 220, 495, 615, 497, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 424, 441, 302, 414, 454, 307, 421, 297, 387,
	411, 0, 0, 293, 439, 420, 369, 348, 349, 292,
	0, 406, 326, 340, 323, 385, 0, 438, 466, 322,
	457, 0, 449, 295, 0, 448, 384, 435, 440, 370,
	364, 0, 294, 437, 368, 363, 352, 330, 482, 353,
	354, 344, 396, 362, 397, 345, 374, 373, 375, 0,
	0, 0, 0, 0, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 663, 664, 0, 608,
	0, 0, 612, 0, 451, 0, 0, 0, 0, 0,
	0, 423, 0, 0, 355, 0, 0, 0, 467, 0,
	409, 390, 636, 0, 0, 407, 360, 436, 398, 442,
	425, 450, 403, 399, 286, 426, 325, 371, 298, 300,
	320, 327, 329, 331, 332, 380, 381, 393, 413, 427,
	428, 429, 324, 308, 408, 309, 342, 310, 287, 316,
	314, 317, 415, 318, 289, 394, 433, 0, 337, 404,
	367, 290, 366, 395, 432, 431, 299, 458, 464, 465,
	554, 0, 470, 637, 638, 639, 479, 0, 400, 484,
	485, 486, 488, 489, 490, 491, 555, 572, 539, 509,
	472, 563, 506, 510, 511, 575, 0, 0, 0, 463,
	356, 357, 0, 335, 283, 284, 632, 321, 386, 577,
	610, 611, 502, 0, 564, 503, 512, 313, 536, 548,
	547, 382, 462, 0, 559, 562, 492, 631, 0, 556,
	571, 635, 570, 627, 392, 0, 412, 568, 515, 0,
	560, 534, 0, 561, 530, 565, 0, 504, 0, 419,
	444, 456, 473, 476, 505, 590, 591, 592, 288, 475,
	594, 595, 596, 597, 598, 599, 600, 593, 447, 537,
	514, 540, 455, 517, 516, 0, 0, 551, 471, 552,
	553, 376, 377, 378, 379, 660, 662, 306, 474, 402,
	674, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 544, 541, 640, 0, 601, 602, 0, 0, 468,
	469, 334, 341, 487, 343, 305, 391, 336, 453, 350,
	0, 480, 545, 481, 604, 607, 605, 606, 383, 346,
	347, 416, 351, 361, 405, 452, 389, 410, 303, 443,
	417, 365, 531, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 585, 584, 583, 582, 581, 580, 579, 0, 0,
	528, 430, 315, 277, 311, 312, 319, 628, 625, 434,
	629, 630, 0, 285, 508, 359, 160, 401, 333, 573,
	574, 0, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 278, 241, 242, 243, 244, 245, 246, 247, 250,
	251, 252, 253, 254, 255, 256, 257, 576, 248, 249,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 0, 0, 0, 279, 280, 281,
	282, 0, 0, 273, 274, 275, 276, 0, 0, 0,
	459, 460, 461, 483, 0, 445, 507, 626, 0, 0,
	0, 0, 0, 0, 0, 557, 569, 603, 0, 613,
	614, 616, 618, 617, 620, 422, 0, 621, 0, 633,
	498, 499, 634, 609, 388, 0, 513, 546, 535, 619,
	501, 0, 1103, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 0, 0, 358, 550, 532, 542, 533, 518,
	519, 520, 527, 338, 521, 522, 523, 493, 524, 494,
	525, 526, 0, 549, 500, 418, 372, 567, 566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 301, 220, 495, 615, 497,
	496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 291, 424, 441, 302, 414, 454, 307, 421,
	297, 387, 411, 0, 0, 2514, 2517, 2518, 2519, 2520,
	2521, 2522, 0, 2527, 2523, 2524, 2525, 2526, 0, 2509,
	2510, 2511, 2512, 1086, 2493, 2515, 0, 2494, 384, 2495,
	2496, 2497, 2498, 1090, 2499, 2500, 2501, 2502, 2503, 2506,
	2507, 2504, 2505, 2513, 396, 362, 397, 345, 374, 373,
	375, 1114, 1116, 1118, 1120, 1123, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 0, 0, 612, 0, 451, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 355, 0, 0, 0,
	2508, 0, 409, 390, 636, 0, 0, 407, 360, 436,
	398, 442, 425, 450, 403, 399, 286, 426, 325, 371,
	298, 300, 320, 327, 329, 331, 332, 380, 381, 393,
	413, 427, 428, 429, 324, 308, 408, 309, 342, 310,
	287, 316, 314, 317, 415, 318, 289, 394, 433, 0,
	337, 404, 367, 290, 366, 395, 432, 431, 299, 458,
	464, 465, 554, 0, 470, 637, 638, 639, 479, 0,
	400, 484, 485, 486, 488, 489, 490, 491, 555, 572,
	539, 509, 472, 563, 506, 510, 511, 575, 0, 0,
	0, 463, 356, 357, 0, 335, 283, 284, 632, 321,
	386, 577, 610, 611, 502, 0, 564, 503, 512, 313,
	536, 548, 547, 382, 462, 0, 559, 562, 492, 631,
	0, 556, 571, 635, 570, 627, 392, 0, 412, 568,
	515, 0, 560, 534, 0, 561, 530, 565, 0, 504,
	0, 419, 444, 456, 473, 476, 505, 590, 591, 592,
	288, 475, 594, 595, 596, 597, 598, 599, 600, 593,
	447, 537, 514, 540, 455, 517, 516, 0, 0, 551,
	471, 552, 553, 376, 377, 378, 379, 339, 578, 306,
	474, 402, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 544, 541, 640, 0, 601, 602, 0,
	0, 468, 469, 334, 341, 487, 343, 305, 391, 336,
	453, 350, 0, 480, 545, 481, 604, 607, 605, 606,
	383, 346, 347, 416, 351, 361, 405, 452, 389, 410,
	303, 443, 417, 365, 531, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 585, 584, 583, 582, 581, 580, 579,
	0, 0, 528, 430, 315, 277, 311, 312, 319, 628,
	625, 434, 629, 630, 0, 285, 2516, 359, 0, 401,
	333, 573, 574, 0, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 278, 241, 242, 243, 244, 245, 246,
	247, 250, 251, 252, 253, 254, 255, 256, 257, 576,
	248, 249, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 0, 0, 0, 279,
	280, 281, 282, 0, 0, 273, 274, 275, 276, 0,
	0, 0, 459, 460, 461, 483, 0, 445, 507, 626,
	0, 0, 0, 0, 0, 0, 0, 557, 569, 603,
	0, 613, 614, 616, 618, 617, 620, 422, 0, 621,
	0, 633, 498, 499, 634, 609, 388, 0, 513, 546,
	535, 619, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 0, 0, 358, 550, 532, 542,
	533, 518, 519, 520, 527, 338, 521, 522, 523, 493,
	524, 494, 525, 526, 0, 549, 500, 418, 372, 567,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 301, 220, 495,
	615, 497, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 2355, 2358, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 424, 441, 302, 414, 454,
	307, 421, 297, 387, 411, 0, 0, 293, 439, 420,
	369, 348, 349, 292, 0, 406, 326, 340, 323, 385,
	0, 438, 466, 322, 457, 0, 449, 295, 0, 448,
	384, 435, 440, 370, 364, 0, 294, 437, 368, 363,
	352, 330, 482, 353, 354, 344, 396, 362, 397, 345,
	374, 373, 375, 0, 0, 0, 0, 0, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 608, 0, 0, 612, 2359, 451, 0,
	0, 0, 2354, 0, 2353, 423, 2351, 2356, 355, 0,
	0, 0, 467, 0, 409, 390, 636, 0, 0, 407,
	360, 436, 398, 442, 425, 450, 403, 399, 286, 426,
	325, 371, 298, 300, 320, 327, 329, 331, 332, 380,
	381, 393, 413, 427, 428, 429, 324, 308, 408, 309,
	342, 310, 287, 316, 314, 317, 415, 318, 289, 394,
	433, 2357, 337, 404, 367, 290, 366, 395, 432, 431,
	299, 458, 464, 465, 554, 0, 470, 637, 638, 639,
	479, 0, 400, 484, 485, 486, 488, 489, 490, 491,
	555, 572, 539, 509, 472, 563, 506, 510, 511, 575,
	0, 0, 0, 463, 356, 357, 0, 335, 283, 284,
	632, 321, 386, 577, 610, 611, 502, 0, 564, 503,
	512, 313, 536, 548, 547, 382, 462, 0, 559, 562,
	492, 631, 0, 556, 571, 635, 570, 627, 392, 0,
	412, 568, 515, 0, 560, 534, 0, 561, 530, 565,
	0, 504, 0, 419, 444, 456, 473, 476, 505, 590,
	591, 592, 288, 475, 594, 595, 596, 597, 598, 599,
	600, 593, 447, 537, 514, 540, 455, 517, 516, 0,
	0, 551, 471, 552, 553, 376, 377, 378, 379, 339,
	578, 306, 474, 402, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 541, 640, 0, 601,
	602, 0, 0, 468, 469, 334, 341, 487, 343, 305,
	391, 336, 453, 350, 0, 480, 545, 481, 604, 607,
	605, 606, 383, 346, 347, 416, 351, 361, 405, 452,
	389, 410, 303, 443, 417, 365, 531, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 585, 584, 583, 582, 581,
	580, 579, 0, 0, 528, 430, 315, 277, 311, 312,
	319, 628, 625, 434, 629, 630, 0, 285, 508, 359,
	0, 401, 333, 573, 574, 0, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 278, 241, 242, 243, 244,
	245, 246, 247, 250, 251, 252, 253, 254, 255, 256,
	257, 576, 248, 249, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 0, 0,
	0, 279, 280, 281, 282, 0, 0, 273, 274, 275,
	276, 0, 0, 0, 459, 460, 461, 483, 0, 445,
	507, 626, 0, 0, 0, 0, 0, 0, 0, 557,
	569, 603, 0, 613, 614, 616, 618, 617, 620, 422,
	0, 621, 0, 633, 498, 499, 634, 609, 388, 0,
	513, 546, 535, 619, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 0, 358, 550,
	532, 542, 533, 518, 519, 520, 527, 338, 521, 522,
	523, 493, 524, 494, 525, 526, 0, 549, 500, 418,
	372, 567, 566, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 301,
	220, 495, 615, 497, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 2376, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 424, 441, 302,
	414, 454, 307, 421, 297, 387, 411, 0, 0, 293,
	439, 420, 369, 348, 349, 292, 0, 406, 326, 340,
	323, 385, 0, 438, 466, 322, 457, 0, 449, 295,
	0, 448, 384, 435, 440, 370, 364, 0, 294, 437,
	368, 363, 352, 330, 482, 353, 354, 344, 396, 362,
	397, 345, 374, 373, 375, 0, 0, 0, 0, 0,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 608, 0, 0, 612, 2375,
	451, 0, 0, 0, 2381, 2378, 2380, 423, 0, 2379,
	355, 0, 0, 0, 467, 0, 409, 390, 636, 0,
	2373, 407, 360, 436, 398, 442, 425, 450, 403, 399,
	286, 426, 325, 371, 298, 300, 320, 327, 329, 331,
	332, 380, 381, 393, 413, 427, 428, 429, 324, 308,
	408, 309, 342, 310, 287, 316, 314, 317, 415, 318,
	289, 394, 433, 0, 337, 404, 367, 290, 366, 395,
	432, 431, 299, 458, 464, 465, 554, 0, 470, 637,
	638, 639, 479, 0, 400, 484, 485, 486, 488, 489,
	490, 491, 555, 572, 539, 509, 472, 563, 506, 510,
	511, 575, 0, 0, 0, 463, 356, 357, 0, 335,
	283, 284, 632, 321, 386, 577, 610, 611, 502, 0,
	564, 503, 512, 313, 536, 548, 547, 382, 462, 0,
	559, 562, 492, 631, 0, 556, 571, 635, 570, 627,
	392, 0, 412, 568, 515, 0, 560, 534, 0, 561,
	530, 565, 0, 504, 0, 419, 444, 456, 473, 476,
	505, 590, 591, 592, 288, 475, 594, 595, 596, 597,
	598, 599, 600, 593, 447, 537, 514, 540, 455, 517,
	516, 0, 0, 551, 471, 552, 553, 376, 377, 378,
	379, 339, 578, 306, 474, 402, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 544, 541, 640,
	0, 601, 602, 0, 0, 468, 469, 334, 341, 487,
	343, 305, 391, 336, 453, 350, 0, 480, 545, 481,
	604, 607, 605, 606, 383, 346, 347, 416, 351, 361,
	405, 452, 389, 410, 303, 443, 417, 365, 531, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 585, 584, 583,
	582, 581, 580, 579, 0, 0, 528, 430, 315, 277,
	311, 312, 319, 628, 625, 434, 629, 630, 0, 285,
	508, 359, 0, 401, 333, 573, 574, 0, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 278, 241, 242,
	243, 244, 245, 246, 247, 250, 251, 252, 253, 254,
	255, 256, 257, 576, 248, 249, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	0, 0, 0, 279, 280, 281, 282, 0, 0, 273,
	274, 275, 276, 0, 0, 0, 459, 460, 461, 483,
	0, 445, 507, 626, 0, 0, 0, 0, 0, 0,
	0, 557, 569, 603, 0, 613, 614, 616, 618, 617,
	620, 422, 0, 621, 0, 633, 498, 499, 634, 609,
	388, 0, 513, 546, 535, 619, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 0, 0,
	358, 550, 532, 542, 533, 518, 519, 520, 527, 338,
	521, 522, 523, 493, 524, 494, 525, 526, 0, 549,
	500, 418, 372, 567, 566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 301, 220, 495, 615, 497, 496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 2376, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 424,
	441, 302, 414, 454, 307, 421, 297, 387, 411, 0,
	0, 293, 439, 420, 369, 348, 349, 292, 0, 406,
	326, 340, 323, 385, 0, 438, 466, 322, 457, 0,
	449, 295, 0, 448, 384, 435, 440, 370, 364, 0,
	294, 437, 368, 363, 352, 330, 482, 353, 354, 344,
	396, 362, 397, 345, 374, 373, 375, 0, 0, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 0, 0,
	612, 2375, 451, 0, 0, 0, 2381, 2378, 2380, 423,
	0, 2379, 355, 0, 0, 0, 467, 0, 409, 390,
	636, 0, 0, 407, 360, 436, 398, 442, 425, 450,
	403, 399, 286, 426, 325, 371, 298, 300, 320, 327,
	329, 331, 332, 380, 381, 393, 413, 427, 428, 429,
	324, 308, 408, 309, 342, 310, 287, 316, 314, 317,
	415, 318, 289, 394, 433, 0, 337, 404, 367, 290,
	366, 395, 432, 431, 299, 458, 464, 465, 554, 0,
	470, 637, 638, 639, 479, 0, 400, 484, 485, 486,
	488, 489, 490, 491, 555, 572, 539, 509, 472, 563,
	506, 510, 511, 575, 0, 0, 0, 463, 356, 357,
	0, 335, 283, 284, 632, 321, 386, 577, 610, 611,
	502, 0, 564, 503, 512, 313, 536, 548, 547, 382,
	462, 0, 559, 562, 492, 631, 0, 556, 571, 635,
	570, 627, 392, 0, 412, 568, 515, 0, 560, 534,
	0, 561, 530, 565, 0, 504, 0, 419, 444, 456,
	473, 476, 505, 590, 591, 592, 288, 475, 594, 595,
	596, 597, 598, 599, 600, 593, 447, 537, 514, 540,
	455, 517, 516, 0, 0, 551, 471, 552, 553, 376,
	377, 378, 379, 339, 578, 306, 474, 402, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 544,
	541, 640, 0, 601, 602, 0, 0, 468, 469, 334,
	341, 487, 343, 305, 391, 336, 453, 350, 0, 480,
	545, 481, 604, 607, 605, 606, 383, 346, 347, 416,
	351, 361, 405, 452, 389, 410, 303, 443, 417, 365,
	531, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 585,
	584, 583, 582, 581, 580, 579, 0, 0, 528, 430,
	315, 277, 311, 312, 319, 628, 625, 434, 629, 630,
	0, 285, 508, 359, 0, 401, 333, 573, 574, 0,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 278,
	241, 242, 243, 244, 245, 246, 247, 250, 251, 252,
	253, 254, 255, 256, 257, 576, 248, 249, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 0, 0, 0, 279, 280, 281, 282, 0,
	0, 273, 274, 275, 276, 0, 0, 0, 459, 460,
	461, 483, 0, 445, 507, 626, 0, 0, 0, 0,
	0, 0, 0, 557, 569, 603, 0, 613, 614, 616,
	618, 617, 620, 422, 0, 621, 0, 633, 498, 499,
	634, 609, 388, 0, 513, 546, 535, 619, 501, 0,
	0, 0, 0, 0, 2077, 0, 0, 0, 0, 328,
	0, 0, 358, 550, 532, 542, 533, 518, 519, 520,
	527, 338, 521, 522, 523, 493, 524, 494, 525, 526,
	0, 549, 500, 418, 372, 567, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 2078,
	0, 0, 0, 301, 220, 495, 615, 497, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 1224, 1225, 1226, 1223, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 424, 441, 302, 414, 454, 307, 421, 297, 387,
	411, 0, 0, 293, 439, 420, 369, 348, 349, 292,
	0, 406, 326, 340, 323, 385, 0, 438, 466, 322,
	457, 0, 449, 295, 0, 448, 384, 435, 440, 370,
	364, 0, 294, 437, 368, 363, 352, 330, 482, 353,
	354, 344, 396, 362, 397, 345, 374, 373, 375, 0,
	0, 0, 0, 0, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 608,
	0, 0, 612, 0, 451, 0, 0, 0, 0, 0,
	0, 423, 0, 0, 355, 0, 0, 0, 467, 0,
	409, 390, 636, 0, 0, 407, 360, 436, 398, 442,
	425, 450, 403, 399, 286, 426, 325, 371, 298, 300,
	320, 327, 329, 331, 332, 380, 381, 393, 413, 427,
	428, 429, 324, 308, 408, 309, 342, 310, 287, 316,
	314, 317, 415, 318, 289, 394, 433, 0, 337, 404,
	367, 290, 366, 395, 432, 431, 299, 458, 464, 465,
	554, 0, 470, 637, 638, 639, 479, 0, 400, 484,
	485, 486, 488, 489, 490, 491, 555, 572, 539, 509,
	472, 563, 506, 510, 511, 575, 0, 0, 0, 463,
	356, 357, 0, 335, 283, 284, 632, 321, 386, 577,
	610, 611, 502, 0, 564, 503, 512, 313, 536, 548,
	547, 382, 462, 0, 559, 562, 492, 631, 0, 556,
	571, 635, 570, 627, 392, 0, 412, 568, 515, 0,
	560, 534, 0, 561, 530, 565, 0, 504, 0, 419,
	444, 456, 473, 476, 505, 590, 591, 592, 288, 475,
	594, 595, 596, 597, 598, 599, 600, 593, 447, 537,
	514, 540, 455, 517, 516, 0, 0, 551, 471, 552,
	553, 376, 377, 378, 379, 339, 578, 306, 474, 402,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 544, 541, 640, 0, 601, 602, 0, 0, 468,
	469, 334, 341, 487, 343, 305, 391, 336, 453, 350,
	0, 480, 545, 481, 604, 607, 605, 606, 383, 346,
	347, 416, 351, 361, 405, 452, 389, 410, 303, 443,
	417, 365, 531, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 585, 584, 583, 582, 581, 580, 579, 0, 0,
	528, 430, 315, 277, 311, 312, 319, 628, 625, 434,
	629, 630, 0, 285, 508, 359, 0, 401, 333, 573,
	574, 0, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 278, 241, 242, 243, 244, 245, 246, 247, 250,
	251, 252, 253, 254, 255, 256, 257, 576, 248, 249,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 0, 0, 0, 279, 280, 281,
	282, 0, 0, 273, 274, 275, 276, 0, 0, 0,
	459, 460, 461, 483, 0, 445, 507, 626, 0, 0,
	0, 0, 0, 0, 0, 557, 569, 603, 0, 613,
	614, 616, 618, 617, 620, 422, 197, 621, 0, 633,
	498, 499, 634, 609, 0, 0, 388, 0, 513, 546,
	535, 619, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 0, 0, 358, 550, 532, 542,
	533, 518, 519, 520, 527, 338, 521, 522, 523, 493,
	524, 494, 525, 526, 132, 549, 500, 418, 372, 567,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 2127, 0,
	219, 0, 0, 0, 0, 0, 0, 301, 220, 495,
	615, 497, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 424, 441, 302, 414, 454,
	307, 421, 297, 387, 411, 0, 0, 293, 439, 420,
	369, 348, 349, 292, 0, 406, 326, 340, 323, 385,
	0, 438, 466, 322, 457, 0, 449, 295, 0, 448,
	384, 435, 440, 370, 364, 0, 294, 437, 368, 363,
	352, 330, 482, 353, 354, 344, 396, 362, 397, 345,
	374, 373, 375, 0, 0, 0, 0, 0, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 608, 0, 0, 612, 0, 451, 0,
	0, 0, 0, 0, 0, 423, 0, 0, 355, 0,
	0, 0, 467, 0, 409, 390, 636, 0, 0, 407,
	360, 436, 398, 442, 425, 450, 403, 399, 286, 426,
	325, 371, 298, 300, 320, 327, 329, 331, 332, 380,
	381, 393, 413, 427, 428, 429, 324, 308, 408, 309,
	342, 310, 287, 316, 314, 317, 415, 318, 289, 394,
	433, 0, 337, 404, 367, 290, 366, 395, 432, 431,
	299, 458, 464, 465, 554, 0, 470, 637, 638, 639,
	479, 0, 400, 484, 485, 486, 488, 489, 490, 491,
	555, 572, 539, 509, 472, 563, 506, 510, 511, 575,
	0, 0, 0, 463, 356, 357, 0, 335, 283, 284,
	632, 321, 386, 577, 610, 611, 502, 0, 564, 503,
	512, 313, 536, 548, 547, 382, 462, 0, 559, 562,
	492, 631, 0, 556, 571, 635, 570, 627, 392, 0,
	412, 568, 515, 0, 560, 534, 0, 561, 530, 565,
	0, 504, 0, 419, 444, 456, 473, 476, 505, 590,
	591, 592, 288, 475, 594, 595, 596, 597, 598, 599,
	600, 593, 447, 537, 514, 540, 455, 517, 516, 0,
	0, 551, 471, 552, 553, 376, 377, 378, 379, 339,
	578, 306, 474, 402, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 541, 640, 0, 601,
	602, 0, 0, 468, 469, 334, 341, 487, 343, 305,
	391, 336, 453, 350, 0, 480, 545, 481, 604, 607,
	605, 606, 383, 346, 347, 416, 351, 361, 405, 452,
	389, 410, 303, 443, 417, 365, 531, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 585, 584, 583, 582, 581,
	580, 579, 0, 0, 528, 430, 315, 277, 311, 312,
	319, 628, 625, 434, 629, 630, 0, 285, 508, 359,
	160, 401, 333, 573, 574, 0, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 278, 241, 242, 243, 244,
	245, 246, 247, 250, 251, 252, 253, 254, 255, 256,
	257, 576, 248, 249, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 0, 0,
	0, 279, 280, 281, 282, 0, 0, 273, 274, 275,
	276, 0, 0, 0, 459, 460, 461, 483, 0, 445,
	507, 626, 0, 0, 0, 0, 0, 0, 0, 557,
	569, 603, 0, 613, 614, 616, 618, 617, 620, 422,
	197, 621, 0, 633, 498, 499, 634, 609, 0, 0,
	388, 0, 513, 546, 535, 619, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 0, 0,
	358, 550, 532, 542, 533, 518, 519, 520, 527, 338,
	521, 522, 523, 493, 524, 494, 525, 526, 132, 549,
	500, 418, 372, 567, 566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 2113, 0, 219, 0, 0, 0, 0, 0,
	0, 301, 220, 495, 615, 497, 496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 424,
	441, 302, 414, 454, 307, 421, 297, 387, 411, 0,
	0, 293, 439, 420, 369, 348, 349, 292, 0, 406,
	326, 340, 323, 385, 0, 438, 466, 322, 457, 0,
	449, 295, 0, 448, 384, 435, 440, 370, 364, 0,
	294, 437, 368, 363, 352, 330, 482, 353, 354, 344,
	396, 362, 397, 345, 374, 373, 375, 0, 0, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 0, 0,
	612, 0, 451, 0, 0, 0, 0, 0, 0, 423,
	0, 0, 355, 0, 0, 0, 467, 0, 409, 390,
	636, 0, 0, 407, 360, 436, 398, 442, 425, 450,
	403, 399, 286, 426, 325, 371, 298, 300, 320, 327,
	329, 331, 332, 380, 381, 393, 413, 427, 428, 429,
	324, 308, 408, 309, 342, 310, 287, 316, 314, 317,
	415, 318, 289, 394, 433, 0, 337, 404, 367, 290,
	366, 395, 432, 431, 299, 458, 464, 465, 554, 0,
	470, 637, 638, 639, 479, 0, 400, 484, 485, 486,
	488, 489, 490, 491, 555, 572, 539, 509, 472, 563,
	506, 510, 511, 575, 0, 0, 0, 463, 356, 357,
	0, 335, 283, 284, 632, 321, 386, 577, 610, 611,
	502, 0, 564, 503, 512, 313, 536, 548, 547, 382,
	462, 0, 559, 562, 492, 631, 0, 556, 571, 635,
	570, 627, 392, 0, 412, 568, 515, 0, 560, 534,
	0, 561, 530, 565, 0, 504, 0, 419, 444, 456,
	473, 476, 505, 590, 591, 592, 288, 475, 594, 595,
	596, 597, 598, 599, 600, 593, 447, 537, 514, 540,
	455, 517, 516, 0, 0, 551, 471, 552, 553, 376,
	377, 378, 379, 339, 578, 306, 474, 402, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 544,
	541, 640, 0, 601, 602, 0, 0, 468, 469, 334,
	341, 487, 343, 305, 391, 336, 453, 350, 0, 480,
	545, 481, 604, 607, 605, 606, 383, 346, 347, 416,
	351, 361, 405, 452, 389, 410, 303, 443, 417, 365,
	531, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 585,
	584, 583, 582, 581, 580, 579, 0, 0, 528, 430,
	315, 277, 311, 312, 319, 628, 625, 434, 629, 630,
	0, 285, 508, 359, 160, 401, 333, 573, 574, 0,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 278,
	241, 242, 243, 244, 245, 246, 247, 250, 251, 252,
	253, 254, 255, 256, 257, 576, 248, 249, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 0, 0, 0, 279, 280, 281, 282, 0,
	0, 273, 274, 275, 276, 0, 0, 0, 459, 460,
	461, 483, 0, 445, 507, 626, 0, 0, 0, 0,
	0, 0, 0, 557, 569, 603, 0, 613, 614, 616,
	618, 617, 620, 422, 0, 621, 0, 633, 498, 499,
	634, 609, 388, 0, 513, 546, 535, 619, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	1018, 0, 358, 550, 532, 542, 533, 518, 519, 520,
	527, 338, 521, 522, 523, 493, 524, 494, 525, 526,
	0, 549, 500, 418, 372, 567, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 1025, 1026, 0,
	0, 0, 0, 301, 220, 495, 615, 497, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1029, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 424, 1012, 302, 414, 454, 307, 421, 297, 387,
	411, 0, 0, 293, 439, 420, 369, 348, 349, 292,
	0, 406, 326, 340, 323, 385, 0, 438, 466, 322,
	457, 1000, 449, 295, 999, 448, 384, 435, 440, 370,
	364, 0, 294, 437, 368, 363, 352, 330, 482, 353,
	354, 344, 396, 362, 397, 345, 374, 373, 375, 0,
	0, 0, 0, 0, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 608,
	0, 0, 612, 0, 451, 0, 0, 0, 0, 0,
	0, 423, 0, 0, 355, 0, 0, 0, 467, 0,
	409, 390, 636, 0, 0, 407, 360, 436, 398, 442,
	425, 450, 1016, 399, 286, 426, 325, 371, 298, 300,
	320, 327, 329, 331, 332, 380, 381, 393, 413, 427,
	428, 429, 324, 308, 408, 309, 342, 310, 287, 316,
	314, 317, 415, 318, 289, 394, 433, 0, 337, 404,
	367, 290, 366, 395, 432, 431, 299, 458, 464, 465,
	554, 0, 470, 637, 638, 639, 479, 0, 400, 484,
	485, 486, 488, 489, 490, 491, 555, 572, 539, 509,
	472, 563, 506, 510, 511, 575, 0, 0, 0, 463,
	356, 357, 0, 335, 283, 284, 632, 321, 386, 577,
	610, 611, 502, 0, 564, 503, 512, 313, 536, 548,
	547, 382, 462, 0, 559, 562, 492, 631, 0, 556,
	571, 635, 570, 627, 392, 0, 412, 568, 515, 0,
	560, 534, 0, 561, 530, 565, 0, 504, 0, 419,
	444, 456, 473, 476, 505, 590, 591, 592, 288, 475,
	594, 595, 596, 597, 598, 599, 1017, 593, 447, 537,
	514, 540, 455, 517, 516, 0, 0, 551, 1020, 552,
	553, 376, 377, 378, 379, 339, 578, 1015, 474, 402,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 544, 541, 640, 0, 601, 602, 0, 0, 468,
	469, 334, 341, 487, 343, 305, 391, 336, 453, 350,
	0, 480, 545, 481, 604, 607, 605, 606, 1027, 1013,
	1023, 1014, 351, 361, 405, 452, 389, 410, 303, 443,
	417, 1024, 531, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 585, 584, 583, 582, 581, 580, 579, 0, 0,
	528, 430, 315, 277, 311, 312, 319, 628, 625, 434,
	629, 630, 0, 285, 508, 359, 0, 401, 333, 573,
	574, 0, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 278, 241, 242, 243, 244, 245, 246, 247, 250,
	251, 252, 253, 254, 255, 256, 257, 576, 248, 249,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 0, 0, 0, 279, 280, 281,
	282, 0, 0, 273, 274, 275, 276, 0, 0, 0,
	459, 460, 461, 483, 0, 445, 507, 626, 0, 0,
	0, 0, 0, 0, 0, 557, 569, 603, 0, 613,
	614, 616, 618, 617, 620, 422, 197, 621, 0, 633,
	498, 499, 634, 609, 0, 0, 388, 0, 513, 546,
	535, 619, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 0, 0, 358, 550, 532, 542,
	533, 518, 519, 520, 527, 338, 521, 522, 523, 493,
	524, 494, 525, 526, 132, 549, 500, 418, 372, 567,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2010, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 301, 220, 495,
	615, 497, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 424, 441, 302, 414, 454,
	307, 421, 297, 387, 411, 0, 0, 293, 439, 420,
	369, 348, 349, 292, 0, 406, 326, 340, 323, 385,
	0, 438, 466, 322, 457, 0, 449, 295, 0, 448,
	384, 435, 440, 370, 364, 0, 294, 437, 368, 363,
	352, 330, 482, 353, 354, 344, 396, 362, 397, 345,
	374, 373, 375, 0, 0, 0, 0, 0, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 608, 0, 0, 612, 0, 451, 0,
	0, 0, 0, 0, 0, 423, 0, 0, 355, 0,
	0, 0, 467, 0, 409, 390, 636, 0, 0, 407,
	360, 436, 398, 442, 425, 450, 403, 399, 286, 426,
	325, 371, 298, 300, 320, 327, 329, 331, 332, 380,
	381, 393, 413, 427, 428, 429, 324, 308, 408, 309,
	342, 310, 287, 316, 314, 317, 415, 318, 289, 394,
	433, 0, 337, 404, 367, 290, 366, 395, 432, 431,
	299, 458, 464, 465, 554, 0, 470, 637, 638, 639,
	479, 0, 400, 484, 485, 486, 488, 489, 490, 491,
	555, 572, 539, 509, 472, 563, 506, 510, 511, 575,
	0, 0, 0, 463, 356, 357, 0, 335, 283, 284,
	632, 321, 386, 577, 610, 611, 502, 0, 564, 503,
	512, 313, 536, 548, 547, 382, 462, 0, 559, 562,
	492, 631, 0, 556, 571, 635, 570, 627, 392, 0,
	412, 568, 515, 0, 560, 534, 0, 561, 530, 565,
	0, 504, 0, 419, 444, 456, 473, 476, 505, 590,
	591, 592, 288, 475, 594, 595, 596, 597, 598, 599,
	600, 593, 447, 537, 514, 540, 455, 517, 516, 0,
	0, 551, 471, 552, 553, 376, 377, 378, 379, 339,
	578, 306, 474, 402, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 541, 640, 0, 601,
	602, 0, 0, 468, 469, 334, 341, 487, 343, 305,
	391, 336, 453, 350, 0, 480, 545, 481, 604, 607,
	605, 606, 383, 346, 347, 416, 351, 361, 405, 452,
	389, 410, 303, 443, 417, 365, 531, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 585, 584, 583, 582, 581,
	580, 579, 0, 0, 528, 430, 315, 277, 311, 312,
	319, 628, 625, 434, 629, 630, 0, 285, 508, 359,
	160, 401, 333, 573, 574, 0, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 278, 241, 242, 243, 244,
	245, 246, 247, 250, 251, 252, 253, 254, 255, 256,
	257, 576, 248, 249, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 0, 0,
	0, 279, 280, 281, 282, 0, 0, 273, 274, 275,
	276, 0, 0, 0, 459, 460, 461, 483, 0, 445,
	507, 626, 0, 0, 0, 0, 0, 0, 0, 557,
	569, 603, 0, 613, 614, 616, 618, 617, 620, 422,
	0, 621, 0, 633, 498, 499, 634, 609, 388, 0,
	513, 546, 535, 619, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 0, 358, 550,
	532, 542, 533, 518, 519, 520, 527, 338, 521, 522,
	523, 493, 524, 494, 525, 526, 0, 549, 500, 418,
	372, 567, 566, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 1025, 1026, 0, 0, 0, 0, 301,
	220, 495, 615, 497, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1029, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 424, 441, 302,
	414, 454, 307, 421, 297, 387, 411, 0, 0, 293,
	439, 420, 369, 348, 349, 292, 0, 406, 326, 340,
	323, 385, 0, 438, 466, 322, 457, 1000, 449, 295,
	999, 448, 384, 435, 440, 370, 364, 0, 294, 437,
	368, 363, 352, 330, 482, 353, 354, 344, 396, 362,
	397, 345, 374, 373, 375, 0, 0, 0, 0, 0,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 608, 0, 0, 612, 0,
	451, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	355, 0, 0, 0, 467, 0, 409, 390, 636, 0,
	0, 407, 360, 436, 398, 442, 425, 450, 403, 399,
	286, 426, 325, 371, 298, 300, 320, 327, 329, 331,
	332, 380, 381, 393, 413, 427, 428, 429, 324, 308,
	408, 309, 342, 310, 287, 316, 314, 317, 415, 318,
	289, 394, 433, 0, 337, 404, 367, 290, 366, 395,
	432, 431, 299, 458, 464, 465, 554, 0, 470, 637,
	638, 639, 479, 0, 400, 484, 485, 486, 488, 489,
	490, 491, 555, 572, 539, 509, 472, 563, 506, 510,
	511, 575, 0, 0, 0, 463, 356, 357, 0, 335,
	283, 284, 632, 321, 386, 577, 610, 611, 502, 0,
	564, 503, 512, 313, 536, 548, 547, 382, 462, 0,
	559, 562, 492, 631, 0, 556, 571, 635, 570, 627,
	392, 0, 412, 568, 515, 0, 560, 534, 0, 561,
	530, 565, 0, 504, 0, 419, 444, 456, 473, 476,
	505, 590, 591, 592, 288, 475, 594, 595, 596, 597,
	598, 599, 600, 593, 447, 537, 514, 540, 455, 517,
	516, 0, 0, 551, 471, 552, 553, 376, 377, 378,
	379, 339, 578, 306, 474, 402, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 544, 541, 640,
	0, 601, 602, 0, 0, 468, 469, 334, 341, 487,
	343, 305, 391, 336, 453, 350, 0, 480, 545, 481,
	604, 607, 605, 606, 1027, 2030, 1023, 2031, 351, 361,
	405, 452, 389, 410, 303, 443, 417, 1024, 531, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 585, 584, 583,
	582, 581, 580, 579, 0, 0, 528, 430, 315, 277,
	311, 312, 319, 628, 625, 434, 629, 630, 0, 285,
	508, 359, 0, 401, 333, 573, 574, 0, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 278, 241, 242,
	243, 244, 245, 246, 247, 250, 251, 252, 253, 254,
	255, 256, 257, 576, 248, 249, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	0, 0, 0, 279, 280, 281, 282, 0, 0, 273,
	274, 275, 276, 0, 0, 0, 459, 460, 461, 483,
	0, 445, 507, 626, 0, 0, 0, 0, 0, 0,
	0, 557, 569, 603, 0, 613, 614, 616, 618, 617,
	620, 422, 0, 621, 0, 633, 498, 499, 634, 609,
	388, 0, 513, 546, 535, 619, 501, 0, 0, 2891,
	0, 0, 0, 0, 0, 0, 0, 328, 0, 0,
	358, 550, 532, 542, 533, 518, 519, 520, 527, 338,
	521, 522, 523, 493, 524, 494, 525, 526, 0, 549,
	500, 418, 372, 567, 566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 301, 220, 495, 615, 497, 496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 424,
	441, 302, 414, 454, 307, 421, 297, 387, 411, 0,
	0, 293, 439, 420, 369, 348, 349, 292, 0, 406,
	326, 340, 323, 385, 0, 438, 466, 322, 457, 0,
	449, 295, 0, 448, 384, 435, 440, 370, 364, 0,
	294, 437, 368, 363, 352, 330, 482, 353, 354, 344,
	396, 362, 397, 345, 374, 373, 375, 0, 0, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 2894, 0, 0, 0, 2893, 608, 0, 0,
	612, 0, 451, 0, 0, 0, 0, 0, 0, 423,
	0, 0, 355, 0, 0, 0, 467, 0, 409, 390,
	636, 0, 0, 407, 360, 436, 398, 442, 425, 450,
	403, 399, 286, 426, 325, 371, 298, 300, 320, 327,
	329, 331, 332, 380, 381, 393, 413, 427, 428, 429,
	324, 308, 408, 309, 342, 310, 287, 316, 314, 317,
	415, 318, 289, 394, 433, 0, 337, 404, 367, 290,
	366, 395, 432, 431, 299, 458, 464, 465, 554, 0,
	470, 637, 638, 639, 479, 0, 400, 484, 485, 486,
	488, 489, 490, 491, 555, 572, 539, 509, 472, 563,
	506, 510, 511, 575, 0, 0, 0, 463, 356, 357,
	0, 335, 283, 284, 632, 321, 386, 577, 610, 611,
	502, 0, 564, 503, 512, 313, 536, 548, 547, 382,
	462, 0, 559, 562, 492, 631, 0, 556, 571, 635,
	570, 627, 392, 0, 412, 568, 515, 0, 560, 534,
	0, 561, 530, 565, 0, 504, 0, 419, 444, 456,
	473, 476, 505, 590, 591, 592, 288, 475, 594, 595,
	596, 597, 598, 599, 600, 593, 447, 537, 514, 540,
	455, 517, 516, 0, 0, 551, 471, 552, 553, 376,
	377, 378, 379, 339, 578, 306, 474, 402, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 544,
	541, 640, 0, 601, 602, 0, 0, 468, 469, 334,
	341, 487, 343, 305, 391, 336, 453, 350, 0, 480,
	545, 481, 604, 607, 605, 606, 383, 346, 347, 416,
	351, 361, 405, 452, 389, 410, 303, 443, 417, 365,
	531, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 585,
	584, 583, 582, 581, 580, 579, 0, 0, 528, 430,
	315, 277, 311, 312, 319, 628, 625, 434, 629, 630,
	0, 285, 508, 359, 0, 401, 333, 573, 574, 0,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 278,
	241, 242, 243, 244, 245, 246, 247, 250, 251, 252,
	253, 254, 255, 256, 257, 576, 248, 249, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 0, 0, 0, 279, 280, 281, 282, 0,
	0, 273, 274, 275, 276, 0, 0, 0, 459, 460,
	461, 483, 0, 445, 507, 626, 0, 0, 0, 0,
	0, 0, 0, 557, 569, 603, 0, 613, 614, 616,
	618, 617, 620, 422, 0, 621, 0, 633, 498, 499,
	634, 609, 388, 0, 513, 546, 535, 619, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	1510, 0, 358, 550, 532, 542, 533, 518, 519, 520,
	527, 338, 521, 522, 523, 493, 524, 494, 525, 526,
	0, 549, 500, 418, 372, 567, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 1508,
	0, 0, 0, 301, 220, 495, 615, 497, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1506, 0, 0, 0, 0, 0, 0,
	291, 424, 441, 302, 414, 454, 307, 421, 297, 387,
	411, 0, 0, 293, 439, 420, 369, 348, 349, 292,
	0, 406, 326, 340, 323, 385, 0, 438, 466, 322,
	457, 0, 449, 295, 0, 448, 384, 435, 440, 370,
	364, 0, 294, 437, 368, 363, 352, 330, 482, 353,
	354, 344, 396, 362, 397, 345, 374, 373, 375, 0,
	0, 0, 0, 0, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 608,
	0, 0, 612, 0, 451, 0, 0, 0, 0, 0,
	0, 423, 0, 0, 355, 0, 0, 0, 467, 0,
	409, 390, 636, 0, 0, 407, 360, 436, 398, 442,
	425, 450, 403, 399, 286, 426, 325, 371, 298, 300,
	320, 327, 329, 331, 332, 380, 381, 393, 413, 427,
	428, 429, 324, 308, 408, 309, 342, 310, 287, 316,
	314, 317, 415, 318, 289, 394, 433, 0, 337, 404,
	367, 290, 366, 395, 432, 431, 299, 458, 464, 465,
	554, 0, 470, 637, 638, 639, 479, 0, 400, 484,
	485, 486, 488, 489, 490, 491, 555, 572, 539, 509,
	472, 563, 506, 510, 511, 575, 0, 0, 0, 463,
	356, 357, 0, 335, 283, 284, 632, 321, 386, 577,
	610, 611, 502, 0, 564, 503, 512, 313, 536, 548,
	547, 382, 462, 0, 559, 562, 492, 631, 0, 556,
	571, 635, 570, 627, 392, 0, 412, 568, 515, 0,
	560, 534, 0, 561, 530, 565, 0, 504, 0, 419,
	444, 456, 473, 476, 505, 590, 591, 592, 288, 475,
	594, 595, 596, 597, 598, 599, 600, 593, 447, 537,
	514, 540, 455, 517, 516, 0, 0, 551, 471, 552,
	553, 376, 377, 378, 379, 339, 578, 306, 474, 402,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 544, 541, 640, 0, 601, 602, 0, 0, 468,
	469, 334, 341, 487, 343, 305, 391, 336, 453, 350,
	0, 480, 545, 481, 604, 607, 605, 606, 383, 346,
	347, 416, 351, 361, 405, 452, 389, 410, 303, 443,
	417, 365, 531, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 585, 584, 583, 582, 581, 580, 579, 0, 0,
	528, 430, 315, 277, 311, 312, 319, 628, 625, 434,
	629, 630, 0, 285, 508, 359, 0, 401, 333, 573,
	574, 0, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 278, 241, 242, 243, 244, 245, 246, 247, 250,
	251, 252, 253, 254, 255, 256, 257, 576, 248, 249,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 0, 0, 0, 279, 280, 281,
	282, 0, 0, 273, 274, 275, 276, 0, 0, 0,
	459, 460, 461, 483, 0, 445, 507, 626, 0, 0,
	0, 0, 0, 0, 0, 557, 569, 603, 0, 613,
	614, 616, 618, 617, 620, 422, 0, 621, 0, 633,
	498, 499, 634, 609, 388, 0, 513, 546, 535, 619,
	501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 1504, 0, 358, 550, 532, 542, 533, 518,
	519, 520, 527, 338, 521, 522, 523, 493, 524, 494,
	525, 526, 0, 549, 500, 418, 372, 567, 566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 1508, 0, 0, 0, 301, 220, 495, 615, 497,
	496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1506, 0, 0, 0, 0,
	0, 0, 291, 424, 441, 302, 414, 454, 307, 421,
	297, 387, 411, 0, 0, 293, 439, 420, 369, 348,
	349, 292, 0, 406, 326, 340, 323, 385, 0, 438,
	466, 322, 457, 0, 449, 295, 0, 448, 384, 435,
	440, 370, 364, 0, 294, 437, 368, 363, 352, 330,
	482, 353, 354, 344, 396, 362, 397, 345, 374, 373,
	375, 0, 0, 0, 0, 0, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 0, 0, 612, 0, 451, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 355, 0, 0, 0,
	467, 0, 409, 390, 636, 0, 0, 407, 360, 436,
	398, 442, 425, 450, 403, 399, 286, 426, 325, 371,
	298, 300, 320, 327, 329, 331, 332, 380, 381, 393,
	413, 427, 428, 429, 324, 308, 408, 309, 342, 310,
	287, 316, 314, 317, 415, 318, 289, 394, 433, 0,
	337, 404, 367, 290, 366, 395, 432, 431, 299, 458,
	464, 465, 554, 0, 470, 637, 638, 639, 479, 0,
	400, 484, 485, 486, 488, 489, 490, 491, 555, 572,
	539, 509, 472, 563, 506, 510, 511, 575, 0, 0,
	0, 463, 356, 357, 0, 335, 283, 284, 632, 321,
	386, 577, 610, 611, 502, 0, 564, 503, 512, 313,
	536, 548, 547, 382, 462, 0, 559, 562, 492, 631,
	0, 556, 571, 635, 570, 627, 392, 0, 412, 568,
	515, 0, 560, 534, 0, 561, 530, 565, 0, 504,
	0, 419, 444, 456, 473, 476, 505, 590, 591, 592,
	288, 475, 594, 595, 596, 597, 598, 599, 600, 593,
	447, 537, 514, 540, 455, 517, 516, 0, 0, 551,
	471, 552, 553, 376, 377, 378, 379, 339, 578, 306,
	474, 402, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 544, 541, 640, 0, 601, 602, 0,
	0, 468, 469, 334, 341, 487, 343, 305, 391, 336,
	453, 350, 0, 480, 545, 481, 604, 607, 605, 606,
	383, 346, 347, 416, 351, 361, 405, 452, 389, 410,
	303, 443, 417, 365, 531, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 585, 584, 583, 582, 581, 580, 579,
	0, 0, 528, 430, 315, 277, 311, 312, 319, 628,
	625, 434, 629, 630, 0, 285, 508, 359, 0, 401,
	333, 573, 574, 0, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 278, 241, 242, 243, 244, 245, 246,
	247, 250, 251, 252, 253, 254, 255, 256, 257, 576,
	248, 249, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 0, 0, 0, 279,
	280, 281, 282, 0, 0, 273, 274, 275, 276, 0,
	0, 0, 459, 460, 461, 483, 0, 445, 507, 626,
	0, 0, 0, 0, 0, 0, 0, 557, 569, 603,
	0, 613, 614, 616, 618, 617, 620, 422, 0, 621,
	0, 633, 498, 499, 634, 609, 388, 0, 513, 546,
	535, 619, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 0, 0, 358, 550, 532, 542,
	533, 518, 519, 520, 527, 338, 521, 522, 523, 493,
	524, 494, 525, 526, 0, 549, 500, 418, 372, 567,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3927, 0,
	219, 828, 0, 0, 0, 0, 0, 301, 220, 495,
	615, 497, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 424, 441, 302, 414, 454,
	307, 421, 297, 387, 411, 0, 0, 293, 439, 420,
	369, 348, 349, 292, 0, 406, 326, 340, 323, 385,
	0, 438, 466, 322, 457, 0, 449, 295, 0, 448,
	384, 435, 440, 370, 364, 0, 294, 437, 368, 363,
	352, 330, 482, 353, 354, 344, 396, 362, 397, 345,
	374, 373, 375, 0, 0, 0, 0, 0, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 608, 0, 0, 612, 0, 451, 0,
	0, 0, 0, 0, 0, 423, 0, 0, 355, 0,
	0, 0, 467, 0, 409, 390, 636, 0, 0, 407,
	360, 436, 398, 442, 425, 450, 403, 399, 286, 426,
	325, 371, 298, 300, 320, 327, 329, 331, 332, 380,
	381, 393, 413, 427, 428, 429, 324, 308, 408, 309,
	342, 310, 287, 316, 314, 317, 415, 318, 289, 394,
	433, 0, 337, 404, 367, 290, 366, 395, 432, 431,
	299, 458, 464, 465, 554, 0, 470, 637, 638, 639,
	479, 0, 400, 484, 485, 486, 488, 489, 490, 491,
	555, 572, 539, 509, 472, 563, 506, 510, 511, 575,
	0, 0, 0, 463, 356, 357, 0, 335, 283, 284,
	632, 321, 386, 577, 610, 611, 502, 0, 564, 503,
	512, 313, 536, 548, 547, 382, 462, 0, 559, 562,
	492, 631, 0, 556, 571, 635, 570, 627, 392, 0,
	412, 568, 515, 0, 560, 534, 0, 561, 530, 565,
	0, 504, 0, 419, 444, 456, 473, 476, 505, 590,
	591, 592, 288, 475, 594, 595, 596, 597, 598, 599,
	600, 593, 447, 537, 514, 540, 455, 517, 516, 0,
	0, 551, 471, 552, 553, 376, 377, 378, 379, 339,
	578, 306, 474, 402, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 541, 640, 0, 601,
	602, 0, 0, 468, 469, 334, 341, 487, 343, 305,
	391, 336, 453, 350, 0, 480, 545, 481, 604, 607,
	605, 606, 383, 346, 347, 416, 351, 361, 405, 452,
	389, 410, 303, 443, 417, 365, 531, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 585, 584, 583, 582, 581,
	580, 579, 0, 0, 528, 430, 315, 277, 311, 312,
	319, 628, 625, 434, 629, 630, 0, 285, 508, 359,
	0, 401, 333, 573, 574, 0, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 278, 241, 242, 243, 244,
	245, 246, 247, 250, 251, 252, 253, 254, 255, 256,
	257, 576, 248, 249, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 0, 0,
	0, 279, 280, 281, 282, 0, 0, 273, 274, 275,
	276, 0, 0, 0, 459, 460, 461, 483, 0, 445,
	507, 626, 0, 0, 0, 0, 0, 0, 0, 557,
	569, 603, 0, 613, 614, 616, 618, 617, 620, 422,
	0, 621, 0, 633, 498, 499, 634, 609, 388, 0,
	513, 546, 535, 619, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 0, 358, 550,
	532, 542, 533, 518, 519, 520, 527, 338, 521, 522,
	523, 493, 524, 494, 525, 526, 0, 549, 500, 418,
	372, 567, 566, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 1508, 0, 0, 0, 301,
	220, 495, 615, 497, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 0, 0, 0, 0, 0, 291, 424, 441, 302,
	414, 454, 307, 421, 297, 387, 411, 0, 0, 293,
	439, 420, 369, 348, 349, 292, 0, 406, 326, 340,
	323, 385, 0, 438, 466, 322, 457, 0, 449, 295,
	0, 448, 384, 435, 440, 370, 364, 0, 294, 437,
	368, 363, 352, 330, 482, 353, 354, 344, 396, 362,
	397, 345, 374, 373, 375, 0, 0, 0, 0, 0,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 608, 0, 0, 612, 0,
	451, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	355, 0, 0, 0, 467, 0, 409, 390, 636, 0,
	0, 407, 360, 436, 398, 442, 425, 450, 403, 399,
	286, 426, 325, 371, 298, 300, 320, 327, 329, 331,
	332, 380, 381, 393, 413, 427, 428, 429, 324, 308,
	408, 309, 342, 310, 287, 316, 314, 317, 415, 318,
	289, 394, 433, 0, 337, 404, 367, 290, 366, 395,
	432, 431, 299, 458, 464, 465, 554, 0, 470, 637,
	638, 639, 479, 0, 400, 484, 485, 486, 488, 489,
	490, 491, 555, 572, 539, 509, 472, 563, 506, 510,
	511, 575, 0, 0, 0, 463, 356, 357, 0, 335,
	283, 284, 632, 321, 386, 577, 610, 611, 502, 0,
	564, 503, 512, 313, 536, 548, 547, 382, 462, 0,
	559, 562, 492, 631, 0, 556, 571, 635, 570, 627,
	392, 0, 412, 568, 515, 0, 560, 534, 0, 561,
	530, 565, 0, 504, 0, 419, 444, 456, 473, 476,
	505, 590, 591, 592, 288, 475, 594, 595, 596, 597,
	598, 599, 600, 593, 447, 537, 514, 540, 455, 517,
	516, 0, 0, 551, 471, 552, 553, 376, 377, 378,
	379, 339, 578, 306, 474, 402, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 544, 541, 640,
	0, 601, 602, 0, 0, 468, 469, 334, 341, 487,
	343, 305, 391, 336, 453, 350, 0, 480, 545, 481,
	604, 607, 605, 606, 383, 346, 347, 416, 351, 361,
	405, 452, 389, 410, 303, 443, 417, 365, 531, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 585, 584, 583,
	582, 581, 580, 579, 0, 0, 528, 430, 315, 277,
	311, 312, 319, 628, 625, 434, 629, 630, 0, 285,
	508, 359, 0, 401, 333, 573, 574, 0, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 278, 241, 242,
	243, 244, 245, 246, 247, 250, 251, 252, 253, 254,
	255, 256, 257, 576, 248, 249, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	0, 0, 0, 279, 280, 281, 282, 0, 0, 273,
	274, 275, 276, 0, 0, 0, 459, 460, 461, 483,
	0, 445, 507, 626, 0, 0, 0, 0, 0, 0,
	0, 557, 569, 603, 0, 613, 614, 616, 618, 617,
	620, 422, 0, 621, 0, 633, 498, 499, 634, 609,
	388, 0, 513, 546, 535, 619, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 0, 0,
	358, 550, 532, 542, 533, 518, 519, 520, 527, 338,
	521, 522, 523, 493, 524, 494, 525, 526, 0, 549,
	500, 418, 372, 567, 566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 301, 220, 495, 615, 497, 496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 424,
	441, 302, 414, 454, 307, 421, 297, 387, 411, 0,
	0, 293, 439, 420, 369, 348, 349, 292, 0, 406,
	326, 340, 323, 385, 0, 438, 466, 322, 457, 0,
	449, 295, 0, 448, 384, 435, 440, 370, 364, 0,
	294, 437, 368, 363, 352, 330, 482, 353, 354, 344,
	396, 362, 397, 345, 374, 373, 375, 0, 0, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 0, 0,
	612, 0, 451, 0, 0, 0, 0, 0, 0, 423,
	0, 0, 355, 0, 0, 0, 467, 0, 409, 390,
	636, 0, 0, 407, 360, 436, 398, 442, 425, 450,
	403, 399, 286, 426, 325, 371, 298, 300, 320, 327,
	329, 331, 332, 380, 381, 393, 413, 427, 428, 429,
	324, 308, 408, 309, 342, 310, 287, 316, 314, 317,
	415, 318, 289, 394, 433, 0, 337, 404, 367, 290,
	366, 395, 432, 431, 299, 458, 464, 465, 554, 0,
	470, 637, 638, 639, 479, 2420, 400, 484, 485, 486,
	488, 489, 490, 491, 555, 572, 539, 509, 472, 563,
	506, 510, 511, 575, 0, 0, 0, 463, 356, 357,
	0, 335, 283, 284, 632, 321, 386, 577, 610, 611,
	502, 0, 564, 503, 512, 313, 536, 548, 547, 382,
	462, 0, 559, 562, 492, 631, 0, 556, 571, 635,
	570, 627, 392, 0, 412, 568, 515, 0, 560, 534,
	0, 561, 530, 565, 0, 504, 0, 419, 444, 456,
	473, 476, 505, 590, 591, 592, 288, 475, 594, 595,
	596, 597, 598, 599, 600, 593, 447, 537, 514, 540,
	455, 517, 516, 0, 0, 551, 471, 552, 553, 376,
	377, 378, 379, 339, 578, 306, 474, 402, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 544,
	541, 640, 0, 601, 602, 0, 0, 468, 469, 334,
	341, 487, 343, 305, 391, 336, 453, 350, 0, 480,
	545, 481, 604, 607, 605, 606, 383, 346, 347, 416,
	351, 361, 405, 452, 389, 410, 303, 443, 417, 365,
	531, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 585,
	584, 583, 582, 581, 580, 579, 950, 0, 528, 430,
	315, 277, 311, 312, 319, 628, 625, 434, 629, 630,
	0, 285, 508, 359, 0, 401, 333, 573, 574, 0,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 278,
	241, 242, 243, 244, 245, 246, 247, 250, 251, 252,
	253, 254, 255, 256, 257, 576, 248, 249, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 0, 0, 0, 279, 280, 281, 282, 0,
	0, 273, 274, 275, 276, 0, 0, 0, 459, 460,
	461, 483, 0, 445, 507, 626, 0, 0, 0, 0,
	0, 0, 0, 557, 569, 603, 0, 613, 614, 616,
	618, 617, 620, 422, 0, 621, 0, 633, 498, 499,
	634, 609, 388, 0, 513, 546, 535, 619, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	0, 0, 358, 550, 532, 542, 533, 518, 519, 520,
	527, 338, 521, 522, 523, 493, 524, 494, 525, 526,
	0, 549, 500, 418, 372, 567, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 1508,
	0, 0, 0, 301, 220, 495, 615, 497, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1718, 0, 0, 0, 0, 0, 0,
	291, 424, 441, 302, 414, 454, 307, 421, 297, 387,
	411, 0, 0, 293, 439, 420, 369, 348, 349, 292,
	0, 406, 326, 340, 323, 385, 0, 438, 466, 322,
	457, 0, 449, 295, 0, 448, 384, 435, 440, 370,
	364, 0, 294, 437, 368, 363, 352, 330, 482, 353,
	354, 344, 396, 362, 397, 345, 374, 373, 375, 0,
	0, 0, 0, 0, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 608,
	0, 0, 612, 0, 451, 0, 0, 0, 0, 0,
	0, 423, 0, 0, 355, 0, 0, 0, 467, 0,
	409, 390, 636, 0, 0, 407, 360, 436, 398, 442,
	425, 450, 403, 399, 286, 426, 325, 371, 298, 300,
	320, 327, 329, 331, 332, 380, 381, 393, 413, 427,
	428, 429, 324, 308, 408, 309, 342, 310, 287, 316,
	314, 317, 415, 318, 289, 394, 433, 0, 337, 404,
	367, 290, 366, 395, 432, 431, 299, 458, 464, 465,
	554, 0, 470, 637, 638, 639, 479, 0, 400, 484,
	485, 486, 488, 489, 490, 491, 555, 572, 539, 509,
	472, 563, 506, 510, 511, 575, 0, 0, 0, 463,
	356, 357, 0, 335, 283, 284, 632, 321, 386, 577,
	610, 611, 502, 0, 564, 503, 512, 313, 536, 548,
	547, 382, 462, 0, 559, 562, 492, 631, 0, 556,
	571, 635, 570, 627, 392, 0, 412, 568, 515, 0,
	560, 534, 0, 561, 530, 565, 0, 504, 0, 419,
	444, 456, 473, 476, 505, 590, 591, 592, 288, 475,
	594, 595, 596, 597, 598, 599, 600, 593, 447, 537,
	514, 540, 455, 517, 516, 0, 0, 551, 471, 552,
	553, 376, 377, 378, 379, 339, 578, 306, 474, 402,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 544, 541, 640, 0, 601, 602, 0, 0, 468,
	469, 334, 341, 487, 343, 305, 391, 336, 453, 350,
	0, 480, 545, 481, 604, 607, 605, 606, 383, 346,
	347, 416, 351, 361, 405, 452, 389, 410, 303, 443,
	417, 365, 531, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 585, 584, 583, 582, 581, 580, 579, 0, 0,
	528, 430, 315, 277, 311, 312, 319, 628, 625, 434,
	629, 630, 0, 285, 508, 359, 0, 401, 333, 573,
	574, 0, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 278, 241, 242, 243, 244, 245, 246, 247, 250,
	251, 252, 253, 254, 255, 256, 257, 576, 248, 249,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 0, 0, 0, 279, 280, 281,
	282, 0, 0, 273, 274, 275, 276, 0, 0, 0,
	459, 460, 461, 483, 0, 445, 507, 626, 0, 0,
	0, 0, 0, 0, 0, 557, 569, 603, 0, 613,
	614, 616, 618, 617, 620, 422, 0, 621, 0, 633,
	498, 499, 634, 609, 388, 0, 513, 546, 535, 619,
	501, 0, 0, 0, 0, 0, 2456, 0, 0, 0,
	0, 328, 0, 0, 358, 550, 532, 542, 533, 518,
	519, 520, 527, 338, 521, 522, 523, 493, 524, 494,
	525, 526, 0, 549, 500, 418, 372, 567, 566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 2458, 0, 0, 0, 301, 220, 495, 615, 497,
	496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 424, 441, 302, 414, 454, 307, 421,
	297, 387, 411, 0, 0, 293, 439, 420, 369, 348,
	349, 292, 0, 406, 326, 340, 323, 385, 0, 438,
	466, 322, 457, 0, 449, 295, 0, 448, 384, 435,
	440, 370, 364, 0, 294, 437, 368, 363, 352, 330,
	482, 353, 354, 344, 396, 362, 397, 345, 374, 373,
	375, 0, 0, 0, 0, 0, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 0, 0, 612, 0, 451, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 355, 0, 0, 0,
	467, 0, 409, 390, 636, 0, 0, 407, 360, 436,
	398, 442, 425, 450, 403, 399, 286, 426, 325, 371,
	298, 300, 320, 327, 329, 331, 332, 380, 381, 393,
	413, 427, 428, 429, 324, 308, 408, 309, 342, 310,
	287, 316, 314, 317, 415, 318, 289, 394, 433, 0,
	337, 404, 367, 290, 366, 395, 432, 431, 299, 458,
	464, 465, 554, 0, 470, 637, 638, 639, 479, 0,
	400, 484, 485, 486, 488, 489, 490, 491, 555, 572,
	539, 509, 472, 563, 506, 510, 511, 575, 0, 0,
	0, 463, 356, 357, 0, 335, 283, 284, 632, 321,
	386, 577, 610, 611, 502, 0, 564, 503, 512, 313,
	536, 548, 547, 382, 462, 0, 559, 562, 492, 631,
	0, 556, 571, 635, 570, 627, 392, 0, 412, 568,
	515, 0, 560, 534, 0, 561, 530, 565, 0, 504,
	0, 419, 444, 456, 473, 476, 505, 590, 591, 592,
	288, 475, 594, 595, 596, 597, 598, 599, 600, 593,
	447, 537, 514, 540, 455, 517, 516, 0, 0, 551,
	471, 552, 553, 376, 377, 378, 379, 339, 578, 306,
	474, 402, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 544, 541, 640, 0, 601, 602, 0,
	0, 468, 469, 334, 341, 487, 343, 305, 391, 336,
	453, 350, 0, 480, 545, 481, 604, 607, 605, 606,
	383, 346, 347, 416, 351, 361, 405, 452, 389, 410,
	303, 443, 417, 365, 531, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 585, 584, 583, 582, 581, 580, 579,
	0, 0, 528, 430, 315, 277, 311, 312, 319, 628,
	625, 434, 629, 630, 0, 285, 508, 359, 0, 401,
	333, 573, 574, 0, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 278, 241, 242, 243, 244, 245, 246,
	247, 250, 251, 252, 253, 254, 255, 256, 257, 576,
	248, 249, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 0, 0, 0, 279,
	280, 281, 282, 0, 0, 273, 274, 275, 276, 0,
	0, 0, 459, 460, 461, 483, 0, 445, 507, 626,
	0, 0, 0, 0, 0, 0, 0, 557, 569, 603,
	0, 613, 614, 616, 618, 617, 620, 422, 0, 621,
	0, 633, 498, 499, 634, 609, 388, 0, 513, 546,
	535, 619, 501, 0, 0, 0, 0, 0, 2077, 0,
	0, 0, 0, 328, 0, 0, 358, 550, 532, 542,
	533, 518, 519, 520, 527, 338, 521, 522, 523, 493,
	524, 494, 525, 526, 0, 549, 500, 418, 372, 567,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 2078, 0, 0, 0, 301, 220, 495,
	615, 497, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 424, 441, 302, 414, 454,
	307, 421, 297, 387, 411, 0, 0, 293, 439, 420,
	369, 348, 349, 292, 0, 406, 326, 340, 323, 385,
	0, 438, 466, 322, 457, 0, 449, 295, 0, 448,
	384, 435, 440, 370, 364, 0, 294, 437, 368, 363,
	352, 330, 482, 353, 354, 344, 396, 362, 397, 345,
	374, 373, 375, 0, 0, 0, 0, 0, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 608, 0, 0, 612, 0, 451, 0,
	0, 0, 0, 0, 0, 423, 0, 0, 355, 0,
	0, 0, 467, 0, 409, 390, 636, 0, 0, 407,
	360, 436, 398, 442, 425, 450, 403, 399, 286, 426,
	325, 371, 298, 300, 320, 327, 329, 331, 332, 380,
	381, 393, 413, 427, 428, 429, 324, 308, 408, 309,
	342, 310, 287, 316, 314, 317, 415, 318, 289, 394,
	433, 0, 337, 404, 367, 290, 366, 395, 432, 431,
	299, 458, 464, 465, 554, 0, 470, 637, 638, 639,
	479, 0, 400, 484, 485, 486, 488, 489, 490, 491,
	555, 572, 539, 509, 472, 563, 506, 510, 511, 575,
	0, 0, 0, 463, 356, 357, 0, 335, 283, 284,
	632, 321, 386, 577, 610, 611, 502, 0, 564, 503,
	512, 313, 536, 548, 547, 382, 462, 0, 559, 562,
	492, 631, 0, 556, 571, 635, 570, 627, 392, 0,
	412, 568, 515, 0, 560, 534, 0, 561, 530, 565,
	0, 504, 0, 419, 444, 456, 473, 476, 505, 590,
	591, 592, 288, 475, 594, 595, 596, 597, 598, 599,
	600, 593, 447, 537, 514, 540, 455, 517, 516, 0,
	0, 551, 471, 552, 553, 376, 377, 378, 379, 339,
	578, 306, 474, 402, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 541, 640, 0, 601,
	602, 0, 0, 468, 469, 334, 341, 487, 343, 305,
	391, 336, 453, 350, 0, 480, 545, 481, 604, 607,
	605, 606, 383, 346, 347, 416, 351, 361, 405, 452,
	389, 410, 303, 443, 417, 365, 531, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 585, 584, 583, 582, 581,
	580, 579, 0, 0, 528, 430, 315, 277, 311, 312,
	319, 628, 625, 434, 629, 630, 0, 285, 508, 359,
	0, 401, 333, 573, 574, 0, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 278, 241, 242, 243, 244,
	245, 246, 247, 250, 251, 252, 253, 254, 255, 256,
	257, 576, 248, 249, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 0, 0,
	0, 279, 280, 281, 282, 0, 0, 273, 274, 275,
	276, 0, 0, 0, 459, 460, 461, 483, 0, 445,
	507, 626, 0, 0, 0, 0, 0, 0, 0, 557,
	569, 603, 0, 613, 614, 616, 618, 617, 620, 422,
	0, 621, 0, 633, 498, 499, 634, 609, 388, 0,
	513, 546, 535, 619, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 0, 358, 550,
	532, 542, 533, 518, 519, 520, 527, 338, 521, 522,
	523, 493, 524, 494, 525, 526, 0, 549, 500, 418,
	372, 567, 566, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 3099, 3101, 0, 0, 301,
	220, 495, 615, 497, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 424, 441, 302,
	414, 454, 307, 421, 297, 387, 411, 0, 0, 293,
	439, 420, 369, 348, 349, 292, 0, 406, 326, 340,
	323, 385, 0, 438, 466, 322, 457, 0, 449, 295,
	0, 448, 384, 435, 440, 370, 364, 0, 294, 437,
	368, 363, 352, 330, 482, 353, 354, 344, 396, 362,
	397, 345, 374, 373, 375, 0, 0, 0, 0, 0,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 608, 0, 0, 612, 0,
	451, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	355, 0, 0, 0, 467, 0, 409, 390, 636, 0,
	0, 407, 360, 436, 398, 442, 425, 450, 403, 399,
	286, 426, 325, 371, 298, 300, 320, 327, 329, 331,
	332, 380, 381, 393, 413, 427, 428, 429, 324, 308,
	408, 309, 342, 310, 287, 316, 314, 317, 415, 318,
	289, 394, 433, 0, 337, 404, 367, 290, 366, 395,
	432, 431, 299, 458, 464, 465, 554, 0, 470, 637,
	638, 639, 479, 0, 400, 484, 485, 486, 488, 489,
	490, 491, 555, 572, 539, 509, 472, 563, 506, 510,
	511, 575, 0, 0, 0, 463, 356, 357, 0, 335,
	283, 284, 632, 321, 386, 577, 610, 611, 502, 0,
	564, 503, 512, 313, 536, 548, 547, 382, 462, 0,
	559, 562, 492, 631, 0, 556, 571, 635, 570, 627,
	392, 0, 412, 568, 515, 0, 560, 534, 0, 561,
	530, 565, 0, 504, 0, 419, 444, 456, 473, 476,
	505, 590, 591, 592, 288, 475, 594, 595, 596, 597,
	598, 599, 600, 593, 447, 537, 514, 540, 455, 517,
	516, 0, 0, 551, 471, 552, 553, 376, 377, 378,
	379, 339, 578, 306, 474, 402, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 544, 541, 640,
	0, 601, 602, 0, 0, 468, 469, 334, 341, 487,
	343, 305, 391, 336, 453, 350, 0, 480, 545, 481,
	604, 607, 605, 606, 383, 346, 347, 416, 351, 361,
	405, 452, 389, 410, 303, 443, 417, 365, 531, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 585, 584, 583,
	582, 581, 580, 579, 0, 0, 528, 430, 315, 277,
	311, 312, 319, 628, 625, 434, 629, 630, 0, 285,
	508, 359, 0, 401, 333, 573, 574, 0, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 278, 241, 242,
	243, 244, 245, 246, 247, 250, 251, 252, 253, 254,
	255, 256, 257, 576, 248, 249, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	0, 0, 0, 279, 280, 281, 282, 0, 0, 273,
	274, 275, 276, 0, 0, 0, 459, 460, 461, 483,
	0, 445, 507, 626, 0, 0, 0, 0, 0, 0,
	0, 557, 569, 603, 0, 613, 614, 616, 618, 617,
	620, 422, 0, 621, 0, 633, 498, 499, 634, 609,
	388, 0, 513, 546, 535, 619, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 2478, 0,
	358, 550, 532, 542, 533, 518, 519, 520, 527, 338,
	521, 522, 523, 493, 524, 494, 525, 526, 0, 549,
	500, 418, 372, 567, 566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 1508, 0, 0,
	0, 301, 220, 495, 615, 497, 496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 424,
	441, 302, 414, 454, 307, 421, 297, 387, 411, 0,
	0, 293, 439, 420, 369, 348, 349, 292, 0, 406,
	326, 340, 323, 385, 0, 438, 466, 322, 457, 0,
	449, 295, 0, 448, 384, 435, 440, 370, 364, 0,
	294, 437, 368, 363, 352, 330, 482, 353, 354, 344,
	396, 362, 397, 345, 374, 373, 375, 0, 0, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 0, 0,
	612, 0, 451, 0, 0, 0, 0, 0, 0, 423,
	0, 0, 355, 0, 0, 0, 467, 0, 409, 390,
	636, 0, 0, 407, 360, 436, 398, 442, 425, 450,
	403, 399, 286, 426, 325, 371, 298, 300, 320, 327,
	329, 331, 332, 380, 381, 393, 413, 427, 428, 429,
	324, 308, 408, 309, 342, 310, 287, 316, 314, 317,
	415, 318, 289, 394, 433, 0, 337, 404, 367, 290,
	366, 395, 432, 431, 299, 458, 464, 465, 554, 0,
	470, 637, 638, 639, 479, 0, 400, 484, 485, 486,
	488, 489, 490, 491, 555, 572, 539, 509, 472, 563,
	506, 510, 511, 575, 0, 0, 0, 463, 356, 357,
	0, 335, 283, 284, 632, 321, 386, 577, 610, 611,
	502, 0, 564, 503, 512, 313, 536, 548, 547, 382,
	462, 0, 559, 562, 492, 631, 0, 556, 571, 635,
	570, 627, 392, 0, 412, 568, 515, 0, 560, 534,
	0, 561, 530, 565, 0, 504, 0, 419, 444, 456,
	473, 476, 505, 590, 591, 592, 288, 475, 594, 595,
	596, 597, 598, 599, 600, 593, 447, 537, 514, 540,
	455, 517, 516, 0, 0, 551, 471, 552, 553, 376,
	377, 378, 379, 339, 578, 306, 474, 402, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 544,
	541, 640, 0, 601, 602, 0, 0, 468, 469, 334,
	341, 487, 343, 305, 391, 336, 453, 350, 0, 480,
	545, 481, 604, 607, 605, 606, 383, 346, 347, 416,
	351, 361, 405, 452, 389, 410, 303, 443, 417, 365,
	531, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 585,
	584, 583, 582, 581, 580, 579, 0, 0, 528, 430,
	315, 277, 311, 312, 319, 628, 625, 434, 629, 630,
	0, 285, 508, 359, 0, 401, 333, 573, 574, 0,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 278,
	241, 242, 243, 244, 245, 246, 247, 250, 251, 252,
	253, 254, 255, 256, 257, 576, 248, 249, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 0, 0, 0, 279, 280, 281, 282, 0,
	0, 273, 274, 275, 276, 0, 0, 0, 459, 460,
	461, 483, 0, 445, 507, 626, 0, 0, 0, 0,
	0, 0, 0, 557, 569, 603, 0, 613, 614, 616,
	618, 617, 620, 422, 0, 621, 0, 633, 498, 499,
	634, 609, 388, 0, 513, 546, 535, 619, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 647, 328,
	0, 0, 358, 550, 532, 542, 533, 518, 519, 520,
	527, 338, 521, 522, 523, 493, 524, 494, 525, 526,
	0, 549, 500, 418, 372, 567, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 301, 220, 495, 615, 497, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 424, 441, 302, 414, 454, 307, 421, 297, 387,
	411, 0, 0, 293, 439, 420, 369, 348, 349, 292,
	0, 406, 326, 340, 323, 385, 0, 438, 466, 322,
	457, 0, 449, 295, 0, 448, 384, 435, 440, 370,
	364, 0, 294, 437, 368, 363, 352, 330, 482, 353,
	354, 344, 396, 362, 397, 345, 374, 373, 375, 0,
	0, 0, 0, 0, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 608,
	0, 0, 612, 0, 451, 0, 646, 0, 0, 0,
	0, 423, 0, 0, 355, 0, 0, 0, 467, 0,
	409, 390, 636, 0, 0, 407, 360, 436, 398, 442,
	425, 450, 403, 399, 286, 426, 325, 371, 298, 300,
	320, 327, 329, 331, 332, 380, 381, 393, 413, 427,
	428, 429, 324, 308, 408, 309, 342, 310, 287, 316,
	314, 317, 415, 318, 289, 394, 433, 0, 337, 404,
	367, 290, 366, 395, 432, 431, 299, 458, 464, 465,
	554, 0, 470, 637, 638, 639, 479, 0, 400, 484,
	485, 486, 488, 489, 490, 491, 555, 572, 539, 509,
	472, 563, 506, 510, 511, 575, 0, 0, 0, 463,
	356, 357, 0, 335, 283, 284, 632, 321, 386, 577,
	610, 611, 502, 0, 564, 503, 512, 313, 536, 548,
	547, 382, 462, 0, 559, 562, 492, 631, 0, 556,
	571, 635, 570, 627, 392, 0, 412, 568, 515, 0,
	560, 534, 0, 561, 530, 565, 0, 504, 0, 419,
	444, 456, 473, 476, 505, 590, 591, 592, 288, 475,
	594, 595, 596, 597, 598, 599, 600, 593, 447, 537,
	514, 540, 455, 517, 516, 0, 0, 551, 471, 552,
	553, 376, 377, 378, 379, 339, 578, 306, 474, 402,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 544, 541, 640, 0, 601, 602, 0, 0, 468,
	469, 334, 341, 487, 343, 305, 391, 336, 453, 350,
	0, 480, 545, 481, 604, 607, 605, 606, 383, 346,
	347, 416, 351, 361, 405, 452, 389, 410, 303, 443,
	417, 365, 531, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 585, 584, 583, 582, 581, 580, 579, 0, 0,
	528, 430, 315, 277, 311, 312, 319, 628, 625, 434,
	629, 630, 0, 285, 508, 359, 0, 401, 333, 573,
	574, 0, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 278, 241, 242, 243, 244, 245, 246, 247, 250,
	251, 252, 253, 254, 255, 256, 257, 576, 248, 249,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 0, 0, 0, 279, 280, 281,
	282, 0, 0, 273, 274, 275, 276, 0, 0, 0,
	459, 460, 461, 483, 0, 445, 507, 626, 0, 0,
	0, 0, 0, 0, 0, 557, 569, 603, 0, 613,
	614, 616, 618, 617, 620, 422, 0, 621, 0, 633,
	498, 499, 634, 609, 388, 0, 513, 546, 535, 619,
	501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 0, 0, 358, 550, 532, 542, 533, 518,
	519, 520, 527, 338, 521, 522, 523, 493, 524, 494,
	525, 526, 0, 549, 500, 418, 372, 567, 566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 828,
	0, 0, 0, 0, 0, 301, 220, 495, 615, 497,
	496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 424, 441, 302, 414, 454, 307, 421,
	297, 387, 411, 0, 0, 293, 439, 420, 369, 348,
	349, 292, 0, 406, 326, 340, 323, 385, 0, 438,
	466, 322, 457, 0, 449, 295, 0, 448, 384, 435,
	440, 370, 364, 0, 294, 437, 368, 363, 352, 330,
	482, 353, 354, 344, 396, 362, 397, 345, 374, 373,
	375, 0, 0, 0, 0, 0, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 0, 0, 612, 0, 451, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 355, 0, 0, 0,
	467, 0, 409, 390, 636, 0, 0, 407, 360, 436,
	398, 442, 425, 450, 403, 399, 286, 426, 325, 371,
	298, 300, 320, 327, 329, 331, 332, 380, 381, 393,
	413, 427, 428, 429, 324, 308, 408, 309, 342, 310,
	287, 316, 314, 317, 415, 318, 289, 394, 433, 0,
	337, 404, 367, 290, 366, 395, 432, 431, 299, 458,
	464, 465, 554, 0, 470, 637, 638, 639, 479, 0,
	400, 484, 485, 486, 488, 489, 490, 491, 555, 572,
	539, 509, 472, 563, 506, 510, 511, 575, 0, 0,
	0, 463, 356, 357, 0, 335, 283, 284, 632, 321,
	386, 577, 610, 611, 502, 0, 564, 503, 512, 313,
	536, 548, 547, 382, 462, 0, 559, 562, 492, 631,
	0, 556, 571, 635, 570, 627, 392, 0, 412, 568,
	515, 0, 560, 534, 0, 561, 530, 565, 0, 504,
	0, 419, 444, 456, 473, 476, 505, 590, 591, 592,
	288, 475, 594, 595, 596, 597, 598, 599, 600, 593,
	447, 537, 514, 540, 455, 517, 516, 0, 0, 551,
	471, 552, 553, 376, 377, 378, 379, 339, 578, 306,
	474, 402, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 544, 541, 640, 0, 601, 602, 0,
	0, 468, 469, 334, 341, 487, 343, 305, 391, 336,
	453, 350, 0, 480, 545, 481, 604, 607, 605, 606,
	383, 346, 347, 416, 351, 361, 405, 452, 389, 410,
	303, 443, 417, 365, 531, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 585, 584, 583, 582, 581, 580, 579,
	0, 0, 528, 430, 315, 277, 311, 312, 319, 628,
	625, 434, 629, 630, 0, 285, 508, 359, 0, 401,
	333, 573, 574, 0, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 278, 241, 242, 243, 244, 245, 246,
	247, 250, 251, 252, 253, 254, 255, 256, 257, 576,
	248, 249, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 0, 0, 0, 279,
	280, 281, 282, 0, 0, 273, 274, 275, 276, 0,
	0, 0, 459, 460, 461, 483, 0, 445, 507, 626,
	0, 0, 0, 0, 0, 0, 0, 557, 569, 603,
	0, 613, 614, 616, 618, 617, 620, 422, 0, 621,
	0, 633, 498, 499, 634, 609, 388, 0, 513, 546,
	535, 619, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 0, 0, 358, 550, 532, 542,
	533, 518, 519, 520, 527, 338, 521, 522, 523, 493,
	524, 494, 525, 526, 0, 549, 500, 418, 372, 567,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3906, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 301, 220, 495,
	615, 497, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 424, 441, 302, 414, 454,
	307, 421, 297, 387, 411, 0, 0, 293, 439, 420,
	369, 348, 349, 292, 0, 406, 326, 340, 323, 385,
	0, 438, 466, 322, 457, 0, 449, 295, 0, 448,
	384, 435, 440, 370, 364, 0, 294, 437, 368, 363,
	352, 330, 482, 353, 354, 344, 396, 362, 397, 345,
	374, 373, 375, 0, 0, 0, 0, 0, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 608, 0, 0, 612, 0, 451, 0,
	0, 0, 0, 0, 0, 423, 0, 0, 355, 0,
	0, 0, 467, 0, 409, 390, 636, 0, 0, 407,
	360, 436, 398, 442, 425, 450, 403, 399, 286, 426,
	325, 371, 298, 300, 320, 327, 329, 331, 332, 380,
	381, 393, 413, 427, 428, 429, 324, 308, 408, 309,
	342, 310, 287, 316, 314, 317, 415, 318, 289, 394,
	433, 0, 337, 404, 367, 290, 366, 395, 432, 431,
	299, 458, 464, 465, 554, 0, 470, 637, 638, 639,
	479, 0, 400, 484, 485, 486, 488, 489, 490, 491,
	555, 572, 539, 509, 472, 563, 506, 510, 511, 575,
	0, 0, 0, 463, 356, 357, 0, 335, 283, 284,
	632, 321, 386, 577, 610, 611, 502, 0, 564, 503,
	512, 313, 536, 548, 547, 382, 462, 0, 559, 562,
	492, 631, 0, 556, 571, 635, 570, 627, 392, 0,
	412, 568, 515, 0, 560, 534, 0, 561, 530, 565,
	0, 504, 0, 419, 444, 456, 473, 476, 505, 590,
	591, 592, 288, 475, 594, 595, 596, 597, 598, 599,
	600, 593, 447, 537, 514, 540, 455, 517, 516, 0,
	0, 551, 471, 552, 553, 376, 377, 378, 379, 339,
	578, 306, 474, 402, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 541, 640, 0, 601,
	602, 0, 0, 468, 469, 334, 341, 487, 343, 305,
	391, 336, 453, 350, 0, 480, 545, 481, 604, 607,
	605, 606, 383, 346, 347, 416, 351, 361, 405, 452,
	389, 410, 303, 443, 417, 365, 531, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 585, 584, 583, 582, 581,
	580, 579, 0, 0, 528, 430, 315, 277, 311, 312,
	319, 628, 625, 434, 629, 630, 0, 285, 508, 359,
	0, 401, 333, 573, 574, 0, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 278, 241, 242, 243, 244,
	245, 246, 247, 250, 251, 252, 253, 254, 255, 256,
	257, 576, 248, 249, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 0, 0,
	0, 279, 280, 281, 282, 0, 0, 273, 274, 275,
	276, 0, 0, 0, 459, 460, 461, 483, 0, 445,
	507, 626, 0, 0, 0, 0, 0, 0, 0, 557,
	569, 603, 0, 613, 614, 616, 618, 617, 620, 422,
	0, 621, 0, 633, 498, 499, 634, 609, 388, 0,
	513, 546, 535, 619, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 0, 358, 550,
	532, 542, 533, 518, 519, 520, 527, 338, 521, 522,
	523, 493, 524, 494, 525, 526, 0, 549, 500, 418,
	372, 567, 566, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 3685, 0, 0, 0, 301,
	220, 495, 615, 497, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 424, 441, 302,
	414, 454, 307, 421, 297, 387, 411, 0, 0, 293,
	439, 420, 369, 348, 349, 292, 0, 406, 326, 340,
	323, 385, 0, 438, 466, 322, 457, 0, 449, 295,
	0, 448, 384, 435, 440, 370, 364, 0, 294, 437,
	368, 363, 352, 330, 482, 353, 354, 344, 396, 362,
	397, 345, 374, 373, 375, 0, 0, 0, 0, 0,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 608, 0, 0, 612, 0,
	451, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	355, 0, 0, 0, 467, 0, 409, 390, 636, 0,
	0, 407, 360, 436, 398, 442, 425, 450, 403, 399,
	286, 426, 325, 371, 298, 300, 320, 327, 329, 331,
	332, 380, 381, 393, 413, 427, 428, 429, 324, 308,
	408, 309, 342, 310, 287, 316, 314, 317, 415, 318,
	289, 394, 433, 0, 337, 404, 367, 290, 366, 395,
	432, 431, 299, 458, 464, 465, 554, 0, 470, 637,
	638, 639, 479, 0, 400, 484, 485, 486, 488, 489,
	490, 491, 555, 572, 539, 509, 472, 563, 506, 510,
	511, 575, 0, 0, 0, 463, 356, 357, 0, 335,
	283, 284, 632, 321, 386, 577, 610, 611, 502, 0,
	564, 503, 512, 313, 536, 548, 547, 382, 462, 0,
	559, 562, 492, 631, 0, 556, 571, 635, 570, 627,
	392, 0, 412, 568, 515, 0, 560, 534, 0, 561,
	530, 565, 0, 504, 0, 419, 444, 456, 473, 476,
	505, 590, 591, 592, 288, 475, 594, 595, 596, 597,
	598, 599, 600, 593, 447, 537, 514, 540, 455, 517,
	516, 0, 0, 551, 471, 552, 553, 376, 377, 378,
	379, 339, 578, 306, 474, 402, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 544, 541, 640,
	0, 601, 602, 0, 0, 468, 469, 334, 341, 487,
	343, 305, 391, 336, 453, 350, 0, 480, 545, 481,
	604, 607, 605, 606, 383, 346, 347, 416, 351, 361,
	405, 452, 389, 410, 303, 443, 417, 365, 531, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 585, 584, 583,
	582, 581, 580, 579, 0, 0, 528, 430, 315, 277,
	311, 312, 319, 628, 625, 434, 629, 630, 0, 285,
	508, 359, 0, 401, 333, 573, 574, 0, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 278, 241, 242,
	243, 244, 245, 246, 247, 250, 251, 252, 253, 254,
	255, 256, 257, 576, 248, 249, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	0, 0, 0, 279, 280, 281, 282, 0, 0, 273,
	274, 275, 276, 0, 0, 0, 459, 460, 461, 483,
	0, 445, 507, 626, 0, 0, 0, 0, 0, 0,
	0, 557, 569, 603, 0, 613, 614, 616, 618, 617,
	620, 422, 0, 621, 0, 633, 498, 499, 634, 609,
	388, 0, 513, 546, 535, 619, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 0, 0,
	358, 550, 532, 542, 533, 518, 519, 520, 527, 338,
	521, 522, 523, 493, 524, 494, 525, 526, 0, 549,
	500, 418, 372, 567, 566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 301, 220, 495, 615, 497, 496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 424,
	441, 302, 414, 454, 307, 421, 297, 387, 411, 0,
	0, 293, 439, 420, 369, 348, 349, 292, 0, 406,
	326, 340, 323, 385, 0, 438, 466, 322, 457, 0,
	449, 295, 0, 448, 384, 435, 440, 370, 364, 0,
	294, 437, 368, 363, 352, 330, 482, 353, 354, 344,
	396, 362, 397, 345, 374, 373, 375, 0, 0, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 0, 0,
	612, 0, 451, 0, 0, 0, 3815, 0, 0, 423,
	0, 0, 355, 0, 0, 0, 467, 0, 409, 390,
	636, 0, 0, 407, 360, 436, 398, 442, 425, 450,
	403, 399, 286, 426, 325, 371, 298, 300, 320, 327,
	329, 331, 332, 380, 381, 393, 413, 427, 428, 429,
	324, 308, 408, 309, 342, 310, 287, 316, 314, 317,
	415, 318, 289, 394, 433, 0, 337, 404, 367, 290,
	366, 395, 432, 431, 299, 458, 464, 465, 554, 0,
	470, 637, 638, 639, 479, 0, 400, 484, 485, 486,
	488, 489, 490, 491, 555, 572, 539, 509, 472, 563,
	506, 510, 511, 575, 0, 0, 0, 463, 356, 357,
	0, 335, 283, 284, 632, 321, 386, 577, 610, 611,
	502, 0, 564, 503, 512, 313, 536, 548, 547, 382,
	462, 0, 559, 562, 492, 631, 0, 556, 571, 635,
	570, 627, 392, 0, 412, 568, 515, 0, 560, 534,
	0, 561, 530, 565, 0, 504, 0, 419, 444, 456,
	473, 476, 505, 590, 591, 592, 288, 475, 594, 595,
	596, 597, 598, 599, 600, 593, 447, 537, 514, 540,
	455, 517, 516, 0, 0, 551, 471, 552, 553, 376,
	377, 378, 379, 339, 578, 306, 474, 402, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 544,
	541, 640, 0, 601, 602, 0, 0, 468, 469, 334,
	341, 487, 343, 305, 391, 336, 453, 350, 0, 480,
	545, 481, 604, 607, 605, 606, 383, 346, 347, 416,
	351, 361, 405, 452, 389, 410, 303, 443, 417, 365,
	531, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 585,
	584, 583, 582, 581, 580, 579, 0, 0, 528, 430,
	315, 277, 311, 312, 319, 628, 625, 434, 629, 630,
	0, 285, 508, 359, 0, 401, 333, 573, 574, 0,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 278,
	241, 242, 243, 244, 245, 246, 247, 250, 251, 252,
	253, 254, 255, 256, 257, 576, 248, 249, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 0, 0, 0, 279, 280, 281, 282, 0,
	0, 273, 274, 275, 276, 0, 0, 0, 459, 460,
	461, 483, 0, 445, 507, 626, 0, 0, 0, 0,
	0, 0, 0, 557, 569, 603, 0, 613, 614, 616,
	618, 617, 620, 422, 0, 621, 0, 633, 498, 499,
	634, 609, 388, 0, 513, 546, 535, 619, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	0, 0, 358, 550, 532, 542, 533, 518, 519, 520,
	527, 338, 521, 522, 523, 493, 524, 494, 525, 526,
	0, 549, 500, 418, 372, 567, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3527, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 301, 220, 495, 615, 497, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 424, 441, 302, 414, 454, 307, 421, 297, 387,
	411, 0, 0, 293, 439, 420, 369, 348, 349, 292,
	0, 406, 326, 340, 323, 385, 0, 438, 466, 322,
	457, 0, 449, 295, 0, 448, 384, 435, 440, 370,
	364, 0, 294, 437, 368, 363, 352, 330, 482, 353,
	354, 344, 396, 362, 397, 345, 374, 373, 375, 0,
	0, 0, 0, 0, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 608,
	0, 0, 612, 0, 451, 0, 0, 0, 0, 0,
	0, 423, 0, 0, 355, 0, 0, 0, 467, 0,
	409, 390, 636, 0, 0, 407, 360, 436, 398, 442,
	425, 450, 403, 399, 286, 426, 325, 371, 298, 300,
	320, 327, 329, 331, 332, 380, 381, 393, 413, 427,
	428, 429, 324, 308, 408, 309, 342, 310, 287, 316,
	314, 317, 415, 318, 289, 394, 433, 0, 337, 404,
	367, 290, 366, 395, 432, 431, 299, 458, 464, 465,
	554, 0, 470, 637, 638, 639, 479, 0, 400, 484,
	485, 486, 488, 489, 490, 491, 555, 572, 539, 509,
	472, 563, 506, 510, 511, 575, 0, 0, 0, 463,
	356, 357, 0, 335, 283, 284, 632, 321, 386, 577,
	610, 611, 502, 0, 564, 503, 512, 313, 536, 548,
	547, 382, 462, 0, 559, 562, 492, 631, 0, 556,
	571, 635, 570, 627, 392, 0, 412, 568, 515, 0,
	560, 534, 0, 561, 530, 565, 0, 504, 0, 419,
	444, 456, 473, 476, 505, 590, 591, 592, 288, 475,
	594, 595, 596, 597, 598, 599, 600, 593, 447, 537,
	514, 540, 455, 517, 516, 0, 0, 551, 471, 552,
	553, 376, 377, 378, 379, 339, 578, 306, 474, 402,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 544, 541, 640, 0, 601, 602, 0, 0, 468,
	469, 334, 341, 487, 343, 305, 391, 336, 453, 350,
	0, 480, 545, 481, 604, 607, 605, 606, 383, 346,
	347, 416, 351, 361, 405, 452, 389, 410, 303, 443,
	417, 365, 531, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 585, 584, 583, 582, 581, 580, 579, 0, 0,
	528, 430, 315, 277, 311, 312, 319, 628, 625, 434,
	629, 630, 0, 285, 508, 359, 0, 401, 333, 573,
	574, 0, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 278, 241, 242, 243, 244, 245, 246, 247, 250,
	251, 252, 253, 254, 255, 256, 257, 576, 248, 249,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 0, 0, 0, 279, 280, 281,
	282, 0, 0, 273, 274, 275, 276, 0, 0, 0,
	459, 460, 461, 483, 0, 445, 507, 626, 0, 0,
	0, 0, 0, 0, 0, 557, 569, 603, 0, 613,
	614, 616, 618, 617, 620, 422, 0, 621, 0, 633,
	498, 499, 634, 609, 388, 0, 513, 546, 535, 619,
	501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 0, 0, 358, 550, 532, 542, 533, 518,
	519, 520, 527, 338, 521, 522, 523, 493, 524, 494,
	525, 526, 0, 549, 500, 418, 372, 567, 566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3700, 0, 219, 0,
	0, 0, 0, 0, 0, 301, 220, 495, 615, 497,
	496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 424, 441, 302, 414, 454, 307, 421,
	297, 387, 411, 0, 0, 293, 439, 420, 369, 348,
	349, 292, 0, 406, 326, 340, 323, 385, 0, 438,
	466, 322, 457, 0, 449, 295, 0, 448, 384, 435,
	440, 370, 364, 0, 294, 437, 368, 363, 352, 330,
	482, 353, 354, 344, 396, 362, 397, 345, 374, 373,
	375, 0, 0, 0, 0, 0, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 0, 0, 612, 0, 451, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 355, 0, 0, 0,
	467, 0, 409, 390, 636, 0, 0, 407, 360, 436,
	398, 442, 425, 450, 403, 399, 286, 426, 325, 371,
	298, 300, 320, 327, 329, 331, 332, 380, 381, 393,
	413, 427, 428, 429, 324, 308, 408, 309, 342, 310,
	287, 316, 314, 317, 415, 318, 289, 394, 433, 0,
	337, 404, 367, 290, 366, 395, 432, 431, 299, 458,
	464, 465, 554, 0, 470, 637, 638, 639, 479, 0,
	400, 484, 485, 486, 488, 489, 490, 491, 555, 572,
	539, 509, 472, 563, 506, 510, 511, 575, 0, 0,
	0, 463, 356, 357, 0, 335, 283, 284, 632, 321,
	386, 577, 610, 611, 502, 0, 564, 503, 512, 313,
	536, 548, 547, 382, 462, 0, 559, 562, 492, 631,
	0, 556, 571, 635, 570, 627, 392, 0, 412, 568,
	515, 0, 560, 534, 0, 561, 530, 565, 0, 504,
	0, 419, 444, 456, 473, 476, 505, 590, 591, 592,
	288, 475, 594, 595, 596, 597, 598, 599, 600, 593,
	447, 537, 514, 540, 455, 517, 516, 0, 0, 551,
	471, 552, 553, 376, 377, 378, 379, 339, 578, 306,
	474, 402, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 544, 541, 640, 0, 601, 602, 0,
	0, 468, 469, 334, 341, 487, 343, 305, 391, 336,
	453, 350, 0, 480, 545, 481, 604, 607, 605, 606,
	383, 346, 347, 416, 351, 361, 405, 452, 389, 410,
	303, 443, 417, 365, 531, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 585, 584, 583, 582, 581, 580, 579,
	0, 0, 528, 430, 315, 277, 311, 312, 319, 628,
	625, 434, 629, 630, 0, 285, 508, 359, 0, 401,
	333, 573, 574, 0, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 278, 241, 242, 243, 244, 245, 246,
	247, 250, 251, 252, 253, 254, 255, 256, 257, 576,
	248, 249, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 0, 0, 0, 279,
	280, 281, 282, 0, 0, 273, 274, 275, 276, 0,
	0, 0, 459, 460, 461, 483, 0, 445, 507, 626,
	0, 0, 0, 0, 0, 0, 0, 557, 569, 603,
	0, 613, 614, 616, 618, 617, 620, 422, 0, 621,
	0, 633, 498, 499, 634, 609, 388, 0, 513, 546,
	535, 619, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 0, 0, 358, 550, 532, 542,
	533, 518, 519, 520, 527, 338, 521, 522, 523, 493,
	524, 494, 525, 526, 0, 549, 500, 418, 372, 567,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 301, 220, 495,
	615, 497, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 424, 441, 302, 414, 454,
	307, 421, 297, 387, 411, 0, 0, 293, 439, 420,
	369, 348, 349, 292, 0, 406, 326, 340, 323, 385,
	0, 438, 466, 322, 457, 0, 449, 295, 0, 448,
	384, 435, 440, 370, 364, 0, 294, 437, 368, 363,
	352, 330, 482, 353, 354, 344, 396, 362, 397, 345,
	374, 373, 375, 0, 0, 0, 0, 0, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 608, 0, 0, 612, 0, 451, 0,
	0, 0, 3616, 0, 0, 423, 0, 0, 355, 0,
	0, 0, 467, 0, 409, 390, 636, 0, 0, 407,
	360, 436, 398, 442, 425, 450, 403, 399, 286, 426,
	325, 371, 298, 300, 320, 327, 329, 331, 332, 380,
	381, 393, 413, 427, 428, 429, 324, 308, 408, 309,
	342, 310, 287, 316, 314, 317, 415, 318, 289, 394,
	433, 0, 337, 404, 367, 290, 366, 395, 432, 431,
	299, 458, 464, 465, 554, 0, 470, 637, 638, 639,
	479, 0, 400, 484, 485, 486, 488, 489, 490, 491,
	555, 572, 539, 509, 472, 563, 506, 510, 511, 575,
	0, 0, 0, 463, 356, 357, 0, 335, 283, 284,
	632, 321, 386, 577, 610, 611, 502, 0, 564, 503,
	512, 313, 536, 548, 547, 382, 462, 0, 559, 562,
	492, 631, 0, 556, 571, 635, 570, 627, 392, 0,
	412, 568, 515, 0, 560, 534, 0, 561, 530, 565,
	0, 504, 0, 419, 444, 456, 473, 476, 505, 590,
	591, 592, 288, 475, 594, 595, 596, 597, 598, 599,
	600, 593, 447, 537, 514, 540, 455, 517, 516, 0,
	0, 551, 471, 552, 553, 376, 377, 378, 379, 339,
	578, 306, 474, 402, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 541, 640, 0, 601,
	602, 0, 0, 468, 469, 334, 341, 487, 343, 305,
	391, 336, 453, 350, 0, 480, 545, 481, 604, 607,
	605, 606, 383, 346, 347, 416, 351, 361, 405, 452,
	389, 410, 303, 443, 417, 365, 531, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 585, 584, 583, 582, 581,
	580, 579, 0, 0, 528, 430, 315, 277, 311, 312,
	319, 628, 625, 434, 629, 630, 0, 285, 508, 359,
	0, 401, 333, 573, 574, 0, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 278, 241, 242, 243, 244,
	245, 246, 247, 250, 251, 252, 253, 254, 255, 256,
	257, 576, 248, 249, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 0, 0,
	0, 279, 280, 281, 282, 0, 0, 273, 274, 275,
	276, 0, 0, 0, 459, 460, 461, 483, 0, 445,
	507, 626, 0, 0, 0, 0, 0, 0, 0, 557,
	569, 603, 0, 613, 614, 616, 618, 617, 620, 422,
	0, 621, 0, 633, 498, 499, 634, 609, 388, 0,
	513, 546, 535, 619, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 0, 358, 550,
	532, 542, 533, 518, 519, 520, 527, 338, 521, 522,
	523, 493, 524, 494, 525, 526, 0, 549, 500, 418,
	372, 567, 566, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 3133, 0, 0, 0, 301,
	220, 495, 615, 497, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 424, 441, 302,
	414, 454, 307, 421, 297, 387, 411, 0, 0, 293,
	439, 420, 369, 348, 349, 292, 0, 406, 326, 340,
	323, 385, 0, 438, 466, 322, 457, 0, 449, 295,
	0, 448, 384, 435, 440, 370, 364, 0, 294, 437,
	368, 363, 352, 330, 482, 353, 354, 344, 396, 362,
	397, 345, 374, 373, 375, 0, 0, 0, 0, 0,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 608, 0, 0, 612, 0,
	451, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	355, 0, 0, 0, 467, 0, 409, 390, 636, 0,
	0, 407, 360, 436, 398, 442, 425, 450, 403, 399,
	286, 426, 325, 371, 298, 300, 320, 327, 329, 331,
	332, 380, 381, 393, 413, 427, 428, 429, 324, 308,
	408, 309, 342, 310, 287, 316, 314, 317, 415, 318,
	289, 394, 433, 0, 337, 404, 367, 290, 366, 395,
	432, 431, 299, 458, 464, 465, 554, 0, 470, 637,
	638, 639, 479, 0, 400, 484, 485, 486, 488, 489,
	490, 491, 555, 572, 539, 509, 472, 563, 506, 510,
	511, 575, 0, 0, 0, 463, 356, 357, 0, 335,
	283, 284, 632, 321, 386, 577, 610, 611, 502, 0,
	564, 503, 512, 313, 536, 548, 547, 382, 462, 0,
	559, 562, 492, 631, 0, 556, 571, 635, 570, 627,
	392, 0, 412, 568, 515, 0, 560, 534, 0, 561,
	530, 565, 0, 504, 0, 419, 444, 456, 473, 476,
	505, 590, 591, 592, 288, 475, 594, 595, 596, 597,
	598, 599, 600, 593, 447, 537, 514, 540, 455, 517,
	516, 0, 0, 551, 471, 552, 553, 376, 377, 378,
	379, 339, 578, 306, 474, 402, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 544, 541, 640,
	0, 601, 602, 0, 0, 468, 469, 334, 341, 487,
	343, 305, 391, 336, 453, 350, 0, 480, 545, 481,
	604, 607, 605, 606, 383, 346, 347, 416, 351, 361,
	405, 452, 389, 410, 303, 443, 417, 365, 531, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 585, 584, 583,
	582, 581, 580, 579, 0, 0, 528, 430, 315, 277,
	311, 312, 319, 628, 625, 434, 629, 630, 0, 285,
	508, 359, 0, 401, 333, 573, 574, 0, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 278, 241, 242,
	243, 244, 245, 246, 247, 250, 251, 252, 253, 254,
	255, 256, 257, 576, 248, 249, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	0, 0, 0, 279, 280, 281, 282, 0, 0, 273,
	274, 275, 276, 0, 0, 0, 459, 460, 461, 483,
	0, 445, 507, 626, 0, 0, 0, 0, 0, 0,
	0, 557, 569, 603, 0, 613, 614, 616, 618, 617,
	620, 422, 0, 621, 0, 633, 498, 499, 634, 609,
	388, 0, 513, 546, 535, 619, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 0, 0,
	358, 550, 532, 542, 533, 518, 519, 520, 527, 338,
	521, 522, 523, 493, 524, 494, 525, 526, 0, 549,
	500, 418, 372, 567, 566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 301, 220, 495, 615, 497, 496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 424,
	441, 302, 414, 454, 307, 421, 297, 387, 411, 0,
	0, 293, 439, 420, 369, 348, 349, 292, 0, 406,
	326, 340, 323, 385, 0, 438, 466, 322, 457, 0,
	449, 295, 0, 448, 384, 435, 440, 370, 364, 0,
	294, 437, 368, 363, 352, 330, 482, 353, 354, 344,
	396, 362, 397, 345, 374, 373, 375, 0, 0, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 0, 0,
	612, 0, 451, 0, 0, 0, 0, 0, 0, 423,
	0, 0, 355, 0, 0, 0, 467, 0, 409, 390,
	636, 0, 0, 407, 360, 436, 398, 442, 425, 450,
	403, 399, 286, 426, 325, 371, 298, 300, 320, 327,
	329, 331, 332, 380, 381, 393, 413, 427, 428, 429,
	324, 308, 408, 309, 342, 310, 287, 316, 314, 317,
	415, 318, 289, 394, 433, 0, 337, 404, 367, 290,
	366, 395, 432, 431, 299, 458, 464, 465, 554, 0,
	470, 637, 638, 639, 479, 0, 400, 484, 485, 486,
	488, 489, 490, 491, 555, 572, 539, 509, 472, 563,
	506, 510, 511, 575, 0, 0, 0, 463, 356, 357,
	0, 335, 283, 284, 632, 321, 386, 577, 610, 611,
	502, 0, 564, 503, 512, 313, 536, 548, 547, 382,
	462, 0, 559, 562, 492, 631, 0, 556, 571, 635,
	570, 627, 392, 0, 412, 568, 515, 0, 560, 534,
	0, 561, 530, 565, 0, 504, 0, 419, 444, 456,
	473, 476, 505, 590, 591, 592, 288, 475, 594, 595,
	596, 597, 598, 599, 600, 593, 447, 537, 514, 540,
	455, 517, 516, 0, 0, 551, 471, 552, 553, 376,
	377, 378, 379, 339, 578, 306, 474, 402, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 544,
	541, 640, 0, 601, 602, 0, 0, 468, 469, 334,
	341, 487, 343, 305, 391, 336, 453, 350, 0, 480,
	545, 481, 604, 607, 605, 606, 383, 346, 347, 416,
	351, 361, 405, 452, 389, 410, 303, 443, 417, 365,
	531, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 585,
	584, 583, 582, 581, 580, 579, 0, 0, 528, 430,
	315, 277, 311, 312, 319, 628, 625, 434, 629, 630,
	0, 285, 508, 359, 0, 401, 333, 573, 574, 0,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 278,
	241, 242, 243, 244, 245, 246, 247, 250, 251, 252,
	253, 254, 255, 256, 257, 576, 248, 249, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 0, 0, 0, 279, 280, 281, 282, 0,
	0, 273, 274, 275, 276, 0, 0, 0, 459, 460,
	461, 483, 0, 445, 507, 626, 0, 0, 0, 0,
	0, 0, 0, 557, 569, 603, 0, 613, 614, 616,
	618, 617, 620, 422, 0, 621, 0, 633, 498, 499,
	634, 609, 388, 0, 513, 546, 535, 619, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	0, 0, 358, 550, 532, 542, 533, 518, 519, 520,
	527, 338, 521, 522, 523, 493, 524, 494, 525, 526,
	0, 549, 500, 418, 372, 567, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2010, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 301, 220, 495, 615, 497, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 424, 441, 302, 414, 454, 307, 421, 297, 387,
	411, 0, 0, 293, 439, 420, 369, 348, 349, 292,
	0, 406, 326, 340, 323, 385, 0, 438, 466, 322,
	457, 0, 449, 295, 0, 448, 384, 435, 440, 370,
	364, 0, 294, 437, 368, 363, 352, 330, 482, 353,
	354, 344, 396, 362, 397, 345, 374, 373, 375, 0,
	0, 0, 0, 0, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 608,
	0, 0, 612, 0, 451, 0, 0, 0, 0, 0,
	0, 423, 0, 0, 355, 0, 0, 0, 467, 0,
	409, 390, 636, 0, 0, 407, 360, 436, 398, 442,
	425, 450, 403, 399, 286, 426, 325, 371, 298, 300,
	320, 327, 329, 331, 332, 380, 381, 393, 413, 427,
	428, 429, 324, 308, 408, 309, 342, 310, 287, 316,
	314, 317, 415, 318, 289, 394, 433, 0, 337, 404,
	367, 290, 366, 395, 432, 431, 299, 458, 464, 465,
	554, 0, 470, 637, 638, 639, 479, 0, 400, 484,
	485, 486, 488, 489, 490, 491, 555, 572, 539, 509,
	472, 563, 506, 510, 511, 575, 0, 0, 0, 463,
	356, 357, 0, 335, 283, 284, 632, 321, 386, 577,
	610, 611, 502, 0, 564, 503, 512, 313, 536, 548,
	547, 382, 462, 0, 559, 562, 492, 631, 0, 556,
	571, 635, 570, 627, 392, 0, 412, 568, 515, 0,
	560, 534, 0, 561, 530, 565, 0, 504, 0, 419,
	444, 456, 473, 476, 505, 590, 591, 592, 288, 475,
	594, 595, 596, 597, 598, 599, 600, 593, 447, 537,
	514, 540, 455, 517, 516, 0, 0, 551, 471, 552,
	553, 376, 377, 378, 379, 339, 578, 306, 474, 402,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 544, 541, 640, 0, 601, 602, 0, 0, 468,
	469, 334, 341, 487, 343, 305, 391, 336, 453, 350,
	0, 480, 545, 481, 604, 607, 605, 606, 383, 346,
	347, 416, 351, 361, 405, 452, 389, 410, 303, 443,
	417, 365, 531, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 585, 584, 583, 582, 581, 580, 579, 0, 0,
	528, 430, 315, 277, 311, 312, 319, 628, 625, 434,
	629, 630, 0, 285, 508, 359, 0, 401, 333, 573,
	574, 0, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 278, 241, 242, 243, 244, 245, 246, 247, 250,
	251, 252, 253, 254, 255, 256, 257, 576, 248, 249,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 0, 0, 0, 279, 280, 281,
	282, 0, 0, 273, 274, 275, 276, 0, 0, 0,
	459, 460, 461, 483, 0, 445, 507, 626, 0, 0,
	0, 0, 0, 0, 0, 557, 569, 603, 0, 613,
	614, 616, 618, 617, 620, 422, 0, 621, 0, 633,
	498, 499, 634, 609, 388, 0, 513, 546, 535, 619,
	501, 0, 0, 3338, 0, 0, 0, 0, 0, 0,
	0, 328, 0, 0, 358, 550, 532, 542, 533, 518,
	519, 520, 527, 338, 521, 522, 523, 493, 524, 494,
	525, 526, 0, 549, 500, 418, 372, 567, 566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 301, 220, 495, 615, 497,
	496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 424, 441, 302, 414, 454, 307, 421,
	297, 387, 411, 0, 0, 293, 439, 420, 369, 348,
	349, 292, 0, 406, 326, 340, 323, 385, 0, 438,
	466, 322, 457, 0, 449, 295, 0, 448, 384, 435,
	440, 370, 364, 0, 294, 437, 368, 363, 352, 330,
	482, 353, 354, 344, 396, 362, 397, 345, 374, 373,
	375, 0, 0, 0, 0, 0, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 0, 0, 612, 0, 451, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 355, 0, 0, 0,
	467, 0, 409, 390, 636, 0, 0, 407, 360, 436,
	398, 442, 425, 450, 403, 399, 286, 426, 325, 371,
	298, 300, 320, 327, 329, 331, 332, 380, 381, 393,
	413, 427, 428, 429, 324, 308, 408, 309, 342, 310,
	287, 316, 314, 317, 415, 318, 289, 394, 433, 0,
	337, 404, 367, 290, 366, 395, 432, 431, 299, 458,
	464, 465, 554, 0, 470, 637, 638, 639, 479, 0,
	400, 484, 485, 486, 488, 489, 490, 491, 555, 572,
	539, 509, 472, 563, 506, 510, 511, 575, 0, 0,
	0, 463, 356, 357, 0, 335, 283, 284, 632, 321,
	386, 577, 610, 611, 502, 0, 564, 503, 512, 313,
	536, 548, 547, 382, 462, 0, 559, 562, 492, 631,
	0, 556, 571, 635, 570, 627, 392, 0, 412, 568,
	515, 0, 560, 534, 0, 561, 530, 565, 0, 504,
	0, 419, 444, 456, 473, 476, 505, 590, 591, 592,
	288, 475, 594, 595, 596, 597, 598, 599, 600, 593,
	447, 537, 514, 540, 455, 517, 516, 0, 0, 551,
	471, 552, 553, 376, 377, 378, 379, 339, 578, 306,
	474, 402, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 544, 541, 640, 0, 601, 602, 0,
	0, 468, 469, 334, 341, 487, 343, 305, 391, 336,
	453, 350, 0, 480, 545, 481, 604, 607, 605, 606,
	383, 346, 347, 416, 351, 361, 405, 452, 389, 410,
	303, 443, 417, 365, 531, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 585, 584, 583, 582, 581, 580, 579,
	0, 0, 528, 430, 315, 277, 311, 312, 319, 628,
	625, 434, 629, 630, 0, 285, 508, 359, 0, 401,
	333, 573, 574, 0, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 278, 241, 242, 243, 244, 245, 246,
	247, 250, 251, 252, 253, 254, 255, 256, 257, 576,
	248, 249, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 0, 0, 0, 279,
	280, 281, 282, 0, 0, 273, 274, 275, 276, 0,
	0, 0, 459, 460, 461, 483, 0, 445, 507, 626,
	0, 0, 0, 0, 0, 0, 0, 557, 569, 603,
	0, 613, 614, 616, 618, 617, 620, 422, 0, 621,
	0, 633, 498, 499, 634, 609, 388, 0, 513, 546,
	535, 619, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 0, 0, 358, 550, 532, 542,
	533, 518, 519, 520, 527, 338, 521, 522, 523, 493,
	524, 494, 525, 526, 0, 549, 500, 418, 372, 567,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 301, 220, 495,
	615, 497, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 424, 441, 302, 414, 454,
	307, 421, 297, 387, 411, 0, 0, 293, 439, 420,
	369, 348, 349, 292, 0, 406, 326, 340, 323, 385,
	0, 438, 466, 322, 457, 0, 449, 295, 0, 448,
	384, 435, 440, 370, 364, 0, 294, 437, 368, 363,
	352, 330, 482, 353, 354, 344, 396, 362, 397, 345,
	374, 373, 375, 0, 0, 0, 0, 0, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 608, 0, 0, 612, 0, 451, 0,
	0, 0, 0, 0, 0, 423, 0, 0, 355, 0,
	0, 0, 467, 0, 409, 390, 636, 0, 0, 407,
	360, 436, 398, 442, 425, 450, 403, 399, 286, 426,
	325, 371, 298, 300, 320, 327, 329, 331, 332, 380,
	381, 393, 413, 427, 428, 429, 324, 308, 408, 309,
	342, 310, 287, 316, 314, 317, 415, 318, 289, 394,
	433, 0, 337, 404, 367, 290, 366, 395, 432, 431,
	299, 458, 464, 465, 554, 0, 470, 637, 638, 639,
	479, 0, 400, 484, 485, 486, 488, 489, 490, 491,
	555, 572, 539, 509, 472, 563, 506, 510, 511, 575,
	0, 0, 0, 463, 356, 357, 0, 335, 283, 284,
	632, 321, 386, 577, 610, 611, 502, 0, 564, 503,
	512, 313, 536, 548, 547, 382, 462, 0, 559, 562,
	492, 631, 0, 556, 571, 635, 570, 627, 392, 0,
	412, 568, 515, 0, 560, 534, 0, 561, 530, 565,
	0, 504, 0, 419, 444, 456, 473, 476, 505, 590,
	591, 592, 288, 475, 594, 595, 596, 597, 598, 599,
	600, 593, 447, 537, 514, 540, 455, 517, 516, 0,
	0, 551, 471, 552, 553, 376, 377, 378, 379, 339,
	578, 306, 474, 402, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 541, 640, 0, 601,
	602, 0, 0, 468, 469, 334, 341, 487, 343, 305,
	391, 336, 453, 350, 0, 480, 545, 481, 604, 607,
	605, 606, 383, 346, 347, 416, 351, 361, 405, 452,
	389, 410, 303, 443, 417, 365, 531, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 585, 584, 583, 582, 581,
	580, 579, 0, 0, 528, 430, 315, 277, 311, 312,
	319, 628, 625, 434, 629, 630, 0, 285, 508, 359,
	0, 401, 333, 573, 574, 0, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 278, 241, 242, 243, 244,
	245, 246, 247, 250, 251, 252, 253, 254, 255, 256,
	257, 576, 248, 249, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 0, 0,
	0, 279, 280, 281, 282, 0, 0, 273, 274, 275,
	276, 0, 0, 0, 459, 460, 461, 483, 0, 445,
	507, 626, 0, 0, 0, 0, 0, 0, 0, 557,
	569, 603, 0, 613, 614, 616, 618, 617, 620, 422,
	0, 621, 0, 633, 498, 499, 634, 609, 388, 0,
	513, 546, 535, 619, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 0, 358, 550,
	532, 542, 533, 518, 519, 520, 527, 338, 521, 522,
	523, 493, 524, 494, 525, 526, 0, 549, 500, 418,
	372, 567, 566, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 301,
	220, 495, 615, 497, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2995, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 424, 441, 302,
	414, 454, 307, 421, 297, 387, 411, 0, 0, 293,
	439, 420, 369, 348, 349, 292, 0, 406, 326, 340,
	323, 385, 0, 438, 466, 322, 457, 0, 449, 295,
	0, 448, 384, 435, 440, 370, 364, 0, 294, 437,
	368, 363, 352, 330, 482, 353, 354, 344, 396, 362,
	397, 345, 374, 373, 375, 0, 0, 0, 0, 0,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 608, 0, 0, 612, 0,
	451, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	355, 0, 0, 0, 467, 0, 409, 390, 636, 0,
	0, 407, 360, 436, 398, 442, 425, 450, 403, 399,
	286, 426, 325, 371, 298, 300, 320, 327, 329, 331,
	332, 380, 381, 393, 413, 427, 428, 429, 324, 308,
	408, 309, 342, 310, 287, 316, 314, 317, 415, 318,
	289, 394, 433, 0, 337, 404, 367, 290, 366, 395,
	432, 431, 299, 458, 464, 465, 554, 0, 470, 637,
	638, 639, 479, 0, 400, 484, 485, 486, 488, 489,
	490, 491, 555, 572, 539, 509, 472, 563, 506, 510,
	511, 575, 0, 0, 0, 463, 356, 357, 0, 335,
	283, 284, 632, 321, 386, 577, 610, 611, 502, 0,
	564, 503, 512, 313, 536, 548, 547, 382, 462, 0,
	559, 562, 492, 631, 0, 556, 571, 635, 570, 627,
	392, 0, 412, 568, 515, 0, 560, 534, 0, 561,
	530, 565, 0, 504, 0, 419, 444, 456, 473, 476,
	505, 590, 591, 592, 288, 475, 594, 595, 596, 597,
	598, 599, 600, 593, 447, 537, 514, 540, 455, 517,
	516, 0, 0, 551, 471, 552, 553, 376, 377, 378,
	379, 339, 578, 306, 474, 402, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 544, 541, 640,
	0, 601, 602, 0, 0, 468, 469, 334, 341, 487,
	343, 305, 391, 336, 453, 350, 0, 480, 545, 481,
	604, 607, 605, 606, 383, 346, 347, 416, 351, 361,
	405, 452, 389, 410, 303, 443, 417, 365, 531, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 585, 584, 583,
	582, 581, 580, 579, 0, 0, 528, 430, 315, 277,
	311, 312, 319, 628, 625, 434, 629, 630, 0, 285,
	508, 359, 0, 401, 333, 573, 574, 0, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 278, 241, 242,
	243, 244, 245, 246, 247, 250, 251, 252, 253, 254,
	255, 256, 257, 576, 248, 249, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	0, 0, 0, 279, 280, 281, 282, 0, 0, 273,
	274, 275, 276, 0, 0, 0, 459, 460, 461, 483,
	0, 445, 507, 626, 0, 0, 0, 0, 0, 0,
	0, 557, 569, 603, 0, 613, 614, 616, 618, 617,
	620, 422, 0, 621, 0, 633, 498, 499, 634, 609,
	388, 0, 513, 546, 535, 619, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 0, 0,
	358, 550, 532, 542, 533, 518, 519, 520, 527, 338,
	521, 522, 523, 493, 524, 494, 525, 526, 0, 549,
	500, 418, 372, 567, 566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 1508, 0, 0,
	0, 301, 220, 495, 615, 497, 496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 424,
	441, 302, 414, 454, 307, 421, 297, 387, 411, 0,
	0, 293, 439, 420, 369, 348, 349, 292, 0, 406,
	326, 340, 323, 385, 0, 438, 466, 322, 457, 0,
	449, 295, 0, 448, 384, 435, 440, 370, 364, 0,
	294, 437, 368, 363, 352, 330, 482, 353, 354, 344,
	396, 362, 397, 345, 374, 373, 375, 0, 0, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 0, 0,
	612, 0, 451, 0, 0, 0, 0, 0, 0, 423,
	0, 0, 355, 0, 0, 0, 467, 0, 409, 390,
	636, 0, 0, 407, 360, 436, 398, 442, 425, 450,
	403, 399, 286, 426, 325, 371, 298, 300, 320, 327,
	329, 331, 332, 380, 381, 393, 413, 427, 428, 429,
	324, 308, 408, 309, 342, 310, 287, 316, 314, 317,
	415, 318, 289, 394, 433, 0, 337, 404, 367, 290,
	366, 395, 432, 431, 299, 458, 464, 465, 554, 0,
	470, 637, 638, 639, 479, 0, 400, 484, 485, 486,
	488, 489, 490, 491, 555, 572, 539, 509, 472, 563,
	506, 510, 511, 575, 0, 0, 0, 463, 356, 357,
	0, 335, 283, 284, 632, 321, 386, 577, 610, 611,
	502, 0, 564, 503, 512, 313, 536, 548, 547, 382,
	462, 0, 559, 562, 492, 631, 0, 556, 571, 635,
	570, 627, 392, 0, 412, 568, 515, 0, 560, 534,
	0, 561, 530, 565, 0, 504, 0, 419, 444, 456,
	473, 476, 505, 590, 591, 592, 288, 475, 594, 595,
	596, 597, 598, 599, 600, 593, 447, 537, 514, 540,
	455, 517, 516, 0, 0, 551, 471, 552, 553, 376,
	377, 378, 379, 339, 578, 306, 474, 402, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 544,
	541, 640, 0, 601, 602, 0, 0, 468, 469, 334,
	341, 487, 343, 305, 391, 336, 453, 350, 0, 480,
	545, 481, 604, 607, 605, 606, 383, 346, 347, 416,
	351, 361, 405, 452, 389, 410, 303, 443, 417, 365,
	531, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 585,
	584, 583, 582, 581, 580, 579, 0, 0, 528, 430,
	315, 277, 311, 312, 319, 628, 625, 434, 629, 630,
	0, 285, 508, 359, 0, 401, 333, 573, 574, 0,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 278,
	241, 242, 243, 244, 245, 246, 247, 250, 251, 252,
	253, 254, 255, 256, 257, 576, 248, 249, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 0, 0, 0, 279, 280, 281, 282, 0,
	0, 273, 274, 275, 276, 0, 0, 0, 459, 460,
	461, 483, 0, 445, 507, 626, 0, 0, 0, 0,
	0, 0, 0, 557, 569, 603, 0, 613, 614, 616,
	618, 617, 620, 422, 0, 621, 0, 633, 498, 499,
	634, 609, 388, 0, 513, 546, 535, 619, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	0, 0, 358, 550, 532, 542, 533, 518, 519, 520,
	527, 338, 521, 522, 523, 493, 524, 494, 525, 526,
	0, 549, 500, 418, 372, 567, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 2458,
	0, 0, 0, 301, 220, 495, 615, 497, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 424, 441, 302, 414, 454, 307, 421, 297, 387,
	411, 0, 0, 293, 439, 420, 369, 348, 349, 292,
	0, 406, 326, 340, 323, 385, 0, 438, 466, 322,
	457, 0, 449, 295, 0, 448, 384, 435, 440, 370,
	364, 0, 294, 437, 368, 363, 352, 330, 482, 353,
	354, 344, 396, 362, 397, 345, 374, 373, 375, 0,
	0, 0, 0, 0, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 608,
	0, 0, 612, 0, 451, 0, 0, 0, 0, 0,
	0, 423, 0, 0, 355, 0, 0, 0, 467, 0,
	409, 390, 636, 0, 0, 407, 360, 436, 398, 442,
	425, 450, 403, 399, 286, 426, 325, 371, 298, 300,
	320, 327, 329, 331, 332, 380, 381, 393, 413, 427,
	428, 429, 324, 308, 408, 309, 342, 310, 287, 316,
	314, 317, 415, 318, 289, 394, 433, 0, 337, 404,
	367, 290, 366, 395, 432, 431, 299, 458, 464, 465,
	554, 0, 470, 637, 638, 639, 479, 0, 400, 484,
	485, 486, 488, 489, 490, 491, 555, 572, 539, 509,
	472, 563, 506, 510, 511, 575, 0, 0, 0, 463,
	356, 357, 0, 335, 283, 284, 632, 321, 386, 577,
	610, 611, 502, 0, 564, 503, 512, 313, 536, 548,
	547, 382, 462, 0, 559, 562, 492, 631, 0, 556,
	571, 635, 570, 627, 392, 0, 412, 568, 515, 0,
	560, 534, 0, 561, 530, 565, 0, 504, 0, 419,
	444, 456, 473, 476, 505, 590, 591, 592, 288, 475,
	594, 595, 596, 597, 598, 599, 600, 593, 447, 537,
	514, 540, 455, 517, 516, 0, 0, 551, 471, 552,
	553, 376, 377, 378, 379, 339, 578, 306, 474, 402,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 544, 541, 640, 0, 601, 602, 0, 0, 468,
	469, 334, 341, 487, 343, 305, 391, 336, 453, 350,
	0, 480, 545, 481, 604, 607, 605, 606, 383, 346,
	347, 416, 351, 361, 405, 452, 389, 410, 303, 443,
	417, 365, 531, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 585, 584, 583, 582, 581, 580, 579, 0, 0,
	528, 430, 315, 277, 311, 312, 319, 628, 625, 434,
	629, 630, 0, 285, 508, 359, 0, 401, 333, 573,
	574, 0, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 278, 241, 242, 243, 244, 245, 246, 247, 250,
	251, 252, 253, 254, 255, 256, 257, 576, 248, 249,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 0, 0, 0, 279, 280, 281,
	282, 0, 0, 273, 274, 275, 276, 0, 0, 0,
	459, 460, 461, 483, 0, 445, 507, 626, 0, 0,
	0, 0, 0, 0, 0, 557, 569, 603, 0, 613,
	614, 616, 618, 617, 620, 422, 0, 621, 0, 633,
	498, 499, 634, 609, 388, 0, 513, 546, 535, 619,
	501, 0, 0, 2813, 0, 0, 0, 0, 0, 0,
	0, 328, 0, 0, 358, 550, 532, 542, 533, 518,
	519, 520, 527, 338, 521, 522, 523, 493, 524, 494,
	525, 526, 0, 549, 500, 418, 372, 567, 566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 301, 220, 495, 615, 497,
	496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 424, 441, 302, 414, 454, 307, 421,
	297, 387, 411, 0, 0, 293, 439, 420, 369, 348,
	349, 292, 0, 406, 326, 340, 323, 385, 0, 438,
	466, 322, 457, 0, 449, 295, 0, 448, 384, 435,
	440, 370, 364, 0, 294, 437, 368, 363, 352, 330,
	482, 353, 354, 344, 396, 362, 397, 345, 374, 373,
	375, 0, 0, 0, 0, 0, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 0, 0, 612, 0, 451, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 355, 0, 0, 0,
	467, 0, 409, 390, 636, 0, 0, 407, 360, 436,
	398, 442, 425, 450, 403, 399, 286, 426, 325, 371,
	298, 300, 320, 327, 329, 331, 332, 380, 381, 393,
	413, 427, 428, 429, 324, 308, 408, 309, 342, 310,
	287, 316, 314, 317, 415, 318, 289, 394, 433, 0,
	337, 404, 367, 290, 366, 395, 432, 431, 299, 458,
	464, 465, 554, 0, 470, 637, 638, 639, 479, 0,
	400, 484, 485, 486, 488, 489, 490, 491, 555, 572,
	539, 509, 472, 563, 506, 510, 511, 575, 0, 0,
	0, 463, 356, 357, 0, 335, 283, 284, 632, 321,
	386, 577, 610, 611, 502, 0, 564, 503, 512, 313,
	536, 548, 547, 382, 462, 0, 559, 562, 492, 631,
	0, 556, 571, 635, 570, 627, 392, 0, 412, 568,
	515, 0, 560, 534, 0, 561, 530, 565, 0, 504,
	0, 419, 444, 456, 473, 476, 505, 590, 591, 592,
	288, 475, 594, 595, 596, 597, 598, 599, 600, 593,
	447, 537, 514, 540, 455, 517, 516, 0, 0, 551,
	471, 552, 553, 376, 377, 378, 379, 339, 578, 306,
	474, 402, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 544, 541, 640, 0, 601, 602, 0,
	0, 468, 469, 334, 341, 487, 343, 305, 391, 336,
	453, 350, 0, 480, 545, 481, 604, 607, 605, 606,
	383, 346, 347, 416, 351, 361, 405, 452, 389, 410,
	303, 443, 417, 365, 531, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 585, 584, 583, 582, 581, 580, 579,
	0, 0, 528, 430, 315, 277, 311, 312, 319, 628,
	625, 434, 629, 630, 0, 285, 508, 359, 0, 401,
	333, 573, 574, 0, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 278, 241, 242, 243, 244, 245, 246,
	247, 250, 251, 252, 253, 254, 255, 256, 257, 576,
	248, 249, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 0, 0, 0, 279,
	280, 281, 282, 0, 0, 273, 274, 275, 276, 0,
	0, 0, 459, 460, 461, 483, 0, 445, 507, 626,
	0, 0, 0, 0, 0, 0, 0, 557, 569, 603,
	0, 613, 614, 616, 618, 617, 620, 422, 0, 621,
	0, 633, 498, 499, 634, 609, 388, 0, 513, 546,
	535, 619, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 0, 0, 358, 550, 532, 542,
	533, 518, 519, 520, 527, 338, 521, 522, 523, 493,
	524, 494, 525, 526, 0, 549, 500, 418, 372, 567,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 301, 220, 495,
	615, 497, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 424, 441, 302, 414, 454,
	307, 421, 297, 387, 411, 0, 0, 293, 439, 420,
	369, 348, 349, 292, 0, 406, 326, 340, 323, 385,
	0, 438, 466, 322, 457, 0, 449, 295, 0, 448,
	384, 435, 440, 370, 364, 0, 294, 437, 368, 363,
	352, 330, 482, 353, 354, 344, 396, 362, 397, 345,
	374, 373, 375, 0, 0, 0, 0, 0, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 608, 0, 0, 612, 0, 451, 0,
	0, 0, 0, 0, 0, 423, 0, 0, 355, 0,
	0, 0, 467, 0, 409, 390, 636, 0, 0, 407,
	360, 436, 398, 442, 425, 450, 403, 399, 286, 426,
	325, 371, 298, 300, 320, 327, 329, 331, 332, 380,
	381, 393, 413, 427, 428, 429, 324, 308, 408, 309,
	342, 310, 287, 316, 314, 317, 415, 318, 289, 394,
	433, 0, 337, 404, 367, 290, 366, 395, 432, 431,
	299, 458, 464, 465, 554, 0, 470, 637, 638, 639,
	479, 0, 400, 484, 485, 486, 488, 489, 490, 491,
	555, 572, 539, 509, 472, 563, 506, 510, 511, 575,
	0, 0, 0, 463, 356, 357, 0, 335, 283, 284,
	632, 321, 386, 577, 610, 611, 502, 0, 564, 503,
	512, 313, 536, 548, 547, 382, 462, 0, 559, 562,
	492, 631, 0, 556, 571, 635, 570, 627, 392, 0,
	412, 568, 515, 0, 560, 534, 0, 561, 530, 565,
	0, 504, 0, 419, 444, 456, 473, 476, 505, 590,
	591, 592, 288, 475, 594, 595, 596, 597, 598, 599,
	600, 593, 447, 537, 514, 540, 455, 517, 516, 0,
	0, 551, 471, 552, 553, 376, 377, 378, 379, 339,
	578, 306, 474, 402, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 541, 640, 0, 601,
	602, 0, 0, 468, 469, 334, 341, 487, 343, 305,
	391, 336, 453, 350, 0, 480, 545, 481, 604, 607,
	605, 606, 383, 346, 347, 416, 351, 361, 405, 452,
	389, 410, 303, 443, 417, 365, 531, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 585, 584, 583, 582, 581,
	580, 579, 0, 0, 528, 430, 315, 277, 311, 312,
	319, 628, 625, 434, 629, 630, 0, 285, 508, 359,
	0, 401, 333, 573, 574, 0, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 278, 241, 242, 243, 244,
	245, 246, 247, 250, 251, 252, 253, 254, 255, 256,
	257, 576, 248, 249, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 0, 0,
	0, 279, 280, 281, 282, 0, 0, 273, 274, 275,
	276, 0, 0, 0, 459, 460, 461, 483, 0, 445,
	507, 626, 0, 0, 0, 0, 0, 0, 0, 557,
	569, 603, 0, 613, 614, 616, 618, 617, 620, 422,
	0, 621, 0, 633, 498, 499, 634, 609, 388, 0,
	513, 546, 535, 619, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 0, 358, 550,
	532, 542, 533, 518, 519, 520, 527, 338, 521, 522,
	523, 493, 524, 494, 525, 526, 0, 549, 500, 418,
	372, 567, 566, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 2575, 0, 0, 0, 301,
	220, 495, 615, 497, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 424, 441, 302,
	414, 454, 307, 421, 297, 387, 411, 0, 0, 293,
	439, 420, 369, 348, 349, 292, 0, 406, 326, 340,
	323, 385, 0, 438, 466, 322, 457, 0, 449, 295,
	0, 448, 384, 435, 440, 370, 364, 0, 294, 437,
	368, 363, 352, 330, 482, 353, 354, 344, 396, 362,
	397, 345, 374, 373, 375, 0, 0, 0, 0, 0,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 608, 0, 0, 612, 0,
	451, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	355, 0, 0, 0, 467, 0, 409, 390, 636, 0,
	0, 407, 360, 436, 398, 442, 425, 450, 403, 399,
	286, 426, 325, 371, 298, 300, 320, 327, 329, 331,
	332, 380, 381, 393, 413, 427, 428, 429, 324, 308,
	408, 309, 342, 310, 287, 316, 314, 317, 415, 318,
	289, 394, 433, 0, 337, 404, 367, 290, 366, 395,
	432, 431, 299, 458, 464, 465, 554, 0, 470, 637,
	638, 639, 479, 0, 400, 484, 485, 486, 488, 489,
	490, 491, 555, 572, 539, 509, 472, 563, 506, 510,
	511, 575, 0, 0, 0, 463, 356, 357, 0, 335,
	283, 284, 632, 321, 386, 577, 610, 611, 502, 0,
	564, 503, 512, 313, 536, 548, 547, 382, 462, 0,
	559, 562, 492, 631, 0, 556, 571, 635, 570, 627,
	392, 0, 412, 568, 515, 0, 560, 534, 0, 561,
	530, 565, 0, 504, 0, 419, 444, 456, 473, 476,
	505, 590, 591, 592, 288, 475, 594, 595, 596, 597,
	598, 599, 600, 593, 447, 537, 514, 540, 455, 517,
	516, 0, 0, 551, 471, 552, 553, 376, 377, 378,
	379, 339, 578, 306, 474, 402, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 544, 541, 640,
	0, 601, 602, 0, 0, 468, 469, 334, 341, 487,
	343, 305, 391, 336, 453, 350, 0, 480, 545, 481,
	604, 607, 605, 606, 383, 346, 347, 416, 351, 361,
	405, 452, 389, 410, 303, 443, 417, 365, 531, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 585, 584, 583,
	582, 581, 580, 579, 0, 0, 528, 430, 315, 277,
	311, 312, 319, 628, 625, 434, 629, 630, 0, 285,
	508, 359, 0, 401, 333, 573, 574, 0, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 278, 241, 242,
	243, 244, 245, 246, 247, 250, 251, 252, 253, 254,
	255, 256, 257, 576, 248, 249, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	0, 0, 0, 279, 280, 281, 282, 0, 0, 273,
	274, 275, 276, 0, 0, 0, 459, 460, 461, 483,
	0, 445, 507, 626, 0, 0, 0, 0, 0, 0,
	0, 557, 569, 603, 0, 613, 614, 616, 618, 617,
	620, 422, 0, 621, 0, 633, 498, 499, 634, 609,
	388, 0, 513, 546, 535, 619, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 0, 0,
	358, 550, 532, 542, 533, 518, 519, 520, 527, 338,
	521, 522, 523, 493, 524, 494, 525, 526, 0, 549,
	500, 418, 372, 567, 566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 301, 220, 495, 615, 497, 496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 424,
	441, 302, 414, 454, 307, 421, 297, 387, 411, 0,
	0, 293, 439, 420, 369, 348, 349, 292, 0, 406,
	326, 340, 323, 385, 0, 438, 466, 322, 457, 0,
	449, 295, 0, 448, 384, 435, 440, 370, 364, 0,
	294, 437, 368, 363, 352, 330, 482, 353, 354, 344,
	396, 362, 397, 345, 374, 373, 375, 0, 0, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 0, 0,
	612, 0, 451, 0, 0, 0, 0, 0, 0, 423,
	0, 0, 355, 0, 0, 0, 467, 0, 409, 390,
	636, 0, 0, 407, 360, 436, 398, 442, 425, 450,
	403, 399, 286, 426, 325, 371, 298, 300, 320, 327,
	329, 331, 332, 380, 381, 393, 413, 427, 428, 429,
	324, 308, 408, 309, 342, 310, 287, 316, 314, 317,
	415, 318, 289, 394, 433, 0, 337, 404, 367, 290,
	366, 395, 432, 431, 299, 458, 464, 465, 554, 0,
	470, 637, 638, 639, 479, 0, 400, 484, 485, 486,
	488, 489, 490, 491, 555, 572, 539, 509, 472, 563,
	506, 510, 511, 575, 0, 0, 0, 463, 356, 357,
	0, 335, 283, 284, 632, 321, 386, 577, 610, 611,
	502, 0, 564, 503, 512, 313, 536, 548, 547, 382,
	462, 0, 559, 562, 492, 631, 0, 556, 571, 635,
	570, 627, 392, 0, 412, 568, 515, 0, 560, 534,
	0, 561, 530, 565, 0, 504, 0, 419, 444, 456,
	473, 476, 505, 590, 591, 592, 288, 475, 594, 595,
	596, 597, 598, 599, 600, 593, 447, 537, 514, 540,
	455, 517, 516, 0, 0, 551, 471, 552, 553, 376,
	377, 378, 379, 339, 578, 306, 474, 402, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 544,
	541, 640, 0, 601, 602, 0, 0, 468, 469, 334,
	341, 487, 343, 305, 391, 336, 453, 350, 0, 480,
	545, 481, 604, 607, 605, 606, 383, 346, 347, 416,
	351, 361, 405, 452, 389, 410, 303, 443, 417, 365,
	531, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 585,
	584, 583, 582, 581, 580, 579, 0, 0, 528, 430,
	315, 277, 311, 312, 319, 628, 625, 434, 629, 630,
	0, 285, 508, 359, 0, 401, 333, 573, 574, 0,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 278,
	241, 242, 243, 244, 245, 246, 247, 250, 251, 252,
	253, 254, 255, 256, 257, 576, 248, 249, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 0, 0, 0, 279, 280, 281, 282, 0,
	0, 273, 274, 275, 276, 0, 0, 0, 459, 460,
	461, 483, 0, 445, 507, 626, 0, 0, 0, 0,
	0, 0, 0, 557, 569, 603, 0, 613, 614, 616,
	618, 617, 620, 422, 0, 621, 0, 633, 498, 499,
	634, 609, 388, 0, 513, 546, 535, 619, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	0, 0, 358, 550, 532, 542, 533, 518, 519, 520,
	527, 338, 521, 522, 523, 493, 524, 494, 525, 526,
	0, 549, 500, 418, 372, 567, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 2534,
	0, 0, 0, 301, 220, 495, 615, 497, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 424, 441, 302, 414, 454, 307, 421, 297, 387,
	411, 0, 0, 293, 439, 420, 369, 348, 349, 292,
	0, 406, 326, 340, 323, 385, 0, 438, 466, 322,
	457, 0, 449, 295, 0, 448, 384, 435, 440, 370,
	364, 0, 294, 437, 368, 363, 352, 330, 482, 353,
	354, 344, 396, 362, 397, 345, 374, 373, 375, 0,
	0, 0, 0, 0, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 608,
	0, 0, 612, 0, 451, 0, 0, 0, 0, 0,
	0, 423, 0, 0, 355, 0, 0, 0, 467, 0,
	409, 390, 636, 0, 0, 407, 360, 436, 398, 442,
	425, 450, 403, 399, 286, 426, 325, 371, 298, 300,
	320, 327, 329, 331, 332, 380, 381, 393, 413, 427,
	428, 429, 324, 308, 408, 309, 342, 310, 287, 316,
	314, 317, 415, 318, 289, 394, 433, 0, 337, 404,
	367, 290, 366, 395, 432, 431, 299, 458, 464, 465,
	554, 0, 470, 637, 638, 639, 479, 0, 400, 484,
	485, 486, 488, 489, 490, 491, 555, 572, 539, 509,
	472, 563, 506, 510, 511, 575, 0, 0, 0, 463,
	356, 357, 0, 335, 283, 284, 632, 321, 386, 577,
	610, 611, 502, 0, 564, 503, 512, 313, 536, 548,
	547, 382, 462, 0, 559, 562, 492, 631, 0, 556,
	571, 635, 570, 627, 392, 0, 412, 568, 515, 0,
	560, 534, 0, 561, 530, 565, 0, 504, 0, 419,
	444, 456, 473, 476, 505, 590, 591, 592, 288, 475,
	594, 595, 596, 597, 598, 599, 600, 593, 447, 537,
	514, 540, 455, 517, 516, 0, 0, 551, 471, 552,
	553, 376, 377, 378, 379, 339, 578, 306, 474, 402,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 544, 541, 640, 0, 601, 602, 0, 0, 468,
	469, 334, 341, 487, 343, 305, 391, 336, 453, 350,
	0, 480, 545, 481, 604, 607, 605, 606, 383, 346,
	347, 416, 351, 361, 405, 452, 389, 410, 303, 443,
	417, 365, 531, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 585, 584, 583, 582, 581, 580, 579, 0, 0,
	528, 430, 315, 277, 311, 312, 319, 628, 625, 434,
	629, 630, 0, 285, 508, 359, 0, 401, 333, 573,
	574, 0, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 278, 241, 242, 243, 244, 245, 246, 247, 250,
	251, 252, 253, 254, 255, 256, 257, 576, 248, 249,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 0, 0, 0, 279, 280, 281,
	282, 0, 0, 273, 274, 275, 276, 0, 0, 0,
	459, 460, 461, 483, 0, 445, 507, 626, 0, 0,
	0, 0, 0, 0, 0, 557, 569, 603, 0, 613,
	614, 616, 618, 617, 620, 422, 0, 621, 2311, 633,
	498, 499, 634, 609, 388, 0, 513, 546, 535, 619,
	501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 0, 0, 358, 550, 532, 542, 533, 518,
	519, 520, 527, 338, 521, 522, 523, 493, 524, 494,
	525, 526, 0, 549, 500, 418, 372, 567, 566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 301, 220, 495, 615, 497,
	496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 424, 441, 302, 414, 454, 307, 421,
	297, 387, 411, 0, 0, 293, 439, 420, 369, 348,
	349, 292, 0, 406, 326, 340, 323, 385, 0, 438,
	466, 322, 457, 0, 449, 295, 0, 448, 384, 435,
	440, 370, 364, 0, 294, 437, 368, 363, 352, 330,
	482, 353, 354, 344, 396, 362, 397, 345, 374, 373,
	375, 0, 0, 0, 0, 0, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 0, 0, 612, 0, 451, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 355, 0, 0, 0,
	467, 0, 409, 390, 636, 0, 0, 407, 360, 436,
	398, 442, 425, 450, 403, 399, 286, 426, 325, 371,
	298, 300, 320, 327, 329, 331, 332, 380, 381, 393,
	413, 427, 428, 429, 324, 308, 408, 309, 342, 310,
	287, 316, 314, 317, 415, 318, 289, 394, 433, 0,
	337, 404, 367, 290, 366, 395, 432, 431, 299, 458,
	464, 465, 554, 0, 470, 637, 638, 639, 479, 0,
	400, 484, 485, 486, 488, 489, 490, 491, 555, 572,
	539, 509, 472, 563, 506, 510, 511, 575, 0, 0,
	0, 463, 356, 357, 0, 335, 283, 284, 632, 321,
	386, 577, 610, 611, 502, 0, 564, 503, 512, 313,
	536, 548, 547, 382, 462, 0, 559, 562, 492, 631,
	0, 556, 571, 635, 570, 627, 392, 0, 412, 568,
	515, 0, 560, 534, 0, 561, 530, 565, 0, 504,
	0, 419, 444, 456, 473, 476, 505, 590, 591, 592,
	288, 475, 594, 595, 596, 597, 598, 599, 600, 593,
	447, 537, 514, 540, 455, 517, 516, 0, 0, 551,
	471, 552, 553, 376, 377, 378, 379, 339, 578, 306,
	474, 402, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 544, 541, 640, 0, 601, 602, 0,
	0, 468, 469, 334, 341, 487, 343, 305, 391, 336,
	453, 350, 0, 480, 545, 481, 604, 607, 605, 606,
	383, 346, 347, 416, 351, 361, 405, 452, 389, 410,
	303, 443, 417, 365, 531, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 585, 584, 583, 582, 581, 580, 579,
	0, 0, 528, 430, 315, 277, 311, 312, 319, 628,
	625, 434, 629, 630, 0, 285, 508, 359, 0, 401,
	333, 573, 574, 0, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 278, 241, 242, 243, 244, 245, 246,
	247, 250, 251, 252, 253, 254, 255, 256, 257, 576,
	248, 249, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 0, 0, 0, 279,
	280, 281, 282, 0, 0, 273, 274, 275, 276, 0,
	0, 0, 459, 460, 461, 483, 0, 445, 507, 626,
	0, 0, 0, 0, 0, 0, 0, 557, 569, 603,
	0, 613, 614, 616, 618, 617, 620, 422, 0, 621,
	0, 633, 498, 499, 634, 609, 388, 0, 513, 546,
	535, 619, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 0, 0, 358, 550, 532, 542,
	533, 518, 519, 520, 527, 338, 521, 522, 523, 493,
	524, 494, 525, 526, 0, 549, 500, 418, 372, 567,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 1865, 0, 0, 301, 220, 495,
	615, 497, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 424, 441, 302, 414, 454,
	307, 421, 297, 387, 411, 0, 0, 293, 439, 420,
	369, 348, 349, 292, 0, 406, 326, 340, 323, 385,
	0, 438, 466, 322, 457, 0, 449, 295, 0, 448,
	384, 435, 440, 370, 364, 0, 294, 437, 368, 363,
	352, 330, 482, 353, 354, 344, 396, 362, 397, 345,
	374, 373, 375, 0, 0, 0, 0, 0, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 608, 0, 0, 612, 0, 451, 0,
	0, 0, 0, 0, 0, 423, 0, 0, 355, 0,
	0, 0, 467, 0, 409, 390, 636, 0, 0, 407,
	360, 436, 398, 442, 425, 450, 403, 399, 286, 426,
	325, 371, 298, 300, 320, 327, 329, 331, 332, 380,
	381, 393, 413, 427, 428, 429, 324, 308, 408, 309,
	342, 310, 287, 316, 314, 317, 415, 318, 289, 394,
	433, 0, 337, 404, 367, 290, 366, 395, 432, 431,
	299, 458, 464, 465, 554, 0, 470, 637, 638, 639,
	479, 0, 400, 484, 485, 486, 488, 489, 490, 491,
	555, 572, 539, 509, 472, 563, 506, 510, 511, 575,
	0, 0, 0, 463, 356, 357, 0, 335, 283, 284,
	632, 321, 386, 577, 610, 611, 502, 0, 564, 503,
	512, 313, 536, 548, 547, 382, 462, 0, 559, 562,
	492, 631, 0, 556, 571, 635, 570, 627, 392, 0,
	412, 568, 515, 0, 560, 534, 0, 561, 530, 565,
	0, 504, 0, 419, 444, 456, 473, 476, 505, 590,
	591, 592, 288, 475, 594, 595, 596, 597, 598, 599,
	600, 593, 447, 537, 514, 540, 455, 517, 516, 0,
	0, 551, 471, 552, 553, 376, 377, 378, 379, 339,
	578, 306, 474, 402, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 541, 640, 0, 601,
	602, 0, 0, 468, 469, 334, 341, 487, 343, 305,
	391, 336, 453, 350, 0, 480, 545, 481, 604, 607,
	605, 606, 383, 346, 347, 416, 351, 361, 405, 452,
	389, 410, 303, 443, 417, 365, 531, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 585, 584, 583, 582, 581,
	580, 579, 0, 0, 528, 430, 315, 277, 311, 312,
	319, 628, 625, 434, 629, 630, 0, 285, 508, 359,
	0, 401, 333, 573, 574, 0, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 278, 241, 242, 243, 244,
	245, 246, 247, 250, 251, 252, 253, 254, 255, 256,
	257, 576, 248, 249, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 0, 0,
	0, 279, 280, 281, 282, 0, 0, 273, 274, 275,
	276, 0, 0, 0, 459, 460, 461, 483, 0, 445,
	507, 626, 0, 0, 0, 0, 0, 0, 0, 557,
	569, 603, 0, 613, 614, 616, 618, 617, 620, 422,
	0, 621, 0, 633, 498, 499, 634, 609, 388, 0,
	513, 546, 535, 619, 501, 0, 1993, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 0, 358, 550,
	532, 542, 533, 518, 519, 520, 527, 338, 521, 522,
	523, 493, 524, 494, 525, 526, 0, 549, 500, 418,
	372, 567, 566, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 301,
	220, 495, 615, 497, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 424, 441, 302,
	414, 454, 307, 421, 297, 387, 411, 0, 0, 293,
	439, 420, 369, 348, 349, 292, 0, 406, 326, 340,
	323, 385, 0, 438, 466, 322, 457, 0, 449, 295,
	0, 448, 384, 435, 440, 370, 364, 0, 294, 437,
	368, 363, 352, 330, 482, 353, 354, 344, 396, 362,
	397, 345, 374, 373, 375, 0, 0, 0, 0, 0,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 608, 0, 0, 612, 0,
	451, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	355, 0, 0, 0, 467, 0, 409, 390, 636, 0,
	0, 407, 360, 436, 398, 442, 425, 450, 403, 399,
	286, 426, 325, 371, 298, 300, 320, 327, 329, 331,
	332, 380, 381, 393, 413, 427, 428, 429, 324, 308,
	408, 309, 342, 310, 287, 316, 314, 317, 415, 318,
	289, 394, 433, 0, 337, 404, 367, 290, 366, 395,
	432, 431, 299, 458, 464, 465, 554, 0, 470, 637,
	638, 639, 479, 0, 400, 484, 485, 486, 488, 489,
	490, 491, 555, 572, 539, 509, 472, 563, 506, 510,
	511, 575, 0, 0, 0, 463, 356, 357, 0, 335,
	283, 284, 632, 321, 386, 577, 610, 611, 502, 0,
	564, 503, 512, 313, 536, 548, 547, 382, 462, 0,
	559, 562, 492, 631, 0, 556, 571, 635, 570, 627,
	392, 0, 412, 568, 515, 0, 560, 534, 0, 561,
	530, 565, 0, 504, 0, 419, 444, 456, 473, 476,
	505, 590, 591, 592, 288, 475, 594, 595, 596, 597,
	598, 599, 600, 593, 447, 537, 514, 540, 455, 517,
	516, 0, 0, 551, 471, 552, 553, 376, 377, 378,
	379, 339, 578, 306, 474, 402, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 544, 541, 640,
	0, 601, 602, 0, 0, 468, 469, 334, 341, 487,
	343, 305, 391, 336, 453, 350, 0, 480, 545, 481,
	604, 607, 605, 606, 383, 346, 347, 416, 351, 361,
	405, 452, 389, 410, 303, 443, 417, 365, 531, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 585, 584, 583,
	582, 581, 580, 579, 0, 0, 528, 430, 315, 277,
	311, 312, 319, 628, 625, 434, 629, 630, 0, 285,
	508, 359, 0, 401, 333, 573, 574, 0, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 278, 241, 242,
	243, 244, 245, 246, 247, 250, 251, 252, 253, 254,
	255, 256, 257, 576, 248, 249, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	0, 0, 0, 279, 280, 281, 282, 0, 0, 273,
	274, 275, 276, 0, 0, 0, 459, 460, 461, 483,
	0, 445, 507, 626, 0, 0, 0, 0, 0, 0,
	0, 557, 569, 603, 0, 613, 614, 616, 618, 617,
	620, 422, 0, 621, 0, 633, 498, 499, 634, 609,
	388, 0, 513, 546, 535, 619, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 0, 0,
	358, 550, 532, 542, 533, 518, 519, 520, 527, 338,
	521, 522, 523, 493, 524, 494, 525, 526, 0, 549,
	500, 418, 372, 567, 566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 1508, 0, 0,
	0, 301, 220, 495, 615, 497, 496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 424,
	441, 302, 414, 454, 307, 421, 297, 387, 411, 0,
	0, 293, 439, 420, 369, 348, 349, 292, 0, 406,
	326, 340, 323, 385, 0, 438, 466, 322, 457, 0,
	449, 295, 0, 448, 384, 435, 440, 370, 364, 0,
	294, 437, 368, 363, 352, 330, 482, 353, 354, 344,
	396, 362, 397, 345, 374, 373, 375, 0, 0, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 0, 0,
	612, 0, 451, 0, 0, 0, 0, 0, 0, 423,
	0, 0, 355, 0, 0, 0, 467, 0, 409, 390,
	636, 0, 0, 407, 360, 436, 398, 442, 425, 450,
	1898, 399, 286, 426, 325, 371, 298, 300, 320, 327,
	329, 331, 332, 380, 381, 393, 413, 427, 428, 429,
	324, 308, 408, 309, 342, 310, 287, 316, 314, 317,
	415, 318, 289, 394, 433, 0, 337, 404, 367, 290,
	366, 395, 432, 431, 299, 458, 464, 465, 554, 0,
	470, 637, 638, 639, 479, 0, 400, 484, 485, 486,
	488, 489, 490, 491, 555, 572, 539, 509, 472, 563,
	506, 510, 511, 575, 0, 0, 0, 463, 356, 357,
	0, 335, 283, 284, 632, 321, 386, 577, 610, 611,
	502, 0, 564, 503, 512, 313, 536, 548, 547, 382,
	462, 0, 559, 562, 492, 631, 0, 556, 571, 635,
	570, 627, 392, 0, 412, 568, 515, 0, 560, 534,
	0, 561, 530, 565, 0, 504, 0, 419, 444, 456,
	473, 476, 505, 590, 591, 592, 288, 475, 594, 595,
	596, 597, 598, 599, 600, 593, 447, 537, 514, 540,
	455, 517, 516, 0, 0, 551, 471, 552, 553, 376,
	377, 378, 379, 339, 578, 306, 474, 402, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 544,
	541, 640, 0, 601, 602, 0, 0, 468, 469, 334,
	341, 487, 343, 305, 391, 336, 453, 350, 0, 480,
	545, 481, 604, 607, 605, 606, 383, 346, 347, 416,
	351, 361, 405, 452, 389, 410, 303, 443, 417, 365,
	531, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 585,
	584, 583, 582, 581, 580, 579, 0, 0, 528, 430,
	315, 277, 311, 312, 319, 628, 625, 434, 629, 630,
	0, 285, 508, 359, 0, 401, 333, 573, 574, 0,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 278,
	241, 242, 243, 244, 245, 246, 247, 250, 251, 252,
	253, 254, 255, 256, 257, 576, 248, 249, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 0, 0, 0, 279, 280, 281, 282, 0,
	0, 273, 274, 275, 276, 0, 0, 0, 459, 460,
	461, 483, 0, 445, 507, 626, 0, 0, 0, 0,
	0, 0, 0, 557, 569, 603, 0, 613, 614, 616,
	618, 617, 620, 422, 0, 621, 0, 633, 498, 499,
	634, 609, 388, 0, 513, 546, 535, 619, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	0, 0, 358, 550, 532, 542, 533, 518, 519, 520,
	527, 338, 521, 522, 523, 493, 524, 494, 525, 526,
	0, 549, 500, 418, 372, 567, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 301, 220, 495, 615, 497, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 424, 441, 302, 414, 454, 307, 421, 297, 387,
	411, 0, 0, 293, 439, 420, 369, 348, 349, 292,
	0, 406, 326, 340, 323, 385, 0, 438, 466, 322,
	457, 0, 449, 295, 0, 448, 384, 435, 440, 370,
	364, 0, 294, 437, 368, 363, 352, 330, 482, 353,
	354, 344, 396, 362, 397, 345, 374, 373, 375, 0,
	0, 0, 0, 0, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 608,
	0, 0, 612, 0, 451, 0, 0, 1537, 0, 0,
	0, 423, 0, 0, 355, 0, 0, 0, 467, 0,
	409, 390, 636, 0, 0, 407, 360, 436, 398, 442,
	425, 450, 403, 399, 286, 426, 325, 371, 298, 300,
	320, 327, 329, 331, 332, 380, 381, 393, 413, 427,
	428, 429, 324, 308, 408, 309, 342, 310, 287, 316,
	314, 317, 415, 318, 289, 394, 433, 0, 337, 404,
	367, 290, 366, 395, 432, 431, 299, 458, 464, 465,
	554, 0, 470, 637, 638, 639, 479, 0, 400, 484,
	485, 486, 488, 489, 490, 491, 555, 572, 539, 509,
	472, 563, 506, 510, 511, 575, 0, 0, 0, 463,
	356, 357, 0, 335, 283, 284, 632, 321, 386, 577,
	610, 611, 502, 0, 564, 503, 512, 313, 536, 548,
	547, 382, 462, 0, 559, 562, 492, 631, 0, 556,
	571, 635, 570, 627, 392, 0, 412, 568, 515, 0,
	560, 534, 0, 561, 530, 565, 0, 504, 0, 419,
	444, 456, 473, 476, 505, 590, 591, 592, 288, 475,
	594, 595, 596, 597, 598, 599, 600, 593, 447, 537,
	514, 540, 455, 517, 516, 0, 0, 551, 471, 552,
	553, 376, 377, 378, 379, 339, 578, 306, 474, 402,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 544, 541, 640, 0, 601, 602, 0, 0, 468,
	469, 334, 341, 487, 343, 305, 391, 336, 453, 350,
	0, 480, 545, 481, 604, 607, 605, 606, 383, 346,
	347, 416, 351, 361, 405, 452, 389, 410, 303, 443,
	417, 365, 531, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 585, 584, 583, 582, 581, 580, 579, 0, 0,
	528, 430, 315, 277, 311, 312, 319, 628, 625, 434,
	629, 630, 0, 285, 508, 359, 0, 401, 333, 573,
	574, 0, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 278, 241, 242, 243, 244, 245, 246, 247, 250,
	251, 252, 253, 254, 255, 256, 257, 576, 248, 249,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 0, 0, 0, 279, 280, 281,
	282, 0, 0, 273, 274, 275, 276, 0, 0, 0,
	459, 460, 461, 483, 0, 445, 507, 626, 0, 0,
	0, 0, 0, 0, 0, 557, 569, 603, 0, 613,
	614, 616, 618, 617, 620, 422, 0, 621, 0, 633,
	498, 499, 634, 609, 388, 0, 513, 546, 535, 619,
	501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	647, 328, 0, 0, 358, 550, 532, 542, 533, 518,
	519, 520, 527, 338, 521, 522, 523, 493, 524, 494,
	525, 526, 0, 549, 500, 418, 372, 567, 566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 301, 220, 495, 615, 497,
	496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 424, 441, 302, 414, 454, 307, 421,
	297, 387, 411, 0, 0, 293, 439, 420, 369, 348,
	349, 292, 0, 406, 326, 340, 323, 385, 0, 438,
	466, 322, 457, 0, 449, 295, 0, 448, 384, 435,
	440, 370, 364, 0, 294, 437, 368, 363, 352, 330,
	482, 353, 354, 344, 396, 362, 397, 345, 374, 373,
	375, 0, 0, 0, 0, 0, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 0, 0, 612, 0, 451, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 355, 0, 0, 0,
	467, 0, 409, 390, 636, 0, 0, 407, 360, 436,
	398, 442, 425, 450, 403, 399, 286, 426, 325, 371,
	298, 300, 320, 327, 329, 331, 332, 380, 381, 393,
	413, 427, 428, 429, 324, 308, 408, 309, 342, 310,
	287, 316, 314, 317, 415, 318, 289, 394, 433, 0,
	337, 404, 367, 290, 366, 395, 432, 431, 299, 458,
	464, 465, 554, 0, 470, 637, 638, 639, 479, 0,
	400, 484, 485, 486, 488, 489, 490, 491, 555, 572,
	539, 509, 472, 563, 506, 510, 511, 575, 0, 0,
	0, 463, 356, 357, 0, 335, 283, 284, 632, 321,
	386, 577, 610, 611, 502, 0, 564, 503, 512, 313,
	536, 548, 547, 382, 462, 0, 559, 562, 492, 631,
	0, 556, 571, 635, 570, 627, 392, 0, 412, 568,
	515, 0, 560, 534, 0, 561, 530, 565, 0, 504,
	0, 419, 444, 456, 473, 476, 505, 590, 591, 592,
	288, 475, 594, 595, 596, 597, 598, 599, 600, 593,
	447, 537, 514, 540, 455, 517, 516, 0, 0, 551,
	471, 552, 553, 376, 377, 378, 379, 339, 578, 306,
	474, 402, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 544, 541, 640, 0, 601, 602, 0,
	0, 468, 469, 334, 341, 487, 343, 305, 391, 336,
	453, 350, 0, 480, 545, 481, 604, 607, 605, 606,
	383, 346, 347, 416, 351, 361, 405, 452, 389, 410,
	303, 443, 417, 365, 531, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 585, 584, 583, 582, 581, 580, 579,
	0, 0, 528, 430, 315, 277, 311, 312, 319, 628,
	625, 434, 629, 630, 0, 285, 508, 359, 0, 401,
	333, 573, 574, 0, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 278, 241, 242, 243, 244, 245, 246,
	247, 250, 251, 252, 253, 254, 255, 256, 257, 576,
	248, 249, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 0, 0, 0, 279,
	280, 281, 282, 0, 0, 273, 274, 275, 276, 0,
	0, 0, 459, 460, 461, 483, 0, 445, 507, 626,
	0, 0, 0, 0, 0, 0, 0, 557, 569, 603,
	0, 613, 614, 616, 618, 617, 620, 422, 0, 621,
	0, 633, 498, 499, 634, 609, 388, 0, 513, 546,
	535, 619, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 0, 0, 358, 550, 532, 542,
	533, 518, 519, 520, 527, 338, 521, 522, 523, 493,
	524, 494, 525, 526, 0, 549, 500, 418, 372, 567,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 301, 220, 495,
	615, 497, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 424, 441, 302, 414, 454,
	307, 421, 297, 387, 411, 0, 0, 293, 439, 420,
	369, 348, 349, 292, 0, 406, 326, 340, 323, 385,
	0, 438, 466, 322, 457, 0, 449, 295, 0, 448,
	384, 435, 440, 370, 364, 0, 294, 437, 368, 363,
	352, 330, 482, 353, 354, 344, 396, 362, 397, 345,
	374, 373, 375, 0, 0, 0, 0, 0, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 608, 0, 657, 612, 0, 451, 0,
	0, 0, 0, 0, 0, 423, 0, 0, 355, 0,
	0, 0, 467, 0, 409, 390, 636, 0, 0, 407,
	360, 436, 398, 442, 425, 450, 403, 399, 286, 426,
	325, 371, 298, 300, 320, 327, 329, 331, 332, 380,
	381, 393, 413, 427, 428, 429, 324, 308, 408, 309,
	342, 310, 287, 316, 314, 317, 415, 318, 289, 394,
	433, 0, 337, 404, 367, 290, 366, 395, 432, 431,
	299, 458, 464, 465, 554, 0, 470, 637, 638, 639,
	479, 0, 400, 484, 485, 486, 488, 489, 490, 491,
	555, 572, 539, 509, 472, 563, 506, 510, 511, 575,
	0, 0, 0, 463, 356, 357, 0, 335, 283, 284,
	632, 321, 386, 577, 610, 611, 502, 0, 564, 503,
	512, 313, 536, 548, 547, 382, 462, 0, 559, 562,
	492, 631, 0, 556, 571, 635, 570, 627, 392, 0,
	412, 568, 515, 0, 560, 534, 0, 561, 530, 565,
	0, 504, 0, 419, 444, 456, 473, 476, 505, 590,
	591, 592, 288, 475, 594, 595, 596, 597, 598, 599,
	600, 593, 447, 537, 514, 540, 455, 517, 516, 0,
	0, 551, 471, 552, 553, 376, 377, 378, 379, 339,
	578, 306, 474, 402, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 541, 640, 0, 601,
	602, 0, 0, 468, 469, 334, 341, 487, 343, 305,
	391, 336, 453, 350, 0, 480, 545, 481, 604, 607,
	605, 606, 383, 346, 347, 416, 351, 361, 405, 452,
	389, 410, 303, 443, 417, 365, 531, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 585, 584, 583, 582, 581,
	580, 579, 0, 0, 528, 430, 315, 277, 311, 312,
	319, 628, 625, 434, 629, 630, 0, 285, 508, 359,
	0, 401, 333, 573, 574, 0, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 278, 241, 242, 243, 244,
	245, 246, 247, 250, 251, 252, 253, 254, 255, 256,
	257, 576, 248, 249, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 0, 0,
	0, 279, 280, 281, 282, 0, 0, 273, 274, 275,
	276, 0, 0, 0, 459, 460, 461, 483, 0, 445,
	507, 626, 0, 0, 0, 0, 0, 0, 0, 557,
	569, 603, 0, 613, 614, 616, 618, 617, 620, 422,
	0, 621, 0, 633, 498, 499, 634, 609, 388, 0,
	513, 546, 535, 619, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 0, 358, 550,
	532, 542, 533, 518, 519, 520, 527, 338, 521, 522,
	523, 493, 524, 494, 525, 526, 0, 549, 500, 418,
	372, 567, 566, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 301,
	220, 495, 615, 497, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 424, 441, 302,
	414, 454, 307, 421, 297, 387, 411, 0, 0, 293,
	439, 420, 369, 348, 349, 292, 0, 406, 326, 340,
	323, 385, 0, 438, 466, 322, 457, 0, 449, 295,
	0, 448, 384, 435, 440, 370, 364, 0, 294, 437,
	368, 363, 352, 330, 482, 353, 354, 344, 396, 362,
	397, 345, 374, 373, 375, 0, 0, 0, 0, 0,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 608, 0, 0, 612, 0,
	451, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	355, 0, 0, 0, 467, 0, 409, 390, 636, 0,
	0, 407, 360, 436, 398, 442, 425, 450, 403, 399,
	286, 426, 325, 371, 298, 300, 320, 327, 329, 331,
	332, 380, 381, 393, 413, 427, 428, 429, 324, 308,
	408, 309, 342, 310, 287, 316, 314, 317, 415, 318,
	289, 394, 433, 0, 337, 404, 367, 290, 366, 395,
	432, 431, 299, 458, 464, 465, 554, 0, 470, 637,
	638, 639, 479, 0, 400, 484, 485, 486, 488, 489,
	490, 491, 555, 572, 539, 509, 472, 563, 506, 510,
	511, 575, 0, 0, 0, 463, 356, 357, 0, 335,
	283, 284, 632, 321, 386, 577, 610, 611, 502, 0,
	564, 503, 512, 313, 536, 548, 547, 382, 462, 0,
	559, 562, 492, 631, 0, 556, 571, 635, 570, 627,
	392, 0, 412, 568, 515, 0, 560, 534, 0, 561,
	530, 565, 0, 504, 0, 419, 444, 456, 473, 476,
	505, 590, 591, 592, 288, 475, 594, 595, 596, 597,
	598, 599, 600, 593, 447, 537, 514, 540, 455, 517,
	516, 0, 0, 551, 471, 552, 553, 376, 377, 378,
	379, 339, 578, 306, 474, 402, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 544, 541, 640,
	0, 601, 602, 0, 0, 468, 469, 334, 341, 487,
	343, 305, 391, 336, 453, 350, 0, 480, 545, 481,
	604, 607, 605, 606, 383, 346, 347, 416, 351, 361,
	405, 452, 389, 410, 303, 443, 417, 365, 531, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 585, 584, 583,
	582, 581, 580, 579, 950, 0, 528, 430, 315, 277,
	311, 312, 319, 628, 625, 434, 629, 630, 0, 285,
	508, 359, 0, 401, 333, 573, 574, 0, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 278, 241, 242,
	243, 244, 245, 246, 247, 250, 251, 252, 253, 254,
	255, 256, 257, 576, 248, 249, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	0, 0, 0, 279, 280, 281, 282, 0, 0, 273,
	274, 275, 276, 0, 0, 0, 459, 460, 461, 483,
	0, 445, 507, 626, 0, 0, 0, 0, 0, 0,
	0, 557, 569, 603, 0, 613, 614, 616, 618, 617,
	620, 422, 0, 621, 0, 633, 498, 499, 634, 609,
	388, 0, 513, 546, 535, 619, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 0, 0,
	358, 550, 532, 542, 533, 518, 519, 520, 527, 338,
	521, 522, 523, 493, 524, 494, 525, 526, 0, 549,
	500, 418, 372, 567, 566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 301, 220, 495, 615, 497, 496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 424,
	441, 302, 414, 454, 307, 421, 297, 387, 411, 0,
	0, 293, 439, 420, 369, 348, 349, 292, 0, 406,
	326, 340, 323, 385, 0, 438, 466, 322, 457, 0,
	449, 295, 0, 448, 384, 435, 440, 370, 364, 0,
	294, 437, 368, 363, 352, 330, 482, 353, 354, 344,
	396, 362, 397, 345, 374, 373, 375, 0, 0, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 0, 0,
	612, 0, 451, 0, 0, 0, 0, 0, 0, 423,
	0, 0, 355, 0, 0, 0, 467, 0, 409, 390,
	636, 0, 0, 407, 360, 436, 398, 442, 425, 450,
	403, 399, 286, 426, 325, 371, 298, 300, 320, 327,
	329, 331, 332, 380, 381, 393, 413, 427, 428, 429,
	324, 308, 408, 309, 342, 310, 287, 316, 314, 317,
	415, 318, 289, 394, 433, 0, 337, 404, 367, 290,
	366, 395, 432, 431, 299, 458, 464, 465, 554, 0,
	470, 637, 638, 639, 479, 0, 400, 484, 485, 486,
	488, 489, 490, 491, 555, 572, 539, 509, 472, 563,
	506, 510, 511, 575, 0, 0, 0, 463, 356, 357,
	0, 335, 283, 284, 632, 321, 386, 577, 610, 611,
	502, 0, 564, 503, 512, 313, 536, 548, 547, 382,
	462, 0, 559, 562, 492, 631, 0, 556, 571, 635,
	570, 627, 392, 0, 412, 568, 515, 0, 560, 534,
	0, 561, 530, 565, 0, 504, 0, 419, 444, 456,
	473, 476, 505, 590, 591, 592, 288, 475, 594, 595,
	596, 597, 598, 599, 600, 593, 447, 537, 514, 540,
	455, 517, 516, 0, 0, 551, 471, 552, 553, 376,
	377, 378, 379, 339, 578, 306, 474, 402, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 544,
	541, 640, 0, 601, 602, 0, 0, 468, 469, 334,
	341, 487, 343, 305, 391, 336, 453, 350, 0, 480,
	545, 481, 604, 607, 605, 606, 383, 346, 347, 416,
	351, 361, 405, 452, 389, 410, 303, 443, 417, 365,
	531, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 585,
	584, 583, 582, 581, 580, 579, 0, 0, 528, 430,
	315, 277, 311, 312, 319, 628, 625, 434, 629, 630,
	0, 285, 508, 359, 0, 401, 333, 573, 574, 0,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 278,
	241, 242, 243, 244, 245, 246, 247, 250, 251, 252,
	253, 254, 255, 256, 257, 576, 248, 249, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 0, 0, 0, 279, 280, 281, 282, 0,
	0, 273, 274, 275, 276, 0, 0, 0, 459, 460,
	461, 483, 0, 445, 507, 626, 0, 0, 0, 0,
	0, 0, 0, 557, 569, 603, 0, 613, 614, 616,
	618, 617, 620, 422, 0, 621, 0, 633, 498, 499,
	634, 609, 388, 0, 513, 546, 535, 619, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	0, 0, 358, 550, 532, 542, 533, 518, 519, 520,
	527, 338, 521, 522, 523, 493, 524, 494, 525, 526,
	0, 549, 500, 418, 372, 567, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 301, 220, 495, 615, 497, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 424, 1487, 302, 414, 454, 307, 421, 297, 387,
	411, 0, 0, 293, 439, 420, 369, 348, 349, 292,
	0, 406, 326, 340, 323, 385, 0, 438, 466, 322,
	457, 0, 449, 295, 0, 448, 384, 435, 440, 370,
	364, 0, 294, 437, 368, 363, 352, 330, 482, 353,
	354, 344, 396, 362, 397, 345, 374, 373, 375, 0,
	0, 0, 0, 0, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 608,
	0, 0, 612, 0, 451, 0, 0, 0, 0, 0,
	0, 423, 0, 0, 355, 0, 0, 0, 467, 0,
	409, 390, 636, 0, 0, 407, 360, 436, 398, 442,
	425, 450, 403, 399, 286, 426, 325, 371, 298, 300,
	320, 327, 329, 331, 332, 380, 381, 393, 413, 427,
	428, 429, 324, 308, 408, 309, 342, 310, 287, 316,
	314, 317, 415, 318, 289, 394, 433, 0, 337, 404,
	367, 290, 366, 395, 432, 431, 299, 458, 464, 465,
	554, 0, 470, 637, 638, 639, 479, 0, 400, 484,
	485, 486, 488, 489, 490, 491, 555, 572, 539, 509,
	472, 563, 506, 510, 511, 575, 0, 0, 0, 463,
	356, 357, 0, 335, 283, 284, 632, 321, 386, 577,
	610, 611, 502, 0, 564, 503, 512, 313, 536, 548,
	547, 382, 462, 0, 559, 562, 492, 631, 0, 556,
	571, 635, 570, 627, 392, 0, 412, 568, 515, 0,
	560, 534, 0, 561, 530, 565, 0, 504, 0, 419,
	444, 456, 473, 476, 505, 590, 591, 592, 288, 475,
	594, 595, 596, 597, 598, 599, 600, 593, 447, 537,
	514, 540, 455, 517, 516, 0, 0, 551, 471, 552,
	553, 376, 377, 378, 379, 339, 578, 306, 474, 402,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 544, 541, 640, 0, 601, 602, 0, 0, 468,
	469, 334, 341, 487, 343, 305, 391, 336, 453, 350,
	0, 480, 545, 481, 604, 607, 605, 606, 383, 346,
	347, 416, 351, 361, 405, 452, 389, 410, 303, 443,
	417, 365, 531, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 585, 584, 583, 582, 581, 580, 579, 0, 0,
	528, 430, 315, 277, 311, 312, 319, 628, 625, 434,
	629, 630, 0, 285, 508, 359, 0, 401, 333, 573,
	574, 0, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 278, 241, 242, 243, 244, 245, 246, 247, 250,
	251, 252, 253, 254, 255, 256, 257, 576, 248, 249,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 0, 0, 0, 279, 280, 281,
	282, 0, 0, 273, 274, 275, 276, 0, 0, 0,
	459, 460, 461, 483, 0, 445, 507, 626, 0, 0,
	0, 0, 0, 0, 0, 557, 569, 603, 0, 613,
	614, 616, 618, 617, 620, 422, 0, 621, 0, 633,
	498, 499, 634, 609, 388, 0, 513, 546, 535, 619,
	501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 0, 0, 358, 550, 532, 542, 533, 518,
	519, 520, 527, 338, 521, 522, 523, 493, 524, 494,
	525, 526, 0, 549, 500, 418, 372, 567, 566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 301, 220, 495, 615, 497,
	496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 424, 1485, 302, 414, 454, 307, 421,
	297, 387, 411, 0, 0, 293, 439, 420, 369, 348,
	349, 292, 0, 406, 326, 340, 323, 385, 0, 438,
	466, 322, 457, 0, 449, 295, 0, 448, 384, 435,
	440, 370, 364, 0, 294, 437, 368, 363, 352, 330,
	482, 353, 354, 344, 396, 362, 397, 345, 374, 373,
	375, 0, 0, 0, 0, 0, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 0, 0, 612, 0, 451, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 355, 0, 0, 0,
	467, 0, 409, 390, 636, 0, 0, 407, 360, 436,
	398, 442, 425, 450, 403, 399, 286, 426, 325, 371,
	298, 300, 320, 327, 329, 331, 332, 380, 381, 393,
	413, 427, 428, 429, 324, 308, 408, 309, 342, 310,
	287, 316, 314, 317, 415, 318, 289, 394, 433, 0,
	337, 404, 367, 290, 366, 395, 432, 431, 299, 458,
	464, 465, 554, 0, 470, 637, 638, 639, 479, 0,
	400, 484, 485, 486, 488, 489, 490, 491, 555, 572,
	539, 509, 472, 563, 506, 510, 511, 575, 0, 0,
	0, 463, 356, 357, 0, 335, 283, 284, 632, 321,
	386, 577, 610, 611, 502, 0, 564, 503, 512, 313,
	536, 548, 547, 382, 462, 0, 559, 562, 492, 631,
	0, 556, 571, 635, 570, 627, 392, 0, 412, 568,
	515, 0, 560, 534, 0, 561, 530, 565, 0, 504,
	0, 419, 444, 456, 473, 476, 505, 590, 591, 592,
	288, 475, 594, 595, 596, 597, 598, 599, 600, 593,
	447, 537, 514, 540, 455, 517, 516, 0, 0, 551,
	471, 552, 553, 376, 377, 378, 379, 339, 578, 306,
	474, 402, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 544, 541, 640, 0, 601, 602, 0,
	0, 468, 469, 334, 341, 487, 343, 305, 391, 336,
	453, 350, 0, 480, 545, 481, 604, 607, 605, 606,
	383, 346, 347, 416, 351, 361, 405, 452, 389, 410,
	303, 443, 417, 365, 531, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 585, 584, 583, 582, 581, 580, 579,
	0, 0, 528, 430, 315, 277, 311, 312, 319, 628,
	625, 434, 629, 630, 0, 285, 508, 359, 0, 401,
	333, 573, 574, 0, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 278, 241, 242, 243, 244, 245, 246,
	247, 250, 251, 252, 253, 254, 255, 256, 257, 576,
	248, 249, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 0, 0, 0, 279,
	280, 281, 282, 0, 0, 273, 274, 275, 276, 0,
	0, 0, 459, 460, 461, 483, 0, 445, 507, 626,
	0, 0, 0, 0, 0, 0, 0, 557, 569, 603,
	0, 613, 614, 616, 618, 617, 620, 422, 0, 621,
	0, 633, 498, 499, 634, 609, 388, 0, 513, 546,
	535, 619, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 0, 0, 358, 550, 532, 542,
	533, 518, 519, 520, 527, 338, 521, 522, 523, 493,
	524, 494, 525, 526, 0, 549, 500, 418, 372, 567,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 301, 220, 495,
	615, 497, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 424, 441, 302, 414, 454,
	307, 421, 297, 387, 411, 0, 0, 293, 439, 420,
	369, 348, 349, 292, 0, 406, 326, 340, 323, 385,
	0, 438, 466, 322, 457, 0, 449, 295, 0, 448,
	384, 435, 440, 370, 364, 0, 294, 437, 368, 363,
	352, 330, 482, 353, 354, 344, 396, 362, 397, 345,
	374, 373, 375, 0, 0, 0, 0, 0, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 608, 0, 0, 612, 0, 451, 0,
	0, 0, 0, 0, 0, 423, 0, 0, 355, 0,
	0, 0, 467, 0, 409, 390, 636, 0, 0, 407,
	360, 436, 398, 442, 425, 450, 403, 399, 286, 426,
	325, 371, 298, 300, 725, 327, 329, 331, 332, 380,
	381, 393, 413, 427, 428, 429, 324, 308, 408, 309,
	342, 310, 287, 316, 314, 317, 415, 318, 289, 394,
	433, 0, 337, 404, 367, 290, 366, 395, 432, 431,
	299, 458, 464, 465, 554, 0, 470, 637, 638, 639,
	479, 0, 400, 484, 485, 486, 488, 489, 490, 491,
	555, 572, 539, 509, 472, 563, 506, 510, 511, 575,
	0, 0, 0, 463, 356, 357, 0, 335, 283, 284,
	632, 321, 386, 577, 610, 611, 502, 0, 564, 503,
	512, 313, 536, 548, 547, 382, 462, 0, 559, 562,
	492, 631, 0, 556, 571, 635, 570, 627, 392, 0,
	412, 568, 515, 0, 560, 534, 0, 561, 530, 565,
	0, 504, 0, 419, 444, 456, 473, 476, 505, 590,
	591, 592, 288, 475, 594, 595, 596, 597, 598, 599,
	600, 593, 447, 537, 514, 540, 455, 517, 516, 0,
	0, 551, 471, 552, 553, 376, 377, 378, 379, 339,
	578, 306, 474, 402, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 541, 640, 0, 601,
	602, 0, 0, 468, 469, 334, 341, 487, 343, 305,
	391, 336, 453, 350, 0, 480, 545, 481, 604, 607,
	605, 606, 383, 346, 347, 416, 351, 361, 405, 452,
	389, 410, 303, 443, 417, 365, 531, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 585, 584, 583, 582, 581,
	580, 579, 0, 0, 528, 430, 315, 277, 311, 312,
	319, 628, 625, 434, 629, 630, 0, 285, 508, 359,
	0, 401, 333, 573, 574, 0, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 278, 241, 242, 243, 244,
	245, 246, 247, 250, 251, 252, 253, 254, 255, 256,
	257, 576, 248, 249, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 0, 0,
	0, 279, 280, 281, 282, 0, 0, 273, 274, 275,
	276, 0, 0, 0, 459, 460, 461, 483, 0, 445,
	507, 626, 0, 0, 0, 0, 0, 0, 0, 557,
	569, 603, 0, 613, 614, 616, 618, 617, 620, 422,
	0, 621, 0, 633, 498, 499, 634, 609, 388, 0,
	513, 546, 535, 619, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 0, 358, 550,
	532, 542, 533, 518, 519, 520, 527, 338, 521, 522,
	523, 493, 524, 494, 525, 526, 0, 549, 500, 418,
	372, 567, 566, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 301,
	220, 495, 615, 497, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 424, 441, 302,
	414, 454, 307, 421, 297, 387, 411, 0, 0, 293,
	439, 420, 369, 348, 349, 292, 0, 406, 326, 340,
	323, 385, 0, 438, 466, 322, 457, 0, 449, 295,
	0, 448, 384, 435, 440, 370, 364, 0, 294, 437,
	368, 363, 352, 330, 482, 353, 354, 344, 396, 362,
	397, 345, 374, 373, 375, 0, 0, 0, 0, 0,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 608, 0, 0, 612, 0,
	451, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	355, 0, 0, 0, 467, 0, 409, 390, 636, 0,
	0, 407, 360, 436, 398, 442, 425, 450, 682, 399,
	286, 426, 325, 371, 298, 300, 320, 327, 329, 331,
	332, 380, 381, 393, 413, 427, 428, 429, 324, 308,
	408, 309, 342, 310, 287, 316, 314, 317, 415, 318,
	289, 394, 433, 0, 337, 404, 367, 290, 366, 395,
	432, 431, 299, 458, 464, 465, 554, 0, 470, 637,
	638, 639, 479, 0, 400, 484, 485, 486, 488, 489,
	490, 491, 555, 572, 539, 509, 472, 563, 506, 510,
	511, 575, 0, 0, 0, 463, 356, 357, 0, 335,
	283, 284, 632, 321, 386, 577, 610, 611, 502, 0,
	564, 503, 512, 313, 536, 548, 547, 382, 462, 0,
	559, 562, 492, 631, 0, 556, 571, 635, 570, 627,
	392, 0, 412, 568, 515, 0, 560, 534, 0, 561,
	530, 565, 0, 504, 0, 419, 444, 456, 473, 476,
	505, 590, 591, 592, 288, 475, 594, 595, 596, 597,
	598, 599, 683, 593, 447, 537, 514, 540, 455, 517,
	516, 0, 0, 551, 471, 552, 553, 376, 377, 378,
	379, 339, 578, 306, 474, 402, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 544, 541, 640,
	0, 601, 602, 0, 0, 468, 469, 334, 341, 487,
	343, 305, 391, 336, 453, 350, 0, 480, 545, 481,
	604, 607, 605, 606, 383, 346, 347, 416, 351, 361,
	405, 452, 389, 410, 303, 443, 417, 365, 531, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 585, 584, 583,
	582, 581, 580, 579, 0, 0, 528, 430, 315, 277,
	311, 312, 319, 628, 625, 434, 629, 630, 0, 285,
	508, 359, 0, 401, 333, 573, 574, 0, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 278, 241, 242,
	243, 244, 245, 246, 247, 250, 251, 252, 253, 254,
	255, 256, 257, 576, 248, 249, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	0, 0, 0, 279, 280, 281, 282, 0, 0, 273,
	274, 275, 276, 0, 0, 0, 459, 460, 461, 483,
	0, 445, 507, 626, 0, 0, 0, 0, 0, 0,
	0, 557, 569, 603, 0, 613, 614, 616, 618, 617,
	620, 422, 0, 621, 0, 633, 498, 499, 634, 609,
	704, 703, 710, 700, 0, 0, 0, 0, 0, 0,
	0, 0, 707, 708, 0, 709, 713, 1980, 0, 694,
	704, 703, 710, 700, 197, 0, 0, 0, 0, 718,
	0, 0, 707, 708, 0, 709, 713, 0, 0, 694,
	0, 0, 0, 0, 0, 0, 3536, 0, 0, 718,
	0, 0, 1983, 0, 0, 1980, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 722, 0, 0, 724, 0, 0,
	0, 0, 723, 0, 0, 0, 0, 0, 0, 0,
	1983, 0, 0, 0, 722, 193, 0, 724, 0, 0,
	0, 0, 723, 0, 0, 1957, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3706, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1957, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1980, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1973, 0, 0, 0, 0, 0, 0, 0, 0,
	695, 697, 696, 0, 0, 1983, 0, 0, 0, 0,
	0, 702, 0, 0, 0, 0, 0, 0, 0, 0,
	695, 697, 696, 706, 0, 0, 0, 0, 0, 0,
	721, 702, 0, 0, 0, 1961, 0, 699, 0, 0,
	0, 689, 0, 706, 0, 0, 1967, 0, 0, 0,
	721, 0, 0, 0, 0, 0, 0, 699, 1957, 0,
	0, 0, 0, 0, 0, 0, 1955, 1989, 0, 0,
	1956, 1958, 1960, 1961, 1962, 1963, 1964, 1968, 1969, 1970,
	1972, 1975, 1976, 1977, 1967, 0, 0, 0, 0, 0,
	0, 1965, 1974, 1966, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1955, 1989, 0, 0, 1956, 1958,
	1960, 0, 1962, 1963, 1964, 1968, 1969, 1970, 1972, 1975,
	1976, 1977, 3677, 0, 0, 0, 1973, 1981, 0, 1965,
	1974, 1966, 0, 0, 0, 0, 0, 0, 0, 0,
	1980, 0, 0, 0, 0, 0, 0, 0, 0, 701,
	705, 711, 0, 712, 714, 0, 0, 715, 716, 717,
	0, 0, 719, 720, 0, 1981, 0, 0, 0, 701,
	705, 711, 1978, 712, 714, 1983, 0, 715, 716, 717,
	0, 0, 719, 720, 0, 0, 0, 0, 0, 1954,
	0, 0, 0, 0, 0, 0, 1953, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1961, 0,
	1978, 0, 0, 0, 0, 0, 0, 0, 0, 1967,
	1971, 0, 0, 0, 0, 0, 0, 1954, 1957, 1959,
	0, 0, 0, 0, 1953, 0, 0, 0, 0, 1955,
	1989, 0, 0, 1956, 1958, 1960, 0, 1962, 1963, 1964,
	1968, 1969, 1970, 1972, 1975, 1976, 1977, 0, 1971, 0,
	0, 0, 0, 0, 1965, 1974, 1966, 1959, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1973, 0, 0, 0,
	1981, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 698,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3540, 698,
	0, 0, 0, 0, 0, 1978, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1954, 0, 0, 0, 0, 0, 0, 1953,
	0, 0, 0, 0, 0, 0, 3544, 0, 1961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1967,
	0, 0, 0, 1971, 0, 0, 0, 0, 0, 0,
	0, 0, 1959, 0, 0, 0, 0, 0, 0, 1955,
	1989, 0, 0, 1956, 1958, 1960, 0, 1962, 1963, 1964,
	1968, 1969, 1970, 1972, 1975, 1976, 1977, 0, 0, 0,
	0, 0, 0, 0, 1965, 1974, 1966, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1981, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3544, 0, 0, 0, 1978, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1954, 0, 0, 0, 0, 0, 0, 1953,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1971, 0, 0, 0, 0, 0, 0,
	0, 0, 1959, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3544,
}

var yyPact = [...]int{
	3940, -1000, -1000, -1000, -318, 14261, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 47867, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 430, 47867,
	-316, 29829, 46001, -1000, -1000, 2653, -1000, 46623, 16139, 47867,
	511, 509, 47867, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 937, -1000, 50355,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 886, 50987,
	49733, 11127, -212, -1000, 1329, -36, 2561, 466, -202, -204,
	-289, 1117, 1135, 1150, 1150, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 227, 964,
	47245, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 265, 261, 936, 964, 21119,
	124, 121, 1329, 479, -88, 274, -1000, 1184, 3990, 207,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 11127, 11127, 14261, -375, 14261, 11127, 47867, 47867, -1000,
	-1000, -1000, -1000, -316, 46623, 886, 50987, 11127, 2561, 466,
	-202, -204, -289, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -88, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 121, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5011, -1000, 1571, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2343, 3033, 1570, 2547, 801, 46001, 47867, -1000, 136,
	801, -1000, -1000, -1000, 1329, 3461, -1000, 47867, 47867, 203,
	1877, -1000, 495, 472, 391, 417, 325, 1569, -1000, -1000,
	-1000, -1000, -1000, -1000, 691, 3430, -1000, 47867, 47867, 3049,
	47867, -1000, 2295, 750, -1000, 51007, 3249, 1464, 990, 3074,
	-1000, -1000, 3032, -1000, 334, 615, 341, 626, 429, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 351, -1000, 3302, -1000,
	-1000, 323, -1000, -1000, 313, -1000, -1000, -1000, 115, -1000,
	-1000, -1000, -1000, -1000, -1000, -23, -1000, -1000, 1156, 2079,
	11127, 2318, -1000, 2829, 1600, -1000, -1000, -1000, 6746, 13002,
	13002, 13002, 13002, 47867, -1000, -1000, 2862, 11127, 3031, 3028,
	3022, 3019, -1000, -1000, -1000, -1000, -1000, -1000, 1562, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1984, -1000,
	-1000, -1000, 13627, -1000, 3018, 3015, 3011, 3009, 3007, 3000,
	2999, 2996, 2995, 2994, 2992, 2991, 2988, 2987, 2729, 15507,
	2986, 2546, 2544, 2984, 2983, 2972, 2542, 2969, 2968, 2967,
	2729, 2729, 2966, 2962, 2961, 2957, 2956, 2955, 2950, 2949,
	2948, 2947, 2932, 2931, 2928, 2927, 2926, 2925, 2923, 2921,
	2918, 2913, 2912, 2909, 2908, 2902, 2901, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1350, -1000, 2900, 3454, 2795, -1000, 3358, 3343, 3310, 3292,
	-262, 2877, 2227, -1000, -1000, 107, 3429, 47867, -284, 47867,
	416, -101, -102, -103, -104, -1000, -71, -1000, -1000, 1100,
	-1000, 1053, -1000, 881, 881, 881, 47867, 47867, 214, 985,
	881, 881, 881, 881, 881, 907, 881, 3345, 935, 934,
	926, 925, 881, -47, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1871, 1870, 3138, 1026, -1000, -1000, -1000, -1000, 1444,
	47867, -1000, 2808, 416, 1771, 1771, 3407, 3407, 3333, 773,
	768, 756, 1771, 575, -1000, 1801, 1801, 1801, 1801, 1771,
	456, 812, 3351, 3351, 125, 1801, 50, 1771, 1771, 50,
	1771, 1771, -1000, 1827, 219, -271, -1000, -1000, -1000, -1000,
	1801, 1801, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3296,
	3291, 886, 886, 47867, 886, 192, 47867, 886, 886, 886,
	47867, 890, 91, 49111, 48489, 2548, 2295, 744, 720, 1446,
	1843, -1000, 1805, 47867, 47867, 1805, 1805, 24231, 23609, -1000,
	47867, -1000, 3454, 2795, 2726, 1568, 2725, 2795, -108, 416,
	886, 886, 886, 886, 886, 295, 886, 886, 886, 886,
	886, 47867, 47867, 45379, 886, 886, 886, 886, 9246, 9246,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14261,
	2193, 2161, 199, -8, -300, 275, -1000, -1000, 47867, 3218,
	291, -1000, -1000, -1000, 2741, -1000, 2794, 2794, 2794, 2794,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2794, 2794, 2802, 2872, -1000, -1000, 2792, 2792, 2792, 2741,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2796, 2796, 2801, 2801, 2796,
	47867, -122, -1000, -1000, 11127, 47867, 3237, 410, 2871, 801,
	-1000, -1000, 47867, 173, 413, 3454, 3230, 3351, 3399, -1000,
	-1000, 1557, 2226, 2541, -1000, 325, -1000, 405, 325, -1000,
	553, 553, 1759, -1000, 1078, -1000, -1000, -1000, -1000, -1000,
	-1000, 47867, -23, 438, -1000, -1000, 2525, 2870, -1000, 644,
	1328, 1467, -1000, 319, 4481, 38537, 2295, 38537, 47867, -1000,
	-1000, -1000, -1000, -1000, -1000, 93, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	329, -1000, 11127, 11127, 11127, 11127, 11127, -1000, 930, 12377,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 13002, 13002, 13002,
	13002, 13002, 13002, 13002, 13002, 13002, 13002, 13002, 13002, 2859,
	1884, 13002, 13002, 13002, 13002, 26719, 1568, 3105, 1445, 310,
	1600, 1600, 1600, 1600, 11127, -1000, 1895, 2079, 11127, 11127,
	11127, 11127, 47867, -1000, -1000, 4769, 11127, 11127, 4961, 11127,
	3279, 11127, 11127, 11127, 2722, 5487, 47867, 11127, -1000, 2721,
	2716, -1000, -1000, 2082, 11127, -1000, -1000, 11127, -1000, -1000,
	11127, 13002, 11127, -1000, 11127, 11127, 11127, -1000, -1000, 1609,
	3279, 3279, 3279, 1854, 11127, 11127, 3279, 3279, 3279, 1839,
	3279, 3279, 3279, 3279, 3279, 3279, 3279, 3279, 3279, 3279,
	2715, 2714, 2711, 10502, 3351, -212, -1000, 8621, 3230, 3351,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-267, 2867, 47867, 2539, 2537, -325, 176, 473, 47867, 1153,
	-1000, -1000, 47867, 2211, 47867, 2210, 47867, 71, 1073, 1059,
	1062, -1000, 47867, 1921, 47867, 47867, 3269, -1000, 2866, 47867,
	881, 881, 881, -1000, 43513, 38537, 47867, 47867, 2295, 47867,
	47867, 47867, 881, 881, 881, 881, 47867, -1000, 3173, 38537,
	3145, 890, -1000, 47867, 1444, 3266, 47867, -1000, 3407, 13002,
	13002, -1000, -1000, 11127, -1000, 44757, 1801, 1771, 1771, -1000,
	-1000, 47867, -1000, -1000, -1000, 1801, 47867, 1801, 1801, 3407,
	1801, -1000, -1000, -1000, 1771, 1771, -1000, -1000, 11127, -1000,
	-1000, 1801, 1801, -1000, -1000, 3407, 47867, 86, 3407, 3407,
	112, -1000, -1000, -1000, 1771, 47867, 47867, 881, 47867, -1000,
	47867, 47867, -1000, -1000, 47867, 47867, 4409, 47867, 43513, 44135,
	3289, -1000, 38537, 47867, 47867, 1439, -1000, 904, 36049, -1000,
	1407, -1000, -7, -1000, 64, 91, 1805, 91, 1805, 903,
	-1000, 633, 699, 22365, 559, 38537, 6112, -1000, -1000, 1805,
	1805, 6112, 6112, 1606, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1438, -1000, 340, 3351, -1000, -1000, -1000, -1000, -1000,
	2201, -1000, 47867, 43513, 38537, 2295, 47867, 886, 47867, 47867,
	47867, 47867, 47867, -1000, 2865, 1555, -1000, 3245, 47867, 47867,
	47867, 47867, 1411, -1000, -1000, 19249, 1554, 1411, -1000, 1916,
	-1000, 11127, 14261, -248, 11127, 14261, 14261, 11127, 14261, -1000,
	11127, 283, -1000, -1000, -1000, -1000, 2199, -1000, 2197, -1000,
	-1000, -1000, -1000, -1000, 2536, 2536, -1000, 2196, -1000, -1000,
	-1000, -1000, 2194, -1000, -1000, 2192, -1000, -1000, -1000, -1000,
	-154, 2707, 1156, -1000, 2531, 3073, -213, -1000, 20497, 47867,
	47867, 410, -345, 1869, 1866, 1861, -1000, -213, -1000, 19873,
	47867, 3351, -1000, -218, 3230, 11127, 47867, -1000, 3328, -1000,
	-1000, 325, -1000, -1000, -1000, 553, 425, -1000, -1000, -1000,
	-1000, -1000, -1000, 1552, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 426, -90, -94, 1431, -1000, 47867,
	-1000, -1000, 319, 38537, 40403, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 253, -1000, -1000, 182, -1000, 901, 241, 1749,
	-1000, -1000, 208, 204, 206, 965, 2079, -1000, 1914, 1914,
	1926, -1000, 772, -1000, -1000, -1000, -1000, 2862, -1000, -1000,
	-1000, 2498, 2059, -1000, 1773, 1773, 1612, 1612, 1612, 1612,
	1612, 1704, 1704, -1000, -1000, -1000, 6746, 2859, 13002, 13002,
	13002, 13002, 959, 959, 3967, 3914, -1000, -1000, -1000, -1000,
	11127, 202, 1904, -1000, 11127, 2425, 1406, 2394, 1368, 1550,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2706, 2704, 2444, 3428, 2703, 11127, -1000, -1000, 1740, 1738,
	1737, -1000, 2243, 9877, -1000, -1000, -1000, 2702, 1547, 2697,
	-1000, -1000, -1000, 2688, 1735, 1314, 2687, 2031, 2686, 2683,
	2682, 2681, 1428, 11127, 11127, 11127, 11127, 2679, 1726, 1717,
	11127, 11127, 11127, 11127, 2678, 11127, 11127, 11127, 11127, 11127,
	11127, 11127, 11127, 11127, 11127, 132, 132, 132, 1425, 1420,
	-1000, -1000, 1712, -1000, 2079, -1000, -1000, 3230, -1000, 2858,
	2190, 1414, -1000, -1000, -311, 2481, 47867, 47867, 168, 47867,
	2530, -286, 47867, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1109, 1038, 1090, 2529, 3244, 3325, 848, 47867, 1170, 2857,
	47867, 47867, 47867, 276, -1000, -1000, 1376, -1000, 241, -34,
	513, 1196, 3046, 3425, -130, 47867, 47867, 47867, 47867, 3265,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42891, -1000,
	2856, 1711, -1000, -1000, 1600, 1600, 2079, 3039, 47867, 47867,
	3407, 3407, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1801,
	3407, 3407, 1532, 1771, 1801, -1000, -1000, 1801, -345, -1000,
	1801, -1000, -345, 1546, -345, 47867, -1000, -1000, -1000, 3262,
	2808, 1409, -1000, -1000, -1000, 3398, 1433, 835, 835, 1072,
	505, 3395, 18005, -1000, 1719, 1133, 899, 3194, 332, -1000,
	1719, -151, 821, 1719, 1719, 1719, 1719, 1719, 1719, 1719,
	677, 671, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719,
	1719, 1719, 1719, 1125, 1719, 1719, 1719, 1719, 1719, -1000,
	1719, 2850, 496, -1000, -1000, -1000, -1000, -1000, -1000, 798,
	606, 271, 3286, 364, -1000, 358, 1376, 3283, 419, 47867,
	47867, 3263, 1300, -1000, -1000, -1000, -1000, -1000, 27341, 27341,
	21743, 27341, -1000, 197, 91, 74, -1000, -1000, 1407, 6112,
	1407, 6112, 2189, -1000, -1000, 898, -1000, -1000, 1196, -1000,
	47867, 47867, -1000, -1000, 2847, 1859, -1000, -1000, 15507, -1000,
	6112, 6112, -1000, -1000, 29207, 47867, -1000, -27, -1000, -13,
	3230, -1000, 1169, -1000, -1000, 1405, 1196, 3072, 47867, 1169,
	1169, 1169, -1000, -1000, 16761, 47867, 47867, -1000, -1000, -1000,
	-1000, 3407, 9246, -1000, 36049, -1000, -1000, 42269, -1000, 41647,
	3407, 1890, -1000, 14261, 2141, 196, -1000, 263, -305, 195,
	2120, 185, 2079, -1000, -1000, 2676, 2672, 1710, -1000, 1683,
	2662, 1681, 1672, 2186, -1000, 37, -1000, 3220, 1199, -1000,
	2836, -1000, 1670, 3130, -1000, 1404, -1000, 1857, 1661, -1000,
	-1000, -1000, 11127, 41025, 11127, 1199, 1659, 3127, 1404, 3230,
	2528, -1000, 1400, -1000, 2209, 1540, 201, -1000, -1000, -1000,
	47867, 886, 2525, 1658, 40403, 1210, -1000, 896, 1537, 1531,
	-1000, 38537, 326, 38537, -1000, 38537, -1000, -1000, 392, -1000,
	47867, 3226, -1000, -1000, -1000, 2481, 1851, -339, 47867, -1000,
	-1000, -1000, -1000, -1000, 1657, -1000, 959, 959, 3967, 2880,
	-1000, 13002, -1000, 13002, 3081, -1000, 1793, -1000, 11127, 2127,
	4899, 11127, 4899, 933, 25475, 47867, -1000, -1000, 11127, 11127,
	-1000, 3067, -1000, -1000, -1000, -1000, 11127, 11127, 2435, -1000,
	47867, -1000, -1000, -1000, -1000, 25475, -1000, 13002, -1000, -1000,
	-1000, -1000, 11127, 1313, 1313, 3047, 1651, 132, 132, 132,
	3029, 3024, 3012, 1640, 132, 2975, 2951, 2875, 2868, 2824,
	2746, 2720, 2671, 2640, 2627, -1000, 2831, -1000, -1000, 1977,
	11752, 8621, -1000, -1000, 322, 1390, 2185, 2515, 128, -1000,
	1844, -1000, 2510, 47867, 47867, 1147, -1000, 47867, 3421, -1000,
	-1000, -1000, 1035, 2508, -1000, 461, 2039, 216, 303, 2661,
	1389, -1000, -1000, 47867, -1000, -1000, -1000, 16761, 2808, 2830,
	2808, 113, 1719, 648, 38537, 705, -1000, 47867, 2123, 1842,
	3069, 761, 3213, 47867, 2822, 411, 2819, 2816, 3261, 490,
	5175, 47867, 1309, -1000, 1517, 3990, -1000, 47867, -1000, 2295,
	-1000, 1771, -1000, -1000, 3407, -1000, -1000, 11127, 11127, 3407,
	1771, 1771, -1000, 1801, -1000, 47867, -1000, -345, 490, 5175,
	3260, 4614, 737, 2654, -1000, 47867, -1000, -1000, -1000, 820,
	-1000, 1058, 881, 47867, 1949, 1058, 1947, 2815, -1000, -1000,
	47867, 47867, 47867, 47867, -1000, -1000, 47867, -1000, 47867, 47867,
	47867, 47867, 47867, 39781, -1000, 47867, 47867, -1000, 47867, 1940,
	47867, 1939, 3200, -1000, 1719, 1719, 1002, -1000, -1000, 602,
	-1000, 39781, 2181, 2178, 2169, 2167, 2507, 2506, 2503, 1719,
	1719, 2163, 2495, 39159, 2494, 1236, 2159, 2151, 2149, 2180,
	2493, 908, -1000, 2492, 2145, 2119, 2114, 47867, 2812, 2391,
	498, -1000, -1000, 2039, 113, 1719, 360, 47867, 1838, 1837,
	648, 506, -38, 22987, -1000, -1000, -1000, 47867, 36049, 36049,
	36049, 36049, 36049, -1000, 3107, 3088, 3096, -1000, 3116, 3097,
	3165, 2873, 47867, 36049, 2808, -1000, 39159, -1000, -1000, -1000,
	1568, 1636, 3446, 1037, 11127, -1000, -1000, -4, 52, -1000,
	-1000, -1000, -1000, 38537, 2490, 559, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3320, 47867, 47867, 829, 2658, 1379, -1000,
	-1000, -1000, 5175, 2794, 2794, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2794, 2794, 2802, -1000, -1000, 2792,
	2792, 2792, 2741, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2796, 2796, 2801, 2801, 2796, -1000, -1000,
	3405, -1000, 1377, -1000, -1000, 1511, -1000, 3405, 1906, -320,
	14261, 1892, 1703, -1000, 11127, 14261, 11127, -251, 344, -253,
	-1000, -1000, -1000, 2488, -1000, -1000, -1000, 2137, -1000, 2136,
	-1000, 183, 194, 1937, -213, 8621, 471, 47867, -213, 47867,
	8621, -1000, 47867, 198, -356, -357, 191, 453, -213, 3320,
	37, 11127, 3190, -1000, -1000, 47867, 2130, -1000, -1000, -1000,
	3419, 38537, 2295, 1638, 37915, -1000, 321, -1000, 252, 599,
	2487, -1000, 924, 126, 2482, 2481, -1000, -1000, -1000, -1000,
	13002, 1600, -1000, -1000, -1000, 2079, 11127, 2650, -1000, 1076,
	1076, 2235, 2649, 2648, -1000, 2794, 2794, -1000, 2741, 2792,
	2741, 1076, 1076, 2646, -1000, 2202, 2565, -1000, 2545, 2489,
	11127, -1000, 2645, 3847, 1391, -55, -182, 132, 132, -1000,
	-1000, -1000, -1000, 132, 132, 132, 132, -1000, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 813, -95,
	-275, -97, -277, -1000, 2643, 1265, -1000, -1000, -1000, -1000,
	-1000, 4961, 1250, 541, 541, 2481, 2477, -1000, 893, 2475,
	1106, 47867, 2474, -287, -1000, 2473, -1000, -1000, 47867, 2471,
	-1000, 597, 47867, 47867, 2443, 2436, 1170, 5175, 2639, 3258,
	17383, 3253, 2250, -1000, -1000, -1000, 28585, 590, -1000, -1000,
	-1000, 662, 480, 2129, 564, -1000, 47867, 521, 3169, 1836,
	2434, 47867, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3213,
	-1000, 988, 460, 34805, 14885, -1000, 421, 47867, -1000, 17383,
	17383, 421, 475, 1860, -1000, 801, 1278, 131, 36049, 47867,
	-1000, 35427, 2638, -1000, 1196, 3407, -1000, 2079, 2079, -345,
	3407, 3407, 1771, -1000, -1000, 475, -1000, 421, -1000, 1722,
	18627, 556, 508, 409, -1000, 669, -1000, -1000, 793, 3225,
	5175, -1000, 47867, -1000, 47867, -1000, 47867, 47867, 881, 11127,
	3225, 47867, 892, -1000, 1144, 464, 424, 799, 799, 1247,
	-1000, 3241, -1000, -1000, 1212, -1000, -1000, -1000, -1000, 47867,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 25475, 25475, 3278,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2432, 2431, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 47867, 1635, -1000, 1810, 2125, 2428,
	2250, 28585, 1809, 1805, 2427, 2423, 590, 2123, 1806, 915,
	47867, -1000, 1193, 47867, 47867, -1000, 1294, -1000, 1788, 3052,
	3068, 3052, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3095,
	-1000, 3089, -1000, -1000, -1000, 1294, -1000, -1000, -1000, -1000,
	-1000, 1037, -1000, 3315, 1058, 1058, 1058, 2635, -1000, -1000,
	-1000, 1210, 2633, -1000, -1000, -1000, 3443, -1000, -1000, -1000,
	-1000, -1000, -1000, 16761, 3210, 3403, 3392, 37293, 3403, -1000,
	-320, 1774, -1000, 1942, 177, 1893, 47867, -1000, -1000, -1000,
	2630, 2623, -220, 187, 3389, 3388, 1111, -1000, 2622, 1208,
	-213, -1000, -1000, 1199, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -213, -1000, 1199, -1000, 183, -1000, -1000, 3201, -1000,
	-1000, 2295, -1000, 250, -1000, -1000, -1000, -1000, -1000, -1000,
	222, -1000, 47867, -1000, 1206, 120, -1000, 2079, -1000, -1000,
	-1000, -1000, -1000, 4899, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11127, -1000, -1000, -1000, 2440,
	-1000, -1000, 11127, 2621, 2422, 2620, 2421, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3454, -1000, 3387, 1632, 2617, 2615, 1596,
	2612, 2611, -1000, 11127, 2608, 4961, 1009, 2409, 1009, -1000,
	-1000, 396, 27963, 47867, 3417, -1000, 47867, 2403, -1000, -1000,
	2039, 586, 672, -1000, -1000, -1000, -1000, 941, 421, 2605,
	1204, -1000, -1000, -1000, -1000, 421, -1000, 2400, 240, -1000,
	-1000, -1000, -1000, 2393, 2392, 2124, -1000, -1000, 2087, 1577,
	255, -1000, -1000, -1000, -1000, -1000, -1000, 2246, 47867, 36671,
	2248, 1787, -347, -1000, 2790, -1000, 1719, 1719, 1719, 47867,
	1572, -1000, 1719, 1719, 2604, -1000, -1000, 2600, 2591, -131,
	834, 1790, 1785, -1000, 2117, 27341, 36049, 35427, 1290, -1000,
	1469, -1000, -1000, -1000, -1000, -1000, -1000, 3407, 834, -1000,
	552, 2115, 13002, 2789, 13002, 2788, 570, 2782, 1564, -1000,
	47867, -1000, -1000, 47867, 3933, 2779, -1000, 2778, 3036, 538,
	2769, 2768, 47867, 2430, -1000, 3225, 47867, 757, 3204, -1000,
	-1000, -1000, 436, -1000, -1000, 603, -1000, 47867, -1000, 47867,
	-1000, 1598, -1000, 25475, -1000, -1000, 1542, -1000, 2391, 2387,
	4961, -1000, -1000, 240, 2386, 6112, -1000, -1000, -1000, 3169,
	2382, 2246, 47867, -1000, 47867, 1193, 1193, 3454, 47867, 8621,
	-1000, -1000, 11127, 2767, -1000, 11127, -1000, -1000, -1000, -1000,
	-1000, 2765, 3219, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1701, -1000, 11127, 11127, -1000, -1000, 872, 14261, -254, 343,
	-1000, -1000, -1000, -226, 2380, -1000, -1000, 3379, 2375, 2247,
	47867, -1000, -1000, 1199, 1199, -220, -1000, -1000, 1196, -1000,
	-1000, 1099, 680, -1000, 2589, 2416, -1000, 2390, 132, -1000,
	132, -1000, 225, 11127, -1000, 2374, -1000, -1000, -1000, 2369,
	-1000, -1000, 2298, -1000, 2588, -1000, 2368, -1000, -1000, 47867,
	-1000, -1000, 1094, 2365, -351, 2347, 2039, 2039, 47867, 5175,
	-132, -131, 17383, -132, -1000, -1000, 388, -1000, -1000, 377,
	-1000, -1000, 2042, 625, -1000, -1000, 2345, 608, -1000, 1193,
	-1000, 1786, 1962, 2311, 32939, 25475, 26719, 2342, -1000, -1000,
	34805, 1701, 1701, 51011, 329, 51354, -1000, 2763, 1141, 1729,
	-1000, 2088, -1000, 2084, -1000, 3407, 1290, 130, -1000, -1000,
	1622, -1000, 1141, 2654, 3378, -1000, 3799, 47867, 3539, 47867,
	2762, 1784, 13002, -1000, 793, 3112, -1000, -1000, 3933, -1000,
	-1000, 1965, 13002, -1000, -1000, 2335, 26719, 942, 1778, 1766,
	960, 2758, -1000, 624, 3435, -1000, -1000, -1000, 987, 2756,
	-1000, 1936, 1933, -1000, 47867, -1000, 32939, 32939, 748, 748,
	32939, 32939, 2753, 799, -1000, -1000, 13002, -1000, -1000, 1719,
	-1000, -1000, -1000, 1719, 1587, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2248, -1000, -1000, 1169, -1000, 3351, -1000, -1000,
	2079, 47867, 2079, 34183, -1000, 3377, 3375, -1000, 2079, 245,
	-1000, -320, 47867, 47867, -231, 2083, -1000, 2333, 180, -1000,
	-1000, 1161, -226, -234, 112, 25475, 1756, -1000, -1000, -1000,
	-1000, -1000, 2586, -1000, 884, -1000, -1000, -1000, 1156, 2580,
	2579, -1000, -1000, -1000, -1000, 47867, -1000, 2306, -1000, 2326,
	2325, 579, -117, -1000, -1000, 431, -1000, -1000, -1000, 596,
	2261, -1000, -1000, 372, -1000, -1000, -1000, 2246, 2324, -1000,
	-1000, 118, -1000, 1748, 1527, -1000, 2741, 11127, -1000, -1000,
	-1000, -1000, -1000, -1000, 790, -1000, 421, 51184, -1000, 1133,
	26097, -1000, 1099, 790, 496, 31695, 685, 301, -1000, 2068,
	-1000, -1000, 3454, -1000, 681, -1000, 560, -1000, 1520, -1000,
	1513, 33561, 2063, 3066, -1000, 51049, 945, -1000, -1000, 3967,
	-1000, -1000, -1000, -1000, -1000, -1000, 2317, 2316, -1000, -1000,
	-1000, -1000, -1000, 2049, 2735, 28, 3275, 2315, -1000, -1000,
	2732, 1509, 1508, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1507, 1503, 32939, -1000, -1000, 3967, 2044, 25475,
	1719, -1000, -1000, 1494, 1466, -1000, -1000, -1000, -1000, -1000,
	-304, -1000, -1000, -1000, 2731, -1000, -1000, 3374, -231, -242,
	2313, 166, 178, -1000, 2312, -1000, -1000, 895, -216, 141,
	139, 68, -1000, -1000, -1000, 11127, -1000, -1000, -1000, 117,
	-1000, 1731, -1000, -1000, 2039, 47867, 617, -1000, -1000, -1000,
	-1000, 221, -1000, -1000, -1000, -1000, -1000, -1000, 2311, 2309,
	-1000, 32939, 3241, 2274, 522, 3373, -1000, 51354, -1000, 1719,
	-1000, 522, 1451, -1000, 1719, 1719, -1000, 474, -1000, 1721,
	-1000, 2020, -1000, 3351, -1000, 465, -1000, 550, -1000, -1000,
	-1000, 1422, -1000, -1000, -1000, 51049, 554, -1000, 781, 2730,
	-1000, -1000, 2570, 11127, 2729, 1719, 2567, -112, 32939, 3026,
	3014, 2826, 2533, 1415, -1000, -1000, 25475, -1000, -1000, 32317,
	-1000, 47867, 2247, -1000, -1000, 2308, -1000, 888, 186, 178,
	-1000, 3372, 171, 3371, 3367, 1155, 1925, -1000, 154, 152,
	145, -1000, -1000, -1000, -1000, -1000, 2306, 2303, 2301, 571,
	-1000, 314, -1000, -1000, -1000, 318, -1000, -1000, 3241, -1000,
	3363, 737, -1000, 25475, -1000, -1000, 31695, 1701, 1701, -1000,
	-1000, 2016, -1000, -1000, -1000, -1000, 1995, -1000, -1000, -1000,
	1412, -1000, 47867, 989, 7996, -1000, 2218, -1000, 47867, -1000,
	3064, -1000, 298, 1410, 318, 748, 318, 748, 318, 748,
	318, 748, 311, -1000, -1000, -1000, 1408, -1000, -1000, -1000,
	2728, 1986, 187, 188, 3360, -1000, 2247, 3356, 2247, 2247,
	-1000, 150, 895, -1000, -1000, -1000, -1000, -1000, -1000, 2288,
	-1000, -1000, -1000, -1000, 1719, 1719, 2278, 2270, 454, -1000,
	-1000, -1000, 31073, 556, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 554, 51354, -1000, 7996, 1364, -1000, 2079, -1000, 799,
	-1000, -1000, 3059, 3048, 3412, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 47867, 3267, 24853, 169, -1000,
	-1000, -1000, 2263, -1000, 2247, -1000, -1000, 1716, -1000, -273,
	1982, 1976, -1000, -1000, 47867, -1000, 47867, 552, -1000, 51354,
	1341, -1000, 7996, -1000, -1000, 3434, -1000, 3413, 940, 940,
	318, 318, 318, 318, -1000, -1000, 47867, -1000, 1267, -1000,
	-1000, -1000, 1449, -1000, -1000, -1000, -1000, 2203, -1000, -1000,
	2171, -1000, -1000, -1000, 1225, 2654, -1000, -1000, -1000, -1000,
	-1000, 2107, 649, -1000, 1151, -1000, 1663, -1000, 30451, 47867,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 47867, 7371, -1000,
	1148, -1000, -1000, 2079, 47867, -1000,
}

var yyPgo = [...]int{
	0, 184, 3485, 253, 182, 4087, 82, 271, 277, 240,
	260, 4085, 4084, 4083, 4082, 3186, 3177, 4081, 4080, 4079,
	4078, 4077, 4076, 4075, 4073, 4072, 4071, 4070, 4069, 4068,
	4067, 4065, 4052, 4050, 4048, 4047, 4046, 4045, 4042, 4041,
	4040, 4039, 4037, 4036, 4035, 4034, 4033, 250, 4031, 4030,
	4026, 4025, 4023, 4022, 4020, 4019, 4018, 4017, 4015, 4013,
	4012, 4011, 4010, 4009, 4007, 4002, 4000, 3998, 3985, 3984,
	3983, 3981, 3977, 3976, 3973, 3972, 3968, 3967, 3966, 246,
	3965, 3961, 220, 3958, 3176, 3957, 3952, 3950, 3937, 3936,
	3934, 3933, 3926, 257, 3925, 3922, 3920, 3919, 3917, 3915,
	3914, 3913, 3912, 3911, 3909, 3906, 302, 3904, 3903, 3902,
	3901, 213, 3900, 282, 3899, 180, 153, 3894, 3893, 3892,
	3890, 3879, 3878, 3876, 3874, 3872, 3871, 3870, 3869, 3868,
	248, 199, 77, 3867, 49, 3864, 3863, 232, 3862, 159,
	3861, 155, 3860, 3859, 3858, 3857, 3856, 3852, 3851, 3849,
	3846, 3845, 3844, 3841, 3838, 3837, 3835, 3833, 3831, 3829,
	3828, 3827, 3826, 3825, 3824, 52, 3823, 267, 3822, 81,
	3821, 178, 3818, 76, 3817, 89, 148, 263, 1924, 261,
	255, 193, 176, 3816, 3815, 280, 3813, 167, 231, 162,
	110, 27, 3809, 139, 3808, 268, 47, 39, 245, 146,
	58, 198, 128, 3805, 221, 104, 116, 3801, 3800, 149,
	3798, 243, 179, 3795, 115, 3794, 3791, 3790, 3789, 3788,
	206, 191, 3786, 3785, 136, 3784, 3783, 98, 138, 3782,
	78, 125, 173, 124, 3781, 2400, 127, 84, 3780, 133,
	109, 3779, 86, 3778, 3772, 3770, 3769, 186, 3768, 3767,
	137, 72, 3766, 3765, 3764, 74, 3762, 85, 3761, 28,
	3758, 65, 3756, 3754, 3753, 3750, 3749, 3748, 3742, 3740,
	3739, 3734, 3731, 3728, 56, 3726, 3725, 7, 11, 16,
	3724, 26, 3723, 174, 3721, 3718, 172, 3717, 197, 3716,
	3715, 96, 94, 3714, 95, 170, 3712, 14, 29, 75,
	3710, 3708, 227, 141, 112, 156, 3707, 279, 3706, 3705,
	3704, 166, 3703, 3702, 627, 3701, 3699, 3698, 3697, 3696,
	3695, 57, 3694, 1, 223, 44, 3693, 132, 143, 3691,
	42, 30, 3690, 48, 123, 208, 142, 100, 3676, 3674,
	3671, 134, 212, 107, 36, 0, 99, 228, 165, 3670,
	3669, 3668, 265, 3667, 237, 205, 236, 244, 272, 247,
	3666, 3665, 64, 3664, 168, 33, 53, 154, 101, 21,
	249, 3663, 1552, 8, 188, 3661, 207, 3660, 210, 18,
	194, 151, 3658, 3657, 32, 266, 3655, 3654, 3653, 130,
	3652, 3651, 238, 114, 3650, 3649, 3648, 3647, 38, 3645,
	41, 15, 3644, 102, 3642, 254, 3641, 256, 144, 187,
	185, 164, 224, 233, 87, 79, 3639, 1788, 157, 111,
	17, 3637, 229, 3636, 196, 129, 3635, 105, 3634, 252,
	269, 211, 3633, 189, 9, 51, 40, 35, 45, 10,
	262, 217, 3632, 3630, 22, 50, 3628, 61, 3627, 19,
	3623, 3622, 54, 3621, 66, 5, 3620, 3618, 12, 20,
	3617, 37, 203, 175, 126, 97, 67, 3616, 3615, 55,
	177, 3614, 150, 163, 160, 3613, 80, 3612, 3611, 3609,
	3608, 729, 3607, 258, 3606, 3604, 3603, 3601, 3599, 3598,
	3597, 3596, 3590, 222, 3589, 140, 43, 3587, 3586, 3585,
	3584, 83, 147, 3583, 3581, 3579, 3578, 31, 145, 3577,
	13, 3576, 25, 23, 34, 3575, 106, 3573, 3, 200,
	3569, 3567, 4, 3566, 3565, 2, 3563, 3561, 135, 3560,
	108, 24, 171, 117, 3559, 3558, 93, 215, 152, 3557,
	3556, 92, 251, 204, 3555, 103, 239, 264, 3554, 209,
	3549, 3548, 3547, 3545, 3544, 3543, 1257, 3542, 3540, 235,
	71, 90, 3539, 226, 122, 3537, 3533, 91, 169, 119,
	121, 59, 88, 3532, 118, 202, 3531, 201, 3530, 259,
	3527, 3525, 113, 3522, 3513, 3511, 3509, 192, 3505, 3501,
	195, 230, 3500, 3499, 274, 3498, 3497, 3495, 3493, 3492,
	3491, 3490, 3489, 3482, 3473, 241, 463, 3471,
}

//line mysql_sql.y:12539
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 600, 603, 603, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 121,
	121, 336, 336, 337, 337, 123, 332, 332, 331, 331,
	124, 125, 126, 579, 579, 127, 128, 157, 578, 578,
	159, 159, 159, 159, 159, 452, 122, 122, 122, 122,
	122, 163, 163, 163, 163, 163, 120, 585, 585, 585,
	586, 586, 117, 146, 145, 148, 148, 147, 147, 144,
	144, 140, 143, 143, 142, 142, 141, 136, 138, 138,
	137, 139, 139, 118, 106, 119, 527, 527, 526, 526,
	525, 525, 477, 477, 478, 478, 323, 323, 323, 524,
	524, 524, 523, 523, 522, 522, 521, 521, 519, 519,
	520, 518, 517, 517, 517, 515, 515, 515, 511, 511,
	513, 512, 512, 514, 506, 506, 509, 509, 507, 507,
	507, 507, 510, 505, 505, 505, 504, 504, 105, 105,
	105, 419, 419, 104, 104, 433, 433, 433, 433, 433,
	431, 431, 431, 431, 431, 431, 430, 430, 429, 429,
	434, 434, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 94, 94, 94, 94, 94, 94, 99,
	99, 99, 100, 591, 591, 590, 590, 592, 592, 592,
	592, 593, 593, 97, 97, 97, 98, 428, 428, 428,
	95, 96, 96, 418, 418, 423, 423, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
	427, 427, 427, 425, 425, 424, 424, 426, 426, 88,
	88, 88, 91, 90, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 89, 89, 89, 89, 89, 89, 83,
	83, 83, 83, 83, 82, 82, 84, 84, 415, 415,
	414, 101, 101, 102, 588, 588, 587, 589, 589, 589,
	589, 103, 109, 109, 109, 109, 109, 109, 109, 109,
	108, 108, 111, 111, 110, 112, 93, 93, 93, 93,
	93, 93, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 552, 552,
	552, 552, 554, 554, 350, 351, 604, 353, 349, 349,
	349, 548, 548, 549, 550, 551, 551, 551, 107, 14,
	210, 210, 451, 451, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 13, 81, 86, 86, 87, 287,
	287, 288, 282, 282, 289, 289, 162, 290, 290, 290,
	295, 295, 296, 296, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 269, 269, 269, 264,
	264, 264, 264, 265, 265, 266, 266, 267, 267, 267,
	267, 268, 268, 342, 342, 291, 291, 291, 293, 293,
	292, 286, 284, 284, 284, 284, 284, 284, 284, 285,
	285, 285, 285, 294, 294, 79, 85, 85, 85, 85,
	566, 566, 80, 577, 577, 481, 481, 364, 364, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 487, 488, 360, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 54, 57, 58, 161, 53, 53, 53, 404,
	404, 52, 605, 605, 335, 335, 67, 66, 56, 68,
	69, 70, 71, 72, 73, 51, 65, 65, 65, 65,
	65, 65, 65, 65, 76, 500, 500, 607, 607, 607,
	74, 75, 480, 480, 480, 64, 63, 62, 61, 60,
	60, 50, 50, 49, 49, 55, 152, 59, 153, 153,
	357, 357, 357, 359, 359, 355, 606, 606, 447, 447,
	358, 358, 48, 48, 48, 48, 77, 356, 356, 334,
	354, 354, 354, 12, 12, 10, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 26, 27, 29, 412, 412, 409, 28,
	20, 19, 19, 23, 22, 18, 18, 21, 24, 25,
	25, 9, 9, 9, 9, 15, 15, 16, 182, 182,
	236, 236, 560, 560, 556, 556, 557, 557, 557, 558,
	558, 559, 559, 113, 494, 494, 494, 494, 494, 494,
	8, 8, 205, 205, 493, 493, 493, 493, 493, 493,
	416, 416, 416, 537, 537, 537, 538, 204, 204, 199,
	199, 495, 495, 381, 539, 539, 503, 503, 502, 502,
	501, 501, 202, 202, 203, 203, 185, 185, 131, 131,
	508, 508, 508, 508, 516, 516, 476, 476, 274, 274,
	325, 325, 326, 326, 175, 175, 176, 176, 176, 176,
	176, 176, 594, 594, 595, 596, 597, 597, 598, 598,
	598, 599, 599, 599, 599, 599, 545, 545, 547, 547,
	546, 201, 201, 197, 197, 198, 198, 198, 196, 196,
	195, 194, 194, 193, 191, 191, 191, 192, 192, 192,
	209, 209, 178, 178, 178, 177, 177, 177, 177, 177,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 179, 179, 553, 553, 553, 482, 482, 482,
	490, 490, 304, 304, 305, 305, 486, 486, 303, 303,
	180, 180, 181, 181, 181, 181, 302, 302, 301, 190,
	190, 189, 188, 188, 188, 183, 183, 183, 183, 184,
	313, 313, 312, 312, 311, 311, 311, 311, 116, 129,
	129, 130, 208, 208, 310, 309, 309, 309, 309, 207,
	207, 206, 206, 200, 200, 187, 187, 187, 187, 308,
	186, 306, 584, 584, 583, 583, 582, 580, 580, 580,
	581, 581, 581, 581, 529, 529, 529, 529, 529, 343,
	343, 343, 348, 348, 346, 346, 346, 346, 346, 352,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 39, 219, 220, 40, 221, 221, 222, 222,
	223, 223, 224, 225, 226, 226, 226, 226, 38, 211,
	211, 212, 212, 213, 213, 214, 215, 215, 215, 218,
	216, 217, 217, 602, 602, 601, 37, 37, 30, 166,
	166, 167, 167, 167, 169, 169, 270, 270, 270, 168,
	168, 170, 170, 170, 561, 563, 563, 565, 564, 564,
	564, 567, 567, 567, 567, 567, 568, 568, 568, 568,
	569, 569, 31, 149, 149, 173, 173, 154, 572, 572,
	572, 571, 571, 573, 573, 574, 574, 329, 329, 330,
	330, 164, 165, 165, 156, 151, 172, 172, 172, 172,
	172, 174, 174, 238, 238, 150, 155, 158, 160, 562,
	570, 570, 570, 413, 413, 410, 411, 411, 408, 407,
	407, 407, 576, 576, 575, 575, 575, 344, 344, 32,
	403, 403, 405, 406, 406, 406, 397, 397, 397, 397,
	36, 401, 401, 402, 402, 402, 402, 402, 402, 402,
	398, 398, 400, 400, 396, 396, 396, 396, 396, 396,
	396, 35, 171, 171, 395, 395, 392, 392, 390, 390,
	391, 391, 389, 389, 389, 393, 393, 43, 78, 44,
	45, 46, 42, 394, 394, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 133, 132, 132, 132, 132,
	132, 135, 135, 328, 328, 327, 327, 134, 271, 271,
	41, 249, 249, 468, 468, 463, 463, 463, 463, 463,
	484, 484, 484, 464, 464, 464, 465, 465, 465, 467,
	467, 467, 466, 466, 466, 466, 466, 483, 483, 485,
	485, 485, 435, 435, 436, 436, 436, 439, 439, 455,
	455, 456, 456, 454, 454, 461, 461, 460, 460, 459,
	459, 458, 458, 457, 457, 457, 457, 450, 450, 449,
	449, 437, 437, 437, 437, 437, 438, 438, 438, 448,
	448, 453, 453, 300, 300, 299, 299, 257, 257, 258,
	258, 298, 298, 255, 255, 256, 256, 256, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 535, 535, 536, 260, 260, 272,
	272, 272, 272, 272, 272, 259, 259, 261, 261, 237,
	237, 235, 235, 227, 227, 227, 227, 227, 228, 228,
	229, 229, 230, 230, 230, 234, 234, 233, 233, 233,
	233, 231, 231, 232, 232, 232, 232, 232, 232, 421,
	421, 532, 532, 533, 533, 528, 528, 528, 531, 531,
	531, 531, 531, 531, 531, 534, 534, 534, 530, 530,
	239, 322, 322, 322, 345, 345, 345, 345, 347, 321,
	321, 321, 254, 254, 253, 253, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 420, 420,
	361, 361, 362, 362, 281, 280, 280, 280, 280, 280,
	278, 279, 277, 277, 277, 277, 277, 276, 276, 275,
	275, 275, 399, 399, 273, 273, 263, 263, 263, 262,
	262, 262, 462, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 319, 319, 319, 320, 320, 320, 320, 320,
	320, 320, 320, 371, 371, 377, 377, 544, 544, 543,
	240, 240, 240, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 250, 250, 250, 444, 444, 444, 444, 445,
	445, 445, 445, 446, 446, 446, 442, 442, 443, 443,
	382, 383, 383, 491, 491, 492, 492, 440, 440, 441,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 499, 499, 499, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 555, 555, 555, 540, 540, 540, 541, 541, 541,
	541, 541, 541, 541, 541, 541, 541, 541, 541, 542,
	542, 542, 542, 542, 542, 542, 542, 542, 542, 542,
	542, 542, 542, 542, 542, 542, 317, 317, 317, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 384, 384, 385,
	385, 496, 496, 496, 496, 496, 496, 497, 497, 498,
	498, 498, 498, 489, 489, 489, 489, 489, 489, 489,
	489, 489, 489, 489, 489, 489, 489, 489, 489, 489,
	489, 489, 489, 489, 489, 489, 489, 489, 489, 489,
	489, 489, 369, 314, 314, 314, 386, 378, 378, 379,
	379, 380, 380, 372, 372, 372, 372, 372, 372, 373,
	373, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 374, 374, 376, 376, 388, 388, 388,
	387, 387, 387, 387, 387, 387, 387, 252, 252, 252,
	252, 366, 366, 366, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 242, 242, 242, 242,
	246, 246, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 247, 247, 247, 247,
	247, 245, 245, 245, 245, 245, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 114, 115, 115, 244, 324,
	324, 469, 469, 472, 472, 470, 470, 471, 473, 473,
	473, 474, 474, 474, 475, 475, 475, 479, 479, 333,
	333, 333, 341, 341, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 4, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 5, 7, 9, 8, 6, 4, 0, 1, 1,
	0, 1, 5, 2, 2, 6, 9, 6, 9, 4,
	7, 8, 0, 1, 1, 2, 4, 6, 1, 2,
	4, 0, 2, 10, 11, 2, 0, 2, 1, 3,
	3, 3, 0, 2, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 5, 1, 3, 3, 1, 2, 2, 2,
	1, 2, 2, 3, 4, 4, 6, 1, 1, 1,
	2, 4, 6, 1, 4, 1, 3, 3, 4, 4,
	4, 4, 3, 3, 2, 4, 4, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 2, 2, 0, 1, 4, 2, 4, 1,
	5, 3, 2, 1, 2, 2, 4, 4, 5, 2,
	1, 3, 4, 4, 1, 2, 9, 7, 1, 3,
	3, 1, 1, 3, 1, 3, 2, 1, 2, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 2, 4, 3, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 4, 7, 2, 3, 3, 4,
	3, 4, 4, 5, 3, 4, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 1, 1, 1, 1, 6, 4,
	1, 1, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 10, 7, 4, 4, 3, 1,
	3, 3, 1, 3, 1, 6, 7, 3, 3, 3,
	1, 1, 1, 3, 2, 4, 5, 5, 6, 5,
	5, 3, 2, 2, 1, 3, 4, 3, 7, 5,
	8, 2, 2, 1, 3, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 2, 1, 3,
	2, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	6, 3, 3, 1, 1, 7, 7, 7, 8, 8,
	0, 4, 7, 0, 3, 0, 2, 0, 1, 1,
	1, 1, 4, 2, 2, 3, 3, 4, 5, 3,
	4, 4, 2, 2, 2, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 3, 3, 2, 5, 5, 0,
	2, 7, 0, 1, 0, 1, 5, 5, 3, 3,
	2, 4, 4, 4, 4, 4, 1, 1, 1, 3,
	3, 1, 1, 1, 6, 0, 1, 1, 1, 1,
	5, 5, 0, 1, 1, 3, 3, 3, 4, 7,
	7, 5, 4, 7, 8, 3, 3, 2, 3, 4,
	0, 2, 2, 0, 2, 2, 1, 1, 1, 1,
	0, 1, 5, 5, 6, 4, 3, 1, 3, 1,
	1, 3, 5, 2, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 4, 1, 3, 1, 4,
	6, 6, 4, 4, 4, 4, 4, 3, 6, 3,
	5, 1, 1, 2, 2, 11, 8, 9, 1, 3,
	2, 4, 0, 2, 0, 1, 1, 1, 1, 0,
	1, 0, 1, 4, 2, 1, 5, 4, 4, 2,
	5, 5, 1, 3, 2, 1, 5, 4, 4, 2,
	0, 5, 4, 0, 1, 3, 3, 1, 3, 1,
	3, 1, 3, 4, 0, 1, 0, 1, 1, 3,
	1, 1, 0, 4, 1, 3, 2, 1, 0, 8,
	0, 4, 7, 4, 0, 2, 0, 2, 0, 2,
	0, 4, 1, 3, 1, 1, 6, 4, 5, 7,
	4, 5, 0, 1, 3, 8, 0, 6, 0, 4,
	6, 1, 1, 1, 1, 1, 2, 3, 1, 3,
	6, 0, 3, 0, 1, 2, 4, 4, 0, 1,
	3, 1, 3, 3, 0, 1, 1, 0, 2, 2,
	0, 2, 3, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 7, 7, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 2, 0, 4, 0, 2, 0, 2,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	3, 1, 1, 1, 1, 4, 4, 4, 3, 3,
	2, 2, 2, 2, 2, 3, 2, 3, 4, 1,
	3, 4, 0, 2, 1, 1, 2, 2, 2, 0,
	1, 2, 4, 1, 3, 1, 3, 2, 3, 1,
	4, 3, 0, 1, 1, 2, 5, 2, 2, 2,
	0, 2, 3, 3, 0, 1, 3, 1, 3, 0,
	1, 2, 1, 1, 0, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 1, 7, 1, 3, 0, 1,
	1, 3, 1, 3, 0, 1, 1, 1, 14, 1,
	3, 0, 1, 1, 3, 1, 1, 2, 4, 1,
	1, 1, 1, 0, 1, 2, 9, 9, 7, 1,
	2, 3, 3, 3, 0, 4, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 4, 1, 1,
	1, 3, 3, 4, 3, 3, 0, 1, 1, 1,
	0, 2, 7, 8, 10, 2, 2, 8, 0, 3,
	3, 0, 3, 0, 3, 0, 5, 1, 3, 0,
	3, 3, 0, 2, 9, 8, 0, 2, 2, 3,
	3, 0, 2, 0, 2, 4, 4, 4, 4, 1,
	0, 2, 2, 1, 3, 2, 1, 3, 2, 1,
	3, 2, 0, 1, 3, 4, 3, 1, 1, 4,
	1, 3, 1, 1, 1, 1, 0, 1, 1, 1,
	11, 0, 2, 3, 3, 2, 2, 3, 1, 1,
	1, 3, 3, 4, 0, 2, 2, 2, 2, 2,
	2, 6, 0, 4, 1, 1, 0, 3, 0, 1,
	1, 2, 4, 4, 4, 0, 1, 8, 2, 4,
	4, 4, 9, 0, 2, 11, 9, 11, 8, 6,
	9, 7, 10, 7, 6, 2, 2, 9, 4, 5,
	3, 0, 4, 1, 3, 0, 3, 6, 0, 2,
	10, 0, 2, 0, 2, 0, 3, 2, 4, 3,
	0, 2, 1, 0, 2, 3, 0, 2, 3, 0,
	2, 1, 0, 3, 2, 4, 3, 0, 1, 0,
	1, 1, 0, 6, 0, 3, 5, 0, 4, 0,
	3, 1, 3, 4, 5, 0, 3, 1, 3, 2,
	3, 1, 2, 0, 4, 6, 5, 0, 2, 0,
	2, 4, 5, 4, 5, 1, 5, 6, 5, 0,
	3, 0, 1, 1, 3, 3, 3, 0, 4, 1,
	3, 3, 3, 0, 1, 1, 3, 2, 3, 3,
	3, 4, 4, 3, 3, 3, 3, 4, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 5, 4, 5, 1, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 4, 0, 5, 5, 5, 5, 0, 1,
	1, 3, 1, 1, 1, 1, 1, 7, 9, 7,
	9, 2, 1, 7, 9, 7, 9, 8, 5, 0,
	1, 0, 1, 1, 1, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	3, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 2, 1, 2, 2, 1,
	1, 2, 2, 2, 3, 3, 2, 2, 1, 5,
	6, 4, 1, 1, 1, 5, 4, 1, 1, 2,
	0, 1, 1, 2, 5, 0, 1, 1, 2, 2,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 2,
	2, 2, 0, 3, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 3,
	5, 2, 2, 2, 2, 4, 1, 1, 2, 5,
	6, 8, 6, 6, 6, 1, 1, 1, 1, 1,
	1, 3, 4, 4, 4, 7, 9, 7, 7, 7,
	9, 7, 7, 0, 2, 0, 1, 1, 2, 4,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 2,
	2, 2, 0, 1, 1, 1, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 5, 0, 1,
	3, 0, 1, 0, 2, 0, 2, 0, 1, 6,
	8, 8, 6, 6, 5, 5, 5, 6, 6, 6,
	6, 5, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 1, 1, 1, 4, 4, 6, 8, 6,
	4, 5, 4, 4, 4, 3, 4, 6, 6, 7,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 8, 4,
	2, 3, 2, 4, 2, 2, 4, 6, 2, 2,
	4, 6, 4, 2, 4, 4, 4, 0, 1, 2,
	3, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 3, 0, 1, 1,
	3, 1, 3, 3, 3, 3, 3, 2, 1, 1,
	1, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 1, 3, 4, 4, 5, 4, 5, 3, 4,
	5, 6, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 1, 2, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 4, 1, 2, 3, 5, 1, 1,
	3, 0, 1, 0, 3, 0, 3, 3, 0, 3,
	5, 0, 3, 5, 0, 1, 1, 0, 1, 1,
	2, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int{
	-1000, -600, -603, -2, -5, 629, -1, -4, -115, -88,
	-7, -14, -117, -118, -8, -113, -9, -10, -12, -92,
	-108, -110, -112, -111, -47, -11, -107, -82, -83, -94,
	-101, -104, -105, -106, -119, -114, -116, -175, -120, -121,
	-122, -163, -125, -127, -128, 619, -89, -90, -91, -33,
	-32, -31, -30, -149, -154, -157, -159, -123, 552, 625,
	454, 14, 503, -15, -16, -545, -17, 263, -349, -350,
	-351, -353, -604, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -152,
	-153, -77, -57, -78, -58, -161, -124, -80, -79, -85,
	-81, -86, -151, -156, -13, -162, -87, 237, -84, 76,
	-95, -96, -97, -98, -99, -100, -102, -103, 378, 384,
	441, 618, 61, -176, -178, 639, 640, 643, 538, 541,
	542, 161, 162, 164, 165, -34, -35, -36, -37, -38,
	-39, -41, -40, -42, -43, -44, -45, -46, 233, 16,
	547, -18, -21, -19, -22, -20, -28, -29, -27, -24,
	-26, -150, -25, -155, -23, -158, -160, -126, 258, 257,
	38, 324, 325, 326, 382, 256, 234, 236, 15, 31,
	42, 357, -177, 84, 539, 235, -179, 13, 645, -6,
	-3, -2, -136, -140, -144, -147, -148, -145, -146, -4,
	-115, 119, 248, 620, -345, 374, 621, 623, 622, 87,
	95, -338, -340, 454, 263, 378, 384, 618, 640, 643,
	538, 541, 542, 554, 555, 556, 557, 558, 559, 560,
	561, 563, 564, 565, 566, 567, 568, 569, 579, 580,
	570, 571, 572, 573, 574, 575, 576, 577, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, 592,
	593, 594, 506, 604, 605, 606, 607, 534, 562, 598,
	599, 600, 601, 355, 356, 544, 275, 299, 409, 305,
	312, 161, 180, 174, 203, 194, 539, 169, 279, 317,
	280, 94, 164, 489, 109, 466, 438, 167, 294, 296,
	298, 535, 536, 368, 301, 533, 300, 302, 304, 537,
	281, 358, 190, 185, 293, 277, 183, 282, 40, 283,
	208, 284, 285, 549, 462, 354, 468, 309, 52, 436,
	184, 463, 297, 465, 212, 216, 480, 481, 178, 179,
	470, 483, 207, 210, 211, 255, 351, 352, 43, 546,
	267, 484, 214, 206, 201, 492, 313, 311, 205, 177,
	200, 278, 65, 218, 217, 219, 432, 433, 434, 435,
	286, 287, 372, 479, 197, 186, 359, 170, 23, 487,
	262, 467, 385, 288, 306, 314, 213, 215, 269, 274,
	329, 548, 440, 273, 310, 485, 182, 266, 295, 261,
	488, 171, 387, 289, 165, 303, 482, 491, 64, 400,
	176, 168, 636, 252, 162, 271, 276, 290, 291, 292,
	532, 316, 315, 307, 540, 198, 268, 204, 188, 175,
	199, 163, 270, 490, 401, 616, 357, 419, 196, 193,
	272, 245, 486, 469, 166, 423, 402, 191, 318, 611,
	612, 613, 373, 350, 319, 320, 189, 259, 460, 461,
	323, 429, 341, 403, 439, 410, 404, 225, 226, 327,
	472, 474, 209, 614, 330, 331, 332, 464, 333, 334,
	335, 336, 377, 56, 58, 96, 99, 98, 641, 642,
	63, 29, 363, 366, 398, 405, 343, 617, 545, 340,
	344, 345, 367, 25, 421, 389, 425, 424, 48, 49,
	50, 53, 54, 55, 57, 59, 60, 51, 531, 382,
	395, 493, 45, 47, 392, 27, 369, 420, 442, 339,
	422, 453, 46, 451, 452, 473, 26, 371, 370, 62,
	44, 428, 430, 431, 321, 337, 380, 626, 494, 375,
	391, 394, 376, 342, 365, 396, 67, 66, 388, 627,
	383, 381, 338, 550, 551, 346, 578, 360, 437, 528,
	527, 526, 525, 524, 523, 522, 521, 324, 325, 326,
	406, 407, 408, 418, 411, 412, 413, 414, 415, 416,
	417, 456, 457, 628, 475, 477, 478, 476, 240, 644,
	361, 362, 243, 630, 631, 97, 632, 634, 633, 28,
	635, 638, -426, -424, -345, 539, 618, 384, 538, 541,
	542, 378, 357, 640, 643, 382, 263, 324, 325, 326,
	454, 355, -221, -345, 644, -185, 247, 39, -235, -345,
	-185, -84, -16, -15, -177, -178, -235, 242, -354, 24,
	436, -93, 437, 237, 238, 84, 77, -345, -9, -106,
	-8, -113, -82, -175, 441, -352, -345, 324, 324, -352,
	242, -347, 273, 417, -345, -481, 248, -430, -403, 274,
	-429, -405, -432, -406, 32, 233, 235, 234, 552, 270,
	16, 382, 244, 14, 13, 383, 256, 25, 26, 28,
	15, 384, 386, 29, 387, 390, 391, 392, 42, 395,
	396, 263, 87, 95, 90, 281, -220, -345, -380, -372,
	116, -375, -367, -368, -370, -323, -519, -365, 84, 143,
	144, 151, 117, 646, -369, -462, 36, 119, 558, 562,
	598, 504, -315, -316, -317, -318, -319, -320, -345, -520,
	-518, 90, 100, 102, 106, 107, 105, 103, 155, 187,
	104, 91, 156, -178, 87, -540, 568, -339, 591, 604,
	605, 606, 607, 590, 61, -489, -498, 241, -496, 154,
	192, 259, 188, 14, 149, 429, 189, 599, 600, 601,
	565, 587, 506, 569, 579, 594, 560, 561, 563, 555,
	556, 557, 559, 570, 572, 586, -499, 582, 592, 593,
	578, 602, 603, 595, 596, 597, 634, 89, 88, 585,
	584, 571, 566, 567, 573, 554, 564, 574, 575, 583,
	588, 589, 366, 109, 367, 368, 496, 358, 369, 248,
	436, 70, 370, 371, 372, 373, 374, 503, 375, 71,
	376, 365, 263, 419, 377, 191, 209, 508, 507, 509,
	500, 497, 495, 498, 499, 501, 502, 576, 577, 581,
	-129, -130, 609, -594, -307, -595, 6, 7, 8, 9,
	-596, 156, -585, 438, 548, 90, 317, 355, 17, 496,
	637, 537, 637, 537, 637, 166, 163, -417, 166, 115,
	171, 170, -417, 637, 168, 636, 327, 269, -394, -166,
	355, 419, 333, 96, 273, -397, -395, 535, -483, 321,
	317, 293, 243, 112, -167, 253, 252, 110, 496, 241,
	393, 312, 56, 58, -556, -557, 230, 231, 232, -547,
	529, -546, -345, 637, 368, 98, 99, 636, 27, 242,
	379, 269, 474, 472, 473, 475, 476, 477, 478, -65,
	-500, -480, 469, 468, -358, 461, 467, 459, 471, 462,
	356, 335, 552, 334, 233, 630, 536, 530, -333, 403,
	439, 493, 494, 380, 440, 480, 482, 463, 109, 195,
	192, 243, 245, 242, 636, 355, 496, 419, 96, 333,
	242, -556, 163, 480, 482, 438, 273, 417, 41, -423,
	429, -422, -424, 481, 492, 88, 89, 479, -333, 109,
	460, 460, -594, -307, -176, -178, -116, -545, 537, 637,
	243, 355, 419, 273, 244, 242, 532, 535, 245, 496,
	241, 324, 379, 269, 333, 96, 168, 636, -482, -553,
	32, -490, 227, 228, 229, 33, 34, -1, 123, 645,
	-372, -372, -6, 648, -6, -372, -345, -345, 158, -242,
	-246, -243, -245, -244, -248, -247, 192, 193, 154, 196,
	202, 198, 199, 200, 201, 203, 204, 205, 206, 207,
	210, 211, 208, 31, 209, 259, 188, 189, 190, 191,
	212, 174, 194, 545, 220, 175, 221, 176, 222, 177,
	223, 178, 179, 224, 180, 183, 184, 185, 186, 182,
	157, -210, 90, 32, 84, 157, 90, -202, 265, -185,
	-235, -227, 157, 646, -202, -594, -195, -196, 11, -235,
	-321, -345, 438, 126, -93, 77, -93, 437, 77, -93,
	437, 237, -548, -549, -550, -552, 237, 437, 436, 238,
	-111, 157, 281, 17, -352, -352, 82, -235, -405, 273,
	-430, -403, 36, 81, 158, 246, 158, 81, 84, 380,
	355, 419, 381, 496, 242, 393, 245, 273, 394, 355,
	419, 242, 245, 496, 273, 355, 242, 245, 419, 273,
	394, 355, 459, 460, 245, 27, 385, 388, 389, 460,
	-504, 492, 158, 115, 112, 113, 114, -372, 133, -387,
	126, 127, 128, 129, 130, 131, 132, 140, 139, 150,
	143, 144, 145, 146, 147, 148, 149, 141, 142, 136,
	116, 134, 138, 135, 118, 153, -178, -372, -380, 61,
	-370, -370, -370, -370, -345, -462, -377, -372, 84, 84,
	84, 84, 157, 103, 90, -372, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, -497, 84,
	84, -384, -385, 84, 84, -365, -321, 84, 90, 90,
	84, 84, 84, 90, 84, 84, 84, -385, -385, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, -196, 158, -195, 84, -195, -196,
	-179, -178, 32, 33, 32, 33, 32, 33, 32, 33,
	-597, 627, 84, 100, 641, 225, 17, -345, 636, -345,
	-579, 32, 540, 540, 540, 540, 540, 485, 547, 169,
	170, 171, -392, 248, -392, -392, -219, -345, -221, 379,
	245, 532, 245, -167, -392, -392, -392, -392, -392, 244,
	-392, 24, 242, 242, 242, 242, -392, 503, 126, 126,
	59, -558, 173, 158, -547, -201, 84, -579, -357, 134,
	138, -357, -303, 18, -303, 24, 271, 271, 271, -357,
	311, -605, -606, 17, 136, -355, -606, -355, -355, -357,
	-607, 244, 470, 43, 272, 271, -197, -198, 22, -197,
	464, 460, -447, 465, 466, -359, -606, -358, -357, -357,
	-358, -357, -357, -357, 32, 242, 245, 496, 333, 631,
	-605, -605, 31, 31, -481, -481, -235, -481, -481, 530,
	-334, -345, -481, -481, -481, -287, -288, -235, -559, 247,
	-591, -590, 483, -593, 485, 163, -424, 163, -424, 87,
	-405, 273, 273, 158, 126, 24, -425, 126, 137, -424,
	-424, -425, -425, -259, 41, -344, 154, -345, 90, -259,
	41, -588, -587, -235, -196, -179, -178, 85, 85, 85,
	540, -579, -481, -481, -481, -481, -481, -483, -481, -481,
	-481, -481, -481, -352, -211, -345, -221, 248, -481, -481,
	-481, -481, -180, -181, 145, -372, -345, -180, -3, -138,
	-137, 120, 121, 123, 621, 374, 620, 624, 618, -424,
	41, -475, 401, 400, -469, -471, 84, -470, 84, -470,
	-470, -470, -470, -470, 84, 84, -472, 84, -472, -472,
	-469, -473, 84, -473, -474, 84, -474, -473, -345, -451,
	547, -378, -380, -345, 39, -493, 61, -175, 84, 31,
	84, -202, -345, 189, 168, 635, -494, 61, -175, 84,
	31, -196, -131, 39, -198, 21, 157, 100, 90, -111,
	-93, 77, -111, -93, -93, 85, 158, -551, 106, 107,
	-554, 207, 198, -345, -109, 90, -7, -8, -9, -10,
	-47, -82, -79, -175, 234, 538, 541, -521, -519, 84,
	32, 428, 81, 17, -431, 242, 496, 379, 269, 245,
	355, -429, -412, -409, -407, -344, -405, -408, -407, -434,
	-321, 460, -132, 443, 442, 323, -372, -372, -372, -372,
	-372, 105, 116, 350, 106, 107, -367, -388, 32, 319,
	320, -368, -368, -368, -368, -368, -368, -368, -368, -368,
	-368, -368, -368, -376, -386, -462, 84, 136, 134, 138,
	135, 118, -370, -370, -368, -368, -261, -344, 154, 85,
	158, -372, -544, -543, 120, -372, -372, -372, -372, -345,
	-541, -542, 510, 511, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 370, 365, 371, 369, 358, 377, 372,
	373, 191, 527, 528, 521, 522, 523, 524, 525, 526,
	-378, -378, -372, -541, -378, -314, 33, 32, -380, -380,
	-380, 85, -372, -555, 348, 347, 349, -199, -345, -378,
	85, 85, 85, 100, -380, -380, -378, -368, -378, -378,
	-378, -378, -542, -314, -314, -314, -314, 145, -380, -380,
	-314, -314, -314, -314, 145, -314, -314, -314, -314, -314,
	-314, -314, -314, -314, -314, 85, 85, 85, 145, -380,
	-197, -130, -502, -501, -372, 41, -131, -198, -598, 628,
	84, -321, -586, 90, 90, 646, 168, 636, 17, 496,
	-345, 17, 242, -345, 100, -345, 100, -345, 486, 487,
	167, 170, 169, -345, 116, -345, -345, 35, 84, -211,
	-392, -392, -392, -563, -345, 91, -413, -410, -407, -345,
	-345, -403, -345, -334, -235, -392, -392, -392, -392, -235,
	-270, 53, 54, 55, -407, -168, 56, 57, -559, -546,
	35, -200, -345, -303, -370, -370, -372, -407, 273, -605,
	-357, -357, -335, -334, -359, -354, -359, -359, -303, -355,
	-357, -357, -372, -359, -355, -303, -345, 460, -303, -303,
	-447, -357, -356, -345, -356, -392, -334, -335, -335, -235,
	-235, -282, -289, -283, -290, 265, 239, 363, 364, 236,
	234, 11, 235, -297, 312, -393, 504, -265, -266, 77,
	42, -268, 263, 405, 398, 275, 279, 94, 280, 438,
	281, 244, 283, 284, 285, 300, 302, 255, 286, 287,
	288, 429, 289, 162, 301, 290, 291, 292, 381, -260,
	6, 336, 547, 41, 51, 52, 452, 451, 550, 276,
	-345, -563, -561, 31, -345, 31, -413, -345, -345, 158,
	246, -188, -190, -187, -183, -184, -189, -306, -308, -186,
	84, -235, -178, -345, 158, 484, 486, 487, -591, -425,
	-591, -425, 246, 32, 428, -428, 428, 32, -403, -422,
	480, 482, -418, 90, 429, -408, -427, 81, 154, -501,
	-425, -425, -427, -427, 153, 158, -589, 485, 486, 230,
	-197, 100, -237, -235, -563, -412, -403, -345, -481, -237,
	-237, -237, -347, -347, 84, 157, 36, -345, -345, -345,
	-345, -302, 158, -301, 17, -346, -345, 35, 90, 157,
	-302, -139, -137, 122, -372, -6, 620, -372, -6, -6,
	-372, -6, -372, -479, 402, 100, 100, -324, 90, -324,
	100, 100, 100, 553, 85, 90, -416, 81, -495, -381,
	-539, 609, -204, 85, -199, -537, -538, -199, -203, -345,
	-493, -227, 126, 126, 126, -495, -204, 85, -537, -197,
	610, -131, -194, -193, -372, -345, 24, -111, -93, -549,
	157, 355, 158, -200, -431, -411, -408, -433, 145, -345,
	-419, 158, 547, 649, 88, 246, -576, -575, 420, 85,
	158, -505, 247, 503, 90, 646, 436, 225, 226, 105,
	350, 106, 107, -462, -380, -376, -370, -370, -368, -368,
	-374, 260, -374, 115, -372, 647, -371, -543, 122, -372,
	35, 158, 35, 158, 82, 157, 85, 85, 17, 17,
	85, -372, 85, 85, 85, 85, 17, 17, -372, 85,
	157, 85, 85, 85, 85, 82, 85, 158, 85, 85,
	85, 85, 158, -380, -380, -372, -380, 85, 85, 85,
	-372, -372, -372, -380, 85, -372, -372, -372, -372, -372,
	-372, -372, -372, -372, -372, -441, 455, -441, -441, 158,
	158, 158, 85, -131, 84, 100, 158, 642, -328, -327,
	90, -345, -345, 168, 636, -345, 90, 636, -345, 168,
	171, 171, 170, 90, 36, 24, 310, 24, -220, -222,
	-223, -224, -225, -226, 136, 159, 160, 84, -235, -235,
	-235, -565, 406, -577, 158, 41, -575, 496, -164, 323,
	-396, 82, -171, 17, 547, -235, -235, -235, -235, -249,
	35, 17, -182, -236, -345, 84, 85, 158, -404, 82,
	-345, -335, -303, -303, -359, -303, -303, 158, 23, -357,
	-359, -359, -227, -355, -227, 157, -227, -334, -468, 35,
	-201, 158, 21, 265, -234, -342, -231, -233, 250, -362,
	-232, 253, -533, 251, 249, 110, 254, 308, 111, 244,
	-342, -342, 250, -269, 246, 35, -342, -285, 244, 353,
	308, 251, 21, 265, -284, 244, 111, -345, 250, 254,
	251, 249, -341, 126, -333, 153, 246, 43, 381, -341,
	551, 265, -341, -341, -341, -341, -341, -341, -341, 282,
	282, -341, -341, -341, -341, -341, -341, -341, -341, -341,
	-341, -341, 163, -341, -341, -341, -341, -341, -341, 84,
	328, 277, 278, 310, -566, 406, 31, 361, 361, 362,
	-577, 31, -172, 355, -288, -286, -356, 31, -309, -310,
	-311, -312, -313, 68, 72, 74, 78, 69, 70, 71,
	75, 73, 31, 158, -343, -348, 35, -345, 90, -343,
	-178, -190, -188, -343, 84, -590, -592, 488, 485, 491,
	-427, -427, 100, 246, 84, 126, -427, -427, 41, -344,
	-587, 492, 486, -131, 158, 81, -237, -212, -213, -214,
	-215, -242, -321, 193, 196, 198, 199, 200, 201, 203,
	204, 205, 206, 207, 210, 211, 208, 209, 259, 188,
	189, 190, 191, 212, 174, 194, 545, 175, 176, 177,
	178, 179, 180, 183, 184, 185, 186, 182, -345, -221,
	-303, -181, -190, -345, 90, -345, 145, -303, 123, -6,
	121, -143, -142, -141, 124, 618, 624, 123, 123, 123,
	85, 85, 85, 158, 85, 85, 85, 158, 85, 158,
	100, -508, 465, 40, 158, 84, 85, 158, 61, 158,
	126, 85, 158, -372, -345, 90, -372, 85, 61, -131,
	90, 158, -191, 37, 38, 157, 438, -345, -519, 85,
	-433, 158, 246, 157, 157, -409, 384, -344, -411, 21,
	547, -321, 39, -328, 126, 646, -345, 85, -374, -374,
	115, -370, -367, 85, 123, -372, 121, -240, -242, 400,
	401, -372, -240, -241, -247, 154, 192, 259, 191, 190,
	188, 400, 401, -259, -345, -372, -372, 85, -372, -372,
	17, -345, -259, -368, -372, -196, -196, 85, 85, -440,
	-441, -440, -440, 85, 85, 85, 85, -440, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 84, 100,
	102, 100, 102, -501, -599, 63, 626, 62, 428, 105,
	313, 158, 100, 90, 647, 158, 126, 90, -345, -345,
	17, 242, -345, 17, 171, 90, -578, 317, 355, -452,
	100, 317, 355, 496, 392, 85, 158, -321, -212, -201,
	84, -201, -568, 467, 408, 418, -341, -364, -363, 357,
	42, -487, 429, 414, 415, -410, 273, -334, -574, 97,
	126, 81, 340, 344, 345, 341, 342, 343, -390, -391,
	-389, -393, -561, 84, 84, -175, 35, 134, -171, 84,
	84, 35, -463, 330, -242, -235, -182, -345, 17, 158,
	-560, 157, -1, -345, -403, -357, -303, -372, -372, -303,
	-357, -357, -359, -345, -227, -463, -242, 35, -283, 239,
	235, -437, 310, 311, -438, -453, 313, -455, 84, -239,
	-321, -232, -532, -533, -392, -345, 111, -532, 111, 84,
	-239, -321, -321, -286, -321, -345, -345, -345, -345, -293,
	-292, -321, -295, 32, -296, -345, -345, -345, -345, 111,
	-345, 111, -264, 41, 48, 49, 50, -341, -341, 195,
	-267, 41, 428, 430, 431, -295, 100, 100, 100, 100,
	90, 90, 90, -341, -341, 100, 90, -348, 90, -534,
	170, 45, 46, 100, 100, 100, 100, 41, 90, -272,
	41, 293, 297, 294, 295, 296, 90, 100, 41, 100,
	41, 100, 41, -345, 84, -535, -536, 90, 329, -452,
	-568, -341, 361, -424, 126, 126, -364, -573, 323, -174,
	496, 32, -205, 239, 235, -561, -415, -414, -321, -187,
	-187, -187, -187, -187, 68, 79, 68, 68, 68, 73,
	68, 73, 68, -311, 79, -415, -189, -201, -348, 85,
	-584, -583, -582, -580, 76, 247, 77, -378, 485, 489,
	490, -411, -360, 90, -418, -209, 24, -235, -235, -485,
	303, 304, 85, 158, -242, -305, 19, 157, -305, 119,
	-6, -139, -141, -372, -6, -372, 620, 374, 621, 90,
	100, 100, -516, 449, 444, 446, 111, -381, -503, -502,
	61, -175, -199, -495, -538, -501, -345, 647, 647, 647,
	647, 61, -175, -495, -209, -508, -193, -192, 44, -345,
	100, 17, -408, -403, 145, 145, -345, 385, -419, 90,
	407, 90, 242, 647, 90, -328, -367, -372, 85, -250,
	179, 178, -250, 35, 85, 85, -470, -470, -469, -472,
	-469, -250, -250, 85, 85, 24, 85, 85, 85, -372,
	85, 85, 158, -491, 505, -492, 580, -440, -440, -440,
	-440, -440, -440, -440, -440, -440, -440, -440, -440, -440,
	-440, -440, -440, -383, -382, 265, 450, 633, 633, 450,
	633, 633, 85, 158, -541, 158, -336, 318, -336, -327,
	90, 246, 90, 168, -345, 90, 636, 90, -345, 90,
	310, -345, -345, 90, 90, -224, -242, 85, 35, -228,
	-229, -230, -239, -231, -233, 35, -569, 94, -564, 90,
	-345, 91, -570, 94, 409, 156, 359, 41, 410, 411,
	426, 354, 100, 100, 416, -562, -345, -173, 242, 355,
	-572, 52, 126, 90, -235, -389, -333, 153, 284, 333,
	-300, -299, -345, 90, -228, -175, -235, -228, -228, -175,
	-464, 332, 21, 100, 144, -202, 82, 157, -190, -236,
	-345, 145, 85, -303, -227, -303, -303, -357, -464, -175,
	-449, 314, 84, -447, 84, -447, 111, 341, -456, -454,
	265, -291, 45, 47, -242, -530, -345, -528, -530, -345,
	-528, -528, -392, -372, -291, -239, 246, 31, 235, -294,
	338, 339, 344, -420, 309, 116, -420, 158, -191, 158,
	-345, -259, -259, 31, 90, 90, -237, 85, 158, 126,
	100, 90, -569, -564, 126, -425, 90, 90, -570, -574,
	126, -238, 242, -334, 158, -205, -205, -303, 158, 126,
	-207, -206, 81, 82, -208, 81, -206, 68, 68, -303,
	-582, -581, 24, -533, -533, -533, 85, 85, 15, -214,
	41, -304, 20, 21, 145, -304, 123, 121, 123, 123,
	-345, 85, 85, -476, 611, -512, -514, 444, 21, 21,
	15, 247, 85, -495, -495, -516, 45, 46, -403, -419,
	429, -235, 158, 647, -240, -372, 85, -372, 85, 90,
	85, 90, -196, 21, 85, 158, 85, 85, 85, 158,
	85, 85, -372, 85, -541, -337, 189, 90, -337, 355,
	-346, -345, 17, -345, 90, -452, 310, 310, 242, 240,
	-175, 85, 158, -175, 90, -567, 420, 90, 90, 100,
	41, 100, 156, 412, -488, -165, 94, -237, 32, -205,
	-571, 94, 126, 646, 84, -341, -341, -341, -345, 85,
	158, -341, -341, 85, 85, 85, -257, 547, -465, 264,
	100, 144, 100, 144, 100, -343, -190, -345, -303, -560,
	157, -303, -465, -439, 315, 100, -368, 84, -368, 84,
	-448, 312, 84, 85, 158, -345, -321, -254, -253, -251,
	105, 116, 41, 398, -252, 94, 153, 298, 301, 300,
	276, 299, -281, -361, 81, 404, 338, 339, -393, 611,
	534, 249, 110, 111, 386, -362, 84, 84, 82, 318,
	84, 84, -530, 85, -291, -321, 41, -294, 41, 351,
	309, -292, -345, 153, -259, 85, -536, 90, -541, -567,
	90, -427, -572, 90, -165, -237, -561, -196, -414, -501,
	-372, 84, -372, 84, 68, 11, 19, -365, -372, -380,
	248, -6, 621, 374, -274, 612, 90, 21, 90, -510,
	90, -415, -476, -134, -271, -333, 281, 85, 85, 85,
	-440, -440, -443, -442, -446, 450, 310, 458, -380, 90,
	90, 85, 85, 90, -345, 168, 90, 646, 90, -452,
	-452, -345, -216, -242, -169, 547, -257, -230, -169, 21,
	547, 358, 41, 100, 41, 413, 90, -173, 126, 106,
	107, -329, -330, 90, -398, -400, -321, 84, -259, -261,
	90, -299, -365, -365, -255, -175, 35, -256, -297, -393,
	547, -133, -132, -255, 547, 84, -466, 162, 100, 144,
	100, 100, -303, -303, -466, -455, 21, 85, -434, 85,
	-434, 84, 126, -368, -454, -457, 61, -251, 105, -368,
	90, -261, -262, 41, 297, 293, 126, 126, -263, 41,
	277, 278, -273, 84, 308, 15, 195, 84, 111, 111,
	-235, -398, -398, -531, 340, 341, 342, 346, 344, 345,
	343, -531, -398, -398, 84, -421, -420, -368, -341, -341,
	153, -571, -197, -200, -529, -345, 249, 21, 21, -486,
	547, -345, -345, -325, 613, 100, 90, 446, -274, -477,
	614, -506, -447, -259, 126, 85, -445, 118, 412, 416,
	-366, -369, 100, 102, 187, 156, 85, 85, -345, -332,
	-331, 90, 90, 90, 310, 546, -170, 60, 492, 90,
	91, 407, 90, 91, 358, -165, 90, 647, 158, 126,
	85, 158, -469, -372, -435, 265, -175, 158, -297, -333,
	-134, -435, -258, -298, -345, 90, -484, 170, 331, 547,
	100, 144, 100, -196, -467, 170, 331, -438, 85, 85,
	85, -434, 100, 85, -461, -458, 84, -297, 267, 136,
	90, 90, 100, 84, -496, 31, 90, -399, 84, 85,
	85, 85, 85, -398, 100, -259, -341, 85, 85, 158,
	638, 84, 21, -325, -478, 615, 90, -515, 449, -509,
	-507, 444, 445, 446, 447, 90, -444, -445, 416, -366,
	-369, 609, 456, 456, 456, 647, 158, 126, -452, -218,
	-345, 308, 429, -330, 90, -401, -400, -191, 85, -436,
	317, 21, -297, -341, -436, 85, 158, -341, -341, 331,
	100, 144, 100, -197, 331, -450, 316, 85, -461, -297,
	-460, -459, 315, 268, 84, 85, -372, -384, -341, 85,
	-276, -275, 543, -398, -401, 82, -401, 82, -401, 82,
	-401, 82, 85, -259, -345, 249, -326, -345, -510, 90,
	-517, 247, -513, -514, 448, -507, 21, 446, 21, 21,
	-135, 158, 115, 457, 457, 457, -331, 90, 90, -217,
	35, 451, 385, -402, 255, 351, 352, 94, 547, 338,
	339, -191, 21, -437, -259, -298, -365, -365, 100, 100,
	85, 158, -345, 264, 84, -379, -373, -372, 264, 85,
	-345, -280, -278, -279, 81, 463, 306, 307, 85, -531,
	-531, -531, -531, -281, 85, 158, -524, 84, 100, -512,
	-511, -513, 21, -510, 21, -510, -510, 453, -444, 90,
	-341, -341, 90, 90, 337, -321, 84, -449, -459, -458,
	-379, 85, 158, -420, -279, 81, -278, 81, 16, 15,
	-401, -401, -401, -401, -345, -527, 31, 85, -523, -522,
	-322, -518, -345, 449, 450, 90, -510, 126, -602, -601,
	632, 100, 100, -345, -434, -439, 85, -373, -277, 303,
	304, 31, 170, -277, -526, -525, -323, 85, 158, 157,
	90, 90, 85, -455, 105, 41, 305, 158, 126, -522,
	-345, -525, 41, -372, 157, -345,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 309, 310, 311, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 0, 0,
	0, 0, 0, 691, 692, 0, 655, 0, 0, 0,
	0, 0, 0, 538, 539, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 414, 415, 416,
	417, 418, 419, 420, 421, 422, 423, 0, 334, 330,
	253, 254, 255, 256, 257, 258, 341, 342, 515, 0,
	0, 0, 0, 774, -2, 97, 0, 0, 0, 0,
	0, 323, 0, 314, 314, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, -2, 704,
	0, 656, 657, 658, 659, 660, 661, 662, 663, 664,
	665, 666, 667, 668, 669, 670, 671, 672, 398, 399,
	400, 394, 395, 397, 396, -2, 0, 0, 704, 0,
	0, 0, 782, 0, 0, 0, 825, 847, 23, 0,
	7, 9, 10, 11, 12, 13, 14, 15, 16, 17,
	18, 0, 0, 19, 0, 19, 0, 0, 0, 1364,
	1365, 1366, 1367, 2151, 2121, -2, 1890, 1867, 2045, 2046,
	1945, 1956, 1957, 2183, 2184, 2185, 2186, 2187, 2188, 2189,
	2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199,
	2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209,
	2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219,
	2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229,
	2230, 2231, 2232, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
	1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
	1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
	1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
	1861, 1862, 1863, 1864, 1865, 1866, 1868, 1869, 1870, 1871,
	1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881,
	1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1891, 1892,
	1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902,
	1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912,
	1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922,
	1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932,
	1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942,
	1943, 1944, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953,
	1954, 1955, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966,
	1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976,
	1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986,
	1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
	1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
	2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
	2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026,
	2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036,
	2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2047, 2048,
	2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058,
	2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068,
	2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, -2,
	2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088,
	2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098,
	2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
	2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118,
	2119, 2120, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129,
	2130, 2131, 2132, 2133, 2134, 2135, 2136, -2, -2, -2,
	2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149,
	2150, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160,
	2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170,
	2171, 2172, 0, 307, 305, 1837, 1867, 1890, 1945, 1956,
	1957, 1958, 1993, 2045, 2046, 2078, 2121, 2137, 2138, 2139,
	2151, 0, 0, 966, 0, 752, 0, 0, 757, 1313,
	752, 335, 693, 694, 782, 808, 653, 0, 372, 0,
	1881, 376, 2128, 0, 0, 0, 0, 650, 366, 367,
	368, 369, 370, 371, 0, 0, 939, 0, 0, 362,
	0, 329, 1947, 2150, 1368, 0, 0, 0, 0, 0,
	196, 1090, 198, 1092, 202, 210, 0, 0, 0, 215,
	216, 219, 220, 221, 222, 223, 0, 227, 0, 229,
	232, 0, 234, 235, 0, 238, 239, 240, 0, 250,
	251, 252, 1093, 1094, 1095, -2, 125, 964, 1795, 1681,
	0, 1688, 1701, 1712, 1445, 1446, 1447, 1448, 0, 0,
	0, 0, 0, 0, 1456, 1457, 0, 1485, 2187, 2228,
	2229, 0, 1465, 1466, 1467, 1468, 1469, 1470, 136, 148,
	149, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 0, 1742,
	1743, 1744, 1652, 1432, 1364, 0, 2196, 0, 2218, 2223,
	2224, 2225, 2226, 2217, 0, 0, 1637, 0, 1627, 0,
	0, -2, -2, 0, 0, 2018, -2, 2230, 2231, 2232,
	2193, 2214, 2222, 2197, 2198, 2221, 2189, 2190, 2191, 2184,
	2185, 2186, 2188, 2200, 2202, 2213, 0, 2209, 2219, 2220,
	2126, 0, 0, 0, 0, 0, 2168, 150, 151, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1648, -2, -2, 1651,
	-2, 1654, -2, -2, -2, -2, 1659, 1660, -2, 1662,
	-2, -2, -2, -2, -2, -2, -2, 1639, 1640, 1641,
	1642, 1631, 1632, 1633, 1634, 1635, 1636, -2, -2, -2,
	808, 889, 0, 808, 0, 783, 830, 833, 836, 839,
	786, 0, 0, 98, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 324, 325, 313, 315, 0,
	319, 0, 312, 1126, 1126, 1126, 0, 0, 0, 0,
	1126, 1126, 1126, 1126, 1126, 0, 1126, 0, 0, 0,
	0, 0, 1126, 0, 999, 1097, 1098, 1099, 1124, 1125,
	1198, 0, 0, 0, 709, 705, 706, 707, 708, 796,
	0, 798, 801, 0, 630, 630, 858, 858, 576, 0,
	0, 0, 630, 0, 590, 582, 0, 0, 0, 630,
	0, 0, 803, 803, 0, 633, 640, 630, 630, -2,
	630, 630, 627, 630, 0, 0, 1138, 596, 597, 598,
	582, 582, 601, 602, 603, 613, 614, 641, 1819, 0,
	0, 515, 515, 0, 515, 515, 0, 515, 515, 515,
	0, 711, 1988, 1888, 1963, 1847, 1947, 2150, 0, 280,
	2018, 285, 0, 1889, 1908, 0, 0, 1926, 0, -2,
	0, 351, 808, 0, 0, 782, 0, 0, 0, 0,
	515, 515, 515, 515, 515, 1197, 515, 515, 515, 515,
	515, 0, 0, 0, 515, 515, 515, 515, 0, 0,
	848, 849, 844, 845, 846, 850, 851, 5, 6, 19,
	0, 0, 0, 0, 0, 0, 104, 103, 0, 1796,
	1814, 1747, 1748, 1749, 1801, 1751, 1805, 1805, 1805, 1805,
	1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
	1805, 1805, 0, 0, 1794, 1771, 1803, 1803, 1803, 1801,
	1798, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1808, 1808, 1811, 1811, 1808,
	0, 412, 410, 411, 1677, 0, 0, 0, 0, 752,
	756, 1311, 0, 0, 0, 808, -2, 0, 0, 654,
	373, 1369, 0, 0, 377, 0, 378, 0, 0, 380,
	0, 0, 0, 401, 0, 404, 388, 389, 390, 391,
	384, 0, 176, 0, 364, 365, 0, 0, 331, 0,
	0, 0, 516, 0, 0, 0, 0, 0, 0, 207,
	203, 211, 214, 224, 231, 0, 243, 245, 248, 204,
	212, 217, 218, 225, 246, 205, 208, 209, 213, 247,
	249, 206, 226, 230, 244, 228, 233, 236, 237, 242,
	0, 177, 0, 0, 0, 0, 0, 1687, 0, 0,
	1720, 1721, 1722, 1723, 1724, 1725, 1726, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 1681, 0, 0,
	1451, 1452, 1453, 1454, 0, 1458, 0, 1486, 0, 0,
	0, 0, 0, 1741, 1745, 0, 1677, 1677, 0, 1677,
	1673, 0, 0, 0, 0, 0, 0, 1677, 1610, 0,
	0, 1612, 1628, 0, 0, 1614, 1615, 0, 1618, 1619,
	1677, 0, 1677, 1623, 1677, 1677, 1677, 1606, 1607, 0,
	1673, 1673, 1673, 1673, 0, 0, 1673, 1673, 1673, 1673,
	1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
	0, 0, 0, 0, 803, 0, 809, 0, -2, 0,
	827, 829, 831, 832, 834, 835, 837, 838, 840, 841,
	788, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	71, 73, 0, 0, 0, 0, 0, 0, 0, 317,
	0, 322, 0, 0, 0, 0, 0, 963, 0, 0,
	1126, 1126, 1126, 1000, 0, 0, 0, 0, 0, 0,
	0, 0, 1126, 1126, 1126, 1126, 0, 1144, 0, 0,
	0, 711, 710, 0, 797, 0, 0, 70, 858, 0,
	0, 573, 574, 0, 575, 0, 582, 630, 630, 588,
	589, 584, 583, 636, 637, 633, 0, 633, 633, 858,
	0, 607, 608, 609, 630, 630, 615, 804, 0, 616,
	617, 633, 0, 638, 639, 858, 0, 0, 858, 858,
	0, 625, 626, 628, 630, 0, 0, 1126, 0, 646,
	584, 584, 1820, 1821, 0, 0, 1135, 0, 0, 0,
	0, 649, 0, 0, 0, 428, 429, 0, 0, 712,
	259, 263, 0, 266, 0, 1988, 0, 1988, 0, 0,
	273, 0, 0, 0, 0, 0, 0, 303, 304, 0,
	0, 0, 0, 294, 297, 1305, 1306, 1087, 1088, 298,
	299, 343, 344, 0, 803, 826, 828, 822, 823, 824,
	0, 72, 0, 0, 0, 0, 0, 515, 0, 0,
	0, 0, 0, 687, 0, 979, 689, 0, 0, 0,
	0, 0, 866, 860, 862, 934, 136, 866, 8, 121,
	118, 0, 19, 0, 0, 19, 19, 0, 19, 308,
	0, 1817, 1815, 1816, 1750, 1802, 0, 1776, 0, 1777,
	1778, 1779, 1790, 1791, 0, 0, 1772, 0, 1773, 1774,
	1775, 1766, 0, 1767, 1768, 0, 1769, 1770, 306, 409,
	0, 0, 1678, 967, 0, 730, 744, 725, 0, 733,
	0, 0, 1313, 0, 0, 0, 713, 744, 715, 0,
	733, 803, 780, 0, 758, 0, 0, 374, 0, 385,
	379, 0, 386, 381, 382, 0, 0, 403, 405, 406,
	407, 392, 393, 651, 360, 361, 352, 353, 354, 355,
	356, 357, 358, 359, 0, 0, 0, 363, 146, 0,
	332, 333, 0, 0, 0, 190, 191, 192, 193, 194,
	195, 197, 181, 676, 678, 1079, 1091, 0, 1082, 0,
	200, 241, 173, 0, 0, 0, 1682, 1683, 1684, 1685,
	1686, 1691, 0, 1693, 1695, 1697, 1699, 0, 1717, -2,
	-2, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
	1442, 1443, 1444, 1702, 1715, 1716, 0, 0, 0, 0,
	0, 0, 1713, 1713, 1708, 0, 1471, 1307, 1308, 1449,
	0, 0, 1483, 1487, 0, 0, 0, 0, 0, 137,
	1672, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585,
	1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
	1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605,
	0, 0, 1681, 0, 0, 0, 1674, 1675, 0, 0,
	0, 1565, 0, 0, 1571, 1572, 1573, 0, 739, 0,
	1638, 1611, 1629, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	888, 890, 0, 748, 750, 751, 777, 758, 784, 0,
	0, 0, 96, 101, 0, 1165, 0, 0, 0, 0,
	0, 0, 0, 74, 1139, 75, 1141, 76, 326, 327,
	0, 0, 321, 0, 0, 0, 0, 0, -2, 0,
	0, 0, 0, 0, 1015, 1016, 513, 1073, 0, 0,
	0, 1089, 1114, 1122, 0, 0, 0, 0, 0, 1171,
	1001, 1006, 1007, 1008, 1002, 1003, 1009, 1010, 0, 799,
	0, 0, 903, 572, 631, 632, 859, 579, 1947, 584,
	858, 858, 591, 585, 592, 635, 593, 594, 595, 633,
	858, 858, 805, 630, 633, 618, 634, 633, 1313, 622,
	0, 629, 1313, 647, 1313, 0, 645, 599, 600, 1173,
	801, 426, 427, 432, 434, 0, 483, 483, 483, 466,
	483, 0, 0, 454, 1822, 0, 0, 0, 0, 463,
	1822, 0, 0, 1822, 1822, 1822, 1822, 1822, 1822, 1822,
	0, 0, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822,
	1822, 1822, 1822, 0, 1822, 1822, 1822, 1822, 1822, 1290,
	1822, 0, 482, 1136, 473, 474, 475, 476, 481, 0,
	0, 510, 0, 0, 1014, 0, 513, 0, 1056, 0,
	0, 871, 0, 872, 873, 874, 869, 905, 929, 929,
	0, 929, 909, 1313, 0, 0, 271, 272, 260, 0,
	261, 0, 0, 274, 275, 0, 277, 278, 279, 286,
	1888, 1963, 281, 283, 0, 0, 287, 300, 301, 302,
	0, 0, 292, 293, 0, 0, 346, 347, 349, 0,
	758, 1140, 673, 1309, 674, 675, 679, 0, 0, 682,
	683, 684, 685, 686, 981, 0, 0, 1065, 1066, 1067,
	1068, 858, 0, 867, 0, 863, 935, 0, 937, 0,
	858, 0, 119, 19, 0, 112, 109, 0, 0, 0,
	0, 0, 1797, 1746, 1818, 0, 0, 0, 1799, 0,
	0, 0, 0, 0, 102, 760, 720, 0, 724, 741,
	0, 745, 0, 0, 737, 729, 734, 0, 0, 754,
	721, 1312, 0, 0, 0, 714, 0, 0, 719, 758,
	0, 781, 810, 811, 814, 1370, 0, 387, 383, 402,
	0, 515, 0, 0, 0, 184, 1076, 0, 185, 189,
	179, 0, 0, 0, 1081, 0, 1078, 1083, 0, 199,
	0, 0, 174, 175, 1156, 1165, 0, 0, 0, 1692,
	1694, 1696, 1698, 1700, 0, 1703, 1713, 1713, 1709, 0,
	1704, 0, 1706, 0, 1682, 1455, 0, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 1555, 1556, 0, 0,
	1560, 0, 1562, 1563, 1564, 1566, 0, 0, 0, 1570,
	0, 1609, 1630, 1613, 1616, 0, 1620, 0, 1622, 1624,
	1625, 1626, 0, 808, 808, 0, 0, 1527, 1527, 1527,
	0, 0, 0, 0, 1527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1472, 0, 1473, 1474, 0,
	0, 0, 891, 778, 0, 0, 0, 0, 0, 1163,
	0, 86, 0, 0, 0, 0, 91, 0, 0, 328,
	316, 318, 0, 0, 1127, 0, 0, 0, 0, 0,
	969, 970, 972, 0, 975, 976, 977, 981, 801, 0,
	801, 1026, 1822, 517, 0, 0, 1075, 0, 1045, 0,
	0, 0, -2, 0, 0, 1122, 0, 0, 0, 1175,
	0, 0, 0, 698, 702, 23, 802, 0, 577, 0,
	578, 630, 586, 587, 858, 610, 611, 0, 0, 858,
	630, 630, 621, 633, 642, 0, 643, 1313, 1175, 0,
	0, 1135, 1241, 1209, 444, 0, 1325, 1326, 484, 0,
	1332, 1341, 1126, 1402, 0, 1341, 0, 0, 1343, 1344,
	0, 0, 0, 0, 467, 468, 0, 453, 0, 0,
	0, 0, 0, 0, 452, 0, 0, 494, 0, 0,
	0, 0, 0, 1823, 1822, 1822, 0, 461, 462, 0,
	465, 0, 0, 0, 0, 0, 0, 0, 0, 1822,
	1822, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1281, 0, 0, 0, 0, 0, 0, 0,
	0, 1297, 1298, 0, 1026, 1822, 0, 0, 0, 0,
	517, 1043, 1061, 0, 430, 431, 491, 0, 0, 0,
	0, 0, 0, 895, 0, 0, 0, 894, 0, 0,
	0, 0, 0, 0, 801, 930, 0, 932, 933, 907,
	-2, 0, 871, 912, 1677, 264, 265, 0, 0, 270,
	288, 290, 262, 0, 0, 0, 289, 291, 295, 296,
	345, 348, 350, 820, 0, 0, 1199, 0, 982, 983,
	985, 986, 0, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1872, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 980, 690,
	854, 861, 868, 936, 938, 137, 864, 854, 0, 122,
	19, 121, 113, 114, 0, 19, 0, 0, 0, 0,
	1807, 1806, 1792, 0, 1793, 1804, 1809, 0, 1812, 0,
	413, 764, 0, 0, 744, 746, 0, 0, 744, 0,
	0, 753, 0, 0, 0, 0, 0, 0, 744, 820,
	760, 0, 817, 815, 816, 0, 0, 652, 147, 408,
	0, 0, 0, 0, 0, 677, 0, 1080, 181, 0,
	0, 201, 0, 0, 0, 1165, 1160, 1676, 1705, 1707,
	0, 1714, 1710, 1450, 1459, 1484, 0, 0, 1490, 1502,
	1502, 0, 0, 0, 1493, 1805, 1805, 1496, 1801, 1803,
	1801, 1502, 1502, 0, 138, 0, 0, 1561, 0, 0,
	0, 740, 0, 0, 0, 1523, 1525, 1527, 1527, 1534,
	1528, 1535, 1536, 1527, 1527, 1527, 1527, 1541, 1527, 1527,
	1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1521, 0,
	0, 1735, 1736, 749, 0, 0, 791, 792, 793, 794,
	795, 0, 0, 61, 61, 1165, 0, 95, 87, 0,
	0, 0, 0, 0, 320, 0, 77, 78, 0, 0,
	85, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	1318, 0, 1030, 1027, 1028, 1029, 0, 1070, 518, 519,
	520, 521, 0, 0, 0, 1074, 0, 0, 1038, 0,
	0, 0, 1115, 1116, 1117, 1118, 1119, 1120, 1121, -2,
	1130, 0, 0, 0, 1318, 1149, 0, 0, 1154, 1318,
	1318, 0, 1183, 0, 1172, 752, 0, -2, 0, 0,
	700, 0, 0, 904, 580, 858, 604, 806, 807, 1313,
	858, 858, 630, 648, 644, 1183, 1174, 0, 433, 483,
	0, 1229, 0, 0, 1235, 0, 1242, 437, 0, 485,
	0, 1331, 1358, 1342, 1358, 1403, 1358, 1358, 1126, 0,
	485, 0, 0, 455, 0, 0, 0, 0, 0, 451,
	488, 814, 438, 440, 441, 442, 492, 493, 495, 0,
	497, 498, 457, 469, 470, 471, 472, 0, 0, 0,
	464, 477, 478, 479, 480, 439, 1258, 1259, 1260, 1263,
	1264, 1265, 1266, 0, 0, 1269, 1270, 1271, 1272, 1273,
	1355, 1356, 1357, 1274, 1275, 1276, 1277, 1278, 1279, 1280,
	1299, 1300, 1301, 1302, 1303, 1304, 1282, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 0, 0, 1294, 0, 0, 0,
	1030, 0, 0, 0, 0, 0, 1070, 1045, 0, 1063,
	0, 1057, 1058, 0, 0, 722, 858, 338, 0, 899,
	892, 0, 878, 879, 896, 880, 897, 898, 884, 0,
	886, 0, 882, 883, 881, 858, 870, 906, 931, 908,
	911, 913, 914, 920, 0, 0, 0, 0, 267, 268,
	269, 276, 0, 537, 282, 776, 0, 1310, 680, 681,
	1200, 1201, 688, 0, 987, 852, 0, 0, 852, 117,
	120, 0, 115, 0, 0, 0, 0, 107, 105, 1800,
	0, 0, 766, 161, 0, 0, 0, 742, 0, 747,
	744, 728, 738, 727, 735, 736, 755, 1314, 1315, 1316,
	1317, 744, 718, 717, 779, 764, 812, 813, 0, 1371,
	375, 0, 1077, 181, 186, 187, 188, 182, 180, 1084,
	0, 1086, 0, 1158, 0, 0, 1711, 1489, 1460, 1491,
	1503, 1504, 1492, 0, 1462, 1463, 1494, 1495, 1497, 1498,
	1499, 1500, 1501, 1464, 1557, 0, 1559, 1567, 1568, 0,
	1617, 1621, 0, 0, 0, 0, 0, 1532, 1533, 1537,
	1538, 1539, 1540, 1542, 1543, 1544, 1545, 1546, 1547, 1548,
	1549, 1550, 1551, 808, 1522, 0, 0, 0, 0, 0,
	0, 0, 789, 0, 0, 0, 63, 0, 63, 1164,
	1166, 0, 934, 0, 0, 92, 0, 0, 79, 80,
	0, 0, 0, 962, 965, 971, 973, 0, 0, 0,
	1319, 1320, 1322, 1323, 1324, 0, 998, 0, 0, 1018,
	1019, 1020, 1032, 0, 0, 0, 523, 524, 0, 0,
	0, 536, 532, 533, 534, 514, 1069, 1052, 0, 0,
	1041, 0, 0, 1051, 0, 1131, 1822, 1822, 1822, 0,
	0, 1243, 1822, 1822, 0, 1151, 1153, 0, 0, 1247,
	1186, 0, 0, 1177, 0, 929, 0, 0, 858, 699,
	702, 703, 800, 581, 619, 623, 620, 858, 1186, 425,
	1207, 0, 0, 0, 0, 0, 1239, 0, 0, 1211,
	0, 456, 486, 0, -2, 0, 1359, 0, 1345, 1359,
	0, 0, 1358, 0, 445, 485, 0, 0, 0, 499,
	503, 504, 0, 501, 1398, 0, 502, 0, 490, 0,
	496, 1261, 1262, 0, 1267, 1268, 0, 1292, 0, 0,
	0, 436, 505, 0, 0, 0, 506, 507, 512, 1038,
	0, 1052, 0, 1062, 0, 1059, 1060, 808, 0, 0,
	875, 900, 0, 0, 876, 0, 877, 885, 887, 337,
	915, 0, 0, 917, 918, 919, 910, 284, 821, 984,
	0, 842, 0, 0, 865, 843, 0, 19, 0, 0,
	110, 1810, 1813, 768, 0, 765, 162, 0, 0, 0,
	0, 732, 743, 726, 716, 766, 818, 819, 183, 178,
	1085, 1168, 0, 1159, 0, 0, 1569, 0, 1527, 1524,
	1527, 1526, 1518, 0, 1475, 0, 1477, 1478, 1479, 0,
	1481, 1482, 0, 787, 0, 59, 0, 62, 60, 0,
	94, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	1004, 1247, 0, 1004, 1031, 1017, 0, 1071, 1072, 0,
	525, 526, 0, 529, 535, 1033, 0, 0, 1035, 1036,
	1037, 0, 0, 1049, 0, 0, 0, 0, 1123, 1137,
	0, 0, 0, -2, 0, -2, 1148, 0, 1192, 0,
	1184, 0, 1176, 0, 1179, 858, 858, -2, 696, 701,
	0, 624, 1192, 1209, 0, 1230, 0, 0, 0, 0,
	0, 0, 0, 1210, 0, 1223, 487, 1360, -2, 1374,
	1376, 0, 1136, 1379, 1380, 0, 0, 0, 0, 0,
	0, 1424, 1388, 0, 0, 1392, 1393, 1394, 0, 0,
	1397, 0, 1729, 1730, 0, 1401, 0, 0, 0, 0,
	0, 0, 0, 1339, 446, 447, 0, 449, 450, 1822,
	1399, 489, 443, 1822, 459, 1291, 1295, 1296, 1293, 511,
	508, 509, 1041, 1044, 1055, 1064, 723, 803, 339, 340,
	901, 0, 893, 924, 921, 0, 0, 988, 853, 856,
	111, 116, 0, 0, 770, 0, 767, 0, 761, 763,
	172, 731, 768, 132, 164, 0, 0, 1461, 1558, 1608,
	1530, 1531, 0, 1519, 0, 1513, 1514, 1515, 1520, 0,
	0, 790, 785, 64, 90, 0, 93, 68, 81, 0,
	0, 0, 0, 990, 997, 1011, 1142, 1321, 996, 0,
	0, 522, 527, 0, 530, 531, 1053, 1052, 0, 1039,
	1040, 0, 1047, 0, 0, 1110, 1801, 0, 1132, 1133,
	1134, 1244, 1245, 1246, 1202, 1150, 0, -2, 1255, 0,
	0, 1146, 1168, 1202, 0, 0, 1180, 0, 1187, 0,
	1185, 1178, 808, 697, 1189, 435, 1241, 1231, 0, 1233,
	0, 0, 0, 0, 1212, -2, 0, 1375, 1377, 1378,
	1381, 1382, 1383, 1429, 1430, 1431, 0, 0, 1386, 1426,
	1427, 1428, 1387, 0, 0, 0, 0, 0, 1727, 1728,
	1422, 0, 0, 1346, 1348, 1349, 1350, 1351, 1352, 1353,
	1354, 1347, 0, 0, 0, 1338, 1340, 448, 0, 0,
	1822, 1054, 336, 0, 0, 925, 927, 922, 923, 855,
	0, 106, 108, 123, 0, 769, 163, 0, 770, 134,
	0, 155, 0, 1169, 0, 1529, 1516, 0, 0, 0,
	0, 0, 1731, 1732, 1733, 0, 1476, 1480, 89, 0,
	66, 0, 82, 83, 0, 0, 0, 1012, 1013, 1021,
	1022, 0, 1024, 1025, 528, 1034, 1042, 1046, 1049, 0,
	1101, 0, 814, 0, 1204, 0, 1152, 1135, 1257, 1822,
	1155, 1204, 0, 1249, 1822, 1822, 1170, 0, 1182, 0,
	1194, 0, 1188, 803, 424, 0, 1191, 1227, 1232, 1234,
	1236, 0, 1240, 1238, 1213, -2, 0, 1221, 0, 0,
	1384, 1385, 0, 0, 1627, 1822, 0, 1417, 0, 1101,
	1101, 1101, 1101, 0, 500, 458, 0, 902, 916, 0,
	857, 0, 0, 759, 124, 0, 133, 152, 0, 165,
	166, 0, 0, 0, 0, 1161, 0, 1505, 0, 0,
	0, 1509, 1510, 1511, 1512, 65, 68, 0, 0, 0,
	989, 0, 1023, 1048, 1050, 1100, 1111, 1112, 814, 1145,
	0, 1241, 1256, 0, 1147, 1248, 0, 0, 0, 1181,
	1193, 0, 1196, 695, 1190, 1208, 0, 1237, 1214, 1222,
	0, 1217, 0, 0, 0, 1425, 0, 1391, 0, 1396,
	1405, 1418, 0, 0, 1327, 0, 1329, 0, 1333, 0,
	1335, 0, 0, 460, 926, 928, 0, 772, 762, 135,
	139, 0, 161, 158, 0, 167, 0, 0, 0, 0,
	1157, 0, 0, 1506, 1507, 1508, 67, 69, 84, 0,
	991, 992, 1005, 1102, 1822, 1822, 0, 0, 0, 1108,
	1109, 1113, 0, 1229, 1261, 1250, 1251, 1252, 1195, 1228,
	1216, 0, -2, 1224, 0, 0, 1679, 1689, 1690, 1389,
	1395, 1404, 1406, 1407, 0, 1419, 1420, 1421, 1423, 1101,
	1101, 1101, 1101, 1337, 771, 0, 126, 0, 0, 156,
	157, 159, 0, 168, 0, 170, 171, 0, 1517, 993,
	0, 0, 1105, 1106, 0, 1205, 0, 1207, 1218, -2,
	0, 1226, 0, 1390, 1408, 0, 1409, 0, 0, 0,
	1328, 1330, 1334, 1336, 773, 1167, 0, 140, 0, 142,
	144, 145, 1361, 153, 154, 160, 169, 0, 978, 994,
	0, 1103, 1104, 1107, 0, 1209, 1225, 1680, 1410, 1412,
	1413, 0, 0, 1411, 127, 128, 0, 141, 0, 0,
	1162, 995, 1206, 1203, 1414, 1416, 1415, 0, 0, 143,
	1362, 129, 130, 131, 0, 1363,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 117, 3, 3, 3, 148, 140, 3,
	84, 85, 145, 143, 158, 144, 157, 146, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 648, 645,
	127, 126, 128, 3, 649, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 150, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 646, 139, 647, 151,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 118, 119, 120, 121, 122, 123, 124,
	125, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 141, 142, 147, 149, 152, 153, 154, 155, 156,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:834
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:841
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:847
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:855
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:861
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:865
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:880
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:884
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:890
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:895
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:899
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:932
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:946
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:957
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:969
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:973
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:978
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:982
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:988
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1002
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1006
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1010
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1014
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1021
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1029
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1037
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1043
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1050
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1059
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1067
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1075
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1085
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1095
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1107
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1117
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1127
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1138
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1149
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1163
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1171
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1179
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1187
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1196
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1206
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1218
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1226
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1235
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1245
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1255
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1265
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1285
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1291
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1298
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1306
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1312
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1321
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1331
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1339
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1347
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1355
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1365
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1373
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1383
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1390
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1399
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1409
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1413
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1419
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1423
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1429
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1438
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1448
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1452
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1458
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1467
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1471
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1477
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1498
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1512
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1519
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1523
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1529
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1533
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1539
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1546
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1554
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1558
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1570
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1574
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1588
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1592
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1597
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1604
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1608
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1612
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1618
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1627
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1638
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1642
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1648
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1652
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1658
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1662
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1668
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1692
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1711
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1715
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1719
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1724
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1728
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1737
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1747
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1754
		{
			yyVAL.str = yyDollar[3].str
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1759
		{
			yyVAL.str = "\n"
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1766
		{
			yyVAL.str = yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1771
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1775
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1803
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1807
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1813
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1821
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1841
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1860
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1885
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1889
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1893
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1898
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1902
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1908
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1921
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1932
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1945
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1949
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1959
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1972
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1985
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1991
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1997
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2005
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2015
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2025
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2029
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2033
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2037
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2041
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2045
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2052
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2056
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2062
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2069
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2078
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2082
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2088
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2092
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2096
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2100
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2104
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2108
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2112
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2116
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2120
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2124
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2128
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2132
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2136
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2140
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2144
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2148
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2152
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2156
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2160
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2164
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2168
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2172
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2176
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2180
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2184
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2188
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2192
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2196
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2200
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2204
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2208
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2212
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2216
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2220
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2224
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2228
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2232
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2236
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2240
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2244
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2248
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2252
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2256
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2260
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2264
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2268
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2272
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2276
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2280
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2284
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2288
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2302
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2309
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2316
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2325
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2343
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2347
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2353
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2360
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2368
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2372
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2376
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2380
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2386
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2390
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2396
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2403
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2410
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2419
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2449
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2453
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2457
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2463
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2469
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2473
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2480
		{
			yyVAL.str = yyDollar[3].str
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2486
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2490
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2496
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2504
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2513
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2522
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2530
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2538
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2561
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2584
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2591
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2598
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2606
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2613
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2620
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2629
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2633
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2637
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2643
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2647
		{
			yyVAL.str = yyDollar[1].str
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2653
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2657
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2663
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2667
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2678
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2684
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2689
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2693
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2697
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2701
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2705
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2709
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2713
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2717
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2721
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2727
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2731
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2735
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2739
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2744
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2749
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2755
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2768
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2781
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2794
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2807
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2823
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2830
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2841
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2852
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2856
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2862
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2872
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2878
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2882
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2888
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2894
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2898
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2902
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2906
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2912
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2925
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2931
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2935
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2941
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2945
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2951
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2957
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2968
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2974
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2978
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2982
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2986
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2990
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2994
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3002
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3010
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3020
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3028
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3038
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3048
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3064
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3068
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3076
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3084
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3124
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3128
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3134
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3140
		{
			yyVAL.str = yyDollar[1].str
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3145
		{
			yyVAL.str = "true"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3146
		{
			yyVAL.str = "false"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3147
		{
			yyVAL.str = yyDollar[1].str
		}
	case 408:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3152
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3158
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3167
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3174
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3182
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3186
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3211
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3234
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3244
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3251
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3260
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3268
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3272
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3278
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3289
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3293
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3299
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3303
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3327
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3337
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3347
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3363
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3381
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3385
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3391
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3395
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3401
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3407
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3415
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3425
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3433
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3443
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3453
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3463
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3470
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3474
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3478
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3482
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3486
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3493
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3499
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3503
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3507
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3511
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3515
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3519
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3523
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3527
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3532
		{
			yyVAL.str = ""
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3563
		{
			yyVAL.str = ""
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3567
		{
			yyVAL.str = string("COLUMN")
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3572
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3578
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3584
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3592
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3596
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3602
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3610
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3617
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3623
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3629
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3635
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3641
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3648
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3655
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3663
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3669
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3681
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3687
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3695
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3699
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3706
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3724
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3739
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3754
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3769
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3782
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3788
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3799
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3812
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3816
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3824
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3828
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3833
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3837
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3853
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3857
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3861
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3865
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3872
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3876
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3880
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3884
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3891
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3895
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3902
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3906
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3910
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3914
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3921
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3928
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3934
		{
			yyVAL.item = nil
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3939
		{
			yyVAL.item = nil
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3984
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3993
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4001
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4009
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4017
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4021
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4025
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4036
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4040
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4046
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4051
		{
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4055
		{
		}
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4060
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4070
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4080
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4088
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4094
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4100
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4106
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4112
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4118
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4124
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4133
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4137
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4141
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4145
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4149
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4153
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4157
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4161
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4167
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4176
		{
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4178
		{
		}
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4187
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4197
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4206
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4210
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4214
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4220
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4226
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4232
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4238
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4247
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4258
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4270
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4278
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4284
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4296
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4310
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4316
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4322
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4329
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4333
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4338
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4342
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4346
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4351
		{
			yyVAL.str = ""
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4355
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4361
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4376
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4380
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4386
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4394
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4401
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4409
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4415
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4421
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4426
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4434
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4440
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4445
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4451
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4457
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4461
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4489
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4497
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4505
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4513
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4517
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4523
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4536
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4544
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4553
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4559
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4567
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4575
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4583
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4589
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4597
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4603
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4611
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4617
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4627
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4632
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4639
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4655
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4668
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4679
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4683
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4689
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4695
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4704
		{
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4706
		{
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4709
		{
		}
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4718
		{
		}
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4722
		{
		}
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4727
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4736
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4743
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4749
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4757
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4764
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4771
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4791
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4799
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4809
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4813
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4819
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4826
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4832
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4840
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4847
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4854
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4873
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4877
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4881
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4886
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4890
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4894
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4900
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4909
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4913
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4919
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4923
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4929
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4933
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4939
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4944
		{
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4948
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4955
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4959
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4966
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4971
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4975
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4981
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4985
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4991
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4995
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5000
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5004
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5017
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5028
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5039
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5061
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5084
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5092
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5101
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5105
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5118
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5122
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5127
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5131
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5138
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5143
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5150
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5156
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5160
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5164
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5168
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5172
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5176
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5181
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5185
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5191
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5201
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5216
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5220
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5234
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5238
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5244
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5253
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5257
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5261
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5265
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5269
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5275
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5282
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5291
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5295
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5301
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5309
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5313
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5318
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5322
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5328
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5332
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5336
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5341
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5345
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5351
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5357
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5361
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5367
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5372
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5376
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5380
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5385
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5389
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5393
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5398
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5402
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5410
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5414
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5418
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5432
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5436
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5446
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5456
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5466
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5478
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5486
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5494
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5503
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5511
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5519
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5527
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5535
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5543
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5551
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5559
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5567
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5577
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5588
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5602
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5606
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5610
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5615
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5619
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5623
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5632
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5636
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5641
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5645
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprs: yyDollar[3].exprsUnion(),
				RollUp:       yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5653
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5657
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5662
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5666
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5672
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5676
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5682
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5686
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5690
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5694
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5699
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5707
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5713
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5721
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5731
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5741
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5745
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5751
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5760
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5769
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5778
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:5788
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5798
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5802
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5808
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5812
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5822
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 885:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5826
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 886:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5830
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 887:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5834
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 888:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5840
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5850
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5854
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5860
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5866
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5870
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5876
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5882
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5886
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5890
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5894
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 899:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5900
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5904
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5910
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5914
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5920
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5924
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5930
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5934
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5944
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5957
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5963
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5969
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5983
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5994
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6001
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6005
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6011
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6021
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6025
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6029
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6034
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6038
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6042
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6046
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6051
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6055
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6059
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6063
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6067
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6072
		{
			yyVAL.str = ""
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6076
		{
			yyVAL.str = yyDollar[1].str
		}
	case 931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6080
		{
			yyVAL.str = yyDollar[2].str
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6086
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6090
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 934:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6095
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6099
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6103
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6107
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6111
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6117
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 962:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6159
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6172
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6178
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 965:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6184
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6197
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6202
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6209
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6216
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6220
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6226
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6232
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6237
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6241
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6245
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6249
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6256
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6289
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6294
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6301
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6308
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6312
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6318
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6324
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6328
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6332
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6338
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6344
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6350
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6354
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6360
		{
			yyVAL.str = ""
		}
	case 995:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6367
		{
			yyVAL.str = yyDollar[2].str
		}
	case 996:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6373
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6388
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6405
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6422
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1000:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6426
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1001:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6432
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1002:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6436
		{
			yyVAL.str = "DEFINER = "
		}
	case 1003:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6440
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1004:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6445
		{
			yyVAL.str = ""
		}
	case 1005:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6449
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1011:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6463
		{
			yyVAL.str = ""
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6471
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6477
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6482
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6488
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6501
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6506
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6511
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6517
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6524
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6531
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6538
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6545
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6553
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6559
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6566
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6573
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6581
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6587
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6596
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6613
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6629
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6648
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6654
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6663
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6681
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6687
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6694
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6702
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6708
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6716
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6722
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6730
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6736
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6745
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6749
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6754
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6758
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6765
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1052:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6770
		{
			yyVAL.str = ""
		}
	case 1053:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6774
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1054:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6780
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6793
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6804
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6808
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6814
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6820
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6826
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6833
		{
			yyVAL.str = ""
		}
	case 1062:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6837
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1063:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6842
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6846
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6852
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6860
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6868
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6876
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6884
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1070:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6889
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6901
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6912
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7021
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7025
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7031
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7044
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7048
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7054
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7067
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7071
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7075
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7080
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7084
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7090
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7097
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7103
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7112
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1089:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7119
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7130
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7134
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7140
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7149
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7153
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7157
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7162
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7166
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7170
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7174
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7180
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7211
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7215
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7241
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7247
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7259
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7265
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7271
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7277
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7283
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7291
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7295
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7301
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7315
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7329
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7333
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7337
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7341
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7345
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7349
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7353
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7359
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7374
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7378
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7389
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7393
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7398
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7402
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7408
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7412
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7418
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7427
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7436
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7442
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7446
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7452
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7463
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7469
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7487
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7505
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7523
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7539
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7543
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7552
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7564
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7573
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7585
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7595
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7605
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7616
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7626
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7637
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7645
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7656
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7663
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7673
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7686
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7694
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7703
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7712
		{
			yyVAL.str = ""
		}
	case 1162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7716
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1163:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7722
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7726
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7731
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7735
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7742
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7754
		{
			yyVAL.str = ""
		}
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7758
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1170:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7764
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7785
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7799
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7803
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7807
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7813
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7817
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7824
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7831
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7838
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7845
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7849
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7853
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7857
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7861
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7868
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7875
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7879
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7886
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7893
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7897
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7903
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7909
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7913
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7920
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7927
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7934
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7941
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7945
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7950
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7954
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7958
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7963
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7967
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7980
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7984
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7992
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8000
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8004
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8016
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8020
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8026
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8030
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8036
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8049
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8063
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8067
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8073
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8077
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8083
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8092
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8103
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8107
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8112
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8116
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8122
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8127
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8135
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8139
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8149
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8153
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8164
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8172
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8180
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8188
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8199
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8208
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8218
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8228
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8232
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8237
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8241
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8247
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8251
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8257
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8266
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8276
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8280
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8286
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8290
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8296
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8305
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8315
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8319
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8325
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8329
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8333
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8339
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8343
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8347
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8351
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8355
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8359
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8363
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8368
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8372
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8376
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8380
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8384
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8388
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8392
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8396
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8400
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8404
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8408
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8412
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8416
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8422
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8428
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8432
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8436
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8440
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8444
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8450
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8456
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8462
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8468
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8474
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8480
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8484
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8488
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8492
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8497
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8508
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8512
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8518
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8529
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8533
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8539
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8543
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8547
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8551
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8555
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8559
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8573
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8577
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8586
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8592
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8600
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8604
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8611
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8620
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8628
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8636
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8643
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8647
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8653
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8657
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8661
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8667
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8671
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8677
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8690
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8703
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8742
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8782
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8796
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8802
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8815
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8828
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8841
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8854
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8869
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8879
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8885
		{
			yyVAL.str = ""
		}
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8889
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8899
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8905
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8911
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8932
		{
			yyVAL.str = ""
		}
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8936
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8942
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8948
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8952
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8957
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8965
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8969
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8973
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8977
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8983
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8989
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8993
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8998
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9005
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9009
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9015
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9019
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9025
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9029
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9033
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9037
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9041
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9045
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9050
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9054
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9058
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9062
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9066
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9070
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9074
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9078
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9082
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9086
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9100
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9104
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9108
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9112
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9116
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9120
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9126
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9130
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9135
		{
			yyVAL.str = ""
		}
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9139
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9145
		{
			yyVAL.str = ""
		}
	case 1403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9149
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1404:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9155
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9172
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9179
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9186
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9193
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9200
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9209
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9215
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9221
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9225
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9229
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9233
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9237
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9242
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9249
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9253
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9257
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9262
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9266
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9271
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9275
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9291
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9297
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9301
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9305
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9309
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9313
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9317
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9321
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9325
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9329
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9333
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9337
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9341
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9345
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9351
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9355
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9359
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9363
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9367
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9371
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9375
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9379
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9383
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9387
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9429
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9433
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9437
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9442
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9450
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9454
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9458
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9462
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9466
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9476
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9480
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9484
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9488
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9492
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9496
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9500
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9506
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9515
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9524
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9535
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9545
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9555
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9564
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9574
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9584
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9594
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9603
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9613
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9617
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9622
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9626
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9632
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9636
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9642
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9651
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9663
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9680
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9697
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9710
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9723
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9735
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9749
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9764
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9779
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9796
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9811
		{
		}
	case 1506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9818
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9822
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9826
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9832
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9836
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9840
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9844
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9850
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9854
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9858
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9864
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9872
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9882
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9886
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9893
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9898
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9902
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9907
		{
			yyVAL.str = ","
		}
	case 1524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9911
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9916
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9920
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1527:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9925
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9932
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9958
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9970
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9982
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9993
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10004
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10015
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10025
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10035
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10046
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10057
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10068
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10079
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10090
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10101
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10112
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10123
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10134
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10145
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10156
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10167
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10178
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10189
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10207
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10216
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10225
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10234
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10243
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10254
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10263
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10273
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10282
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10291
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10300
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10309
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10321
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10332
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10345
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10357
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10380
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1606:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10416
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10429
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10442
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10454
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10463
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10471
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10479
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10492
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10501
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10512
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10523
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10532
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10544
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10554
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10564
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10573
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10584
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10593
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10603
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10612
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10621
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10631
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10635
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10641
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10645
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10664
		{
		}
	case 1638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10666
		{
		}
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10707
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10719
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10723
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10727
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10733
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10738
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10742
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10748
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10752
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10758
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10762
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10769
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10773
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10777
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10786
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10790
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10794
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10799
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10803
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10809
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10813
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10817
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10821
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10825
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10829
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10833
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10837
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10841
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10845
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10853
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10857
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10861
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10865
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10869
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10873
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10877
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10881
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10885
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10889
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10895
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10899
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10905
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10909
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10916
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10920
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10924
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10930
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10934
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10938
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10942
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10946
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10950
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10954
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10960
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10964
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10968
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10972
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10978
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10991
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10996
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11002
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11006
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11019
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11024
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11028
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11032
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11036
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11040
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11047
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11051
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11055
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11059
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11066
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11077
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11082
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11088
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11100
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11112
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11124
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11137
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11150
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11163
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11176
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11189
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11202
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11215
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11228
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11241
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11254
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11269
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11296
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11338
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11374
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11410
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11427
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11439
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11459
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11479
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11499
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11515
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11528
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11541
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11554
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11567
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11579
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11591
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11603
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11615
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11627
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11639
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11651
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11663
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11675
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11687
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11700
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11713
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11726
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11739
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11754
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11762
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11771
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11781
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11804
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11809
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11815
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11822
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11826
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11831
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11835
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11841
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11847
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11854
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11861
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11870
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11877
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11884
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11893
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11897
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11901
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11907
		{
		}
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11909
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11919
		{
			yyVAL.str = ""
		}
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11923
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
