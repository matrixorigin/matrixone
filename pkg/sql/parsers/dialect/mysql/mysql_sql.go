// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const SNAPSHOTS = 57437
const INTEGRAL = 57438
const HEX = 57439
const FLOAT = 57440
const HEXNUM = 57441
const BIT_LITERAL = 57442
const NULL = 57443
const TRUE = 57444
const FALSE = 57445
const LOWER_THAN_CHARSET = 57446
const CHARSET = 57447
const UNIQUE = 57448
const KEY = 57449
const OR = 57450
const PIPE_CONCAT = 57451
const XOR = 57452
const AND = 57453
const NOT = 57454
const BETWEEN = 57455
const CASE = 57456
const WHEN = 57457
const THEN = 57458
const ELSE = 57459
const END = 57460
const ELSEIF = 57461
const LOWER_THAN_EQ = 57462
const LE = 57463
const GE = 57464
const NE = 57465
const NULL_SAFE_EQUAL = 57466
const IS = 57467
const LIKE = 57468
const REGEXP = 57469
const IN = 57470
const ASSIGNMENT = 57471
const ILIKE = 57472
const SHIFT_LEFT = 57473
const SHIFT_RIGHT = 57474
const DIV = 57475
const MOD = 57476
const UNARY = 57477
const COLLATE = 57478
const BINARY = 57479
const UNDERSCORE_BINARY = 57480
const INTERVAL = 57481
const OUT = 57482
const INOUT = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const WORK = 57489
const CONSISTENT = 57490
const SNAPSHOT = 57491
const CHAIN = 57492
const NO = 57493
const RELEASE = 57494
const PRIORITY = 57495
const QUICK = 57496
const BIT = 57497
const TINYINT = 57498
const SMALLINT = 57499
const MEDIUMINT = 57500
const INT = 57501
const INTEGER = 57502
const BIGINT = 57503
const INTNUM = 57504
const REAL = 57505
const DOUBLE = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const DECIMAL_VALUE = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const UUID = 57531
const VECF32 = 57532
const VECF64 = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const INT1 = 57542
const INT2 = 57543
const INT3 = 57544
const INT4 = 57545
const INT8 = 57546
const S3OPTION = 57547
const STAGEOPTION = 57548
const SQL_SMALL_RESULT = 57549
const SQL_BIG_RESULT = 57550
const SQL_BUFFER_RESULT = 57551
const LOW_PRIORITY = 57552
const HIGH_PRIORITY = 57553
const DELAYED = 57554
const CREATE = 57555
const ALTER = 57556
const DROP = 57557
const RENAME = 57558
const ANALYZE = 57559
const ADD = 57560
const RETURNS = 57561
const SCHEMA = 57562
const TABLE = 57563
const SEQUENCE = 57564
const INDEX = 57565
const VIEW = 57566
const TO = 57567
const IGNORE = 57568
const IF = 57569
const PRIMARY = 57570
const COLUMN = 57571
const CONSTRAINT = 57572
const SPATIAL = 57573
const FULLTEXT = 57574
const FOREIGN = 57575
const KEY_BLOCK_SIZE = 57576
const SHOW = 57577
const DESCRIBE = 57578
const EXPLAIN = 57579
const DATE = 57580
const ESCAPE = 57581
const REPAIR = 57582
const OPTIMIZE = 57583
const TRUNCATE = 57584
const MAXVALUE = 57585
const PARTITION = 57586
const REORGANIZE = 57587
const LESS = 57588
const THAN = 57589
const PROCEDURE = 57590
const TRIGGER = 57591
const STATUS = 57592
const VARIABLES = 57593
const ROLE = 57594
const PROXY = 57595
const AVG_ROW_LENGTH = 57596
const STORAGE = 57597
const DISK = 57598
const MEMORY = 57599
const CHECKSUM = 57600
const COMPRESSION = 57601
const DATA = 57602
const DIRECTORY = 57603
const DELAY_KEY_WRITE = 57604
const ENCRYPTION = 57605
const ENGINE = 57606
const MAX_ROWS = 57607
const MIN_ROWS = 57608
const PACK_KEYS = 57609
const ROW_FORMAT = 57610
const STATS_AUTO_RECALC = 57611
const STATS_PERSISTENT = 57612
const STATS_SAMPLE_PAGES = 57613
const DYNAMIC = 57614
const COMPRESSED = 57615
const REDUNDANT = 57616
const COMPACT = 57617
const FIXED = 57618
const COLUMN_FORMAT = 57619
const AUTO_RANDOM = 57620
const ENGINE_ATTRIBUTE = 57621
const SECONDARY_ENGINE_ATTRIBUTE = 57622
const INSERT_METHOD = 57623
const RESTRICT = 57624
const CASCADE = 57625
const ACTION = 57626
const PARTIAL = 57627
const SIMPLE = 57628
const CHECK = 57629
const ENFORCED = 57630
const RANGE = 57631
const LIST = 57632
const ALGORITHM = 57633
const LINEAR = 57634
const PARTITIONS = 57635
const SUBPARTITION = 57636
const SUBPARTITIONS = 57637
const CLUSTER = 57638
const TYPE = 57639
const ANY = 57640
const SOME = 57641
const EXTERNAL = 57642
const LOCALFILE = 57643
const URL = 57644
const PREPARE = 57645
const DEALLOCATE = 57646
const RESET = 57647
const EXTENSION = 57648
const INCREMENT = 57649
const CYCLE = 57650
const MINVALUE = 57651
const PUBLICATION = 57652
const SUBSCRIPTIONS = 57653
const PUBLICATIONS = 57654
const PROPERTIES = 57655
const PARSER = 57656
const VISIBLE = 57657
const INVISIBLE = 57658
const BTREE = 57659
const HASH = 57660
const RTREE = 57661
const BSI = 57662
const IVFFLAT = 57663
const MASTER = 57664
const ZONEMAP = 57665
const LEADING = 57666
const BOTH = 57667
const TRAILING = 57668
const UNKNOWN = 57669
const LISTS = 57670
const OP_TYPE = 57671
const REINDEX = 57672
const EXPIRE = 57673
const ACCOUNT = 57674
const ACCOUNTS = 57675
const UNLOCK = 57676
const DAY = 57677
const NEVER = 57678
const PUMP = 57679
const MYSQL_COMPATIBILITY_MODE = 57680
const MODIFY = 57681
const CHANGE = 57682
const SECOND = 57683
const ASCII = 57684
const COALESCE = 57685
const COLLATION = 57686
const HOUR = 57687
const MICROSECOND = 57688
const MINUTE = 57689
const MONTH = 57690
const QUARTER = 57691
const REPEAT = 57692
const REVERSE = 57693
const ROW_COUNT = 57694
const WEEK = 57695
const REVOKE = 57696
const FUNCTION = 57697
const PRIVILEGES = 57698
const TABLESPACE = 57699
const EXECUTE = 57700
const SUPER = 57701
const GRANT = 57702
const OPTION = 57703
const REFERENCES = 57704
const REPLICATION = 57705
const SLAVE = 57706
const CLIENT = 57707
const USAGE = 57708
const RELOAD = 57709
const FILE = 57710
const TEMPORARY = 57711
const ROUTINE = 57712
const EVENT = 57713
const SHUTDOWN = 57714
const NULLX = 57715
const AUTO_INCREMENT = 57716
const APPROXNUM = 57717
const SIGNED = 57718
const UNSIGNED = 57719
const ZEROFILL = 57720
const ENGINES = 57721
const LOW_CARDINALITY = 57722
const AUTOEXTEND_SIZE = 57723
const ADMIN_NAME = 57724
const RANDOM = 57725
const SUSPEND = 57726
const ATTRIBUTE = 57727
const HISTORY = 57728
const REUSE = 57729
const CURRENT = 57730
const OPTIONAL = 57731
const FAILED_LOGIN_ATTEMPTS = 57732
const PASSWORD_LOCK_TIME = 57733
const UNBOUNDED = 57734
const SECONDARY = 57735
const RESTRICTED = 57736
const USER = 57737
const IDENTIFIED = 57738
const CIPHER = 57739
const ISSUER = 57740
const X509 = 57741
const SUBJECT = 57742
const SAN = 57743
const REQUIRE = 57744
const SSL = 57745
const NONE = 57746
const PASSWORD = 57747
const SHARED = 57748
const EXCLUSIVE = 57749
const MAX_QUERIES_PER_HOUR = 57750
const MAX_UPDATES_PER_HOUR = 57751
const MAX_CONNECTIONS_PER_HOUR = 57752
const MAX_USER_CONNECTIONS = 57753
const FORMAT = 57754
const VERBOSE = 57755
const CONNECTION = 57756
const TRIGGERS = 57757
const PROFILES = 57758
const LOAD = 57759
const INLINE = 57760
const INFILE = 57761
const TERMINATED = 57762
const OPTIONALLY = 57763
const ENCLOSED = 57764
const ESCAPED = 57765
const STARTING = 57766
const LINES = 57767
const ROWS = 57768
const IMPORT = 57769
const DISCARD = 57770
const JSONTYPE = 57771
const MODUMP = 57772
const OVER = 57773
const PRECEDING = 57774
const FOLLOWING = 57775
const GROUPS = 57776
const DATABASES = 57777
const TABLES = 57778
const SEQUENCES = 57779
const EXTENDED = 57780
const FULL = 57781
const PROCESSLIST = 57782
const FIELDS = 57783
const COLUMNS = 57784
const OPEN = 57785
const ERRORS = 57786
const WARNINGS = 57787
const INDEXES = 57788
const SCHEMAS = 57789
const NODE = 57790
const LOCKS = 57791
const ROLES = 57792
const TABLE_NUMBER = 57793
const COLUMN_NUMBER = 57794
const TABLE_VALUES = 57795
const TABLE_SIZE = 57796
const NAMES = 57797
const GLOBAL = 57798
const PERSIST = 57799
const SESSION = 57800
const ISOLATION = 57801
const LEVEL = 57802
const READ = 57803
const WRITE = 57804
const ONLY = 57805
const REPEATABLE = 57806
const COMMITTED = 57807
const UNCOMMITTED = 57808
const SERIALIZABLE = 57809
const LOCAL = 57810
const EVENTS = 57811
const PLUGINS = 57812
const CURRENT_TIMESTAMP = 57813
const DATABASE = 57814
const CURRENT_TIME = 57815
const LOCALTIME = 57816
const LOCALTIMESTAMP = 57817
const UTC_DATE = 57818
const UTC_TIME = 57819
const UTC_TIMESTAMP = 57820
const REPLACE = 57821
const CONVERT = 57822
const SEPARATOR = 57823
const TIMESTAMPDIFF = 57824
const CURRENT_DATE = 57825
const CURRENT_USER = 57826
const CURRENT_ROLE = 57827
const SECOND_MICROSECOND = 57828
const MINUTE_MICROSECOND = 57829
const MINUTE_SECOND = 57830
const HOUR_MICROSECOND = 57831
const HOUR_SECOND = 57832
const HOUR_MINUTE = 57833
const DAY_MICROSECOND = 57834
const DAY_SECOND = 57835
const DAY_MINUTE = 57836
const DAY_HOUR = 57837
const YEAR_MONTH = 57838
const SQL_TSI_HOUR = 57839
const SQL_TSI_DAY = 57840
const SQL_TSI_WEEK = 57841
const SQL_TSI_MONTH = 57842
const SQL_TSI_QUARTER = 57843
const SQL_TSI_YEAR = 57844
const SQL_TSI_SECOND = 57845
const SQL_TSI_MINUTE = 57846
const RECURSIVE = 57847
const CONFIG = 57848
const DRAINER = 57849
const SOURCE = 57850
const STREAM = 57851
const HEADERS = 57852
const CONNECTOR = 57853
const CONNECTORS = 57854
const DAEMON = 57855
const PAUSE = 57856
const CANCEL = 57857
const TASK = 57858
const RESUME = 57859
const MATCH = 57860
const AGAINST = 57861
const BOOLEAN = 57862
const LANGUAGE = 57863
const WITH = 57864
const QUERY = 57865
const EXPANSION = 57866
const WITHOUT = 57867
const VALIDATION = 57868
const ADDDATE = 57869
const BIT_AND = 57870
const BIT_OR = 57871
const BIT_XOR = 57872
const CAST = 57873
const COUNT = 57874
const APPROX_COUNT = 57875
const APPROX_COUNT_DISTINCT = 57876
const SERIAL_EXTRACT = 57877
const APPROX_PERCENTILE = 57878
const CURDATE = 57879
const CURTIME = 57880
const DATE_ADD = 57881
const DATE_SUB = 57882
const EXTRACT = 57883
const GROUP_CONCAT = 57884
const MAX = 57885
const MID = 57886
const MIN = 57887
const NOW = 57888
const POSITION = 57889
const SESSION_USER = 57890
const STD = 57891
const STDDEV = 57892
const MEDIAN = 57893
const CLUSTER_CENTERS = 57894
const KMEANS = 57895
const STDDEV_POP = 57896
const STDDEV_SAMP = 57897
const SUBDATE = 57898
const SUBSTR = 57899
const SUBSTRING = 57900
const SUM = 57901
const SYSDATE = 57902
const SYSTEM_USER = 57903
const TRANSLATE = 57904
const TRIM = 57905
const VARIANCE = 57906
const VAR_POP = 57907
const VAR_SAMP = 57908
const AVG = 57909
const RANK = 57910
const ROW_NUMBER = 57911
const DENSE_RANK = 57912
const BIT_CAST = 57913
const NEXTVAL = 57914
const SETVAL = 57915
const CURRVAL = 57916
const LASTVAL = 57917
const ARROW = 57918
const ROW = 57919
const OUTFILE = 57920
const HEADER = 57921
const MAX_FILE_SIZE = 57922
const FORCE_QUOTE = 57923
const PARALLEL = 57924
const UNUSED = 57925
const BINDINGS = 57926
const DO = 57927
const DECLARE = 57928
const LOOP = 57929
const WHILE = 57930
const LEAVE = 57931
const ITERATE = 57932
const UNTIL = 57933
const CALL = 57934
const PREV = 57935
const SLIDING = 57936
const FILL = 57937
const SPBEGIN = 57938
const BACKEND = 57939
const SERVERS = 57940
const HANDLER = 57941
const PERCENT = 57942
const SAMPLE = 57943
const KILL = 57944
const BACKUP = 57945
const FILESYSTEM = 57946
const PARALLELISM = 57947
const QUERY_RESULT = 57948

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:11400

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 119,
	11, 713,
	22, 713,
	-2, 706,
	-1, 139,
	238, 1104,
	240, 1005,
	-2, 1052,
	-1, 164,
	43, 540,
	240, 540,
	267, 547,
	268, 547,
	463, 540,
	-2, 574,
	-1, 205,
	627, 1851,
	-2, 454,
	-1, 502,
	627, 1969,
	-2, 348,
	-1, 560,
	627, 2028,
	-2, 346,
	-1, 561,
	627, 2029,
	-2, 347,
	-1, 562,
	627, 2030,
	-2, 349,
	-1, 688,
	319, 136,
	435, 136,
	436, 136,
	-2, 1756,
	-1, 754,
	82, 1543,
	-2, 1906,
	-1, 755,
	82, 1561,
	-2, 1877,
	-1, 759,
	82, 1562,
	-2, 1905,
	-1, 787,
	82, 1473,
	-2, 2100,
	-1, 788,
	82, 1474,
	-2, 2099,
	-1, 789,
	82, 1475,
	-2, 2089,
	-1, 790,
	82, 2061,
	-2, 2082,
	-1, 791,
	82, 2062,
	-2, 2083,
	-1, 792,
	82, 2063,
	-2, 2091,
	-1, 793,
	82, 2064,
	-2, 2071,
	-1, 794,
	82, 2065,
	-2, 2080,
	-1, 795,
	82, 2066,
	-2, 2092,
	-1, 796,
	82, 2067,
	-2, 2093,
	-1, 797,
	82, 2068,
	-2, 2098,
	-1, 798,
	82, 2069,
	-2, 2103,
	-1, 799,
	82, 2070,
	-2, 2104,
	-1, 800,
	82, 1539,
	-2, 1943,
	-1, 801,
	82, 1540,
	-2, 1740,
	-1, 802,
	82, 1541,
	-2, 1952,
	-1, 803,
	82, 1542,
	-2, 1749,
	-1, 805,
	82, 1545,
	-2, 1757,
	-1, 806,
	82, 1546,
	-2, 1976,
	-1, 808,
	82, 1549,
	-2, 1776,
	-1, 810,
	82, 1551,
	-2, 1988,
	-1, 811,
	82, 1552,
	-2, 1987,
	-1, 812,
	82, 1553,
	-2, 1820,
	-1, 813,
	82, 1554,
	-2, 1901,
	-1, 816,
	82, 1557,
	-2, 1999,
	-1, 818,
	82, 1559,
	-2, 2002,
	-1, 819,
	82, 1560,
	-2, 2004,
	-1, 820,
	82, 1563,
	-2, 2012,
	-1, 821,
	82, 1564,
	-2, 1886,
	-1, 822,
	82, 1565,
	-2, 1931,
	-1, 823,
	82, 1566,
	-2, 1896,
	-1, 824,
	82, 1567,
	-2, 1921,
	-1, 835,
	82, 1451,
	-2, 2094,
	-1, 836,
	82, 1452,
	-2, 2095,
	-1, 837,
	82, 1453,
	-2, 2096,
	-1, 924,
	458, 574,
	459, 574,
	-2, 541,
	-1, 970,
	124, 1740,
	135, 1740,
	155, 1740,
	-2, 1714,
	-1, 1081,
	22, 740,
	-2, 689,
	-1, 1185,
	11, 713,
	22, 713,
	-2, 1334,
	-1, 1262,
	22, 740,
	-2, 689,
	-1, 1582,
	82, 1614,
	-2, 1903,
	-1, 1583,
	82, 1615,
	-2, 1904,
	-1, 1729,
	83, 890,
	-2, 896,
	-1, 2146,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	280, 1044,
	-2, 1037,
	-1, 2292,
	11, 713,
	22, 713,
	-2, 833,
	-1, 2324,
	83, 1700,
	156, 1700,
	-2, 1888,
	-1, 2325,
	83, 1700,
	156, 1700,
	-2, 1887,
	-1, 2326,
	83, 1676,
	156, 1676,
	-2, 1874,
	-1, 2327,
	83, 1677,
	156, 1677,
	-2, 1879,
	-1, 2328,
	83, 1678,
	156, 1678,
	-2, 1808,
	-1, 2329,
	83, 1679,
	156, 1679,
	-2, 1802,
	-1, 2330,
	83, 1680,
	156, 1680,
	-2, 1730,
	-1, 2331,
	83, 1681,
	156, 1681,
	-2, 1876,
	-1, 2332,
	83, 1682,
	156, 1682,
	-2, 1806,
	-1, 2333,
	83, 1683,
	156, 1683,
	-2, 1801,
	-1, 2334,
	83, 1684,
	156, 1684,
	-2, 1790,
	-1, 2335,
	83, 1700,
	156, 1700,
	-2, 1791,
	-1, 2336,
	83, 1700,
	156, 1700,
	-2, 1792,
	-1, 2338,
	83, 1689,
	156, 1689,
	-2, 1921,
	-1, 2339,
	83, 1667,
	156, 1667,
	-2, 1906,
	-1, 2340,
	83, 1698,
	156, 1698,
	-2, 1877,
	-1, 2341,
	83, 1698,
	156, 1698,
	-2, 1905,
	-1, 2342,
	83, 1698,
	156, 1698,
	-2, 1758,
	-1, 2343,
	83, 1696,
	156, 1696,
	-2, 1896,
	-1, 2344,
	83, 1693,
	156, 1693,
	-2, 1781,
	-1, 2345,
	82, 1648,
	83, 1648,
	156, 1648,
	393, 1648,
	394, 1648,
	395, 1648,
	-2, 1729,
	-1, 2346,
	82, 1649,
	83, 1649,
	156, 1649,
	393, 1649,
	394, 1649,
	395, 1649,
	-2, 1731,
	-1, 2347,
	82, 1650,
	83, 1650,
	156, 1650,
	393, 1650,
	394, 1650,
	395, 1650,
	-2, 1948,
	-1, 2348,
	82, 1652,
	83, 1652,
	156, 1652,
	393, 1652,
	394, 1652,
	395, 1652,
	-2, 1878,
	-1, 2349,
	82, 1654,
	83, 1654,
	156, 1654,
	393, 1654,
	394, 1654,
	395, 1654,
	-2, 1860,
	-1, 2350,
	82, 1656,
	83, 1656,
	156, 1656,
	393, 1656,
	394, 1656,
	395, 1656,
	-2, 1807,
	-1, 2351,
	82, 1658,
	83, 1658,
	156, 1658,
	393, 1658,
	394, 1658,
	395, 1658,
	-2, 1786,
	-1, 2352,
	82, 1659,
	83, 1659,
	156, 1659,
	393, 1659,
	394, 1659,
	395, 1659,
	-2, 1787,
	-1, 2353,
	82, 1661,
	83, 1661,
	156, 1661,
	393, 1661,
	394, 1661,
	395, 1661,
	-2, 1728,
	-1, 2354,
	83, 1703,
	156, 1703,
	393, 1703,
	394, 1703,
	395, 1703,
	-2, 1763,
	-1, 2355,
	83, 1703,
	156, 1703,
	393, 1703,
	394, 1703,
	395, 1703,
	-2, 1777,
	-1, 2356,
	83, 1706,
	156, 1706,
	393, 1706,
	394, 1706,
	395, 1706,
	-2, 1759,
	-1, 2357,
	83, 1706,
	156, 1706,
	393, 1706,
	394, 1706,
	395, 1706,
	-2, 1823,
	-1, 2358,
	83, 1703,
	156, 1703,
	393, 1703,
	394, 1703,
	395, 1703,
	-2, 1844,
	-1, 2552,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	280, 1044,
	-2, 1038,
	-1, 2568,
	80, 634,
	156, 634,
	-2, 1217,
	-1, 2954,
	193, 1044,
	304, 1302,
	-2, 1274,
	-1, 3111,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	-2, 1160,
	-1, 3113,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	-2, 1160,
	-1, 3125,
	80, 634,
	156, 634,
	-2, 1218,
	-1, 3146,
	193, 1044,
	304, 1302,
	-2, 1275,
	-1, 3283,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	-2, 1161,
	-1, 3309,
	83, 1122,
	156, 1122,
	-2, 1044,
	-1, 3437,
	83, 1122,
	156, 1122,
	-2, 1044,
	-1, 3583,
	83, 1126,
	156, 1126,
	-2, 1044,
	-1, 3630,
	83, 1127,
	156, 1127,
	-2, 1044,
}

const yyPrivate = 57344

const yyLast = 46114

var yyAct = [...]int{
	721, 698, 3676, 723, 3650, 2597, 194, 3669, 1562, 3587,
	3131, 1813, 3490, 3224, 3594, 3593, 3586, 3437, 2940, 707,
	3516, 3475, 3546, 3337, 3040, 3160, 2973, 3415, 2591, 1407,
	3041, 1220, 700, 2410, 3469, 1558, 3436, 3269, 3494, 3365,
	594, 3268, 3266, 751, 1082, 1345, 2594, 3406, 1484, 2600,
	3228, 610, 3476, 615, 615, 3219, 969, 36, 3478, 615,
	632, 641, 1761, 3098, 641, 2190, 1351, 3273, 3147, 3290,
	2949, 1565, 2913, 2571, 56, 3280, 3250, 3114, 3038, 2876,
	2704, 1903, 2687, 3285, 2705, 2902, 696, 2621, 2969, 2703,
	2286, 3087, 2958, 3116, 2951, 1868, 2697, 652, 179, 2445,
	2322, 1620, 2766, 1972, 2010, 3026, 646, 2320, 2726, 3006,
	2700, 2541, 2883, 1900, 2886, 1918, 690, 638, 2193, 2877,
	2881, 1494, 2957, 2879, 2553, 2157, 2921, 2878, 2125, 1400,
	2270, 1074, 2114, 2810, 2113, 118, 1994, 1973, 2391, 35,
	2739, 1981, 899, 1980, 2749, 695, 1480, 1473, 1707, 2374,
	1485, 1896, 1946, 1318, 1488, 2005, 2287, 2874, 1871, 2275,
	1316, 1869, 2530, 2525, 2623, 2006, 1792, 2563, 594, 2156,
	2602, 190, 8, 963, 1737, 6, 1803, 2191, 2318, 1285,
	1026, 1556, 1493, 1447, 1511, 2007, 189, 7, 2040, 609,
	1416, 689, 1386, 2137, 194, 1613, 194, 2017, 1017, 1018,
	1596, 1354, 26, 2478, 697, 615, 699, 1547, 1772, 1979,
	708, 1976, 1095, 593, 2186, 1454, 1936, 15, 962, 13,
	1962, 932, 1334, 1555, 1773, 2294, 1385, 14, 624, 898,
	1736, 1330, 1383, 839, 1621, 1439, 1346, 32, 691, 654,
	875, 23, 627, 170, 16, 1355, 978, 22, 10, 655,
	176, 1446, 649, 896, 919, 180, 1561, 881, 1260, 640,
	1876, 1221, 637, 651, 2296, 1154, 1155, 1156, 1153, 3128,
	2928, 2014, 2781, 1985, 1984, 1014, 1077, 633, 2024, 635,
	3400, 2511, 2511, 2477, 2511, 3101, 903, 636, 3033, 2433,
	2380, 2378, 1013, 2377, 1015, 2375, 1720, 634, 1457, 1461,
	620, 1009, 1010, 178, 611, 2112, 841, 975, 842, 1010,
	1279, 977, 2858, 614, 614, 1010, 2855, 2860, 2857, 622,
	3661, 3150, 1368, 644, 1714, 1275, 1459, 3217, 2762, 691,
	1154, 1155, 1156, 1153, 2760, 1951, 3372, 1077, 3366, 2503,
	2501, 1154, 1155, 1156, 1153, 3220, 3039, 1991, 1215, 3480,
	8, 1975, 840, 2837, 1008, 901, 902, 2231, 1117, 3162,
	3255, 851, 1280, 3251, 177, 7, 942, 177, 177, 52,
	166, 140, 3153, 177, 177, 177, 52, 166, 140, 177,
	2505, 2419, 1509, 3148, 3422, 1501, 2427, 3568, 3170, 3171,
	2011, 3115, 2148, 3390, 3149, 3527, 1426, 177, 177, 52,
	166, 140, 177, 1425, 1424, 177, 52, 166, 140, 889,
	981, 890, 1506, 979, 177, 1498, 980, 1291, 650, 2559,
	2835, 2782, 2774, 1281, 1308, 2141, 2022, 117, 3423, 3392,
	1641, 3154, 1520, 1508, 2312, 2300, 1500, 171, 2299, 1093,
	1151, 2301, 171, 171, 171, 2733, 2734, 870, 171, 944,
	117, 2313, 943, 2732, 177, 52, 166, 140, 1881, 1882,
	1387, 884, 1389, 880, 1655, 622, 2557, 171, 1880, 1090,
	852, 171, 1342, 1532, 171, 1721, 1722, 973, 830, 974,
	829, 831, 832, 171, 833, 834, 2859, 2392, 2527, 928,
	2856, 941, 2944, 1364, 1787, 1350, 1365, 904, 2528, 1349,
	1352, 1353, 1352, 1353, 1564, 1144, 3597, 3598, 1149, 972,
	971, 3241, 3483, 3559, 3483, 2223, 1913, 3482, 3558, 862,
	3481, 3557, 3482, 171, 906, 3169, 3481, 2194, 1548, 2101,
	3618, 1552, 3561, 3654, 3655, 2942, 1125, 3467, 2767, 1127,
	3470, 3471, 3472, 3473, 3551, 3042, 3565, 2526, 1290, 3548,
	3548, 3369, 3158, 3042, 2768, 1551, 2769, 1897, 2414, 2026,
	1087, 3487, 2642, 1460, 1458, 1568, 3056, 1128, 3260, 3088,
	1887, 1543, 2018, 3095, 3155, 3159, 3157, 3156, 2897, 1098,
	2895, 1959, 1367, 2264, 3394, 2887, 2506, 927, 926, 887,
	886, 2136, 879, 1637, 1467, 1466, 2517, 1891, 3172, 1634,
	3563, 883, 882, 1636, 1633, 1635, 1639, 1640, 2798, 925,
	2800, 1638, 3164, 3165, 615, 139, 1146, 175, 864, 2424,
	900, 2229, 871, 1098, 615, 1086, 1132, 3570, 3571, 1133,
	1120, 905, 937, 1147, 1148, 2892, 2893, 164, 163, 1553,
	3566, 3567, 878, 641, 641, 3218, 615, 1121, 3240, 2533,
	685, 2894, 2761, 687, 2691, 933, 3242, 1135, 686, 3172,
	3596, 888, 1550, 2267, 2266, 2891, 877, 3397, 3257, 1340,
	876, 3151, 1123, 2271, 1085, 3187, 863, 3163, 2972, 2023,
	869, 1567, 1566, 3625, 1126, 1129, 638, 638, 2946, 2970,
	2971, 934, 938, 1020, 2911, 2515, 3427, 1377, 2504, 3184,
	2922, 1292, 867, 3509, 3504, 978, 643, 1193, 3495, 1278,
	1122, 922, 2696, 920, 924, 941, 1142, 1143, 2564, 921,
	918, 917, 642, 923, 908, 909, 907, 910, 911, 912,
	913, 2516, 939, 2143, 940, 3177, 3511, 1130, 3132, 887,
	2941, 2012, 1984, 1078, 1366, 935, 936, 1112, 1079, 1078,
	3399, 3059, 2804, 1086, 2510, 1644, 1645, 1646, 1647, 1648,
	1649, 1642, 1643, 3517, 2012, 868, 975, 1911, 1912, 3419,
	977, 2596, 3139, 2012, 1100, 1099, 978, 1329, 2889, 1549,
	2975, 2045, 931, 2592, 2593, 1224, 2596, 1124, 930, 639,
	3188, 1010, 1092, 1010, 1010, 3486, 639, 1010, 3328, 3687,
	1131, 1010, 1225, 2315, 1010, 2539, 3231, 3168, 3317, 2241,
	1078, 2240, 1103, 2013, 1137, 2025, 1327, 1138, 1100, 1099,
	2261, 2262, 2376, 1187, 1396, 3421, 639, 1395, 1110, 951,
	3672, 637, 637, 1462, 3569, 1326, 889, 975, 890, 1344,
	1343, 977, 885, 3407, 1325, 1140, 633, 633, 635, 635,
	2196, 53, 3518, 3428, 3393, 2950, 636, 636, 53, 3323,
	840, 2029, 2031, 2032, 1288, 610, 634, 634, 1352, 1353,
	1075, 1089, 1091, 929, 1076, 639, 3167, 1134, 3256, 1101,
	1081, 874, 2854, 1258, 1084, 3117, 1263, 2502, 53, 2898,
	141, 1898, 1341, 141, 141, 2888, 3395, 1109, 899, 141,
	141, 141, 1105, 1106, 2428, 141, 1108, 1189, 1190, 1191,
	1192, 1352, 1353, 1111, 2947, 2232, 172, 173, 2041, 174,
	1194, 2189, 2801, 141, 141, 1136, 3420, 1080, 141, 974,
	3215, 141, 3585, 3261, 3441, 1286, 3045, 53, 650, 1322,
	141, 3562, 2643, 3545, 2644, 2645, 2744, 2745, 615, 1384,
	1379, 1574, 1577, 1578, 2206, 2966, 594, 594, 2532, 1888,
	1544, 2671, 1575, 1141, 1348, 594, 594, 3673, 2420, 1411,
	1411, 2974, 615, 947, 945, 2304, 946, 2890, 2728, 2730,
	141, 2227, 3384, 2015, 3385, 2199, 1890, 2195, 1139, 1117,
	2970, 2971, 2197, 1300, 641, 1440, 610, 2803, 1306, 1413,
	1450, 1450, 2209, 1305, 1409, 1409, 1304, 1303, 2189, 2212,
	645, 194, 3081, 2967, 2536, 2537, 2027, 2028, 1418, 3330,
	594, 1293, 1233, 1234, 893, 894, 895, 2640, 1313, 2535,
	3338, 3339, 3340, 3344, 3342, 3343, 3341, 2513, 3387, 2545,
	2548, 2549, 2550, 2546, 2547, 942, 2198, 1295, 1296, 1297,
	1298, 1299, 2117, 1301, 1289, 1321, 3319, 942, 1284, 1307,
	3318, 1328, 952, 3440, 1724, 3384, 2211, 3385, 1338, 3386,
	1725, 1492, 2116, 1495, 1468, 1116, 1357, 1358, 1503, 1360,
	1361, 1362, 1723, 3379, 948, 942, 2812, 2811, 888, 2909,
	2253, 3324, 3325, 1264, 2119, 2118, 1405, 1406, 3670, 3671,
	1262, 2226, 2030, 1530, 2662, 2663, 1282, 1283, 891, 2210,
	3584, 854, 855, 3291, 3683, 2075, 2200, 1411, 2074, 1411,
	1086, 3387, 3688, 3678, 1294, 1510, 3555, 3667, 944, 1391,
	1393, 943, 1499, 3632, 3695, 1336, 1337, 1507, 1403, 1404,
	944, 2196, 2199, 943, 1152, 2729, 3605, 950, 3599, 978,
	638, 1315, 3386, 3581, 978, 1083, 1331, 1335, 1335, 1335,
	2128, 2205, 1539, 3003, 3046, 2203, 1369, 1370, 944, 1563,
	2139, 943, 1117, 3537, 1378, 1471, 1356, 1474, 1475, 1359,
	1331, 1331, 2569, 2129, 2130, 1441, 2394, 2020, 1476, 1477,
	2999, 1152, 1576, 1463, 1482, 1483, 3679, 3084, 1373, 1374,
	3633, 1376, 1619, 1380, 1381, 1382, 3633, 1394, 1375, 2672,
	2674, 2675, 2676, 2673, 2968, 3512, 1668, 1487, 2910, 3606,
	1491, 3403, 620, 1490, 949, 1419, 3582, 2661, 1432, 1001,
	1006, 1007, 1417, 3500, 3058, 1427, 1428, 1429, 1430, 1431,
	3460, 1433, 1434, 1435, 1436, 1437, 3403, 1525, 1526, 1443,
	1444, 1445, 1451, 1438, 1584, 1585, 1586, 1587, 1588, 1589,
	1590, 1591, 1592, 1593, 1594, 1595, 1452, 3459, 1083, 3454,
	1607, 1608, 858, 2200, 2927, 953, 2106, 1086, 2195, 2189,
	2194, 3453, 2192, 2197, 1560, 2138, 1726, 2419, 2020, 3380,
	2979, 1440, 2977, 3477, 2184, 637, 1735, 1411, 1739, 1740,
	1152, 1742, 1743, 615, 1705, 1579, 3501, 1538, 615, 1653,
	633, 1411, 635, 3461, 1541, 899, 2864, 1677, 1762, 1513,
	636, 2570, 1535, 857, 1534, 1411, 1716, 860, 859, 2172,
	634, 1379, 1658, 1659, 1660, 1519, 632, 2198, 1518, 1529,
	2161, 1521, 3403, 1708, 1323, 1674, 1537, 1528, 1675, 1536,
	2570, 3452, 3451, 1533, 3403, 1554, 1786, 1667, 1154, 1155,
	1156, 1153, 1685, 1686, 2284, 1793, 1793, 1559, 1379, 1323,
	1379, 1379, 3380, 1557, 615, 615, 3381, 1735, 1735, 1704,
	692, 1411, 1865, 1866, 1878, 1734, 1605, 1606, 1650, 1651,
	1598, 1654, 3431, 724, 734, 3430, 3402, 1741, 594, 1669,
	1411, 3193, 3141, 725, 2833, 726, 730, 733, 729, 727,
	728, 2862, 1676, 1259, 1678, 3107, 1154, 1155, 1156, 1153,
	2285, 1003, 1004, 1005, 3403, 3403, 1790, 2747, 615, 1735,
	1411, 3074, 1923, 3070, 615, 615, 615, 1928, 1929, 844,
	845, 846, 847, 1939, 1933, 1934, 1935, 1711, 2519, 2987,
	1941, 1546, 1545, 1154, 1155, 1156, 1153, 194, 731, 1815,
	194, 194, 2171, 194, 1914, 2020, 1860, 1861, 2020, 3403,
	1679, 1731, 1732, 1733, 2315, 3142, 2507, 1114, 2409, 2399,
	1770, 1771, 2285, 1745, 1746, 1747, 1748, 2723, 3108, 2285,
	732, 2196, 2199, 1706, 1892, 2315, 2011, 1780, 1781, 2051,
	1712, 1668, 1668, 1983, 3075, 1879, 3071, 3003, 2182, 1668,
	1668, 2484, 844, 845, 846, 847, 1996, 1791, 1920, 1906,
	1907, 1884, 2988, 1886, 1764, 1765, 1730, 2111, 1922, 1115,
	2476, 2435, 1794, 1904, 1905, 2417, 1774, 2105, 1776, 1777,
	2405, 2401, 2396, 1762, 1759, 1758, 1795, 1411, 2009, 1925,
	1926, 1927, 1783, 1738, 1115, 1950, 1990, 1769, 1953, 1954,
	2285, 1956, 1779, 1744, 1775, 1899, 2389, 1754, 1749, 2054,
	2387, 1331, 1011, 1012, 1784, 978, 2385, 1016, 1797, 1798,
	638, 1767, 1937, 978, 1152, 1335, 2104, 849, 2079, 1422,
	1117, 2002, 1796, 2383, 2160, 1909, 1314, 1335, 2107, 1154,
	1155, 1156, 1153, 1152, 1152, 2003, 2086, 2085, 2161, 1867,
	1986, 1864, 1610, 2397, 2402, 2397, 1893, 1883, 1397, 1885,
	2073, 3680, 3128, 2200, 2064, 2751, 2063, 2453, 2195, 2189,
	2194, 2572, 2192, 2197, 1799, 1800, 975, 1738, 3094, 2390,
	977, 2422, 1978, 2388, 975, 2053, 2421, 2413, 977, 2384,
	1978, 2062, 2177, 1921, 2019, 1069, 1065, 1066, 1067, 1068,
	849, 2458, 2070, 2457, 2456, 2454, 2384, 2161, 1945, 1947,
	1522, 2106, 2055, 2001, 978, 1944, 1931, 1515, 1169, 1152,
	1152, 1201, 1102, 1072, 1070, 1924, 1557, 2198, 1919, 3354,
	2038, 2039, 2932, 1152, 1919, 1919, 1919, 1152, 1992, 1152,
	1964, 1680, 1681, 1682, 1683, 3191, 1908, 1687, 1688, 1689,
	1690, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1989,
	1987, 2034, 2923, 3505, 1152, 637, 2795, 2020, 3689, 690,
	2455, 1363, 615, 615, 615, 975, 2000, 3292, 3120, 977,
	633, 1319, 635, 1523, 3118, 1320, 615, 615, 615, 615,
	636, 3658, 856, 2004, 1332, 1401, 1657, 1656, 2224, 2158,
	634, 3401, 1657, 1656, 2375, 1999, 1402, 3506, 1998, 2164,
	1379, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1169, 736,
	119, 3293, 3121, 3376, 3321, 119, 3320, 3306, 3119, 3262,
	3100, 2033, 3004, 1399, 2997, 2042, 1379, 2992, 2989, 2924,
	2904, 2035, 2080, 2081, 2693, 2083, 2036, 2037, 2047, 2543,
	2512, 1598, 2090, 2218, 1168, 1167, 1177, 1178, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1169, 1180, 3435, 1184, 2432,
	2400, 1319, 2306, 2077, 1310, 1320, 621, 1309, 1088, 119,
	3031, 2442, 2369, 2925, 1181, 1183, 1179, 1948, 1182, 1168,
	1167, 1177, 1178, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1169, 1172, 1173, 1174, 1175, 1176, 1169, 1691, 2459, 2460,
	1614, 1333, 2225, 1684, 2289, 2289, 1878, 2289, 861, 2753,
	1727, 1168, 1167, 1177, 1178, 1170, 1171, 1172, 1173, 1174,
	1175, 1176, 1169, 1398, 3556, 594, 594, 2108, 1604, 1154,
	1155, 1156, 1153, 1086, 2100, 2102, 2103, 1153, 3032, 1411,
	615, 1614, 3333, 2048, 1601, 1603, 1600, 1455, 1602, 1948,
	2122, 1154, 1155, 1156, 1153, 615, 1156, 1153, 3332, 1455,
	2188, 1086, 2359, 610, 2187, 1224, 2140, 2173, 1450, 2770,
	1878, 2632, 2630, 2364, 2310, 2366, 2608, 2606, 3686, 194,
	978, 976, 1225, 1154, 1155, 1156, 1153, 3312, 119, 3263,
	3264, 2181, 3663, 1203, 3034, 2291, 2495, 2295, 2496, 3662,
	3258, 2293, 1672, 119, 3609, 119, 1202, 3092, 2165, 3580,
	2323, 2168, 1154, 1155, 1156, 1153, 2174, 1673, 3579, 2175,
	3507, 2444, 2132, 2133, 2134, 2683, 2681, 2679, 2302, 3456,
	2303, 2066, 2415, 3444, 3434, 2009, 2149, 2150, 2151, 2152,
	3685, 975, 1411, 2176, 1411, 977, 1411, 3424, 2307, 2308,
	2178, 1086, 2201, 2202, 2668, 2207, 2826, 3259, 3367, 2434,
	1154, 1155, 1156, 1153, 3093, 2363, 1335, 3295, 3294, 3133,
	2317, 2379, 1154, 1155, 1156, 1153, 3122, 2370, 3091, 2425,
	2896, 2371, 2682, 2680, 2678, 1411, 2462, 2791, 2268, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1158, 2065, 1391, 1393,
	2429, 2469, 2297, 2765, 1157, 2764, 1411, 1154, 1155, 1156,
	1153, 2667, 1186, 2666, 2461, 2825, 1456, 2665, 2664, 2542,
	1409, 1196, 2411, 2412, 1154, 1155, 1156, 1153, 2656, 2314,
	2311, 1154, 1155, 1156, 1153, 2470, 3590, 2650, 2649, 2648,
	2647, 1409, 1154, 1155, 1156, 1153, 1204, 3493, 2508, 2110,
	1967, 2362, 2360, 1966, 1965, 2473, 2474, 1961, 1086, 1960,
	1917, 1916, 1086, 1154, 1155, 1156, 1153, 1915, 1516, 1411,
	1277, 3099, 2540, 2698, 1154, 1155, 1156, 1153, 1735, 2882,
	3682, 2446, 2450, 2446, 3681, 3225, 2568, 3656, 3624, 3623,
	2431, 3620, 2574, 2814, 2471, 1154, 1155, 1156, 1153, 3246,
	1417, 2426, 3489, 3267, 1311, 2407, 685, 2520, 2584, 687,
	3474, 2323, 3465, 3448, 686, 1919, 3443, 1086, 2499, 2440,
	2418, 3442, 3398, 2423, 3396, 2605, 1154, 1155, 1156, 1153,
	3368, 3314, 1086, 1086, 1086, 1793, 2468, 2558, 1086, 2416,
	2616, 2617, 2618, 2619, 1086, 2626, 3524, 2627, 2628, 3276,
	2629, 3234, 2631, 3245, 978, 2436, 2437, 3244, 3223, 3221,
	2554, 3200, 3197, 2626, 2452, 3195, 2688, 2555, 1154, 1155,
	1156, 1153, 3090, 3089, 3086, 2289, 2439, 3067, 1154, 1155,
	1156, 1153, 2611, 2612, 3065, 2565, 3049, 2615, 1763, 2684,
	2998, 2575, 2994, 2622, 2985, 2984, 1815, 594, 1557, 2905,
	2869, 2868, 1735, 1086, 1878, 1878, 1878, 1878, 1778, 2866,
	2115, 2586, 2805, 2802, 2763, 1086, 1878, 2737, 2677, 2289,
	2669, 2659, 2657, 2522, 1785, 2524, 2653, 1788, 1789, 1154,
	1155, 1156, 1153, 2652, 2651, 1411, 2599, 2509, 786, 785,
	2521, 2603, 2408, 2538, 2404, 2603, 615, 615, 2403, 2576,
	1969, 2610, 2706, 1963, 1719, 2567, 1718, 1517, 2581, 2582,
	1504, 8, 1232, 2598, 2706, 2573, 2230, 1228, 1227, 2233,
	2234, 2235, 2236, 2237, 2238, 2239, 7, 2585, 2242, 2243,
	2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2588,
	2254, 2255, 2256, 2257, 2258, 2719, 2259, 2607, 2601, 2479,
	2480, 2614, 194, 2604, 1073, 2485, 853, 194, 2583, 3520,
	1449, 1449, 1168, 1167, 1177, 1178, 1170, 1171, 1172, 1173,
	1174, 1175, 1176, 1169, 3389, 1738, 3388, 2646, 1668, 3377,
	1668, 2658, 3247, 2780, 3232, 3113, 3112, 3111, 119, 119,
	976, 3083, 3079, 3077, 2790, 3076, 2566, 3073, 3072, 3066,
	1411, 3233, 3064, 2797, 2748, 3047, 3037, 2689, 3036, 3022,
	3021, 2694, 2933, 2872, 2861, 2707, 2708, 2709, 2710, 177,
	2692, 166, 140, 2718, 2720, 2722, 2831, 2721, 1154, 1155,
	1156, 1153, 2824, 2816, 2775, 2815, 2809, 2746, 2738, 2518,
	2735, 2386, 2382, 2783, 2381, 2091, 2438, 2084, 2078, 2076,
	2754, 978, 2072, 1475, 2071, 2758, 2069, 1708, 2060, 2731,
	978, 1185, 2779, 1476, 1477, 2057, 2056, 1968, 1482, 1483,
	1168, 1167, 1177, 1178, 1170, 1171, 1172, 1173, 1174, 1175,
	1176, 1169, 2777, 1702, 1701, 2819, 1487, 2821, 171, 1491,
	2784, 1700, 1490, 2752, 1671, 1670, 1661, 2867, 2794, 177,
	1423, 1421, 3181, 2756, 1086, 2755, 3062, 3608, 1222, 3519,
	2885, 2799, 2771, 1569, 1570, 1571, 1572, 1573, 3462, 2776,
	2900, 3450, 3445, 2778, 2773, 615, 2787, 2786, 2785, 1154,
	1155, 1156, 1153, 1154, 1155, 1156, 1153, 2914, 1086, 1470,
	3348, 1086, 1086, 3331, 3327, 3305, 3289, 3208, 2806, 2829,
	1878, 2158, 3206, 2931, 1611, 3179, 2741, 2742, 1615, 1616,
	1617, 1618, 2813, 3178, 2807, 2793, 2828, 1652, 171, 3175,
	3174, 2218, 3140, 2822, 2823, 1662, 1154, 1155, 1156, 1153,
	2827, 2817, 2818, 2956, 2820, 2959, 3137, 2959, 2959, 2863,
	3135, 2908, 1086, 1154, 1155, 1156, 1153, 2917, 3102, 1481,
	2920, 2871, 1265, 1472, 1486, 1489, 1478, 1154, 1155, 1156,
	1153, 2980, 978, 1317, 978, 2685, 2554, 978, 2609, 1411,
	1411, 2561, 1709, 2560, 2865, 2939, 2976, 2556, 2870, 2052,
	3536, 2493, 2529, 2523, 3534, 2492, 2978, 2494, 2395, 2943,
	2945, 2305, 978, 2260, 2159, 2929, 2131, 2109, 2981, 2982,
	1599, 2901, 171, 1930, 1409, 1409, 1729, 2907, 1154, 1155,
	1156, 1153, 1154, 1155, 1156, 1153, 615, 1715, 1542, 1502,
	1479, 2885, 1276, 975, 1261, 2955, 2930, 977, 2926, 1257,
	1256, 2954, 1735, 1735, 1766, 2964, 2491, 1255, 1254, 1253,
	2166, 2167, 2938, 2188, 1252, 2916, 2490, 2187, 2918, 2919,
	2169, 2170, 2058, 1251, 1154, 1155, 1156, 1153, 1782, 2960,
	2961, 2965, 1250, 1154, 1155, 1156, 1153, 2937, 1249, 1248,
	1247, 2638, 2639, 1154, 1155, 1156, 1153, 1246, 1086, 1245,
	1244, 1243, 2462, 1242, 1420, 2489, 2654, 2655, 621, 2838,
	2839, 3035, 1241, 3532, 2488, 2840, 2841, 2842, 2843, 1240,
	2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 1239, 1238,
	2690, 1709, 1154, 1155, 1156, 1153, 1709, 1709, 2962, 1237,
	119, 1154, 1155, 1156, 1153, 1236, 1235, 2323, 1231, 1230,
	1229, 2986, 1226, 2991, 615, 2906, 3303, 2996, 1219, 2995,
	2990, 1218, 3000, 3001, 1216, 1154, 1155, 1156, 1153, 3011,
	1215, 1214, 2993, 1167, 1177, 1178, 1170, 1171, 1172, 1173,
	1174, 1175, 1176, 1169, 3015, 1213, 1949, 1212, 1211, 1952,
	1210, 1209, 1955, 1208, 1207, 1957, 3301, 3018, 3019, 3020,
	1206, 3638, 2487, 1205, 119, 3024, 1200, 2050, 3030, 119,
	1168, 1167, 1177, 1178, 1170, 1171, 1172, 1173, 1174, 1175,
	1176, 1169, 119, 1199, 1198, 1197, 2361, 1119, 3048, 1154,
	1155, 1156, 1153, 1071, 119, 2368, 3050, 3007, 3008, 3051,
	3054, 3530, 3176, 2163, 2145, 1995, 1107, 3068, 3636, 3055,
	1168, 1167, 1177, 1178, 1170, 1171, 1172, 1173, 1174, 1175,
	1176, 1169, 3106, 2486, 3060, 2446, 1177, 1178, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1169, 3310, 2289, 1878, 3125,
	2483, 3082, 1154, 1155, 1156, 1153, 3595, 3010, 3085, 2544,
	1154, 1155, 1156, 1153, 2482, 2316, 1919, 1971, 978, 2272,
	1118, 3143, 3013, 3012, 1086, 978, 2715, 1154, 1155, 1156,
	1153, 2716, 2712, 2956, 2406, 2713, 3080, 1086, 3210, 2711,
	2714, 1154, 1155, 1156, 1153, 2398, 3211, 104, 1086, 2481,
	3190, 1756, 1757, 612, 1411, 2903, 2277, 2280, 2281, 2282,
	2278, 2044, 2279, 2283, 2717, 2049, 2281, 2282, 3097, 2952,
	1735, 2953, 55, 3144, 1086, 3127, 1154, 1155, 1156, 1153,
	54, 2789, 2475, 3192, 3052, 3053, 3183, 3123, 2228, 1409,
	3173, 2465, 3186, 3124, 3025, 3209, 1852, 2622, 1464, 3134,
	2393, 3136, 3130, 194, 617, 2430, 2061, 616, 3166, 1154,
	1155, 1156, 1153, 1512, 2068, 1496, 1086, 3202, 1154, 1155,
	1156, 1153, 2121, 2706, 1932, 3180, 3185, 1113, 3212, 618,
	3182, 2411, 2412, 2082, 3057, 3189, 2880, 619, 2087, 2088,
	2089, 3194, 2441, 2092, 2093, 2094, 2095, 2096, 2097, 2098,
	2099, 2873, 3199, 3196, 2587, 1086, 3204, 2562, 3203, 3201,
	1609, 1751, 1752, 1753, 2180, 2706, 2154, 1760, 1728, 1154,
	1155, 1156, 1153, 1086, 1411, 1411, 3647, 3198, 2577, 2914,
	1657, 1656, 3447, 2580, 3230, 1272, 1273, 1154, 1155, 1156,
	1153, 1270, 1271, 3284, 2983, 3284, 3226, 1268, 1269, 2269,
	3227, 3216, 2265, 3272, 1266, 1267, 1086, 3299, 1086, 1409,
	3274, 1863, 3278, 3279, 3302, 1372, 3304, 1371, 1145, 2634,
	3214, 3017, 3270, 2740, 2120, 1411, 2635, 2636, 2637, 1997,
	1324, 3252, 3254, 1877, 3253, 1302, 1347, 3615, 3613, 3281,
	3573, 3553, 3552, 615, 3550, 1086, 1086, 3496, 3463, 1086,
	1086, 3277, 3249, 3362, 3287, 1563, 978, 1563, 3361, 3288,
	3274, 3243, 3300, 3222, 3069, 3044, 1323, 3043, 3028, 3127,
	3298, 3345, 2213, 2183, 1514, 2792, 3027, 1762, 3350, 3359,
	2750, 2147, 3173, 3308, 2059, 3311, 3335, 3336, 3363, 3364,
	3346, 3347, 3315, 1104, 3270, 3270, 3639, 3307, 3270, 3270,
	3166, 1411, 3640, 3639, 3640, 3329, 119, 3313, 3023, 119,
	119, 1083, 119, 2277, 2280, 2281, 2282, 2278, 3356, 2279,
	2283, 844, 845, 846, 847, 1339, 1083, 181, 3, 3383,
	3375, 63, 2, 3355, 3659, 1709, 1409, 1709, 2832, 3357,
	3660, 3351, 1, 2500, 1713, 1274, 848, 843, 1388, 2298,
	976, 1910, 1415, 3370, 1717, 1709, 1709, 850, 976, 2724,
	3416, 2725, 3378, 3016, 2727, 3410, 3374, 2514, 3382, 2016,
	2695, 2263, 119, 2135, 2899, 1312, 1086, 892, 1663, 1527,
	1000, 1097, 1524, 1096, 3433, 1094, 1612, 738, 1449, 3404,
	1974, 3439, 1168, 1167, 1177, 1178, 1170, 1171, 1172, 1173,
	1174, 1175, 1176, 1169, 2043, 2686, 3413, 2660, 3412, 3358,
	3408, 3425, 3411, 3646, 3230, 3675, 3607, 3429, 3235, 1086,
	3236, 3649, 1540, 722, 1411, 1563, 3544, 978, 1168, 1167,
	1177, 1178, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1169,
	3466, 3611, 3468, 3446, 3373, 2021, 1150, 2772, 915, 1185,
	776, 749, 1217, 3457, 1505, 1497, 2836, 2834, 1002, 1409,
	3455, 3485, 748, 3096, 2534, 2743, 3418, 999, 3270, 3479,
	916, 1958, 3371, 1465, 1086, 1469, 2179, 3426, 3515, 3309,
	3464, 2948, 2595, 3510, 3138, 3239, 3237, 3238, 656, 1889,
	592, 3497, 960, 3349, 3103, 3104, 3105, 1970, 657, 2443,
	3109, 3110, 2449, 3334, 2162, 3564, 3449, 872, 3492, 2463,
	2464, 3491, 2144, 3488, 873, 865, 2552, 2466, 2467, 3514,
	2551, 1086, 3499, 3270, 1580, 1159, 1597, 2852, 2853, 1411,
	2472, 1195, 3539, 3542, 3529, 3531, 3533, 3535, 694, 2046,
	2531, 3508, 3161, 2736, 3513, 62, 61, 3543, 3522, 60,
	59, 1940, 202, 740, 201, 3265, 1569, 1709, 3538, 3541,
	3651, 720, 3528, 719, 1409, 718, 717, 716, 3547, 1411,
	3270, 715, 3416, 3549, 2276, 2274, 2273, 1873, 1872, 1938,
	2912, 2625, 2620, 1804, 1802, 2613, 2934, 2208, 3583, 2215,
	1801, 2935, 2936, 3592, 3591, 3574, 3525, 3572, 3575, 3576,
	3526, 3326, 2670, 3229, 1409, 3577, 3578, 1750, 2204, 1821,
	2641, 1818, 1817, 2633, 3322, 3316, 1849, 3414, 3283, 3145,
	3146, 3152, 2578, 2579, 3600, 2153, 3601, 1025, 3602, 1021,
	3603, 1023, 1024, 3604, 3614, 1022, 3616, 3617, 2451, 2185,
	3612, 3610, 2875, 2127, 1086, 2126, 3479, 2124, 3619, 2123,
	1287, 3484, 3560, 3248, 2321, 2319, 3009, 3005, 1982, 1993,
	2788, 1874, 1870, 3628, 2146, 3439, 3391, 1755, 866, 2142,
	156, 3630, 3631, 3629, 49, 101, 154, 3645, 3635, 3653,
	3637, 48, 3652, 3641, 3642, 3643, 3644, 3634, 90, 89,
	100, 152, 47, 3626, 186, 185, 3664, 188, 1086, 3657,
	187, 184, 2372, 2373, 183, 1453, 3665, 182, 3554, 3666,
	3286, 838, 3514, 3668, 3002, 38, 37, 33, 3674, 3677,
	12, 11, 34, 21, 20, 2292, 1531, 19, 25, 3014,
	31, 30, 112, 111, 29, 110, 109, 108, 107, 106,
	28, 18, 3684, 42, 41, 40, 9, 1563, 99, 97,
	3653, 3691, 27, 3652, 3690, 98, 95, 96, 93, 91,
	3677, 3692, 74, 73, 72, 87, 3696, 86, 85, 84,
	83, 82, 80, 3352, 81, 914, 71, 3353, 70, 69,
	68, 67, 94, 92, 997, 78, 88, 79, 77, 1877,
	76, 75, 66, 65, 64, 138, 137, 136, 119, 135,
	134, 132, 133, 131, 177, 52, 166, 140, 130, 129,
	128, 127, 126, 43, 1850, 44, 45, 46, 148, 147,
	149, 177, 167, 151, 153, 150, 2757, 155, 2759, 159,
	145, 143, 146, 168, 144, 142, 177, 52, 166, 140,
	57, 102, 17, 3282, 24, 4, 1709, 0, 0, 1852,
	0, 1709, 117, 0, 167, 0, 998, 0, 0, 0,
	1995, 159, 0, 0, 0, 168, 0, 105, 0, 0,
	0, 0, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 0, 0, 0,
	171, 0, 0, 0, 0, 2808, 0, 0, 0, 105,
	1827, 0, 0, 0, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2830,
	0, 0, 0, 0, 0, 0, 0, 992, 987, 982,
	986, 990, 0, 0, 0, 0, 0, 0, 0, 3126,
	3458, 0, 0, 0, 0, 0, 0, 3129, 0, 0,
	122, 123, 0, 124, 125, 995, 0, 0, 0, 985,
	0, 0, 0, 0, 0, 0, 0, 0, 1843, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 123, 0, 124, 125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3498, 0, 119,
	0, 0, 3502, 3503, 0, 0, 0, 0, 0, 119,
	993, 0, 0, 0, 0, 0, 0, 996, 0, 0,
	0, 139, 165, 175, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 3523, 0, 0, 0, 0, 0, 983,
	0, 0, 0, 164, 158, 157, 0, 0, 1831, 0,
	58, 0, 0, 139, 165, 175, 0, 103, 0, 1837,
	2963, 0, 994, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 158, 157, 0, 1825,
	1859, 0, 58, 1826, 1828, 1830, 0, 1832, 1833, 1834,
	1838, 1839, 1840, 1842, 1845, 1846, 1847, 0, 0, 0,
	0, 0, 984, 0, 1835, 1844, 1836, 0, 0, 0,
	0, 160, 161, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1877, 1877, 1877, 1877, 0, 0, 0,
	0, 0, 0, 3296, 3297, 1877, 0, 0, 1851, 0,
	0, 0, 169, 160, 161, 162, 0, 0, 0, 0,
	0, 3621, 3622, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 163, 0, 114, 0,
	0, 0, 0, 0, 169, 0, 0, 0, 0, 991,
	0, 0, 1848, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 163, 1824,
	114, 0, 0, 0, 0, 0, 1823, 0, 0, 0,
	0, 0, 0, 0, 0, 988, 0, 0, 989, 0,
	0, 119, 0, 0, 0, 115, 119, 0, 0, 0,
	1841, 0, 0, 0, 0, 0, 0, 0, 51, 1829,
	0, 0, 0, 1850, 0, 0, 119, 0, 1811, 0,
	0, 0, 0, 0, 0, 119, 0, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 0, 0, 0, 0, 0, 0, 3061, 1852, 1820,
	0, 0, 0, 0, 3063, 0, 0, 53, 1853, 1854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3078, 1819, 0, 0, 0, 0, 53,
	0, 0, 172, 173, 0, 174, 0, 0, 0, 1827,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	1154, 1155, 1156, 1153, 172, 173, 0, 174, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 39, 0, 0, 1843, 0, 0,
	50, 0, 0, 0, 5, 0, 0, 976, 0, 119,
	120, 121, 119, 0, 0, 0, 0, 0, 1850, 1877,
	0, 0, 0, 1811, 0, 116, 39, 0, 0, 1641,
	0, 0, 50, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 120, 121, 1709, 0, 0, 0, 0, 0,
	0, 0, 0, 1852, 1820, 1709, 0, 0, 3205, 0,
	0, 3207, 0, 1853, 1854, 0, 0, 0, 1810, 1812,
	1809, 0, 1806, 0, 0, 0, 0, 1831, 3213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1837, 1819,
	0, 0, 0, 0, 0, 0, 1822, 1641, 1805, 0,
	0, 0, 0, 0, 1827, 0, 0, 0, 1825, 1859,
	0, 0, 1826, 1828, 1830, 0, 1832, 1833, 1834, 1838,
	1839, 1840, 1842, 1845, 1846, 1847, 0, 0, 0, 0,
	0, 0, 0, 1835, 1844, 1836, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1814, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1851, 0, 0,
	0, 0, 1843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1637, 1807, 1808, 0, 0, 0, 1634, 0,
	0, 0, 1636, 1633, 1635, 1639, 1640, 0, 0, 0,
	1638, 1848, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1824, 0,
	0, 0, 0, 0, 0, 1823, 0, 0, 0, 0,
	0, 0, 0, 1810, 2590, 1809, 0, 2589, 0, 0,
	0, 0, 1831, 0, 0, 0, 0, 0, 0, 1841,
	1637, 0, 0, 1837, 0, 0, 1634, 0, 1829, 0,
	1636, 1633, 1635, 1639, 1640, 0, 0, 0, 1638, 0,
	0, 1856, 1855, 1825, 1859, 0, 0, 1826, 1828, 1830,
	0, 1832, 1833, 1834, 1838, 1839, 1840, 1842, 1845, 1846,
	1847, 0, 0, 0, 0, 0, 0, 0, 1835, 1844,
	1836, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1814, 0, 3405, 119, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 1816, 0, 0, 0, 0, 0,
	0, 0, 1851, 1622, 1623, 1624, 1625, 1626, 1627, 1628,
	1629, 1630, 1631, 1632, 1644, 1645, 1646, 1647, 1648, 1649,
	1642, 1643, 0, 0, 0, 0, 0, 0, 1807, 1808,
	0, 0, 0, 0, 0, 0, 1858, 1877, 0, 1857,
	0, 0, 0, 0, 0, 0, 1848, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1824, 0, 0, 0, 0, 0, 0,
	1823, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630,
	1631, 1632, 1644, 1645, 1646, 1647, 1648, 1649, 1642, 1643,
	0, 0, 0, 0, 1841, 0, 0, 0, 1204, 0,
	0, 0, 0, 1829, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1856, 1855, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1816,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1858, 0, 0, 1857, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	3588, 0, 0, 0, 0, 756, 0, 0, 0, 0,
	0, 0, 0, 0, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 709, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 747, 522, 473, 392, 345, 540, 539, 0,
	0, 809, 817, 0, 0, 0, 3588, 0, 0, 0,
	0, 0, 0, 701, 0, 0, 737, 786, 785, 724,
	734, 0, 0, 274, 200, 468, 587, 470, 469, 725,
	0, 726, 730, 733, 729, 727, 728, 0, 801, 0,
	0, 0, 0, 0, 0, 693, 705, 0, 710, 0,
	0, 0, 0, 0, 3588, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 703, 0, 0, 0, 0, 757, 0,
	704, 0, 0, 752, 731, 735, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 119, 266, 412, 394, 342, 321, 322, 265,
	3694, 379, 299, 313, 296, 358, 732, 755, 759, 295,
	823, 753, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 824, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 750, 0,
	584, 0, 424, 0, 0, 807, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 754, 0, 382, 363,
	820, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 1665, 1664, 1666, 436, 329, 330, 0, 308,
	256, 257, 601, 805, 359, 550, 583, 475, 0, 819,
	800, 802, 803, 806, 810, 811, 812, 813, 814, 816,
	818, 822, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 821, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 758, 525, 526, 349, 350, 351, 352,
	808, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 830,
	804, 829, 831, 832, 828, 833, 834, 815, 714, 0,
	762, 826, 825, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 793, 769, 770, 771, 711,
	772, 766, 767, 712, 768, 794, 760, 790, 791, 739,
	763, 773, 789, 774, 792, 795, 796, 835, 836, 780,
	764, 225, 837, 777, 797, 788, 787, 775, 761, 798,
	799, 746, 741, 778, 779, 765, 781, 782, 783, 713,
	742, 743, 744, 745, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 784,
	756, 602, 471, 472, 582, 0, 706, 0, 0, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 709, 0, 0, 0, 301, 1710, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 747, 522, 473,
	392, 345, 540, 539, 0, 0, 809, 817, 0, 0,
	0, 0, 0, 0, 0, 1901, 0, 0, 701, 0,
	0, 737, 786, 785, 724, 734, 0, 0, 274, 200,
	468, 587, 470, 469, 725, 0, 726, 730, 733, 729,
	727, 728, 0, 801, 0, 0, 0, 0, 0, 0,
	693, 705, 0, 710, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 702, 703, 0,
	0, 0, 0, 757, 0, 704, 0, 0, 1902, 731,
	735, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 732, 755, 759, 295, 823, 753, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 824, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 750, 0, 584, 0, 424, 0, 0,
	807, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 754, 0, 382, 363, 820, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 805, 359,
	550, 583, 475, 0, 819, 800, 802, 803, 806, 810,
	811, 812, 813, 814, 816, 818, 822, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 821, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 758, 525,
	526, 349, 350, 351, 352, 808, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 830, 804, 829, 831, 832, 828,
	833, 834, 815, 714, 0, 762, 826, 825, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	793, 769, 770, 771, 711, 772, 766, 767, 712, 768,
	794, 760, 790, 791, 739, 763, 773, 789, 774, 792,
	795, 796, 835, 836, 780, 764, 225, 837, 777, 797,
	788, 787, 775, 761, 798, 799, 746, 741, 778, 779,
	765, 781, 782, 783, 713, 742, 743, 744, 745, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 784, 0, 602, 471, 472, 582,
	0, 706, 177, 756, 0, 0, 0, 0, 0, 0,
	0, 0, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 709, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	1188, 522, 473, 392, 345, 540, 539, 0, 0, 809,
	817, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 0, 0, 737, 786, 785, 724, 734, 0,
	0, 274, 200, 468, 587, 470, 469, 725, 0, 726,
	730, 733, 729, 727, 728, 0, 801, 0, 0, 0,
	0, 0, 0, 693, 705, 0, 710, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 703, 0, 0, 0, 0, 757, 0, 704, 0,
	0, 752, 731, 735, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 732, 755, 759, 295, 823, 753,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 824, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 750, 0, 584, 0,
	424, 0, 0, 807, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 754, 0, 382, 363, 820, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 805, 359, 550, 583, 475, 0, 819, 800, 802,
	803, 806, 810, 811, 812, 813, 814, 816, 818, 822,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 821, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 758, 525, 526, 349, 350, 351, 352, 808, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 830, 804, 829,
	831, 832, 828, 833, 834, 815, 714, 0, 762, 826,
	825, 827, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 141, 373,
	306, 546, 547, 793, 769, 770, 771, 711, 772, 766,
	767, 712, 768, 794, 760, 790, 791, 739, 763, 773,
	789, 774, 792, 795, 796, 835, 836, 780, 764, 225,
	837, 777, 797, 788, 787, 775, 761, 798, 799, 746,
	741, 778, 779, 765, 781, 782, 783, 713, 742, 743,
	744, 745, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 784, 756, 602,
	471, 472, 582, 0, 706, 0, 0, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	709, 0, 0, 0, 301, 3693, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 747, 522, 473, 392, 345,
	540, 539, 0, 0, 809, 817, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 737,
	786, 785, 724, 734, 0, 0, 274, 200, 468, 587,
	470, 469, 725, 0, 726, 730, 733, 729, 727, 728,
	0, 801, 0, 0, 0, 0, 0, 0, 693, 705,
	0, 710, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 703, 0, 0, 0,
	0, 757, 0, 704, 0, 0, 752, 731, 735, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 732,
	755, 759, 295, 823, 753, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	824, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 750, 0, 584, 0, 424, 0, 0, 807, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 754,
	0, 382, 363, 820, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 805, 359, 550, 583,
	475, 0, 819, 800, 802, 803, 806, 810, 811, 812,
	813, 814, 816, 818, 822, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 821, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 758, 525, 526, 349,
	350, 351, 352, 808, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 830, 804, 829, 831, 832, 828, 833, 834,
	815, 714, 0, 762, 826, 825, 827, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 793, 769,
	770, 771, 711, 772, 766, 767, 712, 768, 794, 760,
	790, 791, 739, 763, 773, 789, 774, 792, 795, 796,
	835, 836, 780, 764, 225, 837, 777, 797, 788, 787,
	775, 761, 798, 799, 746, 741, 778, 779, 765, 781,
	782, 783, 713, 742, 743, 744, 745, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 784, 756, 602, 471, 472, 582, 0, 706,
	0, 0, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 709, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	747, 522, 473, 392, 345, 540, 539, 0, 0, 809,
	817, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 0, 0, 737, 786, 785, 724, 734, 0,
	0, 274, 200, 468, 587, 470, 469, 725, 0, 726,
	730, 733, 729, 727, 728, 0, 801, 0, 0, 0,
	0, 0, 0, 693, 705, 0, 710, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 703, 0, 0, 0, 0, 757, 0, 704, 0,
	0, 752, 731, 735, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 732, 755, 759, 295, 823, 753,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 824, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 750, 0, 584, 0,
	424, 0, 0, 807, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 754, 0, 382, 363, 820, 3589,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 805, 359, 550, 583, 475, 0, 819, 800, 802,
	803, 806, 810, 811, 812, 813, 814, 816, 818, 822,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 821, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 758, 525, 526, 349, 350, 351, 352, 808, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 830, 804, 829,
	831, 832, 828, 833, 834, 815, 714, 0, 762, 826,
	825, 827, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 793, 769, 770, 771, 711, 772, 766,
	767, 712, 768, 794, 760, 790, 791, 739, 763, 773,
	789, 774, 792, 795, 796, 835, 836, 780, 764, 225,
	837, 777, 797, 788, 787, 775, 761, 798, 799, 746,
	741, 778, 779, 765, 781, 782, 783, 713, 742, 743,
	744, 745, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 784, 756, 602,
	471, 472, 582, 0, 706, 0, 0, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	709, 0, 0, 0, 301, 1710, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 747, 522, 473, 392, 345,
	540, 539, 0, 0, 809, 817, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 737,
	786, 785, 724, 734, 0, 0, 274, 200, 468, 587,
	470, 469, 725, 0, 726, 730, 733, 729, 727, 728,
	0, 801, 0, 0, 0, 0, 0, 0, 693, 705,
	0, 710, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 703, 0, 0, 0,
	0, 757, 0, 704, 0, 0, 752, 731, 735, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 732,
	755, 759, 295, 823, 753, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	824, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 750, 0, 584, 0, 424, 0, 0, 807, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 754,
	0, 382, 363, 820, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 805, 359, 550, 583,
	475, 0, 819, 800, 802, 803, 806, 810, 811, 812,
	813, 814, 816, 818, 822, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 821, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 758, 525, 526, 349,
	350, 351, 352, 808, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 830, 804, 829, 831, 832, 828, 833, 834,
	815, 714, 0, 762, 826, 825, 827, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 793, 769,
	770, 771, 711, 772, 766, 767, 712, 768, 794, 760,
	790, 791, 739, 763, 773, 789, 774, 792, 795, 796,
	835, 836, 780, 764, 225, 837, 777, 797, 788, 787,
	775, 761, 798, 799, 746, 741, 778, 779, 765, 781,
	782, 783, 713, 742, 743, 744, 745, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 784, 756, 602, 471, 472, 582, 0, 706,
	0, 0, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 709, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	747, 522, 473, 392, 345, 540, 539, 0, 0, 809,
	817, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 0, 0, 737, 786, 785, 724, 734, 0,
	0, 274, 200, 468, 587, 470, 469, 725, 0, 726,
	730, 733, 729, 727, 728, 0, 801, 0, 0, 0,
	0, 0, 0, 693, 705, 0, 710, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 703, 1448, 0, 0, 0, 757, 0, 704, 0,
	0, 752, 731, 735, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 732, 755, 759, 295, 823, 753,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 824, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 750, 0, 584, 0,
	424, 0, 0, 807, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 754, 0, 382, 363, 820, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 805, 359, 550, 583, 475, 0, 819, 800, 802,
	803, 806, 810, 811, 812, 813, 814, 816, 818, 822,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 821, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 758, 525, 526, 349, 350, 351, 352, 808, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 830, 804, 829,
	831, 832, 828, 833, 834, 815, 714, 0, 762, 826,
	825, 827, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 793, 769, 770, 771, 711, 772, 766,
	767, 712, 768, 794, 760, 790, 791, 739, 763, 773,
	789, 774, 792, 795, 796, 835, 836, 780, 764, 225,
	837, 777, 797, 788, 787, 775, 761, 798, 799, 746,
	741, 778, 779, 765, 781, 782, 783, 713, 742, 743,
	744, 745, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 784, 0, 602,
	471, 472, 582, 756, 706, 0, 2067, 0, 0, 0,
	0, 0, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 709, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	747, 522, 473, 392, 345, 540, 539, 0, 0, 809,
	817, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 0, 0, 737, 786, 785, 724, 734, 0,
	0, 274, 200, 468, 587, 470, 469, 725, 0, 726,
	730, 733, 729, 727, 728, 0, 801, 0, 0, 0,
	0, 0, 0, 693, 705, 0, 710, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 703, 0, 0, 0, 0, 757, 0, 704, 0,
	0, 752, 731, 735, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 732, 755, 759, 295, 823, 753,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 824, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 750, 0, 584, 0,
	424, 0, 0, 807, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 754, 0, 382, 363, 820, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 805, 359, 550, 583, 475, 0, 819, 800, 802,
	803, 806, 810, 811, 812, 813, 814, 816, 818, 822,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 821, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 758, 525, 526, 349, 350, 351, 352, 808, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 830, 804, 829,
	831, 832, 828, 833, 834, 815, 714, 0, 762, 826,
	825, 827, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 793, 769, 770, 771, 711, 772, 766,
	767, 712, 768, 794, 760, 790, 791, 739, 763, 773,
	789, 774, 792, 795, 796, 835, 836, 780, 764, 225,
	837, 777, 797, 788, 787, 775, 761, 798, 799, 746,
	741, 778, 779, 765, 781, 782, 783, 713, 742, 743,
	744, 745, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 784, 756, 602,
	471, 472, 582, 0, 706, 0, 0, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	709, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 747, 522, 473, 392, 345,
	540, 539, 0, 0, 809, 817, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 737,
	786, 785, 724, 734, 0, 0, 274, 200, 468, 587,
	470, 469, 725, 0, 726, 730, 733, 729, 727, 728,
	0, 801, 0, 0, 0, 0, 0, 0, 693, 705,
	0, 710, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 703, 1703, 0, 0,
	0, 757, 0, 704, 0, 0, 752, 731, 735, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 732,
	755, 759, 295, 823, 753, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	824, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 750, 0, 584, 0, 424, 0, 0, 807, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 754,
	0, 382, 363, 820, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 805, 359, 550, 583,
	475, 0, 819, 800, 802, 803, 806, 810, 811, 812,
	813, 814, 816, 818, 822, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 821, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 758, 525, 526, 349,
	350, 351, 352, 808, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 830, 804, 829, 831, 832, 828, 833, 834,
	815, 714, 0, 762, 826, 825, 827, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 793, 769,
	770, 771, 711, 772, 766, 767, 712, 768, 794, 760,
	790, 791, 739, 763, 773, 789, 774, 792, 795, 796,
	835, 836, 780, 764, 225, 837, 777, 797, 788, 787,
	775, 761, 798, 799, 746, 741, 778, 779, 765, 781,
	782, 783, 713, 742, 743, 744, 745, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 784, 756, 602, 471, 472, 582, 0, 706,
	0, 0, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 709, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	747, 522, 473, 392, 345, 540, 539, 0, 0, 809,
	817, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 0, 0, 737, 786, 785, 724, 734, 0,
	0, 274, 200, 468, 587, 470, 469, 725, 0, 726,
	730, 733, 729, 727, 728, 0, 801, 0, 0, 0,
	0, 0, 0, 693, 705, 0, 710, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 703, 0, 0, 0, 0, 757, 0, 704, 0,
	0, 752, 731, 735, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 732, 755, 759, 295, 823, 753,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 824, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 750, 0, 584, 0,
	424, 0, 0, 807, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 754, 0, 382, 363, 820, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 805, 359, 550, 583, 475, 0, 819, 800, 802,
	803, 806, 810, 811, 812, 813, 814, 816, 818, 822,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 821, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 758, 525, 526, 349, 350, 351, 352, 808, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 830, 804, 829,
	831, 832, 828, 833, 834, 815, 714, 0, 762, 826,
	825, 827, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 793, 769, 770, 771, 711, 772, 766,
	767, 712, 768, 794, 760, 790, 791, 739, 763, 773,
	789, 774, 792, 795, 796, 835, 836, 780, 764, 225,
	837, 777, 797, 788, 787, 775, 761, 798, 799, 746,
	741, 778, 779, 765, 781, 782, 783, 713, 742, 743,
	744, 745, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 784, 756, 602,
	471, 472, 582, 0, 706, 0, 0, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	709, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 747, 522, 473, 392, 345,
	540, 539, 0, 0, 809, 817, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 737,
	786, 785, 724, 734, 0, 0, 274, 200, 468, 587,
	470, 469, 2497, 0, 2498, 730, 733, 729, 727, 728,
	0, 801, 0, 0, 0, 0, 0, 0, 693, 705,
	0, 710, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 703, 0, 0, 0,
	0, 757, 0, 704, 0, 0, 752, 731, 735, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 732,
	755, 759, 295, 823, 753, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	824, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 750, 0, 584, 0, 424, 0, 0, 807, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 754,
	0, 382, 363, 820, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 805, 359, 550, 583,
	475, 0, 819, 800, 802, 803, 806, 810, 811, 812,
	813, 814, 816, 818, 822, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 821, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 758, 525, 526, 349,
	350, 351, 352, 808, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 830, 804, 829, 831, 832, 828, 833, 834,
	815, 714, 0, 762, 826, 825, 827, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 793, 769,
	770, 771, 711, 772, 766, 767, 712, 768, 794, 760,
	790, 791, 739, 763, 773, 789, 774, 792, 795, 796,
	835, 836, 780, 764, 225, 837, 777, 797, 788, 787,
	775, 761, 798, 799, 746, 741, 778, 779, 765, 781,
	782, 783, 713, 742, 743, 744, 745, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 784, 756, 602, 471, 472, 582, 0, 706,
	0, 0, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 1581, 0, 0, 0, 709, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	747, 522, 473, 392, 345, 540, 539, 0, 0, 809,
	817, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 0, 0, 737, 786, 785, 724, 734, 0,
	0, 274, 200, 468, 587, 470, 469, 725, 0, 726,
	730, 733, 729, 727, 728, 0, 801, 0, 0, 0,
	0, 0, 0, 0, 705, 0, 710, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 703, 0, 0, 0, 0, 757, 0, 704, 0,
	0, 752, 731, 735, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 732, 755, 759, 295, 823, 753,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 824, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 750, 0, 584, 0,
	424, 0, 0, 807, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 754, 0, 382, 363, 820, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 1582, 1583, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 805, 359, 550, 583, 475, 0, 819, 800, 802,
	803, 806, 810, 811, 812, 813, 814, 816, 818, 822,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 821, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 758, 525, 526, 349, 350, 351, 352, 808, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 830, 804, 829,
	831, 832, 828, 833, 834, 815, 714, 0, 762, 826,
	825, 827, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 793, 769, 770, 771, 711, 772, 766,
	767, 712, 768, 794, 760, 790, 791, 739, 763, 773,
	789, 774, 792, 795, 796, 835, 836, 780, 764, 225,
	837, 777, 797, 788, 787, 775, 761, 798, 799, 746,
	741, 778, 779, 765, 781, 782, 783, 713, 742, 743,
	744, 745, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 784, 756, 602,
	471, 472, 582, 0, 706, 0, 0, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	709, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 747, 522, 473, 392, 345,
	540, 539, 0, 0, 809, 817, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 737,
	786, 785, 724, 734, 0, 0, 274, 200, 468, 587,
	470, 469, 725, 0, 726, 730, 733, 729, 727, 728,
	0, 801, 0, 0, 0, 0, 0, 0, 0, 705,
	0, 710, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 703, 0, 0, 0,
	0, 757, 0, 704, 0, 0, 752, 731, 735, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 732,
	755, 759, 295, 823, 753, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	824, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 750, 0, 584, 0, 424, 0, 0, 807, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 754,
	0, 382, 363, 820, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 805, 359, 550, 583,
	475, 0, 819, 800, 802, 803, 806, 810, 811, 812,
	813, 814, 816, 818, 822, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 821, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 758, 525, 526, 349,
	350, 351, 352, 808, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 830, 804, 829, 831, 832, 828, 833, 834,
	815, 714, 0, 762, 826, 825, 827, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 793, 769,
	770, 771, 711, 772, 766, 767, 712, 768, 794, 760,
	790, 791, 739, 763, 773, 789, 774, 792, 795, 796,
	835, 836, 780, 764, 225, 837, 777, 797, 788, 787,
	775, 761, 798, 799, 746, 741, 778, 779, 765, 781,
	782, 783, 713, 742, 743, 744, 745, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 784, 756, 602, 471, 472, 582, 0, 706,
	0, 0, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 709, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	747, 522, 473, 392, 345, 540, 539, 0, 0, 809,
	817, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 737, 786, 785, 724, 734, 0,
	0, 274, 200, 468, 587, 470, 469, 725, 0, 726,
	730, 733, 729, 727, 728, 0, 801, 0, 0, 0,
	0, 0, 0, 693, 705, 0, 710, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 703, 0, 0, 0, 0, 757, 0, 704, 0,
	0, 752, 731, 735, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 732, 755, 759, 295, 823, 753,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 824, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 750, 0, 584, 0,
	424, 0, 0, 807, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 754, 0, 382, 363, 820, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 805, 359, 550, 583, 475, 0, 819, 800, 802,
	803, 806, 810, 811, 812, 813, 814, 816, 818, 822,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 821, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 758, 525, 526, 349, 350, 351, 352, 808, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 830, 804, 829,
	831, 832, 828, 833, 834, 815, 714, 0, 762, 826,
	825, 827, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 793, 769, 770, 771, 711, 772, 766,
	767, 712, 768, 794, 760, 790, 791, 739, 763, 773,
	789, 774, 792, 795, 796, 835, 836, 780, 764, 225,
	837, 777, 797, 788, 787, 775, 761, 798, 799, 746,
	741, 778, 779, 765, 781, 782, 783, 713, 742, 743,
	744, 745, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 784, 0, 602,
	471, 472, 582, 0, 706, 177, 52, 166, 140, 0,
	0, 0, 0, 0, 0, 361, 0, 486, 519, 508,
	591, 474, 0, 167, 0, 0, 0, 0, 0, 0,
	159, 0, 301, 0, 168, 331, 523, 505, 515, 506,
	491, 492, 493, 500, 311, 494, 495, 496, 466, 497,
	467, 498, 499, 117, 522, 473, 392, 345, 540, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 171, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 274, 200, 468, 587, 470, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 397, 414, 275, 388, 427, 280, 395, 270,
	360, 384, 0, 0, 266, 412, 394, 342, 321, 322,
	265, 0, 379, 299, 313, 296, 358, 0, 411, 439,
	295, 430, 0, 422, 268, 0, 421, 357, 408, 413,
	343, 337, 267, 410, 341, 336, 325, 303, 455, 326,
	327, 317, 369, 335, 370, 318, 347, 346, 348, 0,
	0, 0, 0, 0, 450, 451, 0, 0, 0, 0,
	0, 0, 139, 165, 175, 0, 103, 0, 581, 0,
	0, 584, 0, 424, 0, 0, 192, 0, 0, 0,
	396, 0, 0, 328, 164, 158, 157, 440, 0, 382,
	363, 204, 0, 0, 380, 333, 409, 371, 415, 398,
	423, 376, 372, 259, 399, 298, 344, 271, 273, 293,
	300, 302, 304, 305, 353, 354, 366, 387, 400, 401,
	402, 297, 281, 381, 282, 315, 283, 260, 289, 287,
	290, 389, 291, 262, 367, 406, 0, 310, 377, 340,
	263, 339, 368, 405, 404, 272, 431, 437, 438, 527,
	0, 443, 560, 561, 562, 452, 457, 458, 459, 461,
	462, 463, 464, 528, 545, 512, 482, 445, 536, 479,
	483, 484, 548, 0, 0, 0, 436, 329, 330, 0,
	308, 256, 257, 419, 294, 359, 550, 583, 475, 0,
	537, 476, 485, 286, 509, 521, 520, 355, 435, 195,
	532, 535, 465, 205, 0, 529, 544, 502, 543, 206,
	365, 0, 386, 541, 488, 0, 533, 507, 0, 534,
	503, 538, 0, 477, 0, 393, 417, 429, 446, 449,
	478, 563, 564, 565, 261, 448, 567, 568, 569, 570,
	571, 572, 573, 566, 420, 510, 487, 513, 428, 490,
	489, 0, 0, 524, 444, 525, 526, 349, 350, 351,
	352, 312, 551, 279, 447, 375, 115, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 516, 517, 514, 203,
	0, 574, 575, 0, 0, 441, 442, 307, 314, 460,
	316, 278, 364, 309, 426, 323, 0, 453, 518, 454,
	577, 580, 578, 579, 356, 319, 320, 390, 324, 334,
	378, 425, 362, 383, 276, 416, 391, 338, 504, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 558, 557, 556,
	555, 554, 553, 552, 0, 0, 501, 403, 288, 253,
	284, 285, 292, 374, 269, 407, 385, 0, 258, 481,
	332, 141, 373, 306, 546, 547, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	549, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 249, 250, 251, 252, 0, 0, 0, 432, 433,
	434, 456, 418, 480, 207, 39, 193, 196, 198, 197,
	0, 50, 530, 542, 576, 5, 585, 586, 588, 590,
	589, 120, 208, 471, 472, 582, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 0, 486, 519,
	508, 591, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 331, 523, 505, 515,
	506, 491, 492, 493, 500, 311, 494, 495, 496, 466,
	497, 467, 498, 499, 117, 522, 473, 392, 345, 540,
	539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 0, 0, 199, 0,
	0, 0, 0, 0, 0, 274, 200, 468, 587, 470,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 2196, 2199, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 397, 414, 275, 388, 427, 280, 395,
	270, 360, 384, 0, 0, 266, 412, 394, 342, 321,
	322, 265, 0, 379, 299, 313, 296, 358, 0, 411,
	439, 295, 430, 0, 422, 268, 0, 421, 357, 408,
	413, 343, 337, 267, 410, 341, 336, 325, 303, 455,
	326, 327, 317, 369, 335, 370, 318, 347, 346, 348,
	0, 0, 0, 0, 0, 450, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 584, 2200, 424, 0, 0, 0, 2195, 0,
	2194, 396, 2192, 2197, 328, 0, 0, 0, 440, 0,
	382, 363, 604, 0, 0, 380, 333, 409, 371, 415,
	398, 423, 376, 372, 259, 399, 298, 344, 271, 273,
	293, 300, 302, 304, 305, 353, 354, 366, 387, 400,
	401, 402, 297, 281, 381, 282, 315, 283, 260, 289,
	287, 290, 389, 291, 262, 367, 406, 2198, 310, 377,
	340, 263, 339, 368, 405, 404, 272, 431, 437, 438,
	527, 0, 443, 605, 606, 607, 452, 457, 458, 459,
	461, 462, 463, 464, 528, 545, 512, 482, 445, 536,
	479, 483, 484, 548, 0, 0, 0, 436, 329, 330,
	0, 308, 256, 257, 601, 294, 359, 550, 583, 475,
	0, 537, 476, 485, 286, 509, 521, 520, 355, 435,
	0, 532, 535, 465, 600, 0, 529, 544, 603, 543,
	597, 365, 0, 386, 541, 488, 0, 533, 507, 0,
	534, 503, 538, 0, 477, 0, 393, 417, 429, 446,
	449, 478, 563, 564, 565, 261, 448, 567, 568, 569,
	570, 571, 572, 573, 566, 420, 510, 487, 513, 428,
	490, 489, 0, 0, 524, 444, 525, 526, 349, 350,
	351, 352, 312, 551, 279, 447, 375, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 517, 514,
	608, 0, 574, 575, 0, 0, 441, 442, 307, 314,
	460, 316, 278, 364, 309, 426, 323, 0, 453, 518,
	454, 577, 580, 578, 579, 356, 319, 320, 390, 324,
	334, 378, 425, 362, 383, 276, 416, 391, 338, 504,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 559, 558, 557,
	556, 555, 554, 553, 552, 0, 0, 501, 403, 288,
	253, 284, 285, 292, 598, 595, 407, 599, 0, 258,
	481, 332, 141, 373, 306, 546, 547, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 549, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 249, 250, 251, 252, 0, 0, 0, 432,
	433, 434, 456, 418, 480, 596, 0, 0, 0, 0,
	0, 0, 0, 530, 542, 576, 0, 585, 586, 588,
	590, 589, 0, 602, 471, 472, 582, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 0, 522, 473, 392, 345,
	540, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1223, 0, 0, 199,
	0, 0, 724, 734, 0, 0, 274, 200, 468, 587,
	470, 469, 725, 0, 726, 730, 733, 729, 727, 728,
	0, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 732,
	411, 439, 295, 430, 0, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	455, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 0, 584, 0, 424, 0, 0, 0, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 440,
	0, 382, 363, 604, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 294, 359, 550, 583,
	475, 0, 537, 476, 485, 286, 509, 521, 520, 355,
	435, 0, 532, 535, 465, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 420, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 444, 525, 526, 349,
	350, 351, 352, 312, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 549, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 249, 250, 251, 252, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 589, 0, 602, 471, 472, 582, 177, 52,
	166, 140, 0, 0, 0, 0, 0, 0, 361, 625,
	486, 519, 508, 591, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 331, 523,
	505, 515, 506, 491, 492, 493, 500, 311, 494, 495,
	496, 466, 497, 467, 498, 499, 0, 522, 473, 392,
	345, 540, 539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 631, 0, 0, 0, 0, 630, 0, 0,
	199, 0, 0, 0, 0, 0, 0, 274, 200, 468,
	587, 470, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 629,
	0, 581, 0, 0, 584, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 604, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 527, 0, 443, 605, 606, 607, 452, 457,
	458, 459, 461, 462, 463, 464, 528, 545, 512, 482,
	445, 536, 479, 483, 484, 548, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 601, 294, 359, 550,
	583, 475, 0, 537, 476, 485, 286, 509, 521, 520,
	355, 435, 0, 532, 535, 465, 600, 0, 529, 544,
	603, 543, 597, 365, 0, 386, 541, 488, 0, 533,
	507, 0, 534, 503, 538, 0, 477, 0, 393, 417,
	429, 446, 449, 478, 563, 564, 565, 261, 448, 567,
	568, 569, 570, 571, 572, 573, 566, 420, 510, 487,
	513, 428, 490, 489, 0, 0, 524, 444, 525, 526,
	349, 350, 351, 352, 626, 628, 279, 447, 375, 639,
	511, 0, 0, 0, 0, 0, 0, 0, 0, 516,
	517, 514, 608, 0, 574, 575, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 518, 454, 577, 580, 578, 579, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 504, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 559,
	558, 557, 556, 555, 554, 553, 552, 0, 0, 501,
	403, 288, 253, 284, 285, 292, 598, 595, 407, 599,
	0, 258, 481, 332, 141, 373, 306, 546, 547, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 549, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 249, 250, 251, 252, 0, 0,
	0, 432, 433, 434, 456, 418, 480, 596, 0, 0,
	0, 0, 0, 0, 0, 530, 542, 576, 0, 585,
	586, 588, 590, 589, 0, 602, 471, 472, 582, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 0, 522, 473,
	392, 345, 540, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 274, 200,
	468, 587, 470, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 2196, 2199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 584, 2200, 424, 0, 0,
	0, 2195, 0, 2194, 396, 2192, 2197, 328, 0, 0,
	0, 440, 0, 382, 363, 604, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	2198, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 294, 359,
	550, 583, 475, 0, 537, 476, 485, 286, 509, 521,
	520, 355, 435, 0, 532, 535, 465, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 420, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 444, 525,
	526, 349, 350, 351, 352, 312, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 549, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 249, 250, 251, 252, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 589, 0, 602, 471, 472, 582,
	361, 0, 486, 519, 508, 591, 474, 0, 1043, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	331, 523, 505, 515, 506, 491, 492, 493, 500, 311,
	494, 495, 496, 466, 497, 467, 498, 499, 0, 522,
	473, 392, 345, 540, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 274,
	200, 468, 587, 470, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1029,
	0, 0, 0, 0, 0, 0, 264, 397, 414, 275,
	388, 427, 280, 395, 270, 360, 384, 0, 0, 2345,
	2348, 2349, 2350, 2351, 2352, 2353, 0, 2358, 2354, 2355,
	2356, 2357, 0, 2340, 2341, 2342, 2343, 1027, 2324, 2346,
	0, 2325, 357, 2326, 2327, 2328, 2329, 2330, 2331, 2332,
	2333, 2334, 2337, 2338, 2335, 2336, 2344, 369, 335, 370,
	318, 347, 346, 348, 1054, 1056, 1058, 1060, 1063, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 584, 0, 424, 0,
	0, 0, 0, 0, 0, 396, 0, 0, 328, 0,
	0, 0, 2339, 0, 382, 363, 604, 0, 0, 380,
	333, 409, 371, 415, 398, 423, 376, 372, 259, 399,
	298, 344, 271, 273, 293, 300, 302, 304, 305, 353,
	354, 366, 387, 400, 401, 402, 297, 281, 381, 282,
	315, 283, 260, 289, 287, 290, 389, 291, 262, 367,
	406, 0, 310, 377, 340, 263, 339, 368, 405, 404,
	272, 431, 437, 438, 527, 0, 443, 605, 606, 607,
	452, 457, 458, 459, 461, 462, 463, 464, 528, 545,
	512, 482, 445, 536, 479, 483, 484, 548, 0, 0,
	0, 436, 329, 330, 0, 308, 256, 257, 601, 294,
	359, 550, 583, 475, 0, 537, 476, 485, 286, 509,
	521, 520, 355, 435, 0, 532, 535, 465, 600, 0,
	529, 544, 603, 543, 597, 365, 0, 386, 541, 488,
	0, 533, 507, 0, 534, 503, 538, 0, 477, 0,
	393, 417, 429, 446, 449, 478, 563, 564, 565, 261,
	448, 567, 568, 569, 570, 571, 572, 573, 566, 420,
	510, 487, 513, 428, 490, 489, 0, 0, 524, 444,
	525, 526, 349, 350, 351, 352, 312, 551, 279, 447,
	375, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	0, 516, 517, 514, 608, 0, 574, 575, 0, 0,
	441, 442, 307, 314, 460, 316, 278, 364, 309, 426,
	323, 0, 453, 518, 454, 577, 580, 578, 579, 356,
	319, 320, 390, 324, 334, 378, 425, 362, 383, 276,
	416, 391, 338, 504, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 558, 557, 556, 555, 554, 553, 552, 0,
	0, 501, 403, 288, 253, 284, 285, 292, 598, 595,
	407, 599, 0, 258, 2347, 332, 0, 373, 306, 546,
	547, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 549, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 249, 250, 251, 252,
	0, 0, 0, 432, 433, 434, 456, 418, 480, 596,
	0, 0, 0, 0, 0, 0, 0, 530, 542, 576,
	0, 585, 586, 588, 590, 589, 0, 602, 471, 472,
	582, 361, 0, 486, 519, 508, 591, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 331, 523, 505, 515, 506, 491, 492, 493, 500,
	311, 494, 495, 496, 466, 497, 467, 498, 499, 0,
	522, 473, 392, 345, 540, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 0, 0,
	274, 200, 468, 587, 470, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 2217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 397, 414,
	275, 388, 427, 280, 395, 270, 360, 384, 0, 0,
	266, 412, 394, 342, 321, 322, 265, 0, 379, 299,
	313, 296, 358, 0, 411, 439, 295, 430, 0, 422,
	268, 0, 421, 357, 408, 413, 343, 337, 267, 410,
	341, 336, 325, 303, 455, 326, 327, 317, 369, 335,
	370, 318, 347, 346, 348, 0, 0, 0, 0, 0,
	450, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 584, 2216, 424,
	0, 0, 0, 2222, 2219, 2221, 396, 0, 2220, 328,
	0, 0, 0, 440, 0, 382, 363, 604, 0, 2214,
	380, 333, 409, 371, 415, 398, 423, 376, 372, 259,
	399, 298, 344, 271, 273, 293, 300, 302, 304, 305,
	353, 354, 366, 387, 400, 401, 402, 297, 281, 381,
	282, 315, 283, 260, 289, 287, 290, 389, 291, 262,
	367, 406, 0, 310, 377, 340, 263, 339, 368, 405,
	404, 272, 431, 437, 438, 527, 0, 443, 605, 606,
	607, 452, 457, 458, 459, 461, 462, 463, 464, 528,
	545, 512, 482, 445, 536, 479, 483, 484, 548, 0,
	0, 0, 436, 329, 330, 0, 308, 256, 257, 601,
	294, 359, 550, 583, 475, 0, 537, 476, 485, 286,
	509, 521, 520, 355, 435, 0, 532, 535, 465, 600,
	0, 529, 544, 603, 543, 597, 365, 0, 386, 541,
	488, 0, 533, 507, 0, 534, 503, 538, 0, 477,
	0, 393, 417, 429, 446, 449, 478, 563, 564, 565,
	261, 448, 567, 568, 569, 570, 571, 572, 573, 566,
	420, 510, 487, 513, 428, 490, 489, 0, 0, 524,
	444, 525, 526, 349, 350, 351, 352, 312, 551, 279,
	447, 375, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 516, 517, 514, 608, 0, 574, 575, 0,
	0, 441, 442, 307, 314, 460, 316, 278, 364, 309,
	426, 323, 0, 453, 518, 454, 577, 580, 578, 579,
	356, 319, 320, 390, 324, 334, 378, 425, 362, 383,
	276, 416, 391, 338, 504, 531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 558, 557, 556, 555, 554, 553, 552,
	0, 0, 501, 403, 288, 253, 284, 285, 292, 598,
	595, 407, 599, 0, 258, 481, 332, 0, 373, 306,
	546, 547, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 549, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 249, 250, 251,
	252, 0, 0, 0, 432, 433, 434, 456, 418, 480,
	596, 0, 0, 0, 0, 0, 0, 0, 530, 542,
	576, 0, 585, 586, 588, 590, 589, 0, 602, 471,
	472, 582, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	0, 522, 473, 392, 345, 540, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 274, 200, 468, 587, 470, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 2217, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 0, 411, 439, 295, 430, 0,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 455, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 0, 0, 584, 2216,
	424, 0, 0, 0, 2222, 2219, 2221, 396, 0, 2220,
	328, 0, 0, 0, 440, 0, 382, 363, 604, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 294, 359, 550, 583, 475, 0, 537, 476, 485,
	286, 509, 521, 520, 355, 435, 0, 532, 535, 465,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 420, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 444, 525, 526, 349, 350, 351, 352, 312, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 549, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 249, 250,
	251, 252, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 589, 0, 602,
	471, 472, 582, 361, 0, 486, 519, 508, 591, 474,
	0, 0, 0, 0, 0, 1942, 0, 0, 0, 0,
	301, 0, 0, 331, 523, 505, 515, 506, 491, 492,
	493, 500, 311, 494, 495, 496, 466, 497, 467, 498,
	499, 0, 522, 473, 392, 345, 540, 539, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 1943, 0,
	0, 0, 274, 200, 468, 587, 470, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	1154, 1155, 1156, 1153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 584,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 604,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 527, 0, 443,
	605, 606, 607, 452, 457, 458, 459, 461, 462, 463,
	464, 528, 545, 512, 482, 445, 536, 479, 483, 484,
	548, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 601, 294, 359, 550, 583, 475, 0, 537, 476,
	485, 286, 509, 521, 520, 355, 435, 0, 532, 535,
	465, 600, 0, 529, 544, 603, 543, 597, 365, 0,
	386, 541, 488, 0, 533, 507, 0, 534, 503, 538,
	0, 477, 0, 393, 417, 429, 446, 449, 478, 563,
	564, 565, 261, 448, 567, 568, 569, 570, 571, 572,
	573, 566, 420, 510, 487, 513, 428, 490, 489, 0,
	0, 524, 444, 525, 526, 349, 350, 351, 352, 312,
	551, 279, 447, 375, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 517, 514, 608, 0, 574,
	575, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 518, 454, 577, 580,
	578, 579, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 504, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 558, 557, 556, 555, 554,
	553, 552, 0, 0, 501, 403, 288, 253, 284, 285,
	292, 598, 595, 407, 599, 0, 258, 481, 332, 0,
	373, 306, 546, 547, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 549, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 249,
	250, 251, 252, 0, 0, 0, 432, 433, 434, 456,
	418, 480, 596, 0, 0, 0, 0, 0, 0, 0,
	530, 542, 576, 0, 585, 586, 588, 590, 589, 177,
	602, 471, 472, 582, 0, 0, 0, 0, 0, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 117, 522, 473,
	392, 345, 540, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 1988,
	0, 199, 0, 0, 0, 0, 0, 0, 274, 200,
	468, 587, 470, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 584, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 604, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 294, 359,
	550, 583, 475, 0, 537, 476, 485, 286, 509, 521,
	520, 355, 435, 0, 532, 535, 465, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 420, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 444, 525,
	526, 349, 350, 351, 352, 312, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 141, 373, 306, 546, 547,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 549, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 249, 250, 251, 252, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 589, 177, 602, 471, 472, 582,
	0, 0, 0, 0, 0, 361, 0, 486, 519, 508,
	591, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 331, 523, 505, 515, 506,
	491, 492, 493, 500, 311, 494, 495, 496, 466, 497,
	467, 498, 499, 117, 522, 473, 392, 345, 540, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 1977, 0, 199, 0, 0,
	0, 0, 0, 0, 274, 200, 468, 587, 470, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 397, 414, 275, 388, 427, 280, 395, 270,
	360, 384, 0, 0, 266, 412, 394, 342, 321, 322,
	265, 0, 379, 299, 313, 296, 358, 0, 411, 439,
	295, 430, 0, 422, 268, 0, 421, 357, 408, 413,
	343, 337, 267, 410, 341, 336, 325, 303, 455, 326,
	327, 317, 369, 335, 370, 318, 347, 346, 348, 0,
	0, 0, 0, 0, 450, 451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 584, 0, 424, 0, 0, 0, 0, 0, 0,
	396, 0, 0, 328, 0, 0, 0, 440, 0, 382,
	363, 604, 0, 0, 380, 333, 409, 371, 415, 398,
	423, 376, 372, 259, 399, 298, 344, 271, 273, 293,
	300, 302, 304, 305, 353, 354, 366, 387, 400, 401,
	402, 297, 281, 381, 282, 315, 283, 260, 289, 287,
	290, 389, 291, 262, 367, 406, 0, 310, 377, 340,
	263, 339, 368, 405, 404, 272, 431, 437, 438, 527,
	0, 443, 605, 606, 607, 452, 457, 458, 459, 461,
	462, 463, 464, 528, 545, 512, 482, 445, 536, 479,
	483, 484, 548, 0, 0, 0, 436, 329, 330, 0,
	308, 256, 257, 601, 294, 359, 550, 583, 475, 0,
	537, 476, 485, 286, 509, 521, 520, 355, 435, 0,
	532, 535, 465, 600, 0, 529, 544, 603, 543, 597,
	365, 0, 386, 541, 488, 0, 533, 507, 0, 534,
	503, 538, 0, 477, 0, 393, 417, 429, 446, 449,
	478, 563, 564, 565, 261, 448, 567, 568, 569, 570,
	571, 572, 573, 566, 420, 510, 487, 513, 428, 490,
	489, 0, 0, 524, 444, 525, 526, 349, 350, 351,
	352, 312, 551, 279, 447, 375, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 516, 517, 514, 608,
	0, 574, 575, 0, 0, 441, 442, 307, 314, 460,
	316, 278, 364, 309, 426, 323, 0, 453, 518, 454,
	577, 580, 578, 579, 356, 319, 320, 390, 324, 334,
	378, 425, 362, 383, 276, 416, 391, 338, 504, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 558, 557, 556,
	555, 554, 553, 552, 0, 0, 501, 403, 288, 253,
	284, 285, 292, 598, 595, 407, 599, 0, 258, 481,
	332, 141, 373, 306, 546, 547, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	549, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 249, 250, 251, 252, 0, 0, 0, 432, 433,
	434, 456, 418, 480, 596, 0, 0, 0, 0, 0,
	0, 0, 530, 542, 576, 0, 585, 586, 588, 590,
	589, 0, 602, 471, 472, 582, 361, 0, 486, 519,
	508, 591, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 959, 0, 331, 523, 505, 515,
	506, 491, 492, 493, 500, 311, 494, 495, 496, 466,
	497, 467, 498, 499, 0, 522, 473, 392, 345, 540,
	539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 966,
	967, 0, 0, 0, 0, 274, 200, 468, 587, 470,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 397, 954, 275, 388, 427, 280, 395,
	270, 360, 384, 0, 0, 266, 412, 394, 342, 321,
	322, 265, 0, 379, 299, 313, 296, 358, 0, 411,
	439, 295, 430, 944, 422, 268, 943, 421, 357, 408,
	413, 343, 337, 267, 410, 341, 336, 325, 303, 455,
	326, 327, 317, 369, 335, 370, 318, 347, 346, 348,
	0, 0, 0, 0, 0, 450, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 584, 0, 424, 0, 0, 0, 0, 0,
	0, 396, 0, 0, 328, 0, 0, 0, 440, 0,
	382, 363, 604, 0, 0, 380, 333, 409, 371, 415,
	398, 423, 957, 372, 259, 399, 298, 344, 271, 273,
	293, 300, 302, 304, 305, 353, 354, 366, 387, 400,
	401, 402, 297, 281, 381, 282, 315, 283, 260, 289,
	287, 290, 389, 291, 262, 367, 406, 0, 310, 377,
	340, 263, 339, 368, 405, 404, 272, 431, 437, 438,
	527, 0, 443, 605, 606, 607, 452, 457, 458, 459,
	461, 462, 463, 464, 528, 545, 512, 482, 445, 536,
	479, 483, 484, 548, 0, 0, 0, 436, 329, 330,
	0, 308, 256, 257, 601, 294, 359, 550, 583, 475,
	0, 537, 476, 485, 286, 509, 521, 520, 355, 435,
	0, 532, 535, 465, 600, 0, 529, 544, 603, 543,
	597, 365, 0, 386, 541, 488, 0, 533, 507, 0,
	534, 503, 538, 0, 477, 0, 393, 417, 429, 446,
	449, 478, 563, 564, 565, 261, 448, 567, 568, 569,
	570, 571, 572, 958, 566, 420, 510, 487, 513, 428,
	490, 489, 0, 0, 524, 961, 525, 526, 349, 350,
	351, 352, 312, 551, 279, 447, 375, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 517, 514,
	608, 0, 574, 575, 0, 0, 441, 442, 307, 314,
	460, 316, 278, 364, 309, 426, 323, 0, 453, 518,
	454, 577, 580, 578, 579, 968, 955, 964, 956, 324,
	334, 378, 425, 362, 383, 276, 416, 391, 965, 504,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 559, 558, 557,
	556, 555, 554, 553, 552, 0, 0, 501, 403, 288,
	253, 284, 285, 292, 598, 595, 407, 599, 0, 258,
	481, 332, 0, 373, 306, 546, 547, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 549, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 249, 250, 251, 252, 0, 0, 0, 432,
	433, 434, 456, 418, 480, 596, 0, 0, 0, 0,
	0, 0, 0, 530, 542, 576, 0, 585, 586, 588,
	590, 589, 177, 602, 471, 472, 582, 0, 0, 0,
	0, 0, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	117, 522, 473, 392, 345, 540, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1875, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 274, 200, 468, 587, 470, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 0, 411, 439, 295, 430, 0,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 455, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 0, 0, 584, 0,
	424, 0, 0, 0, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 440, 0, 382, 363, 604, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 294, 359, 550, 583, 475, 0, 537, 476, 485,
	286, 509, 521, 520, 355, 435, 0, 532, 535, 465,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 420, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 444, 525, 526, 349, 350, 351, 352, 312, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 141, 373,
	306, 546, 547, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 549, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 249, 250,
	251, 252, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 589, 0, 602,
	471, 472, 582, 361, 0, 486, 519, 508, 591, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 331, 523, 505, 515, 506, 491, 492,
	493, 500, 311, 494, 495, 496, 466, 497, 467, 498,
	499, 0, 522, 473, 392, 345, 540, 539, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 966, 967, 0, 0,
	0, 0, 274, 200, 468, 587, 470, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	944, 422, 268, 943, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 584,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 604,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 527, 0, 443,
	605, 606, 607, 452, 457, 458, 459, 461, 462, 463,
	464, 528, 545, 512, 482, 445, 536, 479, 483, 484,
	548, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 601, 294, 359, 550, 583, 475, 0, 537, 476,
	485, 286, 509, 521, 520, 355, 435, 0, 532, 535,
	465, 600, 0, 529, 544, 603, 543, 597, 365, 0,
	386, 541, 488, 0, 533, 507, 0, 534, 503, 538,
	0, 477, 0, 393, 417, 429, 446, 449, 478, 563,
	564, 565, 261, 448, 567, 568, 569, 570, 571, 572,
	573, 566, 420, 510, 487, 513, 428, 490, 489, 0,
	0, 524, 444, 525, 526, 349, 350, 351, 352, 312,
	551, 279, 447, 375, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 517, 514, 608, 0, 574,
	575, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 518, 454, 577, 580,
	578, 579, 968, 1894, 964, 1895, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 965, 504, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 558, 557, 556, 555, 554,
	553, 552, 0, 0, 501, 403, 288, 253, 284, 285,
	292, 598, 595, 407, 599, 0, 258, 481, 332, 0,
	373, 306, 546, 547, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 549, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 249,
	250, 251, 252, 0, 0, 0, 432, 433, 434, 456,
	418, 480, 596, 0, 0, 0, 0, 0, 0, 0,
	530, 542, 576, 0, 585, 586, 588, 590, 589, 0,
	602, 471, 472, 582, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 2699, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 0, 522, 473, 392, 345, 540, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 274, 200, 468, 587, 470, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 2702, 0, 0, 2701, 581, 0, 0,
	584, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	604, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 294, 359, 550, 583, 475, 0, 537,
	476, 485, 286, 509, 521, 520, 355, 435, 0, 532,
	535, 465, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 420, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 444, 525, 526, 349, 350, 351, 352,
	312, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 549,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	249, 250, 251, 252, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 589,
	0, 602, 471, 472, 582, 361, 0, 486, 519, 508,
	591, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 1414, 0, 331, 523, 505, 515, 506,
	491, 492, 493, 500, 311, 494, 495, 496, 466, 497,
	467, 498, 499, 0, 522, 473, 392, 345, 540, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	1412, 0, 0, 0, 274, 200, 468, 587, 470, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1410, 0, 0, 0, 0, 0,
	0, 264, 397, 414, 275, 388, 427, 280, 395, 270,
	360, 384, 0, 0, 266, 412, 394, 342, 321, 322,
	265, 0, 379, 299, 313, 296, 358, 0, 411, 439,
	295, 430, 0, 422, 268, 0, 421, 357, 408, 413,
	343, 337, 267, 410, 341, 336, 325, 303, 455, 326,
	327, 317, 369, 335, 370, 318, 347, 346, 348, 0,
	0, 0, 0, 0, 450, 451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 584, 0, 424, 0, 0, 0, 0, 0, 0,
	396, 0, 0, 328, 0, 0, 0, 440, 0, 382,
	363, 604, 0, 0, 380, 333, 409, 371, 415, 398,
	423, 376, 372, 259, 399, 298, 344, 271, 273, 293,
	300, 302, 304, 305, 353, 354, 366, 387, 400, 401,
	402, 297, 281, 381, 282, 315, 283, 260, 289, 287,
	290, 389, 291, 262, 367, 406, 0, 310, 377, 340,
	263, 339, 368, 405, 404, 272, 431, 437, 438, 527,
	0, 443, 605, 606, 607, 452, 457, 458, 459, 461,
	462, 463, 464, 528, 545, 512, 482, 445, 536, 479,
	483, 484, 548, 0, 0, 0, 436, 329, 330, 0,
	308, 256, 257, 601, 294, 359, 550, 583, 475, 0,
	537, 476, 485, 286, 509, 521, 520, 355, 435, 0,
	532, 535, 465, 600, 0, 529, 544, 603, 543, 597,
	365, 0, 386, 541, 488, 0, 533, 507, 0, 534,
	503, 538, 0, 477, 0, 393, 417, 429, 446, 449,
	478, 563, 564, 565, 261, 448, 567, 568, 569, 570,
	571, 572, 573, 566, 420, 510, 487, 513, 428, 490,
	489, 0, 0, 524, 444, 525, 526, 349, 350, 351,
	352, 312, 551, 279, 447, 375, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 516, 517, 514, 608,
	0, 574, 575, 0, 0, 441, 442, 307, 314, 460,
	316, 278, 364, 309, 426, 323, 0, 453, 518, 454,
	577, 580, 578, 579, 356, 319, 320, 390, 324, 334,
	378, 425, 362, 383, 276, 416, 391, 338, 504, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 558, 557, 556,
	555, 554, 553, 552, 0, 0, 501, 403, 288, 253,
	284, 285, 292, 598, 595, 407, 599, 0, 258, 481,
	332, 0, 373, 306, 546, 547, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	549, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 249, 250, 251, 252, 0, 0, 0, 432, 433,
	434, 456, 418, 480, 596, 0, 0, 0, 0, 0,
	0, 0, 530, 542, 576, 0, 585, 586, 588, 590,
	589, 0, 602, 471, 472, 582, 361, 0, 486, 519,
	508, 591, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 1408, 0, 331, 523, 505, 515,
	506, 491, 492, 493, 500, 311, 494, 495, 496, 466,
	497, 467, 498, 499, 0, 522, 473, 392, 345, 540,
	539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 1412, 0, 0, 0, 274, 200, 468, 587, 470,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1410, 0, 0, 0, 0,
	0, 0, 264, 397, 414, 275, 388, 427, 280, 395,
	270, 360, 384, 0, 0, 266, 412, 394, 342, 321,
	322, 265, 0, 379, 299, 313, 296, 358, 0, 411,
	439, 295, 430, 0, 422, 268, 0, 421, 357, 408,
	413, 343, 337, 267, 410, 341, 336, 325, 303, 455,
	326, 327, 317, 369, 335, 370, 318, 347, 346, 348,
	0, 0, 0, 0, 0, 450, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 584, 0, 424, 0, 0, 0, 0, 0,
	0, 396, 0, 0, 328, 0, 0, 0, 440, 0,
	382, 363, 604, 0, 0, 380, 333, 409, 371, 415,
	398, 423, 376, 372, 259, 399, 298, 344, 271, 273,
	293, 300, 302, 304, 305, 353, 354, 366, 387, 400,
	401, 402, 297, 281, 381, 282, 315, 283, 260, 289,
	287, 290, 389, 291, 262, 367, 406, 0, 310, 377,
	340, 263, 339, 368, 405, 404, 272, 431, 437, 438,
	527, 0, 443, 605, 606, 607, 452, 457, 458, 459,
	461, 462, 463, 464, 528, 545, 512, 482, 445, 536,
	479, 483, 484, 548, 0, 0, 0, 436, 329, 330,
	0, 308, 256, 257, 601, 294, 359, 550, 583, 475,
	0, 537, 476, 485, 286, 509, 521, 520, 355, 435,
	0, 532, 535, 465, 600, 0, 529, 544, 603, 543,
	597, 365, 0, 386, 541, 488, 0, 533, 507, 0,
	534, 503, 538, 0, 477, 0, 393, 417, 429, 446,
	449, 478, 563, 564, 565, 261, 448, 567, 568, 569,
	570, 571, 572, 573, 566, 420, 510, 487, 513, 428,
	490, 489, 0, 0, 524, 444, 525, 526, 349, 350,
	351, 352, 312, 551, 279, 447, 375, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 517, 514,
	608, 0, 574, 575, 0, 0, 441, 442, 307, 314,
	460, 316, 278, 364, 309, 426, 323, 0, 453, 518,
	454, 577, 580, 578, 579, 356, 319, 320, 390, 324,
	334, 378, 425, 362, 383, 276, 416, 391, 338, 504,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 559, 558, 557,
	556, 555, 554, 553, 552, 0, 0, 501, 403, 288,
	253, 284, 285, 292, 598, 595, 407, 599, 0, 258,
	481, 332, 0, 373, 306, 546, 547, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 549, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 249, 250, 251, 252, 0, 0, 0, 432,
	433, 434, 456, 418, 480, 596, 0, 0, 0, 0,
	0, 0, 0, 530, 542, 576, 0, 585, 586, 588,
	590, 589, 0, 602, 471, 472, 582, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 0, 522, 473, 392, 345,
	540, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3648, 0, 199,
	786, 0, 0, 0, 0, 0, 274, 200, 468, 587,
	470, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 0,
	411, 439, 295, 430, 0, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	455, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 0, 584, 0, 424, 0, 0, 0, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 440,
	0, 382, 363, 604, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 294, 359, 550, 583,
	475, 0, 537, 476, 485, 286, 509, 521, 520, 355,
	435, 0, 532, 535, 465, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 420, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 444, 525, 526, 349,
	350, 351, 352, 312, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 549, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 249, 250, 251, 252, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 589, 0, 602, 471, 472, 582, 361, 0,
	486, 519, 508, 591, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 331, 523,
	505, 515, 506, 491, 492, 493, 500, 311, 494, 495,
	496, 466, 497, 467, 498, 499, 0, 522, 473, 392,
	345, 540, 539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 1412, 0, 0, 0, 274, 200, 468,
	587, 470, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1410, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 0, 584, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 604, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 527, 0, 443, 605, 606, 607, 452, 457,
	458, 459, 461, 462, 463, 464, 528, 545, 512, 482,
	445, 536, 479, 483, 484, 548, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 601, 294, 359, 550,
	583, 475, 0, 537, 476, 485, 286, 509, 521, 520,
	355, 435, 0, 532, 535, 465, 600, 0, 529, 544,
	603, 543, 597, 365, 0, 386, 541, 488, 0, 533,
	507, 0, 534, 503, 538, 0, 477, 0, 393, 417,
	429, 446, 449, 478, 563, 564, 565, 261, 448, 567,
	568, 569, 570, 571, 572, 573, 566, 420, 510, 487,
	513, 428, 490, 489, 0, 0, 524, 444, 525, 526,
	349, 350, 351, 352, 312, 551, 279, 447, 375, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 0, 516,
	517, 514, 608, 0, 574, 575, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 518, 454, 577, 580, 578, 579, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 504, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 559,
	558, 557, 556, 555, 554, 553, 552, 0, 0, 501,
	403, 288, 253, 284, 285, 292, 598, 595, 407, 599,
	0, 258, 481, 332, 0, 373, 306, 546, 547, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 549, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 249, 250, 251, 252, 0, 0,
	0, 432, 433, 434, 456, 418, 480, 596, 0, 0,
	0, 0, 0, 0, 0, 530, 542, 576, 0, 585,
	586, 588, 590, 589, 0, 602, 471, 472, 582, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 0, 522, 473,
	392, 345, 540, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 1412, 0, 0, 0, 274, 200,
	468, 587, 470, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3275, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 584, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 604, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 294, 359,
	550, 583, 475, 0, 537, 476, 485, 286, 509, 521,
	520, 355, 435, 0, 532, 535, 465, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 420, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 444, 525,
	526, 349, 350, 351, 352, 312, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 549, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 249, 250, 251, 252, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 589, 0, 602, 471, 472, 582,
	361, 0, 486, 519, 508, 591, 474, 0, 0, 0,
	0, 0, 2288, 0, 0, 0, 0, 301, 0, 0,
	331, 523, 505, 515, 506, 491, 492, 493, 500, 311,
	494, 495, 496, 466, 497, 467, 498, 499, 0, 522,
	473, 392, 345, 540, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 2290, 0, 0, 0, 274,
	200, 468, 587, 470, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 397, 414, 275,
	388, 427, 280, 395, 270, 360, 384, 0, 0, 266,
	412, 394, 342, 321, 322, 265, 0, 379, 299, 313,
	296, 358, 0, 411, 439, 295, 430, 0, 422, 268,
	0, 421, 357, 408, 413, 343, 337, 267, 410, 341,
	336, 325, 303, 455, 326, 327, 317, 369, 335, 370,
	318, 347, 346, 348, 0, 0, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 584, 0, 424, 0,
	0, 0, 0, 0, 0, 396, 0, 0, 328, 0,
	0, 0, 440, 0, 382, 363, 604, 0, 0, 380,
	333, 409, 371, 415, 398, 423, 376, 372, 259, 399,
	298, 344, 271, 273, 293, 300, 302, 304, 305, 353,
	354, 366, 387, 400, 401, 402, 297, 281, 381, 282,
	315, 283, 260, 289, 287, 290, 389, 291, 262, 367,
	406, 0, 310, 377, 340, 263, 339, 368, 405, 404,
	272, 431, 437, 438, 527, 0, 443, 605, 606, 607,
	452, 457, 458, 459, 461, 462, 463, 464, 528, 545,
	512, 482, 445, 536, 479, 483, 484, 548, 0, 0,
	0, 436, 329, 330, 0, 308, 256, 257, 601, 294,
	359, 550, 583, 475, 0, 537, 476, 485, 286, 509,
	521, 520, 355, 435, 0, 532, 535, 465, 600, 0,
	529, 544, 603, 543, 597, 365, 0, 386, 541, 488,
	0, 533, 507, 0, 534, 503, 538, 0, 477, 0,
	393, 417, 429, 446, 449, 478, 563, 564, 565, 261,
	448, 567, 568, 569, 570, 571, 572, 573, 566, 420,
	510, 487, 513, 428, 490, 489, 0, 0, 524, 444,
	525, 526, 349, 350, 351, 352, 312, 551, 279, 447,
	375, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	0, 516, 517, 514, 608, 0, 574, 575, 0, 0,
	441, 442, 307, 314, 460, 316, 278, 364, 309, 426,
	323, 0, 453, 518, 454, 577, 580, 578, 579, 356,
	319, 320, 390, 324, 334, 378, 425, 362, 383, 276,
	416, 391, 338, 504, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 558, 557, 556, 555, 554, 553, 552, 0,
	0, 501, 403, 288, 253, 284, 285, 292, 598, 595,
	407, 599, 0, 258, 481, 332, 0, 373, 306, 546,
	547, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 549, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 249, 250, 251, 252,
	0, 0, 0, 432, 433, 434, 456, 418, 480, 596,
	0, 0, 0, 0, 0, 0, 0, 530, 542, 576,
	0, 585, 586, 588, 590, 589, 0, 602, 471, 472,
	582, 361, 0, 486, 519, 508, 591, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 2309,
	0, 331, 523, 505, 515, 506, 491, 492, 493, 500,
	311, 494, 495, 496, 466, 497, 467, 498, 499, 0,
	522, 473, 392, 345, 540, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 1412, 0, 0, 0,
	274, 200, 468, 587, 470, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 397, 414,
	275, 388, 427, 280, 395, 270, 360, 384, 0, 0,
	266, 412, 394, 342, 321, 322, 265, 0, 379, 299,
	313, 296, 358, 0, 411, 439, 295, 430, 0, 422,
	268, 0, 421, 357, 408, 413, 343, 337, 267, 410,
	341, 336, 325, 303, 455, 326, 327, 317, 369, 335,
	370, 318, 347, 346, 348, 0, 0, 0, 0, 0,
	450, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 584, 0, 424,
	0, 0, 0, 0, 0, 0, 396, 0, 0, 328,
	0, 0, 0, 440, 0, 382, 363, 604, 0, 0,
	380, 333, 409, 371, 415, 398, 423, 376, 372, 259,
	399, 298, 344, 271, 273, 293, 300, 302, 304, 305,
	353, 354, 366, 387, 400, 401, 402, 297, 281, 381,
	282, 315, 283, 260, 289, 287, 290, 389, 291, 262,
	367, 406, 0, 310, 377, 340, 263, 339, 368, 405,
	404, 272, 431, 437, 438, 527, 0, 443, 605, 606,
	607, 452, 457, 458, 459, 461, 462, 463, 464, 528,
	545, 512, 482, 445, 536, 479, 483, 484, 548, 0,
	0, 0, 436, 329, 330, 0, 308, 256, 257, 601,
	294, 359, 550, 583, 475, 0, 537, 476, 485, 286,
	509, 521, 520, 355, 435, 0, 532, 535, 465, 600,
	0, 529, 544, 603, 543, 597, 365, 0, 386, 541,
	488, 0, 533, 507, 0, 534, 503, 538, 0, 477,
	0, 393, 417, 429, 446, 449, 478, 563, 564, 565,
	261, 448, 567, 568, 569, 570, 571, 572, 573, 566,
	420, 510, 487, 513, 428, 490, 489, 0, 0, 524,
	444, 525, 526, 349, 350, 351, 352, 312, 551, 279,
	447, 375, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 516, 517, 514, 608, 0, 574, 575, 0,
	0, 441, 442, 307, 314, 460, 316, 278, 364, 309,
	426, 323, 0, 453, 518, 454, 577, 580, 578, 579,
	356, 319, 320, 390, 324, 334, 378, 425, 362, 383,
	276, 416, 391, 338, 504, 531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 558, 557, 556, 555, 554, 553, 552,
	0, 0, 501, 403, 288, 253, 284, 285, 292, 598,
	595, 407, 599, 0, 258, 481, 332, 0, 373, 306,
	546, 547, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 549, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 249, 250, 251,
	252, 0, 0, 0, 432, 433, 434, 456, 418, 480,
	596, 0, 0, 0, 0, 0, 0, 0, 530, 542,
	576, 0, 585, 586, 588, 590, 589, 0, 602, 471,
	472, 582, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	0, 522, 473, 392, 345, 540, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 786, 0, 0, 0, 0,
	0, 274, 200, 468, 587, 470, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 0, 411, 439, 295, 430, 0,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 455, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 0, 0, 584, 0,
	424, 0, 0, 0, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 440, 0, 382, 363, 604, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 294, 359, 550, 583, 475, 0, 537, 476, 485,
	286, 509, 521, 520, 355, 435, 0, 532, 535, 465,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 420, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 444, 525, 526, 349, 350, 351, 352, 312, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 549, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 249, 250,
	251, 252, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 589, 0, 602,
	471, 472, 582, 361, 0, 486, 519, 508, 591, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 331, 523, 505, 515, 506, 491, 492,
	493, 500, 311, 494, 495, 496, 466, 497, 467, 498,
	499, 0, 522, 473, 392, 345, 540, 539, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3627, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 274, 200, 468, 587, 470, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 584,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 604,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 527, 0, 443,
	605, 606, 607, 452, 457, 458, 459, 461, 462, 463,
	464, 528, 545, 512, 482, 445, 536, 479, 483, 484,
	548, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 601, 294, 359, 550, 583, 475, 0, 537, 476,
	485, 286, 509, 521, 520, 355, 435, 0, 532, 535,
	465, 600, 0, 529, 544, 603, 543, 597, 365, 0,
	386, 541, 488, 0, 533, 507, 0, 534, 503, 538,
	0, 477, 0, 393, 417, 429, 446, 449, 478, 563,
	564, 565, 261, 448, 567, 568, 569, 570, 571, 572,
	573, 566, 420, 510, 487, 513, 428, 490, 489, 0,
	0, 524, 444, 525, 526, 349, 350, 351, 352, 312,
	551, 279, 447, 375, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 517, 514, 608, 0, 574,
	575, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 518, 454, 577, 580,
	578, 579, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 504, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 558, 557, 556, 555, 554,
	553, 552, 0, 0, 501, 403, 288, 253, 284, 285,
	292, 598, 595, 407, 599, 0, 258, 481, 332, 0,
	373, 306, 546, 547, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 549, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 249,
	250, 251, 252, 0, 0, 0, 432, 433, 434, 456,
	418, 480, 596, 0, 0, 0, 0, 0, 0, 0,
	530, 542, 576, 0, 585, 586, 588, 590, 589, 0,
	602, 471, 472, 582, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 0, 522, 473, 392, 345, 540, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 3417,
	0, 0, 0, 274, 200, 468, 587, 470, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	584, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	604, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 294, 359, 550, 583, 475, 0, 537,
	476, 485, 286, 509, 521, 520, 355, 435, 0, 532,
	535, 465, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 420, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 444, 525, 526, 349, 350, 351, 352,
	312, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 549,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	249, 250, 251, 252, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 589,
	0, 602, 471, 472, 582, 361, 0, 486, 519, 508,
	591, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 331, 523, 505, 515, 506,
	491, 492, 493, 500, 311, 494, 495, 496, 466, 497,
	467, 498, 499, 0, 522, 473, 392, 345, 540, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 274, 200, 468, 587, 470, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 397, 414, 275, 388, 427, 280, 395, 270,
	360, 384, 0, 0, 266, 412, 394, 342, 321, 322,
	265, 0, 379, 299, 313, 296, 358, 0, 411, 439,
	295, 430, 0, 422, 268, 0, 421, 357, 408, 413,
	343, 337, 267, 410, 341, 336, 325, 303, 455, 326,
	327, 317, 369, 335, 370, 318, 347, 346, 348, 0,
	0, 0, 0, 0, 450, 451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 584, 0, 424, 0, 0, 0, 3540, 0, 0,
	396, 0, 0, 328, 0, 0, 0, 440, 0, 382,
	363, 604, 0, 0, 380, 333, 409, 371, 415, 398,
	423, 376, 372, 259, 399, 298, 344, 271, 273, 293,
	300, 302, 304, 305, 353, 354, 366, 387, 400, 401,
	402, 297, 281, 381, 282, 315, 283, 260, 289, 287,
	290, 389, 291, 262, 367, 406, 0, 310, 377, 340,
	263, 339, 368, 405, 404, 272, 431, 437, 438, 527,
	0, 443, 605, 606, 607, 452, 457, 458, 459, 461,
	462, 463, 464, 528, 545, 512, 482, 445, 536, 479,
	483, 484, 548, 0, 0, 0, 436, 329, 330, 0,
	308, 256, 257, 601, 294, 359, 550, 583, 475, 0,
	537, 476, 485, 286, 509, 521, 520, 355, 435, 0,
	532, 535, 465, 600, 0, 529, 544, 603, 543, 597,
	365, 0, 386, 541, 488, 0, 533, 507, 0, 534,
	503, 538, 0, 477, 0, 393, 417, 429, 446, 449,
	478, 563, 564, 565, 261, 448, 567, 568, 569, 570,
	571, 572, 573, 566, 420, 510, 487, 513, 428, 490,
	489, 0, 0, 524, 444, 525, 526, 349, 350, 351,
	352, 312, 551, 279, 447, 375, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 516, 517, 514, 608,
	0, 574, 575, 0, 0, 441, 442, 307, 314, 460,
	316, 278, 364, 309, 426, 323, 0, 453, 518, 454,
	577, 580, 578, 579, 356, 319, 320, 390, 324, 334,
	378, 425, 362, 383, 276, 416, 391, 338, 504, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 558, 557, 556,
	555, 554, 553, 552, 0, 0, 501, 403, 288, 253,
	284, 285, 292, 598, 595, 407, 599, 0, 258, 481,
	332, 0, 373, 306, 546, 547, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	549, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 249, 250, 251, 252, 0, 0, 0, 432, 433,
	434, 456, 418, 480, 596, 0, 0, 0, 0, 0,
	0, 0, 530, 542, 576, 0, 585, 586, 588, 590,
	589, 0, 602, 471, 472, 582, 361, 0, 486, 519,
	508, 591, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 331, 523, 505, 515,
	506, 491, 492, 493, 500, 311, 494, 495, 496, 466,
	497, 467, 498, 499, 0, 522, 473, 392, 345, 540,
	539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3271, 0, 0, 199, 0,
	0, 0, 0, 0, 0, 274, 200, 468, 587, 470,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 397, 414, 275, 388, 427, 280, 395,
	270, 360, 384, 0, 0, 266, 412, 394, 342, 321,
	322, 265, 0, 379, 299, 313, 296, 358, 0, 411,
	439, 295, 430, 0, 422, 268, 0, 421, 357, 408,
	413, 343, 337, 267, 410, 341, 336, 325, 303, 455,
	326, 327, 317, 369, 335, 370, 318, 347, 346, 348,
	0, 0, 0, 0, 0, 450, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 584, 0, 424, 0, 0, 0, 0, 0,
	0, 396, 0, 0, 328, 0, 0, 0, 440, 0,
	382, 363, 604, 0, 0, 380, 333, 409, 371, 415,
	398, 423, 376, 372, 259, 399, 298, 344, 271, 273,
	293, 300, 302, 304, 305, 353, 354, 366, 387, 400,
	401, 402, 297, 281, 381, 282, 315, 283, 260, 289,
	287, 290, 389, 291, 262, 367, 406, 0, 310, 377,
	340, 263, 339, 368, 405, 404, 272, 431, 437, 438,
	527, 0, 443, 605, 606, 607, 452, 457, 458, 459,
	461, 462, 463, 464, 528, 545, 512, 482, 445, 536,
	479, 483, 484, 548, 0, 0, 0, 436, 329, 330,
	0, 308, 256, 257, 601, 294, 359, 550, 583, 475,
	0, 537, 476, 485, 286, 509, 521, 520, 355, 435,
	0, 532, 535, 465, 600, 0, 529, 544, 603, 543,
	597, 365, 0, 386, 541, 488, 0, 533, 507, 0,
	534, 503, 538, 0, 477, 0, 393, 417, 429, 446,
	449, 478, 563, 564, 565, 261, 448, 567, 568, 569,
	570, 571, 572, 573, 566, 420, 510, 487, 513, 428,
	490, 489, 0, 0, 524, 444, 525, 526, 349, 350,
	351, 352, 312, 551, 279, 447, 375, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 517, 514,
	608, 0, 574, 575, 0, 0, 441, 442, 307, 314,
	460, 316, 278, 364, 309, 426, 323, 0, 453, 518,
	454, 577, 580, 578, 579, 356, 319, 320, 390, 324,
	334, 378, 425, 362, 383, 276, 416, 391, 338, 504,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 559, 558, 557,
	556, 555, 554, 553, 552, 0, 0, 501, 403, 288,
	253, 284, 285, 292, 598, 595, 407, 599, 0, 258,
	481, 332, 0, 373, 306, 546, 547, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 549, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 249, 250, 251, 252, 0, 0, 0, 432,
	433, 434, 456, 418, 480, 596, 0, 0, 0, 0,
	0, 0, 0, 530, 542, 576, 0, 585, 586, 588,
	590, 589, 0, 602, 471, 472, 582, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 0, 522, 473, 392, 345,
	540, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3432, 0, 199,
	0, 0, 0, 0, 0, 0, 274, 200, 468, 587,
	470, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 0,
	411, 439, 295, 430, 0, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	455, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 0, 584, 0, 424, 0, 0, 0, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 440,
	0, 382, 363, 604, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 294, 359, 550, 583,
	475, 0, 537, 476, 485, 286, 509, 521, 520, 355,
	435, 0, 532, 535, 465, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 420, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 444, 525, 526, 349,
	350, 351, 352, 312, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 549, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 249, 250, 251, 252, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 589, 0, 602, 471, 472, 582, 361, 0,
	486, 519, 508, 591, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 331, 523,
	505, 515, 506, 491, 492, 493, 500, 311, 494, 495,
	496, 466, 497, 467, 498, 499, 0, 522, 473, 392,
	345, 540, 539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 0, 0, 0, 0, 274, 200, 468,
	587, 470, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 0, 584, 0, 424, 0, 0, 0,
	3360, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 604, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 527, 0, 443, 605, 606, 607, 452, 457,
	458, 459, 461, 462, 463, 464, 528, 545, 512, 482,
	445, 536, 479, 483, 484, 548, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 601, 294, 359, 550,
	583, 475, 0, 537, 476, 485, 286, 509, 521, 520,
	355, 435, 0, 532, 535, 465, 600, 0, 529, 544,
	603, 543, 597, 365, 0, 386, 541, 488, 0, 533,
	507, 0, 534, 503, 538, 0, 477, 0, 393, 417,
	429, 446, 449, 478, 563, 564, 565, 261, 448, 567,
	568, 569, 570, 571, 572, 573, 566, 420, 510, 487,
	513, 428, 490, 489, 0, 0, 524, 444, 525, 526,
	349, 350, 351, 352, 312, 551, 279, 447, 375, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 0, 516,
	517, 514, 608, 0, 574, 575, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 518, 454, 577, 580, 578, 579, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 504, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 559,
	558, 557, 556, 555, 554, 553, 552, 0, 0, 501,
	403, 288, 253, 284, 285, 292, 598, 595, 407, 599,
	0, 258, 481, 332, 0, 373, 306, 546, 547, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 549, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 249, 250, 251, 252, 0, 0,
	0, 432, 433, 434, 456, 418, 480, 596, 0, 0,
	0, 0, 0, 0, 0, 530, 542, 576, 0, 585,
	586, 588, 590, 589, 0, 602, 471, 472, 582, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 0, 522, 473,
	392, 345, 540, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 2915, 0, 0, 0, 274, 200,
	468, 587, 470, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 584, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 604, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 294, 359,
	550, 583, 475, 0, 537, 476, 485, 286, 509, 521,
	520, 355, 435, 0, 532, 535, 465, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 420, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 444, 525,
	526, 349, 350, 351, 352, 312, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 549, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 249, 250, 251, 252, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 589, 0, 602, 471, 472, 582,
	361, 0, 486, 519, 508, 591, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	331, 523, 505, 515, 506, 491, 492, 493, 500, 311,
	494, 495, 496, 466, 497, 467, 498, 499, 0, 522,
	473, 392, 345, 540, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 274,
	200, 468, 587, 470, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2932, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 397, 414, 275,
	388, 427, 280, 395, 270, 360, 384, 0, 0, 266,
	412, 394, 342, 321, 322, 265, 0, 379, 299, 313,
	296, 358, 0, 411, 439, 295, 430, 0, 422, 268,
	0, 421, 357, 408, 413, 343, 337, 267, 410, 341,
	336, 325, 303, 455, 326, 327, 317, 369, 335, 370,
	318, 347, 346, 348, 0, 0, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 584, 0, 424, 0,
	0, 0, 0, 0, 0, 396, 0, 0, 328, 0,
	0, 0, 440, 0, 382, 363, 604, 0, 0, 380,
	333, 409, 371, 415, 398, 423, 376, 372, 259, 399,
	298, 344, 271, 273, 293, 300, 302, 304, 305, 353,
	354, 366, 387, 400, 401, 402, 297, 281, 381, 282,
	315, 283, 260, 289, 287, 290, 389, 291, 262, 367,
	406, 0, 310, 377, 340, 263, 339, 368, 405, 404,
	272, 431, 437, 438, 527, 0, 443, 605, 606, 607,
	452, 457, 458, 459, 461, 462, 463, 464, 528, 545,
	512, 482, 445, 536, 479, 483, 484, 548, 0, 0,
	0, 436, 329, 330, 0, 308, 256, 257, 601, 294,
	359, 550, 583, 475, 0, 537, 476, 485, 286, 509,
	521, 520, 355, 435, 0, 532, 535, 465, 600, 0,
	529, 544, 603, 543, 597, 365, 0, 386, 541, 488,
	0, 533, 507, 0, 534, 503, 538, 0, 477, 0,
	393, 417, 429, 446, 449, 478, 563, 564, 565, 261,
	448, 567, 568, 569, 570, 571, 572, 573, 566, 420,
	510, 487, 513, 428, 490, 489, 0, 0, 524, 444,
	525, 526, 349, 350, 351, 352, 312, 551, 279, 447,
	375, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	0, 516, 517, 514, 608, 0, 574, 575, 0, 0,
	441, 442, 307, 314, 460, 316, 278, 364, 309, 426,
	323, 0, 453, 518, 454, 577, 580, 578, 579, 356,
	319, 320, 390, 324, 334, 378, 425, 362, 383, 276,
	416, 391, 338, 504, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 558, 557, 556, 555, 554, 553, 552, 0,
	0, 501, 403, 288, 253, 284, 285, 292, 598, 595,
	407, 599, 0, 258, 481, 332, 0, 373, 306, 546,
	547, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 549, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 249, 250, 251, 252,
	0, 0, 0, 432, 433, 434, 456, 418, 480, 596,
	0, 0, 0, 0, 0, 0, 0, 530, 542, 576,
	0, 585, 586, 588, 590, 589, 0, 602, 471, 472,
	582, 361, 0, 486, 519, 508, 591, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 331, 523, 505, 515, 506, 491, 492, 493, 500,
	311, 494, 495, 496, 466, 497, 467, 498, 499, 0,
	522, 473, 392, 345, 540, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1875, 0, 0, 199, 0, 0, 0, 0, 0, 0,
	274, 200, 468, 587, 470, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 397, 414,
	275, 388, 427, 280, 395, 270, 360, 384, 0, 0,
	266, 412, 394, 342, 321, 322, 265, 0, 379, 299,
	313, 296, 358, 0, 411, 439, 295, 430, 0, 422,
	268, 0, 421, 357, 408, 413, 343, 337, 267, 410,
	341, 336, 325, 303, 455, 326, 327, 317, 369, 335,
	370, 318, 347, 346, 348, 0, 0, 0, 0, 0,
	450, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 584, 0, 424,
	0, 0, 0, 0, 0, 0, 396, 0, 0, 328,
	0, 0, 0, 440, 0, 382, 363, 604, 0, 0,
	380, 333, 409, 371, 415, 398, 423, 376, 372, 259,
	399, 298, 344, 271, 273, 293, 300, 302, 304, 305,
	353, 354, 366, 387, 400, 401, 402, 297, 281, 381,
	282, 315, 283, 260, 289, 287, 290, 389, 291, 262,
	367, 406, 0, 310, 377, 340, 263, 339, 368, 405,
	404, 272, 431, 437, 438, 527, 0, 443, 605, 606,
	607, 452, 457, 458, 459, 461, 462, 463, 464, 528,
	545, 512, 482, 445, 536, 479, 483, 484, 548, 0,
	0, 0, 436, 329, 330, 0, 308, 256, 257, 601,
	294, 359, 550, 583, 475, 0, 537, 476, 485, 286,
	509, 521, 520, 355, 435, 0, 532, 535, 465, 600,
	0, 529, 544, 603, 543, 597, 365, 0, 386, 541,
	488, 0, 533, 507, 0, 534, 503, 538, 0, 477,
	0, 393, 417, 429, 446, 449, 478, 563, 564, 565,
	261, 448, 567, 568, 569, 570, 571, 572, 573, 566,
	420, 510, 487, 513, 428, 490, 489, 0, 0, 524,
	444, 525, 526, 349, 350, 351, 352, 312, 551, 279,
	447, 375, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 516, 517, 514, 608, 0, 574, 575, 0,
	0, 441, 442, 307, 314, 460, 316, 278, 364, 309,
	426, 323, 0, 453, 518, 454, 577, 580, 578, 579,
	356, 319, 320, 390, 324, 334, 378, 425, 362, 383,
	276, 416, 391, 338, 504, 531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 558, 557, 556, 555, 554, 553, 552,
	0, 0, 501, 403, 288, 253, 284, 285, 292, 598,
	595, 407, 599, 0, 258, 481, 332, 0, 373, 306,
	546, 547, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 549, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 249, 250, 251,
	252, 0, 0, 0, 432, 433, 434, 456, 418, 480,
	596, 0, 0, 0, 0, 0, 0, 0, 530, 542,
	576, 0, 585, 586, 588, 590, 589, 0, 602, 471,
	472, 582, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	0, 522, 473, 392, 345, 540, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 274, 200, 468, 587, 470, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3029, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 0, 411, 439, 295, 430, 0,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 455, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 0, 0, 584, 0,
	424, 0, 0, 0, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 440, 0, 382, 363, 604, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 294, 359, 550, 583, 475, 0, 537, 476, 485,
	286, 509, 521, 520, 355, 435, 0, 532, 535, 465,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 420, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 444, 525, 526, 349, 350, 351, 352, 312, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 549, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 249, 250,
	251, 252, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 589, 0, 602,
	471, 472, 582, 361, 0, 486, 519, 508, 591, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 331, 523, 505, 515, 506, 491, 492,
	493, 500, 311, 494, 495, 496, 466, 497, 467, 498,
	499, 0, 522, 473, 392, 345, 540, 539, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 2884, 0,
	0, 0, 274, 200, 468, 587, 470, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 584,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 604,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 527, 0, 443,
	605, 606, 607, 452, 457, 458, 459, 461, 462, 463,
	464, 528, 545, 512, 482, 445, 536, 479, 483, 484,
	548, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 601, 294, 359, 550, 583, 475, 0, 537, 476,
	485, 286, 509, 521, 520, 355, 435, 0, 532, 535,
	465, 600, 0, 529, 544, 603, 543, 597, 365, 0,
	386, 541, 488, 0, 533, 507, 0, 534, 503, 538,
	0, 477, 0, 393, 417, 429, 446, 449, 478, 563,
	564, 565, 261, 448, 567, 568, 569, 570, 571, 572,
	573, 566, 420, 510, 487, 513, 428, 490, 489, 0,
	0, 524, 444, 525, 526, 349, 350, 351, 352, 312,
	551, 279, 447, 375, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 517, 514, 608, 0, 574,
	575, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 518, 454, 577, 580,
	578, 579, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 504, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 558, 557, 556, 555, 554,
	553, 552, 0, 0, 501, 403, 288, 253, 284, 285,
	292, 598, 595, 407, 599, 0, 258, 481, 332, 0,
	373, 306, 546, 547, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 549, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 249,
	250, 251, 252, 0, 0, 0, 432, 433, 434, 456,
	418, 480, 596, 0, 0, 0, 0, 0, 0, 0,
	530, 542, 576, 0, 585, 586, 588, 590, 589, 0,
	602, 471, 472, 582, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 0, 522, 473, 392, 345, 540, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 274, 200, 468, 587, 470, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2796, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	584, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	604, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 294, 359, 550, 583, 475, 0, 537,
	476, 485, 286, 509, 521, 520, 355, 435, 0, 532,
	535, 465, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 420, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 444, 525, 526, 349, 350, 351, 352,
	312, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 549,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	249, 250, 251, 252, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 589,
	0, 602, 471, 472, 582, 361, 0, 486, 519, 508,
	591, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 331, 523, 505, 515, 506,
	491, 492, 493, 500, 311, 494, 495, 496, 466, 497,
	467, 498, 499, 0, 522, 473, 392, 345, 540, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	1412, 0, 0, 0, 274, 200, 468, 587, 470, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 397, 414, 275, 388, 427, 280, 395, 270,
	360, 384, 0, 0, 266, 412, 394, 342, 321, 322,
	265, 0, 379, 299, 313, 296, 358, 0, 411, 439,
	295, 430, 0, 422, 268, 0, 421, 357, 408, 413,
	343, 337, 267, 410, 341, 336, 325, 303, 455, 326,
	327, 317, 369, 335, 370, 318, 347, 346, 348, 0,
	0, 0, 0, 0, 450, 451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 584, 0, 424, 0, 0, 0, 0, 0, 0,
	396, 0, 0, 328, 0, 0, 0, 440, 0, 382,
	363, 604, 0, 0, 380, 333, 409, 371, 415, 398,
	423, 376, 372, 259, 399, 298, 344, 271, 273, 293,
	300, 302, 304, 305, 353, 354, 366, 387, 400, 401,
	402, 297, 281, 381, 282, 315, 283, 260, 289, 287,
	290, 389, 291, 262, 367, 406, 0, 310, 377, 340,
	263, 339, 368, 405, 404, 272, 431, 437, 438, 527,
	0, 443, 605, 606, 607, 452, 457, 458, 459, 461,
	462, 463, 464, 528, 545, 512, 482, 445, 536, 479,
	483, 484, 548, 0, 0, 0, 436, 329, 330, 0,
	308, 256, 257, 601, 294, 359, 550, 583, 475, 0,
	537, 476, 485, 286, 509, 521, 520, 355, 435, 0,
	532, 535, 465, 600, 0, 529, 544, 603, 543, 597,
	365, 0, 386, 541, 488, 0, 533, 507, 0, 534,
	503, 538, 0, 477, 0, 393, 417, 429, 446, 449,
	478, 563, 564, 565, 261, 448, 567, 568, 569, 570,
	571, 572, 573, 566, 420, 510, 487, 513, 428, 490,
	489, 0, 0, 524, 444, 525, 526, 349, 350, 351,
	352, 312, 551, 279, 447, 375, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 516, 517, 514, 608,
	0, 574, 575, 0, 0, 441, 442, 307, 314, 460,
	316, 278, 364, 309, 426, 323, 0, 453, 518, 454,
	577, 580, 578, 579, 356, 319, 320, 390, 324, 334,
	378, 425, 362, 383, 276, 416, 391, 338, 504, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 558, 557, 556,
	555, 554, 553, 552, 0, 0, 501, 403, 288, 253,
	284, 285, 292, 598, 595, 407, 599, 0, 258, 481,
	332, 0, 373, 306, 546, 547, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	549, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 249, 250, 251, 252, 0, 0, 0, 432, 433,
	434, 456, 418, 480, 596, 0, 0, 0, 0, 0,
	0, 0, 530, 542, 576, 0, 585, 586, 588, 590,
	589, 0, 602, 471, 472, 582, 361, 0, 486, 519,
	508, 591, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 331, 523, 505, 515,
	506, 491, 492, 493, 500, 311, 494, 495, 496, 466,
	497, 467, 498, 499, 0, 522, 473, 392, 345, 540,
	539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 2290, 0, 0, 0, 274, 200, 468, 587, 470,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 397, 414, 275, 388, 427, 280, 395,
	270, 360, 384, 0, 0, 266, 412, 394, 342, 321,
	322, 265, 0, 379, 299, 313, 296, 358, 0, 411,
	439, 295, 430, 0, 422, 268, 0, 421, 357, 408,
	413, 343, 337, 267, 410, 341, 336, 325, 303, 455,
	326, 327, 317, 369, 335, 370, 318, 347, 346, 348,
	0, 0, 0, 0, 0, 450, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 584, 0, 424, 0, 0, 0, 0, 0,
	0, 396, 0, 0, 328, 0, 0, 0, 440, 0,
	382, 363, 604, 0, 0, 380, 333, 409, 371, 415,
	398, 423, 376, 372, 259, 399, 298, 344, 271, 273,
	293, 300, 302, 304, 305, 353, 354, 366, 387, 400,
	401, 402, 297, 281, 381, 282, 315, 283, 260, 289,
	287, 290, 389, 291, 262, 367, 406, 0, 310, 377,
	340, 263, 339, 368, 405, 404, 272, 431, 437, 438,
	527, 0, 443, 605, 606, 607, 452, 457, 458, 459,
	461, 462, 463, 464, 528, 545, 512, 482, 445, 536,
	479, 483, 484, 548, 0, 0, 0, 436, 329, 330,
	0, 308, 256, 257, 601, 294, 359, 550, 583, 475,
	0, 537, 476, 485, 286, 509, 521, 520, 355, 435,
	0, 532, 535, 465, 600, 0, 529, 544, 603, 543,
	597, 365, 0, 386, 541, 488, 0, 533, 507, 0,
	534, 503, 538, 0, 477, 0, 393, 417, 429, 446,
	449, 478, 563, 564, 565, 261, 448, 567, 568, 569,
	570, 571, 572, 573, 566, 420, 510, 487, 513, 428,
	490, 489, 0, 0, 524, 444, 525, 526, 349, 350,
	351, 352, 312, 551, 279, 447, 375, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 517, 514,
	608, 0, 574, 575, 0, 0, 441, 442, 307, 314,
	460, 316, 278, 364, 309, 426, 323, 0, 453, 518,
	454, 577, 580, 578, 579, 356, 319, 320, 390, 324,
	334, 378, 425, 362, 383, 276, 416, 391, 338, 504,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 559, 558, 557,
	556, 555, 554, 553, 552, 0, 0, 501, 403, 288,
	253, 284, 285, 292, 598, 595, 407, 599, 0, 258,
	481, 332, 0, 373, 306, 546, 547, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 549, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 249, 250, 251, 252, 0, 0, 0, 432,
	433, 434, 456, 418, 480, 596, 0, 0, 0, 0,
	0, 0, 0, 530, 542, 576, 0, 585, 586, 588,
	590, 589, 0, 602, 471, 472, 582, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 2624, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 0, 522, 473, 392, 345,
	540, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 274, 200, 468, 587,
	470, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 0,
	411, 439, 295, 430, 0, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	455, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 0, 584, 0, 424, 0, 0, 0, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 440,
	0, 382, 363, 604, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 294, 359, 550, 583,
	475, 0, 537, 476, 485, 286, 509, 521, 520, 355,
	435, 0, 532, 535, 465, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 420, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 444, 525, 526, 349,
	350, 351, 352, 312, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 549, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 249, 250, 251, 252, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 589, 0, 602, 471, 472, 582, 361, 0,
	486, 519, 508, 591, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 331, 523,
	505, 515, 506, 491, 492, 493, 500, 311, 494, 495,
	496, 466, 497, 467, 498, 499, 0, 522, 473, 392,
	345, 540, 539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 0, 0, 0, 0, 274, 200, 468,
	587, 470, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2008, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 0, 584, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 604, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 527, 0, 443, 605, 606, 607, 452, 457,
	458, 459, 461, 462, 463, 464, 528, 545, 512, 482,
	445, 536, 479, 483, 484, 548, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 601, 294, 359, 550,
	583, 475, 0, 537, 476, 485, 286, 509, 521, 520,
	355, 435, 0, 532, 535, 465, 600, 0, 529, 544,
	603, 543, 597, 365, 0, 386, 541, 488, 0, 533,
	507, 0, 534, 503, 538, 0, 477, 0, 393, 417,
	429, 446, 449, 478, 563, 564, 565, 261, 448, 567,
	568, 569, 570, 571, 572, 573, 566, 420, 510, 487,
	513, 428, 490, 489, 0, 0, 524, 444, 525, 526,
	349, 350, 351, 352, 312, 551, 279, 447, 375, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 0, 516,
	517, 514, 608, 0, 574, 575, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 518, 454, 577, 580, 578, 579, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 504, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 559,
	558, 557, 556, 555, 554, 553, 552, 0, 0, 501,
	403, 288, 253, 284, 285, 292, 598, 595, 407, 599,
	0, 258, 481, 332, 0, 373, 306, 546, 547, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 549, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 249, 250, 251, 252, 0, 0,
	0, 432, 433, 434, 456, 418, 480, 596, 0, 0,
	0, 0, 0, 0, 0, 530, 542, 576, 0, 585,
	586, 588, 590, 589, 0, 602, 471, 472, 582, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 0, 522, 473,
	392, 345, 540, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 274, 200,
	468, 587, 470, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2367,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 584, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 604, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 294, 359,
	550, 583, 475, 0, 537, 476, 485, 286, 509, 521,
	520, 355, 435, 0, 532, 535, 465, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 420, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 444, 525,
	526, 349, 350, 351, 352, 312, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 549, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 249, 250, 251, 252, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 589, 0, 602, 471, 472, 582,
	361, 0, 486, 519, 508, 591, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	331, 523, 505, 515, 506, 491, 492, 493, 500, 311,
	494, 495, 496, 466, 497, 467, 498, 499, 0, 522,
	473, 392, 345, 540, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 2365, 0, 0, 0, 274,
	200, 468, 587, 470, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 397, 414, 275,
	388, 427, 280, 395, 270, 360, 384, 0, 0, 266,
	412, 394, 342, 321, 322, 265, 0, 379, 299, 313,
	296, 358, 0, 411, 439, 295, 430, 0, 422, 268,
	0, 421, 357, 408, 413, 343, 337, 267, 410, 341,
	336, 325, 303, 455, 326, 327, 317, 369, 335, 370,
	318, 347, 346, 348, 0, 0, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 584, 0, 424, 0,
	0, 0, 0, 0, 0, 396, 0, 0, 328, 0,
	0, 0, 440, 0, 382, 363, 604, 0, 0, 380,
	333, 409, 371, 415, 398, 423, 376, 372, 259, 399,
	298, 344, 271, 273, 293, 300, 302, 304, 305, 353,
	354, 366, 387, 400, 401, 402, 297, 281, 381, 282,
	315, 283, 260, 289, 287, 290, 389, 291, 262, 367,
	406, 0, 310, 377, 340, 263, 339, 368, 405, 404,
	272, 431, 437, 438, 527, 0, 443, 605, 606, 607,
	452, 457, 458, 459, 461, 462, 463, 464, 528, 545,
	512, 482, 445, 536, 479, 483, 484, 548, 0, 0,
	0, 436, 329, 330, 0, 308, 256, 257, 601, 294,
	359, 550, 583, 475, 0, 537, 476, 485, 286, 509,
	521, 520, 355, 435, 0, 532, 535, 465, 600, 0,
	529, 544, 603, 543, 597, 365, 0, 386, 541, 488,
	0, 533, 507, 0, 534, 503, 538, 0, 477, 0,
	393, 417, 429, 446, 449, 478, 563, 564, 565, 261,
	448, 567, 568, 569, 570, 571, 572, 573, 566, 420,
	510, 487, 513, 428, 490, 489, 0, 0, 524, 444,
	525, 526, 349, 350, 351, 352, 312, 551, 279, 447,
	375, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	0, 516, 517, 514, 608, 0, 574, 575, 0, 0,
	441, 442, 307, 314, 460, 316, 278, 364, 309, 426,
	323, 0, 453, 518, 454, 577, 580, 578, 579, 356,
	319, 320, 390, 324, 334, 378, 425, 362, 383, 276,
	416, 391, 338, 504, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 558, 557, 556, 555, 554, 553, 552, 0,
	0, 501, 403, 288, 253, 284, 285, 292, 598, 595,
	407, 599, 0, 258, 481, 332, 0, 373, 306, 546,
	547, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 549, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 249, 250, 251, 252,
	0, 0, 0, 432, 433, 434, 456, 418, 480, 596,
	0, 0, 0, 0, 0, 0, 0, 530, 542, 576,
	0, 585, 586, 588, 590, 589, 2155, 602, 471, 472,
	582, 0, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	0, 522, 473, 392, 345, 540, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 274, 200, 468, 587, 470, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 0, 411, 439, 295, 430, 0,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 455, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 0, 0, 584, 0,
	424, 0, 0, 0, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 440, 0, 382, 363, 604, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 294, 359, 550, 583, 475, 0, 537, 476, 485,
	286, 509, 521, 520, 355, 435, 0, 532, 535, 465,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 420, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 444, 525, 526, 349, 350, 351, 352, 312, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 549, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 249, 250,
	251, 252, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 589, 0, 602,
	471, 472, 582, 361, 0, 486, 519, 508, 591, 474,
	0, 1862, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 331, 523, 505, 515, 506, 491, 492,
	493, 500, 311, 494, 495, 496, 466, 497, 467, 498,
	499, 0, 522, 473, 392, 345, 540, 539, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 274, 200, 468, 587, 470, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 584,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 604,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 527, 0, 443,
	605, 606, 607, 452, 457, 458, 459, 461, 462, 463,
	464, 528, 545, 512, 482, 445, 536, 479, 483, 484,
	548, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 601, 294, 359, 550, 583, 475, 0, 537, 476,
	485, 286, 509, 521, 520, 355, 435, 0, 532, 535,
	465, 600, 0, 529, 544, 603, 543, 597, 365, 0,
	386, 541, 488, 0, 533, 507, 0, 534, 503, 538,
	0, 477, 0, 393, 417, 429, 446, 449, 478, 563,
	564, 565, 261, 448, 567, 568, 569, 570, 571, 572,
	573, 566, 420, 510, 487, 513, 428, 490, 489, 0,
	0, 524, 444, 525, 526, 349, 350, 351, 352, 312,
	551, 279, 447, 375, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 517, 514, 608, 0, 574,
	575, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 518, 454, 577, 580,
	578, 579, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 504, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 558, 557, 556, 555, 554,
	553, 552, 0, 0, 501, 403, 288, 253, 284, 285,
	292, 598, 595, 407, 599, 0, 258, 481, 332, 0,
	373, 306, 546, 547, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 549, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 249,
	250, 251, 252, 0, 0, 0, 432, 433, 434, 456,
	418, 480, 596, 0, 0, 0, 0, 0, 0, 0,
	530, 542, 576, 0, 585, 586, 588, 590, 589, 0,
	602, 471, 472, 582, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 0, 522, 473, 392, 345, 540, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 1412,
	0, 0, 0, 274, 200, 468, 587, 470, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	584, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	604, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	1768, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 294, 359, 550, 583, 475, 0, 537,
	476, 485, 286, 509, 521, 520, 355, 435, 0, 532,
	535, 465, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 420, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 444, 525, 526, 349, 350, 351, 352,
	312, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 549,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	249, 250, 251, 252, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 589,
	0, 602, 471, 472, 582, 361, 0, 486, 519, 508,
	591, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 331, 523, 505, 515, 506,
	491, 492, 493, 500, 311, 494, 495, 496, 466, 497,
	467, 498, 499, 0, 522, 473, 392, 345, 540, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 274, 200, 468, 587, 470, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 397, 414, 275, 388, 427, 280, 395, 270,
	360, 384, 0, 0, 266, 412, 394, 342, 321, 322,
	265, 0, 379, 299, 313, 296, 358, 0, 411, 439,
	295, 430, 0, 422, 268, 0, 421, 357, 408, 413,
	343, 337, 267, 410, 341, 336, 325, 303, 455, 326,
	327, 317, 369, 335, 370, 318, 347, 346, 348, 0,
	0, 0, 0, 0, 450, 451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 584, 0, 424, 0, 0, 1442, 0, 0, 0,
	396, 0, 0, 328, 0, 0, 0, 440, 0, 382,
	363, 604, 0, 0, 380, 333, 409, 371, 415, 398,
	423, 376, 372, 259, 399, 298, 344, 271, 273, 293,
	300, 302, 304, 305, 353, 354, 366, 387, 400, 401,
	402, 297, 281, 381, 282, 315, 283, 260, 289, 287,
	290, 389, 291, 262, 367, 406, 0, 310, 377, 340,
	263, 339, 368, 405, 404, 272, 431, 437, 438, 527,
	0, 443, 605, 606, 607, 452, 457, 458, 459, 461,
	462, 463, 464, 528, 545, 512, 482, 445, 536, 479,
	483, 484, 548, 0, 0, 0, 436, 329, 330, 0,
	308, 256, 257, 601, 294, 359, 550, 583, 475, 0,
	537, 476, 485, 286, 509, 521, 520, 355, 435, 0,
	532, 535, 465, 600, 0, 529, 544, 603, 543, 597,
	365, 0, 386, 541, 488, 0, 533, 507, 0, 534,
	503, 538, 0, 477, 0, 393, 417, 429, 446, 449,
	478, 563, 564, 565, 261, 448, 567, 568, 569, 570,
	571, 572, 573, 566, 420, 510, 487, 513, 428, 490,
	489, 0, 0, 524, 444, 525, 526, 349, 350, 351,
	352, 312, 551, 279, 447, 375, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 516, 517, 514, 608,
	0, 574, 575, 0, 0, 441, 442, 307, 314, 460,
	316, 278, 364, 309, 426, 323, 0, 453, 518, 454,
	577, 580, 578, 579, 356, 319, 320, 390, 324, 334,
	378, 425, 362, 383, 276, 416, 391, 338, 504, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 558, 557, 556,
	555, 554, 553, 552, 0, 0, 501, 403, 288, 253,
	284, 285, 292, 598, 595, 407, 599, 0, 258, 481,
	332, 0, 373, 306, 546, 547, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	549, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 249, 250, 251, 252, 0, 0, 0, 432, 433,
	434, 456, 418, 480, 596, 0, 0, 0, 0, 0,
	0, 0, 530, 542, 576, 0, 585, 586, 588, 590,
	589, 0, 602, 471, 472, 582, 361, 0, 486, 519,
	508, 591, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 331, 523, 505, 515,
	506, 491, 492, 493, 500, 311, 494, 495, 496, 466,
	497, 467, 498, 499, 0, 522, 473, 392, 345, 540,
	539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 0, 0, 0, 0, 274, 200, 468, 587, 470,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 397, 414, 275, 388, 427, 280, 395,
	270, 360, 384, 0, 0, 266, 412, 394, 342, 321,
	322, 265, 0, 379, 299, 313, 296, 358, 0, 411,
	439, 295, 430, 0, 422, 268, 0, 421, 357, 408,
	413, 343, 337, 267, 410, 341, 336, 325, 303, 455,
	326, 327, 317, 369, 335, 370, 318, 347, 346, 348,
	0, 0, 0, 0, 0, 450, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 623, 584, 0, 424, 0, 0, 0, 0, 0,
	0, 396, 0, 0, 328, 0, 0, 0, 440, 0,
	382, 363, 604, 0, 0, 380, 333, 409, 371, 415,
	398, 423, 376, 372, 259, 399, 298, 344, 271, 273,
	293, 300, 302, 304, 305, 353, 354, 366, 387, 400,
	401, 402, 297, 281, 381, 282, 315, 283, 260, 289,
	287, 290, 389, 291, 262, 367, 406, 0, 310, 377,
	340, 263, 339, 368, 405, 404, 272, 431, 437, 438,
	527, 0, 443, 605, 606, 607, 452, 457, 458, 459,
	461, 462, 463, 464, 528, 545, 512, 482, 445, 536,
	479, 483, 484, 548, 0, 0, 0, 436, 329, 330,
	0, 308, 256, 257, 601, 294, 359, 550, 583, 475,
	0, 537, 476, 485, 286, 509, 521, 520, 355, 435,
	0, 532, 535, 465, 600, 0, 529, 544, 603, 543,
	597, 365, 0, 386, 541, 488, 0, 533, 507, 0,
	534, 503, 538, 0, 477, 0, 393, 417, 429, 446,
	449, 478, 563, 564, 565, 261, 448, 567, 568, 569,
	570, 571, 572, 573, 566, 420, 510, 487, 513, 428,
	490, 489, 0, 0, 524, 444, 525, 526, 349, 350,
	351, 352, 312, 551, 279, 447, 375, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 517, 514,
	608, 0, 574, 575, 0, 0, 441, 442, 307, 314,
	460, 316, 278, 364, 309, 426, 323, 0, 453, 518,
	454, 577, 580, 578, 579, 356, 319, 320, 390, 324,
	334, 378, 425, 362, 383, 276, 416, 391, 338, 504,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 559, 558, 557,
	556, 555, 554, 553, 552, 0, 0, 501, 403, 288,
	253, 284, 285, 292, 598, 595, 407, 599, 0, 258,
	481, 332, 0, 373, 306, 546, 547, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 549, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 249, 250, 251, 252, 0, 0, 0, 432,
	433, 434, 456, 418, 480, 596, 0, 0, 0, 0,
	0, 0, 0, 530, 542, 576, 0, 585, 586, 588,
	590, 589, 0, 602, 471, 472, 582, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 0, 522, 473, 392, 345,
	540, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 274, 200, 468, 587,
	470, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 0,
	411, 439, 295, 430, 0, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	455, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 0, 584, 0, 424, 0, 0, 0, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 440,
	0, 382, 363, 604, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 294, 359, 550, 583,
	475, 0, 537, 476, 485, 286, 509, 521, 520, 355,
	435, 0, 532, 535, 465, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 420, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 444, 525, 526, 349,
	350, 351, 352, 312, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 897, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 549, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 249, 250, 251, 252, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 589, 0, 602, 471, 472, 582, 361, 0,
	486, 519, 508, 591, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 613, 301, 0, 0, 331, 523,
	505, 515, 506, 491, 492, 493, 500, 311, 494, 495,
	496, 466, 497, 467, 498, 499, 0, 522, 473, 392,
	345, 540, 539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 0, 0, 0, 0, 274, 200, 468,
	587, 470, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 0, 584, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 604, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 527, 0, 443, 605, 606, 607, 452, 457,
	458, 459, 461, 462, 463, 464, 528, 545, 512, 482,
	445, 536, 479, 483, 484, 548, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 601, 294, 359, 550,
	583, 475, 0, 537, 476, 485, 286, 509, 521, 520,
	355, 435, 0, 532, 535, 465, 600, 0, 529, 544,
	603, 543, 597, 365, 0, 386, 541, 488, 0, 533,
	507, 0, 534, 503, 538, 0, 477, 0, 393, 417,
	429, 446, 449, 478, 563, 564, 565, 261, 448, 567,
	568, 569, 570, 571, 572, 573, 566, 420, 510, 487,
	513, 428, 490, 489, 0, 0, 524, 444, 525, 526,
	349, 350, 351, 352, 312, 551, 279, 447, 375, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 0, 516,
	517, 514, 608, 0, 574, 575, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 518, 454, 577, 580, 578, 579, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 504, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 559,
	558, 557, 556, 555, 554, 553, 552, 0, 0, 501,
	403, 288, 253, 284, 285, 292, 598, 595, 407, 599,
	0, 258, 481, 332, 0, 373, 306, 546, 547, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 549, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 249, 250, 251, 252, 0, 0,
	0, 432, 433, 434, 456, 418, 480, 596, 0, 0,
	0, 0, 0, 0, 0, 530, 542, 576, 0, 585,
	586, 588, 590, 589, 0, 602, 471, 472, 582, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 0, 522, 473,
	392, 345, 540, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 274, 200,
	468, 587, 470, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 584, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 604, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 294, 359,
	550, 583, 475, 0, 537, 476, 485, 286, 509, 521,
	520, 355, 435, 0, 532, 535, 465, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 420, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 444, 525,
	526, 349, 350, 351, 352, 312, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 549, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 249, 250, 251, 252, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 589, 0, 602, 471, 472, 582,
	361, 0, 486, 519, 508, 591, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	331, 523, 505, 515, 506, 491, 492, 493, 500, 311,
	494, 495, 496, 466, 497, 467, 498, 499, 0, 522,
	473, 392, 345, 540, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 274,
	200, 468, 587, 470, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 397, 1392, 275,
	388, 427, 280, 395, 270, 360, 384, 0, 0, 266,
	412, 394, 342, 321, 322, 265, 0, 379, 299, 313,
	296, 358, 0, 411, 439, 295, 430, 0, 422, 268,
	0, 421, 357, 408, 413, 343, 337, 267, 410, 341,
	336, 325, 303, 455, 326, 327, 317, 369, 335, 370,
	318, 347, 346, 348, 0, 0, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 584, 0, 424, 0,
	0, 0, 0, 0, 0, 396, 0, 0, 328, 0,
	0, 0, 440, 0, 382, 363, 604, 0, 0, 380,
	333, 409, 371, 415, 398, 423, 376, 372, 259, 399,
	298, 344, 271, 273, 293, 300, 302, 304, 305, 353,
	354, 366, 387, 400, 401, 402, 297, 281, 381, 282,
	315, 283, 260, 289, 287, 290, 389, 291, 262, 367,
	406, 0, 310, 377, 340, 263, 339, 368, 405, 404,
	272, 431, 437, 438, 527, 0, 443, 605, 606, 607,
	452, 457, 458, 459, 461, 462, 463, 464, 528, 545,
	512, 482, 445, 536, 479, 483, 484, 548, 0, 0,
	0, 436, 329, 330, 0, 308, 256, 257, 601, 294,
	359, 550, 583, 475, 0, 537, 476, 485, 286, 509,
	521, 520, 355, 435, 0, 532, 535, 465, 600, 0,
	529, 544, 603, 543, 597, 365, 0, 386, 541, 488,
	0, 533, 507, 0, 534, 503, 538, 0, 477, 0,
	393, 417, 429, 446, 449, 478, 563, 564, 565, 261,
	448, 567, 568, 569, 570, 571, 572, 573, 566, 420,
	510, 487, 513, 428, 490, 489, 0, 0, 524, 444,
	525, 526, 349, 350, 351, 352, 312, 551, 279, 447,
	375, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	0, 516, 517, 514, 608, 0, 574, 575, 0, 0,
	441, 442, 307, 314, 460, 316, 278, 364, 309, 426,
	323, 0, 453, 518, 454, 577, 580, 578, 579, 356,
	319, 320, 390, 324, 334, 378, 425, 362, 383, 276,
	416, 391, 338, 504, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 558, 557, 556, 555, 554, 553, 552, 0,
	0, 501, 403, 288, 253, 284, 285, 292, 598, 595,
	407, 599, 0, 258, 481, 332, 0, 373, 306, 546,
	547, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 549, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 249, 250, 251, 252,
	0, 0, 0, 432, 433, 434, 456, 418, 480, 596,
	0, 0, 0, 0, 0, 0, 0, 530, 542, 576,
	0, 585, 586, 588, 590, 589, 0, 602, 471, 472,
	582, 361, 0, 486, 519, 508, 591, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 331, 523, 505, 515, 506, 491, 492, 493, 500,
	311, 494, 495, 496, 466, 497, 467, 498, 499, 0,
	522, 473, 392, 345, 540, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 0, 0,
	274, 200, 468, 587, 470, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 397, 1390,
	275, 388, 427, 280, 395, 270, 360, 384, 0, 0,
	266, 412, 394, 342, 321, 322, 265, 0, 379, 299,
	313, 296, 358, 0, 411, 439, 295, 430, 0, 422,
	268, 0, 421, 357, 408, 413, 343, 337, 267, 410,
	341, 336, 325, 303, 455, 326, 327, 317, 369, 335,
	370, 318, 347, 346, 348, 0, 0, 0, 0, 0,
	450, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 584, 0, 424,
	0, 0, 0, 0, 0, 0, 396, 0, 0, 328,
	0, 0, 0, 440, 0, 382, 363, 604, 0, 0,
	380, 333, 409, 371, 415, 398, 423, 376, 372, 259,
	399, 298, 344, 271, 273, 293, 300, 302, 304, 305,
	353, 354, 366, 387, 400, 401, 402, 297, 281, 381,
	282, 315, 283, 260, 289, 287, 290, 389, 291, 262,
	367, 406, 0, 310, 377, 340, 263, 339, 368, 405,
	404, 272, 431, 437, 438, 527, 0, 443, 605, 606,
	607, 452, 457, 458, 459, 461, 462, 463, 464, 528,
	545, 512, 482, 445, 536, 479, 483, 484, 548, 0,
	0, 0, 436, 329, 330, 0, 308, 256, 257, 601,
	294, 359, 550, 583, 475, 0, 537, 476, 485, 286,
	509, 521, 520, 355, 435, 0, 532, 535, 465, 600,
	0, 529, 544, 603, 543, 597, 365, 0, 386, 541,
	488, 0, 533, 507, 0, 534, 503, 538, 0, 477,
	0, 393, 417, 429, 446, 449, 478, 563, 564, 565,
	261, 448, 567, 568, 569, 570, 571, 572, 573, 566,
	420, 510, 487, 513, 428, 490, 489, 0, 0, 524,
	444, 525, 526, 349, 350, 351, 352, 312, 551, 279,
	447, 375, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 516, 517, 514, 608, 0, 574, 575, 0,
	0, 441, 442, 307, 314, 460, 316, 278, 364, 309,
	426, 323, 0, 453, 518, 454, 577, 580, 578, 579,
	356, 319, 320, 390, 324, 334, 378, 425, 362, 383,
	276, 416, 391, 338, 504, 531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 558, 557, 556, 555, 554, 553, 552,
	0, 0, 501, 403, 288, 253, 284, 285, 292, 598,
	595, 407, 599, 0, 258, 481, 332, 0, 373, 306,
	546, 547, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 549, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 249, 250, 251,
	252, 0, 0, 0, 432, 433, 434, 456, 418, 480,
	596, 0, 0, 0, 0, 0, 0, 0, 530, 542,
	576, 0, 585, 586, 588, 590, 589, 0, 602, 471,
	472, 582, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	0, 522, 473, 392, 345, 540, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 274, 200, 468, 587, 470, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 0, 411, 439, 295, 430, 0,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 455, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 0, 0, 584, 0,
	424, 0, 0, 0, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 440, 0, 382, 363, 604, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 688, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 294, 359, 550, 583, 475, 0, 537, 476, 485,
	286, 509, 521, 520, 355, 435, 0, 532, 535, 465,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 420, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 444, 525, 526, 349, 350, 351, 352, 312, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 549, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 249, 250,
	251, 252, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 589, 0, 602,
	471, 472, 582, 361, 0, 486, 519, 508, 591, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 331, 523, 505, 515, 506, 491, 492,
	493, 500, 311, 494, 495, 496, 466, 497, 467, 498,
	499, 0, 522, 473, 392, 345, 540, 539, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 274, 200, 468, 587, 470, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 584,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 604,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 647,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 527, 0, 443,
	605, 606, 607, 452, 457, 458, 459, 461, 462, 463,
	464, 528, 545, 512, 482, 445, 536, 479, 483, 484,
	548, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 601, 294, 359, 550, 583, 475, 0, 537, 476,
	485, 286, 509, 521, 520, 355, 435, 0, 532, 535,
	465, 600, 0, 529, 544, 603, 543, 597, 365, 0,
	386, 541, 488, 0, 533, 507, 0, 534, 503, 538,
	0, 477, 0, 393, 417, 429, 446, 449, 478, 563,
	564, 565, 261, 448, 567, 568, 569, 570, 571, 572,
	648, 566, 420, 510, 487, 513, 428, 490, 489, 0,
	0, 524, 444, 525, 526, 349, 350, 351, 352, 312,
	551, 279, 447, 375, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 517, 514, 608, 0, 574,
	575, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 518, 454, 577, 580,
	578, 579, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 504, 531, 1043, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 558, 557, 556, 555, 554,
	553, 552, 0, 0, 501, 403, 288, 253, 284, 285,
	292, 598, 595, 407, 599, 0, 258, 481, 332, 0,
	373, 306, 546, 547, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 549, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 1043, 0, 0, 255, 249,
	250, 251, 252, 0, 0, 0, 432, 433, 434, 456,
	418, 480, 596, 0, 0, 0, 0, 0, 0, 1029,
	530, 542, 576, 0, 585, 586, 588, 590, 589, 0,
	602, 471, 472, 582, 0, 0, 0, 0, 0, 1051,
	1055, 1057, 1059, 1061, 1062, 1064, 0, 1069, 1065, 1066,
	1067, 1068, 0, 1046, 1047, 1048, 1049, 1027, 1028, 1052,
	0, 1030, 0, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1042, 1044, 1040, 1041, 1050, 0, 0, 1043,
	0, 0, 0, 0, 1054, 1056, 1058, 1060, 1063, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1029, 0, 0, 0,
	1019, 0, 1045, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1051, 1055, 1057, 1059,
	1061, 1062, 1064, 0, 1069, 1065, 1066, 1067, 1068, 0,
	1046, 1047, 1048, 1049, 1027, 1028, 1052, 1850, 1030, 0,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042,
	1044, 1040, 1041, 1050, 0, 0, 0, 0, 0, 0,
	0, 1054, 1056, 1058, 1060, 1063, 0, 0, 0, 0,
	0, 0, 1852, 0, 0, 0, 0, 0, 0, 0,
	1029, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1045,
	1051, 1055, 1057, 1059, 1061, 1062, 1064, 0, 1069, 1065,
	1066, 1067, 1068, 3438, 1046, 1047, 1048, 1049, 1027, 1028,
	1052, 0, 1030, 1827, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1042, 1044, 1040, 1041, 1050, 0, 0,
	2447, 2448, 0, 0, 0, 1054, 1056, 1058, 1060, 1063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 667, 666, 673, 663, 0, 0, 0,
	0, 0, 0, 1045, 0, 670, 671, 0, 672, 676,
	0, 1843, 658, 0, 0, 0, 0, 0, 0, 0,
	0, 1850, 681, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1852, 0, 0, 1850,
	0, 0, 0, 0, 0, 685, 0, 0, 687, 0,
	0, 0, 0, 686, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1831, 0, 0, 1852, 0, 0, 0, 0, 0,
	0, 0, 1837, 0, 1053, 0, 0, 1827, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1825, 1859, 0, 0, 1826, 1828, 1830, 0,
	1832, 1833, 1834, 1838, 1839, 1840, 1842, 1845, 1846, 1847,
	0, 0, 0, 0, 0, 1827, 0, 1835, 1844, 1836,
	0, 0, 0, 0, 667, 666, 673, 663, 0, 0,
	0, 0, 0, 0, 0, 0, 670, 671, 0, 672,
	676, 3409, 0, 658, 0, 1843, 0, 667, 666, 673,
	663, 1851, 0, 681, 0, 0, 0, 0, 0, 670,
	671, 0, 672, 676, 0, 0, 658, 0, 0, 0,
	0, 1053, 0, 0, 0, 0, 681, 0, 0, 0,
	659, 661, 660, 1843, 0, 0, 0, 0, 0, 0,
	665, 0, 0, 0, 0, 1848, 685, 0, 0, 687,
	0, 0, 669, 0, 686, 0, 0, 0, 0, 684,
	0, 0, 1824, 0, 0, 0, 662, 0, 0, 1823,
	653, 0, 0, 0, 0, 1831, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1837, 0, 0, 0,
	0, 0, 0, 1841, 0, 0, 0, 0, 0, 0,
	0, 0, 1829, 0, 0, 1053, 1825, 1859, 0, 0,
	1826, 1828, 1830, 1831, 1832, 1833, 1834, 1838, 1839, 1840,
	1842, 1845, 1846, 1847, 1837, 0, 0, 0, 0, 0,
	0, 1835, 1844, 1836, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1825, 1859, 0, 0, 1826, 1828,
	1830, 0, 1832, 1833, 1834, 1838, 1839, 1840, 1842, 1845,
	1846, 1847, 0, 0, 0, 1851, 0, 0, 0, 1835,
	1844, 1836, 0, 0, 0, 664, 668, 674, 0, 675,
	677, 0, 0, 678, 679, 680, 0, 0, 682, 683,
	0, 659, 661, 660, 0, 0, 0, 0, 0, 0,
	0, 665, 0, 1851, 0, 0, 0, 0, 0, 1848,
	0, 0, 0, 669, 659, 661, 660, 0, 0, 0,
	684, 0, 0, 0, 665, 0, 1824, 662, 0, 0,
	0, 0, 0, 1823, 0, 0, 669, 0, 0, 0,
	0, 0, 0, 684, 0, 0, 0, 1848, 0, 0,
	662, 0, 0, 0, 0, 0, 0, 1841, 0, 0,
	0, 0, 0, 0, 1824, 0, 1829, 0, 0, 0,
	0, 1823, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1841, 0, 0, 0, 0,
	0, 0, 0, 0, 1829, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 664, 668, 674, 0,
	675, 677, 0, 0, 678, 679, 680, 0, 0, 682,
	683, 0, 0, 0, 0, 0, 0, 0, 0, 664,
	668, 674, 0, 675, 677, 0, 0, 678, 679, 680,
	0, 0, 682, 683,
}

var yyPact = [...]int{
	3721, -1000, -1000, -1000, -321, 13382, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42266,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	42266, -319, 41665, 41665, -1000, -1000, 2426, -1000, 40463, 15205,
	42266, 402, 386, 42266, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 772, -1000, 44670, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 694, 45540, 44069, 10349, -242, -1000, 1433,
	-70, 2288, 947, 951, 1159, 1159, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 353,
	797, 41064, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 259, 735, 797, 20023, 57, 56,
	1433, 366, -117, -114, -120, 3620, -1000, 1197, 3753, 180,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10349, 10349, 13382, -352, 13382, 10349, 42266, 42266, -1000,
	-1000, -1000, -1000, -319, 40463, 694, 45540, 10349, 2288, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -114,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -117, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -120, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 56,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 45224, -1000, 1529, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2801,
	1528, 2286, 609, 42266, -1000, 121, 609, -1000, -1000, -1000,
	1433, 3245, -1000, 42266, 42266, 129, 1714, -1000, 392, 362,
	389, 263, 1527, -1000, -1000, -1000, -1000, -1000, -1000, 535,
	3206, -1000, 42266, 42266, 2816, 42266, -1000, 2091, 559, 45701,
	3021, 1398, 833, 2871, -1000, -1000, 2795, -1000, 257, 298,
	388, 576, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 264,
	-1000, 3121, -1000, -1000, 238, -1000, -1000, 252, -1000, -1000,
	-1000, 55, -1000, -1000, -1000, -1000, -1000, -1000, -45, -1000,
	-1000, 988, 1991, 10349, 1935, -1000, 1712, -1000, -1000, -1000,
	-1000, 6109, 12164, 12164, 12164, 12164, 42266, -1000, -1000, 2590,
	10349, 2793, 2792, 2791, 2774, -1000, -1000, -1000, -1000, -1000,
	-1000, 1526, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1875, -1000, -1000, -1000, 12769, -1000, 2771, 2768, 2762,
	2761, 2759, 2758, 2756, 2755, 2753, 2739, 2738, 2732, 2729,
	2726, 2446, 14594, 2720, 2250, 2249, 2718, 2717, 2716, 2244,
	2446, 2446, 2714, 2713, 2707, 2697, 2696, 2687, 2680, 2671,
	2669, 2668, 2667, 2665, 2658, 2657, 2656, 2650, 2641, 2632,
	2627, 2626, 2625, 2618, 2617, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1257, -1000,
	2612, 3230, 2506, -1000, 3102, 3095, 3089, 3083, -286, 2610,
	2042, -1000, -1000, 88, -1000, -116, -1000, -1000, 939, -1000,
	889, -1000, 691, 42266, 42266, 176, 780, 691, 691, 691,
	691, 691, 753, 691, 3141, 769, 768, 765, 760, 691,
	-72, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1713, 1710,
	2115, 857, -1000, -1000, -1000, -1000, 1440, 42266, -1000, 2551,
	1609, 1609, 3178, 3136, 577, 568, 549, 1609, 470, -1000,
	1737, 1737, 1737, 1737, 1609, 429, 572, 3144, 3144, 42,
	1737, 35, 1609, 1609, 35, 1609, 1609, 1699, 255, -293,
	-1000, -1000, -1000, -1000, 1737, 1737, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3116, 3114, 694, 694, 42266, 174, 42266,
	694, 694, 694, 706, -16, 43468, 42867, 2091, 558, 555,
	1462, 1769, -1000, 1631, 42266, 42266, 1631, 1631, 23033, 22432,
	-1000, 42266, -1000, 3230, 2506, 2438, 1506, 2437, 2506, -129,
	-130, -137, 694, 694, 694, 694, 694, 203, 694, 694,
	694, 694, 694, 42266, 42266, 39862, 694, 694, 694, 8529,
	8529, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13382, 1811, 1967, 177, -41, -309, 231, -1000, -1000, 42266,
	2987, 201, -1000, -1000, -1000, 2477, -1000, 2541, 2541, 2541,
	2541, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2541, 2541, 2544, 2608, -1000, -1000, 2537, 2537, 2537, 2477,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2542, 2542, 2543, 2543, 2542,
	42266, 10349, 42266, 3006, 354, 2607, -1000, 42266, 2242, 351,
	3230, 3004, 3144, 3183, -1000, -1000, 1522, 2040, 2239, -1000,
	263, -1000, 355, 263, 1587, -1000, 1143, -1000, -1000, -1000,
	-1000, -1000, 42266, -45, 385, -1000, -1000, 2222, 2606, -1000,
	539, 1373, 1434, -1000, 290, 45724, 34452, 2091, 34452, 42266,
	-1000, -1000, -1000, -1000, -1000, -1000, 51, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	246, -1000, 10349, 10349, 10349, 10349, 10349, -1000, 848, 11559,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 12164, 12164, 12164,
	12164, 12164, 12164, 12164, 12164, 12164, 12164, 12164, 12164, 2588,
	1782, 12164, 12164, 12164, 12164, 1506, 3007, 1456, 266, -1000,
	-1000, -1000, -1000, 10349, -1000, 1752, 1991, 10349, 10349, 10349,
	10349, 42266, -1000, -1000, 4170, 10349, 10349, 4238, 10349, 3078,
	10349, 10349, 10349, 2433, 4891, 42266, 10349, -1000, 2432, 2431,
	-1000, -1000, 1889, 10349, -1000, -1000, 10349, -1000, -1000, 10349,
	12164, 10349, -1000, -1000, -1000, 241, 3078, 3078, 3078, 1730,
	10349, 10349, 3078, 3078, 3078, 1724, 3078, 3078, 3078, 3078,
	3078, 3078, 3078, 3078, 2428, 2421, 2420, 9744, 3144, -242,
	-1000, 7924, 3004, 3144, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -288, 2605, 42266, 2238, 2236, -329,
	-4, 917, 896, 903, -1000, 42266, 1766, 3063, -1000, 2594,
	42266, 691, 691, 691, -1000, 42266, 34452, 42266, 42266, 2091,
	42266, 42266, 42266, 691, 691, 691, 691, 42266, -1000, 3038,
	34452, 2925, 706, -1000, 42266, 1440, 3062, 42266, 3178, 12164,
	12164, -1000, -1000, 10349, 39261, 1737, 1609, 1609, -1000, -1000,
	42266, -1000, -1000, -1000, 1737, 42266, 1737, 1737, 3178, 1737,
	-1000, -1000, -1000, 1609, 1609, -1000, -1000, 10349, -1000, -1000,
	1737, 1737, -1000, -1000, 3178, 42266, 41, 3178, 3178, 44,
	-1000, -1000, -1000, 1609, 42266, 42266, 691, 42266, -1000, 42266,
	42266, -1000, -1000, 42266, 42266, 4167, 42266, 38660, 3110, -1000,
	34452, 42266, 42266, 32048, -1000, 1349, -1000, -9, -1000, -21,
	-16, 1631, -16, 1631, -1000, 538, 565, 21230, 469, 34452,
	5496, -1000, -1000, 1631, 1631, 5496, 5496, 1555, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1439, -1000, 289, 3144, -1000,
	-1000, -1000, -1000, -1000, 2039, 2033, 2032, 42266, 42266, 34452,
	2091, 42266, 694, 42266, 42266, 42266, 42266, 42266, -1000, 2591,
	1521, -1000, 3018, 42266, 42266, 42266, 1426, -1000, -1000, 18210,
	1520, 1426, -1000, 1799, -1000, 10349, 13382, -269, 10349, 13382,
	13382, 10349, 13382, -1000, 10349, 186, -1000, -1000, -1000, -1000,
	2031, -1000, 2029, -1000, -1000, -1000, -1000, -1000, 2235, 2235,
	-1000, 2026, -1000, -1000, -1000, -1000, 2025, -1000, -1000, 2022,
	-1000, -1000, -1000, 2404, 988, -1000, 2232, 2868, -243, -1000,
	19422, 42266, 42266, -354, -355, -1000, -243, -1000, 18816, 42266,
	3144, -1000, -248, 3004, 10349, 42266, -1000, 3135, -1000, -1000,
	263, -1000, 441, 345, -1000, -1000, -1000, -1000, -1000, -1000,
	1518, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1435, -1000, 42266, -1000, -1000, 290, 34452, 36255, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 234, -1000, -1000, 185, -1000,
	741, 159, 1571, -1000, -1000, 183, 190, 130, 794, 1991,
	-1000, 1814, 1814, 1794, -1000, 758, -1000, -1000, -1000, -1000,
	2590, -1000, -1000, -1000, 2777, 2685, -1000, 1718, 1718, 1530,
	1530, 1530, 1530, 1530, 1630, 1630, -1000, -1000, -1000, 6109,
	2588, 12164, 12164, 12164, 12164, 662, 662, 2245, 3221, -1000,
	10349, 155, 1793, -1000, 10349, 2822, 1343, 2614, 1489, 1517,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2403, 2402, 2705, 3197, 2395, 10349, -1000, -1000, 1568, 1543,
	1541, -1000, 1984, 9139, -1000, -1000, -1000, 2393, 1507, 2391,
	-1000, -1000, -1000, 2389, 1537, 1035, 2386, 1677, 2385, 1432,
	10349, 10349, 10349, 10349, 2384, 1524, 1523, 10349, 10349, 10349,
	10349, 2382, 10349, 10349, 10349, 10349, 10349, 10349, 10349, 10349,
	81, 81, 81, 1430, 1381, -1000, -1000, 1515, -1000, 1991,
	-1000, -1000, 3004, -1000, 2585, 2021, 1371, -1000, -1000, -317,
	2192, -1000, -1000, 906, 883, 926, 3130, 3016, 42266, 1026,
	2584, 42266, 42266, 42266, 192, -1000, 1129, -1000, 159, -64,
	414, 1016, 2814, 3194, -147, 42266, 42266, 42266, 42266, 3061,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 38059, -1000,
	2582, 1511, -1000, -1000, -1000, -1000, 1991, 2813, 42266, 42266,
	3178, 3178, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1737,
	3178, 3178, 1306, 1609, 1737, -1000, -1000, 1737, -1000, -1000,
	1737, -1000, -1000, 1497, -1000, 42266, -1000, -1000, -1000, 3059,
	2551, 1352, -1000, -1000, -1000, 3182, 1033, 675, 675, 919,
	762, 3181, 17008, -1000, 1634, 950, 739, 2975, 247, -1000,
	1634, -186, 654, 1634, 1634, 1634, 1634, 1634, 1634, 1634,
	533, 531, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634,
	1634, 1634, 1634, 929, 1634, 1634, 1634, 1634, 1634, -1000,
	1634, 2581, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 547,
	184, 3101, 309, 308, 1129, 3098, 324, 2918, 1333, -1000,
	-1000, -1000, -1000, 25437, 25437, 20629, 25437, -1000, 182, -16,
	-43, -1000, -1000, 1349, 5496, 1349, 5496, -1000, -1000, 733,
	-1000, -1000, 1016, -1000, 42266, 42266, -1000, -1000, 2579, 1708,
	-1000, -1000, 14594, -1000, 5496, 5496, -1000, -1000, 26038, 42266,
	-1000, -51, -1000, -28, 3004, -1000, -1000, -1000, 1339, -1000,
	-1000, 1340, 1016, 2866, 42266, 1339, 1339, 1339, -1000, -1000,
	16407, 42266, 42266, -1000, -1000, -1000, 3178, 8529, -1000, 32048,
	-1000, -1000, 37457, -1000, 36856, 3178, 1721, -1000, 13382, 1932,
	173, -1000, 220, -315, 170, 1920, 169, 1991, -1000, -1000,
	2381, 2379, 1510, -1000, 1493, 2378, 1487, 1483, -1000, 29,
	-1000, 2990, 1030, -1000, 2576, -1000, 1459, 2914, -1000, 1323,
	-1000, 1706, 1458, -1000, 2230, 2226, 1030, 1457, 2903, 1323,
	3004, 2224, -1000, 1322, -1000, 2055, 1492, 127, -1000, -1000,
	-1000, 42266, 2222, 1452, 36255, 1131, -1000, 726, 1491, 1486,
	-1000, 34452, 242, 34452, -1000, 34452, -1000, -1000, 365, -1000,
	42266, 2996, -1000, -1000, -1000, 2192, 1705, -336, 42266, -1000,
	-1000, -1000, -1000, -1000, 1448, -1000, 662, 662, 2245, 2353,
	-1000, 12164, -1000, 12164, 2989, -1000, 1720, -1000, 10349, 1872,
	45127, 10349, 45127, 1475, 24235, 42266, -1000, -1000, 10349, 10349,
	-1000, 2938, -1000, -1000, -1000, -1000, 10349, 10349, 2189, -1000,
	42266, -1000, -1000, -1000, -1000, 24235, -1000, 12164, -1000, 10349,
	1144, 1144, 2929, 1447, 81, 81, 81, 2896, 2861, 2847,
	1428, 81, 2830, 2769, 2681, 2672, 2633, 2623, 2572, 2568,
	-1000, 2575, -1000, -1000, 1868, 10954, 7924, -1000, -1000, 277,
	1320, 2020, 2219, 128, -1000, 1686, -1000, -1000, -1000, 868,
	382, -1000, 211, 2376, 1292, -1000, -1000, 42266, -1000, -1000,
	-1000, 16407, 2551, 2571, 2551, 87, 1634, 607, 34452, 536,
	-1000, 42266, 1994, 1685, 2860, 705, 2985, 42266, 2565, 384,
	2561, 2559, 3052, 394, 45308, 42266, 1165, -1000, 1476, 3753,
	-1000, 42266, -1000, 2091, -1000, 1609, -1000, -1000, 3178, -1000,
	-1000, 10349, 10349, 3178, 1609, 1609, 1737, 42266, -1000, 394,
	45308, 3049, 4342, 477, 2251, -1000, 42266, -1000, -1000, -1000,
	742, -1000, 876, 691, 42266, 1838, 876, 1837, 2556, -1000,
	-1000, 42266, 42266, 42266, 42266, -1000, -1000, 42266, -1000, 42266,
	42266, 42266, 42266, 42266, 35654, -1000, 42266, 42266, -1000, 42266,
	1833, 42266, 1832, 3108, -1000, 1634, 1634, 834, -1000, -1000,
	521, -1000, 35654, 2012, 2011, 2010, 2009, 2216, 2215, 2208,
	1634, 1634, 2000, 2204, 35053, 2203, 1059, 1990, 1989, 1985,
	1983, 2202, 920, -1000, 2200, 1956, 1955, 1954, 42266, 2553,
	2148, -1000, -1000, 87, 1634, 299, 42266, 1680, 607, 393,
	2051, 21831, 42266, 32048, 32048, 32048, 32048, -1000, 2901, 2894,
	-1000, 2897, 2888, 2926, 42266, 32048, 2551, -1000, 35053, -1000,
	-1000, -1000, 1506, 1404, 3175, 902, 10349, -1000, -1000, -25,
	-37, -1000, -1000, -1000, 34452, 2199, 469, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3129, 42266, 42266, 647, 2374, 1271,
	-1000, -1000, -1000, 45308, 2541, 2541, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2541, 2541, 2544, -1000, -1000,
	2537, 2537, 2537, 2477, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2542, 2542, 2543, 2543, 2542, -1000,
	-1000, 3191, -1000, 1264, -1000, -1000, 1470, -1000, 3191, 1762,
	-322, 13382, 1727, 1642, -1000, 10349, 13382, 10349, -270, 285,
	-277, -1000, -1000, -1000, 2196, -1000, -1000, -1000, 1977, -1000,
	1975, 96, 117, 1830, -243, 7924, 361, 42266, -243, 42266,
	7924, -1000, 42266, -356, -1000, 360, -243, 3129, 29, 10349,
	2967, -1000, -1000, 42266, 1959, -1000, -1000, -1000, 3188, 34452,
	2091, 1583, 33851, -1000, 230, -1000, 225, 522, 2195, -1000,
	759, 126, 2194, 2192, -1000, -1000, -1000, -1000, 12164, -1000,
	-1000, -1000, -1000, 1991, 10349, 2373, -1000, 910, 910, 2128,
	2372, 2370, -1000, 2541, 2541, -1000, 2477, 2537, 2477, 910,
	910, 2369, -1000, 2002, 2517, -1000, 2503, 2486, 10349, -1000,
	2363, 3185, 1248, -78, -217, 81, 81, -1000, -1000, -1000,
	-1000, 81, 81, 81, 81, -1000, 81, 81, 81, 81,
	81, 81, 81, 81, 621, -127, -299, -131, -300, -1000,
	2351, 1255, -1000, -1000, -1000, -1000, -1000, 4238, 1160, -1000,
	-1000, 2192, 2191, -1000, -1000, -1000, 42266, 2183, 2182, 1026,
	45308, 2350, 3046, 15806, 3031, 2057, -1000, -1000, -1000, 33250,
	493, -1000, -1000, -1000, 624, 232, 1952, 480, -1000, 42266,
	324, 2933, 1676, 2181, 42266, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2985, -1000, 938, 367, 30846, 13993, -1000, 401,
	15806, 15806, 401, 374, 1701, -1000, 609, 1194, 115, 32048,
	42266, -1000, 31447, 2349, -1000, 1016, 3178, -1000, 1991, 1991,
	-1000, 3178, 3178, 1609, -1000, 374, -1000, 401, -1000, 1383,
	17609, 430, 453, 410, -1000, 579, -1000, -1000, 594, 2954,
	45308, -1000, 42266, -1000, 42266, -1000, 42266, 42266, 691, 10349,
	2954, 42266, 713, -1000, -1000, 982, 357, 340, 666, 666,
	1136, -1000, 3024, -1000, -1000, 1134, -1000, -1000, -1000, -1000,
	42266, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 24235, 24235,
	3093, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2177, 2176, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 42266, 1366, -1000, 1674, 2057,
	33250, 1673, 1631, 2174, 493, 1994, 1670, -1000, 2172, -1000,
	1034, 42266, 42266, -1000, 1351, -1000, 1668, 2808, 2858, 2808,
	-1000, -1000, -1000, -1000, 2885, -1000, 2884, -1000, -1000, 1351,
	-1000, -1000, -1000, -1000, -1000, 902, -1000, 3127, 876, 876,
	876, 2347, -1000, -1000, -1000, 1131, 2346, -1000, -1000, -1000,
	3223, -1000, -1000, -1000, -1000, -1000, -1000, 16407, 2983, 3186,
	3177, 32649, 3186, -1000, -322, 1719, -1000, 1789, 167, 1843,
	42266, -1000, -1000, -1000, 2345, 2343, -250, 116, 3176, 3174,
	921, -1000, 2342, 1120, -243, -1000, -1000, 1030, -1000, -1000,
	-1000, 2168, -243, -1000, 1030, -1000, 96, -1000, -1000, 2969,
	-1000, -1000, 2091, -1000, 202, -1000, -1000, -1000, -1000, -1000,
	-1000, 144, -1000, 42266, -1000, 1078, 125, -1000, 1991, -1000,
	-1000, -1000, -1000, -1000, 45127, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10349, -1000, -1000, -1000,
	2443, -1000, -1000, 10349, 2339, 2166, 2336, 2159, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3230, -1000, 3173, 1350, 2335, 2334, 1348, 2332,
	2330, -1000, 10349, 2329, 4238, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 776, 401, 2328, 1041, -1000, -1000, -1000, -1000,
	401, -1000, 2156, 156, -1000, -1000, -1000, 2155, 2154, 1950,
	-1000, -1000, 1936, 1484, 168, -1000, -1000, -1000, -1000, -1000,
	-1000, 2051, 2049, 1666, -340, -1000, 2536, -1000, 1634, 1634,
	1634, 42266, 1332, -1000, 1634, 1634, 2324, -1000, 2323, 2322,
	-148, 625, 1646, 1640, -1000, 1948, 25437, 32048, 31447, 1326,
	-1000, 1467, -1000, -1000, -1000, -1000, -1000, 3178, 625, -1000,
	427, 1941, 12164, 2528, 12164, 2524, 464, 2510, 1319, -1000,
	42266, -1000, -1000, 42266, 280, 2508, -1000, 2507, 2812, 421,
	2501, 2493, 42266, 2439, -1000, 2954, 42266, 658, 2981, -1000,
	-1000, -1000, 330, -1000, -1000, 485, -1000, 42266, -1000, 42266,
	-1000, 1554, -1000, 24235, -1000, -1000, 1318, -1000, 2148, 2147,
	-1000, 156, 2144, 5496, -1000, -1000, 2933, 2143, -1000, 42266,
	1034, 1034, 3230, 42266, 7924, -1000, -1000, 10349, 2490, -1000,
	10349, -1000, -1000, -1000, -1000, -1000, 2485, 2957, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1305, -1000, 10349, 10349, -1000,
	-1000, 686, 13382, -278, 278, -1000, -1000, -1000, -252, 2141,
	-1000, -1000, 3172, 2140, 2067, 42266, -1000, -1000, 1030, -1000,
	1030, -250, -1000, -1000, 1016, -1000, -1000, 978, 529, -1000,
	2321, 2338, -1000, 2138, 81, -1000, 81, -1000, 205, 10349,
	-1000, 2139, -1000, -1000, -1000, 2135, -1000, -1000, 2086, -1000,
	2319, 45308, -176, -148, 15806, -176, -1000, -1000, 339, -1000,
	-1000, 316, -1000, -1000, 1929, 527, -1000, -1000, -1000, 1665,
	1855, 2085, 29043, 24235, 24836, 2131, -1000, -1000, 30846, 1305,
	1305, 3738, 246, 45613, -1000, 2484, 953, 1639, -1000, 1940,
	-1000, 1939, -1000, 3178, 1326, 114, -1000, -1000, 1549, -1000,
	953, 2251, 3171, -1000, 2763, 42266, 2723, 42266, 2483, 1663,
	12164, -1000, 594, 2865, -1000, -1000, 280, -1000, -1000, 1854,
	12164, -1000, -1000, 2113, 24836, 767, 1662, 1660, 818, 2482,
	-1000, 494, 3220, -1000, -1000, -1000, 826, 2481, -1000, 1819,
	1803, -1000, 42266, -1000, 29043, 29043, 696, 696, 29043, 29043,
	2478, 666, -1000, -1000, 12164, -1000, -1000, 1634, -1000, -1000,
	-1000, 1634, 1538, -1000, -1000, -1000, -1000, -1000, -1000, 2049,
	-1000, -1000, 3144, -1000, -1000, 1991, 42266, 1991, 30245, -1000,
	3167, 3162, -1000, 1991, 988, -1000, -322, 42266, 42266, -260,
	1930, -1000, 2112, 112, -1000, -1000, 1007, -252, -263, 44,
	24235, 1659, -1000, -1000, -1000, -1000, -1000, 2316, -1000, 967,
	-1000, -1000, -1000, 988, 2313, 2311, -1000, -1000, -145, -1000,
	-1000, 369, -1000, -1000, -1000, 496, 2106, -1000, -1000, 315,
	-1000, -1000, 2104, -1000, -1000, 124, -1000, 1637, 1313, -1000,
	2477, 10349, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	582, -1000, 401, 45575, -1000, 950, -1000, 978, 582, 27841,
	601, 286, -1000, 1919, -1000, -1000, 3230, -1000, 528, -1000,
	462, -1000, 1312, -1000, 1309, 29644, 1906, 1744, -1000, 45411,
	800, -1000, -1000, 2245, -1000, -1000, -1000, -1000, -1000, -1000,
	2103, 2098, -1000, -1000, -1000, -1000, -1000, 1905, 2460, -10,
	3081, 2095, -1000, -1000, 2459, 1269, 1268, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1198, 1186, 29043, -1000,
	-1000, 2245, 1901, 24235, 1634, -1000, -1000, 1184, 1157, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2456, -1000, -1000, 3157,
	-260, -1000, 2094, 95, 103, -1000, 2092, -1000, -1000, 884,
	-245, 77, 73, 65, -1000, -1000, -1000, 10349, -1000, -1000,
	42266, 491, -1000, -1000, -1000, 139, -1000, -1000, -1000, -1000,
	2085, 2084, -1000, 29043, 3024, 2034, 395, 3156, -1000, 45613,
	-1000, 1634, -1000, 395, 1150, -1000, 1634, 1634, -1000, 379,
	-1000, 1625, -1000, 1892, -1000, 3144, -1000, 378, -1000, 424,
	-1000, -1000, -1000, 1132, -1000, -1000, -1000, 45411, 452, -1000,
	588, 2447, -1000, -1000, 2296, 10349, 2446, 1634, 2133, -140,
	29043, 2811, 2683, 2574, 2570, 1090, -1000, -1000, 24235, -1000,
	-1000, 28442, 42266, 2067, -1000, -1000, 700, 108, 103, -1000,
	3153, 105, 3151, 3150, 970, 1781, -1000, 71, 68, 63,
	-1000, -1000, -1000, -1000, 497, -1000, 222, -1000, -1000, -1000,
	295, -1000, -1000, 3024, -1000, 3149, 477, -1000, 24235, -1000,
	-1000, 27841, 1305, 1305, -1000, -1000, 1890, -1000, -1000, -1000,
	-1000, 1881, -1000, -1000, -1000, 1070, -1000, 42266, 850, 7319,
	-1000, 2023, -1000, 42266, -1000, 2857, -1000, 204, 1065, 295,
	696, 295, 696, 295, 696, 295, 696, 219, -1000, -1000,
	-1000, 1063, -1000, -1000, 2445, 1876, 116, 109, 3147, -1000,
	2067, 3146, 2067, 2067, -1000, 84, 884, -1000, -1000, -1000,
	2073, -1000, -1000, -1000, -1000, 1634, 1634, 2071, 2070, 352,
	-1000, -1000, -1000, 27240, 430, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 452, 45613, -1000, 7319, 1050, -1000, 1991, -1000,
	666, -1000, -1000, 2819, 2772, 3217, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 42266, 3075, 23634, 91,
	-1000, -1000, -1000, 2069, -1000, 2067, -1000, -1000, 1627, -1000,
	-296, 1871, 1864, -1000, -1000, 42266, -1000, 42266, 427, -1000,
	45613, 1044, -1000, 7319, -1000, -1000, 3219, -1000, 3210, 799,
	799, 295, 295, 295, 295, -1000, -1000, 42266, -1000, 1040,
	-1000, -1000, -1000, 1466, -1000, -1000, -1000, -1000, 2066, -1000,
	-1000, 2062, -1000, -1000, -1000, 1031, 2251, -1000, -1000, -1000,
	-1000, -1000, 1907, 498, -1000, 966, -1000, 1604, -1000, 26639,
	42266, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42266, 6714,
	-1000, 979, -1000, -1000, 1991, 42266, -1000,
}

var yyPgo = [...]int{
	0, 175, 3257, 255, 186, 3775, 98, 248, 219, 217,
	244, 3774, 3772, 3771, 3010, 3002, 3770, 3765, 3764, 3762,
	3761, 3760, 3757, 3755, 3754, 3753, 3750, 3749, 3748, 3747,
	3746, 3745, 3743, 3742, 3741, 3740, 3739, 3738, 3733, 3732,
	3731, 3730, 3729, 3727, 3726, 3725, 241, 3724, 3723, 3722,
	3721, 3720, 3718, 3717, 3716, 3715, 3713, 3712, 3711, 3710,
	3709, 3708, 3706, 3705, 3704, 3702, 3701, 3700, 3699, 3698,
	3697, 3695, 3694, 3693, 3692, 3689, 3688, 3687, 3686, 3685,
	202, 3682, 2977, 3679, 3678, 3676, 3675, 3674, 3673, 3671,
	242, 3670, 3669, 3668, 3667, 3666, 3665, 3664, 3663, 3662,
	3661, 3660, 237, 3658, 3657, 3656, 3654, 247, 3653, 227,
	3652, 171, 139, 3651, 3650, 3647, 3646, 3645, 3641, 233,
	184, 71, 3640, 50, 3638, 3637, 215, 3635, 152, 3634,
	149, 3633, 3632, 3631, 3630, 3627, 3625, 3624, 3622, 3621,
	3620, 3619, 3618, 3611, 3606, 3605, 3604, 3600, 3599, 96,
	3598, 257, 3597, 76, 3596, 3594, 130, 57, 135, 243,
	1779, 250, 251, 183, 169, 95, 3592, 2983, 3591, 161,
	225, 158, 33, 3590, 136, 3589, 258, 44, 45, 236,
	141, 62, 160, 131, 3588, 211, 110, 109, 3587, 3586,
	140, 235, 178, 3585, 107, 3584, 3583, 3582, 3581, 3580,
	191, 189, 3579, 3577, 128, 3575, 3573, 157, 3572, 79,
	127, 177, 123, 3569, 260, 125, 115, 119, 99, 3568,
	100, 3565, 3562, 3561, 3559, 180, 3557, 3555, 133, 68,
	3551, 3550, 3549, 75, 3548, 77, 3547, 29, 3546, 67,
	3545, 3544, 3543, 3542, 3541, 3540, 3539, 3538, 3537, 3533,
	3532, 3531, 55, 3530, 3526, 7, 15, 14, 3523, 25,
	3520, 176, 3519, 3517, 3515, 3514, 3513, 94, 87, 3512,
	88, 164, 3511, 11, 27, 72, 3510, 3509, 216, 939,
	105, 144, 3508, 308, 3507, 3506, 3505, 159, 3504, 464,
	3501, 3497, 3496, 3495, 3493, 3491, 49, 3490, 220, 39,
	3489, 132, 134, 3485, 42, 56, 224, 208, 3484, 3483,
	3482, 515, 214, 90, 35, 0, 3481, 156, 3480, 3479,
	3476, 259, 3475, 228, 222, 166, 153, 254, 201, 3473,
	3472, 65, 3470, 162, 32, 58, 145, 86, 19, 204,
	3469, 1380, 9, 188, 3468, 200, 3461, 182, 16, 121,
	137, 3458, 3457, 31, 261, 3456, 3455, 3454, 124, 3450,
	3446, 179, 83, 3445, 3444, 3442, 3437, 41, 3436, 37,
	12, 3435, 97, 3434, 249, 3428, 256, 165, 181, 174,
	155, 223, 230, 84, 80, 3427, 1752, 151, 104, 26,
	3423, 218, 3422, 173, 129, 3420, 113, 3419, 239, 263,
	207, 3418, 185, 8, 47, 38, 28, 46, 10, 283,
	203, 3417, 3416, 21, 52, 3415, 66, 3414, 18, 3413,
	3412, 70, 5, 3411, 3409, 17, 20, 3408, 36, 210,
	167, 126, 93, 69, 3407, 3406, 48, 147, 3405, 146,
	150, 154, 3403, 78, 3402, 3401, 3400, 252, 3397, 240,
	3396, 3395, 3394, 3393, 3392, 3388, 3387, 3386, 3385, 3384,
	103, 43, 3382, 3381, 3380, 3378, 81, 148, 3377, 3376,
	3375, 3374, 34, 138, 3372, 13, 3371, 24, 22, 30,
	3370, 102, 3356, 3, 206, 3353, 3352, 4, 3351, 3346,
	1, 2, 3345, 3343, 122, 3339, 92, 23, 170, 118,
	3337, 3335, 82, 209, 143, 3320, 3317, 101, 234, 195,
	3316, 74, 229, 253, 3315, 212, 3313, 3312, 3311, 3310,
	3309, 3308, 1108, 3307, 3305, 232, 73, 89, 112, 3304,
	3303, 3301, 91, 163, 120, 114, 63, 85, 3300, 111,
	197, 3299, 193, 3297, 3294, 3293, 108, 3291, 3289, 3287,
	3284, 190, 3282, 3281, 192, 226, 3279, 3278, 306, 3277,
	3276, 3275, 3274, 3273, 3272, 3270, 3264, 3262, 3261, 231,
	245, 3255,
}

//line mysql_sql.y:11400
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObejectInfo {
	v, _ := st.union.(tree.ObejectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 564, 567, 567, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 117, 117, 146, 543, 543, 116, 549,
	549, 549, 550, 550, 113, 135, 134, 137, 137, 136,
	136, 133, 133, 129, 132, 132, 131, 131, 130, 125,
	127, 127, 126, 128, 128, 114, 102, 115, 493, 493,
	492, 492, 491, 491, 444, 444, 490, 490, 490, 489,
	489, 489, 488, 488, 487, 487, 486, 486, 484, 484,
	485, 483, 482, 482, 482, 480, 480, 480, 476, 476,
	478, 477, 477, 479, 471, 471, 474, 474, 472, 472,
	472, 472, 475, 470, 470, 470, 469, 469, 101, 101,
	101, 388, 388, 100, 100, 402, 402, 402, 402, 402,
	400, 400, 400, 400, 400, 400, 399, 399, 398, 398,
	403, 403, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 91, 91, 91, 91, 91, 96, 96, 96,
	555, 555, 554, 554, 556, 556, 556, 556, 557, 557,
	94, 94, 94, 95, 397, 397, 397, 92, 93, 93,
	387, 387, 392, 392, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 396, 396, 396,
	394, 394, 393, 393, 395, 395, 85, 85, 85, 88,
	87, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	86, 86, 86, 86, 86, 86, 81, 81, 81, 81,
	81, 80, 80, 82, 82, 384, 384, 383, 97, 97,
	98, 552, 552, 551, 553, 553, 553, 553, 99, 105,
	105, 105, 105, 105, 105, 105, 104, 104, 107, 107,
	106, 108, 90, 90, 90, 90, 90, 90, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 518, 518, 518, 520, 520, 319, 320, 568, 322,
	318, 318, 318, 514, 514, 515, 516, 517, 517, 517,
	103, 11, 11, 11, 11, 11, 11, 11, 11, 13,
	79, 84, 84, 260, 260, 265, 265, 266, 266, 266,
	271, 271, 272, 272, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 261, 261, 247, 247, 247, 242,
	242, 242, 242, 243, 243, 244, 244, 245, 245, 245,
	245, 246, 246, 312, 312, 267, 267, 267, 269, 269,
	268, 264, 262, 262, 262, 262, 262, 262, 262, 263,
	263, 263, 263, 270, 270, 77, 83, 83, 83, 531,
	531, 78, 542, 542, 447, 447, 333, 333, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 452, 453, 329, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 53, 56,
	57, 52, 52, 52, 373, 373, 51, 569, 569, 307,
	307, 65, 64, 55, 66, 67, 68, 69, 70, 71,
	50, 63, 63, 63, 63, 63, 63, 63, 63, 74,
	465, 465, 571, 571, 571, 72, 73, 446, 446, 446,
	62, 61, 60, 59, 58, 58, 49, 49, 48, 48,
	54, 141, 142, 142, 326, 326, 326, 328, 328, 324,
	570, 570, 416, 416, 327, 327, 47, 47, 47, 47,
	75, 325, 325, 306, 323, 323, 323, 12, 12, 10,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 25, 26, 28, 381, 381,
	378, 27, 19, 18, 18, 22, 21, 17, 17, 20,
	23, 24, 24, 9, 9, 9, 9, 14, 14, 15,
	164, 164, 215, 215, 526, 526, 522, 522, 523, 523,
	523, 524, 524, 525, 525, 109, 459, 459, 459, 459,
	459, 459, 8, 186, 186, 458, 458, 458, 458, 458,
	458, 385, 385, 385, 503, 503, 503, 504, 185, 185,
	180, 180, 460, 460, 350, 505, 505, 468, 468, 467,
	467, 466, 466, 183, 183, 184, 184, 167, 167, 120,
	120, 473, 473, 473, 473, 481, 481, 443, 443, 252,
	252, 299, 299, 300, 300, 157, 157, 158, 158, 158,
	158, 158, 158, 558, 558, 559, 560, 561, 561, 562,
	562, 562, 563, 563, 563, 563, 563, 511, 511, 513,
	513, 512, 182, 182, 178, 178, 179, 179, 179, 177,
	177, 176, 175, 175, 174, 172, 172, 172, 173, 173,
	173, 190, 190, 160, 160, 160, 159, 159, 159, 159,
	159, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 161, 161, 519, 519, 519, 448, 448,
	448, 455, 455, 280, 280, 281, 281, 279, 279, 162,
	162, 163, 163, 163, 163, 278, 278, 277, 165, 165,
	171, 170, 170, 166, 166, 166, 166, 288, 288, 287,
	287, 287, 287, 112, 118, 118, 119, 189, 189, 286,
	285, 285, 285, 188, 188, 187, 187, 181, 181, 169,
	169, 169, 169, 284, 168, 282, 548, 548, 547, 547,
	546, 544, 544, 544, 545, 545, 545, 545, 495, 495,
	495, 495, 495, 313, 313, 313, 317, 317, 316, 316,
	316, 316, 316, 321, 7, 7, 7, 7, 7, 7,
	7, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 38, 199, 200, 39, 201, 201,
	202, 202, 203, 203, 204, 205, 206, 206, 206, 206,
	37, 191, 191, 192, 192, 193, 193, 194, 195, 195,
	195, 198, 196, 197, 197, 566, 566, 565, 36, 36,
	29, 150, 150, 151, 151, 151, 153, 153, 248, 248,
	248, 152, 152, 154, 154, 154, 527, 530, 528, 528,
	532, 532, 532, 533, 533, 533, 533, 534, 534, 30,
	138, 143, 537, 537, 537, 536, 536, 538, 538, 539,
	539, 303, 303, 304, 304, 148, 149, 149, 145, 140,
	156, 156, 156, 156, 156, 139, 144, 147, 529, 535,
	535, 535, 382, 382, 379, 380, 380, 377, 376, 376,
	376, 541, 541, 540, 540, 540, 314, 314, 31, 372,
	372, 374, 375, 375, 375, 366, 366, 366, 366, 35,
	370, 370, 371, 371, 371, 371, 371, 371, 371, 367,
	367, 369, 369, 365, 365, 365, 365, 365, 365, 365,
	34, 155, 155, 364, 364, 361, 361, 359, 359, 360,
	360, 358, 358, 358, 362, 362, 42, 76, 43, 44,
	45, 41, 363, 363, 33, 33, 33, 33, 33, 33,
	33, 33, 122, 121, 121, 121, 121, 121, 124, 124,
	302, 302, 301, 301, 123, 249, 249, 40, 227, 227,
	435, 435, 430, 430, 430, 430, 430, 450, 450, 450,
	431, 431, 431, 432, 432, 432, 434, 434, 434, 433,
	433, 433, 433, 433, 449, 449, 451, 451, 451, 404,
	404, 405, 405, 405, 408, 408, 422, 422, 423, 423,
	421, 421, 428, 428, 427, 427, 426, 426, 425, 425,
	424, 424, 424, 424, 419, 419, 418, 418, 406, 406,
	406, 406, 406, 407, 407, 407, 417, 417, 420, 420,
	276, 276, 275, 275, 235, 235, 236, 236, 274, 274,
	233, 233, 234, 234, 234, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	501, 501, 502, 238, 238, 250, 250, 250, 250, 250,
	250, 237, 237, 239, 239, 216, 216, 214, 214, 214,
	214, 207, 207, 208, 208, 209, 209, 209, 213, 213,
	212, 212, 212, 212, 210, 210, 211, 211, 211, 211,
	211, 211, 390, 390, 498, 498, 499, 499, 494, 494,
	494, 497, 497, 497, 497, 497, 497, 497, 500, 500,
	500, 496, 496, 217, 297, 297, 297, 315, 315, 315,
	315, 296, 296, 296, 232, 232, 231, 231, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	389, 389, 330, 330, 331, 331, 259, 258, 258, 258,
	258, 258, 256, 257, 255, 255, 255, 255, 255, 254,
	254, 253, 253, 253, 368, 368, 251, 251, 241, 241,
	241, 240, 240, 240, 429, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 294, 294, 294, 295, 295, 295, 295,
	295, 295, 295, 295, 340, 340, 346, 346, 510, 510,
	509, 218, 218, 218, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 228, 228, 228, 413, 413, 413, 413,
	414, 414, 414, 414, 415, 415, 415, 411, 411, 412,
	412, 351, 352, 352, 456, 456, 457, 457, 409, 409,
	410, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 464, 464, 464, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	521, 521, 521, 506, 506, 506, 507, 507, 507, 507,
	507, 507, 507, 507, 507, 507, 507, 507, 508, 508,
	508, 508, 508, 508, 508, 508, 508, 508, 508, 508,
	508, 508, 508, 508, 508, 292, 292, 292, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 353, 353, 354, 354, 461, 461, 461,
	461, 461, 461, 462, 462, 463, 463, 463, 463, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 338, 289,
	289, 289, 355, 347, 347, 348, 348, 349, 349, 341,
	341, 341, 341, 341, 341, 342, 342, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 343,
	343, 345, 345, 357, 357, 357, 356, 356, 356, 356,
	356, 356, 356, 230, 230, 230, 230, 335, 335, 335,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 220, 220, 220, 220, 224, 224, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 225, 225, 225, 225, 225, 223, 223, 223,
	223, 223, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	110, 111, 111, 222, 298, 298, 436, 436, 439, 439,
	437, 437, 438, 440, 440, 440, 441, 441, 441, 442,
	442, 442, 445, 445, 305, 305, 305, 311, 311, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 6, 1, 2, 4, 0,
	1, 1, 0, 1, 5, 2, 2, 6, 9, 6,
	9, 4, 7, 8, 0, 1, 1, 2, 4, 6,
	1, 2, 4, 0, 2, 10, 10, 2, 0, 2,
	1, 3, 3, 3, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 2, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 2, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 1, 1, 2, 2, 1, 1, 1,
	3, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 4,
	1, 3, 3, 1, 2, 2, 2, 1, 2, 2,
	3, 4, 4, 6, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 2,
	2, 0, 1, 4, 2, 4, 1, 5, 3, 2,
	1, 2, 2, 4, 4, 5, 2, 1, 3, 4,
	4, 1, 2, 9, 7, 1, 3, 3, 1, 1,
	3, 1, 3, 2, 1, 2, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 2, 4,
	3, 3, 1, 1, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 5, 3, 4, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 1, 1, 1, 1,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 10,
	7, 4, 4, 1, 3, 1, 6, 3, 3, 3,
	1, 1, 1, 3, 2, 4, 5, 5, 6, 5,
	5, 3, 2, 2, 1, 3, 4, 3, 7, 5,
	8, 2, 2, 1, 3, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 2, 1, 3,
	2, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	6, 3, 3, 1, 1, 7, 7, 8, 8, 0,
	4, 7, 0, 3, 0, 2, 0, 1, 1, 1,
	1, 4, 2, 2, 3, 3, 4, 5, 3, 4,
	4, 2, 2, 2, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	3, 2, 5, 5, 0, 2, 7, 0, 1, 0,
	1, 5, 5, 3, 3, 2, 4, 4, 4, 4,
	4, 1, 1, 1, 3, 3, 1, 1, 1, 6,
	0, 1, 1, 1, 1, 5, 5, 0, 1, 1,
	3, 3, 3, 4, 6, 7, 4, 4, 7, 8,
	3, 3, 3, 4, 0, 2, 2, 0, 2, 2,
	1, 1, 1, 1, 0, 1, 4, 4, 5, 4,
	3, 1, 3, 1, 1, 3, 5, 2, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 4, 1, 3,
	1, 4, 6, 6, 4, 4, 4, 4, 4, 3,
	6, 3, 5, 1, 1, 2, 2, 11, 8, 9,
	1, 3, 2, 4, 0, 2, 0, 1, 1, 1,
	1, 0, 1, 0, 1, 4, 2, 1, 5, 4,
	4, 2, 5, 1, 3, 2, 1, 5, 4, 4,
	2, 0, 5, 4, 0, 1, 3, 3, 1, 3,
	1, 3, 1, 3, 4, 0, 1, 0, 1, 1,
	3, 1, 1, 0, 4, 1, 3, 2, 1, 0,
	8, 0, 4, 7, 4, 0, 2, 0, 2, 0,
	2, 0, 4, 1, 3, 1, 1, 6, 4, 5,
	7, 4, 5, 0, 1, 3, 8, 0, 6, 0,
	4, 6, 1, 1, 1, 1, 1, 2, 3, 1,
	3, 6, 0, 3, 0, 1, 2, 4, 4, 0,
	1, 3, 1, 3, 3, 0, 1, 1, 0, 2,
	2, 0, 2, 3, 3, 3, 1, 3, 3, 3,
	3, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 7, 7, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 2, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 3,
	1, 1, 1, 4, 4, 4, 3, 2, 2, 2,
	3, 2, 3, 4, 1, 3, 4, 0, 2, 1,
	1, 2, 2, 0, 1, 2, 4, 1, 3, 1,
	3, 2, 3, 1, 4, 3, 0, 1, 1, 2,
	5, 2, 2, 2, 0, 2, 3, 3, 0, 1,
	3, 1, 3, 0, 1, 2, 1, 1, 0, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 1, 7, 1, 3,
	0, 1, 1, 3, 1, 3, 0, 1, 1, 1,
	14, 1, 3, 0, 1, 1, 3, 1, 1, 2,
	4, 1, 1, 1, 1, 0, 1, 2, 9, 9,
	7, 1, 2, 3, 3, 3, 0, 4, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 4, 1, 1,
	3, 4, 3, 0, 1, 1, 1, 0, 2, 7,
	8, 8, 0, 3, 3, 0, 3, 0, 3, 0,
	5, 1, 3, 0, 3, 3, 0, 2, 9, 6,
	0, 2, 2, 3, 3, 4, 4, 4, 1, 0,
	2, 2, 1, 3, 2, 1, 3, 2, 1, 3,
	2, 0, 1, 3, 4, 3, 1, 1, 4, 1,
	3, 1, 1, 1, 1, 0, 1, 1, 1, 11,
	0, 2, 3, 3, 2, 2, 3, 1, 1, 1,
	3, 3, 4, 0, 2, 2, 2, 2, 2, 2,
	6, 0, 4, 1, 1, 0, 3, 0, 1, 1,
	2, 4, 4, 4, 0, 1, 8, 2, 4, 4,
	4, 9, 0, 2, 11, 9, 11, 8, 6, 9,
	7, 10, 2, 2, 9, 4, 5, 3, 0, 4,
	1, 3, 0, 3, 6, 0, 2, 10, 0, 2,
	0, 2, 0, 3, 2, 4, 3, 0, 2, 1,
	0, 2, 3, 0, 2, 3, 0, 2, 1, 0,
	3, 2, 4, 3, 0, 1, 0, 1, 1, 0,
	6, 0, 3, 5, 0, 4, 0, 3, 1, 3,
	4, 5, 0, 3, 1, 3, 2, 3, 1, 2,
	0, 4, 6, 5, 0, 2, 0, 2, 4, 5,
	4, 5, 1, 5, 6, 5, 0, 3, 0, 1,
	1, 3, 3, 3, 0, 4, 1, 3, 3, 3,
	0, 1, 1, 3, 2, 3, 3, 3, 4, 4,
	3, 3, 3, 3, 4, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 5, 4,
	1, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 5,
	7, 0, 1, 1, 3, 1, 1, 1, 1, 1,
	7, 9, 7, 9, 2, 1, 7, 9, 7, 9,
	8, 5, 0, 1, 0, 1, 1, 1, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 3, 1, 3, 5, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 2, 1, 2,
	2, 1, 1, 2, 2, 2, 3, 3, 2, 2,
	1, 5, 6, 4, 1, 1, 1, 5, 4, 1,
	1, 2, 0, 1, 1, 2, 5, 0, 1, 1,
	2, 2, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 2, 2, 2, 0, 3, 0, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 3, 5, 2, 2, 2, 2, 4, 1, 1,
	2, 5, 6, 8, 6, 6, 6, 1, 1, 1,
	1, 1, 1, 4, 4, 4, 7, 9, 7, 7,
	7, 9, 7, 7, 0, 2, 0, 1, 1, 2,
	4, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	2, 2, 2, 0, 1, 1, 1, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 5, 0,
	1, 3, 0, 1, 0, 2, 0, 2, 0, 1,
	6, 8, 8, 6, 6, 5, 5, 5, 6, 6,
	6, 6, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 1, 1, 1, 4, 4, 6, 8, 6, 4,
	5, 4, 4, 4, 3, 4, 6, 6, 7, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 8, 4, 2,
	3, 2, 4, 2, 2, 4, 6, 2, 2, 4,
	6, 4, 2, 0, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 3, 0, 1, 1, 3, 1, 3, 3,
	3, 3, 3, 2, 1, 1, 1, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 1, 3, 4,
	4, 5, 4, 5, 3, 4, 5, 6, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 2, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 4, 4, 1,
	2, 3, 5, 1, 1, 3, 0, 1, 0, 3,
	0, 3, 3, 0, 3, 5, 0, 3, 5, 0,
	1, 1, 0, 1, 1, 2, 2, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -564, -567, -2, -5, 613, -1, -4, -111, -85,
	-7, -113, -114, -8, -109, -9, -10, -12, -89, -104,
	-106, -108, -107, -46, -11, -103, -80, -81, -91, -97,
	-100, -101, -102, -115, -110, -112, -157, -116, -117, 603,
	-86, -87, -88, -32, -31, -30, -29, -138, -143, -146,
	609, 447, 14, 496, -14, -15, -511, -16, 259, -318,
	-319, -320, -322, -568, -47, -48, -49, -58, -59, -60,
	-61, -62, -72, -73, -74, -50, -51, -52, -55, -53,
	-65, -64, -66, -67, -68, -69, -70, -71, -54, -141,
	-142, -75, -56, -76, -57, -78, -77, -83, -79, -84,
	-140, -145, -13, 234, -82, 76, -92, -93, -94, -95,
	-96, -98, -99, 371, 377, 434, 602, 61, -158, -160,
	619, 620, 159, 160, 162, 163, -33, -34, -35, -36,
	-37, -38, -40, -39, -41, -42, -43, -44, -45, 230,
	16, 539, -17, -20, -18, -21, -19, -27, -28, -26,
	-23, -25, -139, -24, -144, -22, -147, 254, 253, 38,
	320, 321, 322, 375, 252, 231, 15, 31, 42, 351,
	-159, 82, 531, 532, 534, 232, -161, 13, 624, -6,
	-3, -2, -125, -129, -133, -136, -137, -134, -135, -4,
	-111, 117, 244, 604, -315, 367, 605, 607, 606, 85,
	93, -308, -310, 447, 259, 371, 377, 602, 620, 544,
	545, 546, 547, 548, 549, 550, 551, 553, 554, 555,
	556, 557, 558, 559, 569, 570, 560, 561, 562, 563,
	564, 565, 566, 567, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 499, 589,
	590, 591, 592, 527, 552, 588, 349, 350, 536, 271,
	295, 402, 301, 308, 159, 178, 172, 200, 192, 532,
	167, 275, 313, 276, 92, 162, 482, 107, 459, 431,
	165, 290, 292, 294, 528, 529, 361, 297, 526, 296,
	298, 300, 530, 277, 352, 188, 183, 289, 273, 181,
	278, 40, 279, 205, 280, 281, 541, 455, 348, 461,
	305, 52, 429, 182, 456, 293, 458, 209, 213, 473,
	474, 176, 177, 463, 476, 204, 207, 208, 251, 345,
	346, 43, 538, 263, 477, 211, 203, 199, 485, 309,
	307, 202, 175, 198, 274, 65, 215, 214, 216, 425,
	426, 427, 428, 282, 283, 365, 472, 195, 184, 353,
	168, 23, 480, 258, 460, 378, 284, 302, 310, 210,
	212, 265, 270, 540, 531, 433, 269, 306, 478, 180,
	262, 291, 257, 481, 169, 534, 380, 285, 163, 299,
	475, 484, 64, 393, 174, 166, 248, 160, 267, 272,
	286, 287, 288, 525, 312, 311, 303, 533, 196, 264,
	201, 186, 173, 197, 161, 266, 483, 394, 600, 351,
	412, 194, 191, 268, 241, 479, 462, 164, 416, 395,
	189, 314, 596, 597, 598, 366, 344, 315, 316, 187,
	255, 453, 454, 319, 422, 335, 396, 432, 403, 397,
	222, 223, 323, 465, 467, 206, 599, 324, 325, 326,
	457, 327, 328, 329, 330, 370, 56, 58, 94, 97,
	96, 621, 622, 63, 29, 356, 359, 391, 398, 337,
	601, 537, 334, 338, 339, 360, 25, 414, 382, 418,
	417, 48, 49, 50, 53, 54, 55, 57, 59, 60,
	51, 524, 375, 388, 486, 45, 47, 385, 27, 362,
	413, 435, 333, 415, 446, 46, 444, 445, 466, 26,
	364, 363, 62, 44, 421, 423, 424, 317, 331, 373,
	610, 487, 368, 384, 387, 369, 336, 358, 389, 67,
	66, 381, 611, 376, 374, 332, 542, 543, 340, 568,
	354, 430, 521, 520, 519, 518, 517, 516, 515, 514,
	320, 321, 322, 399, 400, 401, 411, 404, 405, 406,
	407, 408, 409, 410, 449, 450, 612, 468, 470, 471,
	469, 236, 623, 355, 239, 614, 615, 95, 616, 618,
	617, 28, -395, -393, -315, 532, 602, 377, 531, 534,
	371, 351, 620, 375, 259, 320, 321, 322, 447, -201,
	-315, 623, -167, 39, -214, -315, -167, -82, -15, -14,
	-159, -160, -214, 238, -323, 24, 429, -90, 430, 234,
	82, 77, -315, -9, -102, -8, -109, -80, -157, 434,
	-321, -315, 320, 320, -321, 238, -315, 269, 410, -447,
	244, -399, -372, 270, -398, -374, -401, -375, 32, 230,
	232, 231, 266, 16, 375, 240, 14, 13, 376, 252,
	25, 26, 28, 15, 377, 379, 29, 380, 383, 384,
	385, 42, 388, 389, 259, 85, 93, 88, 277, -200,
	-315, -349, -341, 114, -344, -336, -337, -339, -490, -484,
	-334, 82, 141, 142, 149, 115, 625, -338, -429, 36,
	117, 548, 552, 588, 497, -290, -291, -292, -293, -294,
	-295, -315, -485, -483, 88, 98, 100, 104, 105, 103,
	101, 153, 185, 102, 89, 154, -160, 85, -506, 558,
	-309, 581, 589, 590, 591, 592, 580, 61, -454, -463,
	237, -461, 152, 190, 255, 186, 14, 147, 422, 187,
	555, 577, 499, 559, 569, 584, 550, 551, 553, 545,
	546, 547, 549, 560, 562, 576, -464, 572, 582, 583,
	568, 585, 586, 587, 618, 87, 86, 575, 574, 561,
	556, 557, 563, 544, 554, 564, 565, 573, 578, 579,
	359, 107, 360, 361, 489, 352, 362, 244, 429, 70,
	363, 364, 365, 366, 367, 496, 368, 71, 369, 358,
	259, 412, 370, 189, 206, 501, 500, 502, 493, 490,
	488, 491, 492, 494, 495, 566, 567, 571, -118, -119,
	594, -558, -283, -559, 6, 7, 8, 9, -560, 154,
	-549, 431, 540, 88, 164, 161, -386, 164, 113, 169,
	168, -386, 166, 323, 265, -363, -150, 349, 412, 327,
	94, 269, -366, -364, 528, -449, 317, 313, 289, 239,
	110, -151, 249, 248, 108, 489, 237, 386, 308, 56,
	58, -522, -523, 227, 228, 229, -513, 522, -512, -315,
	361, 96, 97, 27, 238, 372, 265, 467, 465, 466,
	468, 469, 470, 471, -63, -465, -446, 462, 461, -327,
	454, 460, 452, 464, 455, 350, 329, 328, 230, 614,
	529, 523, -305, 396, 432, 486, 487, 373, 433, 473,
	475, 456, 107, 193, 190, 239, 241, 238, 349, 489,
	412, 94, 327, -522, 161, 473, 475, 269, 410, 41,
	-392, 422, -391, -393, 474, 485, 86, 87, 472, -305,
	107, 453, 453, -558, -283, -158, -160, -112, -511, 530,
	530, 530, 239, 349, 412, 269, 240, 238, 525, 528,
	241, 489, 237, 320, 372, 265, 327, 94, 166, -448,
	-519, 32, -455, 224, 225, 226, 33, 34, -1, 121,
	624, -341, -341, -6, 627, -6, -341, -315, -315, 156,
	-220, -224, -221, -223, -222, -226, -225, 190, 191, 152,
	194, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	207, 208, 205, 31, 206, 255, 186, 187, 188, 189,
	209, 172, 192, 537, 217, 173, 218, 174, 219, 175,
	220, 176, 177, 221, 178, 181, 182, 183, 184, 180,
	155, 82, 155, 88, -183, 261, -214, 155, 628, -183,
	-558, -176, -177, 11, -214, -296, -315, 431, 124, -90,
	77, -90, 430, 77, -514, -515, -516, -518, 234, 430,
	429, -107, 155, 277, 17, -321, -321, 80, -214, -374,
	269, -399, -372, 36, 79, 156, 242, 156, 79, 82,
	373, 349, 412, 374, 489, 238, 386, 241, 269, 387,
	349, 412, 238, 241, 489, 269, 349, 238, 241, 412,
	269, 387, 452, 453, 241, 27, 378, 381, 382, 453,
	-469, 485, 156, 113, 110, 111, 112, -341, 131, -356,
	124, 125, 126, 127, 128, 129, 130, 138, 137, 148,
	141, 142, 143, 144, 145, 146, 147, 139, 140, 134,
	114, 132, 136, 133, 116, -160, -341, -349, 61, -339,
	-339, -339, -339, -315, -429, -346, -341, 82, 82, 82,
	82, 155, 101, 88, -341, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, -462, 82, 82,
	-353, -354, 82, 82, -334, -296, 82, 88, 88, 82,
	82, 82, 88, -354, -354, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, -177, 156,
	-176, 82, -176, -177, -161, -160, 32, 33, 32, 33,
	32, 33, 32, 33, -561, 611, 82, 98, 621, 222,
	478, 539, 167, 168, 169, -361, 244, -199, -315, -201,
	372, 241, 525, 241, -151, -361, -361, -361, -361, -361,
	240, -361, 24, 238, 238, 238, 238, -361, 496, 124,
	124, 59, -524, 171, 156, -513, -182, 82, -326, 132,
	136, -326, -279, 18, 24, 267, 267, 267, -326, 307,
	-569, -570, 17, 134, -324, -570, -324, -324, -326, -571,
	240, 463, 43, 268, 267, -178, -179, 22, -178, 457,
	453, -416, 458, 459, -328, -570, -327, -326, -326, -327,
	-326, -326, -326, 32, 238, 241, 489, 327, 615, -569,
	-569, 31, 31, -447, -447, -214, -447, 523, -306, -315,
	-447, -447, -447, -525, 243, -555, -554, 476, -557, 478,
	161, -393, 161, -393, -374, 269, 269, 156, 124, 24,
	-394, 124, 135, -393, -393, -394, -394, -237, 41, -314,
	152, -315, 88, -237, 41, -552, -551, -214, -177, -161,
	-160, 83, 83, 83, 533, 533, 533, -447, -447, -447,
	-447, -447, -449, -447, -447, -447, -447, -447, -321, -191,
	-315, -201, 244, -447, -447, -447, -162, -163, 143, -341,
	-315, -162, -3, -127, -126, 118, 119, 121, 605, 367,
	604, 608, 602, -393, 41, -442, 394, 393, -436, -438,
	82, -437, 82, -437, -437, -437, -437, -437, 82, 82,
	-439, 82, -439, -439, -436, -440, 82, -440, -441, 82,
	-441, -440, -315, -347, -349, -315, 39, -458, 61, -157,
	82, 31, 82, -315, 88, -459, 61, -157, 82, 31,
	-177, -120, 39, -179, 21, 155, 98, 88, -107, -90,
	77, -107, 83, 156, -517, 104, 105, -520, 204, 196,
	-315, -105, 88, -7, -8, -9, -10, -46, -80, -157,
	-486, -484, 82, 32, 421, 79, 17, -400, 238, 489,
	372, 265, 241, 349, -398, -381, -378, -376, -314, -374,
	-377, -376, -403, -296, 453, -121, 436, 435, 319, -341,
	-341, -341, -341, -341, 103, 114, 344, 104, 105, -336,
	-357, 32, 315, 316, -337, -337, -337, -337, -337, -337,
	-337, -337, -337, -337, -337, -337, -345, -355, -429, 82,
	134, 132, 136, 133, 116, -339, -339, -337, -337, 83,
	156, -341, -510, -509, 118, -341, -341, -341, -341, -315,
	-507, -508, 503, 504, 505, 506, 507, 508, 509, 510,
	511, 512, 513, 363, 358, 364, 362, 352, 370, 365,
	366, 189, 520, 521, 514, 515, 516, 517, 518, 519,
	-347, -347, -341, -507, -347, -289, 33, 32, -349, -349,
	-349, 83, -341, -521, 342, 341, 343, -180, -315, -347,
	83, 83, 83, 98, -349, -349, -347, -337, -347, -508,
	-289, -289, -289, -289, 143, -349, -349, -289, -289, -289,
	-289, 143, -289, -289, -289, -289, -289, -289, -289, -289,
	83, 83, 83, 143, -349, -178, -119, -467, -466, -341,
	41, -120, -179, -562, 612, 82, -296, -550, 88, 88,
	625, 479, 480, 165, 168, 167, -315, 114, 35, 82,
	-191, -361, -361, -361, -527, -315, -382, -379, -376, -315,
	-315, -372, -315, -315, -214, -361, -361, -361, -361, -214,
	-248, 53, 54, 55, -376, -152, 56, 57, -525, -512,
	35, -181, -315, -279, -339, -339, -341, -376, 269, -569,
	-326, -326, -307, -306, -328, -323, -328, -328, -279, -324,
	-326, -326, -341, -328, -324, -279, -315, 453, -279, -279,
	-416, -326, -325, -315, -325, -361, -306, -307, -307, -214,
	-214, -260, -265, -261, -266, 261, 235, 356, 357, 233,
	231, 11, 232, -273, 308, -362, 497, -243, -244, 77,
	42, -246, 259, 398, 391, 271, 275, 92, 276, 431,
	277, 240, 279, 280, 281, 296, 298, 251, 282, 283,
	284, 422, 285, 160, 297, 286, 287, 288, 374, -238,
	6, 330, 41, 51, 52, 445, 444, 542, 539, 272,
	-527, -527, 31, 31, -382, -315, -315, -170, -165, -169,
	-166, -171, -282, -284, -168, 82, -214, -160, -315, 156,
	477, 479, 480, -555, -394, -555, -394, 32, 421, -397,
	421, 32, -372, -391, 473, 475, -387, 88, 422, -377,
	-396, 79, 152, -466, -394, -394, -396, -396, 151, 156,
	-553, 478, 479, 227, -178, 98, 98, 98, -216, -214,
	-527, -381, -372, -315, -447, -216, -216, -216, -315, -315,
	82, 155, 36, -315, -315, -315, -278, 156, -277, 17,
	-316, -315, 35, 88, 155, -278, -128, -126, 120, -341,
	-6, 604, -341, -6, -6, -341, -6, -341, -445, 395,
	98, 98, -298, 88, -298, 98, 98, 98, 83, 88,
	-385, 79, -460, -350, -505, 594, -185, 83, -180, -503,
	-504, -180, -184, -315, 628, 628, -460, -185, 83, -503,
	-178, 595, -120, -175, -174, -341, -315, 24, -107, -90,
	-515, 155, 156, -181, -400, -380, -377, -402, 143, -315,
	-388, 156, 539, 628, 86, 242, -541, -540, 413, 83,
	156, -470, 243, 496, 88, 625, 429, 222, 223, 103,
	344, 104, 105, -429, -349, -345, -339, -339, -337, -337,
	-343, 256, -343, 113, -341, 626, -340, -509, 120, -341,
	35, 156, 35, 156, 80, 155, 83, 83, 17, 17,
	83, -341, 83, 83, 83, 83, 17, 17, -341, 83,
	155, 83, 83, 83, 83, 80, 83, 156, 83, 156,
	-349, -349, -341, -349, 83, 83, 83, -341, -341, -341,
	-349, 83, -341, -341, -341, -341, -341, -341, -341, -341,
	-410, 448, -410, -410, 156, 156, 156, 83, -120, 82,
	98, 156, 622, -302, -301, 88, 166, 169, 169, 168,
	24, 36, -200, -202, -203, -204, -205, -206, 134, 157,
	158, 82, -214, -214, -214, -530, 399, -542, 156, 41,
	-540, 489, -148, 319, -365, 80, -155, 17, 539, -214,
	-214, -214, -214, -227, 35, 17, -164, -215, -315, 82,
	83, 156, -373, 80, -315, -307, -279, -279, -328, -279,
	-279, 156, 23, -326, -328, -328, -324, 155, -306, -435,
	35, -182, 156, 21, 261, -213, -312, -210, -212, 246,
	-331, -211, 249, -499, 247, 245, 108, 250, 304, 109,
	240, -312, -312, 246, -247, 242, 35, -312, -263, 240,
	347, 304, 247, 21, 261, -262, 240, 109, -315, 246,
	250, 247, 245, -311, 124, -305, 151, 242, 43, 374,
	-311, 543, 261, -311, -311, -311, -311, -311, -311, -311,
	278, 278, -311, -311, -311, -311, -311, -311, -311, -311,
	-311, -311, -311, 161, -311, -311, -311, -311, -311, -311,
	82, 273, 274, -531, 399, 31, 355, 355, -542, 31,
	-156, 349, 31, -285, -286, -287, -288, 68, 72, 74,
	69, 70, 71, 75, 31, 156, -313, -317, 35, -315,
	88, -313, -160, -165, -170, -313, 82, -554, -556, 481,
	478, 484, -396, -396, 242, 82, 124, -396, -396, 41,
	-314, -551, 485, 479, -120, 156, 79, -216, -192, -193,
	-194, -195, -220, -296, 191, 194, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 207, 208, 205, 206, 255,
	186, 187, 188, 189, 209, 172, 192, 537, 173, 174,
	175, 176, 177, 178, 181, 182, 183, 184, 180, -315,
	-201, -279, -163, -165, -315, 88, -315, 143, -279, 121,
	-6, 119, -132, -131, -130, 122, 602, 608, 121, 121,
	121, 83, 83, 83, 156, 83, 83, 83, 156, 83,
	156, -473, 458, 40, 156, 82, 83, 156, 61, 156,
	124, 83, 156, 88, 88, 83, 61, -120, 88, 156,
	-172, 37, 38, 155, 431, -315, -484, 83, -402, 156,
	242, 155, 155, -378, 377, -314, -380, 21, 539, -296,
	39, -302, 124, 625, -315, 83, -343, -343, 113, -339,
	-336, 83, 121, -341, 119, -218, -220, 393, 394, -341,
	-218, -219, -225, 152, 190, 255, 189, 188, 186, 393,
	394, -237, -315, -341, -341, 83, -341, -341, 17, -315,
	-237, -337, -341, -177, -177, 83, 83, -409, -410, -409,
	-409, 83, 83, 83, 83, -409, 83, 83, 83, 83,
	83, 83, 83, 83, 82, 98, 100, 98, 100, -466,
	-563, 63, 610, 62, 421, 103, 309, 156, 98, 88,
	626, 156, 124, 169, -543, 313, 349, 385, 83, 156,
	-296, -192, -182, 82, -182, -533, 460, 401, 411, -311,
	-333, -332, 351, 42, -452, 422, 407, 408, -379, 269,
	-315, -539, 95, 124, 79, 334, 338, 339, 335, 336,
	337, -359, -360, -358, -362, -527, 82, 82, -157, 35,
	82, 82, 35, -430, 324, -220, -214, -164, -315, 17,
	156, -526, 155, -1, -315, -372, -326, -279, -341, -341,
	-279, -326, -326, -328, -315, -430, -220, 35, -261, 235,
	232, -406, 306, 307, -407, -420, 309, -422, 82, -217,
	-296, -211, -498, -499, -361, -315, 109, -498, 109, 82,
	-217, -296, -296, -264, -325, -296, -315, -315, -315, -315,
	-269, -268, -296, -271, 32, -272, -315, -315, -315, -315,
	109, -315, 109, -242, 41, 48, 49, 50, -311, -311,
	193, -245, 41, 421, 423, 424, -271, 98, 98, 98,
	98, 88, 88, 88, -311, -311, 98, 88, -317, 88,
	-500, 168, 45, 46, 98, 98, 98, 98, 41, 88,
	-250, 41, 289, 293, 290, 291, 292, 88, 98, 41,
	98, 41, 98, 41, -315, 82, -501, -502, 88, -533,
	-311, 355, -393, 124, -333, -538, 319, -149, 92, 32,
	-186, 235, 232, -527, -384, -383, -296, -169, -169, -169,
	-169, 68, 68, 68, 73, 68, 73, 68, -287, -384,
	-171, -182, -317, 83, -548, -547, -546, -544, 76, 243,
	77, -347, 478, 482, 483, -380, -329, 88, -387, -190,
	24, -214, -214, -451, 299, 300, 83, 156, -220, -281,
	19, 155, -281, 117, -6, -128, -130, -341, -6, -341,
	604, 367, 605, 88, 98, 98, -481, 442, 437, 439,
	109, -350, -468, -467, 61, -157, -180, -460, -504, -466,
	-315, 628, 61, -157, -460, -190, -473, -174, -173, 44,
	-315, 98, 17, -377, -372, 143, 143, -315, 378, -388,
	88, 400, 88, 238, 626, 88, -302, -336, -341, 83,
	-228, 177, 176, -228, 35, 83, 83, -437, -437, -436,
	-439, -436, -228, -228, 83, 83, 24, 83, 83, 83,
	-341, 83, 83, 156, -456, 498, -457, 570, -409, -409,
	-409, -409, -409, -409, -409, -409, -409, -409, -409, -409,
	-409, -409, -352, -351, 261, 443, 617, 617, 443, 617,
	617, 83, 156, -507, 156, -301, 88, -315, 88, 88,
	-204, -220, 83, 35, -207, -208, -209, -217, -210, -212,
	35, -534, 92, -528, 88, -315, -535, 92, 402, 154,
	353, 41, 403, 404, 419, 348, 98, 98, 409, -529,
	-315, -156, -537, 52, 124, 88, -214, -358, -305, 151,
	280, 327, -276, -275, -315, 88, -207, -157, -207, -207,
	-157, -431, 326, 21, 98, 142, -183, 80, 155, -165,
	-215, -315, 143, 83, -279, -279, -279, -326, -431, -157,
	-418, 310, 82, -416, 82, -416, 109, 335, -423, -421,
	261, -267, 45, 47, -220, -496, -315, -494, -496, -315,
	-494, -494, -361, -341, -267, -217, 242, 31, 232, -270,
	332, 333, 338, -389, 305, 114, -389, 156, -172, 156,
	-315, -237, -237, 31, 88, 88, -216, 83, 156, 124,
	-534, -528, 124, -394, 88, -535, -539, 124, 88, 156,
	-186, -186, -279, 156, 124, -188, -187, 79, 80, -189,
	79, -187, 68, 68, -279, -546, -545, 24, -499, -499,
	-499, 83, 83, 15, -194, 41, -280, 20, 21, 143,
	-280, 121, 119, 121, 121, -315, 83, 83, -443, 596,
	-477, -479, 437, 21, 21, 15, 243, 83, -460, 88,
	-460, -481, 45, 46, -372, -388, 422, -214, 156, 626,
	-218, -341, 83, -341, 83, 88, 83, 88, -177, 21,
	83, 156, 83, 83, 83, 156, 83, 83, -341, 83,
	-507, 236, -157, 83, 156, -157, 88, -532, 413, 88,
	88, 98, 41, 98, 154, 405, -453, -149, -536, 92,
	124, 625, 82, -311, -311, -311, -315, 83, 156, -311,
	-311, 83, 83, 83, -235, 539, -432, 260, 98, 142,
	98, 142, 98, -313, -165, -315, -279, -526, 155, -279,
	-432, -408, 311, 98, -337, 82, -337, 82, -417, 308,
	82, 83, 156, -315, -296, -232, -231, -229, 103, 114,
	41, 391, -230, 92, 151, 294, 297, 296, 272, 295,
	-259, -330, 79, 397, 332, 333, -362, 596, 527, 245,
	108, 109, 379, -331, 82, 82, 80, 314, 82, 82,
	-496, 83, -267, -296, 41, -270, 41, 345, 305, -268,
	-315, 151, -237, 83, -502, 88, -532, 88, -396, -537,
	88, -527, -177, -383, -466, -341, 82, -341, 82, 68,
	11, 19, -334, -341, -349, 244, -6, 605, 367, -252,
	597, 88, 21, 88, -475, 88, -384, -443, -123, -249,
	-305, 277, 83, 83, 83, -409, -409, -412, -411, -415,
	443, 306, 451, -349, 88, 88, 83, 83, -196, -220,
	-153, 539, -235, -209, -153, 21, 539, 352, 41, 98,
	41, 406, 124, 104, 105, -303, -304, 88, -367, -369,
	-296, 82, -237, -239, -314, 152, 88, -275, -334, -334,
	-233, -157, 35, -234, -273, -362, -122, -121, -233, 82,
	-433, 160, 98, 142, 98, 98, -279, -279, -433, -422,
	21, 83, -403, 83, -403, 82, 124, -337, -421, -424,
	61, -229, 103, -337, 88, -239, -240, 41, 293, 289,
	124, 124, -241, 41, 273, 274, -251, 82, 304, 15,
	193, 82, 109, 109, -214, -367, -367, -497, 334, 335,
	336, 340, 338, 339, 337, -497, -367, -367, 82, -390,
	-389, -337, -311, -311, 151, -536, -178, -181, -495, -315,
	245, 21, 21, -315, -315, -299, 598, 98, 88, 439,
	-252, -444, 599, -471, -416, -237, 124, 83, -414, 116,
	405, 409, -335, -338, 98, 100, 185, 154, 83, 83,
	538, -154, 60, 485, 88, 400, 88, 352, 88, 626,
	156, 124, 83, 156, -436, -341, -404, 261, -157, 156,
	-273, -305, -123, -404, -236, -274, -315, 88, -450, 168,
	325, 539, 98, 142, 98, -177, -434, 168, 325, -407,
	83, 83, 83, -403, 98, 83, -428, -425, 82, -273,
	263, 134, 88, 88, 98, 82, -461, 31, 88, -368,
	82, 83, 83, 83, 83, -367, 98, -237, -311, 83,
	83, 156, 82, 21, -299, 88, -480, 442, -474, -472,
	437, 438, 439, 440, 88, -413, -414, 409, -335, -338,
	594, 449, 449, 449, -198, -315, 304, 422, -304, 88,
	-370, -369, -172, 83, -405, 313, 21, -273, -311, -405,
	83, 156, -311, -311, 325, 98, 142, 98, -178, 325,
	-419, 312, 83, -428, -273, -427, -426, 311, 264, 82,
	83, -341, -353, -311, 83, -254, -253, 535, -367, -370,
	80, -370, 80, -370, 80, -370, 80, 83, -237, -315,
	245, -300, -315, -475, -482, 243, -478, -479, 441, -472,
	21, 439, 21, 21, -124, 156, 113, 450, 450, 450,
	-197, 35, 444, 378, -371, 251, 345, 346, 92, 539,
	332, 333, -172, 21, -406, -237, -274, -334, -334, 98,
	98, 83, 156, -315, 260, 82, -348, -342, -341, 260,
	83, -315, -258, -256, -257, 79, 456, 302, 303, 83,
	-497, -497, -497, -497, -259, 83, 156, -489, 82, 98,
	-477, -476, -478, 21, -475, 21, -475, -475, 446, -413,
	88, -311, -311, 88, 88, 331, -296, 82, -418, -426,
	-425, -348, 83, 156, -389, -257, 79, -256, 79, 16,
	15, -370, -370, -370, -370, -315, -493, 31, 83, -488,
	-487, -297, -483, -315, 442, 443, 88, -475, 124, -566,
	-565, 616, 98, 98, -315, -403, -408, 83, -342, -255,
	299, 300, 31, 168, -255, -492, -491, -490, 83, 156,
	155, 88, 88, 83, -422, 103, 41, 301, 156, 124,
	-487, -315, -491, 41, -341, 155, -315,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 0,
	266, 267, 268, 864, 865, 866, 867, 868, 869, 870,
	0, 0, 0, 0, 623, 624, 0, 589, 0, 0,
	0, 0, 0, 0, 477, 478, 479, 480, 481, 482,
	483, 484, 485, 486, 487, 488, 489, 490, 491, 492,
	493, 494, 495, 496, 497, 498, 499, 500, 501, 502,
	503, 504, 505, 506, 507, 361, 362, 363, 364, 365,
	366, 367, 368, 0, 291, 287, 212, 213, 214, 215,
	216, 298, 299, 454, 0, 0, 0, 0, 705, -2,
	59, 0, 280, 0, 271, 271, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, -2,
	636, 0, 590, 591, 592, 593, 594, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 350, 351, 352,
	346, 347, 349, 348, -2, 0, 636, 0, 0, 0,
	713, 0, 0, 0, 0, 0, 756, 778, 23, 0,
	7, 9, 10, 11, 12, 13, 14, 15, 16, 17,
	18, 0, 0, 19, 0, 19, 0, 0, 0, 1267,
	1268, 1269, 1270, 2042, 2012, -2, 1785, 1762, 1937, 2071,
	2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081,
	2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091,
	2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101,
	2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111,
	2112, 2113, 2114, 2115, 2116, 2117, 1719, 1720, 1721, 1722,
	1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732,
	1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742,
	1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752,
	1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
	1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
	1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1852, 1853, 1854, 1855,
	1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865,
	1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875,
	1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885,
	1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895,
	1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905,
	1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
	1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925,
	1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
	1936, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946,
	1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956,
	1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966,
	1967, 1968, -2, 1970, 1971, 1972, 1973, 1974, 1975, 1976,
	1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986,
	1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
	1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
	2007, 2008, 2009, 2010, 2011, 2013, 2014, 2015, 2016, 2017,
	2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027,
	-2, -2, -2, 2031, 2032, 2033, 2034, 2035, 2036, 2037,
	2038, 2039, 2040, 2041, 2043, 2044, 2045, 2046, 2047, 2048,
	2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058,
	2059, 2060, 0, 264, 262, 1732, 1762, 1785, 1839, 1850,
	1851, 1885, 1937, 1969, 2012, 2028, 2029, 2030, 2042, 0,
	888, 0, 683, 0, 688, 1217, 683, 292, 625, 626,
	713, 739, 587, 0, 328, 0, 1776, 332, 2019, 0,
	0, 0, 584, 322, 323, 324, 325, 326, 327, 0,
	0, 863, 0, 0, 318, 0, 286, 1841, 2041, 0,
	0, 0, 0, 0, 156, 999, 158, 1001, 162, 169,
	0, 0, 174, 175, 178, 179, 180, 181, 182, 0,
	186, 0, 188, 191, 0, 193, 194, 0, 197, 198,
	199, 0, 209, 210, 211, 1002, 1003, 1004, -2, 87,
	886, 1690, 1577, 0, 1584, 1597, 1608, 1347, 1348, 1349,
	1350, 0, 0, 0, 0, 0, 0, 1358, 1359, 0,
	1386, 2075, 2116, 2117, 0, 1367, 1368, 1369, 1370, 1371,
	1372, 96, 108, 109, 1630, 1631, 1632, 1633, 1634, 1635,
	1636, 0, 1638, 1639, 1640, 1548, 1334, 1267, 0, 2084,
	0, 2106, 2111, 2112, 2113, 2114, 2105, 0, 0, 1533,
	0, 1523, 0, 0, -2, -2, 0, 0, 1910, -2,
	2081, 2102, 2110, 2085, 2086, 2109, 2077, 2078, 2079, 2072,
	2073, 2074, 2076, 2088, 2090, 2101, 0, 2097, 2107, 2108,
	2017, 0, 0, 0, 2058, 110, 111, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1544, -2, -2, 1547, -2, 1550,
	-2, -2, -2, -2, 1555, 1556, -2, 1558, -2, -2,
	-2, -2, -2, -2, -2, 1535, 1536, 1537, 1538, 1527,
	1528, 1529, 1530, 1531, 1532, -2, -2, -2, 739, 814,
	0, 739, 0, 714, 761, 764, 767, 770, 717, 0,
	0, 60, 61, 0, 281, 282, 270, 272, 0, 276,
	0, 269, 1035, 0, 0, 0, 0, 1035, 1035, 1035,
	1035, 1035, 0, 1035, 0, 0, 0, 0, 0, 1035,
	0, 921, 1006, 1007, 1008, 1033, 1034, 1105, 0, 0,
	0, 641, 637, 638, 639, 640, 727, 0, 729, 732,
	564, 564, 787, 511, 0, 0, 0, 564, 0, 525,
	517, 0, 0, 0, 564, 0, 0, 734, 734, 0,
	567, 574, 564, 564, -2, 564, 564, 564, 0, 0,
	1047, 531, 532, 533, 517, 517, 536, 537, 538, 548,
	549, 575, 1714, 0, 0, 454, 454, 0, 454, 0,
	454, 454, 454, 643, 1880, 1783, 1856, 1841, 2041, 0,
	237, 1910, 242, 0, 1784, 1803, 0, 0, 1821, 0,
	-2, 0, 308, 739, 0, 0, 713, 0, 0, 0,
	0, 0, 454, 454, 454, 454, 454, 1104, 454, 454,
	454, 454, 454, 0, 0, 0, 454, 454, 454, 0,
	0, 779, 780, 775, 776, 777, 781, 782, 5, 6,
	19, 0, 0, 0, 0, 0, 0, 66, 65, 0,
	1691, 1709, 1643, 1644, 1645, 1696, 1647, 1700, 1700, 1700,
	1700, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684,
	1700, 1700, 0, 0, 1689, 1667, 1698, 1698, 1698, 1696,
	1693, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656,
	1657, 1658, 1659, 1660, 1661, 1703, 1703, 1706, 1706, 1703,
	0, 1573, 0, 0, 0, 0, 687, 0, 0, 0,
	739, -2, 0, 0, 588, 329, 1271, 0, 0, 333,
	0, 334, 0, 0, 0, 353, 0, 356, 341, 342,
	343, 337, 0, 136, 0, 320, 321, 0, 0, 288,
	0, 0, 0, 455, 0, 0, 0, 0, 0, 0,
	166, 163, 170, 173, 183, 190, 0, 202, 204, 207,
	164, 171, 176, 177, 184, 205, 165, 167, 168, 172,
	206, 208, 185, 189, 203, 187, 192, 195, 196, 201,
	0, 137, 0, 0, 0, 0, 0, 1583, 0, 0,
	1616, 1617, 1618, 1619, 1620, 1621, 1622, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 1577, 0, 0, 1353,
	1354, 1355, 1356, 0, 1360, 0, 1387, 0, 0, 0,
	0, 0, 1637, 1641, 0, 1573, 1573, 0, 1573, 1569,
	0, 0, 0, 0, 0, 0, 1573, 1509, 0, 0,
	1511, 1524, 0, 0, 1513, 1514, 0, 1517, 1518, 1573,
	0, 1573, 1522, 1505, 1506, 0, 1569, 1569, 1569, 1569,
	0, 0, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
	1569, 1569, 1569, 1569, 0, 0, 0, 0, 734, 0,
	740, 0, -2, 0, 758, 760, 762, 763, 765, 766,
	768, 769, 771, 772, 719, 0, 0, 62, 0, 0,
	0, 0, 274, 0, 279, 0, 0, 0, 885, 0,
	0, 1035, 1035, 1035, 922, 0, 0, 0, 0, 0,
	0, 0, 0, 1035, 1035, 1035, 1035, 0, 1053, 0,
	0, 0, 643, 642, 0, 728, 0, 0, 787, 0,
	0, 509, 510, 0, 0, 517, 564, 564, 523, 524,
	519, 518, 570, 571, 567, 0, 567, 567, 787, 0,
	542, 543, 544, 564, 564, 550, 735, 0, 551, 552,
	567, 0, 572, 573, 787, 0, 0, 787, 787, 0,
	560, 561, 562, 564, 0, 0, 1035, 0, 580, 519,
	519, 1715, 1716, 0, 0, 1044, 0, 0, 0, 583,
	0, 0, 0, 0, 644, 217, 220, 0, 223, 0,
	1880, 0, 1880, 0, 230, 0, 0, 0, 0, 0,
	0, 260, 261, 0, 0, 0, 0, 251, 254, 1211,
	1212, 996, 997, 255, 256, 300, 301, 0, 734, 757,
	759, 753, 754, 755, 0, 0, 0, 0, 0, 0,
	0, 0, 454, 0, 0, 0, 0, 0, 619, 0,
	901, 621, 0, 0, 0, 0, 795, 789, 791, 858,
	96, 795, 8, 83, 80, 0, 19, 0, 0, 19,
	19, 0, 19, 265, 0, 1712, 1710, 1711, 1646, 1697,
	0, 1672, 0, 1673, 1674, 1675, 1685, 1686, 0, 0,
	1668, 0, 1669, 1670, 1671, 1662, 0, 1663, 1664, 0,
	1665, 1666, 263, 0, 1574, 889, 0, 661, 675, 656,
	0, 664, 0, 1218, 0, 645, 675, 647, 0, 664,
	734, 711, 0, 689, 0, 0, 330, 0, 338, 335,
	0, 339, 0, 0, 355, 357, 358, 359, 344, 345,
	585, 316, 317, 309, 310, 311, 312, 313, 314, 315,
	319, 106, 0, 289, 290, 0, 0, 0, 150, 151,
	152, 153, 154, 155, 157, 141, 608, 610, 988, 1000,
	0, 991, 0, 160, 200, 133, 0, 0, 0, 1578,
	1579, 1580, 1581, 1582, 1587, 0, 1589, 1591, 1593, 1595,
	0, 1613, -2, -2, 1335, 1336, 1337, 1338, 1339, 1340,
	1341, 1342, 1343, 1344, 1345, 1346, 1598, 1611, 1612, 0,
	0, 0, 0, 0, 0, 1609, 1609, 1604, 0, 1351,
	0, 0, 1384, 1388, 0, 0, 0, 0, 0, 97,
	1568, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484,
	1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494,
	1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	0, 0, 1577, 0, 0, 0, 1570, 1571, 0, 0,
	0, 1464, 0, 0, 1470, 1471, 1472, 0, 670, 0,
	1534, 1510, 1525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 813, 815, 0, 679, 681,
	682, 708, 689, 715, 0, 0, 0, 58, 63, 0,
	1072, 283, 284, 0, 0, 278, 0, 0, 0, -2,
	0, 0, 0, 0, 0, 936, 452, 982, 0, 0,
	0, 998, 1023, 1031, 0, 0, 0, 0, 0, 1078,
	923, 928, 929, 930, 924, 925, 931, 932, 0, 730,
	0, 0, 827, 508, 565, 566, 788, 514, 1841, 519,
	787, 787, 526, 520, 527, 569, 528, 529, 530, 567,
	787, 787, 736, 564, 567, 553, 568, 567, 556, 557,
	0, 563, 576, 581, 577, 0, 579, 534, 535, 1080,
	732, 371, 372, 373, 375, 0, 423, 423, 423, 406,
	423, 0, 0, 394, 1717, 0, 0, 0, 0, 403,
	1717, 0, 0, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
	0, 0, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
	1717, 1717, 1717, 0, 1717, 1717, 1717, 1717, 1717, 1197,
	1717, 0, 1045, 413, 414, 415, 416, 421, 422, 0,
	449, 0, 0, 0, 452, 0, 970, 800, 0, 801,
	802, 798, 829, 853, 853, 0, 853, 833, 1217, 0,
	0, 228, 229, 218, 0, 219, 0, 231, 232, 0,
	234, 235, 236, 243, 1783, 1856, 238, 240, 0, 0,
	244, 257, 258, 259, 0, 0, 249, 250, 0, 0,
	303, 304, 306, 0, 689, 1048, 1049, 1050, 605, 1215,
	606, 607, 611, 0, 0, 614, 615, 616, 617, 618,
	903, 0, 0, 975, 976, 977, 787, 0, 796, 0,
	792, 859, 0, 861, 0, 787, 0, 81, 19, 0,
	74, 71, 0, 0, 0, 0, 0, 1692, 1642, 1713,
	0, 0, 0, 1694, 0, 0, 0, 0, 64, 691,
	652, 0, 655, 672, 0, 676, 0, 0, 668, 660,
	665, 0, 0, 685, 0, 0, 646, 0, 0, 651,
	689, 0, 712, 741, 742, 745, 1272, 0, 340, 336,
	354, 0, 0, 0, 0, 144, 985, 0, 145, 149,
	139, 0, 0, 0, 990, 0, 987, 992, 0, 159,
	0, 0, 134, 135, 1063, 1072, 0, 0, 0, 1588,
	1590, 1592, 1594, 1596, 0, 1599, 1609, 1609, 1605, 0,
	1600, 0, 1602, 0, 1578, 1357, 0, 1389, 0, 0,
	0, 0, 0, 0, 0, 0, 1454, 1455, 0, 0,
	1459, 0, 1461, 1462, 1463, 1465, 0, 0, 0, 1469,
	0, 1508, 1526, 1512, 1515, 0, 1519, 0, 1521, 0,
	739, 739, 0, 0, 1428, 1428, 1428, 0, 0, 0,
	0, 1428, 0, 0, 0, 0, 0, 0, 0, 0,
	1373, 0, 1374, 1375, 0, 0, 0, 816, 709, 0,
	0, 0, 0, 0, 1070, 0, 285, 273, 275, 0,
	0, 1036, 0, 0, 891, 892, 894, 0, 897, 898,
	899, 903, 732, 0, 732, 943, 1717, 456, 0, 0,
	984, 0, 959, 0, 0, 0, -2, 0, 0, 0,
	0, 0, 0, 1082, 0, 0, 0, 630, 634, 23,
	733, 0, 512, 0, 513, 564, 521, 522, 787, 545,
	546, 0, 0, 787, 564, 564, 567, 0, 578, 1082,
	0, 0, 1044, 1148, 1116, 384, 0, 1228, 1229, 424,
	0, 1235, 1244, 1035, 1304, 0, 1244, 0, 0, 1246,
	1247, 0, 0, 0, 0, 407, 408, 0, 393, 0,
	0, 0, 0, 0, 0, 392, 0, 0, 434, 0,
	0, 0, 0, 0, 1718, 1717, 1717, 0, 401, 402,
	0, 405, 0, 0, 0, 0, 0, 0, 0, 0,
	1717, 1717, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1188, 0, 0, 0, 0, 0, 0,
	0, 1203, 1204, 943, 1717, 0, 0, 0, 456, 957,
	966, 0, 0, 0, 0, 0, 0, 820, 0, 0,
	819, 0, 0, 0, 0, 0, 732, 854, 0, 856,
	857, 831, -2, 0, 800, 836, 1573, 221, 222, 0,
	0, 227, 245, 247, 0, 0, 0, 246, 248, 252,
	253, 302, 305, 307, 751, 0, 0, 1106, 0, 904,
	905, 907, 908, 0, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1767, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 902,
	622, 785, 790, 797, 860, 862, 97, 793, 785, 0,
	84, 19, 83, 75, 76, 0, 19, 0, 0, 0,
	0, 1702, 1701, 1687, 0, 1688, 1699, 1704, 0, 1707,
	0, 695, 0, 0, 675, 677, 0, 0, 675, 0,
	0, 684, 0, 0, 1219, 0, 675, 751, 691, 0,
	748, 746, 747, 0, 0, 586, 107, 360, 0, 0,
	0, 0, 0, 609, 0, 989, 141, 0, 0, 161,
	0, 0, 0, 1072, 1067, 1572, 1601, 1603, 0, 1610,
	1606, 1352, 1361, 1385, 0, 0, 1391, 1403, 1403, 0,
	0, 0, 1394, 1700, 1700, 1397, 1696, 1698, 1696, 1403,
	1403, 0, 98, 0, 0, 1460, 0, 0, 0, 671,
	0, 0, 0, 1424, 1426, 1428, 1428, 1435, 1429, 1436,
	1437, 1428, 1428, 1428, 1428, 1442, 1428, 1428, 1428, 1428,
	1428, 1428, 1428, 1428, 1422, 0, 0, 1631, 1632, 680,
	0, 0, 722, 723, 724, 725, 726, 0, 0, 53,
	54, 1072, 0, 277, 55, 56, 0, 0, 0, 896,
	0, 0, 0, 1221, 0, 947, 944, 945, 946, 0,
	979, 457, 458, 459, 460, 0, 0, 0, 983, 0,
	970, 952, 0, 0, 0, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, -2, 1039, 0, 0, 0, 1221, 1058, 0,
	1221, 1221, 0, 1090, 0, 1079, 683, 0, -2, 0,
	0, 632, 0, 0, 828, 515, 787, 539, 737, 738,
	554, 787, 787, 564, 582, 1090, 1081, 0, 374, 423,
	0, 1136, 0, 0, 1142, 0, 1149, 377, 0, 425,
	0, 1234, 1261, 1245, 1261, 1305, 1261, 1261, 1035, 0,
	425, 0, 0, 395, 431, 0, 0, 0, 0, 0,
	391, 428, 745, 378, 380, 381, 382, 432, 433, 435,
	0, 437, 438, 397, 409, 410, 411, 412, 0, 0,
	0, 404, 417, 418, 419, 420, 379, 1165, 1166, 1167,
	1170, 1171, 1172, 1173, 0, 0, 1176, 1177, 1178, 1179,
	1180, 1258, 1259, 1260, 1181, 1182, 1183, 1184, 1185, 1186,
	1187, 1205, 1206, 1207, 1208, 1209, 1210, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 0, 0, 1200, 0, 947,
	0, 0, 0, 0, 979, 959, 0, 969, 0, 971,
	972, 0, 0, 653, 787, 295, 0, 823, 817, 0,
	806, 821, 822, 809, 0, 811, 0, 807, 808, 787,
	799, 830, 855, 832, 835, 837, 838, 844, 0, 0,
	0, 0, 224, 225, 226, 233, 0, 476, 239, 707,
	0, 1216, 612, 613, 1107, 1108, 620, 0, 909, 783,
	0, 0, 783, 79, 82, 0, 77, 0, 0, 0,
	0, 69, 67, 1695, 0, 0, 697, 121, 0, 0,
	0, 673, 0, 678, 675, 659, 669, 658, 666, 667,
	686, 0, 675, 650, 649, 710, 695, 743, 744, 0,
	1273, 331, 0, 986, 141, 146, 147, 148, 142, 140,
	993, 0, 995, 0, 1065, 0, 0, 1607, 1390, 1362,
	1392, 1404, 1405, 1393, 0, 1364, 1365, 1395, 1396, 1398,
	1399, 1400, 1401, 1402, 1366, 1456, 0, 1458, 1466, 1467,
	0, 1516, 1520, 0, 0, 0, 0, 0, 1433, 1434,
	1438, 1439, 1440, 1441, 1443, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 739, 1423, 0, 0, 0, 0, 0, 0,
	0, 720, 0, 0, 0, 1071, 1073, 57, 884, 887,
	893, 895, 0, 0, 0, 1222, 1223, 1225, 1226, 1227,
	0, 920, 0, 0, 938, 939, 949, 0, 0, 0,
	462, 463, 0, 0, 0, 475, 471, 472, 473, 453,
	978, 966, 955, 0, 0, 965, 0, 1040, 1717, 1717,
	1717, 0, 0, 1150, 1717, 1717, 0, 1060, 0, 0,
	1154, 1093, 0, 0, 1084, 0, 853, 0, 0, 787,
	631, 634, 635, 731, 516, 558, 555, 787, 1093, 370,
	1114, 0, 0, 0, 0, 0, 1146, 0, 0, 1118,
	0, 396, 426, 0, -2, 0, 1262, 0, 1248, 1262,
	0, 0, 1261, 0, 385, 425, 0, 0, 0, 439,
	443, 444, 0, 441, 1300, 0, 442, 0, 430, 0,
	436, 1168, 1169, 0, 1174, 1175, 0, 1199, 0, 0,
	445, 0, 0, 0, 446, 451, 952, 0, 967, 0,
	973, 974, 739, 0, 0, 803, 824, 0, 0, 804,
	0, 805, 810, 812, 294, 839, 0, 0, 841, 842,
	843, 834, 241, 752, 906, 0, 773, 0, 0, 794,
	774, 0, 19, 0, 0, 72, 1705, 1708, 699, 0,
	696, 122, 0, 0, 0, 0, 663, 674, 657, 1220,
	648, 697, 749, 750, 143, 138, 994, 1075, 0, 1066,
	0, 0, 1468, 0, 1428, 1425, 1428, 1427, 1419, 0,
	1376, 0, 1378, 1379, 1380, 0, 1382, 1383, 0, 718,
	0, 0, 926, 1154, 0, 926, 948, 937, 0, 980,
	981, 0, 464, 465, 0, 468, 474, 950, 951, 0,
	0, 963, 0, 0, 0, 0, 1032, 1046, 0, 0,
	0, -2, 0, -2, 1057, 0, 1099, 0, 1091, 0,
	1083, 0, 1086, 787, 787, -2, 628, 633, 0, 559,
	1099, 1116, 0, 1137, 0, 0, 0, 0, 0, 0,
	0, 1117, 0, 1130, 427, 1263, -2, 1276, 1278, 0,
	1045, 1281, 1282, 0, 0, 0, 0, 0, 0, 1326,
	1290, 0, 0, 1294, 1295, 1296, 0, 0, 1299, 0,
	1625, 1626, 0, 1303, 0, 0, 0, 0, 0, 0,
	0, 1242, 386, 387, 0, 389, 390, 1717, 1301, 429,
	383, 1717, 399, 1198, 1201, 1202, 450, 447, 448, 955,
	958, 654, 734, 296, 297, 825, 0, 818, 848, 845,
	0, 0, 910, 784, 786, 73, 78, 0, 0, 701,
	0, 698, 0, 692, 694, 132, 662, 699, 94, 124,
	0, 0, 1363, 1457, 1507, 1431, 1432, 0, 1420, 0,
	1414, 1415, 1416, 1421, 0, 0, 721, 716, 0, 912,
	919, 933, 1051, 1224, 918, 0, 0, 461, 466, 0,
	469, 470, 0, 953, 954, 0, 961, 0, 0, 1019,
	1696, 0, 1041, 1042, 1213, 1214, 1043, 1151, 1152, 1153,
	1109, 1059, 0, -2, 1162, 0, 1055, 1075, 1109, 0,
	1087, 0, 1094, 0, 1092, 1085, 739, 629, 1096, 376,
	1148, 1138, 0, 1140, 0, 0, 0, 0, 1119, -2,
	0, 1277, 1279, 1280, 1283, 1284, 1285, 1331, 1332, 1333,
	0, 0, 1288, 1328, 1329, 1330, 1289, 0, 0, 0,
	0, 0, 1623, 1624, 1324, 0, 0, 1249, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1250, 0, 0, 0, 1241,
	1243, 388, 0, 0, 1717, 968, 293, 0, 0, 849,
	851, 846, 847, 68, 70, 85, 0, 700, 123, 0,
	701, 86, 0, 115, 0, 1076, 0, 1430, 1417, 0,
	0, 0, 0, 0, 1627, 1628, 1629, 0, 1377, 1381,
	0, 0, 934, 935, 940, 0, 942, 467, 956, 960,
	963, 0, 1010, 0, 745, 0, 1111, 0, 1061, 1044,
	1164, 1717, 1062, 1111, 0, 1156, 1717, 1717, 1077, 0,
	1089, 0, 1101, 0, 1095, 734, 369, 0, 1098, 1134,
	1139, 1141, 1143, 0, 1147, 1145, 1120, -2, 0, 1128,
	0, 0, 1286, 1287, 0, 0, 1523, 1717, 0, 1319,
	0, 1010, 1010, 1010, 1010, 0, 440, 398, 0, 826,
	840, 0, 0, 0, 690, 95, 112, 0, 125, 126,
	0, 0, 0, 0, 1068, 0, 1406, 0, 0, 0,
	1410, 1411, 1412, 1413, 0, 911, 0, 941, 962, 964,
	1009, 1020, 1021, 745, 1054, 0, 1148, 1163, 0, 1056,
	1155, 0, 0, 0, 1088, 1100, 0, 1103, 627, 1097,
	1115, 0, 1144, 1121, 1129, 0, 1124, 0, 0, 0,
	1327, 0, 1293, 0, 1298, 1307, 1320, 0, 0, 1230,
	0, 1232, 0, 1236, 0, 1238, 0, 0, 400, 850,
	852, 0, 703, 693, 99, 0, 121, 118, 0, 127,
	0, 0, 0, 0, 1064, 0, 0, 1407, 1408, 1409,
	0, 913, 914, 927, 1011, 1717, 1717, 0, 0, 0,
	1017, 1018, 1022, 0, 1136, 1168, 1157, 1158, 1159, 1102,
	1135, 1123, 0, -2, 1131, 0, 0, 1575, 1585, 1586,
	1291, 1297, 1306, 1308, 1309, 0, 1321, 1322, 1323, 1325,
	1010, 1010, 1010, 1010, 1240, 702, 0, 88, 0, 0,
	116, 117, 119, 0, 128, 0, 130, 131, 0, 1418,
	915, 0, 0, 1014, 1015, 0, 1112, 0, 1114, 1125,
	-2, 0, 1133, 0, 1292, 1310, 0, 1311, 0, 0,
	0, 1231, 1233, 1237, 1239, 704, 1074, 0, 100, 0,
	102, 104, 105, 1264, 113, 114, 120, 129, 0, 900,
	916, 0, 1012, 1013, 1016, 0, 1116, 1132, 1576, 1312,
	1314, 1315, 0, 0, 1313, 89, 90, 0, 101, 0,
	0, 1069, 917, 1113, 1110, 1316, 1318, 1317, 0, 0,
	103, 1265, 91, 92, 93, 0, 1266,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 115, 3, 3, 3, 146, 138, 3,
	82, 83, 143, 141, 156, 142, 155, 144, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 627, 624,
	125, 124, 126, 3, 628, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 148, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 625, 137, 626, 149,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 116, 117, 118, 119, 120, 121, 122, 123, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 139,
	140, 145, 147, 150, 151, 152, 153, 154, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:800
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:807
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:813
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:821
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:827
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:831
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:846
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:850
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:856
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:861
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:865
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:897
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:905
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp:   yyDollar[2].str,
				IsS3:        false,
				Dir:         yyDollar[4].str,
				Parallelism: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:914
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp: yyDollar[2].str,
				IsS3:      true,
				Option:    yyDollar[5].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:924
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Obeject:     yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:934
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:944
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:957
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:977
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:983
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:990
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:998
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1004
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1013
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1023
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1031
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1039
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1047
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1057
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1065
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1075
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1082
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1091
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1101
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1105
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1111
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1115
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1121
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1130
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1140
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1144
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1150
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1159
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1163
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1169
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1190
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1203
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1210
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1214
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1220
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1224
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1230
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1237
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1245
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1249
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1263
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1267
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1271
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1276
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1280
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1284
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1290
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1299
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1310
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1314
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1320
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1324
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1330
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1334
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1340
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1364
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1383
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1387
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1391
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1396
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1400
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1409
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1419
		{
			yyVAL.str = ""
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1426
		{
			yyVAL.str = yyDollar[3].str
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1431
		{
			yyVAL.str = "\n"
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1438
		{
			yyVAL.str = yyDollar[3].str
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1443
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1447
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1475
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1479
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1485
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1493
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1513
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1532
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1557
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1561
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1565
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1570
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1574
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1580
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1593
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1604
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1617
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1621
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1631
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1644
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1657
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1663
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1669
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1676
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1684
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1693
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1697
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1701
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1705
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1709
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1713
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1720
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1724
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1730
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1737
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1746
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1750
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1756
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1760
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1764
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1768
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1772
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1776
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1780
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1784
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1788
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1792
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1796
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1800
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1804
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1808
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1812
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1816
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1820
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1824
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1828
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1832
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1836
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1840
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1844
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1848
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1852
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1856
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1860
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1864
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1868
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1872
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1876
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1880
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1884
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1888
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1892
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1896
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1900
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1904
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1908
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1912
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1916
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1920
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1924
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1928
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1932
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1936
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1940
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1944
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1948
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1952
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1965
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1972
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1979
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1989
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1993
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:1999
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2006
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2014
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2018
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2022
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2026
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2032
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2036
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2042
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2049
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2056
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2065
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2095
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2099
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2103
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2109
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2115
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2119
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2126
		{
			yyVAL.str = yyDollar[3].str
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2132
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2136
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2142
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2150
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2159
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2168
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2176
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2184
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2207
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2230
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2237
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2244
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2252
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2259
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2266
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2275
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2279
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2283
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2289
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2293
		{
			yyVAL.str = yyDollar[1].str
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2299
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2303
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2309
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2313
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2324
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2330
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2335
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2339
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2343
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2347
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2351
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2355
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2359
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2363
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2367
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2373
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2377
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2381
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2385
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2390
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2395
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2401
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2414
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2427
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2440
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2453
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2469
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2476
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2487
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2498
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2502
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2508
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2518
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2524
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2528
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2534
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2540
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2544
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2548
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2552
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2558
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2570
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2576
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2580
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2586
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2590
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2596
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2602
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2613
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2619
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2623
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2627
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2631
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2635
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2639
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2647
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2655
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2665
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2677
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2681
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2689
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2697
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2736
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2740
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2746
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2752
		{
			yyVAL.str = yyDollar[1].str
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2757
		{
			yyVAL.str = "true"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2758
		{
			yyVAL.str = "false"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2759
		{
			yyVAL.str = yyDollar[1].str
		}
	case 360:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2764
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2781
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2804
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2814
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2821
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2830
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2834
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2840
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2844
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			partitionDef := &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2863
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2873
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2889
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2907
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2911
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2917
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2921
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2927
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2933
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2941
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2951
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2959
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2969
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr *tree.AttributeDefault
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2979
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr *tree.AttributeDefault
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2989
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2996
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3000
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3004
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3008
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3012
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3019
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3025
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3029
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3033
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3037
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3041
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3045
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3049
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3053
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3058
		{
			yyVAL.str = ""
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3089
		{
			yyVAL.str = ""
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3093
		{
			yyVAL.str = string("COLUMN")
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3098
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3104
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3110
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3118
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3122
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3128
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3136
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3143
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3149
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3155
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3161
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3167
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3174
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3181
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3189
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3195
		{
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = int64(yyDollar[6].item.(int64))
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3202
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3208
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3216
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3220
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3227
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3245
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3259
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3273
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3286
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3292
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3303
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3316
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3320
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3325
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3329
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3334
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3338
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3354
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3358
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3362
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3366
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3370
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3374
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3378
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryDefault{}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3382
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryCount{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3386
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalDefault{}
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3390
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalCount{Value: yyDollar[4].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3394
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentNone{}
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3398
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentDefault{}
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3402
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentOptional{}
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3406
		{
			yyLOCAL = &tree.UserMiscOptionFailedLoginAttempts{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3410
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeCount{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3414
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeUnbounded{}
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3420
		{
			yyVAL.item = nil
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3425
		{
			yyVAL.item = nil
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3467
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3476
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3484
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3492
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3496
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3500
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{tree.NewRole(yyDollar[5].cstrUnion().Compare())}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3509
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3513
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3519
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3524
		{
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3528
		{
		}
	case 521:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3533
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3543
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3553
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3561
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3567
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3573
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3579
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3585
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3591
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3597
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3606
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3610
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3614
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3618
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3622
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3626
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3630
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3634
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3640
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3649
		{
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3651
		{
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3660
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3670
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3679
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3683
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3687
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3693
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3699
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3705
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3711
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3720
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3730
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3742
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3746
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3752
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3764
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3778
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3784
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3791
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3795
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3800
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3804
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3808
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3813
		{
			yyVAL.str = ""
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3817
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3823
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3836
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3840
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3846
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3851
		{
			yyLOCAL = &tree.ShowCreateView{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3855
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3859
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3865
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3871
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3875
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3881
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3887
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3891
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3895
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3901
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3905
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3931
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3939
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3947
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3955
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3959
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3965
		{
			yyLOCAL = &tree.User{
				Username: yyDollar[1].usernameRecordUnion().Username,
				Hostname: yyDollar[1].usernameRecordUnion().Hostname,
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3974
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3982
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3991
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3997
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4005
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4013
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4021
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4027
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4035
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4041
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4049
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4055
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4065
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4070
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4077
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4093
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4106
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4117
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4121
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4127
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4132
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4139
		{
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4141
		{
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4144
		{
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4153
		{
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4157
		{
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4162
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4171
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4178
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4184
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4192
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4199
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4206
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4226
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4236
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4240
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4246
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4253
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4259
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4267
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4274
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4281
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4300
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4304
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4308
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4313
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4317
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4321
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4327
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4336
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4340
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4346
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4350
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4356
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4360
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4366
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4371
		{
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4375
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4382
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4386
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4393
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4398
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4402
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4408
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4412
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4418
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4422
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4427
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4431
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4444
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4455
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4466
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4488
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4511
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4519
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4528
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4532
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4545
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4549
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4554
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4558
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4565
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4570
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4577
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4583
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4587
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4591
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4595
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4599
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4603
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4608
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4612
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4618
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4628
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4643
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4647
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4661
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4665
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4671
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4680
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4684
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4688
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4692
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4696
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4702
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4709
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4718
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4722
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4728
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4736
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4740
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4745
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4749
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4755
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4759
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4763
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4768
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4772
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4778
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4784
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4788
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:4794
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4799
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4803
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4807
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4812
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4816
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4820
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4825
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4829
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4837
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4841
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4845
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4859
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4863
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4873
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4883
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4893
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4905
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4913
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4921
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4930
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4938
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4946
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4954
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4962
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4970
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4978
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4986
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4994
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5004
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5015
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5029
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5033
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5037
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5042
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5046
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5050
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5059
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5063
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5068
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5072
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5077
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5081
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5087
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5091
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5097
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5101
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5106
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5110
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5115
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5123
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5129
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5137
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5145
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5155
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5161
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5170
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5179
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5188
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5198
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5202
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5212
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5216
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5220
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5224
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 813:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5230
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5240
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5244
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5250
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5256
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5260
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5266
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5272
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5276
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5280
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5286
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5290
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5296
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5300
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5306
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5310
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5316
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5320
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5330
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5343
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5349
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5355
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:  tree.FuncName2ResolvableFunctionReference(name),
					Exprs: yyDollar[3].exprsUnion(),
					Type:  tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5368
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5379
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5386
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5390
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5396
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5406
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5410
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5414
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5419
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5423
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5427
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5431
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5436
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5440
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5444
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5448
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5452
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5457
		{
			yyVAL.str = ""
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5461
		{
			yyVAL.str = yyDollar[1].str
		}
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5465
		{
			yyVAL.str = yyDollar[2].str
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5471
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 858:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5477
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5481
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5485
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5489
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5493
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5499
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 884:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5539
		{
			yyLOCAL = &tree.CreateExtension{
				Language: yyDollar[3].str,
				Name:     tree.Identifier(yyDollar[5].str),
				Filename: tree.Identifier(yyDollar[7].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5549
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5555
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 887:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5561
		{
			yyLOCAL = &tree.CreateProcedure{
				Name: yyDollar[3].procNameUnion(),
				Args: yyDollar[5].procArgsUnion(),
				Body: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5571
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5576
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5582
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5589
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5593
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5599
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5605
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5610
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5614
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5618
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5622
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5629
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				return 1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				return 1
			}

			yyLOCAL = &tree.CreateFunction{
				Replace:    yyDollar[2].sourceOptionalUnion(),
				Name:       yyDollar[4].functionNameUnion(),
				Args:       yyDollar[6].funcArgsUnion(),
				ReturnType: yyDollar[9].funcReturnUnion(),
				Language:   yyDollar[11].str,
				Import:     yyDollar[12].boolValUnion(),
				Body:       yyDollar[13].str,
				Handler:    yyDollar[14].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5653
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5658
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5664
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5671
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5675
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5681
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5687
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5691
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5695
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5701
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5707
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5713
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5717
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5723
		{
			yyVAL.str = ""
		}
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5730
		{
			yyVAL.str = yyDollar[2].str
		}
	case 918:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5736
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5745
		{
			yyLOCAL = &tree.CreateView{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5757
		{
			yyLOCAL = &tree.CreateAccount{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         yyDollar[4].str,
				AuthOption:   yyDollar[5].accountAuthOptionUnion(),
				StatusOption: yyDollar[6].accountStatusUnion(),
				Comment:      yyDollar[7].accountCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5769
		{
			yyVAL.str = yyDollar[1].str
		}
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5773
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5779
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5783
		{
			yyVAL.str = "DEFINER = "
		}
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5787
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5792
		{
			yyVAL.str = ""
		}
	case 927:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:5796
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 933:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5810
		{
			yyVAL.str = ""
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5818
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 937:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:5824
		{
			yyLOCAL = tree.AccountAuthOption{
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5834
		{
			yyVAL.str = yyDollar[1].str
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5838
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 940:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5844
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5851
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5857
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5865
		{
			yyLOCAL = tree.AccountStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5871
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusOpen,
			}
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5878
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusSuspend,
			}
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5885
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusRestricted,
			}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5893
		{
			yyLOCAL = tree.AccountComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5899
		{
			yyLOCAL = tree.AccountComment{
				Exist:   true,
				Comment: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5908
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Users:              yyDollar[4].usersUnion(),
				Role:               yyDollar[5].accountRoleUnion(),
				MiscOpt:            yyDollar[6].userMiscOptionUnion(),
				CommentOrAttribute: yyDollar[7].accountCommentOrAttributeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5920
		{
			yyLOCAL = &tree.CreatePublication{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Database:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				AccountsSet: yyDollar[7].accountsSetOptionUnion(),
				Comment:     yyDollar[8].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5932
		{
			yyLOCAL = &tree.CreateStage{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Url:         yyDollar[5].str,
				Credentials: yyDollar[6].stageCredentialsUnion(),
				Status:      yyDollar[7].stageStatusUnion(),
				Comment:     yyDollar[8].stageCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5944
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5950
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5957
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5965
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5971
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5979
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5985
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:5993
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:5999
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6008
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6012
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6017
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6021
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6028
		{
			yyVAL.str = yyDollar[3].str
		}
	case 966:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6033
		{
			yyVAL.str = ""
		}
	case 967:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6037
		{
			yyVAL.str = yyDollar[2].str
		}
	case 968:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6043
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6056
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var comment = yyDollar[6].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, comment)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6065
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6069
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6075
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6081
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6087
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6096
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6104
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6112
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6120
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 979:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6125
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6131
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: true,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6139
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: false,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6245
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6249
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6255
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6265
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6269
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6275
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6285
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6289
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6293
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6298
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6302
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6308
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6315
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6321
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6330
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 998:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6337
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6346
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6350
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6356
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6370
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6374
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6378
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6383
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6387
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6391
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6395
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6401
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = &tree.IndexOption{IType: tree.INDEX_TYPE_INVALID}
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Table:       yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6422
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6426
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6452
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6456
		{
			yyLOCAL = &tree.IndexOption{AlgoParamList: int64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6460
		{
			yyLOCAL = &tree.IndexOption{AlgoParamVectorOpType: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6464
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6468
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6472
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6476
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6482
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6486
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6492
		{
			// Order is parsed but just ignored as MySQL dtree.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6497
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6502
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6506
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6510
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6514
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6518
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6522
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6526
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6532
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Name:               tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SubscriptionOption: yyDollar[5].subscriptionOptionUnion(),
				CreateOptions:      yyDollar[6].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6543
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6547
		{
			yyLOCAL = &tree.SubscriptionOption{From: tree.Identifier(yyDollar[2].str), Publication: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6557
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6561
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6566
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6570
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6576
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6580
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6586
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6590
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6594
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6599
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6603
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6609
		{
			yyLOCAL = &tree.CreateConnector{
				TableName: yyDollar[4].tableNameUnion(),
				Options:   yyDollar[7].connectorOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6618
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6624
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6642
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6660
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6678
		{
			yyLOCAL = &tree.CreateSource{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				SourceName:  yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Options:     yyDollar[9].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6689
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6693
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6699
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6711
		{
			yyLOCAL = &tree.CreateTable{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Param:       yyDollar[9].loadParamUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6720
		{
			yyLOCAL = &tree.CreateTable{
				IsClusterTable:  true,
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6732
		{
			yyLOCAL = &tree.CreateTable{
				IsDynamicTable: true,
				IfNotExists:    yyDollar[4].ifNotExistsUnion(),
				Table:          *yyDollar[5].tableNameUnion(),
				AsSource:       yyDollar[7].selectUnion(),
				DTOptions:      yyDollar[8].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6742
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				AsSource:    yyDollar[6].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6752
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				AsSource:    yyDollar[9].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6763
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				AsSource:    yyDollar[7].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6773
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				AsSource:    yyDollar[10].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6786
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6793
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6803
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6816
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6824
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6833
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6842
		{
			yyVAL.str = ""
		}
	case 1069:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6846
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6852
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6856
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6861
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6865
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:6872
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6884
		{
			yyVAL.str = ""
		}
	case 1076:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6888
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1077:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6894
		{
			yyLOCAL = &tree.CreateSequence{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        yyDollar[4].tableNameUnion(),
				Type:        yyDollar[5].columnTypeUnion(),
				IncrementBy: yyDollar[6].incrementByOptionUnion(),
				MinValue:    yyDollar[7].minValueOptionUnion(),
				MaxValue:    yyDollar[8].maxValueOptionUnion(),
				StartWith:   yyDollar[9].startWithOptionUnion(),
				Cycle:       yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6907
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6921
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6925
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6929
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6935
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6939
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6946
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6953
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6960
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6967
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6971
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6975
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6979
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6983
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6990
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6997
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7001
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7008
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7015
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7019
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7025
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7031
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7035
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7042
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7049
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7056
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7063
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7067
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7072
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7076
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7080
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7085
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7089
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7099
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7103
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()},
			}

		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7110
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: yyDollar[4].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7117
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7121
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7130
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7134
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7140
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7144
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7150
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7159
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7169
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7173
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7179
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7183
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7189
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7196
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7205
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7209
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7214
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7218
		{
			expr := tree.NewMaxValue()
			yyLOCAL = &tree.ValuesLessThan{ValueList: tree.Exprs{expr}}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7223
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7227
		{
			yyLOCAL = &tree.ValuesIn{ValueList: yyDollar[4].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7232
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7236
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7246
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7250
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7261
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7269
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7277
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7285
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7296
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:    yyDollar[1].boolValUnion(),
					Algorithm: yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7305
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7315
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7325
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7329
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7334
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7338
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7344
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7348
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7354
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7358
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7363
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7367
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7373
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7377
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7383
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7387
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7392
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7396
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7402
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7406
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7410
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7416
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7420
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7424
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7428
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7432
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7436
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7440
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7445
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7449
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7453
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7457
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7461
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7465
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7469
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7473
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7477
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7481
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7485
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7489
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7493
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7497
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7501
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7505
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7509
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7513
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7517
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7521
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7525
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7529
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7533
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7537
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7541
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7545
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7549
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7553
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7559
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7563
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:7569
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7575
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7579
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7585
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7589
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7593
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7597
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7601
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7605
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7619
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7623
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7632
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7637
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7642
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			atType := tree.ATTIMESTAMPNONE
			if yyDollar[3].str != "" {
				t := strings.ToLower(yyDollar[3].str)
				switch t {
				case "timestamp":
					atType = tree.ATTIMESTAMPTIME
				case "snapshot":
					atType = tree.ATTIMESTAMPSNAPSHOT
				default:
					yylex.Error("Invalid the type of at timestamp")
					return 1
				}
			}
			atTs := &tree.AtTimeStampClause{
				TimeStampExpr: &tree.TimeStampExpr{
					Type: atType,
					Expr: yyDollar[5].str,
				},
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7666
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			atType := tree.ATTIMESTAMPNONE
			if yyDollar[5].str != "" {
				t := strings.ToLower(yyDollar[5].str)
				switch t {
				case "timestamp":
					atType = tree.ATTIMESTAMPTIME
				case "snapshot":
					atType = tree.ATTIMESTAMPSNAPSHOT
				default:
					yylex.Error("Invalid the type of at timestamp")
					return 1
				}
			}
			atTs := &tree.AtTimeStampClause{
				TimeStampExpr: &tree.TimeStampExpr{
					Type: atType,
					Expr: yyDollar[7].str,
				},
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7691
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7698
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7702
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7708
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7712
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7716
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7722
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7726
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7732
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7741
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7750
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7783
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7818
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7832
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7838
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7847
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7856
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7865
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7874
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7884
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7892
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7898
		{
			yyVAL.str = ""
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7902
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7912
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7918
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7924
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7945
		{
			yyVAL.str = ""
		}
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7949
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:7955
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7961
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7965
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7969
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7975
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7979
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7983
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7987
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7993
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7997
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8001
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8006
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8010
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8016
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8020
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8026
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8030
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8034
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8038
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8042
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8046
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8051
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8055
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8059
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8063
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8067
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8071
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8075
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8079
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8083
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8087
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8100
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8104
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8108
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8112
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8116
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8120
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8126
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8130
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8135
		{
			yyVAL.str = ""
		}
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8139
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8145
		{
			yyVAL.str = ""
		}
	case 1305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8149
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1306:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8155
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8167
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8174
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8181
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8188
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8195
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8204
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8210
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8216
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8220
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8224
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8228
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8232
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8237
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8244
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8248
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8252
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8257
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8261
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8266
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8270
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8286
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8292
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8296
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8300
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8304
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8308
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8312
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8316
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8320
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8324
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8328
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8332
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8336
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8340
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8346
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8350
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8354
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8358
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8362
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8366
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8370
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8374
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8378
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8382
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8424
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8428
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8432
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8437
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8445
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8449
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8453
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8457
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8461
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8470
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8474
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8478
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8482
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8486
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8490
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8496
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8504
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8512
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8522
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8532
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8542
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8551
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8561
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8571
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8581
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8590
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8600
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8604
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8609
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8613
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8619
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8623
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:8629
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8638
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8650
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8667
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8684
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8697
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8710
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8722
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8736
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8751
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8766
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8783
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8798
		{
		}
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8805
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8809
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8813
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8819
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8823
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8827
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8831
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8837
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8841
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8845
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8851
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8859
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8869
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8873
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8880
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8885
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8889
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8894
		{
			yyVAL.str = ","
		}
	case 1425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8898
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8903
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8907
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1428:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8912
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8919
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8945
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8956
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8967
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8977
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8987
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8997
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9006
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9015
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9025
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9035
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9045
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9055
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9065
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9075
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9085
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9095
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9105
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9115
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9125
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9135
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9154
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9162
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9170
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9178
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9186
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9196
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9204
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9213
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9221
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9229
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9237
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9245
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9256
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9266
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9278
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9289
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9311
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1505:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9347
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9359
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9371
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9382
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9390
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9397
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9404
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9416
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9424
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9434
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9444
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9452
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9463
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9472
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9481
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9489
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9499
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9507
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9517
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9521
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9527
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9531
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9550
		{
		}
	case 1534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9552
		{
		}
	case 1568:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9593
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9604
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9608
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9612
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:9618
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9623
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9627
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9633
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9637
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9643
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9647
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9654
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9658
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9662
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9670
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9674
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9678
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9683
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9687
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9693
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9697
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9701
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9705
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9709
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9713
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9717
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9721
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9725
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9729
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9737
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9741
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9745
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9749
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9753
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9757
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9761
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9765
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9769
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9773
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9779
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9783
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9789
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9793
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9800
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9804
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9808
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9814
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9818
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9822
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9826
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9830
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9834
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9838
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9844
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9848
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9852
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9856
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9862
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9875
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9880
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9886
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9890
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9903
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9908
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9912
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9916
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9920
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9924
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9931
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9935
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9939
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9943
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9950
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9961
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9966
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9972
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9984
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9996
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10008
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10021
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10034
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10047
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10060
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10073
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10086
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10099
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10112
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10125
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10138
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10153
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10180
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10222
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10258
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10294
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10311
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10323
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10343
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10363
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10383
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10399
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10412
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10425
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10438
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10451
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10463
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10475
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10487
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10499
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10511
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10523
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10535
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10547
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10559
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10572
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10585
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10598
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10611
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10626
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10634
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10643
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10653
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10676
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10681
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10687
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10694
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10698
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10703
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10707
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10713
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10719
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10726
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10733
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10742
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10749
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10756
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10765
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10769
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10773
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10779
		{
		}
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10781
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10791
		{
			yyVAL.str = ""
		}
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10795
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
