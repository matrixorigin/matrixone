// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const ENUM = 57531
const UUID = 57532
const VECF32 = 57533
const VECF64 = 57534
const GEOMETRY = 57535
const POINT = 57536
const LINESTRING = 57537
const POLYGON = 57538
const GEOMETRYCOLLECTION = 57539
const MULTIPOINT = 57540
const MULTILINESTRING = 57541
const MULTIPOLYGON = 57542
const INT1 = 57543
const INT2 = 57544
const INT3 = 57545
const INT4 = 57546
const INT8 = 57547
const S3OPTION = 57548
const STAGEOPTION = 57549
const SQL_SMALL_RESULT = 57550
const SQL_BIG_RESULT = 57551
const SQL_BUFFER_RESULT = 57552
const LOW_PRIORITY = 57553
const HIGH_PRIORITY = 57554
const DELAYED = 57555
const CREATE = 57556
const ALTER = 57557
const DROP = 57558
const RENAME = 57559
const ANALYZE = 57560
const ADD = 57561
const RETURNS = 57562
const SCHEMA = 57563
const TABLE = 57564
const SEQUENCE = 57565
const INDEX = 57566
const VIEW = 57567
const TO = 57568
const IGNORE = 57569
const IF = 57570
const PRIMARY = 57571
const COLUMN = 57572
const CONSTRAINT = 57573
const SPATIAL = 57574
const FULLTEXT = 57575
const FOREIGN = 57576
const KEY_BLOCK_SIZE = 57577
const SHOW = 57578
const DESCRIBE = 57579
const EXPLAIN = 57580
const DATE = 57581
const ESCAPE = 57582
const REPAIR = 57583
const OPTIMIZE = 57584
const TRUNCATE = 57585
const MAXVALUE = 57586
const PARTITION = 57587
const REORGANIZE = 57588
const LESS = 57589
const THAN = 57590
const PROCEDURE = 57591
const TRIGGER = 57592
const STATUS = 57593
const VARIABLES = 57594
const ROLE = 57595
const PROXY = 57596
const AVG_ROW_LENGTH = 57597
const STORAGE = 57598
const DISK = 57599
const MEMORY = 57600
const CHECKSUM = 57601
const COMPRESSION = 57602
const DATA = 57603
const DIRECTORY = 57604
const DELAY_KEY_WRITE = 57605
const ENCRYPTION = 57606
const ENGINE = 57607
const MAX_ROWS = 57608
const MIN_ROWS = 57609
const PACK_KEYS = 57610
const ROW_FORMAT = 57611
const STATS_AUTO_RECALC = 57612
const STATS_PERSISTENT = 57613
const STATS_SAMPLE_PAGES = 57614
const DYNAMIC = 57615
const COMPRESSED = 57616
const REDUNDANT = 57617
const COMPACT = 57618
const FIXED = 57619
const COLUMN_FORMAT = 57620
const AUTO_RANDOM = 57621
const ENGINE_ATTRIBUTE = 57622
const SECONDARY_ENGINE_ATTRIBUTE = 57623
const INSERT_METHOD = 57624
const RESTRICT = 57625
const CASCADE = 57626
const ACTION = 57627
const PARTIAL = 57628
const SIMPLE = 57629
const CHECK = 57630
const ENFORCED = 57631
const RANGE = 57632
const LIST = 57633
const ALGORITHM = 57634
const LINEAR = 57635
const PARTITIONS = 57636
const SUBPARTITION = 57637
const SUBPARTITIONS = 57638
const CLUSTER = 57639
const TYPE = 57640
const ANY = 57641
const SOME = 57642
const EXTERNAL = 57643
const LOCALFILE = 57644
const URL = 57645
const PREPARE = 57646
const DEALLOCATE = 57647
const RESET = 57648
const EXTENSION = 57649
const INCREMENT = 57650
const CYCLE = 57651
const MINVALUE = 57652
const PUBLICATION = 57653
const SUBSCRIPTIONS = 57654
const PUBLICATIONS = 57655
const PROPERTIES = 57656
const PARSER = 57657
const VISIBLE = 57658
const INVISIBLE = 57659
const BTREE = 57660
const HASH = 57661
const RTREE = 57662
const BSI = 57663
const IVFFLAT = 57664
const MASTER = 57665
const ZONEMAP = 57666
const LEADING = 57667
const BOTH = 57668
const TRAILING = 57669
const UNKNOWN = 57670
const LISTS = 57671
const OP_TYPE = 57672
const REINDEX = 57673
const EXPIRE = 57674
const ACCOUNT = 57675
const ACCOUNTS = 57676
const UNLOCK = 57677
const DAY = 57678
const NEVER = 57679
const PUMP = 57680
const MYSQL_COMPATIBILITY_MODE = 57681
const UNIQUE_CHECK_ON_AUTOINCR = 57682
const MODIFY = 57683
const CHANGE = 57684
const SECOND = 57685
const ASCII = 57686
const COALESCE = 57687
const COLLATION = 57688
const HOUR = 57689
const MICROSECOND = 57690
const MINUTE = 57691
const MONTH = 57692
const QUARTER = 57693
const REPEAT = 57694
const REVERSE = 57695
const ROW_COUNT = 57696
const WEEK = 57697
const REVOKE = 57698
const FUNCTION = 57699
const PRIVILEGES = 57700
const TABLESPACE = 57701
const EXECUTE = 57702
const SUPER = 57703
const GRANT = 57704
const OPTION = 57705
const REFERENCES = 57706
const REPLICATION = 57707
const SLAVE = 57708
const CLIENT = 57709
const USAGE = 57710
const RELOAD = 57711
const FILE = 57712
const TEMPORARY = 57713
const ROUTINE = 57714
const EVENT = 57715
const SHUTDOWN = 57716
const NULLX = 57717
const AUTO_INCREMENT = 57718
const APPROXNUM = 57719
const SIGNED = 57720
const UNSIGNED = 57721
const ZEROFILL = 57722
const ENGINES = 57723
const LOW_CARDINALITY = 57724
const AUTOEXTEND_SIZE = 57725
const ADMIN_NAME = 57726
const RANDOM = 57727
const SUSPEND = 57728
const ATTRIBUTE = 57729
const HISTORY = 57730
const REUSE = 57731
const CURRENT = 57732
const OPTIONAL = 57733
const FAILED_LOGIN_ATTEMPTS = 57734
const PASSWORD_LOCK_TIME = 57735
const UNBOUNDED = 57736
const SECONDARY = 57737
const RESTRICTED = 57738
const USER = 57739
const IDENTIFIED = 57740
const CIPHER = 57741
const ISSUER = 57742
const X509 = 57743
const SUBJECT = 57744
const SAN = 57745
const REQUIRE = 57746
const SSL = 57747
const NONE = 57748
const PASSWORD = 57749
const SHARED = 57750
const EXCLUSIVE = 57751
const MAX_QUERIES_PER_HOUR = 57752
const MAX_UPDATES_PER_HOUR = 57753
const MAX_CONNECTIONS_PER_HOUR = 57754
const MAX_USER_CONNECTIONS = 57755
const FORMAT = 57756
const VERBOSE = 57757
const CONNECTION = 57758
const TRIGGERS = 57759
const PROFILES = 57760
const LOAD = 57761
const INLINE = 57762
const INFILE = 57763
const TERMINATED = 57764
const OPTIONALLY = 57765
const ENCLOSED = 57766
const ESCAPED = 57767
const STARTING = 57768
const LINES = 57769
const ROWS = 57770
const IMPORT = 57771
const DISCARD = 57772
const JSONTYPE = 57773
const MODUMP = 57774
const OVER = 57775
const PRECEDING = 57776
const FOLLOWING = 57777
const GROUPS = 57778
const DATABASES = 57779
const TABLES = 57780
const SEQUENCES = 57781
const EXTENDED = 57782
const FULL = 57783
const PROCESSLIST = 57784
const FIELDS = 57785
const COLUMNS = 57786
const OPEN = 57787
const ERRORS = 57788
const WARNINGS = 57789
const INDEXES = 57790
const SCHEMAS = 57791
const NODE = 57792
const LOCKS = 57793
const ROLES = 57794
const TABLE_NUMBER = 57795
const COLUMN_NUMBER = 57796
const TABLE_VALUES = 57797
const TABLE_SIZE = 57798
const NAMES = 57799
const GLOBAL = 57800
const PERSIST = 57801
const SESSION = 57802
const ISOLATION = 57803
const LEVEL = 57804
const READ = 57805
const WRITE = 57806
const ONLY = 57807
const REPEATABLE = 57808
const COMMITTED = 57809
const UNCOMMITTED = 57810
const SERIALIZABLE = 57811
const LOCAL = 57812
const EVENTS = 57813
const PLUGINS = 57814
const CURRENT_TIMESTAMP = 57815
const DATABASE = 57816
const CURRENT_TIME = 57817
const LOCALTIME = 57818
const LOCALTIMESTAMP = 57819
const UTC_DATE = 57820
const UTC_TIME = 57821
const UTC_TIMESTAMP = 57822
const REPLACE = 57823
const CONVERT = 57824
const SEPARATOR = 57825
const TIMESTAMPDIFF = 57826
const CURRENT_DATE = 57827
const CURRENT_USER = 57828
const CURRENT_ROLE = 57829
const SECOND_MICROSECOND = 57830
const MINUTE_MICROSECOND = 57831
const MINUTE_SECOND = 57832
const HOUR_MICROSECOND = 57833
const HOUR_SECOND = 57834
const HOUR_MINUTE = 57835
const DAY_MICROSECOND = 57836
const DAY_SECOND = 57837
const DAY_MINUTE = 57838
const DAY_HOUR = 57839
const YEAR_MONTH = 57840
const SQL_TSI_HOUR = 57841
const SQL_TSI_DAY = 57842
const SQL_TSI_WEEK = 57843
const SQL_TSI_MONTH = 57844
const SQL_TSI_QUARTER = 57845
const SQL_TSI_YEAR = 57846
const SQL_TSI_SECOND = 57847
const SQL_TSI_MINUTE = 57848
const RECURSIVE = 57849
const CONFIG = 57850
const DRAINER = 57851
const SOURCE = 57852
const STREAM = 57853
const HEADERS = 57854
const CONNECTOR = 57855
const CONNECTORS = 57856
const DAEMON = 57857
const PAUSE = 57858
const CANCEL = 57859
const TASK = 57860
const RESUME = 57861
const MATCH = 57862
const AGAINST = 57863
const BOOLEAN = 57864
const LANGUAGE = 57865
const WITH = 57866
const QUERY = 57867
const EXPANSION = 57868
const WITHOUT = 57869
const VALIDATION = 57870
const UPGRADE = 57871
const RETRY = 57872
const ADDDATE = 57873
const BIT_AND = 57874
const BIT_OR = 57875
const BIT_XOR = 57876
const CAST = 57877
const COUNT = 57878
const APPROX_COUNT = 57879
const APPROX_COUNT_DISTINCT = 57880
const SERIAL_EXTRACT = 57881
const APPROX_PERCENTILE = 57882
const CURDATE = 57883
const CURTIME = 57884
const DATE_ADD = 57885
const DATE_SUB = 57886
const EXTRACT = 57887
const GROUP_CONCAT = 57888
const MAX = 57889
const MID = 57890
const MIN = 57891
const NOW = 57892
const POSITION = 57893
const SESSION_USER = 57894
const STD = 57895
const STDDEV = 57896
const MEDIAN = 57897
const CLUSTER_CENTERS = 57898
const KMEANS = 57899
const STDDEV_POP = 57900
const STDDEV_SAMP = 57901
const SUBDATE = 57902
const SUBSTR = 57903
const SUBSTRING = 57904
const SUM = 57905
const SYSDATE = 57906
const SYSTEM_USER = 57907
const TRANSLATE = 57908
const TRIM = 57909
const VARIANCE = 57910
const VAR_POP = 57911
const VAR_SAMP = 57912
const AVG = 57913
const RANK = 57914
const ROW_NUMBER = 57915
const DENSE_RANK = 57916
const BIT_CAST = 57917
const BITMAP_BIT_POSITION = 57918
const BITMAP_BUCKET_NUMBER = 57919
const BITMAP_COUNT = 57920
const BITMAP_CONSTRUCT_AGG = 57921
const BITMAP_OR_AGG = 57922
const NEXTVAL = 57923
const SETVAL = 57924
const CURRVAL = 57925
const LASTVAL = 57926
const ARROW = 57927
const ROW = 57928
const OUTFILE = 57929
const HEADER = 57930
const MAX_FILE_SIZE = 57931
const FORCE_QUOTE = 57932
const PARALLEL = 57933
const STRICT = 57934
const UNUSED = 57935
const BINDINGS = 57936
const DO = 57937
const DECLARE = 57938
const LOOP = 57939
const WHILE = 57940
const LEAVE = 57941
const ITERATE = 57942
const UNTIL = 57943
const CALL = 57944
const PREV = 57945
const SLIDING = 57946
const FILL = 57947
const SPBEGIN = 57948
const BACKEND = 57949
const SERVERS = 57950
const HANDLER = 57951
const PERCENT = 57952
const SAMPLE = 57953
const MO_TS = 57954
const KILL = 57955
const BACKUP = 57956
const FILESYSTEM = 57957
const PARALLELISM = 57958
const RESTORE = 57959
const QUERY_RESULT = 57960

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12121

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 123,
	11, 741,
	22, 741,
	-2, 734,
	-1, 144,
	239, 1143,
	241, 1042,
	-2, 1089,
	-1, 169,
	43, 564,
	241, 564,
	268, 571,
	269, 571,
	465, 564,
	-2, 601,
	-1, 210,
	639, 1899,
	-2, 477,
	-1, 511,
	639, 2018,
	-2, 365,
	-1, 569,
	639, 2077,
	-2, 363,
	-1, 570,
	639, 2078,
	-2, 364,
	-1, 571,
	639, 2079,
	-2, 366,
	-1, 703,
	320, 151,
	437, 151,
	438, 151,
	-2, 1804,
	-1, 769,
	83, 1591,
	-2, 1954,
	-1, 770,
	83, 1609,
	-2, 1925,
	-1, 774,
	83, 1610,
	-2, 1953,
	-1, 807,
	83, 1518,
	-2, 2151,
	-1, 808,
	83, 1519,
	-2, 2150,
	-1, 809,
	83, 1520,
	-2, 2140,
	-1, 810,
	83, 2112,
	-2, 2133,
	-1, 811,
	83, 2113,
	-2, 2134,
	-1, 812,
	83, 2114,
	-2, 2142,
	-1, 813,
	83, 2115,
	-2, 2122,
	-1, 814,
	83, 2116,
	-2, 2131,
	-1, 815,
	83, 2117,
	-2, 2143,
	-1, 816,
	83, 2118,
	-2, 2144,
	-1, 817,
	83, 2119,
	-2, 2149,
	-1, 818,
	83, 2120,
	-2, 2154,
	-1, 819,
	83, 2121,
	-2, 2155,
	-1, 820,
	83, 1587,
	-2, 1992,
	-1, 821,
	83, 1588,
	-2, 1788,
	-1, 822,
	83, 1589,
	-2, 2001,
	-1, 823,
	83, 1590,
	-2, 1797,
	-1, 825,
	83, 1593,
	-2, 1805,
	-1, 826,
	83, 1594,
	-2, 2025,
	-1, 828,
	83, 1597,
	-2, 1824,
	-1, 830,
	83, 1599,
	-2, 2037,
	-1, 831,
	83, 1600,
	-2, 2036,
	-1, 832,
	83, 1601,
	-2, 1868,
	-1, 833,
	83, 1602,
	-2, 1949,
	-1, 836,
	83, 1605,
	-2, 2048,
	-1, 838,
	83, 1607,
	-2, 2051,
	-1, 839,
	83, 1608,
	-2, 2053,
	-1, 840,
	83, 1611,
	-2, 2061,
	-1, 841,
	83, 1612,
	-2, 1934,
	-1, 842,
	83, 1613,
	-2, 1979,
	-1, 843,
	83, 1614,
	-2, 1944,
	-1, 844,
	83, 1615,
	-2, 1969,
	-1, 855,
	83, 1496,
	-2, 2145,
	-1, 856,
	83, 1497,
	-2, 2146,
	-1, 857,
	83, 1498,
	-2, 2147,
	-1, 946,
	460, 601,
	461, 601,
	-2, 565,
	-1, 993,
	125, 1788,
	136, 1788,
	156, 1788,
	-2, 1762,
	-1, 1109,
	22, 768,
	-2, 717,
	-1, 1215,
	11, 741,
	22, 741,
	-2, 1376,
	-1, 1297,
	22, 768,
	-2, 717,
	-1, 1627,
	83, 1662,
	-2, 1951,
	-1, 1628,
	83, 1663,
	-2, 1952,
	-1, 1785,
	84, 919,
	-2, 925,
	-1, 2218,
	108, 1081,
	152, 1081,
	191, 1081,
	194, 1081,
	281, 1081,
	-2, 1074,
	-1, 2370,
	11, 741,
	22, 741,
	-2, 862,
	-1, 2402,
	84, 1748,
	157, 1748,
	-2, 1936,
	-1, 2403,
	84, 1748,
	157, 1748,
	-2, 1935,
	-1, 2404,
	84, 1724,
	157, 1724,
	-2, 1922,
	-1, 2405,
	84, 1725,
	157, 1725,
	-2, 1927,
	-1, 2406,
	84, 1726,
	157, 1726,
	-2, 1856,
	-1, 2407,
	84, 1727,
	157, 1727,
	-2, 1850,
	-1, 2408,
	84, 1728,
	157, 1728,
	-2, 1778,
	-1, 2409,
	84, 1729,
	157, 1729,
	-2, 1924,
	-1, 2410,
	84, 1730,
	157, 1730,
	-2, 1854,
	-1, 2411,
	84, 1731,
	157, 1731,
	-2, 1849,
	-1, 2412,
	84, 1732,
	157, 1732,
	-2, 1838,
	-1, 2413,
	84, 1748,
	157, 1748,
	-2, 1839,
	-1, 2414,
	84, 1748,
	157, 1748,
	-2, 1840,
	-1, 2416,
	84, 1737,
	157, 1737,
	-2, 1969,
	-1, 2417,
	84, 1715,
	157, 1715,
	-2, 1954,
	-1, 2418,
	84, 1746,
	157, 1746,
	-2, 1925,
	-1, 2419,
	84, 1746,
	157, 1746,
	-2, 1953,
	-1, 2420,
	84, 1746,
	157, 1746,
	-2, 1806,
	-1, 2421,
	84, 1744,
	157, 1744,
	-2, 1944,
	-1, 2422,
	84, 1741,
	157, 1741,
	-2, 1829,
	-1, 2423,
	83, 1696,
	84, 1696,
	157, 1696,
	395, 1696,
	396, 1696,
	397, 1696,
	-2, 1777,
	-1, 2424,
	83, 1697,
	84, 1697,
	157, 1697,
	395, 1697,
	396, 1697,
	397, 1697,
	-2, 1779,
	-1, 2425,
	83, 1698,
	84, 1698,
	157, 1698,
	395, 1698,
	396, 1698,
	397, 1698,
	-2, 1997,
	-1, 2426,
	83, 1700,
	84, 1700,
	157, 1700,
	395, 1700,
	396, 1700,
	397, 1700,
	-2, 1926,
	-1, 2427,
	83, 1702,
	84, 1702,
	157, 1702,
	395, 1702,
	396, 1702,
	397, 1702,
	-2, 1908,
	-1, 2428,
	83, 1704,
	84, 1704,
	157, 1704,
	395, 1704,
	396, 1704,
	397, 1704,
	-2, 1855,
	-1, 2429,
	83, 1706,
	84, 1706,
	157, 1706,
	395, 1706,
	396, 1706,
	397, 1706,
	-2, 1834,
	-1, 2430,
	83, 1707,
	84, 1707,
	157, 1707,
	395, 1707,
	396, 1707,
	397, 1707,
	-2, 1835,
	-1, 2431,
	83, 1709,
	84, 1709,
	157, 1709,
	395, 1709,
	396, 1709,
	397, 1709,
	-2, 1776,
	-1, 2432,
	84, 1751,
	157, 1751,
	395, 1751,
	396, 1751,
	397, 1751,
	-2, 1811,
	-1, 2433,
	84, 1751,
	157, 1751,
	395, 1751,
	396, 1751,
	397, 1751,
	-2, 1825,
	-1, 2434,
	84, 1754,
	157, 1754,
	395, 1754,
	396, 1754,
	397, 1754,
	-2, 1807,
	-1, 2435,
	84, 1754,
	157, 1754,
	395, 1754,
	396, 1754,
	397, 1754,
	-2, 1871,
	-1, 2436,
	84, 1751,
	157, 1751,
	395, 1751,
	396, 1751,
	397, 1751,
	-2, 1892,
	-1, 2638,
	108, 1081,
	152, 1081,
	191, 1081,
	194, 1081,
	281, 1081,
	-2, 1075,
	-1, 2656,
	81, 661,
	157, 661,
	-2, 1258,
	-1, 3060,
	194, 1081,
	305, 1344,
	-2, 1316,
	-1, 3227,
	108, 1081,
	152, 1081,
	191, 1081,
	194, 1081,
	-2, 1199,
	-1, 3229,
	108, 1081,
	152, 1081,
	191, 1081,
	194, 1081,
	-2, 1199,
	-1, 3241,
	81, 661,
	157, 661,
	-2, 1258,
	-1, 3263,
	194, 1081,
	305, 1344,
	-2, 1317,
	-1, 3403,
	108, 1081,
	152, 1081,
	191, 1081,
	194, 1081,
	-2, 1200,
	-1, 3430,
	84, 1161,
	157, 1161,
	-2, 1081,
	-1, 3562,
	84, 1161,
	157, 1161,
	-2, 1081,
	-1, 3714,
	84, 1165,
	157, 1165,
	-2, 1081,
	-1, 3762,
	84, 1166,
	157, 1166,
	-2, 1081,
}

const yyPrivate = 57344

const yyLast = 48196

var yyAct = [...]int{
	736, 713, 3808, 738, 3782, 2686, 199, 3801, 3718, 1870,
	1607, 3724, 3248, 3619, 3342, 3717, 3725, 3079, 3562, 3046,
	3645, 3602, 722, 3676, 715, 3149, 3277, 3540, 3458, 2680,
	3596, 2490, 3150, 1250, 3561, 3623, 3391, 3388, 3390, 3486,
	1444, 766, 605, 1382, 2683, 992, 3531, 3603, 1110, 3346,
	3605, 1388, 1521, 1818, 623, 3337, 629, 629, 3214, 3410,
	1654, 2659, 629, 646, 655, 3264, 3055, 655, 1104, 1610,
	3016, 3400, 3372, 3147, 2266, 2977, 2794, 3230, 2795, 1603,
	3405, 59, 184, 3005, 3202, 711, 2793, 2710, 2776, 3075,
	3057, 3105, 3232, 1961, 666, 3064, 3189, 2857, 3135, 2525,
	37, 2689, 2398, 2073, 2269, 2400, 1958, 2031, 3115, 2790,
	660, 2817, 1668, 2988, 1926, 2978, 1830, 2364, 2627, 3025,
	705, 2982, 2980, 2984, 2979, 3063, 2229, 1437, 2248, 2975,
	2347, 1976, 2639, 1100, 2196, 2903, 2182, 710, 2960, 2299,
	2181, 2470, 122, 2056, 2830, 2040, 2032, 921, 2069, 2039,
	2004, 1517, 1760, 1954, 2365, 1353, 2452, 2352, 2068, 1929,
	1525, 1322, 36, 652, 2840, 1510, 2615, 2712, 2610, 2267,
	986, 1359, 1849, 605, 1927, 2691, 1860, 2651, 195, 8,
	1522, 194, 7, 6, 1533, 2218, 2228, 1794, 1049, 2396,
	1601, 2070, 1484, 622, 714, 1453, 2080, 1554, 1606, 199,
	1423, 199, 2208, 1040, 1041, 1661, 1641, 2103, 704, 1592,
	629, 1123, 604, 2038, 723, 955, 2558, 2035, 1392, 1536,
	641, 2020, 1422, 1790, 1491, 1600, 985, 1994, 27, 1793,
	16, 920, 712, 1371, 23, 2262, 638, 1367, 1829, 2372,
	859, 1420, 1476, 1669, 668, 14, 1383, 185, 15, 1532,
	669, 100, 24, 17, 1355, 1483, 10, 897, 1001, 33,
	654, 181, 941, 175, 1295, 918, 903, 1251, 1934, 2077,
	665, 1546, 1183, 1184, 1185, 1182, 1183, 1184, 1185, 1182,
	3525, 1036, 2593, 1038, 1391, 1183, 1184, 1185, 1182, 2593,
	2593, 651, 1545, 647, 1183, 1184, 1185, 1182, 2374, 1037,
	3418, 3244, 3032, 2087, 1105, 706, 3217, 2249, 649, 3142,
	2513, 650, 2458, 2456, 2455, 182, 55, 171, 145, 998,
	2557, 2453, 648, 634, 628, 628, 1106, 658, 1773, 1498,
	636, 1494, 1033, 172, 1033, 1032, 183, 861, 624, 1000,
	164, 862, 2180, 1314, 173, 2953, 2950, 1033, 625, 2955,
	2952, 3793, 1405, 2585, 2583, 1767, 1310, 1496, 3335, 3267,
	2853, 2851, 8, 121, 2009, 7, 3591, 1031, 3493, 3487,
	3338, 1105, 3148, 2053, 1183, 1184, 1185, 1182, 109, 1245,
	1183, 1184, 1185, 1182, 3607, 176, 2034, 860, 2930, 2026,
	2307, 3699, 871, 3377, 1145, 2587, 2499, 706, 3279, 1317,
	2074, 3373, 2507, 3231, 2220, 630, 1531, 3513, 3547, 182,
	182, 3270, 3656, 182, 2219, 1463, 182, 1462, 1461, 182,
	182, 182, 3265, 1004, 1002, 1003, 664, 3287, 3288, 182,
	2928, 1328, 2645, 3266, 182, 55, 171, 145, 1540, 1552,
	2085, 1345, 182, 55, 171, 145, 182, 55, 171, 145,
	2390, 2788, 3548, 1180, 2391, 182, 55, 171, 145, 2823,
	1318, 121, 127, 128, 2875, 129, 130, 2865, 1537, 1549,
	3271, 182, 55, 171, 145, 2213, 1971, 121, 636, 176,
	2643, 1775, 3515, 176, 1153, 1938, 176, 1155, 2471, 176,
	1539, 1551, 964, 1160, 1401, 1173, 1161, 1402, 1121, 176,
	1844, 872, 2378, 1609, 176, 2377, 1563, 3050, 2379, 2824,
	2825, 1178, 176, 996, 995, 1156, 176, 997, 994, 1118,
	1939, 1940, 1575, 1379, 1163, 176, 3610, 2954, 2951, 3609,
	2646, 1777, 1778, 144, 170, 180, 850, 107, 849, 851,
	852, 176, 853, 854, 1424, 1593, 1426, 1387, 1597, 3359,
	3696, 1386, 1389, 1390, 3608, 169, 163, 162, 974, 2612,
	1389, 1390, 61, 1327, 3286, 3048, 2270, 3610, 3689, 2613,
	3728, 3729, 1596, 3609, 3688, 3608, 3687, 2169, 3749, 3692,
	3786, 3787, 3594, 1404, 2858, 3678, 3597, 3598, 3599, 3600,
	3151, 3275, 3151, 3681, 3678, 1149, 2859, 1126, 2860, 3490,
	2494, 2588, 1497, 1495, 1158, 1703, 1613, 2089, 1115, 3616,
	3164, 1955, 2731, 3272, 3276, 3274, 3273, 1945, 2611, 2618,
	1949, 1151, 1588, 165, 166, 167, 3203, 629, 629, 3210,
	2340, 3701, 3702, 1154, 1157, 1126, 2081, 3382, 629, 1114,
	909, 2997, 2207, 2017, 3697, 3698, 2999, 2893, 2989, 2602,
	3694, 3281, 3282, 3289, 174, 2891, 1598, 655, 655, 1150,
	629, 1504, 1503, 1175, 144, 1584, 180, 168, 1159, 3517,
	3518, 1176, 1177, 2504, 700, 117, 2305, 702, 1148, 168,
	1595, 118, 701, 3336, 2852, 2780, 169, 3358, 2343, 2344,
	2993, 2342, 3522, 3379, 2086, 3360, 3690, 2994, 2995, 3289,
	3511, 3193, 970, 968, 2348, 969, 1414, 1171, 1172, 1043,
	2064, 3268, 3304, 2996, 2586, 1170, 1329, 3280, 3505, 2600,
	3506, 1377, 1223, 1612, 1611, 3727, 1001, 2212, 1969, 1970,
	3505, 874, 3506, 1547, 621, 3052, 1152, 663, 119, 3014,
	1113, 3078, 1544, 652, 652, 1162, 1403, 2285, 3500, 657,
	3757, 54, 1313, 2265, 2288, 2601, 3076, 3077, 1140, 3026,
	3638, 3524, 3633, 3167, 1107, 2652, 3301, 875, 1114, 3552,
	2897, 2592, 656, 3544, 3508, 2092, 2094, 2095, 2075, 2786,
	2075, 2215, 1106, 1106, 2075, 1106, 3508, 998, 3294, 2961,
	3624, 975, 1254, 1128, 1127, 3047, 3640, 1594, 1001, 2874,
	56, 3249, 3646, 2873, 2991, 3507, 2685, 1000, 1619, 1622,
	1623, 2287, 2872, 971, 3256, 2681, 2682, 3507, 2685, 1620,
	1366, 2108, 2076, 1033, 3081, 3305, 1033, 1033, 911, 3615,
	912, 1128, 1127, 3449, 1033, 177, 178, 3819, 179, 3700,
	3804, 2317, 3438, 146, 2316, 1033, 3349, 3285, 52, 1033,
	3546, 2088, 1106, 1120, 2286, 1364, 1131, 653, 3647, 998,
	2337, 2338, 2393, 1117, 1119, 653, 3716, 2624, 1433, 1255,
	3444, 651, 651, 647, 647, 2454, 1316, 973, 653, 1000,
	1129, 1499, 1432, 2272, 1389, 1390, 1325, 623, 649, 649,
	1138, 650, 650, 3566, 653, 628, 1103, 1381, 1380, 860,
	1109, 1217, 648, 648, 1363, 1362, 1112, 1293, 3532, 3516,
	1298, 2584, 1137, 3378, 120, 41, 3056, 1133, 1134, 56,
	921, 53, 2508, 3284, 965, 5, 3553, 56, 1136, 2617,
	3545, 1101, 124, 125, 1139, 2949, 126, 146, 146, 1224,
	56, 146, 1389, 1390, 146, 1378, 1956, 146, 146, 146,
	1219, 1220, 1221, 1222, 972, 1776, 56, 146, 3000, 2990,
	2894, 3053, 146, 2308, 3233, 2265, 177, 178, 3012, 179,
	146, 629, 1108, 1416, 146, 1102, 997, 1214, 3805, 605,
	605, 3333, 3519, 146, 1385, 1323, 2621, 2622, 605, 605,
	3693, 2760, 1448, 1448, 2732, 629, 2733, 2734, 3154, 146,
	664, 2620, 2282, 2992, 3383, 2835, 2836, 967, 1946, 3675,
	966, 1948, 1421, 1589, 1330, 3080, 2093, 655, 1477, 623,
	2271, 1145, 3565, 1487, 1487, 2273, 3501, 3612, 3368, 1165,
	3604, 3072, 1166, 1450, 199, 2965, 2500, 2382, 3501, 2819,
	2821, 2303, 3502, 605, 3715, 1455, 1266, 1267, 2078, 1621,
	2275, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 3076, 3077,
	1168, 2896, 1343, 1344, 3459, 3460, 3461, 3465, 3463, 3464,
	3462, 1446, 1446, 2631, 2634, 2635, 2636, 2632, 2633, 2274,
	1326, 910, 2104, 1342, 1341, 2596, 1340, 659, 3196, 1415,
	3451, 3440, 2090, 2091, 1529, 3439, 2729, 3013, 3073, 1534,
	965, 1505, 3190, 3445, 3446, 880, 1543, 1144, 1350, 3802,
	3803, 915, 916, 917, 2905, 2904, 2598, 1442, 1443, 2272,
	2275, 2751, 2752, 2188, 1299, 913, 1297, 1024, 1029, 1030,
	1321, 1573, 1319, 1320, 1568, 1569, 3369, 2190, 2189, 1780,
	1164, 1781, 965, 2966, 2302, 1448, 2671, 1448, 1114, 1428,
	1430, 1368, 1372, 1372, 1372, 1331, 879, 1553, 1440, 1441,
	882, 881, 2187, 2185, 2272, 2275, 1774, 1779, 1373, 1374,
	876, 2329, 1111, 877, 3411, 3820, 1368, 1368, 1358, 1169,
	3815, 2276, 1001, 967, 1365, 1352, 966, 2362, 3031, 1001,
	2138, 1375, 2657, 2137, 3810, 1406, 1407, 3685, 3799, 1394,
	1395, 1538, 1397, 1398, 1167, 1399, 1393, 2820, 1550, 1396,
	2281, 1181, 1478, 1500, 2279, 1448, 1508, 3112, 1511, 1512,
	2244, 652, 1519, 1520, 2199, 967, 1572, 3155, 966, 1513,
	1514, 1431, 1667, 1583, 1571, 1997, 1542, 1145, 2473, 1412,
	2761, 2763, 2764, 2765, 2762, 2750, 1716, 2200, 2201, 1608,
	3108, 2276, 1527, 2083, 3764, 1360, 2271, 2265, 2270, 1456,
	2268, 2273, 1360, 1454, 2658, 634, 1181, 3811, 1469, 3736,
	1524, 3765, 2260, 1528, 3730, 3199, 1111, 1475, 3166, 1488,
	2174, 1489, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636,
	1637, 1638, 1639, 1640, 1655, 1605, 2276, 976, 1652, 1653,
	3074, 2271, 2265, 2270, 3712, 2268, 2273, 2597, 1183, 1184,
	1185, 1182, 1114, 2363, 3666, 2274, 2499, 2210, 1181, 3641,
	1026, 1027, 1028, 1782, 3629, 3585, 1624, 3765, 1477, 3085,
	1586, 3584, 2658, 1791, 1448, 1796, 1797, 1758, 1799, 1800,
	629, 1562, 3737, 1602, 3579, 629, 1725, 3528, 1448, 651,
	1701, 647, 921, 1561, 2243, 1819, 1564, 1556, 3083, 3578,
	2274, 1581, 1448, 1578, 2959, 1590, 649, 3577, 1416, 650,
	1591, 2957, 3576, 646, 3556, 1995, 707, 3713, 1577, 2363,
	648, 2838, 2604, 3555, 1582, 1580, 1579, 3528, 1599, 1576,
	1761, 1715, 2083, 1843, 2363, 3527, 1604, 3630, 3586, 1142,
	2589, 3112, 1850, 1850, 2233, 1416, 3310, 1416, 1416, 2489,
	2478, 629, 629, 1769, 1791, 1920, 3258, 3528, 1448, 1923,
	1924, 1936, 1294, 1643, 2393, 1706, 1707, 1708, 2074, 1937,
	2117, 1798, 3528, 2209, 3223, 605, 2258, 1448, 1722, 2179,
	3528, 1723, 1143, 1650, 1651, 3528, 3182, 2083, 1847, 3178,
	3093, 2814, 864, 865, 866, 867, 2083, 2173, 1736, 1737,
	1183, 1184, 1185, 1182, 2564, 629, 1791, 1448, 3528, 1981,
	2556, 629, 629, 629, 1986, 1987, 1143, 1757, 2515, 2393,
	2172, 1991, 1992, 1993, 2497, 1698, 1699, 1999, 1702, 3259,
	1787, 1788, 1789, 1872, 199, 1764, 1717, 199, 199, 1972,
	199, 1918, 1802, 1803, 1804, 1805, 2116, 3224, 2145, 1724,
	1145, 1726, 1730, 1727, 1728, 1729, 2065, 1967, 1351, 3183,
	1658, 1853, 3179, 3094, 2363, 2485, 2480, 1820, 1950, 1434,
	1459, 3827, 1795, 2475, 3812, 1759, 3209, 1181, 2467, 3244,
	1716, 1716, 2042, 1181, 2465, 1765, 1811, 1835, 2842, 1964,
	1965, 1181, 1716, 1716, 2660, 2502, 1942, 2233, 1944, 2058,
	1824, 2463, 1980, 1842, 2501, 1852, 1845, 1846, 1962, 1963,
	1786, 2461, 2493, 1034, 1035, 1851, 2008, 2252, 1039, 2011,
	2012, 1368, 2014, 1816, 2133, 1957, 2118, 2063, 1819, 1821,
	1822, 1815, 1448, 2072, 2232, 1372, 2175, 2052, 2476, 2481,
	1826, 869, 1983, 1984, 1985, 2152, 2476, 1372, 1801, 1832,
	1836, 2468, 2044, 1806, 2151, 2136, 1795, 2466, 1827, 1828,
	2127, 1001, 1841, 2126, 1001, 1183, 1184, 1185, 1182, 1183,
	1184, 1185, 1182, 1001, 2462, 1837, 1838, 1917, 2002, 1989,
	1558, 2066, 1231, 1538, 2462, 1854, 1855, 1922, 1130, 2125,
	1941, 2082, 1943, 1098, 1565, 1848, 1831, 2048, 1833, 1834,
	1925, 1951, 1093, 3475, 1198, 1602, 652, 2233, 3308, 2174,
	3027, 2926, 1840, 3634, 1214, 2114, 1966, 3036, 1181, 1856,
	1857, 3412, 998, 1705, 1704, 2037, 3236, 1181, 1181, 1978,
	1705, 1704, 1979, 1181, 998, 2888, 1181, 2037, 3234, 1356,
	3821, 3790, 1000, 1357, 878, 2300, 1410, 1411, 1400, 1413,
	1369, 1417, 1418, 1419, 1000, 2005, 2003, 3635, 864, 865,
	866, 867, 1181, 3526, 2083, 3413, 1001, 1566, 3497, 1436,
	3237, 3442, 3441, 1977, 2101, 2102, 3427, 3384, 2022, 1977,
	1977, 1977, 3235, 1464, 1465, 1466, 1467, 1468, 3028, 1470,
	1471, 1472, 1473, 1474, 2054, 3216, 1649, 1480, 1481, 1482,
	2453, 3113, 2043, 3104, 3686, 3098, 2051, 3095, 3042, 2049,
	3007, 2783, 1646, 1648, 1645, 2184, 1647, 2186, 2062, 1201,
	1202, 1203, 1204, 1205, 1198, 705, 2061, 998, 629, 629,
	629, 2782, 3029, 2629, 651, 1742, 647, 1438, 2060, 2594,
	2067, 3140, 1735, 629, 629, 629, 629, 1000, 1439, 1356,
	2512, 649, 2479, 1357, 650, 2384, 2230, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1198, 648, 2236, 1416, 1370, 2097,
	1435, 739, 749, 2047, 2046, 883, 2045, 2522, 1347, 1346,
	2096, 740, 1116, 741, 745, 748, 744, 742, 743, 2447,
	2006, 1662, 2098, 1416, 1183, 1184, 1185, 1182, 2844, 2105,
	1643, 1183, 1184, 1185, 1182, 3143, 2110, 869, 1185, 1182,
	2294, 1783, 2457, 2533, 1182, 1731, 1732, 1733, 1734, 2099,
	2100, 1738, 1739, 1740, 1741, 1743, 1744, 1745, 1746, 1747,
	1748, 1749, 1750, 1751, 1752, 3454, 746, 1183, 1184, 1185,
	1182, 1092, 1088, 1089, 1090, 1091, 3141, 2538, 3380, 2537,
	2536, 2534, 1183, 1184, 1185, 1182, 2146, 2147, 2301, 2149,
	1492, 751, 123, 1662, 3453, 2111, 2156, 123, 747, 1492,
	2861, 2006, 2367, 2367, 1936, 2367, 1197, 1196, 1206, 1207,
	1199, 1200, 1201, 1202, 1203, 1204, 1205, 1198, 1183, 1184,
	1185, 1182, 2721, 605, 605, 2140, 2719, 2524, 2697, 2695,
	3433, 1114, 1233, 2176, 3385, 3386, 3381, 1448, 629, 2254,
	2168, 2170, 2171, 3795, 3794, 1232, 2535, 3818, 2251, 1720,
	2253, 635, 3740, 629, 123, 1254, 2264, 3711, 2263, 1114,
	2437, 623, 2211, 2193, 1721, 2577, 1487, 2578, 1936, 2238,
	2239, 2442, 3207, 2444, 3710, 2772, 3636, 199, 3581, 2241,
	2242, 3569, 3559, 2257, 3549, 1001, 3488, 2306, 3415, 3414,
	2309, 2310, 2311, 2312, 2313, 2314, 2315, 3250, 3238, 2318,
	2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328,
	3817, 2330, 2331, 2332, 2333, 2334, 2388, 2335, 2371, 2380,
	2369, 2381, 2373, 3206, 2907, 2770, 2203, 2204, 2205, 2998,
	3208, 2884, 1255, 2771, 2495, 2237, 1372, 2856, 2072, 2385,
	2386, 2221, 2222, 2223, 2224, 1448, 998, 1448, 2855, 1448,
	2755, 2250, 2754, 2753, 1114, 1186, 3560, 2745, 2739, 2448,
	2401, 2738, 2514, 1216, 2737, 2245, 1000, 2736, 999, 2768,
	2277, 2278, 1226, 2283, 2919, 123, 2491, 2492, 1183, 1184,
	1185, 1182, 2441, 2769, 2395, 2539, 2540, 2449, 1448, 2542,
	123, 2240, 123, 1428, 1430, 2345, 2246, 1234, 2548, 2247,
	1183, 1184, 1185, 1182, 2549, 2590, 2121, 2469, 2375, 1448,
	1197, 1196, 1206, 1207, 1199, 1200, 1201, 1202, 1203, 1204,
	1205, 1198, 1183, 1184, 1185, 1182, 2505, 2767, 2541, 2757,
	2129, 1493, 2178, 2389, 2918, 2025, 2439, 2024, 2628, 2023,
	2392, 1183, 1184, 1185, 1182, 2446, 2019, 2018, 1975, 2550,
	1183, 1184, 1185, 1182, 2438, 2509, 2595, 1974, 2440, 1973,
	1559, 1183, 1184, 1185, 1182, 2553, 2554, 1446, 1312, 1114,
	3215, 700, 3106, 1114, 702, 2983, 3814, 1982, 3653, 701,
	1448, 3721, 1096, 2625, 2626, 2530, 3649, 2756, 1446, 2526,
	1920, 2526, 1183, 1184, 1185, 1182, 2551, 2128, 2656, 2511,
	1183, 1184, 1185, 1182, 2662, 3813, 1454, 2506, 1183, 1184,
	1185, 1182, 3520, 3521, 2520, 3343, 3788, 3622, 3756, 3755,
	2487, 1977, 3510, 2673, 1183, 1184, 1185, 1182, 3752, 2498,
	2496, 3673, 3618, 1114, 3389, 2503, 3601, 3592, 2581, 1095,
	3573, 2694, 3568, 1602, 1183, 1184, 1185, 1182, 1114, 1114,
	1114, 1850, 3567, 3523, 1114, 3489, 2705, 2706, 2707, 2708,
	1114, 2715, 3435, 2716, 2717, 3396, 2718, 3364, 2720, 2640,
	2605, 3366, 3509, 1001, 2401, 2532, 2641, 2516, 2517, 2715,
	1196, 1206, 1207, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
	1198, 2367, 2644, 3363, 1183, 1184, 1185, 1182, 3352, 3362,
	2663, 3341, 2653, 2687, 3339, 2773, 3318, 2519, 3317, 1872,
	3314, 3351, 3312, 605, 2777, 3245, 3498, 2614, 3205, 1920,
	1114, 1936, 1936, 1936, 1936, 1183, 1184, 1185, 1182, 2607,
	3298, 2609, 2675, 1114, 1936, 3424, 3204, 2367, 1183, 1184,
	1185, 1182, 3201, 2692, 3170, 3191, 3175, 2692, 2688, 3739,
	2700, 2701, 3173, 1448, 3101, 2704, 3100, 1183, 1184, 1185,
	1182, 2711, 2606, 2699, 629, 629, 3091, 2623, 3090, 1486,
	1486, 1183, 1184, 1185, 1182, 3008, 2970, 2647, 1795, 2969,
	8, 2964, 2665, 7, 2655, 2661, 2922, 2668, 2183, 1197,
	1196, 1206, 1207, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
	1198, 2693, 2921, 2674, 2898, 2677, 2690, 3365, 2920, 2810,
	2895, 2727, 2728, 1183, 1184, 1185, 1182, 2854, 2696, 2828,
	199, 2796, 2766, 2703, 2758, 199, 2743, 2744, 2748, 1183,
	1184, 1185, 1182, 2746, 2796, 1183, 1184, 1185, 1182, 2742,
	2741, 2740, 2559, 2560, 2591, 2747, 2735, 1716, 2565, 1716,
	2779, 2488, 2871, 806, 805, 3770, 2028, 2575, 3422, 2021,
	1772, 1771, 2664, 3665, 2883, 1560, 2654, 1262, 1258, 1257,
	1448, 2669, 2670, 2890, 1099, 873, 3350, 2839, 2778, 3229,
	3228, 3227, 2784, 2781, 1183, 1184, 1185, 1182, 3198, 2809,
	2812, 2813, 3187, 2811, 3185, 2797, 2798, 2799, 2800, 3184,
	3181, 3180, 2845, 3174, 3172, 2672, 3156, 2849, 2829, 3146,
	3145, 2826, 1197, 1196, 1206, 1207, 1199, 1200, 1201, 1202,
	1203, 1204, 1205, 1198, 2574, 3131, 3130, 1001, 1614, 1615,
	1616, 1617, 1618, 3037, 123, 123, 999, 1001, 1761, 1512,
	2973, 1519, 1520, 2870, 2956, 2924, 2866, 2917, 2909, 1513,
	1514, 1183, 1184, 1185, 1182, 2868, 2876, 2908, 2902, 2912,
	182, 2914, 171, 145, 2877, 2887, 1527, 2837, 2967, 2603,
	1659, 2846, 2968, 2464, 1663, 1664, 1665, 1666, 2847, 1114,
	2892, 2843, 2573, 1700, 1524, 2986, 2460, 1528, 2459, 2157,
	2862, 1710, 2867, 2150, 2822, 3002, 2144, 2864, 2869, 2143,
	2879, 629, 2878, 2880, 2142, 2141, 2139, 2135, 1215, 1183,
	1184, 1185, 1182, 3017, 1114, 2115, 2134, 629, 2886, 1114,
	1114, 2132, 2123, 2120, 2899, 2572, 2900, 2119, 1936, 2230,
	176, 3035, 2832, 2833, 2906, 1189, 1190, 1191, 1192, 1193,
	1194, 1195, 1187, 1762, 2027, 2915, 2916, 2571, 1755, 1754,
	2294, 1753, 1183, 1184, 1185, 1182, 3011, 2570, 1719, 2913,
	1718, 1709, 3062, 1460, 3065, 1458, 3065, 3065, 1252, 2910,
	2911, 1114, 2958, 3648, 1183, 1184, 1185, 1182, 3587, 3575,
	3570, 2972, 1507, 182, 1183, 1184, 1185, 1182, 3469, 2640,
	3086, 1183, 1184, 1185, 1182, 1001, 3082, 1001, 1448, 1448,
	2963, 2962, 1001, 3049, 3051, 2569, 3452, 1823, 3448, 2971,
	3426, 3409, 3326, 3084, 3324, 3296, 3020, 3295, 3292, 3291,
	3257, 3024, 3254, 3252, 3218, 1518, 3003, 3004, 1001, 1509,
	1523, 1839, 1183, 1184, 1185, 1182, 1526, 1515, 3087, 3088,
	2925, 3010, 3033, 3019, 1689, 629, 1354, 3045, 3022, 3023,
	2986, 3768, 2568, 176, 1300, 3034, 998, 3061, 3030, 1416,
	3070, 2774, 1920, 1920, 3044, 3060, 2698, 3039, 2649, 2648,
	2642, 2264, 1413, 2263, 2608, 2576, 1000, 1446, 1446, 1183,
	1184, 1185, 1182, 2474, 1762, 2383, 3071, 2567, 2336, 1762,
	1762, 3066, 3067, 2231, 1197, 1196, 1206, 1207, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1198, 3038, 2566, 2202, 1114,
	2177, 3040, 3041, 2542, 1183, 1184, 1185, 1182, 1644, 176,
	1988, 1785, 3144, 1768, 1587, 1541, 1516, 1311, 1296, 3068,
	1292, 1291, 1290, 1289, 1183, 1184, 1185, 1182, 1288, 2007,
	1287, 1286, 2010, 1285, 1284, 2013, 2931, 2932, 2015, 1283,
	1282, 1281, 2933, 2934, 2935, 2936, 1280, 2937, 2938, 2939,
	2940, 2941, 2942, 2943, 2944, 2945, 2946, 629, 3102, 3009,
	3096, 3109, 3110, 3097, 3103, 3107, 3092, 1279, 3120, 3099,
	1278, 1277, 1276, 1275, 1274, 3021, 2113, 1273, 1272, 1457,
	1271, 1270, 1269, 635, 3127, 3128, 3129, 3043, 3124, 3663,
	2563, 2349, 1268, 1265, 2057, 2562, 1264, 1685, 1263, 1261,
	2401, 3133, 3139, 1260, 1682, 1259, 1256, 1249, 1684, 1681,
	1683, 1687, 1688, 1248, 1246, 123, 1686, 1183, 1184, 1185,
	1182, 1245, 1183, 1184, 1185, 1182, 3111, 3194, 2354, 2358,
	2359, 2360, 2355, 3157, 2356, 2361, 1244, 3159, 2357, 1243,
	3162, 2561, 3123, 3158, 1242, 1241, 1240, 1239, 3726, 2555,
	1238, 3163, 1183, 1184, 1185, 1182, 3176, 1206, 1207, 1199,
	1200, 1201, 1202, 1203, 1204, 1205, 1198, 3168, 1183, 1184,
	1185, 1182, 1237, 2526, 1236, 3222, 1183, 1184, 1185, 1182,
	2545, 1235, 123, 1230, 1229, 1228, 1227, 1147, 1097, 123,
	3661, 2367, 1936, 3241, 3119, 2107, 3659, 2521, 3293, 2112,
	3116, 3117, 123, 1977, 2235, 2217, 1135, 1183, 1184, 1185,
	1182, 2630, 2394, 2030, 123, 1146, 1001, 3260, 3122, 3192,
	1114, 3121, 3328, 1001, 1183, 1184, 1185, 1182, 2803, 3062,
	3329, 2806, 3188, 1114, 2804, 3197, 2807, 2802, 2801, 2805,
	2124, 3431, 3200, 2486, 1114, 2477, 3307, 108, 2131, 2808,
	1448, 2359, 2360, 1348, 58, 3212, 3213, 3243, 1813, 1814,
	1692, 1693, 1694, 1695, 1696, 1697, 1690, 1691, 57, 1920,
	2148, 3006, 3058, 1114, 3059, 2153, 2154, 2155, 2882, 3327,
	2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167,
	3309, 1808, 1809, 1810, 3251, 3290, 3253, 3247, 3160, 3161,
	2304, 3283, 199, 3303, 3134, 1909, 3240, 631, 3239, 1657,
	1501, 3219, 3220, 3221, 632, 1114, 2472, 3225, 3226, 3330,
	3320, 3261, 3299, 3302, 3297, 3165, 2491, 2492, 633, 1446,
	2510, 3306, 1555, 1535, 3300, 2192, 1183, 1184, 1185, 1182,
	1990, 2723, 3313, 3311, 1141, 2711, 2981, 3316, 2724, 2725,
	2726, 3321, 2974, 2676, 3367, 3319, 2650, 2256, 2226, 1817,
	1114, 1784, 1705, 1704, 3779, 3242, 3315, 3322, 1307, 1308,
	3572, 3348, 1305, 1306, 2796, 3246, 1303, 1304, 3089, 1114,
	1448, 1448, 1301, 1302, 3334, 3017, 2346, 2341, 1921, 1409,
	1408, 3344, 1174, 3345, 3126, 2831, 2191, 3404, 2059, 3404,
	1361, 1339, 2354, 2358, 2359, 2360, 2355, 1384, 2356, 2361,
	3398, 3399, 2357, 1114, 3420, 1114, 2796, 3746, 3744, 3704,
	3394, 3683, 3682, 3423, 3680, 3425, 3625, 3588, 3483, 3482,
	3421, 3340, 1448, 3376, 3177, 3375, 3374, 3153, 3152, 3137,
	2289, 3395, 2259, 1557, 3136, 2841, 1360, 3772, 3771, 3771,
	629, 3195, 1114, 1114, 2885, 3397, 1114, 1114, 3407, 1446,
	1655, 3408, 3371, 3243, 2219, 2122, 1315, 3419, 1132, 1001,
	2044, 3772, 3450, 3132, 1111, 1376, 3471, 186, 3, 1762,
	3392, 1762, 3332, 3466, 66, 1819, 3429, 3480, 3401, 3432,
	3456, 3457, 3436, 2, 3467, 3468, 3484, 3485, 3290, 1762,
	1762, 3791, 1935, 3428, 3283, 864, 865, 866, 867, 1448,
	1111, 1655, 3792, 3434, 1608, 1, 1608, 2582, 1766, 1309,
	868, 863, 3361, 1425, 3477, 2376, 1968, 1452, 1770, 870,
	3512, 2815, 1486, 2816, 3125, 3476, 2818, 2599, 3478, 2079,
	3504, 2785, 2339, 2206, 3001, 1349, 914, 3472, 1711, 3496,
	1570, 1023, 1125, 3392, 3392, 1567, 1124, 3392, 3392, 3495,
	1122, 3491, 1660, 753, 2033, 3499, 2775, 2749, 3503, 3479,
	3541, 3416, 3417, 3535, 3778, 123, 3807, 3738, 123, 123,
	3781, 123, 2482, 2483, 2484, 1585, 737, 1114, 1446, 3674,
	3593, 3742, 3595, 3494, 2084, 1179, 2863, 3558, 937, 794,
	3564, 764, 1247, 1548, 3473, 3529, 2929, 2927, 3474, 1025,
	763, 3536, 3211, 3348, 2619, 3538, 2834, 3537, 3543, 1022,
	938, 999, 2016, 1020, 123, 3550, 3554, 3590, 3492, 1502,
	1114, 1506, 2255, 999, 3551, 1448, 3644, 3430, 3054, 2684,
	1530, 3639, 3255, 3357, 1001, 3355, 3356, 123, 2523, 670,
	1947, 2529, 3571, 3353, 603, 3354, 983, 3470, 2543, 2544,
	2029, 671, 2234, 3533, 3695, 3574, 2546, 2547, 3580, 894,
	2216, 895, 3611, 887, 3614, 3582, 2638, 2637, 1625, 1188,
	1642, 2947, 2552, 3606, 2948, 1225, 709, 2109, 1608, 1114,
	2616, 3589, 3278, 2827, 65, 1021, 64, 63, 62, 1998,
	207, 755, 206, 3387, 3626, 3670, 3783, 735, 734, 733,
	1614, 1762, 732, 731, 1446, 730, 2353, 2351, 3455, 2350,
	1931, 3621, 1930, 3617, 1996, 3620, 1215, 682, 681, 688,
	678, 3392, 3643, 3015, 3628, 2714, 1114, 2709, 1861, 685,
	686, 1859, 687, 691, 1448, 2702, 672, 3668, 3671, 2284,
	3658, 3660, 3662, 3664, 3637, 2291, 696, 3642, 1858, 3723,
	3654, 3655, 3447, 3672, 2759, 3651, 1015, 1010, 1005, 1009,
	1013, 3347, 1807, 2280, 3657, 3583, 1878, 2730, 1875, 1874,
	2666, 2667, 2722, 3443, 3667, 3437, 3679, 3677, 1448, 1906,
	3392, 3541, 3539, 3403, 1018, 3262, 3263, 3269, 1008, 2225,
	700, 1048, 1044, 702, 1046, 1047, 1045, 3714, 701, 2531,
	2261, 2976, 2198, 3722, 3703, 3705, 3708, 3709, 3707, 2197,
	2195, 2194, 1324, 1446, 3613, 3691, 3370, 2399, 3706, 2397,
	1094, 3118, 3114, 2041, 2055, 2881, 3627, 3392, 1932, 1928,
	2787, 3631, 3632, 3514, 1812, 888, 2214, 161, 3731, 1016,
	3732, 3751, 3733, 3735, 3734, 3745, 1019, 3747, 3748, 51,
	105, 3743, 3741, 159, 50, 1114, 94, 1446, 3750, 3606,
	93, 104, 3652, 157, 49, 191, 190, 193, 1006, 192,
	189, 2450, 2451, 188, 3564, 3760, 1490, 187, 3684, 3406,
	925, 858, 3763, 3762, 3761, 40, 39, 3769, 3777, 3766,
	3785, 3767, 1017, 3784, 38, 3773, 3774, 3775, 3776, 34,
	13, 12, 35, 22, 21, 1574, 20, 26, 3796, 32,
	1114, 3789, 31, 116, 115, 30, 114, 113, 112, 111,
	3797, 110, 3643, 3798, 3800, 29, 19, 44, 43, 42,
	3806, 3809, 1007, 9, 103, 673, 675, 674, 101, 28,
	102, 99, 97, 95, 77, 680, 76, 75, 90, 89,
	923, 924, 88, 87, 3816, 86, 3758, 684, 85, 83,
	84, 965, 3785, 3823, 699, 3784, 3822, 182, 55, 171,
	145, 677, 3809, 3824, 936, 667, 74, 73, 3828, 72,
	2848, 1066, 2850, 71, 70, 172, 3753, 3754, 92, 1907,
	98, 96, 164, 81, 91, 82, 173, 80, 79, 78,
	69, 1762, 68, 67, 143, 2370, 1762, 142, 141, 1014,
	140, 1608, 139, 137, 138, 121, 2057, 136, 135, 134,
	133, 132, 131, 45, 1909, 46, 47, 48, 2518, 153,
	109, 152, 154, 156, 158, 155, 160, 176, 150, 148,
	151, 149, 147, 60, 967, 1011, 11, 966, 1012, 106,
	18, 2901, 1197, 1196, 1206, 1207, 1199, 1200, 1201, 1202,
	1203, 1204, 1205, 1198, 25, 4, 3563, 0, 0, 1935,
	0, 0, 0, 0, 0, 2923, 1884, 0, 123, 0,
	0, 679, 683, 689, 951, 690, 692, 0, 0, 693,
	694, 695, 926, 0, 697, 698, 0, 0, 0, 0,
	0, 0, 0, 1052, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 128, 0, 129, 130, 928,
	0, 0, 0, 1074, 1078, 1080, 1082, 1084, 1085, 1087,
	0, 1092, 1088, 1089, 1090, 1091, 0, 1069, 1070, 1071,
	1072, 1050, 1051, 1075, 1900, 1053, 0, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1065, 1067, 1063, 1064,
	1073, 0, 0, 0, 0, 0, 2106, 0, 1077, 1079,
	1081, 1083, 1086, 0, 0, 0, 0, 0, 0, 911,
	0, 912, 950, 948, 0, 144, 170, 180, 0, 107,
	1197, 1196, 1206, 1207, 1199, 1200, 1201, 1202, 1203, 1204,
	1205, 1198, 0, 0, 947, 0, 1068, 169, 163, 162,
	0, 0, 0, 0, 61, 0, 922, 0, 892, 0,
	0, 0, 0, 0, 1888, 3069, 0, 927, 960, 0,
	0, 0, 906, 0, 902, 1894, 1197, 1196, 1206, 1207,
	1199, 1200, 1201, 1202, 1203, 1204, 1205, 1198, 0, 0,
	676, 956, 0, 0, 0, 1882, 1916, 0, 0, 1883,
	1885, 1887, 0, 1889, 1890, 1891, 1895, 1896, 1897, 1899,
	1902, 1903, 1904, 0, 0, 165, 166, 167, 0, 0,
	1892, 1901, 1893, 0, 0, 0, 0, 957, 961, 0,
	884, 0, 0, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 174, 944, 0, 942,
	946, 964, 0, 0, 1908, 943, 940, 939, 0, 945,
	930, 931, 929, 932, 933, 934, 935, 117, 962, 0,
	963, 168, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 958, 959, 0, 0, 2527, 2528, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1905,
	0, 908, 0, 901, 0, 0, 0, 0, 0, 0,
	0, 0, 905, 904, 0, 0, 1881, 0, 954, 0,
	0, 0, 0, 1880, 953, 0, 0, 0, 0, 886,
	119, 0, 0, 893, 0, 0, 0, 0, 0, 949,
	0, 0, 0, 54, 0, 0, 0, 1898, 0, 0,
	0, 0, 0, 900, 0, 0, 1886, 0, 0, 0,
	0, 1907, 1935, 1935, 1935, 1935, 1868, 0, 0, 0,
	0, 0, 910, 0, 0, 1935, 0, 899, 0, 0,
	0, 898, 0, 0, 0, 0, 3169, 885, 0, 0,
	0, 891, 56, 3171, 0, 0, 1909, 1877, 0, 0,
	0, 0, 0, 0, 0, 0, 1910, 1911, 0, 0,
	0, 0, 0, 889, 0, 0, 0, 952, 0, 0,
	0, 0, 0, 0, 3186, 0, 0, 177, 178, 1076,
	179, 0, 1876, 0, 0, 146, 0, 0, 0, 0,
	52, 0, 0, 0, 0, 0, 0, 0, 1884, 0,
	0, 909, 0, 0, 0, 0, 0, 682, 681, 688,
	678, 123, 0, 0, 0, 0, 123, 0, 0, 685,
	686, 0, 687, 691, 0, 0, 672, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 696, 123, 0, 0,
	0, 1907, 0, 0, 0, 0, 1868, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 41, 0, 0,
	0, 0, 0, 53, 0, 0, 1900, 0, 0, 0,
	0, 0, 0, 0, 124, 125, 1909, 1877, 126, 0,
	700, 0, 0, 702, 0, 0, 1910, 1911, 701, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 907, 0, 0, 0, 0, 0,
	0, 0, 1876, 0, 0, 0, 1762, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1884, 0,
	1762, 0, 0, 3323, 0, 0, 3325, 1867, 1869, 1866,
	0, 1863, 0, 896, 0, 0, 1888, 0, 0, 0,
	0, 0, 0, 3331, 0, 0, 0, 1894, 0, 0,
	0, 0, 0, 0, 0, 1879, 0, 1862, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1882, 1916, 0,
	0, 1883, 1885, 1887, 0, 1889, 1890, 1891, 1895, 1896,
	1897, 1899, 1902, 1903, 1904, 0, 1900, 0, 0, 0,
	0, 0, 1892, 1901, 1893, 999, 0, 123, 0, 0,
	0, 0, 123, 0, 1871, 0, 0, 0, 0, 1935,
	0, 0, 0, 0, 0, 673, 675, 674, 0, 0,
	0, 0, 0, 0, 0, 680, 1908, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 684, 0, 0,
	0, 0, 0, 0, 699, 0, 0, 0, 0, 0,
	0, 677, 0, 1864, 1865, 0, 0, 1867, 2679, 1866,
	0, 2678, 0, 0, 0, 0, 1888, 0, 0, 0,
	0, 1905, 0, 0, 0, 0, 0, 1894, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1881, 0,
	0, 0, 0, 0, 0, 1880, 0, 1882, 1916, 0,
	0, 1883, 1885, 1887, 0, 1889, 1890, 1891, 1895, 1896,
	1897, 1899, 1902, 1903, 1904, 0, 0, 0, 0, 1898,
	0, 0, 1892, 1901, 1893, 0, 0, 0, 1886, 0,
	0, 1066, 0, 0, 1871, 0, 0, 0, 0, 0,
	0, 1913, 1912, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1908, 0, 0, 0,
	0, 679, 683, 689, 0, 690, 692, 0, 0, 693,
	694, 695, 0, 0, 697, 698, 0, 0, 0, 0,
	0, 0, 0, 1864, 1865, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1873, 0, 0, 0, 0, 0,
	3530, 1905, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1881, 0,
	0, 0, 0, 0, 0, 1880, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1915, 0, 0, 1914,
	0, 0, 1066, 0, 0, 0, 0, 0, 0, 1898,
	0, 0, 0, 1052, 0, 0, 0, 1042, 1886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1913, 1912, 1074, 1078, 1080, 1082, 1084, 1085, 1087,
	0, 1092, 1088, 1089, 1090, 1091, 0, 1069, 1070, 1071,
	1072, 1050, 1051, 1075, 0, 1053, 0, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1065, 1067, 1063, 1064,
	1073, 0, 0, 0, 0, 1234, 0, 0, 1077, 1079,
	1081, 1083, 1086, 0, 1873, 0, 123, 0, 0, 0,
	676, 0, 0, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1068, 0, 0, 0,
	0, 0, 0, 0, 1052, 0, 1915, 0, 0, 1914,
	0, 0, 0, 0, 0, 0, 0, 3650, 0, 0,
	0, 0, 0, 1935, 1074, 1078, 1080, 1082, 1084, 1085,
	1087, 0, 1092, 1088, 1089, 1090, 1091, 0, 1069, 1070,
	1071, 1072, 1050, 1051, 1075, 0, 1053, 0, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1065, 1067, 1063,
	1064, 1073, 0, 0, 0, 0, 0, 0, 0, 1077,
	1079, 1081, 1083, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1209, 0, 1213, 0,
	0, 0, 0, 0, 0, 3719, 0, 0, 0, 0,
	0, 0, 0, 0, 1210, 1212, 1208, 1068, 1211, 1197,
	1196, 1206, 1207, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
	1198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 771, 0, 0, 0, 0, 0, 0,
	0, 0, 370, 3719, 495, 528, 517, 601, 483, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 0, 310,
	0, 0, 340, 532, 514, 524, 515, 500, 501, 502,
	509, 320, 503, 504, 505, 475, 506, 476, 507, 508,
	762, 531, 482, 401, 354, 549, 548, 0, 0, 829,
	837, 0, 3719, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 716, 0, 0, 752, 806, 805, 739, 749,
	0, 0, 283, 205, 477, 597, 479, 478, 740, 0,
	741, 745, 748, 744, 742, 743, 0, 821, 0, 0,
	0, 0, 0, 0, 708, 720, 0, 725, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3826, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1076,
	0, 717, 718, 0, 0, 0, 0, 772, 0, 719,
	0, 0, 767, 746, 750, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 747, 770, 774, 304, 843,
	768, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 844, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 765, 0, 594,
	0, 433, 0, 0, 827, 0, 0, 0, 405, 0,
	1076, 337, 0, 0, 123, 769, 0, 391, 372, 840,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 536, 0, 452,
	617, 618, 619, 461, 466, 467, 468, 470, 471, 472,
	473, 537, 554, 521, 491, 454, 545, 488, 492, 493,
	557, 1713, 1712, 1714, 445, 338, 339, 0, 317, 265,
	266, 612, 825, 368, 559, 592, 593, 484, 0, 839,
	820, 822, 823, 826, 830, 831, 832, 833, 834, 836,
	838, 842, 611, 0, 538, 553, 615, 552, 608, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 841, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 773, 534, 535, 358, 359, 360, 361,
	828, 560, 288, 456, 384, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 620, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 850,
	824, 849, 851, 852, 848, 853, 854, 835, 729, 0,
	780, 846, 845, 847, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 609, 606, 416, 610, 0, 267, 490, 341,
	0, 382, 315, 555, 556, 0, 0, 813, 787, 788,
	789, 726, 790, 784, 785, 727, 786, 814, 778, 810,
	811, 754, 781, 791, 809, 792, 812, 815, 816, 855,
	856, 798, 782, 231, 857, 795, 817, 808, 807, 793,
	779, 818, 819, 761, 756, 796, 797, 783, 801, 802,
	803, 728, 775, 776, 777, 799, 800, 757, 758, 759,
	760, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 607, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 595, 596, 598, 600, 804, 602, 771,
	613, 480, 481, 614, 591, 0, 721, 0, 370, 0,
	495, 528, 517, 601, 483, 0, 0, 0, 0, 0,
	0, 724, 0, 0, 0, 310, 1763, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 762, 531, 482, 401,
	354, 549, 548, 0, 0, 829, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 1959, 0, 0, 716, 0,
	0, 752, 806, 805, 739, 749, 0, 0, 283, 205,
	477, 597, 479, 478, 740, 0, 741, 745, 748, 744,
	742, 743, 0, 821, 0, 0, 0, 0, 0, 0,
	708, 720, 0, 725, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 717, 718, 0,
	0, 0, 0, 772, 0, 719, 0, 0, 1960, 746,
	750, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 747, 770, 774, 304, 843, 768, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 844, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 765, 0, 594, 0, 433, 0, 0,
	827, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 769, 0, 391, 372, 840, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 612, 825, 368,
	559, 592, 593, 484, 0, 839, 820, 822, 823, 826,
	830, 831, 832, 833, 834, 836, 838, 842, 611, 0,
	538, 553, 615, 552, 608, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 841,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 773,
	534, 535, 358, 359, 360, 361, 828, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 620, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 850, 824, 849, 851, 852,
	848, 853, 854, 835, 729, 0, 780, 846, 845, 847,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 490, 341, 0, 382, 315, 555,
	556, 0, 0, 813, 787, 788, 789, 726, 790, 784,
	785, 727, 786, 814, 778, 810, 811, 754, 781, 791,
	809, 792, 812, 815, 816, 855, 856, 798, 782, 231,
	857, 795, 817, 808, 807, 793, 779, 818, 819, 761,
	756, 796, 797, 783, 801, 802, 803, 728, 775, 776,
	777, 799, 800, 757, 758, 759, 760, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 607, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 595,
	596, 598, 600, 804, 602, 0, 613, 480, 481, 614,
	591, 0, 721, 182, 771, 0, 0, 0, 0, 0,
	0, 0, 0, 370, 0, 495, 528, 517, 601, 483,
	0, 0, 0, 0, 0, 0, 724, 0, 0, 0,
	310, 0, 0, 340, 532, 514, 524, 515, 500, 501,
	502, 509, 320, 503, 504, 505, 475, 506, 476, 507,
	508, 1218, 531, 482, 401, 354, 549, 548, 0, 0,
	829, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 716, 0, 0, 752, 806, 805, 739,
	749, 0, 0, 283, 205, 477, 597, 479, 478, 740,
	0, 741, 745, 748, 744, 742, 743, 0, 821, 0,
	0, 0, 0, 0, 0, 708, 720, 0, 725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 717, 718, 0, 0, 0, 0, 772, 0,
	719, 0, 0, 767, 746, 750, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 747, 770, 774, 304,
	843, 768, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 844, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 765, 0,
	594, 0, 433, 0, 0, 827, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 769, 0, 391, 372,
	840, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 825, 368, 559, 592, 593, 484, 0,
	839, 820, 822, 823, 826, 830, 831, 832, 833, 834,
	836, 838, 842, 611, 0, 538, 553, 615, 552, 608,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 841, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 773, 534, 535, 358, 359, 360,
	361, 828, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 620,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	850, 824, 849, 851, 852, 848, 853, 854, 835, 729,
	0, 780, 846, 845, 847, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 490,
	341, 146, 382, 315, 555, 556, 0, 0, 813, 787,
	788, 789, 726, 790, 784, 785, 727, 786, 814, 778,
	810, 811, 754, 781, 791, 809, 792, 812, 815, 816,
	855, 856, 798, 782, 231, 857, 795, 817, 808, 807,
	793, 779, 818, 819, 761, 756, 796, 797, 783, 801,
	802, 803, 728, 775, 776, 777, 799, 800, 757, 758,
	759, 760, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 607, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 595, 596, 598, 600, 804, 602,
	771, 613, 480, 481, 614, 591, 0, 721, 0, 370,
	0, 495, 528, 517, 601, 483, 0, 0, 0, 0,
	0, 0, 724, 0, 0, 0, 310, 3825, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 762, 531, 482,
	401, 354, 549, 548, 0, 0, 829, 837, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 716,
	0, 0, 752, 806, 805, 739, 749, 0, 0, 283,
	205, 477, 597, 479, 478, 740, 0, 741, 745, 748,
	744, 742, 743, 0, 821, 0, 0, 0, 0, 0,
	0, 708, 720, 0, 725, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 717, 718,
	0, 0, 0, 0, 772, 0, 719, 0, 0, 767,
	746, 750, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 747, 770, 774, 304, 843, 768, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 844, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 765, 0, 594, 0, 433, 0,
	0, 827, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 769, 0, 391, 372, 840, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 825,
	368, 559, 592, 593, 484, 0, 839, 820, 822, 823,
	826, 830, 831, 832, 833, 834, 836, 838, 842, 611,
	0, 538, 553, 615, 552, 608, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	841, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	773, 534, 535, 358, 359, 360, 361, 828, 560, 288,
	456, 384, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 620, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 850, 824, 849, 851,
	852, 848, 853, 854, 835, 729, 0, 780, 846, 845,
	847, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 490, 341, 0, 382, 315,
	555, 556, 0, 0, 813, 787, 788, 789, 726, 790,
	784, 785, 727, 786, 814, 778, 810, 811, 754, 781,
	791, 809, 792, 812, 815, 816, 855, 856, 798, 782,
	231, 857, 795, 817, 808, 807, 793, 779, 818, 819,
	761, 756, 796, 797, 783, 801, 802, 803, 728, 775,
	776, 777, 799, 800, 757, 758, 759, 760, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 607, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	595, 596, 598, 600, 804, 602, 771, 613, 480, 481,
	614, 591, 0, 721, 0, 370, 0, 495, 528, 517,
	601, 483, 0, 0, 0, 0, 0, 0, 724, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 762, 531, 482, 401, 354, 549, 548,
	0, 0, 829, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 716, 0, 0, 752, 806,
	805, 739, 749, 0, 0, 283, 205, 477, 597, 479,
	478, 740, 0, 741, 745, 748, 744, 742, 743, 0,
	821, 0, 0, 0, 0, 0, 0, 708, 720, 0,
	725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 717, 718, 0, 0, 0, 0,
	772, 0, 719, 0, 0, 767, 746, 750, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 747, 770,
	774, 304, 843, 768, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 844,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	765, 0, 594, 0, 433, 0, 0, 827, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 769, 0,
	391, 372, 840, 3720, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 825, 368, 559, 592, 593,
	484, 0, 839, 820, 822, 823, 826, 830, 831, 832,
	833, 834, 836, 838, 842, 611, 0, 538, 553, 615,
	552, 608, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 841, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 773, 534, 535, 358,
	359, 360, 361, 828, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 620, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 850, 824, 849, 851, 852, 848, 853, 854,
	835, 729, 0, 780, 846, 845, 847, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	813, 787, 788, 789, 726, 790, 784, 785, 727, 786,
	814, 778, 810, 811, 754, 781, 791, 809, 792, 812,
	815, 816, 855, 856, 798, 782, 231, 857, 795, 817,
	808, 807, 793, 779, 818, 819, 761, 756, 796, 797,
	783, 801, 802, 803, 728, 775, 776, 777, 799, 800,
	757, 758, 759, 760, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 607, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 595, 596, 598, 600,
	804, 602, 771, 613, 480, 481, 614, 591, 0, 721,
	0, 370, 0, 495, 528, 517, 601, 483, 0, 0,
	0, 0, 0, 0, 724, 0, 0, 0, 310, 1763,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 762,
	531, 482, 401, 354, 549, 548, 0, 0, 829, 837,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 716, 0, 0, 752, 806, 805, 739, 749, 0,
	0, 283, 205, 477, 597, 479, 478, 740, 0, 741,
	745, 748, 744, 742, 743, 0, 821, 0, 0, 0,
	0, 0, 0, 708, 720, 0, 725, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	717, 718, 0, 0, 0, 0, 772, 0, 719, 0,
	0, 767, 746, 750, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 747, 770, 774, 304, 843, 768,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 844, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 765, 0, 594, 0,
	433, 0, 0, 827, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 769, 0, 391, 372, 840, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 825, 368, 559, 592, 593, 484, 0, 839, 820,
	822, 823, 826, 830, 831, 832, 833, 834, 836, 838,
	842, 611, 0, 538, 553, 615, 552, 608, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 841, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 773, 534, 535, 358, 359, 360, 361, 828,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 620, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 850, 824,
	849, 851, 852, 848, 853, 854, 835, 729, 0, 780,
	846, 845, 847, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 813, 787, 788, 789,
	726, 790, 784, 785, 727, 786, 814, 778, 810, 811,
	754, 781, 791, 809, 792, 812, 815, 816, 855, 856,
	798, 782, 231, 857, 795, 817, 808, 807, 793, 779,
	818, 819, 761, 756, 796, 797, 783, 801, 802, 803,
	728, 775, 776, 777, 799, 800, 757, 758, 759, 760,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	607, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 595, 596, 598, 600, 804, 602, 771, 613,
	480, 481, 614, 591, 0, 721, 0, 370, 0, 495,
	528, 517, 601, 483, 0, 0, 0, 0, 0, 0,
	724, 0, 0, 0, 310, 0, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 762, 531, 482, 401, 354,
	549, 548, 0, 0, 829, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 716, 0, 0,
	752, 806, 805, 739, 749, 0, 0, 283, 205, 477,
	597, 479, 478, 740, 0, 741, 745, 748, 744, 742,
	743, 0, 821, 0, 0, 0, 0, 0, 0, 708,
	720, 0, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 717, 718, 1485, 0,
	0, 0, 772, 0, 719, 0, 0, 767, 746, 750,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	747, 770, 774, 304, 843, 768, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 844, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 765, 0, 594, 0, 433, 0, 0, 827,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	769, 0, 391, 372, 840, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 825, 368, 559,
	592, 593, 484, 0, 839, 820, 822, 823, 826, 830,
	831, 832, 833, 834, 836, 838, 842, 611, 0, 538,
	553, 615, 552, 608, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 841, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 773, 534,
	535, 358, 359, 360, 361, 828, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 620, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 850, 824, 849, 851, 852, 848,
	853, 854, 835, 729, 0, 780, 846, 845, 847, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 813, 787, 788, 789, 726, 790, 784, 785,
	727, 786, 814, 778, 810, 811, 754, 781, 791, 809,
	792, 812, 815, 816, 855, 856, 798, 782, 231, 857,
	795, 817, 808, 807, 793, 779, 818, 819, 761, 756,
	796, 797, 783, 801, 802, 803, 728, 775, 776, 777,
	799, 800, 757, 758, 759, 760, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 607, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 595, 596,
	598, 600, 804, 602, 0, 613, 480, 481, 614, 591,
	771, 721, 0, 2130, 0, 0, 0, 0, 0, 370,
	0, 495, 528, 517, 601, 483, 0, 0, 0, 0,
	0, 0, 724, 0, 0, 0, 310, 0, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 762, 531, 482,
	401, 354, 549, 548, 0, 0, 829, 837, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 716,
	0, 0, 752, 806, 805, 739, 749, 0, 0, 283,
	205, 477, 597, 479, 478, 740, 0, 741, 745, 748,
	744, 742, 743, 0, 821, 0, 0, 0, 0, 0,
	0, 708, 720, 0, 725, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 717, 718,
	0, 0, 0, 0, 772, 0, 719, 0, 0, 767,
	746, 750, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 747, 770, 774, 304, 843, 768, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 844, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 765, 0, 594, 0, 433, 0,
	0, 827, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 769, 0, 391, 372, 840, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 825,
	368, 559, 592, 593, 484, 0, 839, 820, 822, 823,
	826, 830, 831, 832, 833, 834, 836, 838, 842, 611,
	0, 538, 553, 615, 552, 608, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	841, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	773, 534, 535, 358, 359, 360, 361, 828, 560, 288,
	456, 384, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 620, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 850, 824, 849, 851,
	852, 848, 853, 854, 835, 729, 0, 780, 846, 845,
	847, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 490, 341, 0, 382, 315,
	555, 556, 0, 0, 813, 787, 788, 789, 726, 790,
	784, 785, 727, 786, 814, 778, 810, 811, 754, 781,
	791, 809, 792, 812, 815, 816, 855, 856, 798, 782,
	231, 857, 795, 817, 808, 807, 793, 779, 818, 819,
	761, 756, 796, 797, 783, 801, 802, 803, 728, 775,
	776, 777, 799, 800, 757, 758, 759, 760, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 607, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	595, 596, 598, 600, 804, 602, 771, 613, 480, 481,
	614, 591, 0, 721, 0, 370, 0, 495, 528, 517,
	601, 483, 0, 0, 0, 0, 0, 0, 724, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 762, 531, 482, 401, 354, 549, 548,
	0, 0, 829, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 716, 0, 0, 752, 806,
	805, 739, 749, 0, 0, 283, 205, 477, 597, 479,
	478, 740, 0, 741, 745, 748, 744, 742, 743, 0,
	821, 0, 0, 0, 0, 0, 0, 708, 720, 0,
	725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 717, 718, 1756, 0, 0, 0,
	772, 0, 719, 0, 0, 767, 746, 750, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 747, 770,
	774, 304, 843, 768, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 844,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	765, 0, 594, 0, 433, 0, 0, 827, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 769, 0,
	391, 372, 840, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 825, 368, 559, 592, 593,
	484, 0, 839, 820, 822, 823, 826, 830, 831, 832,
	833, 834, 836, 838, 842, 611, 0, 538, 553, 615,
	552, 608, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 841, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 773, 534, 535, 358,
	359, 360, 361, 828, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 620, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 850, 824, 849, 851, 852, 848, 853, 854,
	835, 729, 0, 780, 846, 845, 847, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	813, 787, 788, 789, 726, 790, 784, 785, 727, 786,
	814, 778, 810, 811, 754, 781, 791, 809, 792, 812,
	815, 816, 855, 856, 798, 782, 231, 857, 795, 817,
	808, 807, 793, 779, 818, 819, 761, 756, 796, 797,
	783, 801, 802, 803, 728, 775, 776, 777, 799, 800,
	757, 758, 759, 760, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 607, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 595, 596, 598, 600,
	804, 602, 771, 613, 480, 481, 614, 591, 0, 721,
	0, 370, 0, 495, 528, 517, 601, 483, 0, 0,
	0, 0, 0, 0, 724, 0, 0, 0, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 762,
	531, 482, 401, 354, 549, 548, 0, 0, 829, 837,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 716, 0, 0, 752, 806, 805, 739, 749, 0,
	0, 283, 205, 477, 597, 479, 478, 740, 0, 741,
	745, 748, 744, 742, 743, 0, 821, 0, 0, 0,
	0, 0, 0, 708, 720, 0, 725, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	717, 718, 0, 0, 0, 0, 772, 0, 719, 0,
	0, 767, 746, 750, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 747, 770, 774, 304, 843, 768,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 844, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 765, 0, 594, 0,
	433, 0, 0, 827, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 769, 0, 391, 372, 840, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 825, 368, 559, 592, 593, 484, 0, 839, 820,
	822, 823, 826, 830, 831, 832, 833, 834, 836, 838,
	842, 611, 0, 538, 553, 615, 552, 608, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 841, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 773, 534, 535, 358, 359, 360, 361, 828,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 620, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 850, 824,
	849, 851, 852, 848, 853, 854, 835, 729, 0, 780,
	846, 845, 847, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 813, 787, 788, 789,
	726, 790, 784, 785, 727, 786, 814, 778, 810, 811,
	754, 781, 791, 809, 792, 812, 815, 816, 855, 856,
	798, 782, 231, 857, 795, 817, 808, 807, 793, 779,
	818, 819, 761, 756, 796, 797, 783, 801, 802, 803,
	728, 775, 776, 777, 799, 800, 757, 758, 759, 760,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	607, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 595, 596, 598, 600, 804, 602, 771, 613,
	480, 481, 614, 591, 0, 721, 0, 370, 0, 495,
	528, 517, 601, 483, 0, 0, 0, 0, 0, 0,
	724, 0, 0, 0, 310, 0, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 762, 531, 482, 401, 354,
	549, 548, 0, 0, 829, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 716, 0, 0,
	752, 806, 805, 739, 749, 0, 0, 283, 205, 477,
	597, 479, 478, 2579, 0, 2580, 745, 748, 744, 742,
	743, 0, 821, 0, 0, 0, 0, 0, 0, 708,
	720, 0, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 717, 718, 0, 0,
	0, 0, 772, 0, 719, 0, 0, 767, 746, 750,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	747, 770, 774, 304, 843, 768, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 844, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 765, 0, 594, 0, 433, 0, 0, 827,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	769, 0, 391, 372, 840, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 825, 368, 559,
	592, 593, 484, 0, 839, 820, 822, 823, 826, 830,
	831, 832, 833, 834, 836, 838, 842, 611, 0, 538,
	553, 615, 552, 608, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 841, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 773, 534,
	535, 358, 359, 360, 361, 828, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 620, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 850, 824, 849, 851, 852, 848,
	853, 854, 835, 729, 0, 780, 846, 845, 847, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 813, 787, 788, 789, 726, 790, 784, 785,
	727, 786, 814, 778, 810, 811, 754, 781, 791, 809,
	792, 812, 815, 816, 855, 856, 798, 782, 231, 857,
	795, 817, 808, 807, 793, 779, 818, 819, 761, 756,
	796, 797, 783, 801, 802, 803, 728, 775, 776, 777,
	799, 800, 757, 758, 759, 760, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 607, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 595, 596,
	598, 600, 804, 602, 771, 613, 480, 481, 614, 591,
	0, 721, 0, 370, 0, 495, 528, 517, 601, 483,
	0, 0, 1626, 0, 0, 0, 724, 0, 0, 0,
	310, 0, 0, 340, 532, 514, 524, 515, 500, 501,
	502, 509, 320, 503, 504, 505, 475, 506, 476, 507,
	508, 762, 531, 482, 401, 354, 549, 548, 0, 0,
	829, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 716, 0, 0, 752, 806, 805, 739,
	749, 0, 0, 283, 205, 477, 597, 479, 478, 740,
	0, 741, 745, 748, 744, 742, 743, 0, 821, 0,
	0, 0, 0, 0, 0, 0, 720, 0, 725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 717, 718, 0, 0, 0, 0, 772, 0,
	719, 0, 0, 767, 746, 750, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 747, 770, 774, 304,
	843, 768, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 844, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 765, 0,
	594, 0, 433, 0, 0, 827, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 769, 0, 391, 372,
	840, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 1627, 1628, 536, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 825, 368, 559, 592, 593, 484, 0,
	839, 820, 822, 823, 826, 830, 831, 832, 833, 834,
	836, 838, 842, 611, 0, 538, 553, 615, 552, 608,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 841, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 773, 534, 535, 358, 359, 360,
	361, 828, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 620,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	850, 824, 849, 851, 852, 848, 853, 854, 835, 729,
	0, 780, 846, 845, 847, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 490,
	341, 0, 382, 315, 555, 556, 0, 0, 813, 787,
	788, 789, 726, 790, 784, 785, 727, 786, 814, 778,
	810, 811, 754, 781, 791, 809, 792, 812, 815, 816,
	855, 856, 798, 782, 231, 857, 795, 817, 808, 807,
	793, 779, 818, 819, 761, 756, 796, 797, 783, 801,
	802, 803, 728, 775, 776, 777, 799, 800, 757, 758,
	759, 760, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 607, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 595, 596, 598, 600, 804, 602,
	771, 613, 480, 481, 614, 591, 0, 721, 0, 370,
	0, 495, 528, 517, 601, 483, 0, 0, 0, 0,
	0, 0, 724, 0, 0, 0, 310, 0, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 762, 531, 482,
	401, 354, 549, 548, 0, 0, 829, 837, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 716,
	0, 0, 752, 806, 805, 739, 749, 0, 0, 283,
	205, 477, 597, 479, 478, 740, 0, 741, 745, 748,
	744, 742, 743, 0, 821, 0, 0, 0, 0, 0,
	0, 0, 720, 0, 725, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 717, 718,
	0, 0, 0, 0, 772, 0, 719, 0, 0, 767,
	746, 750, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 747, 770, 774, 304, 843, 768, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 844, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 765, 0, 594, 0, 433, 0,
	0, 827, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 769, 0, 391, 372, 840, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 825,
	368, 559, 592, 593, 484, 0, 839, 820, 822, 823,
	826, 830, 831, 832, 833, 834, 836, 838, 842, 611,
	0, 538, 553, 615, 552, 608, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	841, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	773, 534, 535, 358, 359, 360, 361, 828, 560, 288,
	456, 384, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 620, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 850, 824, 849, 851,
	852, 848, 853, 854, 835, 729, 0, 780, 846, 845,
	847, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 490, 341, 0, 382, 315,
	555, 556, 0, 0, 813, 787, 788, 789, 726, 790,
	784, 785, 727, 786, 814, 778, 810, 811, 754, 781,
	791, 809, 792, 812, 815, 816, 855, 856, 798, 782,
	231, 857, 795, 817, 808, 807, 793, 779, 818, 819,
	761, 756, 796, 797, 783, 801, 802, 803, 728, 775,
	776, 777, 799, 800, 757, 758, 759, 760, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 607, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	595, 596, 598, 600, 804, 602, 771, 613, 480, 481,
	614, 591, 0, 721, 0, 370, 0, 495, 528, 517,
	601, 483, 0, 0, 0, 0, 0, 0, 724, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 762, 531, 482, 401, 354, 549, 548,
	0, 0, 829, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 752, 806,
	805, 739, 749, 0, 0, 283, 205, 477, 597, 479,
	478, 740, 0, 741, 745, 748, 744, 742, 743, 0,
	821, 0, 0, 0, 0, 0, 0, 708, 720, 0,
	725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 717, 718, 0, 0, 0, 0,
	772, 0, 719, 0, 0, 767, 746, 750, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 747, 770,
	774, 304, 843, 768, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 844,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	765, 0, 594, 0, 433, 0, 0, 827, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 769, 0,
	391, 372, 840, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 825, 368, 559, 592, 593,
	484, 0, 839, 820, 822, 823, 826, 830, 831, 832,
	833, 834, 836, 838, 842, 611, 0, 538, 553, 615,
	552, 608, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 841, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 773, 534, 535, 358,
	359, 360, 361, 828, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 620, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 850, 824, 849, 851, 852, 848, 853, 854,
	835, 729, 0, 780, 846, 845, 847, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	813, 787, 788, 789, 726, 790, 784, 785, 727, 786,
	814, 778, 810, 811, 754, 781, 791, 809, 792, 812,
	815, 816, 855, 856, 798, 782, 231, 857, 795, 817,
	808, 807, 793, 779, 818, 819, 761, 756, 796, 797,
	783, 801, 802, 803, 728, 775, 776, 777, 799, 800,
	757, 758, 759, 760, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 607, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 595, 596, 598, 600,
	804, 602, 0, 613, 480, 481, 614, 591, 0, 721,
	182, 55, 171, 145, 0, 0, 0, 0, 0, 0,
	370, 0, 495, 528, 517, 601, 483, 0, 172, 0,
	0, 0, 0, 0, 0, 164, 0, 310, 0, 173,
	340, 532, 514, 524, 515, 500, 501, 502, 509, 320,
	503, 504, 505, 475, 506, 476, 507, 508, 121, 531,
	482, 401, 354, 549, 548, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	283, 205, 477, 597, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 144, 170,
	180, 0, 107, 0, 590, 0, 0, 594, 0, 433,
	0, 0, 197, 0, 0, 0, 405, 0, 0, 337,
	169, 163, 162, 449, 0, 391, 372, 209, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 536, 0, 452, 569, 570,
	571, 461, 466, 467, 468, 470, 471, 472, 473, 537,
	554, 521, 491, 454, 545, 488, 492, 493, 557, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 428,
	303, 368, 559, 592, 593, 484, 0, 546, 485, 494,
	295, 518, 530, 529, 364, 444, 200, 541, 544, 474,
	210, 0, 538, 553, 511, 552, 211, 374, 0, 395,
	550, 497, 0, 542, 516, 0, 543, 512, 547, 0,
	486, 0, 402, 426, 438, 455, 458, 487, 572, 573,
	574, 270, 457, 576, 577, 578, 579, 580, 581, 582,
	575, 429, 519, 496, 522, 437, 499, 498, 0, 0,
	533, 453, 534, 535, 358, 359, 360, 361, 321, 560,
	288, 456, 384, 119, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 526, 523, 208, 0, 583, 584,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 527, 463, 586, 589, 587,
	588, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 513, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 567, 566, 565, 564, 563, 562,
	561, 0, 0, 510, 412, 297, 259, 293, 294, 301,
	383, 278, 416, 394, 0, 267, 490, 341, 146, 382,
	315, 555, 556, 52, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 558,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 0, 427, 489, 212,
	41, 198, 201, 203, 202, 0, 53, 539, 551, 585,
	5, 595, 596, 598, 600, 599, 602, 124, 213, 480,
	481, 214, 591, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 370, 0, 495, 528, 517, 601, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 0, 340, 532, 514, 524, 515, 500, 501,
	502, 509, 320, 503, 504, 505, 475, 506, 476, 507,
	508, 121, 531, 482, 401, 354, 549, 548, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 283, 205, 477, 597, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 2272,
	2275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	594, 2276, 433, 0, 0, 0, 2271, 0, 2270, 405,
	2268, 2273, 337, 0, 0, 0, 449, 0, 391, 372,
	616, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 2274, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 303, 368, 559, 592, 593, 484, 0,
	546, 485, 494, 295, 518, 530, 529, 364, 444, 0,
	541, 544, 474, 611, 0, 538, 553, 615, 552, 608,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 429, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 453, 534, 535, 358, 359, 360,
	361, 321, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 620,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 490,
	341, 146, 382, 315, 555, 556, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 558, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 607, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 480, 481, 614, 591, 370, 0, 495, 528,
	517, 601, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 340, 532, 514, 524,
	515, 500, 501, 502, 509, 320, 503, 504, 505, 475,
	506, 476, 507, 508, 0, 531, 482, 401, 354, 549,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1253, 0, 0, 204,
	0, 0, 739, 749, 0, 0, 283, 205, 477, 597,
	479, 478, 740, 0, 741, 745, 748, 744, 742, 743,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 747,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 0, 0, 594, 0, 433, 0, 0, 0, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 449,
	0, 391, 372, 616, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 536, 0, 452, 617, 618, 619, 461, 466, 467,
	468, 470, 471, 472, 473, 537, 554, 521, 491, 454,
	545, 488, 492, 493, 557, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 612, 303, 368, 559, 592,
	593, 484, 0, 546, 485, 494, 295, 518, 530, 529,
	364, 444, 0, 541, 544, 474, 611, 0, 538, 553,
	615, 552, 608, 374, 0, 395, 550, 497, 0, 542,
	516, 0, 543, 512, 547, 0, 486, 0, 402, 426,
	438, 455, 458, 487, 572, 573, 574, 270, 457, 576,
	577, 578, 579, 580, 581, 582, 575, 429, 519, 496,
	522, 437, 499, 498, 0, 0, 533, 453, 534, 535,
	358, 359, 360, 361, 321, 560, 288, 456, 384, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 525,
	526, 523, 620, 0, 583, 584, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 527, 463, 586, 589, 587, 588, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 513, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	567, 566, 565, 564, 563, 562, 561, 0, 0, 510,
	412, 297, 259, 293, 294, 301, 609, 606, 416, 610,
	0, 267, 490, 341, 0, 382, 315, 555, 556, 0,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 558, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 0, 427, 489, 607, 0, 0, 0, 0,
	0, 0, 0, 539, 551, 585, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 480, 481, 614, 591, 182,
	55, 171, 145, 0, 0, 0, 0, 0, 0, 370,
	639, 495, 528, 517, 601, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 0, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 0, 531, 482,
	401, 354, 549, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 645, 0, 0, 0, 0, 0, 644,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 283,
	205, 477, 597, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 0, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 643, 0, 590, 0, 0, 594, 0, 433, 0,
	0, 0, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 616, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 303,
	368, 559, 592, 593, 484, 0, 546, 485, 494, 295,
	518, 530, 529, 364, 444, 0, 541, 544, 474, 611,
	0, 538, 553, 615, 552, 608, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	429, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	453, 534, 535, 358, 359, 360, 361, 640, 642, 288,
	456, 384, 653, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 620, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 490, 341, 146, 382, 315,
	555, 556, 0, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 558, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 607, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	595, 596, 598, 600, 599, 602, 0, 613, 480, 481,
	614, 591, 370, 0, 495, 528, 517, 601, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 0, 340, 532, 514, 524, 515, 500, 501, 502,
	509, 320, 503, 504, 505, 475, 506, 476, 507, 508,
	0, 531, 482, 401, 354, 549, 548, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 283, 205, 477, 597, 479, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 2272, 2275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 0, 420, 448, 304, 439,
	0, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 464, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 594,
	2276, 433, 0, 0, 0, 2271, 0, 2270, 405, 2268,
	2273, 337, 0, 0, 0, 449, 0, 391, 372, 616,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 2274, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 536, 0, 452,
	617, 618, 619, 461, 466, 467, 468, 470, 471, 472,
	473, 537, 554, 521, 491, 454, 545, 488, 492, 493,
	557, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 612, 303, 368, 559, 592, 593, 484, 0, 546,
	485, 494, 295, 518, 530, 529, 364, 444, 0, 541,
	544, 474, 611, 0, 538, 553, 615, 552, 608, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 429, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 453, 534, 535, 358, 359, 360, 361,
	321, 560, 288, 456, 384, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 620, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 609, 606, 416, 610, 0, 267, 490, 341,
	0, 382, 315, 555, 556, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 558, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 607, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 480, 481, 614, 591, 370, 0, 495, 528, 517,
	601, 483, 0, 1066, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 0, 531, 482, 401, 354, 549, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 283, 205, 477, 597, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 2423, 2426, 2427, 2428, 2429,
	2430, 2431, 0, 2436, 2432, 2433, 2434, 2435, 0, 2418,
	2419, 2420, 2421, 1050, 2402, 2424, 0, 2403, 366, 2404,
	2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412, 2415, 2416,
	2413, 2414, 2422, 378, 344, 379, 327, 356, 355, 357,
	1077, 1079, 1081, 1083, 1086, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	0, 0, 594, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 2417, 0,
	391, 372, 616, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 303, 368, 559, 592, 593,
	484, 0, 546, 485, 494, 295, 518, 530, 529, 364,
	444, 0, 541, 544, 474, 611, 0, 538, 553, 615,
	552, 608, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 429, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 453, 534, 535, 358,
	359, 360, 361, 321, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 620, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 2425, 341, 0, 382, 315, 555, 556, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 558, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 607, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 595, 596, 598, 600,
	599, 602, 0, 613, 480, 481, 614, 591, 370, 0,
	495, 528, 517, 601, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 0, 531, 482, 401,
	354, 549, 548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 283, 205,
	477, 597, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 2293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 594, 2292, 433, 0, 0,
	0, 2298, 2295, 2297, 405, 0, 2296, 337, 0, 0,
	0, 449, 0, 391, 372, 616, 0, 2290, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 612, 303, 368,
	559, 592, 593, 484, 0, 546, 485, 494, 295, 518,
	530, 529, 364, 444, 0, 541, 544, 474, 611, 0,
	538, 553, 615, 552, 608, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 429,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 453,
	534, 535, 358, 359, 360, 361, 321, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 620, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 490, 341, 0, 382, 315, 555,
	556, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 558, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 607, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 480, 481, 614,
	591, 370, 0, 495, 528, 517, 601, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 0,
	531, 482, 401, 354, 549, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 283, 205, 477, 597, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 2293, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 0, 594, 2292,
	433, 0, 0, 0, 2298, 2295, 2297, 405, 0, 2296,
	337, 0, 0, 0, 449, 0, 391, 372, 616, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 303, 368, 559, 592, 593, 484, 0, 546, 485,
	494, 295, 518, 530, 529, 364, 444, 0, 541, 544,
	474, 611, 0, 538, 553, 615, 552, 608, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 429, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 453, 534, 535, 358, 359, 360, 361, 321,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 620, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	558, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	607, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	480, 481, 614, 591, 370, 0, 495, 528, 517, 601,
	483, 0, 0, 0, 0, 0, 2000, 0, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 0, 531, 482, 401, 354, 549, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	2001, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 1183, 1184, 1185, 1182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 594, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 559, 592, 593, 484,
	0, 546, 485, 494, 295, 518, 530, 529, 364, 444,
	0, 541, 544, 474, 611, 0, 538, 553, 615, 552,
	608, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 429, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 453, 534, 535, 358, 359,
	360, 361, 321, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	620, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	490, 341, 0, 382, 315, 555, 556, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 558, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 607, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 595, 596, 598, 600, 599,
	602, 182, 613, 480, 481, 614, 591, 0, 0, 0,
	0, 370, 0, 495, 528, 517, 601, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 121,
	531, 482, 401, 354, 549, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 2050, 0, 204, 0, 0, 0, 0, 0,
	0, 283, 205, 477, 597, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 0, 594, 0,
	433, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 449, 0, 391, 372, 616, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 303, 368, 559, 592, 593, 484, 0, 546, 485,
	494, 295, 518, 530, 529, 364, 444, 0, 541, 544,
	474, 611, 0, 538, 553, 615, 552, 608, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 429, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 453, 534, 535, 358, 359, 360, 361, 321,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 620, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 490, 341, 146,
	382, 315, 555, 556, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	558, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	607, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 595, 596, 598, 600, 599, 602, 182, 613,
	480, 481, 614, 591, 0, 0, 0, 0, 370, 0,
	495, 528, 517, 601, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 121, 531, 482, 401,
	354, 549, 548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 2036,
	0, 204, 0, 0, 0, 0, 0, 0, 283, 205,
	477, 597, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 594, 0, 433, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 616, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 612, 303, 368,
	559, 592, 593, 484, 0, 546, 485, 494, 295, 518,
	530, 529, 364, 444, 0, 541, 544, 474, 611, 0,
	538, 553, 615, 552, 608, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 429,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 453,
	534, 535, 358, 359, 360, 361, 321, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 620, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 490, 341, 146, 382, 315, 555,
	556, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 558, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 607, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 480, 481, 614,
	591, 370, 0, 495, 528, 517, 601, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 982,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 0,
	531, 482, 401, 354, 549, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 989, 990, 0, 0, 0,
	0, 283, 205, 477, 597, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 993, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	977, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 967,
	431, 277, 966, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 0, 594, 0,
	433, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 449, 0, 391, 372, 616, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 980, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 303, 368, 559, 592, 593, 484, 0, 546, 485,
	494, 295, 518, 530, 529, 364, 444, 0, 541, 544,
	474, 611, 0, 538, 553, 615, 552, 608, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	981, 575, 429, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 984, 534, 535, 358, 359, 360, 361, 321,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 620, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 991, 978, 987, 979, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 988, 513, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	558, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	607, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 595, 596, 598, 600, 599, 602, 182, 613,
	480, 481, 614, 591, 0, 0, 0, 0, 370, 0,
	495, 528, 517, 601, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 121, 531, 482, 401,
	354, 549, 548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1933, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 283, 205,
	477, 597, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 594, 0, 433, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 616, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 612, 303, 368,
	559, 592, 593, 484, 0, 546, 485, 494, 295, 518,
	530, 529, 364, 444, 0, 541, 544, 474, 611, 0,
	538, 553, 615, 552, 608, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 429,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 453,
	534, 535, 358, 359, 360, 361, 321, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 620, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 490, 341, 146, 382, 315, 555,
	556, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 558, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 607, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 480, 481, 614,
	591, 370, 0, 495, 528, 517, 601, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 0,
	531, 482, 401, 354, 549, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 989, 990, 0, 0, 0,
	0, 283, 205, 477, 597, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 993, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 967,
	431, 277, 966, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 0, 594, 0,
	433, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 449, 0, 391, 372, 616, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 303, 368, 559, 592, 593, 484, 0, 546, 485,
	494, 295, 518, 530, 529, 364, 444, 0, 541, 544,
	474, 611, 0, 538, 553, 615, 552, 608, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 429, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 453, 534, 535, 358, 359, 360, 361, 321,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 620, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 991, 1952, 987, 1953, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 988, 513, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	558, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	607, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	480, 481, 614, 591, 370, 0, 495, 528, 517, 601,
	483, 0, 0, 2789, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 0, 531, 482, 401, 354, 549, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 2792, 0, 0, 2791, 590, 0,
	0, 594, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 559, 592, 593, 484,
	0, 546, 485, 494, 295, 518, 530, 529, 364, 444,
	0, 541, 544, 474, 611, 0, 538, 553, 615, 552,
	608, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 429, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 453, 534, 535, 358, 359,
	360, 361, 321, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	620, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	490, 341, 0, 382, 315, 555, 556, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 558, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 607, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 480, 481, 614, 591, 370, 0, 495,
	528, 517, 601, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 1451, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 0, 531, 482, 401, 354,
	549, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 1449, 0, 0, 0, 283, 205, 477,
	597, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 594, 0, 433, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 616, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 303, 368, 559,
	592, 593, 484, 0, 546, 485, 494, 295, 518, 530,
	529, 364, 444, 0, 541, 544, 474, 611, 0, 538,
	553, 615, 552, 608, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 429, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 453, 534,
	535, 358, 359, 360, 361, 321, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 620, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 558, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 607, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 480, 481, 614, 591,
	370, 0, 495, 528, 517, 601, 483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 1445, 0,
	340, 532, 514, 524, 515, 500, 501, 502, 509, 320,
	503, 504, 505, 475, 506, 476, 507, 508, 0, 531,
	482, 401, 354, 549, 548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 1449, 0, 0, 0,
	283, 205, 477, 597, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1447, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 0, 0, 594, 0, 433,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 449, 0, 391, 372, 616, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 536, 0, 452, 617, 618,
	619, 461, 466, 467, 468, 470, 471, 472, 473, 537,
	554, 521, 491, 454, 545, 488, 492, 493, 557, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 612,
	303, 368, 559, 592, 593, 484, 0, 546, 485, 494,
	295, 518, 530, 529, 364, 444, 0, 541, 544, 474,
	611, 0, 538, 553, 615, 552, 608, 374, 0, 395,
	550, 497, 0, 542, 516, 0, 543, 512, 547, 0,
	486, 0, 402, 426, 438, 455, 458, 487, 572, 573,
	574, 270, 457, 576, 577, 578, 579, 580, 581, 582,
	575, 429, 519, 496, 522, 437, 499, 498, 0, 0,
	533, 453, 534, 535, 358, 359, 360, 361, 321, 560,
	288, 456, 384, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 526, 523, 620, 0, 583, 584,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 527, 463, 586, 589, 587,
	588, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 513, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 567, 566, 565, 564, 563, 562,
	561, 0, 0, 510, 412, 297, 259, 293, 294, 301,
	609, 606, 416, 610, 0, 267, 490, 341, 0, 382,
	315, 555, 556, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 558,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 0, 427, 489, 607,
	0, 0, 0, 0, 0, 0, 0, 539, 551, 585,
	0, 595, 596, 598, 600, 599, 602, 0, 613, 480,
	481, 614, 591, 370, 0, 495, 528, 517, 601, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 0, 340, 532, 514, 524, 515, 500, 501,
	502, 509, 320, 503, 504, 505, 475, 506, 476, 507,
	508, 0, 531, 482, 401, 354, 549, 548, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3780, 0, 204, 806, 0, 0,
	0, 0, 0, 283, 205, 477, 597, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	594, 0, 433, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	616, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 303, 368, 559, 592, 593, 484, 0,
	546, 485, 494, 295, 518, 530, 529, 364, 444, 0,
	541, 544, 474, 611, 0, 538, 553, 615, 552, 608,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 429, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 453, 534, 535, 358, 359, 360,
	361, 321, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 620,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 490,
	341, 0, 382, 315, 555, 556, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 558, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 607, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 480, 481, 614, 591, 370, 0, 495, 528,
	517, 601, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 340, 532, 514, 524,
	515, 500, 501, 502, 509, 320, 503, 504, 505, 475,
	506, 476, 507, 508, 0, 531, 482, 401, 354, 549,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 1449, 0, 0, 0, 283, 205, 477, 597,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1447, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 0, 0, 594, 0, 433, 0, 0, 0, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 449,
	0, 391, 372, 616, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 536, 0, 452, 617, 618, 619, 461, 466, 467,
	468, 470, 471, 472, 473, 537, 554, 521, 491, 454,
	545, 488, 492, 493, 557, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 612, 303, 368, 559, 592,
	593, 484, 0, 546, 485, 494, 295, 518, 530, 529,
	364, 444, 0, 541, 544, 474, 611, 0, 538, 553,
	615, 552, 608, 374, 0, 395, 550, 497, 0, 542,
	516, 0, 543, 512, 547, 0, 486, 0, 402, 426,
	438, 455, 458, 487, 572, 573, 574, 270, 457, 576,
	577, 578, 579, 580, 581, 582, 575, 429, 519, 496,
	522, 437, 499, 498, 0, 0, 533, 453, 534, 535,
	358, 359, 360, 361, 321, 560, 288, 456, 384, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 525,
	526, 523, 620, 0, 583, 584, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 527, 463, 586, 589, 587, 588, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 513, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	567, 566, 565, 564, 563, 562, 561, 0, 0, 510,
	412, 297, 259, 293, 294, 301, 609, 606, 416, 610,
	0, 267, 490, 341, 0, 382, 315, 555, 556, 0,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 558, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 0, 427, 489, 607, 0, 0, 0, 0,
	0, 0, 0, 539, 551, 585, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 480, 481, 614, 591, 370,
	0, 495, 528, 517, 601, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 0, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 0, 531, 482,
	401, 354, 549, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 1449, 0, 0, 0, 283,
	205, 477, 597, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1656,
	0, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 0, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 0, 0, 594, 0, 433, 0,
	0, 0, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 616, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 303,
	368, 559, 592, 593, 484, 0, 546, 485, 494, 295,
	518, 530, 529, 364, 444, 0, 541, 544, 474, 611,
	0, 538, 553, 615, 552, 608, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	429, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	453, 534, 535, 358, 359, 360, 361, 321, 560, 288,
	456, 384, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 620, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 490, 341, 0, 382, 315,
	555, 556, 0, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 558, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 607, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	595, 596, 598, 600, 599, 602, 0, 613, 480, 481,
	614, 591, 370, 0, 495, 528, 517, 601, 483, 0,
	0, 0, 0, 0, 2366, 0, 0, 0, 0, 310,
	0, 0, 340, 532, 514, 524, 515, 500, 501, 502,
	509, 320, 503, 504, 505, 475, 506, 476, 507, 508,
	0, 531, 482, 401, 354, 549, 548, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 2368, 0,
	0, 0, 283, 205, 477, 597, 479, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 0, 420, 448, 304, 439,
	0, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 464, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 594,
	0, 433, 0, 0, 0, 0, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 449, 0, 391, 372, 616,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 536, 0, 452,
	617, 618, 619, 461, 466, 467, 468, 470, 471, 472,
	473, 537, 554, 521, 491, 454, 545, 488, 492, 493,
	557, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 612, 303, 368, 559, 592, 593, 484, 0, 546,
	485, 494, 295, 518, 530, 529, 364, 444, 0, 541,
	544, 474, 611, 0, 538, 553, 615, 552, 608, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 429, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 453, 534, 535, 358, 359, 360, 361,
	321, 560, 288, 456, 384, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 620, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 609, 606, 416, 610, 0, 267, 490, 341,
	0, 382, 315, 555, 556, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 558, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 607, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 480, 481, 614, 591, 370, 0, 495, 528, 517,
	601, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 0, 531, 482, 401, 354, 549, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 2985, 2987, 0, 0, 283, 205, 477, 597, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 0, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	0, 0, 594, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 616, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 303, 368, 559, 592, 593,
	484, 0, 546, 485, 494, 295, 518, 530, 529, 364,
	444, 0, 541, 544, 474, 611, 0, 538, 553, 615,
	552, 608, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 429, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 453, 534, 535, 358,
	359, 360, 361, 321, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 620, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 558, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 607, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 595, 596, 598, 600,
	599, 602, 0, 613, 480, 481, 614, 591, 370, 0,
	495, 528, 517, 601, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 2387, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 0, 531, 482, 401,
	354, 549, 548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 1449, 0, 0, 0, 283, 205,
	477, 597, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 594, 0, 433, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 616, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 612, 303, 368,
	559, 592, 593, 484, 0, 546, 485, 494, 295, 518,
	530, 529, 364, 444, 0, 541, 544, 474, 611, 0,
	538, 553, 615, 552, 608, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 429,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 453,
	534, 535, 358, 359, 360, 361, 321, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 620, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 490, 341, 0, 382, 315, 555,
	556, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 558, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 607, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 480, 481, 614,
	591, 370, 0, 495, 528, 517, 601, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 627, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 0,
	531, 482, 401, 354, 549, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 283, 205, 477, 597, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 0, 594, 0,
	433, 0, 626, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 449, 0, 391, 372, 616, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 303, 368, 559, 592, 593, 484, 0, 546, 485,
	494, 295, 518, 530, 529, 364, 444, 0, 541, 544,
	474, 611, 0, 538, 553, 615, 552, 608, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 429, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 453, 534, 535, 358, 359, 360, 361, 321,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 620, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	558, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	607, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	480, 481, 614, 591, 370, 0, 495, 528, 517, 601,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 0, 531, 482, 401, 354, 549, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 806, 0,
	0, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 594, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 559, 592, 593, 484,
	0, 546, 485, 494, 295, 518, 530, 529, 364, 444,
	0, 541, 544, 474, 611, 0, 538, 553, 615, 552,
	608, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 429, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 453, 534, 535, 358, 359,
	360, 361, 321, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	620, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	490, 341, 0, 382, 315, 555, 556, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 558, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 607, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 480, 481, 614, 591, 370, 0, 495,
	528, 517, 601, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 0, 531, 482, 401, 354,
	549, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3759, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 283, 205, 477,
	597, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 594, 0, 433, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 616, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 303, 368, 559,
	592, 593, 484, 0, 546, 485, 494, 295, 518, 530,
	529, 364, 444, 0, 541, 544, 474, 611, 0, 538,
	553, 615, 552, 608, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 429, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 453, 534,
	535, 358, 359, 360, 361, 321, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 620, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 558, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 607, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 480, 481, 614, 591,
	370, 0, 495, 528, 517, 601, 483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 0, 0,
	340, 532, 514, 524, 515, 500, 501, 502, 509, 320,
	503, 504, 505, 475, 506, 476, 507, 508, 0, 531,
	482, 401, 354, 549, 548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 3542, 0, 0, 0,
	283, 205, 477, 597, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 0, 0, 594, 0, 433,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 449, 0, 391, 372, 616, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 536, 0, 452, 617, 618,
	619, 461, 466, 467, 468, 470, 471, 472, 473, 537,
	554, 521, 491, 454, 545, 488, 492, 493, 557, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 612,
	303, 368, 559, 592, 593, 484, 0, 546, 485, 494,
	295, 518, 530, 529, 364, 444, 0, 541, 544, 474,
	611, 0, 538, 553, 615, 552, 608, 374, 0, 395,
	550, 497, 0, 542, 516, 0, 543, 512, 547, 0,
	486, 0, 402, 426, 438, 455, 458, 487, 572, 573,
	574, 270, 457, 576, 577, 578, 579, 580, 581, 582,
	575, 429, 519, 496, 522, 437, 499, 498, 0, 0,
	533, 453, 534, 535, 358, 359, 360, 361, 321, 560,
	288, 456, 384, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 526, 523, 620, 0, 583, 584,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 527, 463, 586, 589, 587,
	588, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 513, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 567, 566, 565, 564, 563, 562,
	561, 0, 0, 510, 412, 297, 259, 293, 294, 301,
	609, 606, 416, 610, 0, 267, 490, 341, 0, 382,
	315, 555, 556, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 558,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 0, 427, 489, 607,
	0, 0, 0, 0, 0, 0, 0, 539, 551, 585,
	0, 595, 596, 598, 600, 599, 602, 0, 613, 480,
	481, 614, 591, 370, 0, 495, 528, 517, 601, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 0, 340, 532, 514, 524, 515, 500, 501,
	502, 509, 320, 503, 504, 505, 475, 506, 476, 507,
	508, 0, 531, 482, 401, 354, 549, 548, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 283, 205, 477, 597, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	594, 0, 433, 0, 0, 0, 3669, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	616, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 303, 368, 559, 592, 593, 484, 0,
	546, 485, 494, 295, 518, 530, 529, 364, 444, 0,
	541, 544, 474, 611, 0, 538, 553, 615, 552, 608,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 429, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 453, 534, 535, 358, 359, 360,
	361, 321, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 620,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 490,
	341, 0, 382, 315, 555, 556, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 558, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 607, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 480, 481, 614, 591, 370, 0, 495, 528,
	517, 601, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 340, 532, 514, 524,
	515, 500, 501, 502, 509, 320, 503, 504, 505, 475,
	506, 476, 507, 508, 0, 531, 482, 401, 354, 549,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3393, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 283, 205, 477, 597,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 0, 0, 594, 0, 433, 0, 0, 0, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 449,
	0, 391, 372, 616, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 536, 0, 452, 617, 618, 619, 461, 466, 467,
	468, 470, 471, 472, 473, 537, 554, 521, 491, 454,
	545, 488, 492, 493, 557, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 612, 303, 368, 559, 592,
	593, 484, 0, 546, 485, 494, 295, 518, 530, 529,
	364, 444, 0, 541, 544, 474, 611, 0, 538, 553,
	615, 552, 608, 374, 0, 395, 550, 497, 0, 542,
	516, 0, 543, 512, 547, 0, 486, 0, 402, 426,
	438, 455, 458, 487, 572, 573, 574, 270, 457, 576,
	577, 578, 579, 580, 581, 582, 575, 429, 519, 496,
	522, 437, 499, 498, 0, 0, 533, 453, 534, 535,
	358, 359, 360, 361, 321, 560, 288, 456, 384, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 525,
	526, 523, 620, 0, 583, 584, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 527, 463, 586, 589, 587, 588, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 513, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	567, 566, 565, 564, 563, 562, 561, 0, 0, 510,
	412, 297, 259, 293, 294, 301, 609, 606, 416, 610,
	0, 267, 490, 341, 0, 382, 315, 555, 556, 0,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 558, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 0, 427, 489, 607, 0, 0, 0, 0,
	0, 0, 0, 539, 551, 585, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 480, 481, 614, 591, 370,
	0, 495, 528, 517, 601, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 0, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 0, 531, 482,
	401, 354, 549, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3557, 0, 204, 0, 0, 0, 0, 0, 0, 283,
	205, 477, 597, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 0, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 0, 0, 594, 0, 433, 0,
	0, 0, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 616, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 303,
	368, 559, 592, 593, 484, 0, 546, 485, 494, 295,
	518, 530, 529, 364, 444, 0, 541, 544, 474, 611,
	0, 538, 553, 615, 552, 608, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	429, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	453, 534, 535, 358, 359, 360, 361, 321, 560, 288,
	456, 384, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 620, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 490, 341, 0, 382, 315,
	555, 556, 0, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 558, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 607, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	595, 596, 598, 600, 599, 602, 0, 613, 480, 481,
	614, 591, 370, 0, 495, 528, 517, 601, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 0, 340, 532, 514, 524, 515, 500, 501, 502,
	509, 320, 503, 504, 505, 475, 506, 476, 507, 508,
	0, 531, 482, 401, 354, 549, 548, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 283, 205, 477, 597, 479, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 0, 420, 448, 304, 439,
	0, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 464, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 594,
	0, 433, 0, 0, 0, 3481, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 449, 0, 391, 372, 616,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 536, 0, 452,
	617, 618, 619, 461, 466, 467, 468, 470, 471, 472,
	473, 537, 554, 521, 491, 454, 545, 488, 492, 493,
	557, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 612, 303, 368, 559, 592, 593, 484, 0, 546,
	485, 494, 295, 518, 530, 529, 364, 444, 0, 541,
	544, 474, 611, 0, 538, 553, 615, 552, 608, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 429, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 453, 534, 535, 358, 359, 360, 361,
	321, 560, 288, 456, 384, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 620, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 609, 606, 416, 610, 0, 267, 490, 341,
	0, 382, 315, 555, 556, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 558, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 607, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 480, 481, 614, 591, 370, 0, 495, 528, 517,
	601, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 0, 531, 482, 401, 354, 549, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 3018, 0, 0, 0, 283, 205, 477, 597, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 0, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	0, 0, 594, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 616, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 303, 368, 559, 592, 593,
	484, 0, 546, 485, 494, 295, 518, 530, 529, 364,
	444, 0, 541, 544, 474, 611, 0, 538, 553, 615,
	552, 608, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 429, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 453, 534, 535, 358,
	359, 360, 361, 321, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 620, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 558, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 607, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 595, 596, 598, 600,
	599, 602, 0, 613, 480, 481, 614, 591, 370, 0,
	495, 528, 517, 601, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 0, 531, 482, 401,
	354, 549, 548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 283, 205,
	477, 597, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3036,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 594, 0, 433, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 616, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 612, 303, 368,
	559, 592, 593, 484, 0, 546, 485, 494, 295, 518,
	530, 529, 364, 444, 0, 541, 544, 474, 611, 0,
	538, 553, 615, 552, 608, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 429,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 453,
	534, 535, 358, 359, 360, 361, 321, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 620, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 490, 341, 0, 382, 315, 555,
	556, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 558, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 607, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 480, 481, 614,
	591, 370, 0, 495, 528, 517, 601, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 0,
	531, 482, 401, 354, 549, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1933, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 283, 205, 477, 597, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 0, 594, 0,
	433, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 449, 0, 391, 372, 616, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 303, 368, 559, 592, 593, 484, 0, 546, 485,
	494, 295, 518, 530, 529, 364, 444, 0, 541, 544,
	474, 611, 0, 538, 553, 615, 552, 608, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 429, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 453, 534, 535, 358, 359, 360, 361, 321,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 620, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	558, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	607, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	480, 481, 614, 591, 370, 0, 495, 528, 517, 601,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 0, 531, 482, 401, 354, 549, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 594, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 559, 592, 593, 484,
	0, 546, 485, 494, 295, 518, 530, 529, 364, 444,
	0, 541, 544, 474, 611, 0, 538, 553, 615, 552,
	608, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 429, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 453, 534, 535, 358, 359,
	360, 361, 321, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	620, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	490, 341, 0, 382, 315, 555, 556, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 558, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 607, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 480, 481, 614, 591, 370, 0, 495,
	528, 517, 601, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 0, 531, 482, 401, 354,
	549, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 283, 205, 477,
	597, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2889, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 594, 0, 433, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 616, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 303, 368, 559,
	592, 593, 484, 0, 546, 485, 494, 295, 518, 530,
	529, 364, 444, 0, 541, 544, 474, 611, 0, 538,
	553, 615, 552, 608, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 429, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 453, 534,
	535, 358, 359, 360, 361, 321, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 620, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 558, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 607, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 480, 481, 614, 591,
	370, 0, 495, 528, 517, 601, 483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 0, 0,
	340, 532, 514, 524, 515, 500, 501, 502, 509, 320,
	503, 504, 505, 475, 506, 476, 507, 508, 0, 531,
	482, 401, 354, 549, 548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 1449, 0, 0, 0,
	283, 205, 477, 597, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 0, 0, 594, 0, 433,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 449, 0, 391, 372, 616, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 536, 0, 452, 617, 618,
	619, 461, 466, 467, 468, 470, 471, 472, 473, 537,
	554, 521, 491, 454, 545, 488, 492, 493, 557, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 612,
	303, 368, 559, 592, 593, 484, 0, 546, 485, 494,
	295, 518, 530, 529, 364, 444, 0, 541, 544, 474,
	611, 0, 538, 553, 615, 552, 608, 374, 0, 395,
	550, 497, 0, 542, 516, 0, 543, 512, 547, 0,
	486, 0, 402, 426, 438, 455, 458, 487, 572, 573,
	574, 270, 457, 576, 577, 578, 579, 580, 581, 582,
	575, 429, 519, 496, 522, 437, 499, 498, 0, 0,
	533, 453, 534, 535, 358, 359, 360, 361, 321, 560,
	288, 456, 384, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 526, 523, 620, 0, 583, 584,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 527, 463, 586, 589, 587,
	588, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 513, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 567, 566, 565, 564, 563, 562,
	561, 0, 0, 510, 412, 297, 259, 293, 294, 301,
	609, 606, 416, 610, 0, 267, 490, 341, 0, 382,
	315, 555, 556, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 558,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 0, 427, 489, 607,
	0, 0, 0, 0, 0, 0, 0, 539, 551, 585,
	0, 595, 596, 598, 600, 599, 602, 0, 613, 480,
	481, 614, 591, 370, 0, 495, 528, 517, 601, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 0, 340, 532, 514, 524, 515, 500, 501,
	502, 509, 320, 503, 504, 505, 475, 506, 476, 507,
	508, 0, 531, 482, 401, 354, 549, 548, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 2368,
	0, 0, 0, 283, 205, 477, 597, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	594, 0, 433, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	616, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 303, 368, 559, 592, 593, 484, 0,
	546, 485, 494, 295, 518, 530, 529, 364, 444, 0,
	541, 544, 474, 611, 0, 538, 553, 615, 552, 608,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 429, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 453, 534, 535, 358, 359, 360,
	361, 321, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 620,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 490,
	341, 0, 382, 315, 555, 556, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 558, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 607, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 480, 481, 614, 591, 370, 0, 495, 528,
	517, 601, 483, 0, 0, 2713, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 340, 532, 514, 524,
	515, 500, 501, 502, 509, 320, 503, 504, 505, 475,
	506, 476, 507, 508, 0, 531, 482, 401, 354, 549,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 283, 205, 477, 597,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 0, 0, 594, 0, 433, 0, 0, 0, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 449,
	0, 391, 372, 616, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 536, 0, 452, 617, 618, 619, 461, 466, 467,
	468, 470, 471, 472, 473, 537, 554, 521, 491, 454,
	545, 488, 492, 493, 557, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 612, 303, 368, 559, 592,
	593, 484, 0, 546, 485, 494, 295, 518, 530, 529,
	364, 444, 0, 541, 544, 474, 611, 0, 538, 553,
	615, 552, 608, 374, 0, 395, 550, 497, 0, 542,
	516, 0, 543, 512, 547, 0, 486, 0, 402, 426,
	438, 455, 458, 487, 572, 573, 574, 270, 457, 576,
	577, 578, 579, 580, 581, 582, 575, 429, 519, 496,
	522, 437, 499, 498, 0, 0, 533, 453, 534, 535,
	358, 359, 360, 361, 321, 560, 288, 456, 384, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 525,
	526, 523, 620, 0, 583, 584, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 527, 463, 586, 589, 587, 588, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 513, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	567, 566, 565, 564, 563, 562, 561, 0, 0, 510,
	412, 297, 259, 293, 294, 301, 609, 606, 416, 610,
	0, 267, 490, 341, 0, 382, 315, 555, 556, 0,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 558, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 0, 427, 489, 607, 0, 0, 0, 0,
	0, 0, 0, 539, 551, 585, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 480, 481, 614, 591, 370,
	0, 495, 528, 517, 601, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 0, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 0, 531, 482,
	401, 354, 549, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 283,
	205, 477, 597, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2071, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 0, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 0, 0, 594, 0, 433, 0,
	0, 0, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 616, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 303,
	368, 559, 592, 593, 484, 0, 546, 485, 494, 295,
	518, 530, 529, 364, 444, 0, 541, 544, 474, 611,
	0, 538, 553, 615, 552, 608, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	429, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	453, 534, 535, 358, 359, 360, 361, 321, 560, 288,
	456, 384, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 620, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 490, 341, 0, 382, 315,
	555, 556, 0, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 558, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 607, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	595, 596, 598, 600, 599, 602, 0, 613, 480, 481,
	614, 591, 370, 0, 495, 528, 517, 601, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 0, 340, 532, 514, 524, 515, 500, 501, 502,
	509, 320, 503, 504, 505, 475, 506, 476, 507, 508,
	0, 531, 482, 401, 354, 549, 548, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 283, 205, 477, 597, 479, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 0, 420, 448, 304, 439,
	0, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 464, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 594,
	0, 433, 0, 0, 0, 0, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 449, 0, 391, 372, 616,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 536, 0, 452,
	617, 618, 619, 461, 466, 467, 468, 470, 471, 472,
	473, 537, 554, 521, 491, 454, 545, 488, 492, 493,
	557, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 612, 303, 368, 559, 592, 593, 484, 0, 546,
	485, 494, 295, 518, 530, 529, 364, 444, 0, 541,
	544, 474, 611, 0, 538, 553, 615, 552, 608, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 429, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 453, 534, 535, 358, 359, 360, 361,
	321, 560, 288, 456, 384, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 620, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 609, 606, 416, 610, 0, 267, 490, 341,
	0, 382, 315, 555, 556, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 558, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 607, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 480, 481, 614, 591, 370, 0, 495, 528, 517,
	601, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 0, 531, 482, 401, 354, 549, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 2443, 0, 0, 0, 283, 205, 477, 597, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 0, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	0, 0, 594, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 616, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 303, 368, 559, 592, 593,
	484, 0, 546, 485, 494, 295, 518, 530, 529, 364,
	444, 0, 541, 544, 474, 611, 0, 538, 553, 615,
	552, 608, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 429, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 453, 534, 535, 358,
	359, 360, 361, 321, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 620, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 558, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 607, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 595, 596, 598, 600,
	599, 602, 2227, 613, 480, 481, 614, 591, 370, 0,
	495, 528, 517, 601, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 0, 531, 482, 401,
	354, 549, 548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 283, 205,
	477, 597, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 594, 0, 433, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 616, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 612, 303, 368,
	559, 592, 593, 484, 0, 546, 485, 494, 295, 518,
	530, 529, 364, 444, 0, 541, 544, 474, 611, 0,
	538, 553, 615, 552, 608, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 429,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 453,
	534, 535, 358, 359, 360, 361, 321, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 620, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 490, 341, 0, 382, 315, 555,
	556, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 558, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 607, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 480, 481, 614,
	591, 370, 0, 495, 528, 517, 601, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 0,
	531, 482, 401, 354, 549, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 1792, 0,
	0, 283, 205, 477, 597, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 0, 594, 0,
	433, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 449, 0, 391, 372, 616, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 303, 368, 559, 592, 593, 484, 0, 546, 485,
	494, 295, 518, 530, 529, 364, 444, 0, 541, 544,
	474, 611, 0, 538, 553, 615, 552, 608, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 429, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 453, 534, 535, 358, 359, 360, 361, 321,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 620, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	558, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	607, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	480, 481, 614, 591, 370, 0, 495, 528, 517, 601,
	483, 0, 1919, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 0, 531, 482, 401, 354, 549, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 594, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 559, 592, 593, 484,
	0, 546, 485, 494, 295, 518, 530, 529, 364, 444,
	0, 541, 544, 474, 611, 0, 538, 553, 615, 552,
	608, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 429, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 453, 534, 535, 358, 359,
	360, 361, 321, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	620, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	490, 341, 0, 382, 315, 555, 556, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 558, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 607, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 480, 481, 614, 591, 370, 0, 495,
	528, 517, 601, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 0, 531, 482, 401, 354,
	549, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 1449, 0, 0, 0, 283, 205, 477,
	597, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 594, 0, 433, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 616, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 1825, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 303, 368, 559,
	592, 593, 484, 0, 546, 485, 494, 295, 518, 530,
	529, 364, 444, 0, 541, 544, 474, 611, 0, 538,
	553, 615, 552, 608, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 429, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 453, 534,
	535, 358, 359, 360, 361, 321, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 620, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 558, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 607, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 480, 481, 614, 591,
	370, 0, 495, 528, 517, 601, 483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 0, 0,
	340, 532, 514, 524, 515, 500, 501, 502, 509, 320,
	503, 504, 505, 475, 506, 476, 507, 508, 0, 531,
	482, 401, 354, 549, 548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	283, 205, 477, 597, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 0, 0, 594, 0, 433,
	0, 0, 1479, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 449, 0, 391, 372, 616, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 536, 0, 452, 617, 618,
	619, 461, 466, 467, 468, 470, 471, 472, 473, 537,
	554, 521, 491, 454, 545, 488, 492, 493, 557, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 612,
	303, 368, 559, 592, 593, 484, 0, 546, 485, 494,
	295, 518, 530, 529, 364, 444, 0, 541, 544, 474,
	611, 0, 538, 553, 615, 552, 608, 374, 0, 395,
	550, 497, 0, 542, 516, 0, 543, 512, 547, 0,
	486, 0, 402, 426, 438, 455, 458, 487, 572, 573,
	574, 270, 457, 576, 577, 578, 579, 580, 581, 582,
	575, 429, 519, 496, 522, 437, 499, 498, 0, 0,
	533, 453, 534, 535, 358, 359, 360, 361, 321, 560,
	288, 456, 384, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 526, 523, 620, 0, 583, 584,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 527, 463, 586, 589, 587,
	588, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 513, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 567, 566, 565, 564, 563, 562,
	561, 0, 0, 510, 412, 297, 259, 293, 294, 301,
	609, 606, 416, 610, 0, 267, 490, 341, 0, 382,
	315, 555, 556, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 558,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 0, 427, 489, 607,
	0, 0, 0, 0, 0, 0, 0, 539, 551, 585,
	0, 595, 596, 598, 600, 599, 602, 0, 613, 480,
	481, 614, 591, 370, 0, 495, 528, 517, 601, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 627,
	310, 0, 0, 340, 532, 514, 524, 515, 500, 501,
	502, 509, 320, 503, 504, 505, 475, 506, 476, 507,
	508, 0, 531, 482, 401, 354, 549, 548, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 283, 205, 477, 597, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	594, 0, 433, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	616, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 303, 368, 559, 592, 593, 484, 0,
	546, 485, 494, 295, 518, 530, 529, 364, 444, 0,
	541, 544, 474, 611, 0, 538, 553, 615, 552, 608,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 429, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 453, 534, 535, 358, 359, 360,
	361, 321, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 620,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 490,
	341, 0, 382, 315, 555, 556, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 558, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 607, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 480, 481, 614, 591, 370, 0, 495, 528,
	517, 601, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 340, 532, 514, 524,
	515, 500, 501, 502, 509, 320, 503, 504, 505, 475,
	506, 476, 507, 508, 0, 531, 482, 401, 354, 549,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 283, 205, 477, 597,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 0, 637, 594, 0, 433, 0, 0, 0, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 449,
	0, 391, 372, 616, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 536, 0, 452, 617, 618, 619, 461, 466, 467,
	468, 470, 471, 472, 473, 537, 554, 521, 491, 454,
	545, 488, 492, 493, 557, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 612, 303, 368, 559, 592,
	593, 484, 0, 546, 485, 494, 295, 518, 530, 529,
	364, 444, 0, 541, 544, 474, 611, 0, 538, 553,
	615, 552, 608, 374, 0, 395, 550, 497, 0, 542,
	516, 0, 543, 512, 547, 0, 486, 0, 402, 426,
	438, 455, 458, 487, 572, 573, 574, 270, 457, 576,
	577, 578, 579, 580, 581, 582, 575, 429, 519, 496,
	522, 437, 499, 498, 0, 0, 533, 453, 534, 535,
	358, 359, 360, 361, 321, 560, 288, 456, 384, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 525,
	526, 523, 620, 0, 583, 584, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 527, 463, 586, 589, 587, 588, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 513, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	567, 566, 565, 564, 563, 562, 561, 0, 0, 510,
	412, 297, 259, 293, 294, 301, 609, 606, 416, 610,
	0, 267, 490, 341, 0, 382, 315, 555, 556, 0,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 558, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 0, 427, 489, 607, 0, 0, 0, 0,
	0, 0, 0, 539, 551, 585, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 480, 481, 614, 591, 370,
	0, 495, 528, 517, 601, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 0, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 0, 531, 482,
	401, 354, 549, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 283,
	205, 477, 597, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 0, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 0, 0, 594, 0, 433, 0,
	0, 0, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 616, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 303,
	368, 559, 592, 593, 484, 0, 546, 485, 494, 295,
	518, 530, 529, 364, 444, 0, 541, 544, 474, 611,
	0, 538, 553, 615, 552, 608, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	429, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	453, 534, 535, 358, 359, 360, 361, 321, 560, 288,
	456, 384, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 620, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	919, 0, 510, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 490, 341, 0, 382, 315,
	555, 556, 0, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 558, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 607, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	595, 596, 598, 600, 599, 602, 0, 613, 480, 481,
	614, 591, 370, 0, 495, 528, 517, 601, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 0, 340, 532, 514, 524, 515, 500, 501, 502,
	509, 320, 503, 504, 505, 475, 506, 476, 507, 508,
	0, 531, 482, 401, 354, 549, 548, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 283, 205, 477, 597, 479, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 0, 420, 448, 304, 439,
	0, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 464, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 594,
	0, 433, 0, 0, 0, 0, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 449, 0, 391, 372, 616,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 536, 0, 452,
	617, 618, 619, 461, 466, 467, 468, 470, 471, 472,
	473, 537, 554, 521, 491, 454, 545, 488, 492, 493,
	557, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 612, 303, 368, 559, 592, 593, 484, 0, 546,
	485, 494, 295, 518, 530, 529, 364, 444, 0, 541,
	544, 474, 611, 0, 538, 553, 615, 552, 608, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 429, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 453, 534, 535, 358, 359, 360, 361,
	321, 560, 288, 456, 384, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 620, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 609, 606, 416, 610, 0, 267, 490, 341,
	0, 382, 315, 555, 556, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 558, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 607, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 480, 481, 614, 591, 370, 0, 495, 528, 517,
	601, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 0, 531, 482, 401, 354, 549, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 283, 205, 477, 597, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 406, 1429, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 0, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	0, 0, 594, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 616, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 303, 368, 559, 592, 593,
	484, 0, 546, 485, 494, 295, 518, 530, 529, 364,
	444, 0, 541, 544, 474, 611, 0, 538, 553, 615,
	552, 608, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 429, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 453, 534, 535, 358,
	359, 360, 361, 321, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 620, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 558, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 607, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 595, 596, 598, 600,
	599, 602, 0, 613, 480, 481, 614, 591, 370, 0,
	495, 528, 517, 601, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 0, 531, 482, 401,
	354, 549, 548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 283, 205,
	477, 597, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 1427, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 594, 0, 433, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 616, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 612, 303, 368,
	559, 592, 593, 484, 0, 546, 485, 494, 295, 518,
	530, 529, 364, 444, 0, 541, 544, 474, 611, 0,
	538, 553, 615, 552, 608, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 429,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 453,
	534, 535, 358, 359, 360, 361, 321, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 620, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 490, 341, 0, 382, 315, 555,
	556, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 558, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 607, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 480, 481, 614,
	591, 370, 0, 495, 528, 517, 601, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 0,
	531, 482, 401, 354, 549, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 283, 205, 477, 597, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 0, 594, 0,
	433, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 449, 0, 391, 372, 616, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 703, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 303, 368, 559, 592, 593, 484, 0, 546, 485,
	494, 295, 518, 530, 529, 364, 444, 0, 541, 544,
	474, 611, 0, 538, 553, 615, 552, 608, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 429, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 453, 534, 535, 358, 359, 360, 361, 321,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 620, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	558, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	607, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	480, 481, 614, 591, 370, 0, 495, 528, 517, 601,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 0, 531, 482, 401, 354, 549, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 594, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 661, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 559, 592, 593, 484,
	0, 546, 485, 494, 295, 518, 530, 529, 364, 444,
	0, 541, 544, 474, 611, 0, 538, 553, 615, 552,
	608, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 662, 575, 429, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 453, 534, 535, 358, 359,
	360, 361, 321, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	620, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 1689, 0, 0, 0, 0, 682, 681, 688, 678,
	0, 0, 254, 0, 0, 0, 0, 0, 685, 686,
	0, 687, 691, 0, 0, 672, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 696, 0, 510, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	490, 341, 0, 382, 315, 555, 556, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 558, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	1907, 427, 489, 607, 0, 0, 0, 182, 0, 0,
	0, 539, 551, 585, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 480, 481, 614, 591, 0, 0, 3402,
	0, 0, 0, 0, 0, 1909, 0, 0, 0, 0,
	0, 0, 0, 0, 1685, 1183, 1184, 1185, 1182, 0,
	0, 1682, 0, 0, 0, 1684, 1681, 1683, 1687, 1688,
	0, 0, 0, 1686, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1884, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 673, 675, 674, 0, 0, 0,
	0, 0, 0, 0, 680, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1689, 0, 684, 0, 0, 0,
	0, 0, 0, 699, 0, 0, 0, 0, 0, 0,
	677, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1900, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1670, 1671, 1672, 1673,
	1674, 1675, 1676, 1677, 1678, 1679, 1680, 1692, 1693, 1694,
	1695, 1696, 1697, 1690, 1691, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1907, 0, 0, 0,
	0, 0, 0, 0, 0, 1888, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1894, 0, 0, 0,
	679, 683, 689, 0, 690, 692, 0, 0, 693, 694,
	695, 1909, 0, 697, 698, 0, 1882, 1916, 0, 0,
	1883, 1885, 1887, 0, 1889, 1890, 1891, 1895, 1896, 1897,
	1899, 1902, 1903, 1904, 0, 0, 0, 1685, 0, 0,
	0, 1892, 1901, 1893, 1682, 0, 0, 0, 1684, 1681,
	1683, 1687, 1688, 0, 0, 0, 1686, 0, 1907, 0,
	0, 0, 0, 1884, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1908, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1909, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1905, 0, 0, 0, 0, 0, 0, 3534, 0, 0,
	0, 1900, 0, 0, 0, 0, 0, 1881, 0, 0,
	0, 0, 0, 0, 1880, 1884, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1898, 676,
	0, 0, 0, 0, 0, 0, 0, 1886, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1670,
	1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680,
	1692, 1693, 1694, 1695, 1696, 1697, 1690, 1691, 0, 0,
	0, 1888, 0, 1900, 0, 0, 0, 0, 0, 0,
	0, 0, 1894, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1882, 1916, 0, 0, 1883, 1885, 1887, 0,
	1889, 1890, 1891, 1895, 1896, 1897, 1899, 1902, 1903, 1904,
	0, 0, 0, 0, 0, 0, 0, 1892, 1901, 1893,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 1888, 0, 0, 0, 0, 0, 0,
	0, 1908, 0, 0, 1894, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1882, 1916, 0, 0, 1883, 1885,
	1887, 0, 1889, 1890, 1891, 1895, 1896, 1897, 1899, 1902,
	1903, 1904, 0, 0, 0, 0, 1905, 0, 0, 1892,
	1901, 1893, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1881, 0, 0, 0, 0, 0, 0,
	1880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1908, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1898, 0, 0, 0, 0, 0,
	0, 0, 0, 1886, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1905, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1881, 0, 0, 0, 0,
	0, 0, 1880, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1898, 0, 0, 0,
	0, 0, 0, 0, 0, 1886,
}

var yyPact = [...]int{
	302, -1000, -1000, -1000, -300, 13717, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 44399, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 384, 44399, -297, 27848, 42560, -1000, -1000, 2577,
	-1000, 43173, 15576, 44399, 451, 428, 44399, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 848, -1000, 46851,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 755, 3554, 46238,
	10628, -216, -1000, 1712, -41, 2416, 417, 1005, 1011, 991,
	991, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3973, 883, 43786, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3703,
	463, 883, 20488, 63, 59, 1712, 416, -108, -107, -109,
	3368, -1000, 1095, 3804, 213, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10628, 10628, 13717, -340,
	13717, 10628, 44399, 44399, -1000, -1000, -1000, -1000, -297, 43173,
	755, 3554, 10628, 2416, 417, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -107, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -108, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -109, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 59, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 4670, -1000, 1506, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2180, 2945, 1497, 2415, 669, 42560, 44399, -1000, 148,
	669, -1000, -1000, -1000, 1712, 3339, -1000, 44399, 44399, 175,
	1717, -1000, 442, 421, 400, 290, 1492, -1000, -1000, -1000,
	-1000, -1000, -1000, 578, 3291, -1000, 44399, 44399, 2965, 44399,
	-1000, 2115, 620, 4354, 3148, 1319, 864, 2975, -1000, -1000,
	2944, -1000, 303, 245, 254, 790, 365, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 253, -1000, 3205, -1000, -1000, 283,
	-1000, -1000, 288, -1000, -1000, -1000, 56, -1000, -1000, -1000,
	-1000, -1000, -1000, -34, -1000, -1000, 1054, 2060, 10628, 2540,
	-1000, 4901, 1522, -1000, -1000, -1000, 6310, 12476, 12476, 12476,
	12476, 44399, -1000, -1000, 2766, 10628, 2943, 2942, 2941, 2940,
	-1000, -1000, -1000, -1000, -1000, -1000, 1486, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1873, -1000, -1000, -1000,
	13092, -1000, 2938, 2931, 2929, 2907, 2904, 2903, 2902, 2901,
	2896, 2893, 2878, 2871, 2870, 2864, 2615, 14953, 2863, 2410,
	2409, 2862, 2860, 2856, 2408, 2855, 2853, 2850, 2615, 2615,
	2849, 2839, 2838, 2837, 2835, 2834, 2831, 2830, 2829, 2828,
	2827, 2824, 2803, 2798, 2797, 2796, 2791, 2790, 2788, 2787,
	2785, 2780, 2779, 2778, 2777, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1265, -1000,
	2775, 3303, 2700, -1000, 3190, 3184, 3180, 3176, -265, 2774,
	2099, -1000, -1000, 120, 3289, 44399, -1000, -81, -1000, -1000,
	964, -1000, 960, -1000, 740, 44399, 44399, 189, 772, 740,
	740, 740, 740, 740, 815, 740, 3217, 847, 845, 844,
	823, 740, -57, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1714, 1713, 3034, 936, -1000, -1000, -1000, -1000, 1361, 44399,
	-1000, 2693, 1566, 1566, 3268, 3216, 637, 636, 587, 1566,
	512, -1000, 1693, 1693, 1693, 1693, 1566, 480, 629, 3225,
	3225, 92, 1693, 34, 1566, 1566, 34, 1566, 1566, -1000,
	1676, 255, -273, -1000, -1000, -1000, -1000, 1693, 1693, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3199, 3198, 755, 755,
	44399, 181, 44399, 755, 755, 755, 768, 66, 45625, 45012,
	2115, 612, 598, 1372, 1705, -1000, 1672, 44399, 44399, 1672,
	1672, 23557, 22944, -1000, 44399, -1000, 3303, 2700, 2611, 1446,
	2609, 2700, -117, -118, -120, 755, 755, 755, 755, 755,
	252, 755, 755, 755, 755, 755, 44399, 44399, 41947, 755,
	755, 755, 8774, 8774, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 13717, 1801, 2041, 209, -12, -289, 269,
	-1000, -1000, 44399, 3109, 266, -1000, -1000, -1000, 2629, -1000,
	2676, 2676, 2676, 2676, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2676, 2676, 2684, 2773, -1000, -1000, 2672,
	2672, 2672, 2629, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2677, 2677,
	2683, 2683, 2677, 44399, -135, -1000, -1000, 10628, 44399, 3134,
	407, 2772, 669, -1000, -1000, 44399, 104, 408, 3303, 3133,
	3225, 3262, -1000, -1000, 1484, 2091, 2406, -1000, 290, -1000,
	429, 290, 1570, -1000, 1029, -1000, -1000, -1000, -1000, -1000,
	44399, -34, 433, -1000, -1000, 2396, 2771, -1000, 590, 1285,
	1353, -1000, 306, 47333, 35817, 2115, 35817, 44399, -1000, -1000,
	-1000, -1000, -1000, -1000, 48, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 286,
	-1000, 10628, 10628, 10628, 10628, 10628, -1000, 704, 11860, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12476, 12476, 12476, 12476,
	12476, 12476, 12476, 12476, 12476, 12476, 12476, 12476, 2765, 1639,
	12476, 12476, 12476, 12476, 25396, 1446, 3065, 1363, 296, 1522,
	1522, 1522, 1522, 10628, -1000, 1732, 2060, 10628, 10628, 10628,
	10628, 44399, -1000, -1000, 47394, 10628, 10628, 47151, 10628, 3170,
	10628, 10628, 10628, 2607, 5069, 44399, 10628, -1000, 2606, 2604,
	-1000, -1000, 1895, 10628, -1000, -1000, 10628, -1000, -1000, 10628,
	12476, 10628, -1000, 10628, 10628, 10628, -1000, -1000, 2584, 3170,
	3170, 3170, 1658, 10628, 10628, 3170, 3170, 3170, 1651, 3170,
	3170, 3170, 3170, 3170, 3170, 3170, 3170, 3170, 3170, 2597,
	2595, 2594, 10012, 3225, -216, -1000, 8158, 3133, 3225, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -267,
	2770, 44399, 2402, 2401, -309, 999, 464, 50, 1001, 970,
	973, -1000, 44399, 1756, 3166, -1000, 2768, 44399, 740, 740,
	740, -1000, 40108, 35817, 44399, 44399, 2115, 44399, 44399, 44399,
	740, 740, 740, 740, 44399, -1000, 3078, 35817, 3042, 768,
	-1000, 44399, 1361, 3164, 44399, 3268, 12476, 12476, -1000, -1000,
	10628, 41334, 1693, 1566, 1566, -1000, -1000, 44399, -1000, -1000,
	-1000, 1693, 44399, 1693, 1693, 3268, 1693, -1000, -1000, -1000,
	1566, 1566, -1000, -1000, 10628, -1000, -1000, 1693, 1693, -1000,
	-1000, 3268, 44399, 45, 3268, 3268, 100, -1000, -1000, -1000,
	1566, 44399, 44399, 740, 44399, -1000, 44399, 44399, -1000, -1000,
	44399, 44399, 4265, 40108, 40721, 3197, -1000, 35817, 44399, 44399,
	33978, -1000, 1272, -1000, 6, -1000, 39, 66, 1672, 66,
	1672, -1000, 585, 588, 21718, 522, 35817, 5685, -1000, -1000,
	1672, 1672, 5685, 5685, 1524, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1360, -1000, 248, 3225, -1000, -1000, -1000, -1000,
	-1000, 2090, 2088, 2079, 44399, 40108, 35817, 2115, 44399, 755,
	44399, 44399, 44399, 44399, 44399, -1000, 2767, 1483, -1000, 3144,
	44399, 44399, 44399, 1218, -1000, -1000, 18641, 1482, 1218, -1000,
	1810, -1000, 10628, 13717, -250, 10628, 13717, 13717, 10628, 13717,
	-1000, 10628, 246, -1000, -1000, -1000, -1000, 2078, -1000, 2077,
	-1000, -1000, -1000, -1000, -1000, 2400, 2400, -1000, 2070, -1000,
	-1000, -1000, -1000, 2068, -1000, -1000, 2066, -1000, -1000, -1000,
	-1000, -158, 2590, 1054, -1000, 2397, 2973, -217, -1000, 19875,
	44399, 44399, 407, -311, -1000, 1711, 1709, 1708, -1000, -217,
	-1000, 19258, 44399, 3225, -1000, -231, 3133, 10628, 44399, -1000,
	3214, -1000, -1000, 290, -1000, 458, 362, -1000, -1000, -1000,
	-1000, -1000, -1000, 1431, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 360, 1359, -1000, 44399, -1000, -1000,
	306, 35817, 37656, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	243, -1000, -1000, 182, -1000, 805, 221, 1567, -1000, -1000,
	196, 214, 176, 869, 2060, -1000, 1755, 1755, 1760, -1000,
	671, -1000, -1000, -1000, -1000, 2766, -1000, -1000, -1000, 2857,
	2171, -1000, 1635, 1635, 1515, 1515, 1515, 1515, 1515, 1675,
	1675, -1000, -1000, -1000, 6310, 2765, 12476, 12476, 12476, 12476,
	825, 825, 3948, 3902, -1000, -1000, -1000, -1000, 10628, 183,
	1804, -1000, 10628, 2881, 1518, 2610, 1349, 1430, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2573, 2569,
	2119, 3288, 2568, 10628, -1000, -1000, 1565, 1539, 1536, -1000,
	2143, 9396, -1000, -1000, -1000, 2567, 1428, 2562, -1000, -1000,
	-1000, 2553, 1531, 1109, 2552, 1798, 2551, 2550, 2545, 2542,
	1351, 10628, 10628, 10628, 10628, 2539, 1530, 1521, 10628, 10628,
	10628, 10628, 2535, 10628, 10628, 10628, 10628, 10628, 10628, 10628,
	10628, 10628, 10628, 127, 127, 127, 1323, 1300, -1000, -1000,
	1512, -1000, 2060, -1000, -1000, 3133, -1000, 2757, 2063, 1282,
	-1000, -1000, -291, 2329, 44399, 996, 44399, -1000, -1000, 995,
	953, 968, 3212, 3139, 44399, 1089, 2755, 44399, 44399, 44399,
	241, -1000, -1000, 1276, -1000, 221, 236, 461, 1080, 2964,
	3287, -137, 44399, 44399, 44399, 44399, 3163, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 39495, -1000, 2740, 1510, -1000,
	-1000, 1522, 1522, 2060, 2963, 44399, 44399, 3268, 3268, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1693, 3268, 3268, 1197,
	1566, 1693, -1000, -1000, 1693, -330, -1000, 1693, -1000, -330,
	1421, -330, 44399, -1000, -1000, -1000, 3162, 2693, 1279, -1000,
	-1000, -1000, 3261, 1010, 718, 718, 967, 506, 3259, 17415,
	-1000, 1580, 992, 798, 3097, 300, -1000, 1580, -155, 701,
	1580, 1580, 1580, 1580, 1580, 1580, 1580, 565, 562, 1580,
	1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
	1009, 1580, 1580, 1580, 1580, 1580, -1000, 1580, 2735, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 586, 229, 3196, 335,
	-1000, 332, 1276, 3195, 354, 2900, 1156, -1000, -1000, -1000,
	-1000, 26009, 26009, 21105, 26009, -1000, 215, 66, 22, -1000,
	-1000, 1272, 5685, 1272, 5685, -1000, -1000, 794, -1000, -1000,
	1080, -1000, 44399, 44399, -1000, -1000, 2732, 1690, -1000, -1000,
	14953, -1000, 5685, 5685, -1000, -1000, 27235, 44399, -1000, -37,
	-1000, -27, 3133, -1000, -1000, -1000, 1267, -1000, -1000, 1271,
	1080, 2972, 44399, 1267, 1267, 1267, -1000, -1000, 16802, 44399,
	44399, -1000, -1000, -1000, 3268, 8774, -1000, 33978, -1000, -1000,
	38882, -1000, 38269, 3268, 1727, -1000, 13717, 1997, 198, -1000,
	263, -304, 191, 1750, 190, 2060, -1000, -1000, 2534, 2532,
	1487, -1000, 1477, 2519, 1460, 1454, 2038, -1000, 28, -1000,
	3116, 1081, -1000, 2730, -1000, 1449, 3024, -1000, 1253, -1000,
	1687, 1442, -1000, -1000, -1000, 10628, 10628, 10628, 1081, 1441,
	3022, 1253, 3133, 2392, -1000, 1252, -1000, 2069, 1416, 167,
	-1000, -1000, -1000, 44399, 755, 2396, 1400, 37656, 1159, -1000,
	793, 1408, 1399, -1000, 35817, 294, 35817, -1000, 35817, -1000,
	-1000, 381, -1000, 44399, 3131, -1000, -1000, -1000, 2329, 1685,
	-327, 44399, -1000, -1000, -1000, -1000, -1000, 1394, -1000, 825,
	825, 3948, 3764, -1000, 12476, -1000, 12476, 2953, -1000, 1715,
	-1000, 10628, 1837, 3800, 10628, 3800, 1720, 24783, 44399, -1000,
	-1000, 10628, 10628, -1000, 2936, -1000, -1000, -1000, -1000, 10628,
	10628, 2111, -1000, 44399, -1000, -1000, -1000, -1000, 24783, -1000,
	12476, -1000, -1000, -1000, -1000, 10628, 1161, 1161, 2905, 1386,
	127, 127, 127, 2897, 2851, 2846, 1380, 127, 2753, 2733,
	2698, 2651, 2603, 2593, 2571, 2528, 2470, 2403, -1000, 2722,
	-1000, -1000, 1896, 11244, 8158, -1000, -1000, 291, 1243, 2036,
	2385, 133, -1000, 1674, -1000, 44399, 1068, -1000, -1000, -1000,
	946, 405, -1000, 262, 2515, 1225, -1000, -1000, 44399, -1000,
	-1000, -1000, 16802, 2693, 2721, 2693, 156, 1580, 577, 35817,
	597, -1000, 44399, 44399, 2072, 1668, 2971, 738, 3104, 44399,
	2717, 397, 2716, 2715, 3161, 440, 4781, 44399, 1175, -1000,
	1398, 3804, -1000, 44399, -1000, 2115, -1000, 1566, -1000, -1000,
	3268, -1000, -1000, 10628, 10628, 3268, 1566, 1566, -1000, 979,
	1693, -1000, 44399, -1000, -1000, 440, 4781, 3158, 4395, 508,
	2250, -1000, 44399, -1000, -1000, -1000, 774, -1000, 940, 740,
	44399, 1849, 940, 1848, 2713, -1000, -1000, 44399, 44399, 44399,
	44399, -1000, -1000, 44399, -1000, 44399, 44399, 44399, 44399, 44399,
	37043, -1000, 44399, 44399, -1000, 44399, 1846, 44399, 1842, 3140,
	-1000, 1580, 1580, 902, -1000, -1000, 571, -1000, 37043, 1998,
	1995, 1992, 1989, 2382, 2381, 2380, 1580, 1580, 1988, 2374,
	36430, 2369, 1076, 1984, 1983, 1981, 2118, 2365, 950, -1000,
	2363, 2058, 2014, 1964, 44399, 2708, 2255, -1000, -1000, 156,
	1580, 329, 44399, 1666, 1646, 577, 459, -40, 22331, 44399,
	33978, 33978, 33978, 33978, -1000, 3010, 3009, 3000, -1000, 3006,
	3003, 3021, 44399, 33978, 2693, -1000, 36430, -1000, -1000, -1000,
	1446, 1367, 3174, 963, 10628, -1000, -1000, -21, 25, -1000,
	-1000, -1000, 35817, 2360, 522, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3211, 44399, 44399, 705, 2513, 1224, -1000, -1000,
	-1000, 4781, 2676, 2676, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2676, 2676, 2684, -1000, -1000, 2672, 2672,
	2672, 2629, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2677, 2677, 2683, 2683, 2677, -1000, -1000, 3266,
	-1000, 1222, -1000, -1000, 1392, -1000, 3266, 1740, -302, 13717,
	1729, 1637, -1000, 10628, 13717, 10628, -253, 315, -255, -1000,
	-1000, -1000, 2358, -1000, -1000, -1000, 1979, -1000, 1968, -1000,
	140, 157, 1820, -217, 8158, 406, 44399, -217, 44399, 8158,
	-1000, 44399, 174, 165, 161, 403, -217, 3211, 28, 10628,
	3074, -1000, -1000, 44399, 1962, -1000, -1000, -1000, 3277, 35817,
	2115, 1551, 35204, -1000, 275, -1000, 239, 558, 2351, -1000,
	822, 132, 2345, 2329, -1000, -1000, -1000, -1000, 12476, 1522,
	-1000, -1000, -1000, 2060, 10628, 2504, -1000, 937, 937, 2019,
	2503, 2494, -1000, 2676, 2676, -1000, 2629, 2672, 2629, 937,
	937, 2493, -1000, 2080, 2354, -1000, 2348, 2332, 10628, -1000,
	2491, 2686, 1514, -70, -186, 127, 127, -1000, -1000, -1000,
	-1000, 127, 127, 127, 127, -1000, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 673, -99, -277, -100,
	-278, -1000, 2490, 1214, -1000, -1000, -1000, -1000, -1000, 47151,
	1207, 474, 474, 2329, 2322, 792, 976, 44399, -1000, -1000,
	-1000, 44399, 2320, 2317, 1089, 4781, 2486, 3157, 16189, 3151,
	2112, -1000, -1000, -1000, 26622, 555, -1000, -1000, -1000, 649,
	292, 1960, 547, -1000, 44399, 354, 354, 3059, 1645, 2316,
	44399, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3104, -1000,
	816, 411, 32752, 14340, -1000, 396, 44399, -1000, 16189, 16189,
	396, 432, 1649, -1000, 669, 1107, 146, 33978, 44399, -1000,
	33365, 2479, -1000, 1080, 3268, -1000, 2060, 2060, -330, 3268,
	3268, 1643, 1566, -1000, 432, -1000, 396, -1000, 1055, 18028,
	484, 482, 424, -1000, 625, -1000, -1000, 654, 3067, 4781,
	-1000, 44399, -1000, 44399, -1000, 44399, 44399, 740, 10628, 3067,
	44399, 788, -1000, -1000, 1067, 423, 402, 709, 709, 1201,
	-1000, 3129, -1000, -1000, 1172, -1000, -1000, -1000, -1000, 44399,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 24783, 24783, 3187,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2309, 2307, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 44399, 1366, -1000, 1642, 2112, 26622,
	1640, 1672, 2297, 2295, 555, 2072, 1638, 2109, 44399, -1000,
	1093, 44399, 44399, -1000, 1244, -1000, 1636, 2960, 2954, 2960,
	-1000, -1000, -1000, -1000, -1000, 2993, -1000, 2990, -1000, -1000,
	1244, -1000, -1000, -1000, -1000, -1000, 963, -1000, 3210, 940,
	940, 940, 2472, -1000, -1000, -1000, 1159, 2471, -1000, -1000,
	-1000, 3298, -1000, -1000, -1000, -1000, -1000, -1000, 16802, 3103,
	3264, 3258, 34591, 3264, -1000, -302, 1679, -1000, 1786, 187,
	1743, 44399, -1000, -1000, -1000, 2456, 2455, -233, 153, 3257,
	3256, 983, -1000, 2452, 1123, -217, -1000, -1000, 1081, -1000,
	-1000, -1000, -1000, -1000, -1000, -217, -1000, 1081, -1000, 140,
	-1000, -1000, 3093, -1000, -1000, 2115, -1000, 237, -1000, -1000,
	-1000, -1000, -1000, -1000, 186, -1000, 44399, -1000, 1121, 125,
	-1000, 2060, -1000, -1000, -1000, -1000, -1000, 3800, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10628,
	-1000, -1000, -1000, 2290, -1000, -1000, 10628, 2450, 2293, 2449,
	2287, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3303, -1000, 3253,
	1365, 2447, 2446, 1362, 2445, 2440, -1000, 10628, 2438, 47151,
	914, 2286, 914, -1000, -1000, 351, 44399, 3274, -1000, -1000,
	-1000, -1000, -1000, 851, 396, 2434, 1118, -1000, -1000, -1000,
	-1000, 396, -1000, 2283, 211, -1000, -1000, -1000, -1000, 2277,
	2259, 1954, -1000, -1000, 1961, 1381, 222, -1000, -1000, -1000,
	-1000, -1000, -1000, 2109, 2109, 2107, 1630, -331, -1000, 2671,
	-1000, 1580, 1580, 1580, 44399, 1350, -1000, 1580, 1580, 2427,
	-1000, -1000, 2426, 2425, -138, 703, 1599, 1587, -1000, 1929,
	26009, 33978, 33365, 1237, -1000, 1383, -1000, -1000, -1000, -1000,
	-1000, -1000, 2256, 3268, 703, -1000, 489, 1928, 12476, 2670,
	12476, 2669, 505, 2667, 1332, -1000, 44399, -1000, -1000, 44399,
	318, 2666, -1000, 2665, 2957, 473, 2664, 2662, 44399, 2276,
	-1000, 3067, 44399, 725, 3102, -1000, -1000, -1000, 366, -1000,
	-1000, 519, -1000, 44399, -1000, 44399, -1000, 1516, -1000, 24783,
	-1000, -1000, 1322, -1000, 2255, 2253, -1000, 211, 2251, 5685,
	-1000, -1000, -1000, 3059, 2249, -1000, 2247, -1000, 44399, 1093,
	1093, 3303, 44399, 8158, -1000, -1000, 10628, 2661, -1000, 10628,
	-1000, -1000, -1000, -1000, -1000, 2659, 3051, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1742, -1000, 10628, 10628, -1000, -1000,
	736, 13717, -257, 314, -1000, -1000, -1000, -236, 2245, -1000,
	-1000, 3250, 2242, 2156, 44399, -1000, -1000, 1081, 1081, -233,
	-1000, -1000, 1080, -1000, -1000, 1034, 568, -1000, 2422, 2257,
	-1000, 2244, 127, -1000, 127, -1000, 242, 10628, -1000, 2240,
	-1000, -1000, -1000, 2234, -1000, -1000, 2213, -1000, 2353, -1000,
	2212, -1000, -1000, 44399, 785, 969, 4781, -140, -138, 16189,
	-140, -1000, -1000, 372, -1000, -1000, 340, -1000, -1000, 1867,
	596, -1000, -1000, -1000, -1000, 1612, 1859, 2175, 30913, 24783,
	25396, 2206, -1000, -1000, 32752, 1742, 1742, 47454, 286, 47762,
	-1000, 2658, 1013, 1582, -1000, 1920, -1000, 1919, -1000, 3268,
	1237, 145, -1000, -1000, 1533, -338, -1000, 1013, 2250, 3249,
	-1000, 2404, 44399, 2281, 44399, 2657, 1611, 12476, -1000, 654,
	3020, -1000, -1000, 318, -1000, -1000, 1856, 12476, -1000, -1000,
	2203, 25396, 801, 1607, 1606, 829, 2655, -1000, 528, 3297,
	-1000, -1000, -1000, 896, 2653, -1000, 1814, 1785, -1000, 44399,
	-1000, 30913, 30913, 729, 729, 30913, 30913, 2635, 709, -1000,
	-1000, 12476, -1000, -1000, 1580, -1000, -1000, -1000, 1580, 1511,
	-1000, -1000, -1000, -1000, -1000, -1000, 2107, -1000, -1000, -1000,
	3225, -1000, -1000, 2060, 44399, 2060, 32139, -1000, 3248, 3247,
	-1000, 2060, 1054, -1000, -302, 44399, 44399, -238, 1917, -1000,
	2196, 158, -1000, -1000, 1060, -236, -240, 100, 24783, 1603,
	-1000, -1000, -1000, -1000, -1000, 2262, -1000, 631, -1000, -1000,
	-1000, 1054, 2218, 2168, -1000, -1000, -1000, -1000, 350, 44399,
	-133, -1000, -1000, 422, -1000, -1000, -1000, 580, 2153, -1000,
	-1000, 339, -1000, -1000, 2194, -1000, -1000, 123, -1000, 1598,
	1311, -1000, 2629, 10628, -1000, -1000, -1000, -1000, -1000, -1000,
	646, -1000, 396, 47680, -1000, 992, -1000, 1034, 646, 29687,
	604, 309, -1000, 1915, -1000, -1000, 3303, -1000, -1000, 600,
	-1000, 496, -1000, 1299, -1000, 1290, 31526, 1913, 2002, -1000,
	3833, 758, -1000, -1000, 3948, -1000, -1000, -1000, -1000, -1000,
	-1000, 2193, 2183, -1000, -1000, -1000, -1000, -1000, 1912, 2627,
	46, 3179, 2181, -1000, -1000, 2626, 1288, 1283, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1275, 1260, 30913,
	-1000, -1000, 3948, 1909, 24783, 1580, -1000, -1000, 1247, 1241,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2625, -1000, -1000,
	3246, -238, -243, 2178, 138, 147, -1000, 2177, -1000, -1000,
	619, -219, 103, 78, 75, -1000, -1000, -1000, 10628, -1000,
	-1000, 44399, 784, 44399, 524, -1000, -1000, -1000, -1000, 185,
	-1000, -1000, -1000, -1000, -1000, 2175, 2173, -1000, 30913, 3129,
	2163, 476, 3245, -1000, 47762, -1000, 1580, -1000, 476, 1240,
	-1000, 1580, 1580, -1000, 436, -1000, 1574, -1000, 1907, -1000,
	3225, -1000, 434, -1000, 483, -1000, -1000, -1000, 1235, -1000,
	-1000, -1000, 3833, 490, -1000, 593, 2620, -1000, -1000, 2132,
	10628, 2615, 1580, 2124, -125, 30913, 2955, 2949, 2848, 2412,
	1230, -1000, -1000, 24783, -1000, -1000, 30300, 44399, 2156, -1000,
	-1000, 2172, -1000, 765, 151, 147, -1000, 3243, 152, 3241,
	3240, 1040, 1650, -1000, 124, 122, 116, -1000, -1000, -1000,
	-1000, -1000, 346, 544, -1000, 270, -1000, -1000, -1000, 298,
	-1000, -1000, 3129, -1000, 3238, 508, -1000, 24783, -1000, -1000,
	29687, 1742, 1742, -1000, -1000, 1905, -1000, -1000, -1000, -1000,
	1888, -1000, -1000, -1000, 1220, -1000, 44399, 783, 7542, -1000,
	2127, -1000, 44399, -1000, 2908, -1000, 267, 1190, 298, 729,
	298, 729, 298, 729, 298, 729, 272, -1000, -1000, -1000,
	1185, -1000, -1000, -1000, 2296, 1883, 153, 142, 3237, -1000,
	2156, 3236, 2156, 2156, -1000, 130, 619, -1000, -1000, -1000,
	44399, 2169, -1000, -1000, -1000, -1000, 1580, 1580, 2160, 2159,
	418, -1000, -1000, -1000, 29074, 484, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 490, 47762, -1000, 7542, 1170, -1000, 2060,
	-1000, 709, -1000, -1000, 2701, 2405, 3272, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 44399, 3173, 24170,
	136, -1000, -1000, -1000, 2157, -1000, 2156, -1000, -1000, 1576,
	-1000, -1000, -275, 1875, 1874, -1000, -1000, 44399, -1000, 44399,
	489, -1000, 47762, 1114, -1000, 7542, -1000, -1000, 3296, -1000,
	3273, 809, 809, 298, 298, 298, 298, -1000, -1000, 44399,
	-1000, 1110, -1000, -1000, -1000, 1378, -1000, -1000, -1000, -1000,
	2146, -1000, -1000, 2117, -1000, -1000, -1000, 1096, 2250, -1000,
	-1000, -1000, -1000, -1000, 1936, 535, -1000, 1018, -1000, 1575,
	-1000, 28461, 44399, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	44399, 6926, -1000, 1375, -1000, -1000, 2060, 44399, -1000,
}

var yyPgo = [...]int{
	0, 183, 3317, 247, 181, 3915, 82, 256, 245, 230,
	253, 3914, 3900, 3899, 3896, 3108, 3094, 3893, 3892, 3891,
	3890, 3889, 3888, 3886, 3885, 3884, 3883, 3882, 3881, 3879,
	3877, 3876, 3875, 3873, 3872, 3871, 3870, 3869, 3868, 3867,
	3864, 3863, 3862, 3860, 3858, 3857, 3854, 252, 3853, 3852,
	3850, 3849, 3848, 3847, 3845, 3844, 3843, 3841, 3840, 3838,
	3834, 3833, 3829, 3827, 3826, 3824, 3810, 3809, 3808, 3805,
	3803, 3802, 3799, 3798, 3797, 3796, 3794, 3793, 3792, 251,
	3791, 3790, 228, 3789, 3087, 3788, 3784, 3783, 3779, 3778,
	3777, 3776, 220, 3775, 3771, 3769, 3768, 3767, 3766, 3765,
	3764, 3763, 3762, 3759, 259, 3757, 3756, 3755, 3754, 234,
	3753, 248, 3752, 178, 162, 3751, 3750, 3749, 3744, 3736,
	3735, 3731, 240, 197, 69, 3729, 49, 3728, 3727, 224,
	3726, 150, 3723, 156, 3722, 3721, 3720, 3719, 3717, 3716,
	3715, 3714, 3713, 3711, 3710, 3706, 3704, 3703, 3700, 3699,
	3687, 3686, 91, 3685, 266, 3684, 72, 3683, 185, 130,
	3680, 100, 142, 263, 1921, 261, 255, 192, 186, 114,
	3679, 348, 3678, 174, 239, 159, 31, 3675, 143, 3674,
	264, 48, 43, 246, 145, 53, 155, 133, 3673, 217,
	109, 108, 3672, 3671, 144, 3670, 242, 189, 3669, 102,
	3667, 3666, 3665, 3664, 3662, 208, 193, 3661, 3660, 134,
	3659, 3652, 68, 129, 3651, 75, 124, 169, 122, 3650,
	268, 126, 131, 115, 99, 3649, 105, 3646, 3645, 3644,
	3642, 188, 3641, 3639, 135, 65, 3637, 3636, 3635, 71,
	3633, 77, 3632, 40, 3629, 60, 3625, 3623, 3622, 3619,
	3618, 3617, 3616, 3613, 3612, 3611, 3604, 3602, 55, 3601,
	3600, 7, 11, 16, 3599, 26, 3598, 176, 3595, 3589,
	3585, 3581, 3578, 90, 87, 3577, 89, 167, 3575, 9,
	27, 70, 3573, 3564, 227, 171, 98, 164, 3562, 341,
	3560, 3559, 3557, 157, 3556, 605, 3555, 3553, 3552, 3549,
	3548, 3547, 101, 3546, 221, 39, 3545, 136, 140, 3543,
	37, 45, 116, 238, 138, 96, 3542, 3541, 3540, 139,
	235, 117, 79, 0, 3539, 154, 3538, 3537, 3536, 260,
	3534, 236, 233, 172, 254, 262, 284, 3533, 3532, 74,
	128, 3530, 166, 24, 50, 137, 85, 22, 232, 3527,
	1376, 8, 207, 3526, 206, 3525, 249, 15, 184, 146,
	3524, 3521, 33, 267, 3520, 3519, 3518, 132, 3517, 3516,
	161, 80, 3513, 3511, 3510, 3509, 38, 3505, 36, 13,
	3504, 94, 3502, 250, 3501, 198, 148, 190, 187, 158,
	225, 229, 78, 76, 3500, 1704, 153, 103, 17, 3497,
	226, 3496, 170, 127, 3494, 106, 3490, 244, 270, 209,
	3489, 191, 10, 46, 35, 29, 44, 12, 320, 216,
	3486, 3485, 21, 47, 3483, 51, 3482, 19, 3481, 3480,
	3479, 66, 5, 3478, 3477, 18, 20, 3476, 34, 214,
	177, 119, 92, 59, 3474, 3472, 52, 165, 3471, 151,
	180, 160, 3469, 73, 3468, 3467, 3462, 3460, 737, 3459,
	257, 3458, 3456, 3454, 3452, 3450, 3449, 3447, 3446, 219,
	3443, 107, 41, 3442, 3441, 3439, 3438, 93, 152, 3436,
	3435, 3434, 3433, 30, 141, 3432, 14, 3431, 25, 23,
	32, 3430, 97, 3429, 3, 194, 3426, 3425, 4, 3420,
	3417, 1, 2, 3416, 3414, 125, 3409, 95, 28, 175,
	104, 3407, 3406, 88, 213, 149, 3404, 3403, 112, 243,
	205, 3402, 81, 231, 265, 3400, 211, 3396, 3395, 3392,
	3391, 3390, 3388, 1125, 3386, 3385, 241, 61, 86, 3384,
	223, 123, 3383, 3382, 84, 168, 121, 113, 58, 83,
	3381, 118, 196, 3379, 202, 3377, 3376, 3374, 111, 3373,
	3371, 3369, 3368, 195, 3367, 3366, 200, 222, 3365, 3363,
	337, 3361, 3360, 3359, 3358, 3357, 3355, 3352, 3341, 3333,
	3324, 237, 218, 3315,
}

//line mysql_sql.y:12121
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 576, 579, 579, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 119, 119, 314, 314, 315,
	315, 149, 555, 555, 120, 120, 120, 120, 120, 120,
	120, 118, 561, 561, 561, 562, 562, 115, 138, 137,
	140, 140, 139, 139, 136, 136, 132, 135, 135, 134,
	134, 133, 128, 130, 130, 129, 131, 131, 116, 104,
	117, 504, 504, 503, 503, 502, 502, 454, 454, 455,
	455, 501, 501, 501, 500, 500, 500, 499, 499, 498,
	498, 497, 497, 495, 495, 496, 494, 493, 493, 493,
	491, 491, 491, 487, 487, 489, 488, 488, 490, 482,
	482, 485, 485, 483, 483, 483, 483, 486, 481, 481,
	481, 480, 480, 103, 103, 103, 397, 397, 102, 102,
	411, 411, 411, 411, 411, 409, 409, 409, 409, 409,
	409, 408, 408, 407, 407, 412, 412, 410, 410, 410,
	410, 410, 410, 410, 410, 410, 410, 410, 410, 410,
	410, 410, 410, 410, 410, 410, 410, 410, 410, 410,
	410, 410, 410, 410, 410, 410, 410, 410, 410, 410,
	410, 410, 410, 410, 410, 410, 410, 410, 410, 410,
	410, 410, 410, 410, 410, 410, 410, 410, 93, 93,
	93, 93, 93, 98, 98, 98, 567, 567, 566, 566,
	568, 568, 568, 568, 569, 569, 96, 96, 96, 97,
	406, 406, 406, 94, 95, 95, 396, 396, 401, 401,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 405, 405, 405, 403, 403, 402, 402,
	404, 404, 87, 87, 87, 90, 89, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 88, 88, 88, 88,
	88, 88, 83, 83, 83, 83, 83, 82, 82, 84,
	84, 393, 393, 392, 99, 99, 100, 564, 564, 563,
	565, 565, 565, 565, 101, 107, 107, 107, 107, 107,
	107, 107, 107, 106, 106, 109, 109, 108, 110, 92,
	92, 92, 92, 92, 92, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 529, 529,
	529, 531, 531, 327, 328, 580, 330, 326, 326, 326,
	525, 525, 526, 527, 528, 528, 528, 105, 14, 195,
	195, 429, 429, 11, 11, 11, 11, 11, 11, 11,
	11, 13, 81, 86, 86, 266, 266, 271, 271, 272,
	272, 272, 277, 277, 278, 278, 267, 267, 267, 267,
	267, 267, 267, 267, 267, 267, 267, 267, 267, 267,
	267, 267, 267, 267, 267, 267, 267, 267, 253, 253,
	253, 248, 248, 248, 248, 249, 249, 250, 250, 251,
	251, 251, 251, 252, 252, 320, 320, 273, 273, 273,
	275, 275, 274, 270, 268, 268, 268, 268, 268, 268,
	268, 269, 269, 269, 269, 276, 276, 79, 85, 85,
	85, 85, 543, 543, 80, 554, 554, 458, 458, 342,
	342, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 463, 464, 337,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 54, 57, 58, 53, 53, 53, 382, 382,
	52, 581, 581, 313, 313, 67, 66, 56, 68, 69,
	70, 71, 72, 73, 51, 65, 65, 65, 65, 65,
	65, 65, 65, 76, 476, 476, 583, 583, 583, 74,
	75, 457, 457, 457, 64, 63, 62, 61, 60, 60,
	50, 50, 49, 49, 55, 144, 59, 145, 145, 334,
	334, 334, 336, 336, 332, 340, 340, 582, 582, 425,
	425, 335, 335, 48, 48, 48, 48, 77, 333, 333,
	312, 331, 331, 331, 12, 12, 10, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 26, 27, 29, 390, 390, 387, 28, 20,
	19, 19, 23, 22, 18, 18, 21, 24, 25, 25,
	9, 9, 9, 9, 15, 15, 16, 168, 168, 221,
	221, 537, 537, 533, 533, 534, 534, 534, 535, 535,
	536, 536, 111, 470, 470, 470, 470, 470, 470, 8,
	8, 190, 190, 469, 469, 469, 469, 469, 469, 394,
	394, 394, 514, 514, 514, 515, 189, 189, 184, 184,
	471, 471, 359, 516, 516, 479, 479, 478, 478, 477,
	477, 187, 187, 188, 188, 171, 171, 123, 123, 484,
	484, 484, 484, 492, 492, 453, 453, 258, 258, 305,
	305, 306, 306, 161, 161, 162, 162, 162, 162, 162,
	162, 570, 570, 571, 572, 573, 573, 574, 574, 574,
	575, 575, 575, 575, 575, 522, 522, 524, 524, 523,
	186, 186, 182, 182, 183, 183, 183, 181, 181, 180,
	179, 179, 178, 176, 176, 176, 177, 177, 177, 194,
	194, 164, 164, 164, 163, 163, 163, 163, 163, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 165, 165, 530, 530, 530, 459, 459, 459, 466,
	466, 286, 286, 287, 287, 285, 285, 166, 166, 167,
	167, 167, 167, 284, 284, 283, 169, 169, 175, 174,
	174, 170, 170, 170, 170, 294, 294, 293, 293, 293,
	293, 114, 121, 121, 122, 193, 193, 292, 291, 291,
	291, 291, 192, 192, 191, 191, 185, 185, 173, 173,
	173, 173, 290, 172, 288, 560, 560, 559, 559, 558,
	556, 556, 556, 557, 557, 557, 557, 506, 506, 506,
	506, 506, 321, 321, 321, 325, 325, 324, 324, 324,
	324, 324, 329, 7, 7, 7, 7, 7, 7, 7,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 39, 204, 205, 40, 206, 206, 207,
	207, 208, 208, 209, 210, 211, 211, 211, 211, 38,
	196, 196, 197, 197, 198, 198, 199, 200, 200, 200,
	203, 201, 202, 202, 578, 578, 577, 37, 37, 30,
	153, 153, 154, 154, 154, 156, 156, 254, 254, 254,
	155, 155, 157, 157, 157, 538, 540, 540, 542, 541,
	541, 541, 544, 544, 544, 544, 544, 545, 545, 545,
	545, 546, 546, 31, 141, 141, 146, 549, 549, 549,
	548, 548, 550, 550, 551, 551, 309, 309, 310, 310,
	151, 152, 152, 148, 143, 159, 159, 159, 159, 159,
	160, 160, 142, 147, 150, 539, 547, 547, 547, 391,
	391, 388, 389, 389, 386, 385, 385, 385, 553, 553,
	552, 552, 552, 322, 322, 32, 381, 381, 383, 384,
	384, 384, 375, 375, 375, 375, 36, 379, 379, 380,
	380, 380, 380, 380, 380, 380, 376, 376, 378, 378,
	374, 374, 374, 374, 374, 374, 374, 35, 158, 158,
	373, 373, 370, 370, 368, 368, 369, 369, 367, 367,
	367, 371, 371, 43, 78, 44, 45, 46, 42, 372,
	372, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 125, 124, 124, 124, 124, 124, 127, 127, 308,
	308, 307, 307, 126, 255, 255, 41, 233, 233, 445,
	445, 440, 440, 440, 440, 440, 461, 461, 461, 441,
	441, 441, 442, 442, 442, 444, 444, 444, 443, 443,
	443, 443, 443, 460, 460, 462, 462, 462, 413, 413,
	414, 414, 414, 417, 417, 432, 432, 433, 433, 431,
	431, 438, 438, 437, 437, 436, 436, 435, 435, 434,
	434, 434, 434, 428, 428, 427, 427, 415, 415, 415,
	415, 415, 416, 416, 416, 426, 426, 430, 430, 282,
	282, 281, 281, 241, 241, 242, 242, 280, 280, 239,
	239, 240, 240, 240, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 512,
	512, 513, 244, 244, 256, 256, 256, 256, 256, 256,
	243, 243, 245, 245, 222, 222, 220, 220, 212, 212,
	212, 212, 212, 213, 213, 214, 214, 215, 215, 215,
	219, 219, 218, 218, 218, 218, 216, 216, 217, 217,
	217, 217, 217, 217, 399, 399, 509, 509, 510, 510,
	505, 505, 505, 508, 508, 508, 508, 508, 508, 508,
	511, 511, 511, 507, 507, 223, 303, 303, 303, 323,
	323, 323, 323, 302, 302, 302, 238, 238, 237, 237,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 398, 398, 338, 338, 339, 339, 265, 264,
	264, 264, 264, 264, 262, 263, 261, 261, 261, 261,
	261, 260, 260, 259, 259, 259, 377, 377, 257, 257,
	247, 247, 247, 246, 246, 246, 439, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 300, 300, 300, 301,
	301, 301, 301, 301, 301, 301, 301, 349, 349, 355,
	355, 521, 521, 520, 224, 224, 224, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 234, 234, 234, 422,
	422, 422, 422, 423, 423, 423, 423, 424, 424, 424,
	420, 420, 421, 421, 360, 361, 361, 467, 467, 468,
	468, 418, 418, 419, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 475, 475, 475, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 532, 532, 532, 517, 517,
	517, 518, 518, 518, 518, 518, 518, 518, 518, 518,
	518, 518, 518, 519, 519, 519, 519, 519, 519, 519,
	519, 519, 519, 519, 519, 519, 519, 519, 519, 519,
	298, 298, 298, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 362, 362, 363, 363, 472, 472, 472, 472, 472,
	472, 473, 473, 474, 474, 474, 474, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 347, 295, 295, 295,
	364, 356, 356, 357, 357, 358, 358, 350, 350, 350,
	350, 350, 350, 351, 351, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 352, 352, 354,
	354, 366, 366, 366, 365, 365, 365, 365, 365, 365,
	365, 236, 236, 236, 236, 344, 344, 344, 343, 343,
	343, 343, 343, 343, 343, 343, 343, 343, 343, 343,
	226, 226, 226, 226, 230, 230, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	231, 231, 231, 231, 231, 229, 229, 229, 229, 229,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 112, 113,
	113, 228, 304, 304, 446, 446, 449, 449, 447, 447,
	448, 450, 450, 450, 451, 451, 451, 452, 452, 452,
	456, 456, 311, 311, 311, 319, 319, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 8, 8, 0, 2, 0,
	2, 6, 1, 2, 5, 6, 8, 10, 9, 11,
	13, 4, 0, 1, 1, 0, 1, 5, 2, 2,
	6, 9, 6, 9, 4, 7, 8, 0, 1, 1,
	2, 4, 6, 1, 2, 4, 0, 2, 10, 11,
	2, 0, 2, 1, 3, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 3,
	0, 3, 3, 0, 1, 3, 0, 1, 3, 0,
	2, 1, 2, 3, 4, 3, 3, 1, 0, 1,
	1, 0, 1, 8, 5, 7, 0, 3, 8, 5,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 1, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 4, 1, 3, 3, 1,
	2, 2, 2, 1, 2, 2, 3, 4, 4, 6,
	1, 1, 1, 2, 4, 6, 1, 4, 1, 3,
	3, 4, 4, 4, 4, 3, 3, 2, 4, 4,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 2, 2, 0, 1, 4,
	2, 4, 1, 5, 3, 2, 1, 2, 2, 4,
	4, 5, 2, 1, 3, 4, 4, 1, 2, 9,
	7, 1, 3, 3, 1, 1, 3, 1, 3, 2,
	1, 2, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 2, 4, 3, 3, 1,
	1, 1, 1, 1, 1, 2, 3, 4, 7, 2,
	3, 3, 4, 5, 3, 4, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 1, 1, 1, 1, 6, 4, 1,
	1, 0, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 10, 7, 4, 4, 1, 3, 1, 6, 3,
	3, 3, 1, 1, 1, 3, 2, 4, 5, 5,
	6, 5, 5, 3, 2, 2, 1, 3, 4, 3,
	7, 5, 8, 2, 2, 1, 3, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 0, 1, 2,
	1, 3, 2, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 6, 3, 3, 1, 1, 7, 7, 7,
	8, 8, 0, 4, 7, 0, 3, 0, 2, 0,
	1, 1, 1, 1, 4, 2, 2, 3, 3, 4,
	5, 3, 4, 4, 2, 2, 2, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 3, 2, 5, 5, 0, 2,
	7, 0, 1, 0, 1, 5, 5, 3, 3, 2,
	4, 4, 4, 4, 4, 1, 1, 1, 3, 3,
	1, 1, 1, 6, 0, 1, 1, 1, 1, 5,
	5, 0, 1, 1, 3, 3, 3, 4, 7, 7,
	5, 4, 7, 8, 3, 3, 2, 3, 4, 0,
	2, 2, 0, 2, 2, 0, 5, 1, 1, 1,
	1, 0, 1, 5, 5, 5, 4, 3, 1, 3,
	1, 1, 3, 5, 2, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 4, 1, 3, 1, 4, 6,
	6, 4, 4, 4, 4, 4, 3, 6, 3, 5,
	1, 1, 2, 2, 11, 8, 9, 1, 3, 2,
	4, 0, 2, 0, 1, 1, 1, 1, 0, 1,
	0, 1, 4, 2, 1, 5, 4, 4, 2, 5,
	5, 1, 3, 2, 1, 5, 4, 4, 2, 0,
	5, 4, 0, 1, 3, 3, 1, 3, 1, 3,
	1, 3, 4, 0, 1, 0, 1, 1, 3, 1,
	1, 0, 4, 1, 3, 2, 1, 0, 8, 0,
	4, 7, 4, 0, 2, 0, 2, 0, 2, 0,
	4, 1, 3, 1, 1, 6, 4, 5, 7, 4,
	5, 0, 1, 3, 8, 0, 6, 0, 4, 6,
	1, 1, 1, 1, 1, 2, 3, 1, 3, 6,
	0, 3, 0, 1, 2, 4, 4, 0, 1, 3,
	1, 3, 3, 0, 1, 1, 0, 2, 2, 0,
	2, 3, 3, 3, 1, 3, 3, 3, 3, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 7, 7, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 2, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 3, 1, 1,
	1, 4, 4, 4, 3, 2, 2, 2, 3, 2,
	3, 4, 1, 3, 4, 0, 2, 1, 1, 2,
	2, 2, 0, 1, 2, 4, 1, 3, 1, 3,
	2, 3, 1, 4, 3, 0, 1, 1, 2, 5,
	2, 2, 2, 0, 2, 3, 3, 0, 1, 3,
	1, 3, 0, 1, 2, 1, 1, 0, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 1, 7, 1, 3, 0,
	1, 1, 3, 1, 3, 0, 1, 1, 1, 14,
	1, 3, 0, 1, 1, 3, 1, 1, 2, 4,
	1, 1, 1, 1, 0, 1, 2, 9, 9, 7,
	1, 2, 3, 3, 3, 0, 4, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 4, 1,
	1, 1, 3, 3, 4, 3, 3, 0, 1, 1,
	1, 0, 2, 7, 8, 8, 8, 0, 3, 3,
	0, 3, 0, 3, 0, 5, 1, 3, 0, 3,
	3, 0, 2, 9, 7, 0, 2, 2, 3, 3,
	0, 2, 4, 4, 4, 1, 0, 2, 2, 1,
	3, 2, 1, 3, 2, 1, 3, 2, 0, 1,
	3, 4, 3, 1, 1, 4, 1, 3, 1, 1,
	1, 1, 0, 1, 1, 1, 11, 0, 2, 3,
	3, 2, 2, 3, 1, 1, 1, 3, 3, 4,
	0, 2, 2, 2, 2, 2, 2, 6, 0, 4,
	1, 1, 0, 3, 0, 1, 1, 2, 4, 4,
	4, 0, 1, 8, 2, 4, 4, 4, 9, 0,
	2, 11, 9, 11, 8, 6, 9, 7, 10, 7,
	6, 2, 2, 9, 4, 5, 3, 0, 4, 1,
	3, 0, 3, 6, 0, 2, 10, 0, 2, 0,
	2, 0, 3, 2, 4, 3, 0, 2, 1, 0,
	2, 3, 0, 2, 3, 0, 2, 1, 0, 3,
	2, 4, 3, 0, 1, 0, 1, 1, 0, 6,
	0, 3, 5, 0, 4, 0, 3, 1, 3, 4,
	5, 0, 3, 1, 3, 2, 3, 1, 2, 0,
	4, 6, 5, 0, 2, 0, 2, 4, 5, 4,
	5, 1, 5, 6, 5, 0, 3, 0, 1, 1,
	3, 3, 3, 0, 4, 1, 3, 3, 3, 0,
	1, 1, 3, 2, 3, 3, 3, 4, 4, 3,
	3, 3, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 5, 4, 1,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 0, 2,
	5, 5, 5, 0, 1, 1, 3, 1, 1, 1,
	1, 1, 7, 9, 7, 9, 2, 1, 7, 9,
	7, 9, 8, 5, 0, 1, 0, 1, 1, 1,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 3, 1, 3, 5, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 2,
	1, 2, 2, 1, 1, 2, 2, 2, 3, 3,
	2, 2, 1, 5, 6, 4, 1, 1, 1, 5,
	4, 1, 1, 2, 0, 1, 1, 2, 5, 0,
	1, 1, 2, 2, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 2, 2, 2, 0, 3, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 3, 5, 2, 2, 2, 2, 4,
	1, 1, 2, 5, 6, 8, 6, 6, 6, 1,
	1, 1, 1, 1, 1, 3, 4, 4, 4, 7,
	9, 7, 7, 7, 9, 7, 7, 0, 2, 0,
	1, 1, 2, 4, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 2, 2, 2, 0, 1, 1, 1,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 5, 0, 1, 3, 0, 1, 0, 2, 0,
	2, 0, 1, 6, 8, 8, 6, 6, 5, 5,
	5, 6, 6, 6, 6, 5, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 1, 1, 1, 4,
	4, 6, 8, 6, 4, 5, 4, 4, 4, 3,
	4, 6, 6, 7, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 8, 4, 2, 3, 2, 4, 2, 2,
	4, 6, 2, 2, 4, 6, 4, 2, 4, 4,
	4, 0, 1, 2, 3, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	3, 0, 1, 1, 3, 1, 3, 3, 3, 3,
	3, 2, 1, 1, 1, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 1, 3, 4, 4, 5,
	4, 5, 3, 4, 5, 6, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 2,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 4, 4, 1, 2, 3,
	5, 1, 1, 3, 0, 1, 0, 3, 0, 3,
	3, 0, 3, 5, 0, 3, 5, 0, 1, 1,
	0, 1, 1, 2, 2, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int{
	-1000, -576, -579, -2, -5, 623, -1, -4, -113, -87,
	-7, -14, -115, -116, -8, -111, -9, -10, -12, -91,
	-106, -108, -110, -109, -47, -11, -105, -82, -83, -93,
	-99, -102, -103, -104, -117, -112, -114, -161, -118, -119,
	-120, 613, -88, -89, -90, -33, -32, -31, -30, -141,
	-146, -149, 546, 619, 449, 14, 498, -15, -16, -522,
	-17, 260, -326, -327, -328, -330, -580, -48, -49, -50,
	-60, -61, -62, -63, -64, -74, -75, -76, -51, -52,
	-53, -56, -54, -67, -66, -68, -69, -70, -71, -72,
	-73, -55, -59, -144, -145, -77, -57, -78, -58, -80,
	-79, -85, -81, -86, -143, -148, -13, 235, -84, 76,
	-94, -95, -96, -97, -98, -100, -101, 373, 379, 436,
	612, 61, -162, -164, 630, 631, 634, 160, 161, 163,
	164, -34, -35, -36, -37, -38, -39, -41, -40, -42,
	-43, -44, -45, -46, 231, 16, 541, -18, -21, -19,
	-22, -20, -28, -29, -27, -24, -26, -142, -25, -147,
	-23, -150, 255, 254, 38, 321, 322, 323, 377, 253,
	232, 15, 31, 42, 352, -163, 83, 533, 534, 536,
	233, -165, 13, 636, -6, -3, -2, -128, -132, -136,
	-139, -140, -137, -138, -4, -113, 118, 245, 614, -323,
	369, 615, 617, 616, 86, 94, -316, -318, 449, 260,
	373, 379, 612, 631, 634, 548, 549, 550, 551, 552,
	553, 554, 555, 557, 558, 559, 560, 561, 562, 563,
	573, 574, 564, 565, 566, 567, 568, 569, 570, 571,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 588, 501, 598, 599, 600, 601, 529,
	556, 592, 593, 594, 595, 350, 351, 538, 272, 296,
	404, 302, 309, 160, 179, 173, 201, 193, 534, 168,
	276, 314, 277, 93, 163, 484, 108, 461, 433, 166,
	291, 293, 295, 530, 531, 363, 298, 528, 297, 299,
	301, 532, 278, 353, 189, 184, 290, 274, 182, 279,
	40, 280, 206, 281, 282, 543, 457, 349, 463, 306,
	52, 431, 183, 458, 294, 460, 210, 214, 475, 476,
	177, 178, 465, 478, 205, 208, 209, 252, 346, 347,
	43, 540, 264, 479, 212, 204, 200, 487, 310, 308,
	203, 176, 199, 275, 65, 216, 215, 217, 427, 428,
	429, 430, 283, 284, 367, 474, 196, 185, 354, 169,
	23, 482, 259, 462, 380, 285, 303, 311, 211, 213,
	266, 271, 542, 533, 435, 270, 307, 480, 181, 263,
	292, 258, 483, 170, 536, 382, 286, 164, 300, 477,
	486, 64, 395, 175, 167, 249, 161, 268, 273, 287,
	288, 289, 527, 313, 312, 304, 535, 197, 265, 202,
	187, 174, 198, 162, 267, 485, 396, 610, 352, 414,
	195, 192, 269, 242, 481, 464, 165, 418, 397, 190,
	315, 605, 606, 607, 368, 345, 316, 317, 188, 256,
	455, 456, 320, 424, 336, 398, 434, 405, 399, 223,
	224, 324, 467, 469, 207, 608, 325, 326, 327, 459,
	328, 329, 330, 331, 372, 56, 58, 95, 98, 97,
	632, 633, 63, 29, 358, 361, 393, 400, 338, 611,
	539, 335, 339, 340, 362, 25, 416, 384, 420, 419,
	48, 49, 50, 53, 54, 55, 57, 59, 60, 51,
	526, 377, 390, 488, 45, 47, 387, 27, 364, 415,
	437, 334, 417, 448, 46, 446, 447, 468, 26, 366,
	365, 62, 44, 423, 425, 426, 318, 332, 375, 620,
	489, 370, 386, 389, 371, 337, 360, 391, 67, 66,
	383, 621, 378, 376, 333, 544, 545, 341, 572, 355,
	432, 523, 522, 521, 520, 519, 518, 517, 516, 321,
	322, 323, 401, 402, 403, 413, 406, 407, 408, 409,
	410, 411, 412, 451, 452, 622, 470, 472, 473, 471,
	237, 635, 356, 357, 240, 624, 625, 96, 626, 628,
	627, 28, 629, -404, -402, -323, 534, 612, 379, 533,
	536, 373, 352, 631, 634, 377, 260, 321, 322, 323,
	449, 350, -206, -323, 635, -171, 244, 39, -220, -323,
	-171, -84, -16, -15, -163, -164, -220, 239, -331, 24,
	431, -92, 432, 235, 83, 77, -323, -9, -104, -8,
	-111, -82, -161, 436, -329, -323, 321, 321, -329, 239,
	-323, 270, 412, -458, 245, -408, -381, 271, -407, -383,
	-410, -384, 32, 231, 233, 232, 546, 267, 16, 377,
	241, 14, 13, 378, 253, 25, 26, 28, 15, 379,
	381, 29, 382, 385, 386, 387, 42, 390, 391, 260,
	86, 94, 89, 278, -205, -323, -358, -350, 115, -353,
	-345, -346, -348, -501, -495, -343, 83, 142, 143, 150,
	116, 637, -347, -439, 36, 118, 552, 556, 592, 499,
	-296, -297, -298, -299, -300, -301, -323, -496, -494, 89,
	99, 101, 105, 106, 104, 102, 154, 186, 103, 90,
	155, -164, 86, -517, 562, -317, 585, 598, 599, 600,
	601, 584, 61, -465, -474, 238, -472, 153, 191, 256,
	187, 14, 148, 424, 188, 593, 594, 595, 559, 581,
	501, 563, 573, 588, 554, 555, 557, 549, 550, 551,
	553, 564, 566, 580, -475, 576, 586, 587, 572, 596,
	597, 589, 590, 591, 628, 88, 87, 579, 578, 565,
	560, 561, 567, 548, 558, 568, 569, 577, 582, 583,
	361, 108, 362, 363, 491, 353, 364, 245, 431, 70,
	365, 366, 367, 368, 369, 498, 370, 71, 371, 360,
	260, 414, 372, 190, 207, 503, 502, 504, 495, 492,
	490, 493, 494, 496, 497, 570, 571, 575, -121, -122,
	603, -570, -289, -571, 6, 7, 8, 9, -572, 155,
	-561, 433, 542, 89, 314, 350, 165, 162, -395, 165,
	114, 170, 169, -395, 167, 324, 266, -372, -153, 350,
	414, 328, 95, 270, -375, -373, 530, -460, 318, 314,
	290, 240, 111, -154, 250, 249, 109, 491, 238, 388,
	309, 56, 58, -533, -534, 228, 229, 230, -524, 524,
	-523, -323, 363, 97, 98, 27, 239, 374, 266, 469,
	467, 468, 470, 471, 472, 473, -65, -476, -457, 464,
	463, -335, 456, 462, 454, 466, 457, 351, 330, 546,
	329, 231, 624, 531, 525, -311, 398, 434, 488, 489,
	375, 435, 475, 477, 458, 108, 194, 191, 240, 242,
	239, 350, 491, 414, 95, 328, -533, 162, 475, 477,
	270, 412, 41, -401, 424, -400, -402, 476, 487, 87,
	88, 474, -311, 108, 455, 455, -570, -289, -162, -164,
	-114, -522, 532, 532, 532, 240, 350, 414, 270, 241,
	239, 527, 530, 242, 491, 238, 321, 374, 266, 328,
	95, 167, -459, -530, 32, -466, 225, 226, 227, 33,
	34, -1, 122, 636, -350, -350, -6, 639, -6, -350,
	-323, -323, 157, -226, -230, -227, -229, -228, -232, -231,
	191, 192, 153, 195, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 208, 209, 206, 31, 207, 256, 187,
	188, 189, 190, 210, 173, 193, 539, 218, 174, 219,
	175, 220, 176, 221, 177, 178, 222, 179, 182, 183,
	184, 185, 181, 156, -195, 89, 32, 83, 156, 89,
	-187, 262, -171, -220, -212, 156, 637, -187, -570, -180,
	-181, 11, -220, -302, -323, 433, 125, -92, 77, -92,
	432, 77, -525, -526, -527, -529, 235, 432, 431, -109,
	156, 278, 17, -329, -329, 81, -220, -383, 270, -408,
	-381, 36, 80, 157, 243, 157, 80, 83, 375, 350,
	414, 376, 491, 239, 388, 242, 270, 389, 350, 414,
	239, 242, 491, 270, 350, 239, 242, 414, 270, 389,
	350, 454, 455, 242, 27, 380, 383, 384, 455, -480,
	487, 157, 114, 111, 112, 113, -350, 132, -365, 125,
	126, 127, 128, 129, 130, 131, 139, 138, 149, 142,
	143, 144, 145, 146, 147, 148, 140, 141, 135, 115,
	133, 137, 134, 117, 152, -164, -350, -358, 61, -348,
	-348, -348, -348, -323, -439, -355, -350, 83, 83, 83,
	83, 156, 102, 89, -350, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, -473, 83, 83,
	-362, -363, 83, 83, -343, -302, 83, 89, 89, 83,
	83, 83, 89, 83, 83, 83, -363, -363, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, -181, 157, -180, 83, -180, -181, -165,
	-164, 32, 33, 32, 33, 32, 33, 32, 33, -573,
	621, 83, 99, 632, 223, 17, -323, 480, 541, 168,
	169, 170, -370, 245, -204, -323, -206, 374, 242, 527,
	242, -154, -370, -370, -370, -370, -370, 241, -370, 24,
	239, 239, 239, 239, -370, 498, 125, 125, 59, -535,
	172, 157, -524, -186, 83, -334, 133, 137, -334, -285,
	18, 24, 268, 268, 268, -334, 308, -581, -582, 17,
	135, -332, -582, -332, -332, -334, -583, 241, 465, 43,
	269, 268, -182, -183, 22, -182, 459, 455, -425, 460,
	461, -336, -582, -335, -334, -334, -335, -334, -334, -334,
	32, 239, 242, 491, 328, 625, -581, -581, 31, 31,
	-458, -458, -220, -458, 525, -312, -323, -458, -458, -458,
	-536, 244, -567, -566, 478, -569, 480, 162, -402, 162,
	-402, -383, 270, 270, 157, 125, 24, -403, 125, 136,
	-402, -402, -403, -403, -243, 41, -322, 153, -323, 89,
	-243, 41, -564, -563, -220, -181, -165, -164, 84, 84,
	84, 535, 535, 535, -458, -458, -458, -458, -458, -460,
	-458, -458, -458, -458, -458, -329, -196, -323, -206, 245,
	-458, -458, -458, -166, -167, 144, -350, -323, -166, -3,
	-130, -129, 119, 120, 122, 615, 369, 614, 618, 612,
	-402, 41, -452, 396, 395, -446, -448, 83, -447, 83,
	-447, -447, -447, -447, -447, 83, 83, -449, 83, -449,
	-449, -446, -450, 83, -450, -451, 83, -451, -450, -323,
	-429, 541, -356, -358, -323, 39, -469, 61, -161, 83,
	31, 83, -187, -323, 638, 188, 167, 629, -470, 61,
	-161, 83, 31, -181, -123, 39, -183, 21, 156, 99,
	89, -109, -92, 77, -109, 84, 157, -528, 105, 106,
	-531, 205, 197, -323, -107, 89, -7, -8, -9, -10,
	-47, -82, -79, -161, 232, -497, -495, 83, 32, 423,
	80, 17, -409, 239, 491, 374, 266, 242, 350, -407,
	-390, -387, -385, -322, -383, -386, -385, -412, -302, 455,
	-124, 438, 437, 320, -350, -350, -350, -350, -350, 104,
	115, 345, 105, 106, -345, -366, 32, 316, 317, -346,
	-346, -346, -346, -346, -346, -346, -346, -346, -346, -346,
	-346, -354, -364, -439, 83, 135, 133, 137, 134, 117,
	-348, -348, -346, -346, -245, -322, 153, 84, 157, -350,
	-521, -520, 119, -350, -350, -350, -350, -323, -518, -519,
	505, 506, 507, 508, 509, 510, 511, 512, 513, 514,
	515, 365, 360, 366, 364, 353, 372, 367, 368, 190,
	522, 523, 516, 517, 518, 519, 520, 521, -356, -356,
	-350, -518, -356, -295, 33, 32, -358, -358, -358, 84,
	-350, -532, 343, 342, 344, -184, -323, -356, 84, 84,
	84, 99, -358, -358, -356, -346, -356, -356, -356, -356,
	-519, -295, -295, -295, -295, 144, -358, -358, -295, -295,
	-295, -295, 144, -295, -295, -295, -295, -295, -295, -295,
	-295, -295, -295, 84, 84, 84, 144, -358, -182, -122,
	-478, -477, -350, 41, -123, -183, -574, 622, 83, -302,
	-562, 89, 89, 637, 167, 17, 491, 481, 482, 166,
	169, 168, -323, 115, 35, 83, -196, -370, -370, -370,
	-540, -323, 90, -391, -388, -385, -323, -323, -381, -323,
	-323, -220, -370, -370, -370, -370, -220, -254, 53, 54,
	55, -385, -155, 56, 57, -536, -523, 35, -185, -323,
	-285, -348, -348, -350, -385, 270, -581, -334, -334, -313,
	-312, -336, -331, -336, -336, -285, -332, -334, -334, -350,
	-336, -332, -285, -323, 455, -285, -285, -425, -334, -333,
	-323, -333, -370, -312, -313, -313, -220, -220, -266, -271,
	-267, -272, 262, 236, 358, 359, 234, 232, 11, 233,
	-279, 309, -371, 499, -249, -250, 77, 42, -252, 260,
	400, 393, 272, 276, 93, 277, 433, 278, 241, 280,
	281, 282, 297, 299, 252, 283, 284, 285, 424, 286,
	161, 298, 287, 288, 289, 376, -244, 6, 331, 41,
	51, 52, 447, 446, 544, 541, 273, -540, -538, 31,
	-323, 31, -391, -323, -323, -174, -169, -173, -170, -175,
	-288, -290, -172, 83, -220, -164, -323, 157, 479, 481,
	482, -567, -403, -567, -403, 32, 423, -406, 423, 32,
	-381, -400, 475, 477, -396, 89, 424, -386, -405, 80,
	153, -477, -403, -403, -405, -405, 152, 157, -565, 480,
	481, 228, -182, 99, 99, 99, -222, -220, -540, -390,
	-381, -323, -458, -222, -222, -222, -323, -323, 83, 156,
	36, -323, -323, -323, -284, 157, -283, 17, -324, -323,
	35, 89, 156, -284, -131, -129, 121, -350, -6, 614,
	-350, -6, -6, -350, -6, -350, -456, 397, 99, 99,
	-304, 89, -304, 99, 99, 99, 547, 84, 89, -394,
	80, -471, -359, -516, 603, -189, 84, -184, -514, -515,
	-184, -188, -323, -469, -212, 125, 125, 125, -471, -189,
	84, -514, -182, 604, -123, -179, -178, -350, -323, 24,
	-109, -92, -526, 156, 350, 157, -185, -409, -389, -386,
	-411, 144, -323, -397, 157, 541, 640, 87, 243, -553,
	-552, 415, 84, 157, -481, 244, 498, 89, 637, 431,
	223, 224, 104, 345, 105, 106, -439, -358, -354, -348,
	-348, -346, -346, -352, 257, -352, 114, -350, 638, -349,
	-520, 121, -350, 35, 157, 35, 157, 81, 156, 84,
	84, 17, 17, 84, -350, 84, 84, 84, 84, 17,
	17, -350, 84, 156, 84, 84, 84, 84, 81, 84,
	157, 84, 84, 84, 84, 157, -358, -358, -350, -358,
	84, 84, 84, -350, -350, -350, -358, 84, -350, -350,
	-350, -350, -350, -350, -350, -350, -350, -350, -419, 450,
	-419, -419, 157, 157, 157, 84, -123, 83, 99, 157,
	633, -308, -307, 89, -323, 167, -323, 167, 170, 170,
	169, 24, 36, -205, -207, -208, -209, -210, -211, 135,
	158, 159, 83, -220, -220, -220, -542, 401, -554, 157,
	41, -552, 491, 239, -151, 320, -374, 81, -158, 17,
	541, -220, -220, -220, -220, -233, 35, 17, -168, -221,
	-323, 83, 84, 157, -382, 81, -323, -313, -285, -285,
	-336, -285, -285, 157, 23, -334, -336, -336, -340, 637,
	-332, -340, 156, -340, -312, -445, 35, -186, 157, 21,
	262, -219, -320, -216, -218, 247, -339, -217, 250, -510,
	248, 246, 109, 251, 305, 110, 241, -320, -320, 247,
	-253, 243, 35, -320, -269, 241, 348, 305, 248, 21,
	262, -268, 241, 110, -323, 247, 251, 248, 246, -319,
	125, -311, 152, 243, 43, 376, -319, 545, 262, -319,
	-319, -319, -319, -319, -319, -319, 279, 279, -319, -319,
	-319, -319, -319, -319, -319, -319, -319, -319, -319, 162,
	-319, -319, -319, -319, -319, -319, 83, 274, 275, -543,
	401, 31, 356, 356, 357, -554, 31, -159, 350, 31,
	-291, -292, -293, -294, 68, 72, 74, 78, 69, 70,
	71, 75, 31, 157, -321, -325, 35, -323, 89, -321,
	-164, -169, -174, -321, 83, -566, -568, 483, 480, 486,
	-405, -405, 243, 83, 125, -405, -405, 41, -322, -563,
	487, 481, -123, 157, 80, -222, -197, -198, -199, -200,
	-226, -302, 192, 195, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 208, 209, 206, 207, 256, 187, 188,
	189, 190, 210, 173, 193, 539, 174, 175, 176, 177,
	178, 179, 182, 183, 184, 185, 181, -323, -206, -285,
	-167, -169, -323, 89, -323, 144, -285, 122, -6, 120,
	-135, -134, -133, 123, 612, 618, 122, 122, 122, 84,
	84, 84, 157, 84, 84, 84, 157, 84, 157, 99,
	-484, 460, 40, 157, 83, 84, 157, 61, 157, 125,
	84, 157, -350, -350, -350, 84, 61, -123, 89, 157,
	-176, 37, 38, 156, 433, -323, -495, 84, -411, 157,
	243, 156, 156, -387, 379, -322, -389, 21, 541, -302,
	39, -308, 125, 637, -323, 84, -352, -352, 114, -348,
	-345, 84, 122, -350, 120, -224, -226, 395, 396, -350,
	-224, -225, -231, 153, 191, 256, 190, 189, 187, 395,
	396, -243, -323, -350, -350, 84, -350, -350, 17, -323,
	-243, -346, -350, -181, -181, 84, 84, -418, -419, -418,
	-418, 84, 84, 84, 84, -418, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 83, 99, 101, 99,
	101, -477, -575, 63, 620, 62, 423, 104, 310, 157,
	99, 89, 638, 157, 125, -323, 17, 239, 170, -555,
	314, 350, 387, 84, 157, -302, -197, -186, 83, -186,
	-545, 462, 403, 413, -319, -342, -341, 352, 42, -463,
	424, 409, 410, -388, 270, -323, -323, -551, 96, 125,
	80, 335, 339, 340, 336, 337, 338, -368, -369, -367,
	-371, -538, 83, 83, -161, 35, 133, -158, 83, 83,
	35, -440, 325, -226, -220, -168, -323, 17, 157, -537,
	156, -1, -323, -381, -334, -285, -350, -350, -285, -334,
	-334, 167, -336, -323, -440, -226, 35, -267, 236, 233,
	-415, 307, 308, -416, -430, 310, -432, 83, -223, -302,
	-217, -509, -510, -370, -323, 110, -509, 110, 83, -223,
	-302, -302, -270, -333, -302, -323, -323, -323, -323, -275,
	-274, -302, -277, 32, -278, -323, -323, -323, -323, 110,
	-323, 110, -248, 41, 48, 49, 50, -319, -319, 194,
	-251, 41, 423, 425, 426, -277, 99, 99, 99, 99,
	89, 89, 89, -319, -319, 99, 89, -325, 89, -511,
	169, 45, 46, 99, 99, 99, 99, 41, 89, -256,
	41, 290, 294, 291, 292, 293, 89, 99, 41, 99,
	41, 99, 41, -323, 83, -512, -513, 89, -545, -319,
	356, -402, 125, 125, -342, -550, 320, -160, 491, 32,
	-190, 236, 233, -538, -393, -392, -302, -173, -173, -173,
	-173, 68, 68, 68, 68, 73, 68, 73, 68, -293,
	-393, -175, -186, -325, 84, -560, -559, -558, -556, 76,
	244, 77, -356, 480, 484, 485, -389, -337, 89, -396,
	-194, 24, -220, -220, -462, 300, 301, 84, 157, -226,
	-287, 19, 156, -287, 118, -6, -131, -133, -350, -6,
	-350, 614, 369, 615, 89, 99, 99, -492, 444, 439,
	441, 110, -359, -479, -478, 61, -161, -184, -471, -515,
	-477, -323, 638, 638, 638, 61, -161, -471, -194, -484,
	-178, -177, 44, -323, 99, 17, -386, -381, 144, 144,
	-323, 380, -397, 89, 402, 89, 239, 638, 89, -308,
	-345, -350, 84, -234, 178, 177, -234, 35, 84, 84,
	-447, -447, -446, -449, -446, -234, -234, 84, 84, 24,
	84, 84, 84, -350, 84, 84, 157, -467, 500, -468,
	574, -418, -418, -418, -418, -418, -418, -418, -418, -418,
	-418, -418, -418, -418, -418, -418, -418, -361, -360, 262,
	445, 627, 627, 445, 627, 627, 84, 157, -518, 157,
	-314, 315, -314, -307, 89, 243, 167, -323, -323, 89,
	89, -209, -226, 84, 35, -213, -214, -215, -223, -216,
	-218, 35, -546, 93, -541, 89, -323, 90, -547, 93,
	404, 155, 354, 41, 405, 406, 421, 349, 99, 99,
	411, -539, -323, -159, -159, -549, 52, 125, 89, -220,
	-367, -311, 152, 281, 328, -282, -281, -323, 89, -213,
	-161, -220, -213, -213, -161, -441, 327, 21, 99, 143,
	-187, 81, 156, -169, -221, -323, 144, 84, -285, -340,
	-285, -285, 125, -334, -441, -161, -427, 311, 83, -425,
	83, -425, 110, 336, -433, -431, 262, -273, 45, 47,
	-226, -507, -323, -505, -507, -323, -505, -505, -370, -350,
	-273, -223, 243, 31, 233, -276, 333, 334, 339, -398,
	306, 115, -398, 157, -176, 157, -323, -243, -243, 31,
	89, 89, -222, 84, 157, 125, -546, -541, 125, -403,
	89, 89, -547, -551, 125, -152, 93, -312, 157, -190,
	-190, -285, 157, 125, -192, -191, 80, 81, -193, 80,
	-191, 68, 68, -285, -558, -557, 24, -510, -510, -510,
	84, 84, 15, -199, 41, -286, 20, 21, 144, -286,
	122, 120, 122, 122, -323, 84, 84, -453, 605, -488,
	-490, 439, 21, 21, 15, 244, 84, -471, -471, -492,
	45, 46, -381, -397, 424, -220, 157, 638, -224, -350,
	84, -350, 84, 89, 84, 89, -181, 21, 84, 157,
	84, 84, 84, 157, 84, 84, -350, 84, -518, -315,
	188, 89, -315, 350, -323, 17, 237, -161, 84, 157,
	-161, 89, -544, 415, 89, 89, 99, 41, 99, 155,
	407, -464, -152, -152, -548, 93, 125, 637, 83, -319,
	-319, -319, -323, 84, 157, -319, -319, 84, 84, 84,
	-241, 541, -442, 261, 99, 143, 99, 143, 99, -321,
	-169, -323, -285, -537, 156, 89, -285, -442, -417, 312,
	99, -346, 83, -346, 83, -426, 309, 83, 84, 157,
	-323, -302, -238, -237, -235, 104, 115, 41, 393, -236,
	93, 152, 295, 298, 297, 273, 296, -265, -338, 80,
	399, 333, 334, -371, 605, 529, 246, 109, 110, 381,
	-339, 83, 83, 81, 315, 83, 83, -507, 84, -273,
	-302, 41, -276, 41, 346, 306, -274, -323, 152, -243,
	84, -513, 89, -544, 89, -405, -549, 89, 89, -538,
	-181, -392, -477, -350, 83, -350, 83, 68, 11, 19,
	-343, -350, -358, 245, -6, 615, 369, -258, 606, 89,
	21, 89, -486, 89, -393, -453, -126, -255, -311, 278,
	84, 84, 84, -418, -418, -421, -420, -424, 445, 307,
	453, -358, 89, 89, 84, 84, 89, -323, 243, 167,
	-201, -226, -156, 541, -241, -215, -156, 21, 541, 353,
	41, 99, 41, 408, 125, 105, 106, -309, -310, 89,
	-376, -378, -302, 83, -243, -245, 89, -281, -343, -343,
	-239, -161, 35, -240, -279, -371, -125, -124, -239, 83,
	-443, 161, 99, 143, 99, 99, -285, -285, 638, -443,
	-432, 21, 84, -412, 84, -412, 83, 125, -346, -431,
	-434, 61, -235, 104, -346, 89, -245, -246, 41, 294,
	290, 125, 125, -247, 41, 274, 275, -257, 83, 305,
	15, 194, 83, 110, 110, -220, -376, -376, -508, 335,
	336, 337, 341, 339, 340, 338, -508, -376, -376, 83,
	-399, -398, -346, -319, -319, 152, -548, -182, -185, -506,
	-323, 246, 21, 21, -323, -323, -305, 607, 99, 89,
	441, -258, -454, 608, -482, -425, -243, 125, 84, -423,
	117, 407, 411, -344, -347, 99, 101, 186, 155, 84,
	84, 350, -323, 540, -157, 60, 487, 89, 90, 402,
	89, 90, 353, 89, 638, 157, 125, 84, 157, -446,
	-350, -413, 262, -161, 157, -279, -311, -126, -413, -242,
	-280, -323, 89, -461, 169, 326, 541, 99, 143, 99,
	-181, -444, 169, 326, -416, 84, 84, 84, -412, 99,
	84, -438, -435, 83, -279, 264, 135, 89, 89, 99,
	83, -472, 31, 89, -377, 83, 84, 84, 84, 84,
	-376, 99, -243, -319, 84, 84, 157, 83, 21, -305,
	-455, 609, 89, -491, 444, -485, -483, 439, 440, 441,
	442, 89, -422, -423, 411, -344, -347, 603, 451, 451,
	451, -323, 243, -203, -323, 305, 424, -310, 89, -379,
	-378, -176, 84, -414, 314, 21, -279, -319, -414, 84,
	157, -319, -319, 326, 99, 143, 99, -182, 326, -428,
	313, 84, -438, -279, -437, -436, 312, 265, 83, 84,
	-350, -362, -319, 84, -260, -259, 537, -376, -379, 81,
	-379, 81, -379, 81, -379, 81, 84, -243, -323, 246,
	-306, -323, -486, 89, -493, 244, -489, -490, 443, -483,
	21, 441, 21, 21, -127, 157, 114, 452, 452, 452,
	350, -202, 35, 446, 380, -380, 252, 346, 347, 93,
	541, 333, 334, -176, 21, -415, -243, -280, -343, -343,
	99, 99, 84, 157, -323, 261, 83, -357, -351, -350,
	261, 84, -323, -264, -262, -263, 80, 458, 303, 304,
	84, -508, -508, -508, -508, -265, 84, 157, -500, 83,
	99, -488, -487, -489, 21, -486, 21, -486, -486, 448,
	-422, -323, 89, -319, -319, 89, 89, 332, -302, 83,
	-427, -436, -435, -357, 84, 157, -398, -263, 80, -262,
	80, 16, 15, -379, -379, -379, -379, -323, -504, 31,
	84, -499, -498, -303, -494, -323, 444, 445, 89, -486,
	125, -578, -577, 626, 99, 99, -323, -412, -417, 84,
	-351, -261, 300, 301, 31, 169, -261, -503, -502, -501,
	84, 157, 156, 89, 89, 84, -432, 104, 41, 302,
	157, 125, -498, -323, -502, 41, -350, 156, -323,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 0, 282, 283, 284, 893, 894, 895, 896, 897,
	898, 899, 0, 0, 0, 0, 0, 650, 651, 0,
	616, 0, 0, 0, 0, 0, 0, 500, 501, 502,
	503, 504, 505, 506, 507, 508, 509, 510, 511, 512,
	513, 514, 515, 516, 517, 518, 519, 520, 521, 522,
	523, 524, 525, 526, 527, 528, 529, 530, 531, 383,
	384, 385, 386, 387, 388, 389, 390, 0, 307, 303,
	228, 229, 230, 231, 232, 314, 315, 477, 0, 0,
	0, 0, 733, -2, 72, 0, 0, 296, 0, 287,
	287, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, -2, 663, 0, 617, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 367, 368, 369, 363, 364, 366, 365, -2,
	0, 663, 0, 0, 0, 741, 0, 0, 0, 0,
	0, 784, 806, 23, 0, 7, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 18, 0, 0, 19, 0,
	19, 0, 0, 0, 1309, 1310, 1311, 1312, 2091, 2061,
	-2, 1833, 1810, 1985, 1986, 2122, 2123, 2124, 2125, 2126,
	2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136,
	2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146,
	2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156,
	2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166,
	2167, 2168, 2169, 2170, 2171, 1767, 1768, 1769, 1770, 1771,
	1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,
	1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1811, 1812,
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832,
	1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843,
	1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873,
	1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883,
	1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893,
	1894, 1895, 1896, 1897, 1898, 1900, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
	1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
	1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
	1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
	1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
	1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964,
	1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974,
	1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
	1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
	1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
	2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
	2017, -2, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026,
	2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036,
	2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,
	2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
	2057, 2058, 2059, 2060, 2062, 2063, 2064, 2065, 2066, 2067,
	2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, -2,
	-2, -2, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087,
	2088, 2089, 2090, 2092, 2093, 2094, 2095, 2096, 2097, 2098,
	2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
	2109, 2110, 2111, 0, 280, 278, 1780, 1810, 1833, 1887,
	1898, 1899, 1933, 1985, 1986, 2018, 2061, 2077, 2078, 2079,
	2091, 0, 0, 917, 0, 711, 0, 0, 716, 1258,
	711, 308, 652, 653, 741, 767, 614, 0, 345, 0,
	1824, 349, 2068, 0, 0, 0, 611, 339, 340, 341,
	342, 343, 344, 0, 0, 892, 0, 0, 335, 0,
	302, 1889, 2090, 0, 0, 0, 0, 0, 171, 1036,
	173, 1038, 177, 185, 0, 0, 0, 190, 191, 194,
	195, 196, 197, 198, 0, 202, 0, 204, 207, 0,
	209, 210, 0, 213, 214, 215, 0, 225, 226, 227,
	1039, 1040, 1041, -2, 100, 915, 1738, 1625, 0, 1632,
	1645, 1656, 1389, 1390, 1391, 1392, 0, 0, 0, 0,
	0, 0, 1400, 1401, 0, 1429, 2126, 2167, 2168, 0,
	1409, 1410, 1411, 1412, 1413, 1414, 111, 123, 124, 1678,
	1679, 1680, 1681, 1682, 1683, 1684, 0, 1686, 1687, 1688,
	1596, 1376, 1309, 0, 2135, 0, 2157, 2162, 2163, 2164,
	2165, 2156, 0, 0, 1581, 0, 1571, 0, 0, -2,
	-2, 0, 0, 1958, -2, 2169, 2170, 2171, 2132, 2153,
	2161, 2136, 2137, 2160, 2128, 2129, 2130, 2123, 2124, 2125,
	2127, 2139, 2141, 2152, 0, 2148, 2158, 2159, 2066, 0,
	0, 0, 0, 0, 2108, 125, 126, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1592, -2, -2, 1595, -2, 1598,
	-2, -2, -2, -2, 1603, 1604, -2, 1606, -2, -2,
	-2, -2, -2, -2, -2, 1583, 1584, 1585, 1586, 1575,
	1576, 1577, 1578, 1579, 1580, -2, -2, -2, 767, 842,
	0, 767, 0, 742, 789, 792, 795, 798, 745, 0,
	0, 73, 74, 0, 0, 0, 297, 298, 286, 288,
	0, 292, 0, 285, 1072, 0, 0, 0, 0, 1072,
	1072, 1072, 1072, 1072, 0, 1072, 0, 0, 0, 0,
	0, 1072, 0, 950, 1043, 1044, 1045, 1070, 1071, 1144,
	0, 0, 0, 668, 664, 665, 666, 667, 755, 0,
	757, 760, 589, 589, 815, 535, 0, 0, 0, 589,
	0, 549, 541, 0, 0, 0, 589, 0, 0, 762,
	762, 0, 592, 601, 589, 589, -2, 589, 589, 586,
	589, 0, 0, 1084, 555, 556, 557, 541, 541, 560,
	561, 562, 572, 573, 602, 1762, 0, 0, 477, 477,
	0, 477, 0, 477, 477, 477, 670, 1928, 1831, 1904,
	1889, 2090, 0, 253, 1958, 258, 0, 1832, 1851, 0,
	0, 1869, 0, -2, 0, 324, 767, 0, 0, 741,
	0, 0, 0, 0, 0, 477, 477, 477, 477, 477,
	1143, 477, 477, 477, 477, 477, 0, 0, 0, 477,
	477, 477, 0, 0, 807, 808, 803, 804, 805, 809,
	810, 5, 6, 19, 0, 0, 0, 0, 0, 0,
	79, 78, 0, 1739, 1757, 1691, 1692, 1693, 1744, 1695,
	1748, 1748, 1748, 1748, 1724, 1725, 1726, 1727, 1728, 1729,
	1730, 1731, 1732, 1748, 1748, 0, 0, 1737, 1715, 1746,
	1746, 1746, 1744, 1741, 1696, 1697, 1698, 1699, 1700, 1701,
	1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1751, 1751,
	1754, 1754, 1751, 0, 381, 379, 380, 1621, 0, 0,
	0, 0, 711, 715, 1256, 0, 0, 0, 767, -2,
	0, 0, 615, 346, 1313, 0, 0, 350, 0, 351,
	0, 0, 0, 370, 0, 373, 358, 359, 360, 354,
	0, 151, 0, 337, 338, 0, 0, 304, 0, 0,
	0, 478, 0, 0, 0, 0, 0, 0, 182, 178,
	186, 189, 199, 206, 0, 218, 220, 223, 179, 187,
	192, 193, 200, 221, 180, 183, 184, 188, 222, 224,
	181, 201, 205, 219, 203, 208, 211, 212, 217, 0,
	152, 0, 0, 0, 0, 0, 1631, 0, 0, 1664,
	1665, 1666, 1667, 1668, 1669, 1670, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 1625, 0, 0, 1395,
	1396, 1397, 1398, 0, 1402, 0, 1430, 0, 0, 0,
	0, 0, 1685, 1689, 0, 1621, 1621, 0, 1621, 1617,
	0, 0, 0, 0, 0, 0, 1621, 1554, 0, 0,
	1556, 1572, 0, 0, 1558, 1559, 0, 1562, 1563, 1621,
	0, 1621, 1567, 1621, 1621, 1621, 1550, 1551, 0, 1617,
	1617, 1617, 1617, 0, 0, 1617, 1617, 1617, 1617, 1617,
	1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 0,
	0, 0, 0, 762, 0, 768, 0, -2, 0, 786,
	788, 790, 791, 793, 794, 796, 797, 799, 800, 747,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 290,
	0, 295, 0, 0, 0, 914, 0, 0, 1072, 1072,
	1072, 951, 0, 0, 0, 0, 0, 0, 0, 0,
	1072, 1072, 1072, 1072, 0, 1090, 0, 0, 0, 670,
	669, 0, 756, 0, 0, 815, 0, 0, 533, 534,
	0, 0, 541, 589, 589, 547, 548, 543, 542, 597,
	598, 592, 0, 592, 592, 815, 0, 566, 567, 568,
	589, 589, 574, 763, 0, 575, 576, 592, 0, 599,
	600, 815, 0, 0, 815, 815, 0, 584, 585, 587,
	589, 0, 0, 1072, 0, 607, 543, 543, 1763, 1764,
	0, 0, 1081, 0, 0, 0, 610, 0, 0, 0,
	0, 671, 233, 236, 0, 239, 0, 1928, 0, 1928,
	0, 246, 0, 0, 0, 0, 0, 0, 276, 277,
	0, 0, 0, 0, 267, 270, 1250, 1251, 1033, 1034,
	271, 272, 316, 317, 0, 762, 785, 787, 781, 782,
	783, 0, 0, 0, 0, 0, 0, 0, 0, 477,
	0, 0, 0, 0, 0, 646, 0, 930, 648, 0,
	0, 0, 0, 823, 817, 819, 887, 111, 823, 8,
	96, 93, 0, 19, 0, 0, 19, 19, 0, 19,
	281, 0, 1760, 1758, 1759, 1694, 1745, 0, 1720, 0,
	1721, 1722, 1723, 1733, 1734, 0, 0, 1716, 0, 1717,
	1718, 1719, 1710, 0, 1711, 1712, 0, 1713, 1714, 279,
	378, 0, 0, 1622, 918, 0, 689, 703, 684, 0,
	692, 0, 0, 1258, 1259, 0, 0, 0, 672, 703,
	674, 0, 692, 762, 739, 0, 717, 0, 0, 347,
	0, 355, 352, 0, 356, 0, 0, 372, 374, 375,
	376, 361, 362, 612, 333, 334, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 336, 121, 0, 305, 306,
	0, 0, 0, 165, 166, 167, 168, 169, 170, 172,
	156, 635, 637, 1025, 1037, 0, 1028, 0, 175, 216,
	148, 0, 0, 0, 1626, 1627, 1628, 1629, 1630, 1635,
	0, 1637, 1639, 1641, 1643, 0, 1661, -2, -2, 1377,
	1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
	1388, 1646, 1659, 1660, 0, 0, 0, 0, 0, 0,
	1657, 1657, 1652, 0, 1415, 1252, 1253, 1393, 0, 0,
	1427, 1431, 0, 0, 0, 0, 0, 112, 1616, 1521,
	1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531,
	1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541,
	1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 0, 0,
	1625, 0, 0, 0, 1618, 1619, 0, 0, 0, 1509,
	0, 0, 1515, 1516, 1517, 0, 698, 0, 1582, 1555,
	1573, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 841, 843,
	0, 707, 709, 710, 736, 717, 743, 0, 0, 0,
	71, 76, 0, 1111, 0, 0, 0, 299, 300, 0,
	0, 294, 0, 0, 0, -2, 0, 0, 0, 0,
	0, 966, 967, 475, 1019, 0, 0, 0, 1035, 1060,
	1068, 0, 0, 0, 0, 0, 1117, 952, 957, 958,
	959, 953, 954, 960, 961, 0, 758, 0, 0, 856,
	532, 590, 591, 816, 538, 1889, 543, 815, 815, 550,
	544, 551, 594, 552, 553, 554, 592, 815, 815, 764,
	589, 592, 577, 593, 592, 595, 581, 0, 588, 595,
	608, 595, 0, 606, 558, 559, 1119, 760, 393, 394,
	395, 397, 0, 445, 445, 445, 428, 445, 0, 0,
	416, 1765, 0, 0, 0, 0, 425, 1765, 0, 0,
	1765, 1765, 1765, 1765, 1765, 1765, 1765, 0, 0, 1765,
	1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765,
	0, 1765, 1765, 1765, 1765, 1765, 1236, 1765, 0, 1082,
	435, 436, 437, 438, 443, 444, 0, 472, 0, 0,
	965, 0, 475, 0, 1005, 828, 0, 829, 830, 826,
	858, 882, 882, 0, 882, 862, 1258, 0, 0, 244,
	245, 234, 0, 235, 0, 247, 248, 0, 250, 251,
	252, 259, 1831, 1904, 254, 256, 0, 0, 260, 273,
	274, 275, 0, 0, 265, 266, 0, 0, 319, 320,
	322, 0, 717, 1085, 1086, 1087, 632, 1254, 633, 634,
	638, 0, 0, 641, 642, 643, 644, 645, 932, 0,
	0, 1012, 1013, 1014, 815, 0, 824, 0, 820, 888,
	0, 890, 0, 815, 0, 94, 19, 0, 87, 84,
	0, 0, 0, 0, 0, 1740, 1690, 1761, 0, 0,
	0, 1742, 0, 0, 0, 0, 0, 77, 719, 679,
	0, 683, 700, 0, 704, 0, 0, 696, 688, 693,
	0, 0, 713, 680, 1257, 0, 0, 0, 673, 0,
	0, 678, 717, 0, 740, 769, 770, 773, 1314, 0,
	357, 353, 371, 0, 477, 0, 0, 0, 159, 1022,
	0, 160, 164, 154, 0, 0, 0, 1027, 0, 1024,
	1029, 0, 174, 0, 0, 149, 150, 1102, 1111, 0,
	0, 0, 1636, 1638, 1640, 1642, 1644, 0, 1647, 1657,
	1657, 1653, 0, 1648, 0, 1650, 0, 1626, 1399, 0,
	1432, 0, 0, 0, 0, 0, 0, 0, 0, 1499,
	1500, 0, 0, 1504, 0, 1506, 1507, 1508, 1510, 0,
	0, 0, 1514, 0, 1553, 1574, 1557, 1560, 0, 1564,
	0, 1566, 1568, 1569, 1570, 0, 767, 767, 0, 0,
	1471, 1471, 1471, 0, 0, 0, 0, 1471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1416, 0,
	1417, 1418, 0, 0, 0, 844, 737, 0, 0, 0,
	0, 0, 1109, 0, 64, 0, 0, 301, 289, 291,
	0, 0, 1073, 0, 0, 920, 921, 923, 0, 926,
	927, 928, 932, 760, 0, 760, 977, 1765, 479, 0,
	0, 1021, 0, 0, 994, 0, 0, 0, -2, 0,
	0, 1068, 0, 0, 0, 1121, 0, 0, 0, 657,
	661, 23, 761, 0, 536, 0, 537, 589, 545, 546,
	815, 569, 570, 0, 0, 815, 589, 589, 580, 0,
	592, 603, 0, 604, 605, 1121, 0, 0, 1081, 1187,
	1155, 406, 0, 1270, 1271, 446, 0, 1277, 1286, 1072,
	1346, 0, 1286, 0, 0, 1288, 1289, 0, 0, 0,
	0, 429, 430, 0, 415, 0, 0, 0, 0, 0,
	0, 414, 0, 0, 456, 0, 0, 0, 0, 0,
	1766, 1765, 1765, 0, 423, 424, 0, 427, 0, 0,
	0, 0, 0, 0, 0, 0, 1765, 1765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1227,
	0, 0, 0, 0, 0, 0, 0, 1242, 1243, 977,
	1765, 0, 0, 0, 0, 479, 992, 1010, 0, 0,
	0, 0, 0, 0, 848, 0, 0, 0, 847, 0,
	0, 0, 0, 0, 760, 883, 0, 885, 886, 860,
	-2, 0, 828, 865, 1621, 237, 238, 0, 0, 243,
	261, 263, 0, 0, 0, 262, 264, 268, 269, 318,
	321, 323, 779, 0, 0, 1145, 0, 933, 934, 936,
	937, 0, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1815, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 931, 649, 813,
	818, 825, 889, 891, 112, 821, 813, 0, 97, 19,
	96, 88, 89, 0, 19, 0, 0, 0, 0, 1750,
	1749, 1735, 0, 1736, 1747, 1752, 0, 1755, 0, 382,
	723, 0, 0, 703, 705, 0, 0, 703, 0, 0,
	712, 0, 0, 0, 0, 0, 703, 779, 719, 0,
	776, 774, 775, 0, 0, 613, 122, 377, 0, 0,
	0, 0, 0, 636, 0, 1026, 156, 0, 0, 176,
	0, 0, 0, 1111, 1106, 1620, 1649, 1651, 0, 1658,
	1654, 1394, 1403, 1428, 0, 0, 1434, 1446, 1446, 0,
	0, 0, 1437, 1748, 1748, 1440, 1744, 1746, 1744, 1446,
	1446, 0, 113, 0, 0, 1505, 0, 0, 0, 699,
	0, 0, 0, 1467, 1469, 1471, 1471, 1478, 1472, 1479,
	1480, 1471, 1471, 1471, 1471, 1485, 1471, 1471, 1471, 1471,
	1471, 1471, 1471, 1471, 1471, 1471, 1465, 0, 0, 1679,
	1680, 708, 0, 0, 750, 751, 752, 753, 754, 0,
	0, 57, 57, 1111, 0, 65, 0, 0, 293, 61,
	62, 0, 0, 0, 925, 0, 0, 0, 1263, 0,
	981, 978, 979, 980, 0, 1016, 480, 481, 482, 483,
	0, 0, 0, 1020, 0, 1005, 1005, 987, 0, 0,
	0, 1061, 1062, 1063, 1064, 1065, 1066, 1067, -2, 1076,
	0, 0, 0, 1263, 1095, 0, 0, 1100, 1263, 1263,
	0, 1129, 0, 1118, 711, 0, -2, 0, 0, 659,
	0, 0, 857, 539, 815, 563, 765, 766, 595, 815,
	815, 0, 589, 609, 1129, 1120, 0, 396, 445, 0,
	1175, 0, 0, 1181, 0, 1188, 399, 0, 447, 0,
	1276, 1303, 1287, 1303, 1347, 1303, 1303, 1072, 0, 447,
	0, 0, 417, 453, 0, 0, 0, 0, 0, 413,
	450, 773, 400, 402, 403, 404, 454, 455, 457, 0,
	459, 460, 419, 431, 432, 433, 434, 0, 0, 0,
	426, 439, 440, 441, 442, 401, 1204, 1205, 1206, 1209,
	1210, 1211, 1212, 0, 0, 1215, 1216, 1217, 1218, 1219,
	1300, 1301, 1302, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
	1244, 1245, 1246, 1247, 1248, 1249, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 0, 0, 1239, 0, 981, 0,
	0, 0, 0, 0, 1016, 994, 0, 1001, 0, 1006,
	1007, 0, 0, 681, 815, 311, 0, 852, 845, 0,
	834, 849, 850, 851, 837, 0, 839, 0, 835, 836,
	815, 827, 859, 884, 861, 864, 866, 867, 873, 0,
	0, 0, 0, 240, 241, 242, 249, 0, 499, 255,
	735, 0, 1255, 639, 640, 1146, 1147, 647, 0, 938,
	811, 0, 0, 811, 92, 95, 0, 90, 0, 0,
	0, 0, 82, 80, 1743, 0, 0, 725, 136, 0,
	0, 0, 701, 0, 706, 703, 687, 697, 686, 694,
	695, 714, 1260, 1261, 1262, 703, 677, 676, 738, 723,
	771, 772, 0, 1315, 348, 0, 1023, 156, 161, 162,
	163, 157, 155, 1030, 0, 1032, 0, 1104, 0, 0,
	1655, 1433, 1404, 1435, 1447, 1448, 1436, 0, 1406, 1407,
	1438, 1439, 1441, 1442, 1443, 1444, 1445, 1408, 1501, 0,
	1503, 1511, 1512, 0, 1561, 1565, 0, 0, 0, 0,
	0, 1476, 1477, 1481, 1482, 1483, 1484, 1486, 1487, 1488,
	1489, 1490, 1491, 1492, 1493, 1494, 1495, 767, 1466, 0,
	0, 0, 0, 0, 0, 0, 748, 0, 0, 0,
	59, 0, 59, 1110, 1112, 0, 0, 0, 63, 913,
	916, 922, 924, 0, 0, 0, 1264, 1265, 1267, 1268,
	1269, 0, 949, 0, 0, 969, 970, 971, 983, 0,
	0, 0, 485, 486, 0, 0, 0, 498, 494, 495,
	496, 476, 1015, 1001, 1001, 990, 0, 0, 1000, 0,
	1077, 1765, 1765, 1765, 0, 0, 1189, 1765, 1765, 0,
	1097, 1099, 0, 0, 1193, 1132, 0, 0, 1123, 0,
	882, 0, 0, 815, 658, 661, 662, 759, 540, 578,
	582, 579, 0, 815, 1132, 392, 1153, 0, 0, 0,
	0, 0, 1185, 0, 0, 1157, 0, 418, 448, 0,
	-2, 0, 1304, 0, 1290, 1304, 0, 0, 1303, 0,
	407, 447, 0, 0, 0, 461, 465, 466, 0, 463,
	1342, 0, 464, 0, 452, 0, 458, 1207, 1208, 0,
	1213, 1214, 0, 1238, 0, 0, 467, 0, 0, 0,
	468, 469, 474, 987, 0, 1004, 0, 1011, 0, 1008,
	1009, 767, 0, 0, 831, 853, 0, 0, 832, 0,
	833, 838, 840, 310, 868, 0, 0, 870, 871, 872,
	863, 257, 780, 935, 0, 801, 0, 0, 822, 802,
	0, 19, 0, 0, 85, 1753, 1756, 727, 0, 724,
	137, 0, 0, 0, 0, 691, 702, 685, 675, 725,
	777, 778, 158, 153, 1031, 1114, 0, 1105, 0, 0,
	1513, 0, 1471, 1468, 1471, 1470, 1462, 0, 1419, 0,
	1421, 1422, 1423, 0, 1425, 1426, 0, 746, 0, 55,
	0, 58, 56, 0, 66, 0, 0, 955, 1193, 0,
	955, 982, 968, 0, 1017, 1018, 0, 487, 488, 0,
	491, 497, 984, 985, 986, 0, 0, 998, 0, 0,
	0, 0, 1069, 1083, 0, 0, 0, -2, 0, -2,
	1094, 0, 1138, 0, 1130, 0, 1122, 0, 1125, 815,
	815, -2, 655, 660, 0, 0, 583, 1138, 1155, 0,
	1176, 0, 0, 0, 0, 0, 0, 0, 1156, 0,
	1169, 449, 1305, -2, 1318, 1320, 0, 1082, 1323, 1324,
	0, 0, 0, 0, 0, 0, 1368, 1332, 0, 0,
	1336, 1337, 1338, 0, 0, 1341, 0, 1673, 1674, 0,
	1345, 0, 0, 0, 0, 0, 0, 0, 1284, 408,
	409, 0, 411, 412, 1765, 1343, 451, 405, 1765, 421,
	1237, 1240, 1241, 473, 470, 471, 990, 993, 1002, 682,
	762, 312, 313, 854, 0, 846, 877, 874, 0, 0,
	939, 812, 814, 86, 91, 0, 0, 729, 0, 726,
	0, 720, 722, 147, 690, 727, 107, 139, 0, 0,
	1405, 1502, 1552, 1474, 1475, 0, 1463, 0, 1457, 1458,
	1459, 1464, 0, 0, 749, 744, 60, 68, 0, 0,
	0, 941, 948, 962, 1088, 1266, 947, 0, 0, 484,
	489, 0, 492, 493, 0, 988, 989, 0, 996, 0,
	0, 1056, 1744, 0, 1078, 1079, 1080, 1190, 1191, 1192,
	1148, 1096, 0, -2, 1201, 0, 1092, 1114, 1148, 0,
	1126, 0, 1133, 0, 1131, 1124, 767, 656, 596, 1135,
	398, 1187, 1177, 0, 1179, 0, 0, 0, 0, 1158,
	-2, 0, 1319, 1321, 1322, 1325, 1326, 1327, 1373, 1374,
	1375, 0, 0, 1330, 1370, 1371, 1372, 1331, 0, 0,
	0, 0, 0, 1671, 1672, 1366, 0, 0, 1291, 1293,
	1294, 1295, 1296, 1297, 1298, 1299, 1292, 0, 0, 0,
	1283, 1285, 410, 0, 0, 1765, 1003, 309, 0, 0,
	878, 880, 875, 876, 81, 83, 98, 0, 728, 138,
	0, 729, 109, 0, 130, 0, 1115, 0, 1473, 1460,
	0, 0, 0, 0, 0, 1675, 1676, 1677, 0, 1420,
	1424, 0, 67, 0, 0, 963, 964, 972, 973, 0,
	975, 976, 490, 991, 995, 998, 0, 1047, 0, 773,
	0, 1150, 0, 1098, 1081, 1203, 1765, 1101, 1150, 0,
	1195, 1765, 1765, 1116, 0, 1128, 0, 1140, 0, 1134,
	762, 391, 0, 1137, 1173, 1178, 1180, 1182, 0, 1186,
	1184, 1159, -2, 0, 1167, 0, 0, 1328, 1329, 0,
	0, 1571, 1765, 0, 1361, 0, 1047, 1047, 1047, 1047,
	0, 462, 420, 0, 855, 869, 0, 0, 0, 718,
	99, 0, 108, 127, 0, 140, 141, 0, 0, 0,
	0, 1107, 0, 1449, 0, 0, 0, 1453, 1454, 1455,
	1456, 69, 0, 0, 940, 0, 974, 997, 999, 1046,
	1057, 1058, 773, 1091, 0, 1187, 1202, 0, 1093, 1194,
	0, 0, 0, 1127, 1139, 0, 1142, 654, 1136, 1154,
	0, 1183, 1160, 1168, 0, 1163, 0, 0, 0, 1369,
	0, 1335, 0, 1340, 1349, 1362, 0, 0, 1272, 0,
	1274, 0, 1278, 0, 1280, 0, 0, 422, 879, 881,
	0, 731, 721, 110, 114, 0, 136, 133, 0, 142,
	0, 0, 0, 0, 1103, 0, 0, 1450, 1451, 1452,
	0, 0, 942, 943, 956, 1048, 1765, 1765, 0, 0,
	0, 1054, 1055, 1059, 0, 1175, 1207, 1196, 1197, 1198,
	1141, 1174, 1162, 0, -2, 1170, 0, 0, 1623, 1633,
	1634, 1333, 1339, 1348, 1350, 1351, 0, 1363, 1364, 1365,
	1367, 1047, 1047, 1047, 1047, 1282, 730, 0, 101, 0,
	0, 131, 132, 134, 0, 143, 0, 145, 146, 0,
	1461, 70, 944, 0, 0, 1051, 1052, 0, 1151, 0,
	1153, 1164, -2, 0, 1172, 0, 1334, 1352, 0, 1353,
	0, 0, 0, 1273, 1275, 1279, 1281, 732, 1113, 0,
	115, 0, 117, 119, 120, 1306, 128, 129, 135, 144,
	0, 929, 945, 0, 1049, 1050, 1053, 0, 1155, 1171,
	1624, 1354, 1356, 1357, 0, 0, 1355, 102, 103, 0,
	116, 0, 0, 1108, 946, 1152, 1149, 1358, 1360, 1359,
	0, 0, 118, 1307, 104, 105, 106, 0, 1308,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 639, 636,
	126, 125, 127, 3, 640, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 637, 138, 638, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:815
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:822
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:828
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:836
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:842
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:846
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:861
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:865
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:871
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:876
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:880
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:913
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:923
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:934
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:946
		{
			yyVAL.str = ""
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:950
		{
			yyVAL.str = yyDollar[2].str
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:955
		{
			yyVAL.str = ""
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:959
		{
			yyVAL.str = yyDollar[2].str
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:967
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:977
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:987
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1000
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().ToLower()),
			}

		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1008
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().ToLower()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1016
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().ToLower()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().ToLower()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1025
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().ToLower()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().ToLower()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().ToLower()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1035
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().ToLower()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().ToLower()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1044
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELDATABASE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().ToLower()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().ToLower()),
				SnapShotName:  tree.Identifier(yyDollar[8].cstrUnion().ToLower()),
				ToAccountName: tree.Identifier(yyDollar[11].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1054
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELTABLE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().ToLower()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().ToLower()),
				TableName:     tree.Identifier(yyDollar[7].cstrUnion().ToLower()),
				SnapShotName:  tree.Identifier(yyDollar[10].cstrUnion().ToLower()),
				ToAccountName: tree.Identifier(yyDollar[13].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1067
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1087
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1093
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1100
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1108
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1114
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1123
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1133
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1141
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1149
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1157
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1167
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1175
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1185
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1192
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1201
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1211
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1215
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1221
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1225
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1231
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1240
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1250
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1254
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1260
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1269
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1273
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1279
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1300
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1314
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1321
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1325
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1331
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1335
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1341
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1348
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1356
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1360
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1372
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1376
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1389
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1395
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1401
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin(), yyDollar[5].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1408
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1412
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1416
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1422
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1431
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1442
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1446
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1452
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1456
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1462
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1466
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1472
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1496
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1515
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1519
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1523
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1528
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1532
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1541
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1551
		{
			yyVAL.str = ""
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1558
		{
			yyVAL.str = yyDollar[3].str
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1563
		{
			yyVAL.str = "\n"
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1570
		{
			yyVAL.str = yyDollar[3].str
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1575
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1579
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1607
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1611
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1617
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1625
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1645
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1664
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1689
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1693
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1697
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1702
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1706
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1712
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1725
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1736
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1749
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1753
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1763
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1776
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1789
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1795
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1801
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1808
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1816
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1825
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1829
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1833
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1837
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1841
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1845
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1852
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1856
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1862
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1869
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1878
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1882
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1888
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1892
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1896
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1900
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1904
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1908
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1912
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1916
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1920
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1924
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1928
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1932
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1936
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1940
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1944
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1948
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1952
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1956
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1960
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1964
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1968
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1972
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1976
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1980
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1984
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1988
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1992
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1996
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2000
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2004
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2008
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2012
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2016
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2020
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2024
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2028
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2032
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2036
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2040
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2044
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2048
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2052
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2056
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2060
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2064
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2068
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2072
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2076
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2080
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2084
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2088
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2101
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2108
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2115
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2125
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2129
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2135
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2142
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2150
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2154
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2158
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2162
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2168
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2172
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2178
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2185
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2192
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2201
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2231
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2235
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2239
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2245
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2251
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2255
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2262
		{
			yyVAL.str = yyDollar[3].str
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2268
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2272
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2278
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2286
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2295
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2304
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2312
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2320
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2343
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2366
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2373
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2380
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2388
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2395
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2402
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2411
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2415
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2419
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2425
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2429
		{
			yyVAL.str = yyDollar[1].str
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2435
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2439
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2445
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2449
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2460
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2466
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2471
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2475
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2479
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2483
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2487
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2491
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2495
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2499
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2503
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2509
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2513
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2517
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2521
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2526
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2531
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2537
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2550
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2563
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2576
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2589
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2605
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2612
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2623
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2634
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2638
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2644
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2654
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2660
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2664
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2670
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2676
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2680
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2684
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2688
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2694
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2707
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2713
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2717
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2723
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2727
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2733
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2739
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2750
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2756
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2760
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2764
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2768
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2772
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2776
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2784
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2792
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2802
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2814
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2818
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2826
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2834
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2873
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2877
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2883
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2889
		{
			yyVAL.str = yyDollar[1].str
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2894
		{
			yyVAL.str = "true"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2895
		{
			yyVAL.str = "false"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2896
		{
			yyVAL.str = yyDollar[1].str
		}
	case 377:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2901
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2907
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2916
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2923
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2931
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2935
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2958
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2981
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2991
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2998
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3007
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3011
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3017
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3021
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3045
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3055
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3071
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3089
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3093
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3099
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3103
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3109
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3115
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3123
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3133
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3141
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3151
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3161
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3171
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3178
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3182
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3186
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3190
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3194
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3201
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3207
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3211
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3215
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3219
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3223
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3227
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3231
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3235
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3240
		{
			yyVAL.str = ""
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3271
		{
			yyVAL.str = ""
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3275
		{
			yyVAL.str = string("COLUMN")
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3280
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3286
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3292
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3300
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3304
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3310
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3318
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3325
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3331
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3337
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3343
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3349
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3356
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3363
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3371
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3377
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3389
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3395
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3403
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3407
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3414
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3432
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3447
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3462
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3477
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3490
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3496
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3507
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3520
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3524
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3532
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3536
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3541
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3545
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3561
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3565
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3569
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3573
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3580
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3584
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3588
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3592
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3599
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3603
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3610
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3614
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3618
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3622
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3629
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3636
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3642
		{
			yyVAL.item = nil
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3647
		{
			yyVAL.item = nil
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3690
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3699
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3707
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3715
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3719
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3723
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3734
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3738
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3744
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3749
		{
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3753
		{
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3758
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3768
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3778
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3786
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3792
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3798
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3804
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3810
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3816
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3822
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3831
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3835
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3839
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3843
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3847
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3851
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3855
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3859
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3865
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3874
		{
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3876
		{
		}
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3885
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3895
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3904
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3908
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3912
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3918
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3924
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3930
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3936
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3945
		{
			yyLOCAL = &tree.ShowTables{
				Open:         false,
				Full:         yyDollar[2].fullOptUnion(),
				DBName:       yyDollar[4].str,
				Like:         yyDollar[5].comparisionExprUnion(),
				Where:        yyDollar[6].whereUnion(),
				SnapshotName: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3956
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3968
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:         yyDollar[3].comparisionExprUnion(),
				Where:        yyDollar[4].whereUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3976
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3982
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3994
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4008
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4014
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4020
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4027
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4031
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4036
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4040
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4044
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4049
		{
			yyVAL.str = ""
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4053
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4059
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4064
		{
			yyVAL.str = ""
		}
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
//line mysql_sql.y:4068
		{
			yyVAL.str = yyDollar[4].str
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4083
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4087
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4093
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4101
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4108
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4112
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4118
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4124
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4128
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4134
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4140
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4144
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4148
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4154
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4158
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4184
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4192
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4200
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4208
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4212
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4218
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4231
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4239
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4248
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4254
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4262
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4270
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4278
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4284
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4292
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4298
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4306
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4312
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4322
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4327
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4334
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4350
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4363
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4374
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4378
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4384
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4389
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4396
		{
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4398
		{
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4401
		{
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4410
		{
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4414
		{
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4419
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4428
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4435
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4441
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4449
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4456
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4463
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4483
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4491
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4501
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4505
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4511
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4518
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4524
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4532
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4539
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4546
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4565
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4569
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4573
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4578
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4582
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4586
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4592
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4601
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4605
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4611
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4615
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4621
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4625
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4631
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4636
		{
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4640
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4647
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4651
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4658
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4663
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4667
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4673
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4677
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4683
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4687
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4692
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4696
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4709
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4720
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4731
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4753
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4776
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4784
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4793
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4797
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4810
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4814
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4819
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4823
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4830
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4835
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4842
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4848
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4852
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4856
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4860
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4864
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4868
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4873
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4877
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4883
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4893
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4908
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4912
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4926
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4930
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4936
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4945
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4949
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4953
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4957
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4961
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4967
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4974
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4983
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4987
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4993
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5001
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5005
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5010
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5014
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5020
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5024
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5028
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5033
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5037
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5043
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5049
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5053
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5059
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5064
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5068
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5072
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5077
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5081
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5085
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5090
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5094
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5102
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5106
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5110
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5124
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5128
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5138
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5148
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5158
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5170
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5178
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5186
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5195
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5203
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5211
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5219
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5227
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5235
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5243
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5251
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5259
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5269
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5280
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5294
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5298
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5302
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5307
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5311
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5315
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5324
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5328
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5333
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5337
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5342
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5346
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5352
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5356
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5362
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5366
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5371
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5375
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5380
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5388
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5394
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5402
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5410
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5420
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5426
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5435
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5444
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5453
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5463
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5467
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5477
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 838:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5481
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5485
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5489
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 841:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5495
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5505
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5509
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5515
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5521
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5525
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5531
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5537
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5541
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5545
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5549
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5555
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5559
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5565
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5569
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5575
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5579
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5585
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5589
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5599
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5612
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5618
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5624
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: tree.NewCStrUseOrigin(yyDollar[1].cstrUnion().Origin(), yylex.(*Lexer).useOrigin),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5638
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5649
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5656
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5660
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5666
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5676
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5680
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5684
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5689
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5693
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5697
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5701
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5706
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5710
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5714
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5718
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5722
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5727
		{
			yyVAL.str = ""
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5731
		{
			yyVAL.str = yyDollar[1].str
		}
	case 884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5735
		{
			yyVAL.str = yyDollar[2].str
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5741
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5747
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5751
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5755
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5759
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5763
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5769
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 913:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5809
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5822
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5828
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 916:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5834
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5847
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5852
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5858
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5865
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5869
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5875
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5881
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5886
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5890
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5894
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5898
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5905
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5938
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5943
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5949
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5956
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5960
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5966
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5972
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5976
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5980
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5986
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5992
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5998
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6002
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6008
		{
			yyVAL.str = ""
		}
	case 946:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6015
		{
			yyVAL.str = yyDollar[2].str
		}
	case 947:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6021
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6036
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6053
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6070
		{
			yyVAL.str = yyDollar[1].str
		}
	case 951:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6074
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6080
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6084
		{
			yyVAL.str = "DEFINER = "
		}
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6088
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6093
		{
			yyVAL.str = ""
		}
	case 956:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6097
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 962:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6111
		{
			yyVAL.str = ""
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6119
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6125
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6130
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6136
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6149
		{
			var Str = yyDollar[1].str
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6154
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6159
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6165
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6172
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6179
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6186
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6193
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6201
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6207
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6214
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6221
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6229
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6235
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6244
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6261
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var Table = tree.Identifier("")
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6278
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier("")
			var Table = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6297
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6315
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6321
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6328
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6336
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6342
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6350
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6356
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6364
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6370
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6379
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6383
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6388
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6392
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6399
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1001:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6404
		{
			yyVAL.str = ""
		}
	case 1002:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6408
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1003:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6414
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6427
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var comment = yyDollar[7].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, comment)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6437
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6441
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6447
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6453
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6459
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6466
		{
			yyVAL.str = ""
		}
	case 1011:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6470
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1012:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6476
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6484
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6492
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6500
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1016:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6505
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6517
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6528
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6637
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6641
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6647
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6660
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6664
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6670
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6683
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6687
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6691
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6696
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6700
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6706
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6713
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6719
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6728
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1035:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6735
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6746
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6750
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6756
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6765
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6769
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6773
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6778
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6782
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6786
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6790
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6796
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6827
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6831
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6857
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6863
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6875
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6881
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6887
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6893
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6899
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6907
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6911
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6917
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6931
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6945
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6949
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6953
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6957
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6961
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6965
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6969
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6975
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6990
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6994
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7005
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7009
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7014
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7018
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7024
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7028
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7034
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7043
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7052
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7058
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7062
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7068
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7079
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7085
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7103
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7121
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7139
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7155
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7159
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7168
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7180
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7189
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7201
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7211
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7221
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7232
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7242
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7253
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7261
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7272
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7279
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7289
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7302
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7310
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7319
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7328
		{
			yyVAL.str = ""
		}
	case 1108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7332
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7338
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7342
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7347
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7351
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7358
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7370
		{
			yyVAL.str = ""
		}
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7374
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1116:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7380
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7401
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7415
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7419
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7423
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7429
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7433
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7440
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7447
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7454
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7461
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7465
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7469
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7473
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7477
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7484
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7491
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7495
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7502
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7509
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7513
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7519
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7525
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7529
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7536
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7543
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7550
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7557
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7561
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7566
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7570
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7574
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7579
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7583
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7596
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7600
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7608
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7616
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7620
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7632
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7636
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7642
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7646
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7652
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7665
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7679
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7683
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7689
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7693
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7699
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7708
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7719
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7723
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7728
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7732
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7738
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7743
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7751
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7755
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7765
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7769
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7780
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7788
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7796
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7804
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7815
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7824
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7834
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7844
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7848
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7853
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7857
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7863
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7867
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7873
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7882
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7892
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7896
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7902
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7906
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7912
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7921
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7931
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7935
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7941
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7945
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7949
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7955
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7959
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7963
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7967
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7971
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7975
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7979
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7984
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7988
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7992
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7996
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8000
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8004
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8008
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8012
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8016
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8020
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8024
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8028
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8032
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8038
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8044
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8048
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8052
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8056
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8060
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8066
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8072
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8078
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8084
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8090
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8096
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8100
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8104
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8108
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8115
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8119
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8125
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8136
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8140
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8146
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8150
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8154
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8158
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8162
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8166
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8180
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8184
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8193
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8198
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8204
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8208
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8212
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8219
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8226
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8234
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8241
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8245
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8251
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8255
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8259
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8265
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8269
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8275
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8288
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8301
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8340
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8380
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8394
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8400
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8413
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8426
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8439
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8452
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8467
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8477
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8483
		{
			yyVAL.str = ""
		}
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8487
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8497
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8503
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8509
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8530
		{
			yyVAL.str = ""
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8534
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8540
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8546
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8552
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8558
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin(), yyDollar[5].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8566
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8570
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8574
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8578
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8584
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8590
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8596
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin(), yyDollar[5].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8603
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8607
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8613
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8617
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8623
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8627
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8631
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8635
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8639
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8643
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8648
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8652
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8656
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8660
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8664
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8668
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8672
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8676
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8680
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8684
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[3].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8698
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8702
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8706
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8710
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8714
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8718
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8724
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8728
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8733
		{
			yyVAL.str = ""
		}
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8737
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8743
		{
			yyVAL.str = ""
		}
	case 1347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8747
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1348:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8753
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8770
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8777
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8784
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8791
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8798
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8807
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8813
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8819
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8823
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8827
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8831
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8835
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8840
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8847
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8851
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8855
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8860
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8864
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8869
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8873
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8889
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8895
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8899
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8903
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8907
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8911
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8915
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8919
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8923
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8927
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8931
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8935
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8939
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8943
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8949
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8953
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8957
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8961
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8965
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8969
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8973
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8977
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8981
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8985
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9027
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9031
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9035
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9040
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9048
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9052
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9056
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9060
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9064
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9074
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9078
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9082
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9086
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9090
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9094
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9098
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9104
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9113
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9122
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9133
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9143
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9153
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9162
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9172
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9182
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9192
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9201
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9211
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9215
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9220
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9224
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9230
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9234
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9240
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9249
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9261
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9278
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9295
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9308
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9321
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9333
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9347
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9362
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9377
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9394
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9409
		{
		}
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9416
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9420
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9424
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9430
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9434
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9438
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9442
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9448
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9452
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9456
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9462
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9470
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9480
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9484
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9491
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9496
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9500
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9505
		{
			yyVAL.str = ","
		}
	case 1468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9509
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9514
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9518
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1471:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9523
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9530
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9556
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9568
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9580
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9591
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9602
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9613
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9623
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9633
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9644
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9655
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9666
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9677
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9688
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9699
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9710
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9721
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9732
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9743
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9754
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9765
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9776
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9787
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9805
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9814
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9823
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9832
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9841
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9852
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9861
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9871
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9880
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9889
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9898
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9907
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9919
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9930
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9943
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9955
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9978
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1550:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10014
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10027
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10040
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10052
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10061
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10069
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10077
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10090
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10099
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10110
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10121
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10130
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10142
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10152
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10162
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10171
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10182
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10191
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10201
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10210
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10219
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10229
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10233
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10239
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10243
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10262
		{
		}
	case 1582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10264
		{
		}
	case 1616:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10305
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10317
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10321
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10325
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10331
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10336
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10340
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10346
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10350
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10356
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10360
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10367
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10371
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10375
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin("concat", yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10384
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10388
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10392
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10397
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10401
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10407
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10411
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10415
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10419
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10423
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10427
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10431
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10435
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10439
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10443
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10451
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10455
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10459
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10463
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10467
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10471
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10475
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10479
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10483
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10487
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10493
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10497
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10503
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10507
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10514
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10518
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10522
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10528
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10532
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10536
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10540
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10544
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10548
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10552
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10558
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10562
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10566
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10570
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10576
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10589
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10594
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10600
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10604
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10617
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10622
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10626
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10630
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10634
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10638
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10645
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10649
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10653
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10657
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10664
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10675
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10680
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10686
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10698
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10710
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10722
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10735
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10748
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10761
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10774
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10787
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10800
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10813
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10826
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10839
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10852
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10867
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10894
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10936
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10972
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11008
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11025
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11037
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11057
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11077
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11097
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11113
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11126
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11139
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11152
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11165
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11177
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11189
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11201
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11213
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11225
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11237
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11249
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11261
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11273
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11286
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11299
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11312
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11325
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11340
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11348
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11357
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11367
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11390
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11395
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11401
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11408
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11412
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11417
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11421
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11427
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11433
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11440
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11447
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11456
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11463
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11470
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11479
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11483
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11487
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11493
		{
		}
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11495
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11505
		{
			yyVAL.str = ""
		}
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11509
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
