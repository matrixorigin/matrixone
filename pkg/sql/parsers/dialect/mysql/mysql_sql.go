// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const SELECT = 57352
const STREAM = 57353
const INSERT = 57354
const UPDATE = 57355
const DELETE = 57356
const FROM = 57357
const WHERE = 57358
const GROUP = 57359
const HAVING = 57360
const ORDER = 57361
const BY = 57362
const LIMIT = 57363
const OFFSET = 57364
const FOR = 57365
const LOWER_THAN_SET = 57366
const SET = 57367
const ALL = 57368
const DISTINCT = 57369
const DISTINCTROW = 57370
const AS = 57371
const EXISTS = 57372
const ASC = 57373
const DESC = 57374
const INTO = 57375
const DUPLICATE = 57376
const DEFAULT = 57377
const LOCK = 57378
const KEYS = 57379
const VALUES = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const SUBQUERY_AS_EXPR = 57399
const LOWER_THAN_STRING = 57400
const ID = 57401
const AT_ID = 57402
const AT_AT_ID = 57403
const STRING = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const INTEGRAL = 57409
const HEX = 57410
const BIT_LITERAL = 57411
const FLOAT = 57412
const HEXNUM = 57413
const NULL = 57414
const TRUE = 57415
const FALSE = 57416
const LOWER_THAN_CHARSET = 57417
const CHARSET = 57418
const UNIQUE = 57419
const KEY = 57420
const OR = 57421
const PIPE_CONCAT = 57422
const XOR = 57423
const AND = 57424
const NOT = 57425
const BETWEEN = 57426
const CASE = 57427
const WHEN = 57428
const THEN = 57429
const ELSE = 57430
const END = 57431
const LE = 57432
const GE = 57433
const NE = 57434
const NULL_SAFE_EQUAL = 57435
const IS = 57436
const LIKE = 57437
const REGEXP = 57438
const IN = 57439
const ASSIGNMENT = 57440
const SHIFT_LEFT = 57441
const SHIFT_RIGHT = 57442
const DIV = 57443
const MOD = 57444
const UNARY = 57445
const COLLATE = 57446
const BINARY = 57447
const UNDERSCORE_BINARY = 57448
const INTERVAL = 57449
const BEGIN = 57450
const START = 57451
const TRANSACTION = 57452
const COMMIT = 57453
const ROLLBACK = 57454
const WORK = 57455
const CONSISTENT = 57456
const SNAPSHOT = 57457
const CHAIN = 57458
const NO = 57459
const RELEASE = 57460
const PRIORITY = 57461
const QUICK = 57462
const BIT = 57463
const TINYINT = 57464
const SMALLINT = 57465
const MEDIUMINT = 57466
const INT = 57467
const INTEGER = 57468
const BIGINT = 57469
const INTNUM = 57470
const REAL = 57471
const DOUBLE = 57472
const FLOAT_TYPE = 57473
const DECIMAL = 57474
const NUMERIC = 57475
const DECIMAL_VALUE = 57476
const TIME = 57477
const TIMESTAMP = 57478
const DATETIME = 57479
const YEAR = 57480
const CHAR = 57481
const VARCHAR = 57482
const BOOL = 57483
const CHARACTER = 57484
const VARBINARY = 57485
const NCHAR = 57486
const TEXT = 57487
const TINYTEXT = 57488
const MEDIUMTEXT = 57489
const LONGTEXT = 57490
const BLOB = 57491
const TINYBLOB = 57492
const MEDIUMBLOB = 57493
const LONGBLOB = 57494
const JSON = 57495
const ENUM = 57496
const GEOMETRY = 57497
const POINT = 57498
const LINESTRING = 57499
const POLYGON = 57500
const GEOMETRYCOLLECTION = 57501
const MULTIPOINT = 57502
const MULTILINESTRING = 57503
const MULTIPOLYGON = 57504
const INT1 = 57505
const INT2 = 57506
const INT3 = 57507
const INT4 = 57508
const INT8 = 57509
const SQL_SMALL_RESULT = 57510
const SQL_BIG_RESULT = 57511
const SQL_BUFFER_RESULT = 57512
const LOW_PRIORITY = 57513
const HIGH_PRIORITY = 57514
const DELAYED = 57515
const CREATE = 57516
const ALTER = 57517
const DROP = 57518
const RENAME = 57519
const ANALYZE = 57520
const ADD = 57521
const SCHEMA = 57522
const TABLE = 57523
const INDEX = 57524
const VIEW = 57525
const TO = 57526
const IGNORE = 57527
const IF = 57528
const PRIMARY = 57529
const COLUMN = 57530
const CONSTRAINT = 57531
const SPATIAL = 57532
const FULLTEXT = 57533
const FOREIGN = 57534
const KEY_BLOCK_SIZE = 57535
const SHOW = 57536
const DESCRIBE = 57537
const EXPLAIN = 57538
const DATE = 57539
const ESCAPE = 57540
const REPAIR = 57541
const OPTIMIZE = 57542
const TRUNCATE = 57543
const MAXVALUE = 57544
const PARTITION = 57545
const REORGANIZE = 57546
const LESS = 57547
const THAN = 57548
const PROCEDURE = 57549
const TRIGGER = 57550
const STATUS = 57551
const VARIABLES = 57552
const ROLE = 57553
const PROXY = 57554
const AVG_ROW_LENGTH = 57555
const STORAGE = 57556
const DISK = 57557
const MEMORY = 57558
const CHECKSUM = 57559
const COMPRESSION = 57560
const DATA = 57561
const DIRECTORY = 57562
const DELAY_KEY_WRITE = 57563
const ENCRYPTION = 57564
const ENGINE = 57565
const MAX_ROWS = 57566
const MIN_ROWS = 57567
const PACK_KEYS = 57568
const ROW_FORMAT = 57569
const STATS_AUTO_RECALC = 57570
const STATS_PERSISTENT = 57571
const STATS_SAMPLE_PAGES = 57572
const DYNAMIC = 57573
const COMPRESSED = 57574
const REDUNDANT = 57575
const COMPACT = 57576
const FIXED = 57577
const COLUMN_FORMAT = 57578
const AUTO_RANDOM = 57579
const RESTRICT = 57580
const CASCADE = 57581
const ACTION = 57582
const PARTIAL = 57583
const SIMPLE = 57584
const CHECK = 57585
const ENFORCED = 57586
const RANGE = 57587
const LIST = 57588
const ALGORITHM = 57589
const LINEAR = 57590
const PARTITIONS = 57591
const SUBPARTITION = 57592
const SUBPARTITIONS = 57593
const TYPE = 57594
const ANY = 57595
const SOME = 57596
const PREPARE = 57597
const DEALLOCATE = 57598
const PROPERTIES = 57599
const PARSER = 57600
const VISIBLE = 57601
const INVISIBLE = 57602
const BTREE = 57603
const HASH = 57604
const RTREE = 57605
const BSI = 57606
const ZONEMAP = 57607
const LEADING = 57608
const BOTH = 57609
const TRAILING = 57610
const UNKNOWN = 57611
const EXPIRE = 57612
const ACCOUNT = 57613
const UNLOCK = 57614
const DAY = 57615
const NEVER = 57616
const SECOND = 57617
const ASCII = 57618
const COALESCE = 57619
const COLLATION = 57620
const HOUR = 57621
const MICROSECOND = 57622
const MINUTE = 57623
const MONTH = 57624
const QUARTER = 57625
const REPEAT = 57626
const REVERSE = 57627
const ROW_COUNT = 57628
const WEEK = 57629
const REVOKE = 57630
const FUNCTION = 57631
const PRIVILEGES = 57632
const TABLESPACE = 57633
const EXECUTE = 57634
const SUPER = 57635
const GRANT = 57636
const OPTION = 57637
const REFERENCES = 57638
const REPLICATION = 57639
const SLAVE = 57640
const CLIENT = 57641
const USAGE = 57642
const RELOAD = 57643
const FILE = 57644
const TEMPORARY = 57645
const ROUTINE = 57646
const EVENT = 57647
const SHUTDOWN = 57648
const NULLX = 57649
const AUTO_INCREMENT = 57650
const APPROXNUM = 57651
const SIGNED = 57652
const UNSIGNED = 57653
const ZEROFILL = 57654
const USER = 57655
const IDENTIFIED = 57656
const CIPHER = 57657
const ISSUER = 57658
const X509 = 57659
const SUBJECT = 57660
const SAN = 57661
const REQUIRE = 57662
const SSL = 57663
const NONE = 57664
const PASSWORD = 57665
const MAX_QUERIES_PER_HOUR = 57666
const MAX_UPDATES_PER_HOUR = 57667
const MAX_CONNECTIONS_PER_HOUR = 57668
const MAX_USER_CONNECTIONS = 57669
const FORMAT = 57670
const VERBOSE = 57671
const CONNECTION = 57672
const LOAD = 57673
const INFILE = 57674
const TERMINATED = 57675
const OPTIONALLY = 57676
const ENCLOSED = 57677
const ESCAPED = 57678
const STARTING = 57679
const LINES = 57680
const DATABASES = 57681
const TABLES = 57682
const EXTENDED = 57683
const FULL = 57684
const PROCESSLIST = 57685
const FIELDS = 57686
const COLUMNS = 57687
const OPEN = 57688
const ERRORS = 57689
const WARNINGS = 57690
const INDEXES = 57691
const SCHEMAS = 57692
const NAMES = 57693
const GLOBAL = 57694
const SESSION = 57695
const ISOLATION = 57696
const LEVEL = 57697
const READ = 57698
const WRITE = 57699
const ONLY = 57700
const REPEATABLE = 57701
const COMMITTED = 57702
const UNCOMMITTED = 57703
const SERIALIZABLE = 57704
const LOCAL = 57705
const CURRENT_TIMESTAMP = 57706
const DATABASE = 57707
const CURRENT_TIME = 57708
const LOCALTIME = 57709
const LOCALTIMESTAMP = 57710
const UTC_DATE = 57711
const UTC_TIME = 57712
const UTC_TIMESTAMP = 57713
const REPLACE = 57714
const CONVERT = 57715
const SEPARATOR = 57716
const CURRENT_DATE = 57717
const CURRENT_USER = 57718
const CURRENT_ROLE = 57719
const SECOND_MICROSECOND = 57720
const MINUTE_MICROSECOND = 57721
const MINUTE_SECOND = 57722
const HOUR_MICROSECOND = 57723
const HOUR_SECOND = 57724
const HOUR_MINUTE = 57725
const DAY_MICROSECOND = 57726
const DAY_SECOND = 57727
const DAY_MINUTE = 57728
const DAY_HOUR = 57729
const YEAR_MONTH = 57730
const SQL_TSI_HOUR = 57731
const SQL_TSI_DAY = 57732
const SQL_TSI_WEEK = 57733
const SQL_TSI_MONTH = 57734
const SQL_TSI_QUARTER = 57735
const SQL_TSI_YEAR = 57736
const SQL_TSI_SECOND = 57737
const SQL_TSI_MINUTE = 57738
const RECURSIVE = 57739
const CONFIG = 57740
const MATCH = 57741
const AGAINST = 57742
const BOOLEAN = 57743
const LANGUAGE = 57744
const WITH = 57745
const QUERY = 57746
const EXPANSION = 57747
const ADDDATE = 57748
const BIT_AND = 57749
const BIT_OR = 57750
const BIT_XOR = 57751
const CAST = 57752
const COUNT = 57753
const APPROX_COUNT_DISTINCT = 57754
const APPROX_PERCENTILE = 57755
const CURDATE = 57756
const CURTIME = 57757
const DATE_ADD = 57758
const DATE_SUB = 57759
const EXTRACT = 57760
const GROUP_CONCAT = 57761
const MAX = 57762
const MID = 57763
const MIN = 57764
const NOW = 57765
const POSITION = 57766
const SESSION_USER = 57767
const STD = 57768
const STDDEV = 57769
const STDDEV_POP = 57770
const STDDEV_SAMP = 57771
const SUBDATE = 57772
const SUBSTR = 57773
const SUBSTRING = 57774
const SUM = 57775
const SYSDATE = 57776
const SYSTEM_USER = 57777
const TRANSLATE = 57778
const TRIM = 57779
const VARIANCE = 57780
const VAR_POP = 57781
const VAR_SAMP = 57782
const AVG = 57783
const JSON_EXTRACT = 57784
const ROW = 57785
const OUTFILE = 57786
const HEADER = 57787
const MAX_FILE_SIZE = 57788
const FORCE_QUOTE = 57789
const UNUSED = 57790

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"INTEGRAL",
	"HEX",
	"BIT_LITERAL",
	"FLOAT",
	"HEXNUM",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"TYPE",
	"ANY",
	"SOME",
	"PREPARE",
	"DEALLOCATE",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"EXPIRE",
	"ACCOUNT",
	"UNLOCK",
	"DAY",
	"NEVER",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"LOAD",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"DATABASES",
	"TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT_DISTINCT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"JSON_EXTRACT",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"UNUSED",
	"';'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:6847

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 61,
	21, 409,
	-2, 390,
	-1, 66,
	199, 568,
	-2, 604,
	-1, 82,
	226, 273,
	227, 273,
	-2, 294,
	-1, 333,
	63, 1393,
	467, 1393,
	-2, 97,
	-1, 352,
	63, 729,
	467, 729,
	-2, 566,
	-1, 353,
	63, 559,
	467, 559,
	-2, 567,
	-1, 359,
	21, 410,
	-2, 373,
	-1, 431,
	94, 1274,
	105, 1274,
	124, 1274,
	-2, 1096,
	-1, 460,
	21, 410,
	-2, 373,
	-1, 614,
	58, 1422,
	-2, 1429,
	-1, 622,
	58, 1423,
	-2, 1437,
	-1, 624,
	58, 1419,
	-2, 1439,
	-1, 625,
	58, 1420,
	-2, 1440,
	-1, 630,
	58, 1421,
	-2, 1446,
	-1, 631,
	58, 1424,
	-2, 1447,
	-1, 632,
	58, 1425,
	-2, 1448,
	-1, 633,
	58, 859,
	-2, 1449,
	-1, 634,
	58, 860,
	-2, 1450,
	-1, 635,
	58, 861,
	-2, 1451,
	-1, 637,
	58, 1426,
	-2, 1453,
	-1, 638,
	58, 879,
	-2, 1454,
	-1, 639,
	58, 878,
	-2, 1455,
	-1, 642,
	58, 1427,
	-2, 1458,
	-1, 643,
	58, 1428,
	-2, 1459,
	-1, 649,
	58, 941,
	-2, 1274,
	-1, 650,
	58, 950,
	-2, 1299,
	-1, 651,
	58, 954,
	-2, 1338,
	-1, 652,
	58, 965,
	-2, 1398,
	-1, 653,
	58, 967,
	-2, 1408,
	-1, 654,
	58, 955,
	-2, 1413,
	-1, 655,
	58, 963,
	-2, 1417,
	-1, 656,
	58, 944,
	-2, 1418,
	-1, 808,
	1, 594,
	60, 594,
	466, 594,
	-2, 601,
	-1, 946,
	21, 409,
	-2, 787,
	-1, 993,
	124, 1106,
	-2, 1104,
	-1, 995,
	124, 508,
	-2, 1101,
	-1, 996,
	124, 509,
	-2, 1102,
	-1, 1185,
	1, 595,
	60, 595,
	466, 595,
	-2, 601,
	-1, 1272,
	58, 1008,
	-2, 1415,
	-1, 1273,
	58, 1009,
	-2, 1416,
	-1, 1435,
	56, 330,
	59, 330,
	-2, 693,
	-1, 1752,
	79, 601,
	120, 601,
	156, 601,
	159, 601,
	-2, 641,
	-1, 1754,
	260, 754,
	-2, 735,
	-1, 1778,
	56, 330,
	59, 330,
	-2, 694,
	-1, 1863,
	79, 601,
	120, 601,
	156, 601,
	159, 601,
	-2, 642,
	-1, 1891,
	260, 754,
	-2, 736,
	-1, 2275,
	59, 616,
	60, 616,
	-2, 601,
	-1, 2279,
	59, 616,
	60, 616,
	-2, 601,
	-1, 2291,
	59, 620,
	60, 620,
	-2, 601,
	-1, 2294,
	59, 621,
	60, 621,
	-2, 601,
}

const yyPrivate = 57344

const yyLast = 23247

var yyAct = [...]int{
	795, 2279, 2281, 1275, 2286, 2278, 2252, 659, 2226, 1921,
	1276, 657, 784, 2117, 678, 2197, 2241, 1903, 1232, 2178,
	2091, 2179, 1859, 2072, 547, 1172, 2094, 99, 1919, 1746,
	876, 2027, 312, 318, 592, 318, 584, 2079, 1920, 102,
	1228, 316, 22, 1807, 842, 360, 1911, 359, 429, 1772,
	322, 812, 1471, 1934, 1438, 1572, 1560, 1910, 354, 354,
	1600, 1818, 1576, 862, 1892, 1810, 1450, 1800, 1617, 386,
	535, 98, 526, 613, 836, 1822, 1227, 1419, 1588, 1581,
	1758, 1577, 975, 814, 1637, 1647, 1178, 1655, 1513, 1626,
	430, 990, 455, 658, 1191, 993, 985, 984, 99, 1476,
	976, 1359, 1345, 668, 537, 1263, 855, 837, 1413, 60,
	839, 821, 3, 1449, 1190, 779, 1214, 1186, 315, 15,
	313, 6, 1867, 1277, 797, 660, 1274, 606, 782, 859,
	1289, 388, 314, 5, 822, 324, 432, 22, 434, 780,
	305, 879, 457, 823, 1230, 1154, 913, 882, 421, 1254,
	385, 560, 576, 470, 771, 326, 325, 308, 1161, 12,
	437, 29, 487, 7, 95, 1945, 1855, 1745, 792, 593,
	978, 317, 4, 90, 93, 2144, 94, 605, 26, 84,
	67, 1157, 1395, 508, 1561, 562, 329, 329, 1414, 2134,
	524, 1402, 29, 422, 356, 554, 94, 94, 26, 84,
	67, 435, 94, 303, 383, 507, 320, 2166, 454, 1405,
	375, 2164, 558, 407, 15, 825, 6, 740, 844, 845,
	94, 548, 549, 787, 91, 1539, 502, 2201, 5, 2025,
	737, 760, 563, 690, 61, 498, 441, 440, 442, 2182,
	2183, 2108, 1564, 546, 91, 91, 545, 548, 549, 94,
	739, 26, 84, 67, 2105, 94, 29, 2028, 2029, 2030,
	2031, 1948, 1565, 304, 1566, 61, 439, 1747, 91, 791,
	1387, 464, 473, 1157, 393, 1589, 1590, 1591, 1592, 1422,
	1420, 1417, 1421, 1423, 1618, 1416, 1415, 1621, 856, 1422,
	1420, 1159, 1421, 1423, 408, 1931, 489, 91, 1806, 1805,
	500, 501, 1852, 91, 1908, 499, 463, 493, 772, 1742,
	444, 488, 2011, 1788, 1789, 462, 2143, 1593, 1785, 2168,
	318, 361, 99, 2192, 2000, 436, 319, 377, 2271, 61,
	1425, 1426, 1427, 1428, 774, 494, 1620, 374, 373, 2287,
	2181, 2206, 2163, 1266, 1267, 1268, 2119, 2213, 2093, 459,
	461, 434, 460, 2141, 1264, 2262, 1994, 66, 369, 92,
	1963, 1481, 1267, 1268, 2115, 2116, 480, 2119, 438, 2080,
	2081, 2082, 2084, 2083, 1962, 358, 2125, 82, 1403, 555,
	1582, 1585, 2146, 2147, 572, 386, 1989, 2170, 2171, 544,
	543, 497, 399, 496, 2288, 2282, 2253, 1951, 456, 1514,
	527, 1786, 559, 2103, 561, 484, 525, 1399, 1241, 1165,
	1585, 799, 433, 532, 529, 491, 773, 1743, 354, 321,
	443, 435, 475, 474, 430, 430, 430, 492, 495, 354,
	354, 1802, 1801, 1431, 380, 381, 382, 490, 1469, 413,
	473, 399, 528, 1237, 530, 318, 609, 609, 1239, 1238,
	372, 566, 564, 565, 847, 848, 608, 608, 1236, 742,
	368, 2244, 2057, 846, 410, 411, 589, 466, 467, 401,
	29, 29, 400, 1985, 2266, 1610, 2230, 758, 870, 1781,
	1606, 1567, 1957, 1478, 354, 354, 463, 354, 415, 414,
	1439, 478, 1393, 539, 743, 785, 1392, 738, 1386, 1586,
	551, 552, 1381, 1206, 1579, 354, 354, 1170, 1580, 1583,
	548, 549, 376, 1151, 548, 549, 894, 2169, 401, 767,
	746, 400, 794, 2092, 540, 798, 2145, 354, 1586, 354,
	510, 808, 468, 591, 386, 476, 512, 813, 447, 452,
	453, 99, 1561, 61, 61, 436, 329, 504, 804, 458,
	931, 1180, 1432, 571, 1265, 830, 1553, 586, 586, 354,
	1584, 99, 1160, 857, 1422, 1420, 486, 1421, 1423, 1787,
	2245, 1784, 1480, 354, 430, 538, 354, 1555, 828, 582,
	583, 2248, 1396, 1990, 1991, 818, 68, 863, 2239, 534,
	475, 474, 871, 863, 863, 513, 766, 800, 763, 354,
	354, 875, 99, 99, 1601, 769, 68, 68, 594, 891,
	762, 303, 68, 329, 575, 786, 604, 579, 580, 581,
	789, 895, 880, 817, 735, 433, 749, 1554, 831, 29,
	68, 745, 816, 878, 2129, 826, 827, 765, 29, 775,
	783, 764, 801, 881, 744, 790, 877, 877, 819, 820,
	761, 598, 599, 600, 601, 602, 603, 329, 788, 68,
	1624, 404, 753, 754, 803, 68, 948, 595, 1383, 550,
	1156, 304, 553, 947, 832, 2058, 2060, 2061, 2062, 2059,
	541, 955, 824, 809, 810, 574, 1987, 1243, 465, 61,
	1986, 2242, 2243, 577, 793, 1279, 1278, 449, 450, 451,
	957, 329, 61, 399, 578, 1715, 1360, 887, 853, 1352,
	835, 61, 868, 869, 873, 858, 1411, 1360, 1720, 1519,
	1155, 802, 854, 1350, 1351, 1349, 2261, 412, 329, 890,
	887, 1996, 865, 866, 867, 874, 888, 889, 890, 887,
	982, 982, 987, 1694, 1691, 1692, 1693, 1995, 757, 1725,
	1501, 1724, 1723, 1721, 1762, 1757, 756, 949, 950, 951,
	952, 888, 889, 890, 887, 995, 2260, 2277, 1980, 542,
	1717, 813, 435, 953, 2258, 1287, 872, 1173, 1174, 2223,
	401, 1284, 2207, 400, 1488, 1288, 996, 378, 921, 934,
	935, 936, 937, 938, 931, 1500, 971, 2153, 2068, 2066,
	99, 99, 932, 933, 934, 935, 936, 937, 938, 931,
	1192, 1722, 2064, 2054, 1860, 398, 416, 888, 889, 890,
	887, 2101, 1153, 402, 2100, 312, 1196, 2074, 888, 889,
	890, 887, 1208, 2067, 2065, 2052, 981, 888, 889, 890,
	887, 880, 2051, 965, 1175, 1177, 2050, 2063, 2053, 435,
	354, 929, 939, 940, 932, 933, 934, 935, 936, 937,
	938, 931, 881, 898, 899, 900, 901, 902, 903, 904,
	896, 354, 409, 2047, 2041, 2038, 863, 863, 863, 2037,
	1946, 1939, 1233, 974, 609, 1938, 99, 1937, 1933, 1932,
	1925, 994, 1768, 1259, 608, 1261, 946, 1767, 1255, 1256,
	1257, 1258, 1197, 1198, 1199, 1150, 1766, 1765, 1149, 1551,
	747, 29, 805, 806, 807, 1285, 1286, 2202, 2191, 1209,
	1282, 2174, 2073, 2123, 1726, 1727, 1200, 988, 2122, 989,
	2099, 1187, 2055, 1324, 1164, 1202, 2048, 1204, 2044, 2043,
	2042, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341,
	1342, 1343, 1344, 1234, 1982, 971, 1354, 1355, 1947, 1935,
	1253, 1472, 1858, 824, 1201, 1203, 1251, 1361, 2259, 1364,
	1369, 1269, 1205, 436, 1856, 1775, 1733, 1598, 329, 1597,
	395, 1371, 397, 407, 61, 1240, 1596, 394, 392, 391,
	403, 396, 1595, 405, 406, 1244, 1245, 1246, 1670, 1248,
	939, 940, 932, 933, 934, 935, 936, 937, 938, 931,
	1374, 1252, 1167, 2236, 930, 929, 939, 940, 932, 933,
	934, 935, 936, 937, 938, 931, 1166, 1522, 706, 705,
	1521, 1280, 1281, 967, 1283, 928, 2291, 1353, 2269, 387,
	1319, 1320, 1321, 1322, 1323, 1347, 927, 1329, 1330, 1331,
	1332, 2175, 2234, 888, 889, 890, 887, 2097, 1375, 930,
	929, 939, 940, 932, 933, 934, 935, 936, 937, 938,
	931, 748, 2150, 888, 889, 890, 887, 1235, 2149, 888,
	889, 890, 887, 1484, 2296, 1363, 1365, 1366, 1362, 1528,
	2290, 2289, 1484, 1527, 1658, 1370, 1373, 1372, 930, 929,
	939, 940, 932, 933, 934, 935, 936, 937, 938, 931,
	2130, 1677, 1681, 1683, 1685, 1687, 1688, 1690, 2018, 1694,
	1691, 1692, 1693, 1169, 2023, 1672, 1673, 1674, 1675, 1656,
	1657, 1678, 1844, 1659, 2014, 1660, 1661, 1662, 1663, 1664,
	1665, 1666, 1667, 1668, 1669, 1676, 888, 889, 890, 887,
	1163, 2272, 1388, 1680, 1682, 1684, 1686, 1689, 354, 2013,
	1168, 354, 1704, 1847, 463, 1845, 354, 2268, 2267, 1843,
	1842, 1408, 1834, 1398, 1799, 2005, 1163, 2256, 1752, 1406,
	1407, 1940, 798, 888, 889, 890, 887, 1671, 1163, 2255,
	1435, 888, 889, 890, 887, 1830, 1441, 888, 889, 890,
	887, 2229, 2228, 888, 889, 890, 887, 1446, 2007, 2189,
	1735, 2247, 463, 99, 99, 99, 99, 888, 889, 890,
	887, 1451, 2007, 2184, 463, 99, 1466, 1250, 2172, 888,
	889, 890, 887, 1451, 1433, 22, 1430, 942, 1636, 945,
	2161, 2160, 354, 2007, 2139, 1611, 1410, 2007, 2138, 1829,
	99, 99, 1531, 943, 944, 941, 1529, 930, 929, 939,
	940, 932, 933, 934, 935, 936, 937, 938, 931, 1233,
	1467, 888, 889, 890, 887, 2007, 2137, 1526, 1389, 2007,
	2136, 1400, 2128, 2127, 1442, 2022, 2021, 1489, 1485, 1397,
	1605, 1486, 1487, 1437, 1474, 1475, 1409, 1394, 2020, 2019,
	1648, 1649, 1525, 1429, 1434, 1523, 1440, 1443, 1187, 1444,
	2016, 2017, 15, 1493, 6, 2016, 2015, 1445, 1447, 815,
	1452, 1453, 1454, 1455, 1828, 1490, 5, 1195, 2012, 1483,
	1495, 1496, 1497, 1498, 1499, 1465, 1503, 1464, 1468, 1463,
	1504, 1505, 1506, 1507, 2007, 2006, 888, 889, 890, 887,
	1473, 1448, 1508, 1732, 29, 1484, 1709, 1470, 1484, 1695,
	1484, 1492, 1224, 1511, 1512, 1484, 1491, 1368, 1516, 815,
	1479, 1520, 1195, 1390, 1482, 888, 889, 890, 887, 1714,
	982, 1524, 1543, 982, 1532, 1708, 1546, 1367, 863, 1385,
	1384, 1679, 354, 1707, 863, 1436, 354, 354, 1379, 1378,
	354, 888, 889, 890, 887, 1549, 1706, 888, 889, 890,
	887, 1705, 1623, 463, 596, 888, 889, 890, 887, 1484,
	1540, 1895, 1575, 1195, 1194, 99, 1550, 61, 888, 889,
	890, 887, 1376, 888, 889, 890, 887, 99, 1192, 1437,
	1609, 1538, 1163, 1162, 1510, 885, 483, 1545, 888, 889,
	890, 887, 1509, 1347, 1223, 1898, 751, 750, 435, 1753,
	1518, 1893, 1701, 1542, 503, 1157, 1906, 1907, 482, 1599,
	481, 1736, 1894, 1533, 482, 1534, 1541, 1535, 1547, 1640,
	1544, 1224, 1548, 484, 888, 889, 890, 887, 1224, 883,
	484, 1382, 1602, 1603, 1700, 1642, 1594, 363, 364, 365,
	366, 1357, 1250, 1171, 1152, 1696, 1899, 1552, 533, 94,
	362, 1607, 1702, 1703, 573, 1559, 888, 889, 890, 887,
	2292, 323, 2238, 354, 1556, 1558, 1604, 1612, 1613, 354,
	1716, 1699, 1608, 1622, 2232, 1729, 94, 1635, 1698, 84,
	67, 2214, 1731, 2211, 1631, 2209, 2152, 2219, 1634, 1697,
	1614, 597, 2089, 888, 889, 890, 887, 91, 354, 1728,
	888, 889, 890, 887, 2077, 1730, 2075, 2070, 1640, 2032,
	99, 888, 889, 890, 887, 1809, 2003, 2002, 2001, 1756,
	355, 1998, 946, 1993, 91, 1978, 536, 1819, 1811, 1713,
	1905, 1823, 1578, 1826, 1816, 1815, 1795, 1770, 1763, 1710,
	1348, 354, 1999, 354, 1645, 91, 99, 1778, 1712, 1719,
	1750, 1412, 61, 1377, 1751, 1242, 1210, 1901, 1193, 1734,
	973, 972, 1737, 970, 463, 969, 888, 889, 890, 887,
	968, 966, 914, 1451, 963, 1793, 962, 1771, 1794, 1900,
	1902, 1796, 960, 1798, 1233, 959, 1741, 958, 1183, 1797,
	1644, 586, 956, 926, 1760, 1887, 925, 586, 1755, 924,
	1759, 1754, 1759, 1761, 1780, 923, 1764, 922, 1791, 920,
	434, 1769, 888, 889, 890, 887, 919, 918, 917, 916,
	1777, 1776, 915, 912, 1188, 1783, 1738, 911, 910, 909,
	1792, 1779, 908, 907, 906, 905, 770, 741, 1782, 1908,
	485, 479, 1813, 1814, 1188, 1633, 2217, 2280, 1627, 1628,
	1643, 1896, 2180, 1630, 1424, 1831, 1817, 1803, 1869, 1821,
	1249, 1632, 505, 1812, 1457, 1460, 1356, 1456, 1833, 586,
	1461, 1773, 888, 889, 890, 887, 1820, 1458, 2276, 1380,
	354, 354, 1459, 1462, 99, 1220, 1221, 863, 888, 889,
	890, 887, 1173, 1174, 463, 1864, 1211, 1562, 1912, 1914,
	509, 1912, 1912, 1575, 1835, 1569, 1739, 1837, 1824, 1839,
	1827, 463, 1181, 834, 1918, 1740, 1216, 1219, 1220, 1221,
	1217, 48, 1218, 1222, 28, 1832, 1838, 1836, 1853, 1949,
	1568, 27, 1226, 811, 1840, 1841, 813, 2194, 1851, 557,
	1848, 556, 61, 1148, 339, 1913, 338, 342, 334, 1889,
	2233, 300, 1279, 1278, 301, 521, 522, 1909, 1915, 1916,
	330, 302, 1861, 519, 520, 511, 1928, 517, 518, 2157,
	349, 515, 516, 1780, 2155, 1917, 2110, 2109, 1216, 1219,
	1220, 1221, 1217, 1927, 1218, 1222, 2107, 1929, 1873, 363,
	364, 365, 366, 2035, 2033, 1941, 1857, 1790, 1749, 1877,
	1923, 1924, 362, 1477, 1748, 1639, 1953, 514, 1849, 1850,
	1936, 362, 1638, 815, 2221, 2220, 2221, 1494, 1943, 1866,
	1391, 477, 2220, 1868, 1870, 1872, 849, 1874, 1875, 1876,
	1878, 1879, 1880, 1882, 1883, 1884, 1885, 1225, 389, 34,
	354, 1, 531, 379, 1325, 523, 755, 1981, 446, 99,
	472, 752, 471, 469, 1358, 1290, 1956, 691, 1914, 977,
	983, 2071, 2193, 1888, 2225, 2151, 1954, 1955, 2196, 1958,
	1959, 1960, 1961, 2009, 768, 1964, 1965, 1966, 1967, 1968,
	1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1983,
	677, 2102, 1563, 1997, 1909, 2036, 1979, 1886, 2024, 2104,
	2026, 1404, 1942, 1401, 2004, 2008, 506, 1536, 1537, 2010,
	703, 434, 694, 961, 1865, 696, 736, 2069, 448, 693,
	1926, 1619, 367, 445, 390, 332, 331, 335, 1930, 1881,
	1744, 2034, 1804, 337, 1825, 1808, 1871, 2285, 2275, 463,
	2251, 2231, 463, 463, 463, 341, 1233, 2049, 463, 2118,
	2270, 2162, 2212, 1846, 2205, 2114, 1950, 2039, 2040, 776,
	327, 850, 567, 2045, 2046, 419, 2090, 2078, 1773, 1587,
	2086, 2087, 2088, 2112, 2096, 1418, 1179, 1158, 2085, 781,
	354, 354, 328, 2142, 2076, 2098, 2095, 370, 1182, 371,
	1185, 1184, 1270, 897, 1346, 964, 2113, 954, 2106, 930,
	929, 939, 940, 932, 933, 934, 935, 936, 937, 938,
	931, 99, 611, 1517, 667, 661, 2120, 2121, 463, 1616,
	1615, 1904, 829, 33, 32, 31, 2131, 886, 991, 692,
	463, 101, 1207, 992, 2111, 1944, 2198, 676, 675, 674,
	673, 2126, 672, 336, 340, 777, 2135, 344, 778, 1215,
	1213, 346, 347, 348, 1212, 877, 350, 351, 2140, 841,
	840, 884, 2177, 2148, 2176, 2132, 2133, 1854, 1992, 2056,
	2156, 1988, 2158, 2159, 2154, 1984, 2124, 1530, 1863, 1862,
	2165, 2167, 1890, 1891, 1897, 1654, 1650, 1652, 1653, 1651,
	1718, 1646, 2173, 2200, 1573, 1574, 1571, 1570, 1629, 1625,
	979, 986, 2204, 2185, 2186, 2187, 2188, 2199, 586, 586,
	796, 96, 838, 11, 10, 759, 2208, 9, 2210, 14,
	2203, 21, 20, 61, 930, 929, 939, 940, 932, 933,
	934, 935, 936, 937, 938, 931, 2215, 19, 56, 2218,
	2216, 55, 2227, 54, 2190, 53, 18, 2222, 8, 52,
	463, 2224, 463, 51, 50, 17, 16, 46, 44, 785,
	43, 785, 2235, 42, 2237, 41, 2240, 40, 39, 38,
	2200, 2250, 45, 37, 36, 35, 65, 64, 2246, 463,
	63, 62, 23, 24, 2199, 2249, 25, 2254, 785, 75,
	74, 2257, 72, 70, 73, 2227, 2263, 71, 69, 2265,
	30, 13, 2, 0, 0, 0, 0, 2273, 0, 0,
	0, 0, 0, 0, 0, 2274, 0, 0, 0, 0,
	0, 0, 2284, 0, 0, 2283, 0, 0, 0, 0,
	0, 0, 0, 2294, 0, 2293, 2295, 2284, 1105, 1147,
	0, 0, 1092, 0, 1054, 1107, 1028, 1043, 1115, 1044,
	1045, 1079, 1007, 1063, 225, 1041, 0, 1095, 999, 1031,
	1032, 1001, 1038, 1002, 1029, 1056, 170, 1027, 1066, 195,
	1113, 0, 0, 254, 209, 0, 0, 1059, 1097, 1061,
	1084, 1053, 1080, 1015, 1073, 1108, 1042, 1077, 1109, 0,
	0, 0, 0, 0, 805, 806, 807, 0, 0, 0,
	0, 152, 0, 0, 0, 0, 0, 1076, 1102, 1040,
	0, 155, 1106, 1060, 1078, 0, 0, 1000, 1074, 0,
	1005, 1008, 1114, 1100, 1035, 1036, 0, 0, 0, 0,
	0, 0, 0, 1057, 1062, 1081, 1050, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1033, 0, 1070, 0,
	0, 0, 1010, 1006, 0, 1055, 0, 144, 259, 273,
	153, 250, 286, 158, 257, 149, 224, 246, 0, 1146,
	146, 271, 256, 206, 189, 190, 145, 0, 241, 168,
	181, 165, 222, 0, 1104, 298, 164, 289, 1009, 281,
	148, 1141, 280, 221, 268, 272, 207, 201, 147, 270,
	205, 200, 193, 172, 185, 233, 199, 234, 186, 211,
	210, 212, 1125, 1126, 1127, 1128, 1129, 1137, 1138, 0,
	1142, 1143, 1144, 1014, 0, 1034, 1082, 0, 998, 1090,
	1098, 1052, 283, 1101, 1049, 1048, 1132, 0, 1131, 258,
	1133, 1134, 194, 1096, 1030, 1039, 299, 1037, 244, 227,
	1103, 1069, 1145, 242, 197, 269, 235, 274, 260, 282,
	238, 236, 140, 261, 167, 208, 150, 151, 163, 169,
	171, 173, 174, 217, 218, 230, 249, 262, 263, 264,
	166, 159, 243, 160, 183, 161, 141, 251, 162, 142,
	231, 267, 1130, 179, 239, 204, 143, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1139, 0, 1140, 295, 177,
	997, 278, 0, 223, 1093, 1003, 1013, 1011, 1046, 1071,
	1072, 219, 294, 1086, 1089, 1087, 1116, 247, 0, 0,
	0, 0, 0, 188, 229, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1004, 0, 255,
	276, 288, 279, 1047, 1021, 1058, 287, 1024, 1022, 1085,
	1023, 1075, 1118, 213, 214, 215, 216, 180, 0, 157,
	1067, 1051, 1119, 1120, 1121, 1122, 1123, 1124, 1026, 1099,
	176, 182, 0, 184, 156, 228, 178, 285, 191, 1091,
	220, 187, 252, 192, 198, 240, 284, 226, 245, 154,
	275, 253, 202, 1020, 1025, 1019, 1064, 1065, 1110, 1111,
	1112, 1083, 1012, 1094, 1016, 1018, 1017, 930, 929, 939,
	940, 932, 933, 934, 935, 936, 937, 938, 931, 0,
	0, 0, 0, 0, 0, 0, 1088, 0, 1068, 139,
	0, 196, 1117, 237, 175, 699, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 669, 0, 0, 0, 170, 0, 0,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	714, 720, 1135, 1136, 291, 292, 293, 277, 0, 0,
	0, 662, 0, 0, 0, 612, 706, 705, 679, 688,
	0, 0, 152, 680, 1711, 687, 681, 685, 684, 682,
	683, 0, 649, 0, 0, 0, 0, 0, 0, 610,
	666, 0, 670, 0, 0, 930, 929, 939, 940, 932,
	933, 934, 935, 936, 937, 938, 931, 0, 0, 0,
	0, 0, 0, 663, 664, 0, 0, 0, 0, 700,
	0, 665, 0, 0, 702, 0, 689, 0, 144, 259,
	273, 153, 250, 286, 158, 257, 149, 224, 246, 0,
	0, 146, 271, 256, 206, 189, 190, 145, 0, 241,
	168, 181, 165, 222, 686, 698, 655, 164, 653, 697,
	281, 148, 1515, 280, 221, 268, 272, 207, 201, 147,
	270, 205, 200, 193, 172, 185, 233, 199, 234, 186,
	211, 210, 212, 930, 929, 939, 940, 932, 933, 934,
	935, 936, 937, 938, 931, 0, 0, 0, 0, 0,
	695, 0, 0, 283, 0, 0, 713, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 656, 0, 244,
	227, 723, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 140, 261, 167, 208, 150, 151, 163,
	169, 171, 173, 174, 217, 218, 230, 249, 262, 263,
	264, 166, 159, 243, 160, 183, 161, 141, 251, 162,
	142, 231, 267, 0, 179, 239, 204, 143, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1327, 1326, 1328, 295,
	177, 0, 278, 711, 223, 722, 707, 708, 709, 712,
	715, 716, 651, 654, 717, 719, 721, 724, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 652, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 701, 213, 214, 215, 216, 650, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 182, 0, 184, 156, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	154, 275, 253, 202, 730, 710, 729, 731, 732, 728,
	733, 734, 718, 671, 0, 726, 725, 727, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 196, 0, 237, 175, 614, 615, 616, 617,
	618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 118, 629, 630, 631, 632, 633, 634, 635, 636,
	637, 638, 639, 640, 641, 642, 643, 644, 645, 646,
	647, 648, 704, 0, 0, 291, 292, 293, 277, 94,
	0, 699, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 0, 0, 0, 0, 0, 0, 0, 669,
	0, 0, 0, 170, 0, 0, 195, 0, 0, 0,
	254, 209, 0, 0, 0, 0, 714, 720, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 662, 0, 0,
	0, 612, 706, 705, 679, 688, 0, 0, 152, 680,
	0, 687, 681, 685, 684, 682, 683, 0, 649, 0,
	0, 0, 0, 0, 0, 610, 666, 0, 670, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 663,
	664, 0, 0, 0, 0, 700, 0, 665, 0, 0,
	702, 0, 689, 0, 144, 259, 273, 153, 250, 286,
	158, 257, 149, 224, 246, 0, 0, 146, 271, 256,
	206, 189, 190, 145, 0, 241, 168, 181, 165, 222,
	686, 698, 655, 164, 653, 697, 281, 148, 0, 280,
	221, 268, 272, 207, 201, 147, 270, 205, 200, 193,
	172, 185, 233, 199, 234, 186, 211, 210, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 695, 0, 0, 283,
	0, 0, 713, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 656, 0, 244, 227, 723, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 140,
	261, 167, 208, 150, 151, 163, 169, 171, 173, 174,
	217, 218, 230, 249, 262, 263, 264, 166, 159, 243,
	160, 183, 161, 141, 251, 162, 142, 231, 267, 0,
	179, 239, 204, 143, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 177, 0, 278, 711,
	223, 722, 707, 708, 709, 712, 715, 716, 651, 654,
	717, 719, 721, 724, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 652,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 701,
	213, 214, 215, 216, 650, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 182, 0,
	184, 156, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 154, 275, 253, 202,
	730, 710, 729, 731, 732, 728, 733, 734, 718, 671,
	0, 726, 725, 727, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 196, 68,
	237, 175, 614, 615, 616, 617, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 118, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 704, 699,
	0, 291, 292, 293, 277, 0, 0, 0, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 669, 0, 0,
	0, 170, 864, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 714, 720, 0, 0, 0, 0,
	0, 0, 860, 0, 0, 662, 0, 0, 0, 612,
	706, 705, 679, 688, 0, 0, 152, 680, 0, 687,
	681, 685, 684, 682, 683, 0, 649, 0, 0, 0,
	0, 0, 0, 610, 666, 0, 670, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 663, 664, 0,
	0, 0, 0, 700, 0, 665, 0, 0, 861, 0,
	689, 0, 144, 259, 273, 153, 250, 286, 158, 257,
	149, 224, 246, 0, 0, 146, 271, 256, 206, 189,
	190, 145, 0, 241, 168, 181, 165, 222, 686, 698,
	655, 164, 653, 697, 281, 148, 0, 280, 221, 268,
	272, 207, 201, 147, 270, 205, 200, 193, 172, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 695, 0, 0, 283, 0, 0,
	713, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 656, 0, 244, 227, 723, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 140, 261, 167,
	208, 150, 151, 163, 169, 171, 173, 174, 217, 218,
	230, 249, 262, 263, 264, 166, 159, 243, 160, 183,
	161, 141, 251, 162, 142, 231, 267, 0, 179, 239,
	204, 143, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 177, 0, 278, 711, 223, 722,
	707, 708, 709, 712, 715, 716, 651, 654, 717, 719,
	721, 724, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 652, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 701, 213, 214,
	215, 216, 650, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 182, 0, 184, 156,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 154, 275, 253, 202, 730, 710,
	729, 731, 732, 728, 733, 734, 718, 671, 0, 726,
	725, 727, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 196, 0, 237, 175,
	614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 118, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 704, 699, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 669, 0, 0, 0, 170,
	2264, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 714, 720, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 662, 0, 0, 0, 612, 706, 705,
	679, 688, 0, 0, 152, 680, 0, 687, 681, 685,
	684, 682, 683, 0, 649, 0, 0, 0, 0, 0,
	0, 610, 666, 0, 670, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 663, 664, 0, 0, 0,
	0, 700, 0, 665, 0, 0, 702, 0, 689, 0,
	144, 259, 273, 153, 250, 286, 158, 257, 149, 224,
	246, 0, 0, 146, 271, 256, 206, 189, 190, 145,
	0, 241, 168, 181, 165, 222, 686, 698, 655, 164,
	653, 697, 281, 148, 0, 280, 221, 268, 272, 207,
	201, 147, 270, 205, 200, 193, 172, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 695, 0, 0, 283, 0, 0, 713, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 656,
	0, 244, 227, 723, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 140, 261, 167, 208, 150,
	151, 163, 169, 171, 173, 174, 217, 218, 230, 249,
	262, 263, 264, 166, 159, 243, 160, 183, 161, 141,
	251, 162, 142, 231, 267, 0, 179, 239, 204, 143,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 177, 0, 278, 711, 223, 722, 707, 708,
	709, 712, 715, 716, 651, 654, 717, 719, 721, 724,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 652, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 701, 213, 214, 215, 216,
	650, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 182, 0, 184, 156, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 154, 275, 253, 202, 730, 710, 729, 731,
	732, 728, 733, 734, 718, 671, 0, 726, 725, 727,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 196, 0, 237, 175, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 118, 629, 630, 631, 632, 633, 634,
	635, 636, 637, 638, 639, 640, 641, 642, 643, 644,
	645, 646, 647, 648, 704, 699, 0, 291, 292, 293,
	277, 0, 0, 0, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 669, 0, 0, 0, 170, 864, 0,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	714, 720, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 662, 0, 0, 0, 612, 706, 705, 679, 688,
	0, 0, 152, 680, 0, 687, 681, 685, 684, 682,
	683, 0, 649, 0, 0, 0, 0, 0, 0, 610,
	666, 0, 670, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 663, 664, 0, 0, 0, 0, 700,
	0, 665, 0, 0, 702, 0, 689, 0, 144, 259,
	273, 153, 250, 286, 158, 257, 149, 224, 246, 0,
	0, 146, 271, 256, 206, 189, 190, 145, 0, 241,
	168, 181, 165, 222, 686, 698, 655, 164, 653, 697,
	281, 148, 0, 280, 221, 268, 272, 207, 201, 147,
	270, 205, 200, 193, 172, 185, 233, 199, 234, 186,
	211, 210, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	695, 0, 0, 283, 0, 0, 713, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 656, 0, 244,
	227, 723, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 140, 261, 167, 208, 150, 151, 163,
	169, 171, 173, 174, 217, 218, 230, 249, 262, 263,
	264, 166, 159, 243, 160, 183, 161, 141, 251, 162,
	142, 231, 267, 0, 179, 239, 204, 143, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	177, 0, 278, 711, 223, 722, 707, 708, 709, 712,
	715, 716, 651, 654, 717, 719, 721, 724, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 652, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 701, 213, 214, 215, 216, 650, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 182, 0, 184, 156, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	154, 275, 253, 202, 730, 710, 729, 731, 732, 728,
	733, 734, 718, 671, 0, 726, 725, 727, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 196, 0, 237, 175, 614, 615, 616, 617,
	618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 118, 629, 630, 631, 632, 633, 634, 635, 636,
	637, 638, 639, 640, 641, 642, 643, 644, 645, 646,
	647, 648, 704, 0, 0, 291, 292, 293, 277, 699,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 669, 0, 0,
	0, 170, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 714, 720, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 662, 0, 0, 0, 612,
	706, 705, 679, 688, 0, 0, 152, 680, 0, 687,
	681, 685, 684, 682, 683, 0, 649, 0, 0, 0,
	0, 0, 0, 610, 666, 0, 670, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 663, 664, 0,
	0, 0, 0, 700, 0, 665, 0, 0, 702, 0,
	689, 0, 144, 259, 273, 153, 250, 286, 158, 257,
	149, 224, 246, 0, 0, 146, 271, 256, 206, 189,
	190, 145, 0, 241, 168, 181, 165, 222, 686, 698,
	655, 164, 653, 697, 281, 148, 0, 280, 221, 268,
	272, 207, 201, 147, 270, 205, 200, 193, 172, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 695, 0, 0, 283, 0, 0,
	713, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 656, 0, 244, 227, 723, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 140, 261, 167,
	208, 150, 151, 163, 169, 171, 173, 174, 217, 218,
	230, 249, 262, 263, 264, 166, 159, 243, 160, 183,
	161, 141, 251, 162, 142, 231, 267, 0, 179, 239,
	204, 143, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 177, 0, 278, 711, 223, 722,
	707, 708, 709, 712, 715, 716, 651, 654, 717, 719,
	721, 724, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 652, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 701, 213, 214,
	215, 216, 650, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 182, 0, 184, 156,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 154, 275, 253, 202, 730, 710,
	729, 731, 732, 728, 733, 734, 718, 671, 0, 726,
	725, 727, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 196, 0, 237, 175,
	614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 118, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 704, 699, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 669, 0, 0, 0, 170,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 714, 720, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 662, 0, 0, 0, 612, 706, 705,
	679, 688, 0, 0, 152, 680, 0, 687, 681, 685,
	684, 682, 683, 0, 649, 0, 0, 0, 0, 0,
	0, 610, 666, 0, 670, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 663, 664, 607, 0, 0,
	0, 700, 0, 665, 0, 0, 702, 0, 689, 0,
	144, 259, 273, 153, 250, 286, 158, 257, 149, 224,
	246, 0, 0, 146, 271, 256, 206, 189, 190, 145,
	0, 241, 168, 181, 165, 222, 686, 698, 655, 164,
	653, 697, 281, 148, 0, 280, 221, 268, 272, 207,
	201, 147, 270, 205, 200, 193, 172, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 695, 0, 0, 283, 0, 0, 713, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 656,
	0, 244, 227, 723, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 140, 261, 167, 208, 150,
	151, 163, 169, 171, 173, 174, 217, 218, 230, 249,
	262, 263, 264, 166, 159, 243, 160, 183, 161, 141,
	251, 162, 142, 231, 267, 0, 179, 239, 204, 143,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 177, 0, 278, 711, 223, 722, 707, 708,
	709, 712, 715, 716, 651, 654, 717, 719, 721, 724,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 652, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 701, 213, 214, 215, 216,
	650, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 182, 0, 184, 156, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 154, 275, 253, 202, 730, 710, 729, 731,
	732, 728, 733, 734, 718, 671, 0, 726, 725, 727,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 196, 0, 237, 175, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 118, 629, 630, 631, 632, 633, 634,
	635, 636, 637, 638, 639, 640, 641, 642, 643, 644,
	645, 646, 647, 648, 704, 699, 0, 291, 292, 293,
	277, 0, 0, 0, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 669, 0, 0, 0, 170, 0, 0,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	714, 720, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 662, 0, 0, 0, 612, 706, 705, 679, 688,
	0, 0, 152, 680, 0, 687, 681, 685, 684, 682,
	683, 0, 649, 0, 0, 0, 0, 0, 0, 610,
	666, 0, 670, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 663, 664, 0, 0, 0, 0, 700,
	0, 665, 0, 0, 702, 0, 689, 0, 144, 259,
	273, 153, 250, 286, 158, 257, 149, 224, 246, 0,
	0, 146, 271, 256, 206, 189, 190, 145, 0, 241,
	168, 181, 165, 222, 686, 698, 655, 164, 653, 697,
	281, 148, 0, 280, 221, 268, 272, 207, 201, 147,
	270, 205, 200, 193, 172, 185, 233, 199, 234, 186,
	211, 210, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	695, 0, 0, 283, 0, 0, 713, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 656, 0, 244,
	227, 723, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 140, 261, 167, 208, 150, 151, 163,
	169, 171, 173, 174, 217, 218, 230, 249, 262, 263,
	264, 166, 159, 243, 160, 183, 161, 141, 251, 162,
	142, 231, 267, 0, 179, 239, 204, 143, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	177, 0, 278, 711, 223, 722, 707, 708, 709, 712,
	715, 716, 651, 654, 717, 719, 721, 724, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 652, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 701, 213, 214, 215, 216, 650, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 182, 0, 184, 156, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	154, 275, 253, 202, 730, 710, 729, 731, 732, 728,
	733, 734, 718, 671, 0, 726, 725, 727, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 196, 0, 237, 175, 614, 615, 616, 617,
	618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 118, 629, 630, 631, 632, 633, 634, 635, 636,
	637, 638, 639, 640, 641, 642, 643, 644, 645, 646,
	647, 648, 704, 699, 0, 291, 292, 293, 277, 0,
	0, 0, 0, 225, 0, 0, 0, 1271, 0, 0,
	0, 669, 0, 0, 0, 170, 0, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 714, 720,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 662,
	0, 0, 0, 612, 706, 705, 679, 688, 0, 0,
	152, 680, 0, 687, 681, 685, 684, 682, 683, 0,
	649, 0, 0, 0, 0, 0, 0, 0, 666, 0,
	670, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 663, 664, 0, 0, 0, 0, 700, 0, 665,
	0, 0, 702, 0, 689, 0, 144, 259, 273, 153,
	250, 286, 158, 257, 149, 224, 246, 0, 0, 146,
	271, 256, 206, 189, 190, 145, 0, 241, 168, 181,
	165, 222, 686, 698, 655, 164, 653, 697, 281, 148,
	0, 280, 221, 268, 272, 207, 201, 147, 270, 205,
	200, 193, 172, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 695, 0,
	0, 283, 0, 0, 713, 0, 0, 0, 258, 0,
	0, 194, 0, 0, 0, 656, 0, 244, 227, 723,
	0, 0, 242, 197, 269, 235, 274, 260, 282, 238,
	236, 140, 261, 167, 208, 150, 151, 163, 169, 171,
	173, 174, 217, 218, 230, 249, 262, 263, 264, 166,
	159, 243, 160, 183, 161, 141, 251, 162, 142, 231,
	267, 0, 179, 239, 204, 143, 203, 232, 266, 265,
	290, 1272, 1273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 177, 0,
	278, 711, 223, 722, 707, 708, 709, 712, 715, 716,
	651, 654, 717, 719, 721, 724, 247, 0, 0, 0,
	0, 0, 188, 229, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 276,
	288, 652, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 701, 213, 214, 215, 216, 650, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	182, 0, 184, 156, 228, 178, 285, 191, 0, 220,
	187, 252, 192, 198, 240, 284, 226, 245, 154, 275,
	253, 202, 730, 710, 729, 731, 732, 728, 733, 734,
	718, 671, 0, 726, 725, 727, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	196, 0, 237, 175, 614, 615, 616, 617, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 118,
	629, 630, 631, 632, 633, 634, 635, 636, 637, 638,
	639, 640, 641, 642, 643, 644, 645, 646, 647, 648,
	704, 699, 0, 291, 292, 293, 277, 0, 0, 0,
	0, 225, 0, 0, 0, 0, 0, 0, 0, 669,
	0, 0, 0, 170, 0, 0, 195, 0, 0, 0,
	254, 209, 0, 0, 0, 0, 714, 720, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 662, 0, 0,
	0, 612, 706, 705, 679, 688, 0, 0, 152, 680,
	0, 687, 681, 685, 684, 682, 683, 0, 649, 0,
	0, 0, 0, 0, 0, 0, 666, 0, 670, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 663,
	664, 0, 0, 0, 0, 700, 0, 665, 0, 0,
	702, 0, 689, 0, 144, 259, 273, 153, 250, 286,
	158, 257, 149, 224, 246, 0, 0, 146, 271, 256,
	206, 189, 190, 145, 0, 241, 168, 181, 165, 222,
	686, 698, 655, 164, 653, 697, 281, 148, 0, 280,
	221, 268, 272, 207, 201, 147, 270, 205, 200, 193,
	172, 185, 233, 199, 234, 186, 211, 210, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 695, 0, 0, 283,
	0, 0, 713, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 656, 0, 244, 227, 723, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 140,
	261, 167, 208, 150, 151, 163, 169, 171, 173, 174,
	217, 218, 230, 249, 262, 263, 264, 166, 159, 243,
	160, 183, 161, 141, 251, 162, 142, 231, 267, 0,
	179, 239, 204, 143, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 177, 0, 278, 711,
	223, 722, 707, 708, 709, 712, 715, 716, 651, 654,
	717, 719, 721, 724, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 652,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 701,
	213, 214, 215, 216, 650, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 182, 0,
	184, 156, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 154, 275, 253, 202,
	730, 710, 729, 731, 732, 728, 733, 734, 718, 671,
	0, 726, 725, 727, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 196, 0,
	237, 175, 614, 615, 616, 617, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 118, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 704, 699,
	0, 291, 292, 293, 277, 0, 0, 0, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 669, 0, 0,
	0, 170, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 714, 720, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 612,
	706, 705, 679, 688, 0, 0, 152, 680, 0, 687,
	681, 685, 684, 682, 683, 0, 649, 0, 0, 0,
	0, 0, 0, 610, 666, 0, 670, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 663, 664, 0,
	0, 0, 0, 700, 0, 665, 0, 0, 702, 0,
	689, 0, 144, 259, 273, 153, 250, 286, 158, 257,
	149, 224, 246, 0, 0, 146, 271, 256, 206, 189,
	190, 145, 0, 241, 168, 181, 165, 222, 686, 698,
	655, 164, 653, 697, 281, 148, 0, 280, 221, 268,
	272, 207, 201, 147, 270, 205, 200, 193, 172, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 695, 0, 0, 283, 0, 0,
	713, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 656, 0, 244, 227, 723, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 140, 261, 167,
	208, 150, 151, 163, 169, 171, 173, 174, 217, 218,
	230, 249, 262, 263, 264, 166, 159, 243, 160, 183,
	161, 141, 251, 162, 142, 231, 267, 0, 179, 239,
	204, 143, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 177, 0, 278, 711, 223, 722,
	707, 708, 709, 712, 715, 716, 651, 654, 717, 719,
	721, 724, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 652, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 701, 213, 214,
	215, 216, 650, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 182, 0, 184, 156,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 154, 275, 253, 202, 730, 710,
	729, 731, 732, 728, 733, 734, 718, 671, 0, 726,
	725, 727, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 196, 0, 237, 175,
	614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 118, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 704, 0, 0, 291,
	292, 293, 277, 339, 0, 338, 342, 334, 0, 0,
	0, 0, 0, 0, 0, 225, 0, 0, 0, 330,
	0, 0, 0, 0, 0, 0, 0, 170, 0, 349,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 352, 0, 0, 353, 0,
	0, 0, 152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 259,
	273, 153, 250, 286, 158, 257, 149, 224, 246, 0,
	0, 146, 271, 256, 206, 189, 190, 145, 0, 241,
	168, 181, 165, 222, 0, 0, 298, 164, 289, 0,
	281, 148, 0, 280, 221, 268, 272, 207, 201, 147,
	270, 205, 200, 193, 172, 185, 233, 199, 234, 186,
	211, 210, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 332, 331, 335, 0, 0, 0,
	0, 0, 337, 283, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 194, 341, 0, 0, 299, 0, 244,
	227, 0, 0, 0, 242, 197, 269, 235, 333, 260,
	282, 238, 357, 140, 261, 167, 208, 150, 151, 163,
	169, 171, 173, 174, 217, 218, 230, 249, 262, 263,
	264, 166, 159, 243, 160, 183, 161, 141, 251, 162,
	142, 231, 267, 0, 179, 239, 204, 143, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	177, 0, 278, 0, 223, 0, 0, 0, 0, 0,
	0, 0, 219, 294, 0, 0, 0, 0, 247, 0,
	0, 0, 336, 340, 343, 229, 344, 345, 0, 0,
	346, 347, 348, 0, 0, 350, 351, 0, 0, 0,
	255, 276, 288, 279, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 180, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 182, 0, 184, 156, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	154, 275, 253, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 196, 0, 237, 175, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 0, 0, 0, 291, 292, 293, 277, 339,
	0, 338, 342, 334, 0, 0, 0, 0, 0, 0,
	0, 225, 0, 0, 0, 330, 0, 0, 0, 0,
	0, 0, 0, 170, 0, 349, 195, 0, 0, 0,
	254, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 352, 0, 0, 353, 0, 0, 0, 152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 259, 273, 153, 250, 286,
	158, 257, 149, 224, 246, 0, 0, 146, 271, 256,
	206, 189, 190, 145, 0, 241, 168, 181, 165, 222,
	0, 0, 298, 164, 289, 0, 281, 148, 0, 280,
	221, 268, 272, 207, 201, 147, 270, 205, 200, 193,
	172, 185, 233, 199, 234, 186, 211, 210, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	332, 331, 335, 0, 0, 0, 0, 0, 337, 283,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 194,
	341, 0, 0, 299, 0, 244, 227, 0, 0, 0,
	242, 197, 269, 235, 333, 260, 282, 238, 236, 140,
	261, 167, 208, 150, 151, 163, 169, 171, 173, 174,
	217, 218, 230, 249, 262, 263, 264, 166, 159, 243,
	160, 183, 161, 141, 251, 162, 142, 231, 267, 0,
	179, 239, 204, 143, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 177, 0, 278, 0,
	223, 0, 0, 0, 0, 0, 0, 0, 219, 294,
	0, 0, 0, 0, 247, 0, 0, 0, 336, 340,
	343, 229, 344, 345, 0, 0, 346, 347, 348, 0,
	0, 350, 351, 0, 0, 0, 255, 276, 288, 279,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 180, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 182, 0,
	184, 156, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 154, 275, 253, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 196, 0,
	237, 175, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 0, 0,
	0, 291, 292, 293, 277, 94, 0, 26, 84, 67,
	0, 0, 0, 0, 0, 0, 0, 225, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 311, 0, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 152, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 259, 273, 153, 250, 286, 158, 257, 149, 224,
	246, 0, 0, 146, 271, 256, 206, 189, 190, 145,
	0, 241, 168, 181, 165, 222, 0, 0, 298, 164,
	289, 0, 281, 148, 0, 280, 221, 268, 272, 207,
	201, 147, 270, 205, 200, 193, 172, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 299,
	0, 244, 227, 0, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 140, 261, 167, 208, 150,
	151, 163, 169, 171, 173, 174, 217, 218, 230, 249,
	262, 263, 264, 166, 159, 243, 160, 183, 161, 141,
	251, 162, 142, 231, 267, 0, 179, 239, 204, 143,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 177, 0, 278, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 219, 294, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 279, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	307, 309, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 182, 0, 184, 156, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 154, 275, 253, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 196, 68, 237, 175, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 225, 0, 0, 291, 292, 293,
	277, 0, 0, 0, 0, 0, 170, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 1582, 1585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 259, 273,
	153, 250, 286, 158, 257, 149, 224, 246, 0, 0,
	146, 271, 256, 206, 189, 190, 145, 0, 241, 168,
	181, 165, 222, 0, 0, 298, 164, 289, 0, 281,
	148, 0, 280, 221, 268, 272, 207, 201, 147, 270,
	205, 200, 193, 172, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1586, 283, 0, 0, 0, 1579, 0, 1578, 258,
	1580, 1583, 194, 0, 0, 0, 299, 0, 244, 227,
	0, 0, 0, 242, 197, 269, 235, 274, 260, 282,
	238, 236, 140, 261, 167, 208, 150, 151, 163, 169,
	171, 173, 174, 217, 218, 230, 249, 262, 263, 264,
	166, 159, 243, 160, 183, 161, 141, 251, 162, 142,
	231, 267, 1584, 179, 239, 204, 143, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 177,
	0, 278, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 219, 294, 0, 0, 0, 0, 247, 0, 0,
	0, 0, 0, 188, 229, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	276, 288, 279, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 180, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 182, 0, 184, 156, 228, 178, 285, 191, 0,
	220, 187, 252, 192, 198, 240, 284, 226, 245, 154,
	275, 253, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 196, 0, 237, 175, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 225, 0, 0, 291, 292, 293, 277, 892, 0,
	0, 0, 0, 170, 0, 0, 195, 0, 0, 0,
	254, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 0, 0, 893, 0, 0, 0, 152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	0, 888, 889, 890, 887, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 259, 273, 153, 250, 286,
	158, 257, 149, 224, 246, 0, 0, 146, 271, 256,
	206, 189, 190, 145, 0, 241, 168, 181, 165, 222,
	0, 0, 298, 164, 289, 0, 281, 148, 0, 280,
	221, 268, 272, 207, 201, 147, 270, 205, 200, 193,
	172, 185, 233, 199, 234, 186, 211, 210, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 299, 0, 244, 227, 0, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 140,
	261, 167, 208, 150, 151, 163, 169, 171, 173, 174,
	217, 218, 230, 249, 262, 263, 264, 166, 159, 243,
	160, 183, 161, 141, 251, 162, 142, 231, 267, 0,
	179, 239, 204, 143, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 177, 0, 278, 0,
	223, 0, 0, 0, 0, 0, 0, 0, 219, 294,
	0, 0, 0, 0, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 279,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 180, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 182, 0,
	184, 156, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 154, 275, 253, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 196, 0,
	237, 175, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 225, 0,
	0, 291, 292, 293, 277, 0, 0, 0, 0, 0,
	170, 418, 0, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 426,
	427, 0, 0, 0, 0, 152, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 431, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 259, 273, 153, 250, 286, 158, 257, 149,
	224, 246, 0, 0, 146, 271, 256, 206, 189, 190,
	145, 0, 241, 168, 181, 165, 222, 0, 0, 298,
	164, 289, 401, 281, 148, 400, 280, 221, 268, 272,
	207, 201, 147, 270, 205, 200, 193, 172, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	299, 0, 244, 227, 0, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 417, 236, 140, 261, 167, 208,
	150, 151, 163, 169, 171, 173, 174, 217, 218, 230,
	249, 262, 263, 264, 166, 159, 243, 160, 183, 161,
	141, 251, 162, 142, 231, 267, 0, 179, 239, 204,
	143, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 177, 0, 278, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 219, 294, 0, 0, 0,
	0, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 888, 889, 890, 887, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 279, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 420, 213, 214, 215,
	216, 180, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 182, 0, 184, 156, 228,
	178, 285, 191, 0, 428, 423, 424, 192, 198, 240,
	284, 226, 245, 154, 275, 253, 425, 0, 0, 0,
	0, 0, 0, 0, 0, 1310, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 196, 0, 237, 175, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 94, 0, 0, 291, 292,
	293, 277, 0, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 0, 980, 0, 100, 0, 0,
	0, 0, 0, 0, 152, 0, 0, 0, 0, 0,
	1306, 0, 1303, 0, 155, 0, 1305, 1302, 1304, 1308,
	1309, 0, 0, 0, 1307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 259, 273, 153, 250, 286, 158, 257, 149, 224,
	246, 0, 0, 146, 271, 256, 206, 189, 190, 145,
	0, 241, 168, 181, 165, 222, 0, 0, 298, 164,
	289, 0, 281, 148, 0, 280, 221, 268, 272, 207,
	201, 147, 270, 205, 200, 193, 172, 185, 233, 199,
	234, 186, 211, 210, 212, 1291, 1292, 1293, 1294, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1313, 1314, 1315, 1316,
	1317, 1318, 1311, 1312, 0, 283, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 299,
	0, 244, 227, 0, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 140, 261, 167, 208, 150,
	151, 163, 169, 171, 173, 174, 217, 218, 230, 249,
	262, 263, 264, 166, 159, 243, 160, 183, 161, 141,
	251, 162, 142, 231, 267, 0, 179, 239, 204, 143,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 177, 0, 278, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 219, 294, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 279, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	180, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 182, 0, 184, 156, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 154, 275, 253, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 196, 68, 237, 175, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 225, 0, 0, 291, 292, 293,
	277, 0, 0, 0, 0, 0, 170, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 426, 427, 0, 0, 0,
	0, 152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 431, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 259, 273,
	153, 250, 286, 158, 257, 149, 224, 246, 0, 0,
	146, 271, 256, 206, 189, 190, 145, 0, 241, 168,
	181, 165, 222, 0, 0, 298, 164, 289, 401, 281,
	148, 400, 280, 221, 268, 272, 207, 201, 147, 270,
	205, 200, 193, 172, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 194, 0, 0, 0, 299, 0, 244, 227,
	0, 0, 0, 242, 197, 269, 235, 274, 260, 282,
	238, 236, 140, 261, 167, 208, 150, 151, 163, 169,
	171, 173, 174, 217, 218, 230, 249, 262, 263, 264,
	166, 159, 243, 160, 183, 161, 141, 251, 162, 142,
	231, 267, 0, 179, 239, 204, 143, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 177,
	0, 278, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 219, 294, 0, 0, 0, 0, 247, 0, 0,
	0, 0, 0, 188, 229, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	276, 288, 279, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 180, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 182, 0, 184, 156, 228, 178, 285, 191, 0,
	428, 423, 424, 192, 198, 240, 284, 226, 245, 154,
	275, 253, 425, 0, 0, 0, 1310, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 196, 0, 237, 175, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 0, 0, 0, 291, 292, 293, 277, 225, 0,
	0, 0, 568, 0, 0, 0, 0, 0, 0, 0,
	170, 569, 0, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 352, 0,
	0, 353, 0, 0, 0, 152, 0, 0, 0, 0,
	0, 1306, 0, 1303, 0, 155, 0, 1305, 1302, 1304,
	1308, 1309, 0, 0, 0, 1307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 259, 273, 153, 250, 286, 158, 257, 149,
	224, 246, 0, 0, 146, 271, 256, 206, 189, 190,
	145, 0, 241, 168, 181, 165, 222, 0, 0, 298,
	164, 289, 0, 281, 148, 0, 280, 221, 268, 272,
	207, 201, 147, 270, 205, 200, 193, 172, 185, 233,
	199, 234, 186, 211, 210, 212, 1291, 1292, 1293, 1294,
	1295, 1296, 1297, 1298, 1299, 1300, 1301, 1313, 1314, 1315,
	1316, 1317, 1318, 1311, 1312, 0, 283, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	299, 0, 244, 227, 0, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 140, 261, 167, 208,
	150, 151, 163, 169, 171, 173, 174, 217, 218, 230,
	249, 262, 263, 264, 166, 159, 243, 160, 183, 161,
	141, 251, 162, 142, 231, 267, 0, 179, 239, 204,
	143, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 177, 0, 278, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 219, 294, 0, 0, 0,
	0, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 279, 0, 0, 0,
	287, 0, 0, 0, 0, 570, 0, 213, 214, 215,
	216, 180, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 182, 0, 184, 156, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 154, 275, 253, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 196, 0, 237, 175, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 0, 0, 0, 291, 292,
	293, 277, 225, 0, 0, 0, 852, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 0, 0, 353, 0, 0, 0, 152,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 259, 273, 153, 250,
	286, 158, 257, 149, 224, 246, 0, 0, 146, 271,
	256, 206, 189, 190, 145, 0, 241, 168, 181, 165,
	222, 0, 0, 298, 164, 289, 0, 281, 148, 0,
	280, 221, 268, 272, 207, 201, 147, 270, 205, 200,
	193, 172, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	194, 0, 0, 0, 299, 0, 244, 227, 0, 0,
	0, 242, 197, 269, 235, 274, 260, 282, 238, 236,
	140, 261, 167, 208, 150, 151, 163, 169, 171, 173,
	174, 217, 218, 230, 249, 262, 263, 264, 166, 159,
	243, 160, 183, 161, 141, 251, 162, 142, 231, 267,
	0, 179, 239, 204, 143, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 177, 0, 278,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 219,
	294, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 188, 229, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 276, 288,
	279, 0, 0, 0, 287, 0, 0, 0, 0, 851,
	0, 213, 214, 215, 216, 180, 0, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 182,
	0, 184, 156, 228, 178, 285, 191, 0, 220, 187,
	252, 192, 198, 240, 284, 226, 245, 154, 275, 253,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 196,
	0, 237, 175, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 225,
	0, 0, 291, 292, 293, 277, 0, 0, 0, 0,
	0, 170, 590, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	0, 0, 588, 0, 0, 0, 152, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 0, 144, 259, 273, 153, 250, 286, 158, 257,
	149, 224, 246, 0, 0, 146, 271, 256, 206, 189,
	190, 145, 0, 241, 168, 181, 165, 222, 0, 0,
	298, 164, 289, 0, 281, 148, 0, 280, 221, 268,
	272, 207, 201, 147, 270, 205, 200, 193, 172, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 140, 261, 167,
	208, 150, 151, 163, 169, 171, 173, 174, 217, 218,
	230, 249, 262, 263, 264, 166, 159, 243, 160, 183,
	161, 141, 251, 162, 142, 231, 267, 0, 179, 239,
	204, 143, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 177, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 182, 0, 184, 156,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 154, 275, 253, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 196, 0, 237, 175,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 138, 225, 0, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 170, 585,
	0, 195, 0, 0, 0, 254, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 588,
	0, 0, 0, 152, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 0, 0, 0, 144,
	259, 273, 153, 250, 286, 158, 257, 149, 224, 246,
	0, 0, 146, 271, 256, 206, 189, 190, 145, 0,
	241, 168, 181, 165, 222, 0, 0, 298, 164, 289,
	0, 281, 148, 0, 280, 221, 268, 272, 207, 201,
	147, 270, 205, 200, 193, 172, 185, 233, 199, 234,
	186, 211, 210, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 299, 0,
	244, 227, 0, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 140, 261, 167, 208, 150, 151,
	163, 169, 171, 173, 174, 217, 218, 230, 249, 262,
	263, 264, 166, 159, 243, 160, 183, 161, 141, 251,
	162, 142, 231, 267, 0, 179, 239, 204, 143, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 177, 0, 278, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 219, 294, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 279, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 180,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 182, 0, 184, 156, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 154, 275, 253, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 196, 0, 237, 175, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 225, 0, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 0, 170, 0, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2195, 0, 100, 706, 0, 0, 0, 0, 0,
	152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 259, 273, 153,
	250, 286, 158, 257, 149, 224, 246, 0, 0, 146,
	271, 256, 206, 189, 190, 145, 0, 241, 168, 181,
	165, 222, 0, 0, 298, 164, 289, 0, 281, 148,
	0, 280, 221, 268, 272, 207, 201, 147, 270, 205,
	200, 193, 172, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 194, 0, 0, 0, 299, 0, 244, 227, 0,
	0, 0, 242, 197, 269, 235, 274, 260, 282, 238,
	236, 140, 261, 167, 208, 150, 151, 163, 169, 171,
	173, 174, 217, 218, 230, 249, 262, 263, 264, 166,
	159, 243, 160, 183, 161, 141, 251, 162, 142, 231,
	267, 0, 179, 239, 204, 143, 203, 232, 266, 265,
	290, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 177, 0,
	278, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	219, 294, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 188, 229, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 276,
	288, 279, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 180, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	182, 0, 184, 156, 228, 178, 285, 191, 0, 220,
	187, 252, 192, 198, 240, 284, 226, 245, 154, 275,
	253, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	196, 0, 237, 175, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	225, 0, 0, 291, 292, 293, 277, 0, 0, 0,
	0, 0, 170, 0, 0, 195, 0, 0, 0, 254,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 0, 0, 588, 0, 0, 0, 152, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	0, 0, 0, 144, 259, 273, 153, 250, 286, 158,
	257, 149, 224, 246, 0, 0, 146, 271, 256, 206,
	189, 190, 145, 0, 241, 168, 181, 165, 222, 0,
	0, 298, 164, 289, 0, 281, 148, 0, 280, 221,
	268, 272, 207, 201, 147, 270, 205, 200, 193, 172,
	185, 233, 199, 234, 186, 211, 210, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 194, 0,
	0, 0, 299, 0, 244, 227, 0, 0, 0, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 140, 261,
	167, 208, 150, 151, 163, 169, 171, 173, 174, 217,
	218, 230, 249, 262, 263, 264, 166, 159, 243, 160,
	183, 161, 141, 251, 162, 142, 231, 267, 0, 179,
	239, 204, 143, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 177, 0, 278, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 219, 294, 0,
	0, 0, 0, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 276, 288, 279, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 180, 0, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 182, 0, 184,
	156, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 154, 275, 253, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 196, 0, 237,
	175, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 225, 0, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 0, 170,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 0, 0,
	588, 0, 0, 0, 152, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1774, 0, 0, 0,
	144, 259, 273, 153, 250, 286, 158, 257, 149, 224,
	246, 0, 0, 146, 271, 256, 206, 189, 190, 145,
	0, 241, 168, 181, 165, 222, 0, 0, 298, 164,
	289, 0, 281, 148, 0, 280, 221, 268, 272, 207,
	201, 147, 270, 205, 200, 193, 172, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 299,
	0, 244, 227, 0, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 140, 261, 167, 208, 150,
	151, 163, 169, 171, 173, 174, 217, 218, 230, 249,
	262, 263, 264, 166, 159, 243, 160, 183, 161, 141,
	251, 162, 142, 231, 267, 0, 179, 239, 204, 143,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 177, 0, 278, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 219, 294, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 279, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	180, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 182, 0, 184, 156, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 154, 275, 253, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 196, 0, 237, 175, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 225, 0, 0, 291, 292, 293,
	277, 0, 0, 0, 0, 0, 170, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 0, 588, 0, 0,
	0, 152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 259, 273,
	153, 250, 286, 158, 257, 149, 224, 246, 0, 0,
	146, 271, 256, 206, 189, 190, 145, 0, 241, 168,
	181, 165, 222, 0, 0, 298, 164, 289, 0, 281,
	148, 0, 280, 221, 268, 272, 207, 201, 147, 270,
	205, 200, 193, 172, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 194, 0, 0, 0, 299, 0, 244, 227,
	0, 0, 0, 242, 197, 269, 235, 274, 260, 282,
	238, 236, 140, 261, 167, 208, 150, 151, 163, 169,
	171, 173, 174, 217, 218, 230, 249, 262, 263, 264,
	166, 159, 243, 160, 183, 161, 141, 251, 162, 142,
	231, 267, 0, 179, 239, 204, 143, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 177,
	0, 278, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 219, 294, 0, 0, 0, 0, 247, 0, 0,
	0, 0, 0, 188, 229, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	276, 288, 279, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 1557, 213, 214, 215, 216, 180, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 182, 0, 184, 156, 228, 178, 285, 191, 0,
	220, 187, 252, 192, 198, 240, 284, 226, 245, 154,
	275, 253, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 196, 0, 237, 175, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 225, 0, 0, 291, 292, 293, 277, 0, 0,
	0, 0, 0, 170, 1247, 0, 195, 0, 0, 0,
	254, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 0, 0, 588, 0, 0, 0, 152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 259, 273, 153, 250, 286,
	158, 257, 149, 224, 246, 0, 0, 146, 271, 256,
	206, 189, 190, 145, 0, 241, 168, 181, 165, 222,
	0, 0, 298, 164, 289, 0, 281, 148, 0, 280,
	221, 268, 272, 207, 201, 147, 270, 205, 200, 193,
	172, 185, 233, 199, 234, 186, 211, 210, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 299, 0, 244, 227, 0, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 140,
	261, 167, 208, 150, 151, 163, 169, 171, 173, 174,
	217, 218, 230, 249, 262, 263, 264, 166, 159, 243,
	160, 183, 161, 141, 251, 162, 142, 231, 267, 0,
	179, 239, 204, 143, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 177, 0, 278, 0,
	223, 0, 0, 0, 0, 0, 0, 0, 219, 294,
	0, 0, 0, 0, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 279,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 180, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 182, 0,
	184, 156, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 154, 275, 253, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 196, 0,
	237, 175, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 225, 0,
	0, 291, 292, 293, 277, 0, 0, 0, 0, 0,
	170, 0, 0, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 706,
	0, 0, 0, 0, 0, 152, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 259, 273, 153, 250, 286, 158, 257, 149,
	224, 246, 0, 0, 146, 271, 256, 206, 189, 190,
	145, 0, 241, 168, 181, 165, 222, 0, 0, 298,
	164, 289, 0, 281, 148, 0, 280, 221, 268, 272,
	207, 201, 147, 270, 205, 200, 193, 172, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	299, 0, 244, 227, 0, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 140, 261, 167, 208,
	150, 151, 163, 169, 171, 173, 174, 217, 218, 230,
	249, 262, 263, 264, 166, 159, 243, 160, 183, 161,
	141, 251, 162, 142, 231, 267, 0, 179, 239, 204,
	143, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 177, 0, 278, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 219, 294, 0, 0, 0,
	0, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 279, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 180, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 182, 0, 184, 156, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 154, 275, 253, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 196, 0, 237, 175, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 225, 0, 0, 291, 292,
	293, 277, 0, 0, 0, 0, 0, 170, 0, 0,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1922, 0, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 259,
	273, 153, 250, 286, 158, 257, 149, 224, 246, 0,
	0, 146, 271, 256, 206, 189, 190, 145, 0, 241,
	168, 181, 165, 222, 0, 0, 298, 164, 289, 0,
	281, 148, 0, 280, 221, 268, 272, 207, 201, 147,
	270, 205, 200, 193, 172, 185, 233, 199, 234, 186,
	211, 210, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 299, 0, 244,
	227, 0, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 140, 261, 167, 208, 150, 151, 163,
	169, 171, 173, 174, 217, 218, 230, 249, 262, 263,
	264, 166, 159, 243, 160, 183, 161, 141, 251, 162,
	142, 231, 267, 0, 179, 239, 204, 143, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	177, 0, 278, 0, 223, 0, 0, 0, 0, 0,
	0, 0, 219, 294, 0, 0, 0, 0, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 279, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 180, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 182, 0, 184, 156, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	154, 275, 253, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 196, 0, 237, 175, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 225, 0, 0, 291, 292, 293, 277, 0,
	0, 0, 0, 0, 170, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 0, 0, 588, 0, 0, 0, 152,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 259, 273, 153, 250,
	286, 158, 257, 149, 224, 246, 0, 0, 146, 271,
	256, 206, 189, 190, 145, 0, 241, 168, 181, 165,
	222, 0, 0, 298, 164, 289, 0, 281, 148, 0,
	280, 221, 268, 272, 207, 201, 147, 270, 205, 200,
	193, 172, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	194, 0, 0, 0, 299, 0, 244, 227, 0, 0,
	0, 242, 197, 269, 235, 274, 260, 282, 238, 236,
	140, 261, 167, 208, 150, 151, 163, 169, 171, 173,
	174, 217, 218, 230, 249, 262, 263, 264, 166, 159,
	243, 160, 183, 161, 141, 251, 162, 142, 231, 267,
	0, 179, 239, 204, 143, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 177, 0, 278,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 219,
	294, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 188, 229, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 276, 288,
	279, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 180, 0, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 182,
	0, 184, 156, 228, 178, 285, 191, 0, 220, 187,
	252, 192, 198, 240, 284, 226, 245, 154, 275, 253,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 196,
	0, 237, 175, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 225,
	0, 0, 291, 292, 293, 277, 0, 0, 0, 0,
	0, 170, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 152, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1610,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 259, 273, 153, 250, 286, 158, 257,
	149, 224, 246, 0, 0, 146, 271, 256, 206, 189,
	190, 145, 0, 241, 168, 181, 165, 222, 0, 0,
	298, 164, 289, 0, 281, 148, 0, 280, 221, 268,
	272, 207, 201, 147, 270, 205, 200, 193, 172, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 140, 261, 167,
	208, 150, 151, 163, 169, 171, 173, 174, 217, 218,
	230, 249, 262, 263, 264, 166, 159, 243, 160, 183,
	161, 141, 251, 162, 142, 231, 267, 0, 179, 239,
	204, 143, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 177, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 182, 0, 184, 156,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 154, 275, 253, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 196, 0, 237, 175,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 138, 225, 0, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 170, 0,
	0, 195, 0, 0, 0, 254, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 843, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 152, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	259, 273, 153, 250, 286, 158, 257, 149, 224, 246,
	0, 0, 146, 271, 256, 206, 189, 190, 145, 0,
	241, 168, 181, 165, 222, 0, 0, 298, 164, 289,
	0, 281, 148, 0, 280, 221, 268, 272, 207, 201,
	147, 270, 205, 200, 193, 172, 185, 233, 199, 234,
	186, 211, 210, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 299, 0,
	244, 227, 0, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 140, 261, 167, 208, 150, 151,
	163, 169, 171, 173, 174, 217, 218, 230, 249, 262,
	263, 264, 166, 159, 243, 160, 183, 161, 141, 251,
	162, 142, 231, 267, 0, 179, 239, 204, 143, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 177, 0, 278, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 219, 294, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 279, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 180,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 182, 0, 184, 156, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 154, 275, 253, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 196, 0, 237, 175, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 225, 0, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 0, 170, 0, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1641, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 259, 273, 153,
	250, 286, 158, 257, 149, 224, 246, 0, 0, 146,
	271, 256, 206, 189, 190, 145, 0, 241, 168, 181,
	165, 222, 0, 0, 298, 164, 289, 0, 281, 148,
	0, 280, 221, 268, 272, 207, 201, 147, 270, 205,
	200, 193, 172, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 194, 0, 0, 0, 299, 0, 244, 227, 0,
	0, 0, 242, 197, 269, 235, 274, 260, 282, 238,
	236, 140, 261, 167, 208, 150, 151, 163, 169, 171,
	173, 174, 217, 218, 230, 249, 262, 263, 264, 166,
	159, 243, 160, 183, 161, 141, 251, 162, 142, 231,
	267, 0, 179, 239, 204, 143, 203, 232, 266, 265,
	290, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 177, 0,
	278, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	219, 294, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 188, 229, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 276,
	288, 279, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 180, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	182, 0, 184, 156, 228, 178, 285, 191, 0, 220,
	187, 252, 192, 198, 240, 284, 226, 245, 154, 275,
	253, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	196, 0, 237, 175, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	225, 0, 0, 291, 292, 293, 277, 0, 0, 0,
	0, 0, 170, 0, 0, 195, 0, 0, 0, 254,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 152, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1262, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 144, 259, 273, 153, 250, 286, 158,
	257, 149, 224, 246, 0, 0, 146, 271, 256, 206,
	189, 190, 145, 0, 241, 168, 181, 165, 222, 0,
	0, 298, 164, 289, 0, 281, 148, 0, 280, 221,
	268, 272, 207, 201, 147, 270, 205, 200, 193, 172,
	185, 233, 199, 234, 186, 211, 210, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 194, 0,
	0, 0, 299, 0, 244, 227, 0, 0, 0, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 140, 261,
	167, 208, 150, 151, 163, 169, 171, 173, 174, 217,
	218, 230, 249, 262, 263, 264, 166, 159, 243, 160,
	183, 161, 141, 251, 162, 142, 231, 267, 0, 179,
	239, 204, 143, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 177, 0, 278, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 219, 294, 0,
	0, 0, 0, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 276, 288, 279, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 180, 0, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 182, 0, 184,
	156, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 154, 275, 253, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 196, 0, 237,
	175, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 225, 0, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 0, 170,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 0, 0,
	1260, 0, 0, 0, 152, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 259, 273, 153, 250, 286, 158, 257, 149, 224,
	246, 0, 0, 146, 271, 256, 206, 189, 190, 145,
	0, 241, 168, 181, 165, 222, 0, 0, 298, 164,
	289, 0, 281, 148, 0, 280, 221, 268, 272, 207,
	201, 147, 270, 205, 200, 193, 172, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 299,
	0, 244, 227, 0, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 140, 261, 167, 208, 150,
	151, 163, 169, 171, 173, 174, 217, 218, 230, 249,
	262, 263, 264, 166, 159, 243, 160, 183, 161, 141,
	251, 162, 142, 231, 267, 0, 179, 239, 204, 143,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 177, 0, 278, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 219, 294, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 279, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	180, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 182, 0, 184, 156, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 154, 275, 253, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 196, 0, 237, 175, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 225, 0, 0, 291, 292, 293,
	277, 0, 0, 0, 0, 0, 170, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 0, 0, 353, 0, 0,
	0, 152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 259, 273,
	153, 250, 286, 158, 257, 149, 224, 246, 0, 0,
	146, 271, 256, 206, 189, 190, 145, 0, 241, 168,
	181, 165, 222, 0, 0, 298, 164, 289, 0, 281,
	148, 0, 280, 221, 268, 272, 207, 201, 147, 270,
	205, 200, 193, 172, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 194, 0, 0, 0, 299, 0, 244, 227,
	0, 0, 0, 242, 197, 269, 235, 274, 260, 282,
	238, 236, 140, 261, 167, 208, 150, 151, 163, 169,
	171, 173, 174, 217, 218, 230, 249, 262, 263, 264,
	166, 159, 243, 160, 183, 161, 141, 251, 162, 142,
	231, 267, 0, 179, 239, 204, 143, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 177,
	0, 278, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 219, 294, 0, 0, 0, 0, 247, 0, 0,
	0, 0, 0, 188, 229, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	276, 288, 279, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 180, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 182, 0, 184, 156, 228, 178, 285, 191, 0,
	220, 187, 252, 192, 198, 240, 284, 226, 245, 154,
	275, 253, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 196, 0, 237, 175, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 1189, 0, 0, 291, 292, 293, 277, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 152, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 259, 273, 153, 250, 286, 158, 257, 149,
	224, 246, 0, 0, 146, 271, 256, 206, 189, 190,
	145, 0, 241, 168, 181, 165, 222, 0, 0, 298,
	164, 289, 0, 281, 148, 0, 280, 221, 268, 272,
	207, 201, 147, 270, 205, 200, 193, 172, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	299, 0, 244, 227, 0, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 140, 261, 167, 208,
	150, 151, 163, 169, 171, 173, 174, 217, 218, 230,
	249, 262, 263, 264, 166, 159, 243, 160, 183, 161,
	141, 251, 162, 142, 231, 267, 0, 179, 239, 204,
	143, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 177, 0, 278, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 219, 294, 0, 0, 0,
	0, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 279, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 180, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 182, 0, 184, 156, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 154, 275, 253, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 196, 0, 237, 175, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 225, 0, 0, 291, 292,
	293, 277, 0, 0, 0, 0, 0, 170, 0, 0,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 259,
	273, 153, 250, 286, 158, 257, 149, 224, 246, 0,
	0, 146, 271, 256, 206, 189, 190, 145, 0, 241,
	168, 181, 165, 222, 0, 0, 298, 164, 289, 0,
	281, 148, 0, 280, 221, 268, 272, 207, 201, 147,
	270, 205, 200, 193, 172, 185, 233, 199, 234, 186,
	211, 210, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 1176, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 299, 0, 244,
	227, 0, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 140, 261, 167, 208, 150, 151, 163,
	169, 171, 173, 174, 217, 218, 230, 249, 262, 263,
	264, 166, 159, 243, 160, 183, 161, 141, 251, 162,
	142, 231, 267, 0, 179, 239, 204, 143, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	177, 0, 278, 0, 223, 0, 0, 0, 0, 0,
	0, 0, 219, 294, 0, 0, 0, 0, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 279, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 180, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 182, 0, 184, 156, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	154, 275, 253, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 196, 0, 237, 175, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 225, 0, 0, 291, 292, 293, 277, 0,
	0, 0, 0, 0, 170, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 0, 0, 588, 0, 0, 0, 152,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 259, 273, 153, 250,
	286, 158, 257, 149, 224, 246, 0, 0, 146, 271,
	256, 206, 189, 190, 145, 0, 241, 168, 181, 165,
	222, 0, 0, 298, 164, 289, 0, 281, 148, 0,
	280, 221, 268, 272, 207, 201, 147, 270, 205, 200,
	193, 172, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	194, 0, 0, 0, 299, 0, 244, 227, 0, 0,
	0, 242, 197, 269, 235, 274, 260, 282, 238, 236,
	140, 261, 167, 208, 150, 151, 163, 169, 171, 173,
	174, 217, 218, 230, 249, 262, 263, 264, 166, 159,
	243, 160, 183, 161, 141, 251, 162, 142, 231, 267,
	0, 179, 239, 204, 143, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 177, 0, 278,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 219,
	294, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 188, 229, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 276, 288,
	833, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 180, 0, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 182,
	0, 184, 156, 228, 178, 285, 191, 0, 220, 187,
	252, 192, 198, 240, 284, 226, 245, 154, 275, 253,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 196,
	0, 237, 175, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 225,
	0, 0, 291, 292, 293, 277, 0, 0, 0, 0,
	0, 170, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 152, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 259, 273, 153, 250, 286, 158, 257,
	149, 224, 246, 0, 0, 146, 271, 256, 206, 189,
	190, 145, 0, 241, 168, 181, 165, 222, 0, 0,
	298, 164, 289, 0, 281, 148, 0, 280, 221, 268,
	272, 207, 201, 147, 270, 205, 200, 193, 172, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 140, 261, 167,
	208, 150, 151, 163, 169, 171, 173, 174, 217, 218,
	230, 249, 262, 263, 264, 166, 159, 243, 160, 183,
	161, 141, 251, 162, 142, 231, 267, 0, 179, 239,
	204, 143, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 177, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 182, 0, 184, 156,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 154, 275, 253, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 384, 0, 0, 139, 0, 196, 0, 237, 175,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 138, 225, 0, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 97, 170, 0,
	0, 195, 0, 0, 0, 254, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 152, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	259, 273, 153, 250, 286, 158, 257, 149, 224, 246,
	0, 0, 146, 271, 256, 206, 189, 190, 145, 0,
	241, 168, 181, 165, 222, 0, 0, 298, 164, 289,
	0, 281, 148, 0, 280, 221, 268, 272, 207, 201,
	147, 270, 205, 200, 193, 172, 185, 233, 199, 234,
	186, 211, 210, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 299, 0,
	244, 227, 0, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 140, 261, 167, 208, 150, 151,
	163, 169, 171, 173, 174, 217, 218, 230, 249, 262,
	263, 264, 166, 159, 243, 160, 183, 161, 141, 251,
	162, 142, 231, 267, 0, 179, 239, 204, 143, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 177, 0, 278, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 219, 294, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 279, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 180,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 182, 0, 184, 156, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 154, 275, 253, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 196, 0, 237, 175, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 225, 0, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 0, 170, 0, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 259, 273, 153,
	250, 286, 158, 257, 149, 224, 246, 0, 0, 146,
	271, 256, 206, 189, 190, 145, 0, 241, 168, 181,
	165, 222, 0, 0, 298, 164, 289, 0, 281, 148,
	0, 280, 221, 268, 272, 207, 201, 147, 270, 205,
	200, 193, 172, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 194, 0, 0, 0, 299, 0, 244, 227, 0,
	0, 0, 242, 197, 269, 235, 274, 260, 282, 238,
	236, 140, 261, 167, 208, 150, 151, 163, 169, 171,
	173, 174, 217, 218, 230, 249, 262, 263, 264, 166,
	159, 243, 160, 183, 161, 141, 251, 162, 142, 231,
	267, 0, 179, 239, 204, 143, 203, 232, 266, 265,
	290, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 177, 0,
	278, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	219, 294, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 188, 229, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 276,
	288, 279, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 180, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	182, 0, 184, 156, 228, 178, 285, 191, 0, 220,
	187, 252, 192, 198, 240, 284, 226, 245, 154, 275,
	253, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	196, 0, 237, 175, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	225, 0, 0, 291, 292, 293, 277, 1229, 0, 0,
	0, 0, 170, 0, 0, 195, 0, 0, 0, 254,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	805, 806, 807, 1231, 0, 0, 0, 152, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 144, 259, 273, 153, 250, 286, 158,
	257, 149, 224, 246, 0, 0, 146, 271, 256, 206,
	189, 190, 145, 0, 241, 168, 181, 165, 222, 0,
	0, 298, 164, 289, 0, 281, 148, 0, 280, 221,
	268, 272, 207, 201, 147, 270, 205, 200, 193, 172,
	185, 233, 199, 234, 186, 211, 210, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 194, 0,
	0, 0, 299, 0, 244, 227, 0, 0, 0, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 140, 261,
	167, 208, 150, 151, 163, 169, 171, 173, 174, 217,
	218, 230, 249, 262, 263, 264, 166, 159, 243, 160,
	183, 161, 141, 251, 162, 142, 231, 267, 0, 179,
	239, 204, 143, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 177, 0, 278, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 219, 294, 0,
	0, 0, 0, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 276, 288, 279, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 180, 0, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 182, 0, 184,
	156, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 154, 275, 253, 202, 0,
	0, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 170, 0, 0, 195, 0, 0, 0,
	254, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 196, 0, 237,
	175, 805, 806, 807, 1231, 0, 0, 0, 152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 259, 273, 153, 250, 286,
	158, 257, 149, 224, 246, 0, 0, 146, 271, 256,
	206, 189, 190, 145, 0, 241, 168, 181, 165, 222,
	0, 0, 298, 164, 289, 0, 281, 148, 0, 280,
	221, 268, 272, 207, 201, 147, 270, 205, 200, 193,
	172, 185, 233, 199, 234, 186, 211, 210, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 299, 0, 244, 227, 0, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 140,
	261, 167, 208, 150, 151, 163, 169, 171, 173, 174,
	217, 218, 230, 249, 262, 263, 264, 166, 159, 243,
	160, 183, 161, 141, 251, 162, 142, 231, 267, 0,
	179, 239, 204, 143, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 177, 0, 278, 0,
	223, 0, 0, 0, 0, 0, 0, 0, 219, 294,
	0, 0, 0, 0, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 279,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 180, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 182, 0,
	184, 156, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 154, 275, 253, 202,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 196, 0,
	237, 175, 805, 806, 807, 0, 0, 0, 0, 152,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 293, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 259, 273, 153, 250,
	286, 158, 257, 149, 224, 246, 0, 0, 146, 271,
	256, 206, 189, 190, 145, 0, 241, 168, 181, 165,
	222, 0, 0, 298, 164, 289, 0, 281, 148, 0,
	280, 221, 268, 272, 207, 201, 147, 270, 205, 200,
	193, 172, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	194, 0, 0, 0, 299, 0, 244, 227, 0, 0,
	0, 242, 197, 269, 235, 274, 260, 282, 238, 236,
	140, 261, 167, 208, 150, 151, 163, 169, 171, 173,
	174, 217, 218, 230, 249, 262, 263, 264, 166, 159,
	243, 160, 183, 161, 141, 251, 162, 142, 231, 267,
	0, 179, 239, 204, 143, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 177, 0, 278,
	0, 223, 0, 1887, 0, 0, 0, 0, 0, 219,
	294, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 188, 229, 1670, 248, 0, 0, 0, 0, 0,
	0, 0, 1188, 0, 0, 0, 0, 255, 276, 288,
	279, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 180, 1952, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 1869, 0, 176, 182,
	0, 184, 156, 228, 178, 285, 191, 0, 220, 187,
	252, 192, 198, 240, 284, 226, 245, 154, 275, 253,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 26, 84, 67, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 1658,
	0, 0, 78, 0, 0, 0, 0, 139, 0, 196,
	0, 237, 175, 0, 0, 0, 1677, 1681, 1683, 1685,
	1687, 1688, 1690, 49, 1694, 1691, 1692, 1693, 91, 0,
	1672, 1673, 1674, 1675, 1656, 1657, 1678, 0, 1659, 0,
	1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669,
	1676, 0, 291, 292, 293, 277, 0, 0, 1680, 1682,
	1684, 1686, 1689, 0, 0, 1887, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1873, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1877, 0, 0,
	0, 0, 1671, 0, 1188, 85, 86, 0, 87, 88,
	0, 0, 0, 0, 0, 0, 0, 1866, 0, 0,
	0, 1868, 1870, 1872, 0, 1874, 1875, 1876, 1878, 1879,
	1880, 1882, 1883, 1884, 1885, 0, 0, 0, 1869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1888, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 66, 83, 92, 0, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 77, 76, 0, 1886, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1865, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1881, 0, 0,
	0, 0, 0, 0, 1871, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1873, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1877,
	0, 0, 0, 0, 0, 57, 0, 0, 0, 81,
	0, 58, 0, 0, 0, 0, 0, 0, 0, 1866,
	0, 0, 0, 1868, 1870, 1872, 1679, 1874, 1875, 1876,
	1878, 1879, 1880, 1882, 1883, 1884, 1885, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1888, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1886, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1865, 0, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 1881,
	0, 0, 0, 0, 0, 0, 1871,
}

var yyPact = [...]int{
	22810, -1000, -302, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 20834, -1000, -1000, 1526,
	-1000, 8565, 21271, 54, 21271, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 221, -1000, 21271,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 8109, 7653, 139,
	-1000, 1843, -1000, -1000, -1000, -1000, 130, 246, 20397, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 624, -36, 246, 334, 338, 354, 354, 9876,
	1843, 210, 38, -1000, 512, 22810, 178, 21271, -1000, 425,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1843, 1843, 21271, -76, 594, -1000, 239,
	186, 245, 411, -1000, -1000, -1000, -1000, 1866, -1000, 21271,
	1645, 21271, -1000, 1415, 1431, -1000, -1000, 1642, -1000, 99,
	4, -25, 107, -1000, -1000, 165, -1000, -1000, -1000, -1000,
	-1000, 35, -1000, -7, -1000, -15, -1000, -1000, -1000, -131,
	-1000, -1000, -1000, -1000, -1000, 1409, 346, 1667, -175, 1727,
	1804, 1499, 1847, 1805, 1801, 1797, 1789, -8, 197, 197,
	215, 197, -1000, -1000, -1000, -1000, -1000, -1000, 276, -1000,
	-1000, -1000, -1000, 1449, 21271, -1000, 1528, 473, 473, 665,
	163, -1000, -1000, -114, -146, 473, 473, -146, -3, -1000,
	1776, 1774, -1000, -1000, -1000, -1000, -1000, -1000, 199, 202,
	-1000, -188, -1000, 319, -1000, 316, -1000, 11206, 156, 1455,
	591, -1000, 599, 21271, 21271, 21271, 599, 599, 12524, 12087,
	409, -1000, 1804, 1499, -1000, 1354, 1491, 1499, 199, 199,
	199, 199, 199, 199, 21271, 5405, 5405, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 192, 1639, -1000, 21271, 1804,
	1727, 1804, -1000, 396, 840, 1006, -1000, -1000, 239, 1397,
	-1000, 586, -1000, -1000, -1000, -1000, 21271, 166, -1000, 965,
	1638, 110, 1794, 16020, 18642, 21271, 16020, -1000, -1000, -1000,
	-1000, -1000, -134, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 110, 16020, 16020, -80, -1000, -1000, -293,
	1727, 5853, -1000, -1000, 5853, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 211, 197, -1000, 16020, 635, 18642, 850,
	21271, 202, -1000, 21271, 1449, 1764, 21271, 1857, 6749, 1857,
	21271, -1000, -1000, 473, 473, -1000, 665, 665, -1000, -1000,
	-142, 1857, 1857, -140, 21271, 197, -1000, -1000, 19960, 1743,
	16894, -1000, -156, 332, 320, 322, -1000, -1000, 1879, -1000,
	-1000, 1424, 11650, 10762, 223, 16020, 3607, -1000, -1000, 599,
	599, 599, 3607, 3607, 358, -1000, -1000, -1000, -1000, -1000,
	-1000, 21271, 1727, -1000, -1000, -1000, -1000, -1000, 16020, 18642,
	21271, 21271, 21271, 22430, -1000, 1430, -1000, -1000, 9439, 392,
	5853, 769, 1637, -1000, -1000, 1636, 1635, 1634, 1631, 1630,
	1629, 1625, -1000, 1574, -1000, -1000, 1624, 1621, 1620, 1619,
	-1000, -1000, -1000, -1000, -1000, -1000, 1618, -1000, -1000, -1000,
	1611, 1574, -1000, -1000, 1609, 1607, 1601, 1598, 1595, -1000,
	-1000, -1000, -1000, -1000, -1000, 981, 970, 1151, -1000, -1000,
	-1000, -1000, 3159, 6749, 6749, 6749, 6749, -1000, -1000, 1547,
	5853, 1594, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7197,
	-1000, 1589, 1587, 1584, 1578, 1576, 1574, 1573, 968, 1572,
	1567, 1565, 6749, 1563, 1562, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1430, -1000, -290, -1000, 10325,
	21271, 21271, -1000, 1727, -1000, 1727, 2292, -1000, 1780, -1000,
	239, 77, -1000, -1000, -1000, -1000, -1000, -1000, 389, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1445, -1000,
	21271, 608, -1000, -1000, -1000, -1000, -1000, -7, -15, 1406,
	-1000, -40, 95, -1000, 1383, -1000, -1000, -1000, 608, 1406,
	208, 961, 947, -1000, 1101, 383, 1444, -1000, 746, 19523,
	21271, 214, 1742, 1424, 1592, -1000, -1000, -1000, 1669, 19086,
	-1000, 1560, 1364, -1000, -1000, 5853, -1000, -1000, 1857, 1857,
	1857, 473, 22430, 665, 21271, 665, -1000, -1000, 665, -1000,
	379, 21271, 214, 1558, -1000, 1731, 1429, -1000, -1000, -1000,
	-1000, 1763, 21708, 210, -1000, -1000, 326, 308, 314, 18642,
	207, -1000, -1000, 1424, -1000, -1000, -1000, 1557, 593, -1000,
	-1000, 6749, -1000, 654, -1000, 3607, 3607, 3607, -1000, -1000,
	14709, -1000, -1000, 1406, 1424, 1665, 1443, -1000, 1443, -1000,
	-1000, -1000, 1857, 5405, -1000, 16894, -1000, 5853, 5853, 5853,
	5853, -1000, 18205, -1000, 17768, -1000, 268, 6301, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 5853, 1786, 1786, 1786, 5853,
	669, 5853, 5853, -1000, 715, 10991, 1786, 1786, 1786, 1786,
	1786, -1000, 2703, 1786, 1786, 1786, 1786, -1000, -1000, 6749,
	6749, 6749, 6749, 6749, 6749, 6749, 6749, 6749, 6749, 6749,
	6749, 1542, 621, 6749, 6749, 6749, 1491, 1666, 1442, -1000,
	-1000, -1000, -1000, -1000, 616, 654, 5853, 10110, 5853, 5853,
	5853, -1000, 1327, 1307, -1000, -1000, 5853, -1000, 5853, 6749,
	5853, -1000, 1786, 945, 1857, 1373, -1000, 1555, -1000, 1339,
	1701, -1000, 378, 1432, -1000, 574, 1330, -1000, -1000, -1000,
	-1000, 374, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -77, -1000,
	-1000, 21271, 965, 1313, 1865, 372, 368, 16020, -1000, 162,
	16020, -1000, -1000, 21271, 206, 16020, -11, -152, 5853, 5853,
	21271, 5853, -1000, -1000, -1000, 1528, 630, 1553, -232, -1000,
	-53, -1000, 1659, 52, -1000, 1669, -1000, 313, -1000, 21271,
	1380, -1000, 366, 22810, -1000, 21271, 654, -1000, -1000, -1000,
	1857, -1000, 473, -1000, 473, 665, 21271, -1000, -1000, -232,
	1291, 21271, 16894, 16894, 16894, 16894, -1000, 1682, 1679, -1000,
	1692, 1680, 1698, 21271, 16894, 21271, -1000, -1000, -1000, 22069,
	-1000, -1000, -1000, -1000, 1278, 1843, -1000, -1000, -1000, 303,
	1424, 16020, 896, 223, -1000, -1000, -1000, -1000, -1000, 21271,
	21271, 1846, -1000, 1422, 1793, -1000, 645, 645, 622, -1000,
	-1000, 359, -1000, -1000, 286, -1000, -1000, -1000, -1000, -1000,
	1547, -1000, -1000, -1000, 1269, 1360, 654, 5853, -1000, -1000,
	5853, 5853, 755, 5853, 1265, 1306, 1301, -1000, 1253, 1862,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5853,
	5853, 5853, 5853, 5853, 735, 4957, -1000, -1000, -1000, 5853,
	5853, 5853, 5853, 892, 744, -1000, 677, 677, 433, 433,
	433, 433, 433, 692, 692, -1000, -1000, -1000, 3159, 1542,
	6749, 6749, 6749, 184, 2581, 2777, -1000, 5853, 627, -1000,
	5853, 971, -1000, 1245, 1366, 1242, 1217, -1000, -1000, 1033,
	1196, 2078, 1192, 5853, 1414, 1846, -290, 4503, 187, 21271,
	-290, 21271, 21271, 4503, -1000, 21271, 2292, 839, -1000, -1000,
	-1000, 16020, 444, 515, -1000, 14272, 16020, -1000, -1000, 16020,
	122, 1724, -1000, -1000, -113, -88, 654, 654, 357, -1000,
	1761, 1735, 9002, -1000, -66, -1000, -1000, -1000, 232, -1000,
	927, 921, 914, 912, 21271, -1000, -1000, -1000, -1000, -1000,
	510, 510, 510, 178, 1234, 356, 16894, 21271, -1000, 16457,
	1185, -1000, -1000, 1857, 1857, 473, -1000, -4, -44, 1353,
	-1000, 566, 1653, 1658, 1653, -1000, -1000, -1000, -1000, 1676,
	-1000, 1660, -1000, -1000, 1353, -1000, 1528, -1000, -1000, -1000,
	1406, 1178, -1000, -1000, -1000, -1000, 1854, 1845, 17331, -1000,
	-1000, -1000, -1000, -1000, 5853, 1650, 1590, 1544, 973, 1299,
	-1000, -1000, -1000, -1000, 5853, 1489, 1478, 1471, 1434, 1402,
	-1000, 5853, 5853, 1147, 1351, 1346, 1333, 1325, 1296, -1000,
	184, 2581, 2689, -1000, 6749, 6749, 1319, 612, -1000, 5853,
	679, 597, 13398, -1000, 5853, -1000, -1000, -1000, 13398, -1000,
	6749, -1000, 1293, 911, 1854, -1000, 1150, 1412, -1000, -290,
	-1000, -1000, 1373, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1406, -1000, -1000, -1000, -1000, 16020, 1746, 214,
	-1000, -2, 219, -295, -83, 1844, 1838, 21271, 210, 21271,
	1118, 1400, -1000, -1000, -1000, 22718, 300, -1000, 21271, 674,
	329, 197, 329, 673, 1540, -1000, -1000, -66, -1000, 837,
	836, 827, 822, -43, -1000, -1000, -1000, -1000, -1000, 1539,
	13398, -1000, 13835, 910, 21708, 16894, 16457, 1303, -1000, 355,
	-1000, -1000, -1000, -1000, 1857, -1000, -4, -1000, 282, 278,
	27, 1837, 1852, 21271, 5853, -1000, -1000, 5853, 1538, -1000,
	5853, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5853, 5853,
	-1000, -1000, 654, -1000, -1000, -1000, 1114, -1000, 289, 289,
	-29, -1000, -1000, -1000, 1517, -1000, 1530, 1530, 1517, 1517,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1537,
	1536, -1000, 1517, 1529, 1529, 1517, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1533, 1533, 1535, 1533, -1000, 1264, -1000, -1000, -1000,
	-1000, -1000, 1189, 1135, 5853, -1000, -1000, -1000, -1000, -1000,
	-1000, 6749, -1000, -1000, -1000, -1000, 654, 5853, 1112, -1000,
	1517, 1530, -1000, 1517, 1529, 1517, 289, 289, 1110, 1109,
	1105, 1953, -1000, 1103, -1000, -1000, 4503, 1373, -1000, 16020,
	16020, -236, -10, 21271, -297, 909, -1000, 1836, 897, 749,
	-1000, 1528, 22899, 9002, 1386, -1000, -1000, 21271, 21271, -1000,
	21271, 21271, 197, 5853, -1000, -1000, -1000, -1000, -1000, -1000,
	15583, -1000, -1000, -1000, -1000, -1000, 1857, 1303, 355, -1000,
	-1000, 363, -1000, -1000, -1000, -1000, 820, -1000, -1000, -1000,
	896, 1804, -1000, 654, 654, 21271, 654, 654, 1360, -1000,
	-1000, -1000, -1000, -1000, -34, -1000, -1000, -1000, -1000, 819,
	-1000, 818, -1000, -1000, -1000, 894, 894, -1000, -1000, 817,
	-1000, -1000, -1000, 815, -1000, -1000, 811, -1000, -1000, -1000,
	-1000, 1121, -1000, 654, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5853, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -140, -299, 810, -1000, 893, -91, -1000,
	-1000, 1760, 177, 22717, -1000, 510, 510, 362, 510, 510,
	510, 510, 137, 123, 510, 510, 510, 510, 510, 510,
	510, 510, 510, 510, 510, 510, 510, 510, 1527, -1000,
	-1000, 1386, -1000, -1000, 693, 6749, -1000, -1000, 889, 13835,
	438, 351, 1525, -1000, 96, 666, 650, -1000, 21271, -1000,
	1523, 1546, 55, 1520, -1000, 1519, 1518, 21271, 1115, 1285,
	-1000, 1517, 5853, 1852, -1000, 22, -1000, -1000, -1000, 1268,
	-1000, -1000, 1099, 1074, 1256, -1000, 1251, 1058, 1239, 1226,
	-1000, 1064, -126, -93, -1000, 1511, -1000, -1000, 1834, 210,
	-1000, 1833, 22899, -1000, 809, 805, 510, 510, 804, 875,
	874, 873, 510, 510, 803, 871, 22069, 776, 772, 765,
	778, 867, 427, 777, 764, 763, 21271, 1509, 857, -1000,
	-1000, 2581, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 757, 1508, -1000, -1000, 1506, 15583, 91,
	91, 15583, 15583, 15583, 1494, 262, -1000, 15583, 1721, 997,
	1804, -1000, -1000, -1000, -1000, -1000, 865, -1000, -1000, -1000,
	754, -1000, 751, -1000, 201, -100, -93, -1000, 1826, -111,
	1817, 1816, 21271, 749, -1000, 102, -1000, -1000, -1000, 13398,
	13398, -1000, -1000, -1000, -1000, 863, 858, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 145,
	21271, 1223, -1000, 540, 1050, 5853, -227, 15583, 1220, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1216, 1188, 1184, 15583,
	-1000, -1000, -1000, 92, 106, -1000, -1000, 1721, -1000, -1000,
	1018, 1012, 1488, 727, -83, 1814, -1000, 749, 1809, 749,
	749, 1181, -1000, -1000, 76, 153, 149, -1000, 238, -1000,
	-1000, -1000, -1000, -1000, -1000, 155, 1168, -1000, 857, 856,
	-1000, 991, 1657, -1000, -19, 1163, -1000, -1000, -1000, -1000,
	1149, -1000, -1000, 510, 853, 48, -1000, -1000, -1000, -1000,
	-1000, 1772, 12961, -128, -1000, 852, -1000, 749, -1000, -1000,
	-1000, 21271, 74, 712, 6749, 1487, 6749, 1485, 83, 1483,
	-1000, -1000, -1000, -1000, -1000, 262, -1000, -1000, 1651, 1492,
	1861, -1000, -1000, -1000, -1000, 106, 106, 106, 106, -9,
	709, -1000, 850, -1000, 21271, -1000, 1142, -1000, -1000, -1000,
	352, -1000, -1000, -1000, -1000, 1476, 1790, -1000, 992, 21271,
	953, 21271, 1464, 494, 6749, -1000, -1000, 1863, -1000, 1868,
	436, 436, -1000, -1000, -1000, 1152, -1000, 487, -1000, 15146,
	21271, -1000, 176, 81, -1000, 1129, -1000, 1117, 21271, 704,
	908, -1000, -1000, -1000, 691, 98, -1000, 21271, 4055, -1000,
	350, 1108, -1000, 976, 60, -1000, -1000, 1091, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 654, 21271, -1000, 176, 1700,
	-1000, 697, -1000, -1000, -1000, 1649, 173, -1000, -1000, 1649,
	72, -1000, 171, -1000, -1000, 1031, -1000, 974, 1462, -1000,
	72, 22899, 5853, -1000, 22899, 1024, -1000,
}

var yyPgo = [...]int{
	0, 112, 2262, 172, 132, 120, 163, 2261, 1791, 1784,
	2260, 2258, 2257, 2254, 2253, 2252, 2250, 2249, 2246, 2243,
	2242, 2241, 2240, 2237, 2236, 159, 2235, 2234, 2233, 2232,
	2229, 2228, 2227, 2225, 2223, 2220, 2218, 2217, 118, 2216,
	1781, 2215, 2214, 2213, 2209, 2208, 157, 2206, 2205, 2203,
	2201, 2198, 2197, 2182, 2181, 2179, 2177, 2175, 2174, 2173,
	183, 41, 109, 173, 233, 174, 177, 127, 74, 114,
	149, 107, 2172, 2171, 110, 25, 124, 2170, 47, 45,
	34, 169, 96, 51, 70, 92, 2161, 2160, 89, 2159,
	2158, 2157, 2156, 55, 2155, 81, 44, 94, 30, 2154,
	2151, 2150, 85, 2149, 2148, 2147, 2146, 87, 2145, 67,
	64, 2144, 2143, 2142, 2139, 2138, 36, 2136, 49, 2135,
	2131, 2129, 2128, 2127, 2126, 2125, 16, 19, 21, 2124,
	2122, 17, 2, 2121, 147, 83, 84, 99, 2120, 321,
	2119, 2114, 2110, 116, 2109, 123, 2102, 2100, 2099, 2098,
	2097, 9, 2096, 53, 2095, 2094, 2093, 48, 2092, 2091,
	2089, 95, 39, 60, 91, 2088, 2087, 76, 144, 18,
	128, 0, 141, 40, 2085, 2084, 2083, 171, 140, 143,
	2082, 104, 274, 111, 52, 2081, 62, 68, 2080, 2079,
	2075, 105, 73, 11, 2074, 93, 2073, 10, 88, 2072,
	102, 2057, 126, 3, 100, 2055, 146, 2054, 2053, 2052,
	117, 2051, 2050, 72, 122, 2049, 2048, 2047, 28, 2044,
	38, 26, 2043, 135, 155, 2042, 2039, 2037, 139, 115,
	86, 2036, 2035, 77, 2029, 108, 78, 66, 113, 727,
	106, 56, 20, 2026, 148, 2025, 193, 152, 129, 2022,
	2021, 156, 1521, 154, 2020, 145, 12, 2016, 2015, 13,
	2014, 24, 2012, 2011, 2010, 2009, 6, 2001, 2000, 1998,
	1, 4, 1997, 5, 103, 43, 65, 1995, 61, 75,
	1994, 1992, 1990, 1988, 1984, 212, 1983, 1982, 1981, 1980,
	1979, 1978, 1976, 82, 1975, 1973, 1972, 1970, 63, 1968,
	1967, 1966, 1963, 1962, 31, 1961, 1960, 22, 1959, 29,
	1958, 1952, 1951, 14, 125, 1950, 1934, 15, 1928, 1925,
	7, 8, 1924, 1922, 57, 46, 37, 80, 79, 1921,
	23, 1920, 97, 1919, 1917, 130, 1915, 101, 1914, 160,
	150, 204, 1913, 153, 1912, 1911, 1910, 1908, 1906, 1905,
	1904, 787, 1903, 1902, 151, 54, 1901, 1899, 1898, 134,
	1897,
}

//line mysql_sql.y:6847
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 356, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 54, 323, 323, 322, 322, 321,
	321, 320, 320, 320, 319, 319, 319, 318, 318, 317,
	317, 316, 316, 314, 314, 315, 313, 312, 312, 310,
	310, 308, 308, 309, 309, 303, 303, 306, 306, 304,
	304, 304, 304, 307, 302, 302, 302, 301, 301, 53,
	53, 53, 241, 241, 52, 52, 255, 255, 255, 255,
	255, 253, 253, 253, 253, 252, 252, 251, 251, 256,
	256, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 47, 47, 47, 47, 50, 51,
	249, 249, 249, 249, 249, 250, 250, 250, 48, 49,
	49, 240, 240, 245, 245, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 248, 248, 248,
	247, 247, 246, 246, 41, 41, 41, 44, 43, 239,
	239, 239, 239, 239, 239, 239, 239, 42, 42, 42,
	42, 42, 42, 39, 39, 38, 38, 40, 40, 238,
	238, 237, 57, 57, 57, 57, 57, 57, 57, 56,
	56, 59, 59, 58, 46, 46, 46, 46, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 346, 346, 346,
	348, 348, 175, 176, 357, 174, 174, 174, 342, 342,
	343, 344, 345, 345, 345, 55, 7, 37, 37, 285,
	285, 188, 188, 189, 189, 187, 187, 187, 187, 187,
	187, 288, 289, 184, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 29, 29, 36, 358, 358,
	358, 34, 35, 284, 284, 284, 33, 32, 31, 30,
	30, 28, 28, 27, 27, 181, 181, 183, 183, 179,
	359, 359, 261, 261, 182, 182, 26, 26, 180, 180,
	158, 178, 178, 178, 6, 10, 10, 10, 10, 10,
	10, 10, 17, 16, 13, 12, 15, 11, 14, 5,
	5, 5, 5, 8, 8, 9, 69, 69, 97, 97,
	355, 355, 351, 351, 352, 352, 352, 353, 353, 354,
	354, 4, 292, 292, 292, 292, 292, 292, 331, 331,
	331, 332, 87, 87, 82, 82, 293, 293, 204, 333,
	333, 300, 300, 299, 299, 298, 298, 85, 85, 86,
	86, 73, 73, 60, 60, 305, 305, 305, 305, 311,
	311, 282, 282, 123, 123, 154, 154, 155, 155, 61,
	61, 62, 62, 62, 62, 62, 62, 339, 339, 341,
	341, 340, 84, 84, 80, 80, 81, 81, 81, 79,
	79, 78, 77, 77, 76, 75, 75, 75, 64, 64,
	63, 63, 63, 63, 63, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 65, 65, 347,
	347, 347, 286, 286, 286, 291, 291, 136, 136, 137,
	137, 135, 135, 66, 66, 67, 67, 67, 67, 134,
	134, 133, 68, 68, 74, 70, 70, 72, 72, 72,
	72, 144, 144, 143, 143, 143, 143, 90, 90, 142,
	141, 141, 141, 89, 89, 88, 88, 83, 83, 71,
	71, 140, 360, 360, 138, 167, 167, 167, 173, 173,
	166, 166, 166, 166, 166, 177, 172, 172, 168, 168,
	169, 169, 169, 3, 3, 3, 20, 20, 20, 20,
	24, 24, 349, 349, 18, 235, 235, 234, 234, 236,
	236, 236, 236, 230, 230, 231, 231, 231, 231, 232,
	232, 232, 233, 233, 233, 233, 229, 229, 228, 226,
	226, 226, 227, 227, 227, 227, 227, 227, 170, 170,
	19, 223, 223, 224, 224, 224, 225, 225, 217, 217,
	217, 217, 23, 221, 221, 222, 222, 222, 222, 222,
	218, 218, 220, 220, 216, 216, 216, 216, 216, 22,
	215, 215, 213, 213, 211, 211, 212, 212, 210, 210,
	210, 214, 214, 21, 287, 287, 257, 257, 260, 260,
	267, 267, 268, 268, 266, 266, 273, 273, 272, 272,
	271, 271, 270, 270, 269, 269, 264, 264, 263, 263,
	258, 258, 258, 258, 258, 259, 259, 262, 262, 265,
	265, 114, 114, 115, 115, 115, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 329, 329, 330, 117, 117,
	117, 121, 121, 121, 121, 121, 121, 116, 116, 118,
	118, 98, 98, 96, 96, 91, 91, 92, 92, 93,
	93, 94, 94, 95, 95, 95, 95, 95, 95, 243,
	243, 327, 327, 328, 328, 324, 324, 324, 326, 326,
	326, 326, 326, 325, 325, 99, 152, 152, 152, 171,
	171, 171, 151, 151, 151, 113, 113, 112, 112, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 242, 242, 185, 185, 186, 186, 131, 129,
	129, 130, 130, 130, 130, 127, 128, 126, 126, 126,
	126, 126, 125, 125, 124, 124, 124, 219, 219, 122,
	122, 120, 120, 120, 119, 119, 119, 274, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 196, 196, 201, 201, 338, 338, 337, 100,
	100, 100, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 109, 109, 109, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 297,
	297, 297, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 150, 350, 350, 350, 334, 334,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 148,
	148, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 205, 205, 206, 206, 294, 294,
	294, 294, 294, 294, 295, 295, 296, 296, 296, 296,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 194, 145,
	145, 145, 207, 202, 202, 203, 203, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 199, 199, 199,
	199, 199, 191, 191, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 198, 198, 200, 200, 209, 209, 209,
	208, 208, 208, 208, 208, 208, 208, 111, 111, 111,
	111, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 102, 102, 102, 102, 106, 106, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 107, 107, 107, 107, 105, 105, 105, 105, 105,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 104, 153, 153, 275, 275,
	278, 278, 276, 276, 277, 279, 279, 279, 280, 280,
	280, 281, 281, 281, 283, 283, 157, 157, 157, 163,
	163, 156, 156, 164, 164, 165, 165, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159,
}

var yyR2 = [...]int{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 14, 0, 2, 1, 3, 3,
	3, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 0,
	3, 0, 3, 0, 3, 0, 2, 1, 2, 3,
	4, 3, 3, 1, 0, 1, 1, 0, 1, 9,
	4, 7, 0, 3, 7, 4, 1, 3, 3, 3,
	1, 0, 1, 1, 1, 1, 3, 1, 4, 1,
	3, 1, 2, 1, 1, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	2, 1, 1, 1, 3, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 6,
	3, 1, 1, 1, 1, 1, 1, 1, 2, 4,
	6, 1, 4, 1, 3, 3, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 2, 2, 0,
	4, 2, 4, 1, 5, 3, 2, 1, 2, 2,
	4, 4, 5, 2, 1, 1, 2, 9, 7, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 2, 4, 3, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 1, 1, 1, 1, 6, 1, 7, 9, 0,
	2, 0, 1, 1, 2, 2, 2, 1, 4, 2,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 5, 1, 1,
	1, 5, 5, 0, 1, 1, 2, 2, 3, 6,
	7, 4, 4, 7, 8, 0, 2, 0, 2, 2,
	1, 1, 1, 1, 0, 1, 4, 5, 1, 3,
	1, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 6, 4, 4, 4, 3, 1,
	1, 2, 2, 11, 8, 9, 1, 3, 2, 4,
	0, 2, 0, 1, 1, 1, 1, 0, 1, 0,
	1, 4, 2, 1, 5, 4, 4, 2, 0, 1,
	3, 3, 1, 3, 1, 3, 1, 3, 4, 0,
	1, 0, 1, 1, 3, 1, 1, 0, 4, 1,
	3, 2, 1, 0, 8, 0, 4, 7, 4, 0,
	2, 0, 2, 0, 2, 0, 4, 1, 3, 1,
	1, 4, 3, 4, 5, 4, 5, 2, 3, 1,
	3, 6, 0, 3, 0, 1, 2, 4, 4, 0,
	1, 3, 1, 3, 2, 0, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 7, 7, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 2, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 3, 1, 1, 1, 4, 4, 4,
	3, 2, 2, 2, 3, 2, 3, 0, 2, 1,
	1, 2, 2, 0, 1, 2, 4, 1, 3, 1,
	4, 3, 0, 1, 2, 0, 1, 2, 1, 1,
	0, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	8, 11, 0, 1, 6, 0, 2, 1, 2, 2,
	2, 2, 2, 0, 1, 2, 2, 2, 2, 1,
	3, 2, 2, 2, 2, 2, 1, 3, 2, 1,
	3, 2, 0, 3, 3, 5, 5, 4, 1, 1,
	4, 1, 3, 1, 3, 2, 1, 1, 0, 1,
	1, 1, 11, 0, 2, 3, 2, 3, 1, 1,
	1, 3, 3, 4, 0, 2, 2, 2, 2, 5,
	1, 1, 0, 3, 0, 1, 1, 2, 4, 4,
	4, 0, 1, 10, 0, 1, 0, 6, 0, 4,
	0, 3, 1, 3, 4, 5, 0, 3, 1, 3,
	2, 3, 1, 2, 0, 6, 0, 2, 0, 2,
	4, 5, 4, 5, 1, 6, 5, 0, 3, 0,
	1, 0, 1, 1, 3, 2, 3, 3, 4, 4,
	3, 3, 3, 3, 4, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 5, 4, 1, 3, 3, 0, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 0, 1, 1, 3, 1,
	1, 2, 1, 7, 7, 7, 7, 8, 5, 0,
	1, 0, 1, 1, 1, 1, 3, 3, 1, 1,
	1, 1, 1, 0, 1, 3, 1, 3, 5, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 2, 1,
	2, 2, 1, 1, 2, 2, 2, 2, 2, 1,
	5, 6, 1, 2, 0, 1, 1, 2, 5, 0,
	1, 1, 1, 2, 2, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 2, 2, 2, 0, 3, 0,
	3, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 3, 5, 2, 2, 2, 2,
	1, 1, 2, 5, 6, 6, 6, 1, 1, 1,
	1, 1, 0, 2, 0, 1, 1, 2, 4, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 2, 2,
	2, 0, 1, 1, 5, 4, 4, 5, 5, 5,
	5, 4, 5, 5, 5, 5, 5, 5, 5, 1,
	1, 1, 4, 4, 6, 8, 6, 4, 5, 5,
	4, 6, 6, 7, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 4, 2, 3, 2, 4, 6, 2, 2, 4,
	6, 4, 2, 2, 0, 1, 2, 3, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 3, 0, 1, 1, 3, 3, 3, 3,
	3, 2, 3, 4, 3, 4, 1, 3, 4, 3,
	4, 1, 1, 1, 3, 4, 4, 5, 3, 4,
	5, 6, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 1, 1, 3, 0, 1,
	0, 3, 0, 3, 3, 0, 3, 5, 0, 3,
	5, 0, 1, 1, 0, 1, 1, 2, 2, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -356, -2, -1, -3, -4, -5, -6, -45, -56,
	-58, -59, -25, -7, -55, -38, -39, -41, -47, -52,
	-53, -54, -61, -20, -19, -18, 12, -8, -9, -339,
	-10, -174, -175, -176, -357, -26, -27, -28, -30, -31,
	-32, -33, -34, -35, -36, -29, -37, 195, -40, 53,
	-42, -43, -44, -48, -49, -50, -51, 305, 311, 348,
	-62, -64, -21, -22, -23, -24, 191, 14, 420, -11,
	-14, -12, -15, -13, -16, -17, 213, 212, 32, 272,
	273, 309, 211, 192, 13, 125, 126, 128, 129, 25,
	-63, 58, 193, -65, 10, 466, -73, 33, -96, -171,
	62, -159, -162, 423, 424, 425, 426, 427, 428, 429,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 457, 458, 417,
	230, 254, 257, 264, 125, 144, 138, 166, 158, 133,
	234, 235, 69, 128, 377, 79, 362, 347, 131, 249,
	251, 253, 256, 236, 154, 149, 248, 232, 147, 237,
	34, 238, 171, 239, 240, 422, 358, 287, 364, 261,
	345, 148, 359, 252, 361, 172, 176, 369, 311, 142,
	143, 366, 371, 170, 210, 37, 419, 222, 372, 174,
	169, 165, 380, 265, 263, 168, 141, 164, 233, 42,
	178, 177, 179, 341, 342, 343, 344, 241, 242, 299,
	368, 161, 150, 291, 134, 22, 375, 217, 363, 312,
	243, 258, 266, 173, 175, 224, 229, 421, 228, 262,
	373, 146, 221, 250, 216, 376, 135, 305, 314, 244,
	129, 255, 370, 379, 41, 327, 140, 132, 207, 126,
	226, 231, 245, 246, 247, 268, 267, 259, 162, 223,
	167, 139, 163, 127, 225, 378, 328, 465, 289, 330,
	160, 157, 227, 200, 374, 365, 130, 334, 329, 155,
	269, 462, 463, 464, 300, 286, 270, 271, 153, 214,
	-40, -9, -8, -63, -64, -178, 23, 345, -46, 346,
	195, 58, -171, -5, -4, -38, -61, -177, -171, 272,
	-177, 198, -171, -252, -223, -251, -224, -254, -225, -170,
	26, 192, 191, 225, 14, 193, 309, 199, 12, 10,
	310, 211, 13, 311, 313, 314, 317, 318, 319, 36,
	322, 323, 62, 65, -171, -252, -223, 229, 236, -78,
	-79, -139, 19, 6, 7, 8, 9, -287, 330, 228,
	-217, -215, 320, 208, 207, 80, 382, 197, -351, -352,
	188, 189, 190, -341, 414, -340, -171, 415, -157, -358,
	-284, 365, 364, -182, 363, 356, 367, 358, 191, 79,
	159, 156, 199, 366, 37, 369, 370, 359, 330, -351,
	130, 127, -239, 85, 135, 134, -239, 228, 35, -245,
	340, -244, -246, 369, 370, 380, 63, 64, 368, -157,
	-171, 79, -79, -139, -78, -62, -64, -339, 330, 228,
	199, 198, 200, 382, 272, -286, -347, 26, -291, 185,
	186, 187, 27, 28, -1, -85, 220, -96, 124, -79,
	-78, -79, -151, -171, 347, 94, -46, -46, 346, -342,
	-343, -344, -346, 195, 346, 345, 124, 15, -177, 56,
	-96, 55, 59, 15, 59, 58, 467, 63, 307, 321,
	330, 308, 320, 200, 228, 321, 228, 356, 200, 312,
	315, 316, 357, 55, 201, 55, -301, 380, -60, 33,
	-81, 21, -65, -64, 20, 26, 27, 26, 27, 26,
	27, 26, 27, -349, 198, 414, -213, 203, -213, 199,
	-213, -353, 137, 59, -341, -84, 58, -181, 102, -181,
	-359, 15, 104, 227, 226, 360, 357, -261, 361, 362,
	-182, -181, -181, -182, 198, 382, 25, 25, -285, 203,
	-354, 202, 373, 420, 133, 134, 135, -249, 26, 35,
	339, -223, 228, 59, 94, 23, -247, 94, 105, -246,
	-246, -246, -247, -247, -116, 35, -170, 121, 65, -116,
	35, 124, -80, -81, -65, -64, 60, 60, -285, -285,
	-285, -285, -285, -285, -177, -66, -67, 112, -197, -171,
	86, -199, 62, -192, 423, 424, 425, 426, 427, 428,
	429, 430, 431, 432, 433, 434, 435, 436, 437, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 457, 458, 79,
	345, 299, 330, 155, 300, 153, 214, -193, -195, -320,
	-314, -190, 58, 110, 111, 118, 87, -194, -274, 30,
	89, 390, -146, -147, -148, -149, -150, -315, -313, 65,
	70, 73, 76, 77, 75, 74, 151, 72, 66, 123,
	-64, -334, -160, -290, -296, 197, -294, 156, 152, 12,
	116, 340, 121, -297, 459, 64, 63, 293, 294, 295,
	382, 290, 296, 203, 47, 297, 298, 301, 389, 302,
	48, 303, 292, 218, 304, 393, 392, 394, 386, 383,
	381, 384, 385, 387, 388, -66, -292, 38, -61, 58,
	25, 58, -171, -80, -60, -81, 124, 70, 65, -46,
	60, 59, -345, 76, 77, -348, 170, 162, -171, -57,
	65, -3, -4, -5, -6, -25, -38, -61, -316, -314,
	58, -253, 198, 306, 224, -251, 225, 311, 314, -229,
	-228, -226, -170, -224, -256, -151, -170, 357, -253, -229,
	-228, 349, 461, -60, -197, -171, -77, -76, -197, 200,
	-213, -229, 86, -223, -169, 62, 63, 64, -171, -354,
	-340, 29, -83, -171, -135, 16, -195, -135, -96, -181,
	-181, -183, -359, -179, -359, 357, -135, -135, -261, -180,
	-171, -213, -229, 330, 30, -70, -68, -71, -72, -74,
	-138, -140, -96, 58, 374, 375, 131, 134, 133, 7,
	-250, 339, 26, -223, -244, -240, 65, 340, -228, -248,
	55, 121, -298, -197, 35, -247, -247, -247, -248, -248,
	120, -171, -60, -229, -223, -171, -98, -96, -98, -172,
	-169, -162, -134, 59, -133, 15, -166, 85, 82, 83,
	84, -171, 29, 65, 124, -197, 101, -208, 94, 95,
	96, 97, 98, 99, 100, 58, 58, 58, 58, 58,
	58, 58, 58, -206, 58, 58, 58, 58, 58, 58,
	58, -206, 58, 58, 58, 58, 58, 65, 65, 107,
	106, 117, 110, 111, 112, 113, 114, 115, 116, 108,
	109, 104, 86, 102, 103, 88, -64, -197, -203, -195,
	-195, -195, -195, -274, -201, -197, 58, -197, 58, 58,
	58, -295, 58, 58, -205, -206, 58, 65, 58, 58,
	58, -195, 58, 58, -134, -293, -204, -333, 460, -87,
	60, -82, -171, -331, -332, -82, -86, -171, -60, -60,
	-164, -165, -156, -161, -168, -169, -162, 288, 196, 26,
	85, 29, 31, 293, 325, 88, 121, 20, 89, 156,
	120, 295, 390, 294, 191, 51, 392, 394, 393, 383,
	381, 332, 336, 338, 335, 382, 356, 35, 14, 32,
	212, 27, 28, 114, 193, 92, 93, 215, 30, 213,
	77, 23, 54, 15, 17, 18, 296, 331, 203, 202,
	104, 349, 199, 49, 12, 123, 33, 101, 333, 45,
	81, 47, 102, 21, 384, 385, 36, 348, 416, 219,
	116, 297, 298, 52, 86, 339, 75, 55, 82, 19,
	50, 103, 194, 389, 48, 337, 301, 303, 414, 302,
	197, 367, 10, 292, 391, 25, 211, 46, 198, 357,
	91, 201, 76, 218, 152, 6, 80, 13, 53, 56,
	386, 387, 388, 38, 90, 16, 304, 420, 340, 350,
	351, 352, 353, 354, 355, 180, 181, 182, 183, 184,
	260, 206, 204, 208, 209, 460, 461, 185, 186, 283,
	285, 159, 188, 189, 190, 220, 137, 7, 23, -46,
	-343, 124, 59, -83, -255, 112, 62, 59, -227, 331,
	467, 63, 60, 59, -255, 201, 65, 65, 59, 22,
	124, 59, -75, 31, 32, -96, 203, -96, -230, -231,
	337, 30, -216, 56, -211, -212, -210, -214, 35, 15,
	-69, -97, -171, 58, 60, 59, -197, -135, -135, -135,
	-181, -172, -183, -178, -183, -179, 124, -158, -171, -230,
	58, 25, -141, -142, -143, -144, 45, 49, 51, 46,
	47, 48, 52, 25, 59, -360, 29, -167, -173, 29,
	-168, 65, -169, -162, -62, -64, 132, 135, 135, 134,
	-223, 201, 58, 94, -248, -248, -248, 35, -170, 55,
	59, -135, -67, -68, -70, -197, -197, -197, -197, -171,
	65, -171, 112, -191, 86, 286, 75, 76, 77, -192,
	-209, 26, 270, 271, -202, -203, -197, -145, 27, 26,
	-145, -145, -197, -145, 112, -203, -203, 60, 70, -335,
	-336, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	404, 405, 297, 292, 298, 296, 290, 304, 299, 300,
	155, 412, 413, 406, 407, 408, 409, 410, 411, -145,
	-145, -145, -145, -145, -197, -350, 284, 283, 285, -145,
	-145, -145, -145, -193, -193, -193, -193, -193, -193, -193,
	-193, -193, -193, -193, -193, -200, -207, -274, 58, 104,
	102, 103, 88, -195, -193, -193, 60, 59, -338, -337,
	90, -197, -335, -202, -197, -202, -202, 60, 60, -203,
	-202, -193, -202, -145, 65, -135, 59, 58, 60, 59,
	38, 124, 59, 94, 60, 59, 124, 347, -171, -314,
	60, 15, 124, 124, -228, 20, 420, -170, -151, 201,
	-229, -302, 202, 389, -305, 361, -197, -197, -171, -76,
	-84, 86, 58, -235, 420, 339, 338, 334, -232, -233,
	333, 335, 332, 336, 55, 278, 279, 280, 281, -210,
	-157, 120, 239, -96, -69, -171, 15, 59, -355, 124,
	-1, -171, -135, -181, -181, -183, -171, -235, 60, -238,
	-237, -151, -71, -71, -71, -71, 45, 45, 45, 50,
	45, 50, 45, -143, -238, -74, -171, -173, 60, 135,
	-229, -184, 65, -240, -96, -96, -137, 17, 124, -191,
	286, 75, -274, 60, 59, -197, -197, -197, 29, -203,
	60, 60, 60, 60, 15, -197, -197, -197, -197, -197,
	60, 15, 15, -197, -197, -197, -197, -197, -203, -200,
	-195, -193, -193, -198, 215, 85, -197, -196, -337, 92,
	-197, 59, 56, 60, 15, 60, 60, 60, 56, 60,
	59, 60, -197, 59, -137, -204, -300, -299, -298, 38,
	-61, -82, -293, -171, -332, -298, -171, -164, -161, -169,
	-162, 70, -229, 112, 112, 62, -170, 340, -170, -229,
	-241, 420, 33, -311, 355, 350, 352, 124, 29, 30,
	-91, -92, -93, -99, -94, -151, -186, -95, 206, 204,
	208, -328, 80, 209, 260, 81, 199, -234, -236, 341,
	342, 343, 344, 85, -233, 65, 65, 65, 65, -96,
	-163, 94, -163, -163, -85, 56, 124, -68, -97, -171,
	112, 60, -135, -135, -181, -188, -189, -187, 288, -288,
	340, 331, -135, 59, 94, -89, -88, 55, 56, -90,
	55, -88, 45, 45, -135, -84, 60, -136, 18, 20,
	-171, 112, -197, 60, 60, 60, -100, -102, 327, 328,
	-106, -103, -105, -104, -108, -107, 156, 157, 121, 160,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	25, 214, 152, 153, 154, 155, 172, 138, 158, 418,
	180, 139, 181, 140, 182, 141, 183, 142, 143, 184,
	144, 147, 148, 149, 146, 60, -197, 60, 60, 60,
	60, 60, -197, -197, 15, 60, 60, 60, 60, 60,
	-198, 85, -195, -192, 60, 93, -197, 91, -101, -107,
	121, 156, 214, 155, 154, 152, 327, 328, -116, -197,
	-116, -193, 60, 65, -136, 60, 59, -293, -170, 20,
	29, -230, 311, 198, -282, 462, -309, 350, 20, 20,
	-61, -96, 60, 59, -102, -95, -171, 81, -327, -328,
	-213, -327, 81, 58, -236, 70, 70, 70, 70, -233,
	58, -116, -118, -170, 121, 65, -167, -68, -171, -135,
	-355, 124, -135, -187, 289, 36, 123, 291, 35, 287,
	20, -79, -237, -197, -197, 58, -197, -197, -203, 60,
	-109, 143, 142, -109, -281, 328, 327, -275, -277, 58,
	-276, 58, -276, -275, -275, 58, 58, -275, -278, 58,
	-278, -275, -279, 58, -279, -280, 58, -279, 60, 60,
	60, -197, -192, -197, 60, -275, -276, -275, -278, -275,
	-109, -109, 60, 60, 23, 60, 60, 60, -298, -170,
	-170, -241, 312, -96, -123, 463, 65, 20, 65, -307,
	65, -84, -114, -115, -132, 325, 230, -214, 234, 69,
	235, 347, 236, 199, 238, 239, 240, 210, 241, 242,
	243, 340, 244, 245, 246, 247, 308, 6, 274, -93,
	-113, -112, -110, 75, 86, 35, 325, -111, 69, 120,
	253, 231, 254, -131, -185, 204, 80, 81, 313, -186,
	-324, -325, -171, -325, -171, -324, -324, -213, -197, -218,
	-220, -151, 58, -135, -135, 70, -289, -184, -80, -83,
	-283, 329, 70, 70, -153, 65, -153, 70, 70, 70,
	60, -197, -303, -261, -154, 464, 70, 65, 352, 29,
	-257, 220, 59, -132, -163, -163, -157, 120, -163, -163,
	-163, -163, 237, 237, -163, -163, -163, -163, -163, -163,
	-163, -163, -163, -163, -163, -163, -163, -163, 58, -110,
	75, -193, 65, -118, -119, 35, 252, 248, -120, 35,
	232, 233, -122, 58, 260, 81, 81, -96, 58, 56,
	269, 58, 58, 58, -325, 60, 60, 59, -275, -197,
	-79, 290, 60, 60, 60, 60, 59, 60, 60, 60,
	59, 60, 59, 60, -310, 355, -306, -304, 350, 351,
	352, 353, 58, 20, -61, 20, -132, 70, 70, -163,
	-163, 70, 65, 65, 65, -163, -163, 70, 65, -173,
	70, 70, 70, 70, 35, 65, -121, 35, 248, 252,
	249, 250, 251, 70, 35, 70, 35, 70, 35, -171,
	58, -329, -330, 65, 70, 58, -219, 58, -218, -326,
	278, 279, 280, 282, 281, -326, -218, -218, -218, 58,
	-243, -242, 261, 86, -221, -220, -75, 60, -80, 65,
	70, 70, -312, 202, -308, 354, -304, 20, 352, 20,
	20, -155, -171, -307, -258, 262, 263, -259, -265, 265,
	-116, -116, 65, 65, -117, 231, -98, 60, 59, 94,
	60, -197, -125, -124, 416, -218, 60, 60, 60, 60,
	-218, 261, -222, 210, 69, 420, 276, 277, -75, 60,
	60, -319, 58, 70, -309, 20, -307, 20, -307, -307,
	60, 59, -263, 266, 58, -261, 58, -261, 81, 279,
	232, 233, 60, -330, 65, 60, -129, -130, -127, -128,
	55, 359, 258, 259, 60, -221, -221, -221, -221, 60,
	-163, 65, 275, -323, 25, 60, -318, -317, -152, -313,
	-171, 355, 65, -307, -171, -260, 267, 70, -193, 58,
	-193, 58, -262, 264, 58, -242, -128, 55, -127, 55,
	14, 13, -131, 70, -169, -322, -321, -320, 60, 59,
	124, -267, 58, 20, 60, -256, 60, -256, 58, 94,
	-193, -126, 255, 256, 25, 134, -126, 59, 94, -317,
	-171, -268, -266, 220, -259, 60, 60, -256, 70, 60,
	75, 35, 257, -321, 35, -197, 124, 60, 59, 62,
	-264, 268, 60, -171, -266, -269, 38, 70, -273, -270,
	58, -132, 222, -273, -132, -272, -271, 267, 223, 60,
	59, 62, 58, -271, -270, -203, 60,
}

var yyDef = [...]int{
	23, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 513, 514, 515, 0, 319, 320, 0,
	304, 0, 0, 0, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 236, 0, 185, 184,
	164, 165, 166, 124, 125, 126, 127, 0, 0, 0,
	389, -2, 516, 517, 518, 519, -2, 332, 0, 305,
	306, 307, 308, 309, 310, 311, 225, 226, 227, 222,
	223, 224, -2, 0, 332, 177, 0, 169, 169, 0,
	409, 0, 0, 420, 442, 23, 367, 0, 372, 693,
	729, 730, 731, 1429, 1430, 1431, 1432, 1433, 1434, 1435,
	1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445,
	1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
	1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1258,
	1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
	1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
	1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
	1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298,
	1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
	186, 321, 322, 409, 409, 208, 0, 1299, 212, 0,
	0, 0, 301, 204, 205, 206, 207, 0, 505, 0,
	201, 0, 183, 0, 0, 85, 561, 87, 563, 0,
	91, 93, 94, -2, 98, 99, 100, 101, 102, 103,
	104, 0, 106, 1307, 108, 1367, 111, 112, 113, 0,
	122, 123, -2, -2, 558, 0, 0, 1355, 67, -2,
	0, 0, 0, 425, 428, 431, 434, 522, 592, 592,
	0, 592, 605, 569, 570, 571, 590, 591, 337, 333,
	334, 335, 336, 397, 0, 399, 402, 285, 285, 0,
	0, 276, 277, 0, 294, 285, 285, 294, 0, 1096,
	0, 0, 268, 269, 270, 274, 275, 295, 239, 339,
	178, 179, 168, 0, 173, 0, 167, 1357, 0, 138,
	0, 143, 0, 1306, 1371, 1321, 0, 0, 1339, 0,
	162, -2, 404, 0, 410, 0, 409, 0, 239, 239,
	239, 239, 239, 239, 0, 0, 0, 443, 444, 439,
	440, 441, 445, 446, 3, 0, 0, 371, 0, 404,
	-2, 0, 209, 732, 0, 0, 213, 214, 0, 0,
	228, 0, 231, 217, 218, 219, 0, 0, 203, 0,
	0, 81, 0, 0, 0, 0, 0, 565, 92, 121,
	95, 96, 0, 116, 118, 120, 119, 105, 117, 107,
	109, 110, 115, 81, 0, 0, 0, 68, 392, 0,
	373, 0, 422, 424, 0, 426, 427, 429, 430, 432,
	433, 435, 436, 0, 592, 523, 0, 0, 0, 0,
	0, 339, 338, 0, 398, 0, 0, 451, 0, 451,
	0, 290, 291, 285, 285, 278, 287, 0, 292, 293,
	0, 451, 451, 0, 0, 592, 1097, 1098, 0, 0,
	0, 340, 0, 0, 171, 0, 176, 128, 133, 131,
	132, 134, 0, 0, 0, 0, 0, 160, 161, 0,
	0, 0, 0, 0, 151, 154, 687, 688, 559, 155,
	156, 0, 373, 405, 421, 423, 418, 419, 0, 0,
	0, 0, 0, 0, 318, 459, 453, 455, 500, 31,
	0, 986, 729, 991, -2, 1430, 1431, 1432, 1433, 1434,
	1435, 1436, -2, 1438, -2, -2, 1441, 1442, 1443, 1445,
	-2, -2, -2, -2, -2, -2, 1452, -2, -2, -2,
	1456, 1457, -2, -2, 1460, 1461, 1462, 1463, 1464, -2,
	-2, -2, -2, -2, -2, -2, -2, 1002, 800, 801,
	802, 803, 0, 0, 0, 0, 0, 810, 811, 0,
	824, 0, 817, 818, 819, 820, 821, 43, 44, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 949,
	787, 0, 0, 0, 934, 0, 924, 0, 962, 0,
	0, 0, 0, 0, 0, 45, 46, 940, 942, 943,
	945, 946, 947, 948, 951, 952, 953, 956, 957, 958,
	959, 960, 961, 964, 966, 936, 937, 938, 939, 928,
	929, 930, 931, 932, 933, 459, 341, 359, 343, 0,
	348, 0, 694, 373, 395, 373, 0, 210, 0, 215,
	0, 0, 230, 232, 233, 234, 220, 221, 302, 199,
	200, 192, 193, 194, 195, 196, 197, 198, 202, 41,
	0, 0, 82, 83, 84, 86, 97, 0, 0, 75,
	546, 552, 549, 562, 0, 89, 564, 114, 0, 70,
	0, 0, 0, 393, 406, 31, 411, 412, 415, 0,
	0, 533, 0, 560, 584, 510, 511, 512, -2, 0,
	400, 0, 0, 487, 265, 0, 286, 266, 451, 451,
	451, 285, 0, 287, 0, 287, 281, 282, 0, 296,
	298, 0, 533, 1398, 240, 464, 0, 465, 466, 462,
	489, 492, 495, 0, 180, 181, 0, 0, 175, 0,
	0, 135, 136, 137, 144, 139, 141, 0, 0, 145,
	157, 158, 159, 365, 366, 0, 0, 0, 149, 150,
	0, 163, 391, 312, 313, 0, 315, 691, 316, 317,
	506, 507, 451, 0, 460, 0, 456, 0, 0, 0,
	0, 501, 0, 503, 0, 981, 0, 0, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 973, 969, 969, 969, 0,
	969, 0, 0, 909, 0, 0, 969, 969, 969, 969,
	969, 910, 0, 969, 969, 969, 969, 923, 917, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 975, 0, 806,
	807, 808, 809, 812, 0, 825, 0, 0, 973, 973,
	973, 912, 0, 0, 914, 925, 0, 918, 973, 0,
	973, 922, 969, 0, 451, 342, 356, 0, 360, 0,
	0, 352, 354, 347, 349, 0, 0, 369, 394, 396,
	733, 0, 1103, -2, 1105, -2, -2, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
	1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
	1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
	1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
	1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
	1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
	1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
	1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
	1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
	1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219,
	1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
	1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
	1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 0, 216,
	229, 0, 0, 0, 0, 76, 80, 0, 548, 0,
	0, 551, 88, 0, 0, 0, 64, 375, 0, 0,
	0, 0, 414, 416, 417, 402, 0, 0, 525, 534,
	0, 593, 0, 0, 589, -2, 596, 0, 602, 0,
	0, 326, 330, 23, 403, 0, 452, 267, 271, 272,
	451, 288, 285, 289, 285, 287, 0, 297, 300, 525,
	0, 0, 0, 0, 0, 0, 480, 0, 0, 479,
	0, 0, 0, 0, 0, 0, 493, 494, 496, 0,
	498, 499, 508, 509, 0, 409, 182, 170, 172, 0,
	130, 0, 0, 0, 146, 147, 148, 152, 153, 0,
	0, 449, 454, 461, 464, 977, 978, 979, 980, 502,
	504, 32, 457, 982, 0, 984, 987, 992, 993, 989,
	0, 1007, -2, -2, 0, 974, 975, 0, 970, 971,
	0, 0, 0, 0, 0, 0, 0, 926, 0, 0,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 0,
	0, 0, 0, 0, 0, 0, 875, 876, 877, 0,
	0, 0, 0, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 994, 1005, 1006, 0, 0,
	0, 0, 0, 1003, 998, 0, 804, 0, 822, 826,
	0, 0, 968, 0, 975, 0, 0, 935, 913, 0,
	0, 0, 0, 0, 0, 449, 359, 361, 0, 0,
	359, 0, 0, 0, 368, 0, 0, 0, 303, 42,
	235, 0, 0, 0, 547, 0, 0, 550, 90, 0,
	72, 0, 65, 66, 379, 0, 407, 408, 32, 413,
	0, 0, 695, 524, 0, 535, 536, 537, 538, 539,
	0, 0, 0, 0, 0, 585, 586, 587, 588, 597,
	1099, 1099, 1099, 367, 0, -2, 0, 0, 328, 0,
	0, 488, 279, 451, 451, 285, 299, 241, 0, 451,
	189, 0, 483, 477, 0, 470, 481, 482, 473, 0,
	475, 0, 471, 472, 451, 463, 402, 497, 491, 174,
	129, 0, 253, 140, 314, 692, 447, 0, 0, 983,
	985, 988, 990, 862, 0, 0, 0, 0, 0, 0,
	851, 845, 846, 927, 0, 0, 0, 0, 0, 0,
	870, 0, 0, 0, 0, 0, 0, 0, 0, 995,
	1003, 999, 0, 996, 0, 0, 976, 0, 827, 0,
	0, 0, 0, 863, 0, 867, 911, 915, 0, 919,
	0, 921, 0, 0, 447, 357, 0, 362, 363, 359,
	346, 353, 345, 355, 350, 351, 370, 734, 1104, 1101,
	1102, 211, 74, 77, 78, 79, 553, 0, 554, 533,
	71, 0, 0, 381, 53, 0, 0, 0, 0, 0,
	0, 696, 697, 699, 700, 0, 0, 702, 756, 0,
	711, 592, 711, 0, 0, 713, 714, 526, 527, 0,
	0, 0, 0, 0, 541, 542, 543, 544, 545, 0,
	0, 1100, 0, 0, 495, 0, 0, 451, 327, 330,
	331, 401, 283, 280, 451, 237, 242, 243, 0, 247,
	0, 0, 409, 0, 0, 467, 484, 0, 0, 468,
	0, 469, 474, 476, 188, 490, 142, 437, 0, 0,
	33, 458, 976, 847, 848, 849, 0, 829, 841, 841,
	1091, 1032, 1033, 1034, 1078, 1036, 1082, 1082, 1078, 1078,
	1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 0,
	0, 1055, 1078, 1080, 1080, 1078, 1075, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1085, 1085, 1088, 1085, 850, 0, 869, 852, 853,
	856, 854, 0, 0, 0, 868, 857, 858, 844, 972,
	997, 0, 1004, 1000, 805, 813, 823, 0, 0, 832,
	1078, 1082, 835, 1078, 1080, 1078, 841, 841, 0, 0,
	0, 0, 855, 0, 438, 358, 0, 344, 557, 0,
	0, 72, 0, 0, 383, 0, 380, 0, 0, 0,
	520, 402, -2, 0, -2, 701, 757, 723, 723, 712,
	723, 723, 592, 0, 528, 529, 530, 531, 532, 540,
	0, 598, 599, 689, 690, 600, 451, 451, -2, 324,
	329, 0, 284, 244, 245, 246, 0, 249, 250, 252,
	0, 404, 190, 191, 485, 0, 478, 448, 450, 814,
	830, 842, 843, 831, 1094, 1092, 1093, 1035, 1079, 0,
	1060, 0, 1061, 1062, 1063, 0, 0, 1056, 1057, 0,
	1058, 1059, 1051, 0, 1052, 1053, 0, 1054, 866, 871,
	872, 0, 1001, 828, 815, 833, 834, 836, 837, 838,
	839, 840, 816, 864, 0, 916, 920, 874, 364, 555,
	556, 69, 73, 55, 385, 0, 382, 0, 376, 378,
	63, 0, 606, -2, 643, 1099, 1099, 0, 1099, 1099,
	1099, 1099, 0, 0, 1099, 1099, 1099, 1099, 1099, 1099,
	1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 0, 698,
	725, -2, 737, 739, 0, 0, 742, 743, 0, 0,
	0, 0, 779, 749, 0, 0, 1019, 1020, 0, 755,
	0, 715, 724, 0, 724, 0, 0, 723, 0, 0,
	580, 1078, 0, 409, 325, 0, 251, 238, 187, 0,
	1031, 1095, 0, 0, 0, 1076, 0, 0, 0, 0,
	873, 0, 49, 0, 374, 0, 384, 54, 0, 0,
	603, 0, 601, 645, 0, 0, 1099, 1099, 0, 0,
	0, 0, 1099, 1099, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 738,
	740, 741, 744, 745, 746, 784, 785, 786, 747, 781,
	782, 783, 748, 0, 0, 1017, 1018, 777, 0, 0,
	0, 0, 0, 0, 0, 709, 573, 0, 415, 0,
	404, 248, 486, 1084, 1083, 1073, 0, 1074, 1081, 1086,
	0, 1089, 0, 865, 47, 51, 56, 57, 0, 0,
	0, 0, 0, 0, 521, 639, 644, 646, 647, 0,
	0, 650, 651, 652, 653, 0, 0, 656, 657, 658,
	659, 660, 661, 662, 663, 664, 665, 681, 682, 683,
	684, 685, 686, 666, 667, 668, 669, 670, 671, 678,
	0, 0, 675, 0, 0, 0, 772, 0, 0, 716,
	718, 719, 720, 721, 722, 717, 0, 0, 0, 0,
	708, 710, 752, 0, 572, 581, 582, 415, 323, 1077,
	0, 0, 34, 0, 53, 0, 58, 0, 0, 0,
	0, 0, 387, 377, 628, 0, 0, 634, 0, 640,
	648, 649, 654, 655, 672, 0, 0, 674, 0, 0,
	780, 0, 759, 773, 0, 0, 573, 573, 573, 573,
	0, 753, 574, 1099, 0, 0, 578, 579, 583, 1087,
	1090, 25, 0, 0, 50, 0, 59, 0, 61, 62,
	386, 0, 608, 0, 0, 0, 0, 0, 637, 0,
	679, 680, 673, 676, 677, 750, 758, 760, 761, 762,
	0, 774, 775, 776, 778, 703, 704, 705, 706, 0,
	0, 576, 0, 24, 0, 35, 0, 37, 39, 40,
	726, 48, 52, 60, 388, 610, 0, 629, 0, 0,
	0, 0, 0, 0, 0, 751, 763, 0, 764, 0,
	0, 0, 707, 575, 577, 26, 27, 0, 36, 0,
	0, 607, 0, 639, 630, 0, 632, 0, 0, 0,
	0, 765, 767, 768, 0, 0, 766, 0, 0, 38,
	727, 0, 612, 0, 626, 631, 633, 0, 638, 636,
	769, 771, 770, 28, 29, 30, 0, 611, 0, 624,
	609, 0, 635, 728, 613, -2, 0, 627, 614, -2,
	0, 622, 0, 615, 623, 0, 618, 0, 0, 617,
	0, -2, 0, 619, -2, 0, 625,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 87, 3, 3, 3, 115, 107, 3,
	58, 60, 112, 110, 59, 111, 124, 113, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 466,
	95, 94, 96, 3, 467, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 117, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 106, 3, 118,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 88, 89, 90, 91, 92, 93, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 108, 109, 114,
	116, 119, 120, 121, 122, 123, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:518
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:524
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:550
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:554
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 24:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:560
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				File:              yyDollar[5].str,
				DuplicateHandling: yyDollar[6].duplicateKeyUnion(),
				Table:             yyDollar[9].tableNameUnion(),
				Fields:            yyDollar[10].fieldsUnion(),
				Lines:             yyDollar[11].linesUnion(),
				IgnoredLines:      uint64(yyDollar[12].int64ValUnion()),
				ColumnList:        yyDollar[13].loadColumnsUnion(),
				Assignments:       yyDollar[14].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:575
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:579
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:585
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:589
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:595
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:602
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:611
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:615
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:619
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:624
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:628
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:632
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:638
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:647
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:658
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:662
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:668
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:672
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:678
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:682
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:688
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:712
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//        	yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:731
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:735
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:740
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:744
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:752
		{
			yyVAL.str = ""
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:756
		{
			yyVAL.str = yyDollar[3].str
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:761
		{
			yyVAL.str = "\n"
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:765
		{
			yyVAL.str = yyDollar[3].str
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:770
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:774
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:798
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:802
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:808
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:814
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:832
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:849
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:872
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:876
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:880
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:885
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:889
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:895
		{
			yyLOCAL = &tree.Grant{
				Privileges:  yyDollar[2].privilegesUnion(),
				ObjType:     yyDollar[4].objectTypeUnion(),
				Level:       yyDollar[5].privilegeLevelUnion(),
				Users:       yyDollar[7].usersUnion(),
				GrantOption: yyDollar[9].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:905
		{
			yyLOCAL = &tree.Grant{
				IsGrantRole:      true,
				RolesInGrantRole: yyDollar[2].rolesUnion(),
				Users:            yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:913
		{
			yyLOCAL = &tree.Grant{
				IsProxy:     true,
				ProxyUser:   yyDollar[4].userUnion(),
				Users:       yyDollar[6].usersUnion(),
				GrantOption: yyDollar[7].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:923
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:927
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:937
		{
			yyLOCAL = &tree.Revoke{
				Privileges: yyDollar[2].privilegesUnion(),
				ObjType:    yyDollar[4].objectTypeUnion(),
				Level:      yyDollar[5].privilegeLevelUnion(),
				Users:      yyDollar[7].usersUnion(),
				Roles:      nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:947
		{
			yyLOCAL = &tree.Revoke{
				IsRevokeRole:      true,
				RolesInRevokeRole: yyDollar[2].rolesUnion(),
				Users:             yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:957
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:963
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_GLOBAL,
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:969
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
				DbName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:976
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				DbName:  yyDollar[1].str,
				TabName: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:984
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:992
		{
			yyLOCAL = tree.OBJECT_TYPE_NONE
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:996
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1000
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1004
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1010
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1014
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1020
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1027
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1036
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1040
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1046
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1050
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1054
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1058
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1062
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1066
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1070
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1074
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1078
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1082
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1086
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1090
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1094
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1098
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1102
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1106
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1110
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1114
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1118
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1122
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1126
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1130
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1134
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1138
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1142
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1146
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1150
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1154
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1158
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1162
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1166
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1170
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1174
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1186
		{
			yyLOCAL = yyDollar[3].setRoleUnion()
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1192
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1200
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL_EXCEPT, Roles: yyDollar[3].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1204
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_DEFAULT, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1208
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1212
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1216
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1222
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1226
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1230
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1236
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1242
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1246
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:1253
		{
			yyVAL.str = yyDollar[3].str
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1259
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1263
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1269
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1277
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1286
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1294
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1302
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1325
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1348
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1355
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1362
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     yyDollar[1].str,
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1370
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1377
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1384
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1393
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1397
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1401
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1407
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1411
		{
			yyVAL.str = yyDollar[1].str
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1418
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1429
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1435
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1440
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1444
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1448
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1452
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1456
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1460
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1464
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1468
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1474
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1478
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1482
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1486
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1491
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1496
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1502
		{
			yyLOCAL = &tree.Use{Name: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1506
		{
			yyLOCAL = &tree.Use{}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1513
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1520
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1531
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: yyDollar[4].tableExprsUnion(),
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1542
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1546
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1552
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1564
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1570
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1574
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1580
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1584
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1590
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1599
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1605
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1609
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1613
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1617
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1621
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1625
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1633
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1641
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1651
		{
			explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
			explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1683
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1687
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:1693
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1699
		{
			yyVAL.str = yyDollar[1].str
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1704
		{
			yyVAL.str = "true"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1705
		{
			yyVAL.str = "false"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1706
		{
			yyVAL.str = yyDollar[1].str
		}
	case 235:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1711
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1721
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: false,
				Users:      yyDollar[4].usersUnion(),
				TlsOpts:    yyDollar[5].tlsOptionsUnion(),
				ResOpts:    yyDollar[6].resourceOptionsUnion(),
				MiscOpts:   yyDollar[7].userMiscOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1732
		{
			auth := &tree.User{
				AuthString: yyDollar[9].str,
				ByAuth:     true,
			}
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: true,
				UserFunc:   auth,
			}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1745
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1749
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1754
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1758
		{
			yyLOCAL = yyDollar[1].userMiscOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1764
		{
			yyLOCAL = []tree.UserMiscOption{yyDollar[1].userMiscOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1768
		{
			yyLOCAL = append(yyDollar[1].userMiscOptionsUnion(), yyDollar[2].userMiscOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1774
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1778
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1782
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1786
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1790
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1794
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1800
		{
			yyVAL.item = nil
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1805
		{
			yyVAL.item = nil
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1827
		{
			yyLOCAL = &tree.ShowTarget{Target: yyDollar[2].str, Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1831
		{
			yyLOCAL = &tree.ShowTarget{Target: "charset", Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1837
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: *yyDollar[4].tableNameUnion(),
				Where:     yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1851
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1861
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1870
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1874
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1878
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1884
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1890
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1896
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1902
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1912
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1924
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1928
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1934
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1946
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1959
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1963
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1968
		{
			yyVAL.str = ""
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:1972
		{
			yyVAL.str = yyDollar[2].str
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1978
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1991
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1995
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2001
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2005
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2011
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2015
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2024
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2028
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2032
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].str, yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2050
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2059
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2068
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].str),
				TableName: *yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2078
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2084
		{
			yyLOCAL = &tree.DropView{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2090
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].str), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2096
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2104
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2109
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2116
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2132
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: yyDollar[7].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2145
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: yyDollar[8].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2156
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2160
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:2166
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:2171
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2178
		{
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2180
		{
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2183
		{
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2192
		{
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2196
		{
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2201
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2210
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2217
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2223
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2231
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2238
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2245
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2264
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2268
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2272
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:2278
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2287
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2291
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2297
		{
			yyVAL.str = yyDollar[1].str
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2301
		{
			yyVAL.str = yyDollar[3].str
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2307
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2311
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2317
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2322
		{
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2326
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2333
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2337
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2344
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2349
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2353
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2359
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2363
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2369
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2373
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2378
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2382
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2395
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2402
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2409
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2427
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2446
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2452
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2459
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2463
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2476
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2480
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2485
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2489
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2496
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2501
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2508
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2514
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2518
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Ep: yyDollar[3].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2522
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2526
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2530
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2534
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2540
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2547
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2556
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2560
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:2566
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].str), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2574
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2578
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2583
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2587
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2593
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2597
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2601
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2606
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2610
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2616
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2622
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2626
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:2632
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2637
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2641
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2645
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2652
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2656
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2662
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2666
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2676
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2686
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2696
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2708
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2716
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2724
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2733
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2741
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2749
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2757
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2765
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2773
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2781
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2789
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2797
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2807
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2818
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2836
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2840
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2844
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2853
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2857
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2862
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2866
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2871
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2875
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2881
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2885
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2891
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2895
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: tree.UnrestrictedIdentifier(yyDollar[2].str)}
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2899
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2903
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].str, yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2908
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2916
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2922
		{
			yyLOCAL = &tree.From{
				Tables: yyDollar[2].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2930
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2934
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2947
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2956
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2966
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2975
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2985
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2989
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2999
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3003
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3007
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3011
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3017
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3021
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3027
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3033
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3037
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3041
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3047
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3051
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3057
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3061
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3067
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3071
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:3077
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:3081
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[3].str),
					Cols:  yyDollar[4].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:3094
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3099
		{
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3100
		{
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:3104
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3116
		{
			yyVAL.str = ""
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3120
		{
			yyVAL.str = yyDollar[1].str
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3124
		{
			yyVAL.str = yyDollar[2].str
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3133
		{
			yyVAL.str = ""
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3137
		{
			yyVAL.str = yyDollar[1].str
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3141
		{
			yyVAL.str = yyDollar[2].str
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3145
		{
			yyVAL.str = yyDollar[1].str
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3149
		{
			yyVAL.str = yyDollar[2].str
		}
	case 520:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3182
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3192
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[8].tableNameUnion(),
				ColNames:    yyDollar[9].identifierListUnion(),
				AsSource:    yyDollar[11].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3203
		{
		}
	case 524:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3208
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Users:       yyDollar[4].usersUnion(),
				TlsOpts:     yyDollar[5].tlsOptionsUnion(),
				ResOpts:     yyDollar[6].resourceOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3218
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3222
		{
			yyLOCAL = yyDollar[2].resourceOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3228
		{
			yyLOCAL = []tree.ResourceOption{yyDollar[1].resourceOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3232
		{
			yyLOCAL = append(yyDollar[1].resourceOptionsUnion(), yyDollar[2].resourceOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3238
		{
			yyLOCAL = &tree.ResourceOptionMaxQueriesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3242
		{
			yyLOCAL = &tree.ResourceOptionMaxUpdatesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3246
		{
			yyLOCAL = &tree.ResourceOptionMaxConnectionPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3250
		{
			yyLOCAL = &tree.ResourceOptionMaxUserConnections{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3256
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3263
		{
			t := &tree.TlsOptionNone{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3268
		{
			t := &tree.TlsOptionSSL{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3273
		{
			t := &tree.TlsOptionX509{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3278
		{
			yyLOCAL = yyDollar[2].tlsOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3284
		{
			yyLOCAL = []tree.TlsOption{yyDollar[1].tlsOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3288
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[3].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3292
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[2].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3298
		{
			yyLOCAL = &tree.TlsOptionIssuer{Issuer: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3302
		{
			yyLOCAL = &tree.TlsOptionSubject{Subject: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3306
		{
			yyLOCAL = &tree.TlsOptionCipher{Cipher: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3310
		{
			yyLOCAL = &tree.TlsOptionSan{San: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3316
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3320
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3326
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthPlugin: yyDollar[2].authRecordUnion().AuthPlugin,
				AuthString: yyDollar[2].authRecordUnion().AuthString,
				HashString: yyDollar[2].authRecordUnion().HashString,
				ByAuth:     yyDollar[2].authRecordUnion().ByAuth,
			}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3339
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3343
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3347
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3352
		{
			yyLOCAL = &tree.AuthRecord{}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3356
		{
			yyLOCAL = &tree.AuthRecord{
				AuthString: yyDollar[3].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3363
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3369
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				AuthString: yyDollar[5].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3377
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				HashString: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3384
		{
			yyLOCAL = &tree.AuthRecord{
				HashString: yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3396
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3405
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3409
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3415
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: "%"}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3419
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3423
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3432
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3436
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3440
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3444
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3450
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].str),
				Table:       *yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3469
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3473
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3495
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3499
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3503
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3507
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3511
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3517
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3521
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3527
		{
			// Order is parsed but just ignored as MySQL did.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3532
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3537
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3541
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3545
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3549
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3553
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3559
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:   yyDollar[3].ifNotExistsUnion(),
				Name:          tree.Identifier(yyDollar[4].str),
				CreateOptions: yyDollar[5].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3573
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3577
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3582
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3586
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3592
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3596
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3602
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3606
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3610
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3615
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3619
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3625
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3637
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3641
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3646
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3650
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3660
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3664
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3673
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3677
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3683
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3687
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3693
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3702
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3712
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3716
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3722
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3726
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3732
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3739
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3748
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3752
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3757
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3761
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3766
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3770
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3780
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3784
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3795
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3803
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3811
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3819
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3830
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3840
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3850
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3854
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3859
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3863
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3868
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3872
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3878
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3882
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3886
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3892
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3896
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3900
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3904
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3908
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3912
		{
			yyLOCAL = tree.NewTableOptionComment(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3916
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3920
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3924
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3928
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3932
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3936
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3940
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3944
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3948
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3952
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3956
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3960
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3964
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3968
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3972
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3976
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3980
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3984
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3988
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3992
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3996
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].str, yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4000
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4004
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:4011
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:4015
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:4021
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4026
		{
			yyVAL.str = ""
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4030
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4034
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4040
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4044
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4048
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4052
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4056
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4060
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:4074
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:4078
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4087
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4092
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4098
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4105
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4109
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4115
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4119
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4125
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.Name = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4135
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4141
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4150
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4159
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invail the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4182
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4191
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4201
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4209
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4215
		{
			yyVAL.str = ""
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4219
		{
			yyVAL.str = yyDollar[1].str
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4229
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4235
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4241
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4255
		{
			yyVAL.str = ""
		}
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:4262
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4268
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4272
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4276
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4287
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4291
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4295
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4300
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4304
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4310
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4314
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4320
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4324
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4328
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4332
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4336
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4340
		{
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4344
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4348
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4352
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4356
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4360
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4364
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4368
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4378
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4382
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4387
		{
			yyVAL.str = ""
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4391
		{
			yyVAL.str = yyDollar[1].str
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4397
		{
			yyVAL.str = ""
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4401
		{
			yyVAL.str = yyDollar[2].str
		}
	case 758:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:4407
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4418
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4428
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4435
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4442
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4449
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4458
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4464
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4470
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4474
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4478
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4482
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4486
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4491
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4498
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4502
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4506
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4511
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4515
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4520
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4524
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:4540
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4546
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4550
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4554
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4558
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4562
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4566
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4570
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4574
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4578
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4582
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4586
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4590
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4594
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4600
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4604
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4608
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4612
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4616
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4620
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4624
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4628
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4632
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4636
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4640
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4644
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4649
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4657
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4661
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4665
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4674
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4678
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4682
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4686
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4690
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4695
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4699
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4704
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4708
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4714
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4718
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:4724
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4734
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4751
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4768
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4781
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4794
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4806
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4820
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4835
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4850
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4867
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4882
		{
		}
	case 844:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4888
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4897
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4905
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4913
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4922
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4931
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4940
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[4].exprsUnion(),
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4949
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4958
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4967
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4976
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4985
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4994
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5003
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5012
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5028
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5036
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5044
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5052
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5060
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			timeUinit := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5069
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5077
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5086
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5095
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5103
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5111
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5120
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5130
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			a1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			a2 := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{a1, a2},
			}
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5151
		{
			yyVAL.str = yyDollar[1].str
		}
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5187
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5199
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5213
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5221
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5228
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5235
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5247
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5255
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5266
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5275
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5284
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5292
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5302
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5310
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5318
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5328
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5332
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5338
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5342
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5361
		{
		}
	case 935:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5363
		{
		}
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5403
		{
			name := tree.SetUnresolvedName("interval")
			arg2 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5413
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5417
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5421
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:5427
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5432
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5436
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5442
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5446
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5453
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5457
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5461
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5469
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5473
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5477
		{
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5481
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5485
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5490
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5495
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5501
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5505
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5509
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5513
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5520
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5524
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5530
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5534
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5538
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5542
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5546
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5550
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5554
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5558
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5564
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5568
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5574
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5578
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5585
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5589
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5593
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5599
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5603
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5607
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5611
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5615
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5619
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5623
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5629
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5633
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5637
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5641
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5647
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5651
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5664
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5669
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5673
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5677
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5681
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_hexnum)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5695
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5699
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_bit)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5713
		{
			yyLOCAL = tree.NewParamExpr(yyp)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5719
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5730
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5735
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5741
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5753
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5765
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5777
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5790
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5803
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5816
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5829
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5842
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5855
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5868
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5881
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5894
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5907
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5922
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5945
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 53 {
				yylex.Error("For float(M), M must between 0 and 53.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5982
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 18 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6030
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6047
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6059
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6074
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6094
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6114
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6130
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6143
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6156
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6169
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6182
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6194
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6206
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6218
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6230
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6242
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6254
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6266
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6278
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6290
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6303
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6318
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6341
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6346
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6352
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6359
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6363
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6368
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6372
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6378
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6384
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6391
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6398
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6407
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 10, // this is the default precision for decimal
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6414
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6421
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6430
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6434
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6438
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6444
		{
		}
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6446
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6456
		{
			yyVAL.str = ""
		}
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6460
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
