// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const SNAPSHOTS = 57437
const INTEGRAL = 57438
const HEX = 57439
const FLOAT = 57440
const HEXNUM = 57441
const BIT_LITERAL = 57442
const NULL = 57443
const TRUE = 57444
const FALSE = 57445
const LOWER_THAN_CHARSET = 57446
const CHARSET = 57447
const UNIQUE = 57448
const KEY = 57449
const OR = 57450
const PIPE_CONCAT = 57451
const XOR = 57452
const AND = 57453
const NOT = 57454
const BETWEEN = 57455
const CASE = 57456
const WHEN = 57457
const THEN = 57458
const ELSE = 57459
const END = 57460
const ELSEIF = 57461
const LOWER_THAN_EQ = 57462
const LE = 57463
const GE = 57464
const NE = 57465
const NULL_SAFE_EQUAL = 57466
const IS = 57467
const LIKE = 57468
const REGEXP = 57469
const IN = 57470
const ASSIGNMENT = 57471
const ILIKE = 57472
const SHIFT_LEFT = 57473
const SHIFT_RIGHT = 57474
const DIV = 57475
const MOD = 57476
const UNARY = 57477
const COLLATE = 57478
const BINARY = 57479
const UNDERSCORE_BINARY = 57480
const INTERVAL = 57481
const OUT = 57482
const INOUT = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const WORK = 57489
const CONSISTENT = 57490
const SNAPSHOT = 57491
const CHAIN = 57492
const NO = 57493
const RELEASE = 57494
const PRIORITY = 57495
const QUICK = 57496
const BIT = 57497
const TINYINT = 57498
const SMALLINT = 57499
const MEDIUMINT = 57500
const INT = 57501
const INTEGER = 57502
const BIGINT = 57503
const INTNUM = 57504
const REAL = 57505
const DOUBLE = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const DECIMAL_VALUE = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const UUID = 57531
const VECF32 = 57532
const VECF64 = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const INT1 = 57542
const INT2 = 57543
const INT3 = 57544
const INT4 = 57545
const INT8 = 57546
const S3OPTION = 57547
const STAGEOPTION = 57548
const SQL_SMALL_RESULT = 57549
const SQL_BIG_RESULT = 57550
const SQL_BUFFER_RESULT = 57551
const LOW_PRIORITY = 57552
const HIGH_PRIORITY = 57553
const DELAYED = 57554
const CREATE = 57555
const ALTER = 57556
const DROP = 57557
const RENAME = 57558
const ANALYZE = 57559
const ADD = 57560
const RETURNS = 57561
const SCHEMA = 57562
const TABLE = 57563
const SEQUENCE = 57564
const INDEX = 57565
const VIEW = 57566
const TO = 57567
const IGNORE = 57568
const IF = 57569
const PRIMARY = 57570
const COLUMN = 57571
const CONSTRAINT = 57572
const SPATIAL = 57573
const FULLTEXT = 57574
const FOREIGN = 57575
const KEY_BLOCK_SIZE = 57576
const SHOW = 57577
const DESCRIBE = 57578
const EXPLAIN = 57579
const DATE = 57580
const ESCAPE = 57581
const REPAIR = 57582
const OPTIMIZE = 57583
const TRUNCATE = 57584
const MAXVALUE = 57585
const PARTITION = 57586
const REORGANIZE = 57587
const LESS = 57588
const THAN = 57589
const PROCEDURE = 57590
const TRIGGER = 57591
const STATUS = 57592
const VARIABLES = 57593
const ROLE = 57594
const PROXY = 57595
const AVG_ROW_LENGTH = 57596
const STORAGE = 57597
const DISK = 57598
const MEMORY = 57599
const CHECKSUM = 57600
const COMPRESSION = 57601
const DATA = 57602
const DIRECTORY = 57603
const DELAY_KEY_WRITE = 57604
const ENCRYPTION = 57605
const ENGINE = 57606
const MAX_ROWS = 57607
const MIN_ROWS = 57608
const PACK_KEYS = 57609
const ROW_FORMAT = 57610
const STATS_AUTO_RECALC = 57611
const STATS_PERSISTENT = 57612
const STATS_SAMPLE_PAGES = 57613
const DYNAMIC = 57614
const COMPRESSED = 57615
const REDUNDANT = 57616
const COMPACT = 57617
const FIXED = 57618
const COLUMN_FORMAT = 57619
const AUTO_RANDOM = 57620
const ENGINE_ATTRIBUTE = 57621
const SECONDARY_ENGINE_ATTRIBUTE = 57622
const INSERT_METHOD = 57623
const RESTRICT = 57624
const CASCADE = 57625
const ACTION = 57626
const PARTIAL = 57627
const SIMPLE = 57628
const CHECK = 57629
const ENFORCED = 57630
const RANGE = 57631
const LIST = 57632
const ALGORITHM = 57633
const LINEAR = 57634
const PARTITIONS = 57635
const SUBPARTITION = 57636
const SUBPARTITIONS = 57637
const CLUSTER = 57638
const TYPE = 57639
const ANY = 57640
const SOME = 57641
const EXTERNAL = 57642
const LOCALFILE = 57643
const URL = 57644
const PREPARE = 57645
const DEALLOCATE = 57646
const RESET = 57647
const EXTENSION = 57648
const INCREMENT = 57649
const CYCLE = 57650
const MINVALUE = 57651
const PUBLICATION = 57652
const SUBSCRIPTIONS = 57653
const PUBLICATIONS = 57654
const PROPERTIES = 57655
const PARSER = 57656
const VISIBLE = 57657
const INVISIBLE = 57658
const BTREE = 57659
const HASH = 57660
const RTREE = 57661
const BSI = 57662
const IVFFLAT = 57663
const MASTER = 57664
const ZONEMAP = 57665
const LEADING = 57666
const BOTH = 57667
const TRAILING = 57668
const UNKNOWN = 57669
const LISTS = 57670
const OP_TYPE = 57671
const REINDEX = 57672
const EXPIRE = 57673
const ACCOUNT = 57674
const ACCOUNTS = 57675
const UNLOCK = 57676
const DAY = 57677
const NEVER = 57678
const PUMP = 57679
const MYSQL_COMPATIBILITY_MODE = 57680
const MODIFY = 57681
const CHANGE = 57682
const SECOND = 57683
const ASCII = 57684
const COALESCE = 57685
const COLLATION = 57686
const HOUR = 57687
const MICROSECOND = 57688
const MINUTE = 57689
const MONTH = 57690
const QUARTER = 57691
const REPEAT = 57692
const REVERSE = 57693
const ROW_COUNT = 57694
const WEEK = 57695
const REVOKE = 57696
const FUNCTION = 57697
const PRIVILEGES = 57698
const TABLESPACE = 57699
const EXECUTE = 57700
const SUPER = 57701
const GRANT = 57702
const OPTION = 57703
const REFERENCES = 57704
const REPLICATION = 57705
const SLAVE = 57706
const CLIENT = 57707
const USAGE = 57708
const RELOAD = 57709
const FILE = 57710
const TEMPORARY = 57711
const ROUTINE = 57712
const EVENT = 57713
const SHUTDOWN = 57714
const NULLX = 57715
const AUTO_INCREMENT = 57716
const APPROXNUM = 57717
const SIGNED = 57718
const UNSIGNED = 57719
const ZEROFILL = 57720
const ENGINES = 57721
const LOW_CARDINALITY = 57722
const AUTOEXTEND_SIZE = 57723
const ADMIN_NAME = 57724
const RANDOM = 57725
const SUSPEND = 57726
const ATTRIBUTE = 57727
const HISTORY = 57728
const REUSE = 57729
const CURRENT = 57730
const OPTIONAL = 57731
const FAILED_LOGIN_ATTEMPTS = 57732
const PASSWORD_LOCK_TIME = 57733
const UNBOUNDED = 57734
const SECONDARY = 57735
const RESTRICTED = 57736
const USER = 57737
const IDENTIFIED = 57738
const CIPHER = 57739
const ISSUER = 57740
const X509 = 57741
const SUBJECT = 57742
const SAN = 57743
const REQUIRE = 57744
const SSL = 57745
const NONE = 57746
const PASSWORD = 57747
const SHARED = 57748
const EXCLUSIVE = 57749
const MAX_QUERIES_PER_HOUR = 57750
const MAX_UPDATES_PER_HOUR = 57751
const MAX_CONNECTIONS_PER_HOUR = 57752
const MAX_USER_CONNECTIONS = 57753
const FORMAT = 57754
const VERBOSE = 57755
const CONNECTION = 57756
const TRIGGERS = 57757
const PROFILES = 57758
const LOAD = 57759
const INLINE = 57760
const INFILE = 57761
const TERMINATED = 57762
const OPTIONALLY = 57763
const ENCLOSED = 57764
const ESCAPED = 57765
const STARTING = 57766
const LINES = 57767
const ROWS = 57768
const IMPORT = 57769
const DISCARD = 57770
const JSONTYPE = 57771
const MODUMP = 57772
const OVER = 57773
const PRECEDING = 57774
const FOLLOWING = 57775
const GROUPS = 57776
const DATABASES = 57777
const TABLES = 57778
const SEQUENCES = 57779
const EXTENDED = 57780
const FULL = 57781
const PROCESSLIST = 57782
const FIELDS = 57783
const COLUMNS = 57784
const OPEN = 57785
const ERRORS = 57786
const WARNINGS = 57787
const INDEXES = 57788
const SCHEMAS = 57789
const NODE = 57790
const LOCKS = 57791
const ROLES = 57792
const TABLE_NUMBER = 57793
const COLUMN_NUMBER = 57794
const TABLE_VALUES = 57795
const TABLE_SIZE = 57796
const NAMES = 57797
const GLOBAL = 57798
const PERSIST = 57799
const SESSION = 57800
const ISOLATION = 57801
const LEVEL = 57802
const READ = 57803
const WRITE = 57804
const ONLY = 57805
const REPEATABLE = 57806
const COMMITTED = 57807
const UNCOMMITTED = 57808
const SERIALIZABLE = 57809
const LOCAL = 57810
const EVENTS = 57811
const PLUGINS = 57812
const CURRENT_TIMESTAMP = 57813
const DATABASE = 57814
const CURRENT_TIME = 57815
const LOCALTIME = 57816
const LOCALTIMESTAMP = 57817
const UTC_DATE = 57818
const UTC_TIME = 57819
const UTC_TIMESTAMP = 57820
const REPLACE = 57821
const CONVERT = 57822
const SEPARATOR = 57823
const TIMESTAMPDIFF = 57824
const CURRENT_DATE = 57825
const CURRENT_USER = 57826
const CURRENT_ROLE = 57827
const SECOND_MICROSECOND = 57828
const MINUTE_MICROSECOND = 57829
const MINUTE_SECOND = 57830
const HOUR_MICROSECOND = 57831
const HOUR_SECOND = 57832
const HOUR_MINUTE = 57833
const DAY_MICROSECOND = 57834
const DAY_SECOND = 57835
const DAY_MINUTE = 57836
const DAY_HOUR = 57837
const YEAR_MONTH = 57838
const SQL_TSI_HOUR = 57839
const SQL_TSI_DAY = 57840
const SQL_TSI_WEEK = 57841
const SQL_TSI_MONTH = 57842
const SQL_TSI_QUARTER = 57843
const SQL_TSI_YEAR = 57844
const SQL_TSI_SECOND = 57845
const SQL_TSI_MINUTE = 57846
const RECURSIVE = 57847
const CONFIG = 57848
const DRAINER = 57849
const SOURCE = 57850
const STREAM = 57851
const HEADERS = 57852
const CONNECTOR = 57853
const CONNECTORS = 57854
const DAEMON = 57855
const PAUSE = 57856
const CANCEL = 57857
const TASK = 57858
const RESUME = 57859
const MATCH = 57860
const AGAINST = 57861
const BOOLEAN = 57862
const LANGUAGE = 57863
const WITH = 57864
const QUERY = 57865
const EXPANSION = 57866
const WITHOUT = 57867
const VALIDATION = 57868
const UPGRADE = 57869
const RETRY = 57870
const ADDDATE = 57871
const BIT_AND = 57872
const BIT_OR = 57873
const BIT_XOR = 57874
const CAST = 57875
const COUNT = 57876
const APPROX_COUNT = 57877
const APPROX_COUNT_DISTINCT = 57878
const SERIAL_EXTRACT = 57879
const APPROX_PERCENTILE = 57880
const CURDATE = 57881
const CURTIME = 57882
const DATE_ADD = 57883
const DATE_SUB = 57884
const EXTRACT = 57885
const GROUP_CONCAT = 57886
const MAX = 57887
const MID = 57888
const MIN = 57889
const NOW = 57890
const POSITION = 57891
const SESSION_USER = 57892
const STD = 57893
const STDDEV = 57894
const MEDIAN = 57895
const CLUSTER_CENTERS = 57896
const KMEANS = 57897
const STDDEV_POP = 57898
const STDDEV_SAMP = 57899
const SUBDATE = 57900
const SUBSTR = 57901
const SUBSTRING = 57902
const SUM = 57903
const SYSDATE = 57904
const SYSTEM_USER = 57905
const TRANSLATE = 57906
const TRIM = 57907
const VARIANCE = 57908
const VAR_POP = 57909
const VAR_SAMP = 57910
const AVG = 57911
const RANK = 57912
const ROW_NUMBER = 57913
const DENSE_RANK = 57914
const BIT_CAST = 57915
const BITMAP_BIT_POSITION = 57916
const BITMAP_BUCKET_NUMBER = 57917
const BITMAP_COUNT = 57918
const BITMAP_CONSTRUCT_AGG = 57919
const BITMAP_OR_AGG = 57920
const NEXTVAL = 57921
const SETVAL = 57922
const CURRVAL = 57923
const LASTVAL = 57924
const ARROW = 57925
const ROW = 57926
const OUTFILE = 57927
const HEADER = 57928
const MAX_FILE_SIZE = 57929
const FORCE_QUOTE = 57930
const PARALLEL = 57931
const UNUSED = 57932
const BINDINGS = 57933
const DO = 57934
const DECLARE = 57935
const LOOP = 57936
const WHILE = 57937
const LEAVE = 57938
const ITERATE = 57939
const UNTIL = 57940
const CALL = 57941
const PREV = 57942
const SLIDING = 57943
const FILL = 57944
const SPBEGIN = 57945
const BACKEND = 57946
const SERVERS = 57947
const HANDLER = 57948
const PERCENT = 57949
const SAMPLE = 57950
const KILL = 57951
const BACKUP = 57952
const FILESYSTEM = 57953
const PARALLELISM = 57954
const QUERY_RESULT = 57955

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:11882

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 122,
	11, 723,
	22, 723,
	-2, 716,
	-1, 142,
	238, 1115,
	240, 1015,
	-2, 1062,
	-1, 167,
	43, 548,
	240, 548,
	267, 555,
	268, 555,
	463, 548,
	-2, 583,
	-1, 208,
	634, 1868,
	-2, 461,
	-1, 508,
	634, 1986,
	-2, 350,
	-1, 566,
	634, 2045,
	-2, 348,
	-1, 567,
	634, 2046,
	-2, 349,
	-1, 568,
	634, 2047,
	-2, 351,
	-1, 697,
	319, 137,
	435, 137,
	436, 137,
	-2, 1773,
	-1, 763,
	82, 1560,
	-2, 1923,
	-1, 764,
	82, 1578,
	-2, 1894,
	-1, 768,
	82, 1579,
	-2, 1922,
	-1, 801,
	82, 1487,
	-2, 2117,
	-1, 802,
	82, 1488,
	-2, 2116,
	-1, 803,
	82, 1489,
	-2, 2106,
	-1, 804,
	82, 2078,
	-2, 2099,
	-1, 805,
	82, 2079,
	-2, 2100,
	-1, 806,
	82, 2080,
	-2, 2108,
	-1, 807,
	82, 2081,
	-2, 2088,
	-1, 808,
	82, 2082,
	-2, 2097,
	-1, 809,
	82, 2083,
	-2, 2109,
	-1, 810,
	82, 2084,
	-2, 2110,
	-1, 811,
	82, 2085,
	-2, 2115,
	-1, 812,
	82, 2086,
	-2, 2120,
	-1, 813,
	82, 2087,
	-2, 2121,
	-1, 814,
	82, 1556,
	-2, 1960,
	-1, 815,
	82, 1557,
	-2, 1757,
	-1, 816,
	82, 1558,
	-2, 1969,
	-1, 817,
	82, 1559,
	-2, 1766,
	-1, 819,
	82, 1562,
	-2, 1774,
	-1, 820,
	82, 1563,
	-2, 1993,
	-1, 822,
	82, 1566,
	-2, 1793,
	-1, 824,
	82, 1568,
	-2, 2005,
	-1, 825,
	82, 1569,
	-2, 2004,
	-1, 826,
	82, 1570,
	-2, 1837,
	-1, 827,
	82, 1571,
	-2, 1918,
	-1, 830,
	82, 1574,
	-2, 2016,
	-1, 832,
	82, 1576,
	-2, 2019,
	-1, 833,
	82, 1577,
	-2, 2021,
	-1, 834,
	82, 1580,
	-2, 2029,
	-1, 835,
	82, 1581,
	-2, 1903,
	-1, 836,
	82, 1582,
	-2, 1948,
	-1, 837,
	82, 1583,
	-2, 1913,
	-1, 838,
	82, 1584,
	-2, 1938,
	-1, 849,
	82, 1465,
	-2, 2111,
	-1, 850,
	82, 1466,
	-2, 2112,
	-1, 851,
	82, 1467,
	-2, 2113,
	-1, 938,
	458, 583,
	459, 583,
	-2, 549,
	-1, 985,
	124, 1757,
	135, 1757,
	155, 1757,
	-2, 1731,
	-1, 1100,
	22, 750,
	-2, 699,
	-1, 1206,
	11, 723,
	22, 723,
	-2, 1345,
	-1, 1288,
	22, 750,
	-2, 699,
	-1, 1611,
	82, 1631,
	-2, 1920,
	-1, 1612,
	82, 1632,
	-2, 1921,
	-1, 1766,
	83, 900,
	-2, 906,
	-1, 2190,
	107, 1054,
	151, 1054,
	190, 1054,
	193, 1054,
	280, 1054,
	-2, 1047,
	-1, 2336,
	11, 723,
	22, 723,
	-2, 843,
	-1, 2368,
	83, 1717,
	156, 1717,
	-2, 1905,
	-1, 2369,
	83, 1717,
	156, 1717,
	-2, 1904,
	-1, 2370,
	83, 1693,
	156, 1693,
	-2, 1891,
	-1, 2371,
	83, 1694,
	156, 1694,
	-2, 1896,
	-1, 2372,
	83, 1695,
	156, 1695,
	-2, 1825,
	-1, 2373,
	83, 1696,
	156, 1696,
	-2, 1819,
	-1, 2374,
	83, 1697,
	156, 1697,
	-2, 1747,
	-1, 2375,
	83, 1698,
	156, 1698,
	-2, 1893,
	-1, 2376,
	83, 1699,
	156, 1699,
	-2, 1823,
	-1, 2377,
	83, 1700,
	156, 1700,
	-2, 1818,
	-1, 2378,
	83, 1701,
	156, 1701,
	-2, 1807,
	-1, 2379,
	83, 1717,
	156, 1717,
	-2, 1808,
	-1, 2380,
	83, 1717,
	156, 1717,
	-2, 1809,
	-1, 2382,
	83, 1706,
	156, 1706,
	-2, 1938,
	-1, 2383,
	83, 1684,
	156, 1684,
	-2, 1923,
	-1, 2384,
	83, 1715,
	156, 1715,
	-2, 1894,
	-1, 2385,
	83, 1715,
	156, 1715,
	-2, 1922,
	-1, 2386,
	83, 1715,
	156, 1715,
	-2, 1775,
	-1, 2387,
	83, 1713,
	156, 1713,
	-2, 1913,
	-1, 2388,
	83, 1710,
	156, 1710,
	-2, 1798,
	-1, 2389,
	82, 1665,
	83, 1665,
	156, 1665,
	393, 1665,
	394, 1665,
	395, 1665,
	-2, 1746,
	-1, 2390,
	82, 1666,
	83, 1666,
	156, 1666,
	393, 1666,
	394, 1666,
	395, 1666,
	-2, 1748,
	-1, 2391,
	82, 1667,
	83, 1667,
	156, 1667,
	393, 1667,
	394, 1667,
	395, 1667,
	-2, 1965,
	-1, 2392,
	82, 1669,
	83, 1669,
	156, 1669,
	393, 1669,
	394, 1669,
	395, 1669,
	-2, 1895,
	-1, 2393,
	82, 1671,
	83, 1671,
	156, 1671,
	393, 1671,
	394, 1671,
	395, 1671,
	-2, 1877,
	-1, 2394,
	82, 1673,
	83, 1673,
	156, 1673,
	393, 1673,
	394, 1673,
	395, 1673,
	-2, 1824,
	-1, 2395,
	82, 1675,
	83, 1675,
	156, 1675,
	393, 1675,
	394, 1675,
	395, 1675,
	-2, 1803,
	-1, 2396,
	82, 1676,
	83, 1676,
	156, 1676,
	393, 1676,
	394, 1676,
	395, 1676,
	-2, 1804,
	-1, 2397,
	82, 1678,
	83, 1678,
	156, 1678,
	393, 1678,
	394, 1678,
	395, 1678,
	-2, 1745,
	-1, 2398,
	83, 1720,
	156, 1720,
	393, 1720,
	394, 1720,
	395, 1720,
	-2, 1780,
	-1, 2399,
	83, 1720,
	156, 1720,
	393, 1720,
	394, 1720,
	395, 1720,
	-2, 1794,
	-1, 2400,
	83, 1723,
	156, 1723,
	393, 1723,
	394, 1723,
	395, 1723,
	-2, 1776,
	-1, 2401,
	83, 1723,
	156, 1723,
	393, 1723,
	394, 1723,
	395, 1723,
	-2, 1840,
	-1, 2402,
	83, 1720,
	156, 1720,
	393, 1720,
	394, 1720,
	395, 1720,
	-2, 1861,
	-1, 2598,
	107, 1054,
	151, 1054,
	190, 1054,
	193, 1054,
	280, 1054,
	-2, 1048,
	-1, 2615,
	80, 643,
	156, 643,
	-2, 1228,
	-1, 3004,
	193, 1054,
	304, 1313,
	-2, 1285,
	-1, 3160,
	107, 1054,
	151, 1054,
	190, 1054,
	193, 1054,
	-2, 1171,
	-1, 3162,
	107, 1054,
	151, 1054,
	190, 1054,
	193, 1054,
	-2, 1171,
	-1, 3174,
	80, 643,
	156, 643,
	-2, 1229,
	-1, 3195,
	193, 1054,
	304, 1313,
	-2, 1286,
	-1, 3330,
	107, 1054,
	151, 1054,
	190, 1054,
	193, 1054,
	-2, 1172,
	-1, 3356,
	83, 1133,
	156, 1133,
	-2, 1054,
	-1, 3484,
	83, 1133,
	156, 1133,
	-2, 1054,
	-1, 3630,
	83, 1137,
	156, 1137,
	-2, 1054,
	-1, 3677,
	83, 1138,
	156, 1138,
	-2, 1054,
}

const yyPrivate = 57344

const yyLast = 47470

var yyAct = [...]int{
	730, 707, 3723, 732, 3697, 2644, 197, 3716, 3634, 1850,
	1591, 3273, 3180, 3537, 3641, 3640, 3633, 3484, 716, 2990,
	3563, 3522, 3023, 2647, 3593, 3209, 3090, 2454, 3462, 2638,
	3091, 709, 3516, 1241, 3483, 3317, 3541, 3318, 3315, 3412,
	760, 600, 1101, 2641, 3453, 1371, 3384, 1510, 984, 3277,
	3523, 1377, 3525, 617, 3268, 623, 623, 1798, 1638, 3147,
	3337, 623, 640, 649, 2618, 2234, 649, 3327, 2962, 3196,
	1433, 1594, 3299, 37, 2999, 2925, 3088, 2751, 3163, 182,
	2951, 705, 3332, 1940, 58, 2752, 3136, 2734, 1587, 2366,
	3019, 3165, 2668, 3001, 2744, 2489, 2049, 1905, 2750, 3076,
	2813, 2364, 3008, 2773, 2747, 2010, 1652, 3056, 2935, 654,
	2237, 2932, 2587, 2926, 3007, 2930, 2330, 2201, 660, 699,
	1092, 2928, 2971, 2599, 1937, 121, 36, 2169, 2927, 2314,
	1348, 2857, 2923, 704, 1955, 646, 2157, 2158, 2033, 2019,
	2436, 2267, 2786, 2018, 1744, 913, 2796, 1499, 1933, 1426,
	2011, 2418, 1344, 2044, 1983, 1506, 1908, 2045, 1511, 2319,
	1514, 1906, 2576, 2331, 2571, 2670, 1829, 2649, 2235, 1840,
	2610, 600, 193, 8, 192, 7, 6, 2200, 2362, 1041,
	1774, 1585, 2046, 708, 1540, 1442, 1473, 978, 616, 1412,
	2181, 2056, 2079, 1645, 698, 1521, 1625, 197, 1576, 197,
	1114, 1032, 1033, 2522, 2230, 717, 15, 1342, 623, 33,
	1810, 2017, 1525, 2014, 1999, 1480, 947, 1584, 1973, 912,
	635, 1411, 2338, 977, 27, 632, 16, 1465, 599, 23,
	1809, 1409, 1773, 853, 1653, 14, 24, 662, 1372, 17,
	663, 10, 183, 1360, 1472, 1356, 889, 1380, 173, 179,
	933, 910, 648, 895, 1286, 1242, 659, 3447, 2053, 993,
	1174, 1175, 1176, 1173, 1174, 1175, 1176, 1173, 644, 2557,
	2557, 642, 2557, 2340, 1029, 3177, 1028, 2978, 1030, 1096,
	1590, 1174, 1175, 1176, 1173, 2063, 645, 3150, 641, 3083,
	2477, 2424, 2421, 2023, 2521, 2422, 1757, 643, 1487, 2419,
	990, 992, 1483, 1024, 1025, 181, 618, 628, 1025, 2156,
	2907, 855, 1305, 856, 1025, 2904, 1522, 2909, 652, 2906,
	3708, 2549, 2547, 1394, 706, 619, 1311, 1751, 3199, 1301,
	3266, 1381, 1485, 2809, 180, 54, 169, 143, 2807, 1174,
	1175, 1176, 1173, 1988, 3419, 3413, 1096, 3269, 3089, 2030,
	3527, 1236, 170, 2013, 8, 854, 7, 2884, 1023, 162,
	2005, 2275, 2551, 171, 3615, 180, 3211, 1174, 1175, 1176,
	1173, 180, 54, 169, 143, 180, 180, 3469, 1136, 3202,
	865, 624, 120, 180, 2463, 180, 54, 169, 143, 180,
	3197, 180, 3304, 1529, 180, 3219, 3220, 108, 2605, 3300,
	2471, 3198, 3164, 174, 2192, 1306, 2050, 180, 54, 169,
	143, 3437, 1538, 120, 1520, 701, 3574, 180, 1452, 1451,
	1450, 3470, 996, 1526, 180, 54, 169, 143, 994, 995,
	180, 54, 169, 143, 174, 1112, 700, 2829, 3203, 2821,
	174, 1317, 1535, 658, 1528, 2603, 2882, 2061, 1334, 1549,
	1390, 2185, 174, 1391, 174, 3439, 2344, 2356, 174, 2343,
	174, 1171, 2345, 1537, 2357, 120, 1307, 844, 1950, 843,
	845, 846, 2779, 847, 848, 1917, 174, 2780, 2781, 1368,
	125, 126, 1561, 127, 128, 988, 174, 989, 1109, 866,
	1413, 2908, 1415, 174, 2437, 2606, 2905, 1918, 1919, 174,
	1758, 1759, 1577, 2573, 1376, 1581, 2994, 1824, 1375, 1378,
	1379, 2992, 1144, 2574, 1593, 1146, 1378, 1379, 956, 1151,
	3644, 3645, 1152, 3612, 1012, 1164, 1169, 700, 987, 1580,
	986, 3530, 3218, 3529, 2238, 3528, 3290, 3530, 3606, 1393,
	3529, 3605, 2145, 1147, 3528, 3604, 3665, 3514, 3608, 2814,
	1154, 142, 168, 178, 3092, 106, 3092, 3701, 3702, 3207,
	3595, 2458, 2572, 3517, 3518, 3519, 3520, 1106, 2552, 3595,
	3598, 3416, 1316, 167, 161, 160, 1486, 1484, 1117, 2689,
	60, 3204, 3208, 3206, 3205, 2815, 1117, 2816, 2065, 1597,
	1924, 3534, 3137, 1934, 1928, 3105, 1013, 1572, 2057, 3144,
	2308, 2180, 3309, 1996, 3617, 3618, 1493, 1492, 2944, 3441,
	1026, 1027, 1687, 1582, 3221, 1031, 2563, 3613, 3614, 3213,
	3214, 623, 623, 1140, 142, 2579, 178, 3610, 2946, 901,
	1149, 2845, 623, 1105, 2936, 1139, 1579, 2847, 2468, 1167,
	1168, 163, 164, 165, 1166, 2273, 167, 694, 1142, 3267,
	696, 649, 649, 166, 623, 695, 1104, 3431, 2808, 3432,
	1145, 1148, 2940, 2941, 2942, 2738, 3221, 1007, 1002, 997,
	1001, 1005, 172, 3289, 3643, 3426, 1366, 2311, 3200, 2943,
	2550, 3291, 2310, 966, 3212, 3444, 1141, 3306, 1035, 2315,
	2561, 1161, 116, 1150, 615, 1010, 166, 2996, 117, 1000,
	2062, 1392, 2253, 3022, 3236, 1596, 1595, 2960, 2233, 2256,
	646, 646, 3233, 3434, 3020, 3021, 1214, 3672, 1304, 1948,
	1949, 3556, 1403, 993, 3474, 1318, 2562, 2972, 3466, 2068,
	2070, 2071, 3551, 2611, 3446, 651, 1162, 1163, 3431, 650,
	3432, 2743, 2187, 3558, 3433, 1098, 3108, 2851, 3226, 2556,
	1008, 3542, 2023, 1578, 1097, 118, 1097, 1011, 1603, 1606,
	1607, 2051, 1105, 1143, 990, 992, 2255, 2051, 53, 1604,
	1153, 3181, 3564, 1119, 1118, 2938, 1131, 2639, 2640, 998,
	2643, 1119, 1118, 2828, 2991, 1246, 2643, 2084, 1111, 2051,
	3188, 1355, 647, 1245, 3434, 993, 3237, 3533, 3025, 1025,
	3375, 1025, 1009, 3734, 2024, 1025, 647, 2052, 1025, 2254,
	2359, 3616, 1025, 1025, 3217, 2285, 3280, 55, 3468, 1673,
	2585, 2284, 1122, 1097, 1422, 3433, 1421, 962, 960, 2064,
	961, 3364, 903, 1129, 904, 1353, 990, 992, 2420, 3719,
	2305, 2306, 999, 644, 644, 647, 642, 642, 1370, 1369,
	3565, 647, 175, 176, 55, 177, 657, 1108, 1110, 1352,
	144, 645, 645, 641, 641, 51, 1488, 1351, 55, 1120,
	854, 3454, 643, 643, 3000, 1093, 2548, 3488, 1314, 617,
	3440, 3475, 1378, 1379, 1100, 3467, 2903, 1378, 1379, 2276,
	3216, 144, 3632, 3166, 2233, 1284, 1128, 144, 1289, 1367,
	3264, 144, 144, 1124, 1125, 2718, 1312, 55, 1205, 144,
	3305, 144, 913, 55, 1130, 144, 967, 144, 2472, 1006,
	144, 3442, 2250, 2997, 1215, 175, 176, 1935, 177, 658,
	119, 40, 3370, 144, 2578, 3592, 1410, 52, 963, 2947,
	1099, 5, 989, 144, 2937, 2240, 1094, 123, 124, 2848,
	144, 3095, 3016, 2791, 2792, 1003, 144, 3609, 1004, 2690,
	1136, 2691, 2692, 623, 3427, 1405, 1156, 3310, 3428, 1157,
	2069, 600, 600, 2464, 2939, 2348, 3720, 2271, 1374, 1925,
	600, 600, 1669, 1927, 1437, 1437, 1573, 623, 1666, 3024,
	2582, 2583, 1668, 1665, 1667, 1671, 1672, 1159, 2054, 1605,
	1670, 965, 1326, 3020, 3021, 2581, 3487, 2775, 2777, 649,
	1466, 617, 2850, 2080, 3130, 1476, 1476, 1319, 1332, 1331,
	1330, 2243, 2497, 1329, 653, 3377, 197, 1208, 1257, 1258,
	3017, 1444, 907, 908, 909, 600, 1210, 1211, 1212, 1213,
	1016, 1021, 1022, 2066, 2067, 3427, 1135, 2687, 1339, 3524,
	1084, 1080, 1081, 1082, 1083, 1439, 2502, 905, 2501, 2500,
	2498, 2591, 2594, 2595, 2596, 2592, 2593, 1315, 1347, 2559,
	3631, 2161, 1435, 1435, 1354, 2859, 2858, 1155, 964, 3366,
	1310, 1364, 2239, 3365, 902, 1761, 1518, 2241, 1494, 1383,
	1384, 1523, 1386, 1387, 1762, 1388, 2160, 1532, 3385, 3386,
	3387, 3391, 3389, 3390, 3388, 957, 1290, 3717, 3718, 1760,
	1288, 2163, 2162, 2240, 2243, 1160, 1308, 1309, 1177, 868,
	2297, 869, 1559, 3338, 1349, 2499, 1207, 3735, 1574, 2249,
	1133, 1431, 1432, 2247, 1320, 1217, 1437, 3602, 1437, 1105,
	1158, 2242, 1539, 957, 1676, 1677, 1678, 1679, 1680, 1681,
	1674, 1675, 2244, 2719, 2721, 2722, 2723, 2720, 1417, 1419,
	1225, 1349, 1592, 1341, 3371, 3372, 1527, 1429, 1430, 2616,
	1362, 1363, 1536, 1172, 2776, 1404, 1976, 993, 3053, 3096,
	3730, 1136, 2439, 993, 3049, 646, 1382, 2958, 959, 1385,
	1497, 958, 1500, 1501, 2328, 1395, 1396, 1568, 1102, 1467,
	1554, 1555, 3133, 1502, 1503, 1134, 1437, 1134, 1321, 1322,
	1323, 1324, 1325, 1420, 1327, 1531, 2183, 3107, 1508, 1509,
	1333, 957, 1489, 1651, 3725, 2114, 959, 968, 2113, 958,
	2977, 3018, 1018, 1019, 1020, 2709, 2710, 1700, 3714, 1445,
	1513, 3679, 628, 1517, 1516, 2244, 2240, 2243, 2150, 1458,
	2239, 2233, 2238, 2059, 2236, 2241, 1357, 1361, 1361, 1361,
	1477, 1464, 2329, 2503, 2504, 2270, 2228, 2172, 1478, 1613,
	1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623,
	1624, 1357, 1357, 3652, 1102, 1636, 1637, 2463, 3646, 3742,
	2173, 2174, 1558, 3628, 1639, 1589, 3584, 3726, 872, 3053,
	1557, 1172, 3559, 1105, 959, 3029, 2617, 958, 2617, 2242,
	1570, 3680, 1763, 1608, 3680, 1974, 2959, 1466, 644, 2329,
	3547, 642, 1772, 1437, 1776, 1777, 1753, 1779, 1780, 623,
	1742, 2182, 1548, 1709, 623, 1685, 645, 1437, 641, 1547,
	1542, 913, 1550, 1172, 1799, 3507, 3506, 643, 1567, 871,
	1564, 1437, 1575, 874, 873, 3501, 3653, 1405, 2708, 1563,
	1566, 3450, 640, 1565, 3027, 1562, 3629, 2913, 2911, 3450,
	3500, 1745, 1583, 2329, 3499, 2059, 1699, 1588, 2244, 2216,
	3498, 2093, 1823, 2239, 2233, 2238, 3478, 2236, 2241, 2794,
	2565, 1830, 1830, 3548, 1405, 2553, 1405, 1405, 2453, 2444,
	623, 623, 2359, 1772, 1772, 1627, 2050, 1437, 1902, 1903,
	1915, 1174, 1175, 1176, 1173, 3477, 1586, 1916, 3508, 2205,
	1771, 2226, 1682, 1683, 600, 1686, 1437, 2155, 3450, 1285,
	1475, 1475, 2149, 1701, 3449, 3242, 3190, 1827, 858, 859,
	860, 861, 2242, 3450, 1778, 3156, 1708, 3450, 1710, 2148,
	1711, 1712, 1713, 3450, 623, 1772, 1437, 2092, 1960, 2059,
	623, 623, 623, 1965, 1966, 2121, 1174, 1175, 1176, 1173,
	1970, 1971, 1972, 1748, 3123, 1800, 1978, 2041, 1174, 1175,
	1176, 1173, 3119, 197, 1852, 1946, 197, 197, 2059, 197,
	1951, 1136, 1340, 1642, 1714, 1815, 1423, 1174, 1175, 1176,
	1173, 1897, 1898, 3727, 3177, 1807, 1808, 3450, 2359, 3191,
	2798, 1822, 2215, 1533, 1825, 1826, 2619, 3143, 3157, 1743,
	3037, 2466, 1817, 1818, 2880, 2770, 1634, 1635, 1749, 1700,
	1700, 2021, 2465, 2528, 2520, 2457, 2221, 2109, 1700, 1700,
	2094, 1929, 1828, 2090, 1767, 2035, 2479, 3124, 1690, 1691,
	1692, 2040, 1981, 1957, 3401, 3120, 1943, 1944, 1831, 1968,
	1796, 1706, 1987, 1544, 1707, 1990, 1991, 1921, 1993, 1923,
	1795, 1222, 1799, 1121, 1090, 1959, 1437, 2048, 1085, 1941,
	1942, 1720, 1721, 1936, 3240, 2029, 863, 1812, 1598, 1599,
	1600, 1601, 1602, 3038, 1962, 1963, 1964, 1806, 2329, 2461,
	1741, 2449, 2446, 1775, 1833, 1527, 1172, 1172, 1811, 1816,
	1813, 1814, 2441, 993, 1189, 2433, 993, 1791, 2431, 1172,
	2429, 1821, 993, 1205, 1820, 646, 1834, 1835, 2427, 2042,
	1643, 1804, 1904, 2204, 1647, 1648, 1649, 1650, 1920, 1901,
	1922, 2025, 1945, 1684, 1768, 1769, 1770, 1930, 2151, 2128,
	2127, 1694, 2112, 2982, 990, 992, 1782, 1783, 1784, 1785,
	3552, 2103, 2102, 990, 992, 2101, 2058, 1551, 2016, 2842,
	1801, 1802, 2205, 1958, 2442, 2447, 870, 2016, 1427, 858,
	859, 860, 861, 1357, 3736, 2442, 2419, 1775, 2434, 1428,
	2973, 2432, 3705, 2428, 2268, 1984, 1982, 1361, 1689, 1688,
	3448, 2428, 3339, 1746, 3553, 3169, 2205, 3081, 3167, 1361,
	1689, 1688, 1389, 993, 2077, 2078, 733, 743, 3423, 1832,
	2001, 2150, 1172, 1172, 1358, 1172, 734, 2031, 735, 739,
	742, 738, 736, 737, 1172, 1172, 1586, 1345, 1172, 2059,
	1552, 1346, 3368, 1425, 2022, 3367, 3340, 3353, 3311, 3170,
	2028, 2026, 3168, 2039, 990, 992, 1448, 3149, 644, 3054,
	3047, 642, 3042, 3039, 2953, 1803, 699, 2974, 2740, 623,
	623, 623, 2038, 2043, 2589, 2558, 645, 2476, 641, 2037,
	2486, 740, 2445, 623, 623, 623, 623, 643, 2350, 1819,
	1192, 1193, 1194, 1195, 1196, 1189, 2202, 1190, 1191, 1192,
	1193, 1194, 1195, 1196, 1189, 875, 2208, 1405, 1336, 1726,
	1335, 2975, 1345, 741, 1633, 2072, 1346, 1399, 1400, 1107,
	1402, 1719, 1406, 1407, 1408, 2413, 2074, 863, 2081, 1985,
	1630, 1632, 1629, 1405, 1631, 1627, 1646, 2800, 2086, 1176,
	1173, 1359, 1746, 1424, 1646, 3603, 2087, 1746, 1746, 1481,
	2262, 1985, 1764, 1173, 1453, 1454, 1455, 1456, 1457, 3380,
	1459, 1460, 1461, 1462, 1463, 3379, 2817, 2679, 1469, 1470,
	1471, 2677, 2655, 1715, 1716, 1717, 1718, 2653, 3359, 1722,
	1723, 1724, 1725, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
	1734, 1735, 1736, 1174, 1175, 1176, 1173, 1986, 3312, 3313,
	1989, 2269, 3733, 1992, 3084, 3710, 1994, 1174, 1175, 1176,
	1173, 2333, 2333, 1915, 2333, 1481, 1188, 1187, 1197, 1198,
	1190, 1191, 1192, 1193, 1194, 1195, 1196, 1189, 1174, 1175,
	1176, 1173, 600, 600, 2152, 2116, 3709, 3082, 2210, 2211,
	1105, 2144, 2146, 2147, 1224, 2073, 1437, 623, 2213, 2214,
	1174, 1175, 1176, 1173, 2588, 2075, 2076, 1223, 3656, 2034,
	2166, 2423, 623, 1246, 3732, 2232, 1704, 2184, 1105, 2403,
	617, 1245, 2231, 2217, 2541, 1476, 2542, 1915, 3627, 3307,
	2408, 1705, 2410, 3141, 3626, 3554, 197, 1174, 1175, 1176,
	1173, 2367, 1174, 1175, 1176, 1173, 2488, 993, 3503, 2274,
	2730, 2415, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 3491,
	2337, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294,
	2295, 2296, 3481, 2298, 2299, 2300, 2301, 2302, 2335, 2303,
	2339, 3471, 2122, 2123, 2354, 2125, 3308, 2209, 990, 992,
	3142, 2459, 2132, 2222, 2048, 2225, 2346, 3414, 2347, 2245,
	2246, 1437, 2251, 1437, 3342, 1437, 3341, 2729, 2083, 2728,
	1105, 3637, 2088, 3182, 2212, 2414, 2351, 2352, 2478, 2218,
	3171, 2220, 2219, 3140, 2407, 1180, 1181, 1182, 1183, 1184,
	1185, 1186, 1178, 2473, 1174, 1175, 1176, 1173, 1174, 1175,
	1176, 1173, 2312, 1482, 1437, 2506, 2361, 2945, 2838, 1913,
	2726, 2812, 2811, 2100, 2405, 2713, 2341, 2712, 2711, 2703,
	2513, 2107, 2697, 2412, 2715, 1437, 2727, 2696, 2695, 1417,
	1419, 1187, 1197, 1198, 1190, 1191, 1192, 1193, 1194, 1195,
	1196, 1189, 2355, 2124, 2861, 2694, 2358, 2554, 2129, 2130,
	2131, 2469, 2435, 2134, 2135, 2136, 2137, 2138, 2139, 2140,
	2141, 2142, 2143, 2154, 622, 622, 2873, 2725, 2404, 1361,
	630, 2406, 2455, 2456, 2505, 2517, 2518, 1174, 1175, 1176,
	1173, 2714, 1105, 2004, 2003, 2002, 1105, 1998, 1997, 2490,
	1954, 2490, 1435, 1437, 1953, 2514, 2586, 2494, 1952, 2512,
	3540, 1545, 1772, 1303, 694, 2566, 3148, 696, 2515, 2367,
	2615, 2475, 695, 1435, 2745, 2931, 2621, 1088, 2470, 1174,
	1175, 1176, 1173, 3571, 2451, 2872, 2484, 1174, 1175, 1176,
	1173, 2091, 2631, 3729, 3728, 2460, 2462, 3274, 3703, 3671,
	3670, 1105, 2467, 3667, 2545, 1174, 1175, 1176, 1173, 2652,
	3536, 3316, 1174, 1175, 1176, 1173, 1105, 1105, 1105, 1830,
	3521, 3512, 1105, 3495, 2663, 2664, 2665, 2666, 1105, 2673,
	2645, 2674, 2675, 1087, 2676, 3490, 2678, 2604, 2480, 2481,
	2658, 2659, 2496, 2600, 3583, 2662, 3489, 2673, 993, 3445,
	3443, 2669, 1174, 1175, 1176, 1173, 3415, 3361, 2612, 2333,
	2601, 3323, 3294, 3293, 745, 122, 1174, 1175, 1176, 1173,
	122, 3272, 3270, 2731, 2105, 3249, 3246, 630, 3244, 1852,
	2735, 600, 3139, 3138, 2633, 1961, 1772, 1105, 1915, 1915,
	1915, 1915, 2575, 3135, 2097, 3116, 2622, 3114, 3048, 1105,
	1915, 1586, 3044, 2333, 3035, 3034, 2954, 1746, 3295, 1746,
	2753, 2918, 2917, 2624, 2646, 2915, 2159, 2650, 2627, 1437,
	2852, 2650, 2753, 629, 2567, 2849, 122, 1746, 1746, 2657,
	623, 623, 2623, 2584, 2810, 1174, 1175, 1176, 1173, 2784,
	2104, 2628, 2629, 2724, 2716, 3567, 8, 2614, 7, 2706,
	2620, 2704, 2700, 2699, 2568, 2698, 2570, 2555, 800, 799,
	1475, 2452, 2007, 2000, 2632, 3436, 2635, 1174, 1175, 1176,
	1173, 1756, 1755, 2648, 1546, 2483, 2766, 1253, 2654, 1249,
	1248, 2685, 2686, 1091, 867, 2661, 197, 1174, 1175, 1176,
	1173, 197, 2523, 2524, 3435, 3424, 2701, 2702, 2529, 1197,
	1198, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1189, 2448,
	3296, 3281, 2693, 1700, 3162, 1700, 3161, 3160, 2827, 3132,
	2737, 180, 2705, 169, 143, 2089, 3128, 2795, 2837, 3126,
	3125, 3122, 3121, 1775, 1437, 3115, 3113, 2844, 2630, 991,
	3097, 3087, 2736, 3086, 3072, 2741, 122, 3071, 2983, 2754,
	2755, 2756, 2757, 2921, 2910, 2878, 2767, 2765, 2871, 2863,
	2862, 122, 2856, 122, 2793, 2801, 2769, 2564, 2739, 2785,
	2805, 2430, 2782, 2487, 2426, 2425, 2493, 2133, 2126, 2120,
	2119, 2118, 2117, 2507, 2508, 2822, 3283, 1501, 2115, 2111,
	174, 2510, 2511, 2830, 1745, 3282, 993, 1502, 1503, 2826,
	1174, 1175, 1176, 1173, 993, 2110, 2778, 2516, 2768, 2108,
	2099, 1508, 1509, 1174, 1175, 1176, 1173, 2096, 2866, 2824,
	2868, 3230, 1174, 1175, 1176, 1173, 2831, 2095, 1513, 2799,
	2006, 1517, 1516, 2916, 2651, 1598, 1746, 2846, 3111, 2803,
	1105, 2802, 2876, 1739, 1738, 1737, 2934, 1703, 1174, 1175,
	1176, 1173, 2823, 2841, 1702, 2820, 2949, 1693, 2825, 180,
	2818, 623, 2834, 2833, 2832, 1174, 1175, 1176, 1173, 1174,
	1175, 1176, 1173, 2963, 1105, 1449, 1447, 623, 1105, 1105,
	3482, 3685, 2875, 3655, 2853, 1243, 2854, 1915, 2202, 3566,
	2981, 2840, 3509, 3497, 2860, 3492, 1496, 3395, 3378, 3374,
	3352, 2625, 2626, 3336, 3257, 2869, 2870, 3255, 2262, 1174,
	1175, 1176, 1173, 3228, 3227, 2864, 2865, 3224, 3223, 2957,
	3006, 3189, 3009, 3186, 3009, 3009, 2920, 2867, 174, 1105,
	2912, 3184, 3151, 1507, 1188, 1187, 1197, 1198, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1189, 2874, 1498, 3030, 2966,
	1512, 2600, 2539, 2970, 1515, 1504, 1437, 1437, 993, 3026,
	993, 2993, 2995, 2919, 993, 2914, 2538, 3028, 1343, 2732,
	2656, 2608, 2607, 1174, 1175, 1176, 1173, 2602, 2989, 1174,
	1175, 1176, 1173, 2569, 2979, 2537, 2950, 2540, 2440, 993,
	622, 1095, 2956, 1174, 1175, 1176, 1173, 2349, 2304, 990,
	992, 1103, 2203, 623, 2976, 2980, 2965, 3004, 2934, 2175,
	2968, 2969, 1174, 1175, 1176, 1173, 2153, 1628, 174, 1772,
	1772, 3014, 3005, 1127, 2984, 2988, 3031, 3032, 2232, 2985,
	2986, 2536, 1967, 1766, 1752, 2231, 1571, 1530, 3010, 3011,
	1505, 1302, 3015, 2535, 1435, 1435, 3063, 2534, 1287, 1283,
	1282, 3581, 2533, 2987, 1281, 1280, 1279, 1278, 1174, 1175,
	1176, 1173, 1277, 1276, 1275, 1105, 1274, 1273, 1272, 2506,
	1174, 1175, 1176, 1173, 1174, 1175, 1176, 1173, 3085, 1174,
	1175, 1176, 1173, 2532, 2885, 2886, 3579, 2531, 2367, 1271,
	2887, 2888, 2889, 2890, 1270, 2891, 2892, 2893, 2894, 2895,
	2896, 2897, 2898, 2899, 2900, 2804, 1269, 2806, 1268, 1267,
	1174, 1175, 1176, 1173, 1174, 1175, 1176, 1173, 1266, 3041,
	3045, 623, 3040, 3050, 3051, 3046, 1746, 1265, 1264, 1263,
	1262, 1746, 3577, 2530, 3061, 1261, 1260, 3036, 1259, 2034,
	1256, 1255, 1254, 1252, 1251, 1250, 3065, 1247, 1240, 1239,
	1237, 1236, 3052, 1200, 1235, 1204, 3068, 3069, 3070, 3043,
	1174, 1175, 1176, 1173, 2527, 1234, 3074, 3064, 1233, 3080,
	1232, 1201, 1203, 1199, 2855, 1202, 1188, 1187, 1197, 1198,
	1190, 1191, 1192, 1193, 1194, 1195, 1196, 1189, 2526, 1231,
	1230, 1174, 1175, 1176, 1173, 2525, 1229, 3098, 2877, 3350,
	1228, 122, 122, 991, 3100, 3099, 1227, 1226, 3104, 2482,
	1221, 1220, 1219, 1218, 3117, 1174, 1175, 1176, 1173, 1138,
	1089, 2490, 1174, 1175, 1176, 1173, 3225, 3109, 3103, 3057,
	3058, 3155, 2207, 1188, 1187, 1197, 1198, 1190, 1191, 1192,
	1193, 1194, 1195, 1196, 1189, 2189, 1126, 2333, 1915, 3174,
	3683, 2519, 3012, 1188, 1187, 1197, 1198, 1190, 1191, 1192,
	1193, 1194, 1195, 1196, 1189, 2509, 3131, 3642, 3060, 2590,
	2360, 3192, 2009, 3134, 1105, 1206, 1137, 993, 1174, 1175,
	1176, 1173, 3062, 3006, 993, 2759, 2762, 1105, 2758, 1337,
	3129, 2763, 1174, 1175, 1176, 1173, 2760, 3193, 1105, 2485,
	3239, 2761, 3357, 3259, 1437, 2764, 1641, 2325, 2326, 2450,
	3232, 3260, 2443, 107, 57, 3146, 3176, 1793, 1794, 2952,
	1772, 2669, 56, 3002, 1105, 3003, 1174, 1175, 1176, 1173,
	3101, 3102, 1401, 1174, 1175, 1176, 1173, 1788, 1789, 1790,
	3222, 2836, 3013, 2272, 3183, 3173, 3185, 2753, 3235, 3075,
	3179, 1889, 1490, 197, 2438, 2474, 1443, 3215, 2455, 2456,
	3258, 1541, 2316, 3172, 1524, 3251, 1105, 3694, 2165, 3152,
	3153, 3154, 625, 626, 3241, 3158, 3159, 3261, 3234, 3231,
	3175, 627, 1969, 1132, 2929, 3229, 2681, 2922, 3178, 2753,
	3238, 2634, 1435, 2682, 2683, 2684, 3243, 3248, 3245, 2321,
	2324, 2325, 2326, 2322, 1105, 2323, 2327, 2609, 3253, 3252,
	2321, 2324, 2325, 2326, 2322, 2224, 2323, 2327, 3250, 2198,
	1797, 1291, 1105, 1437, 1437, 3279, 1765, 3494, 2963, 1689,
	1688, 3033, 3265, 1298, 1299, 1296, 1297, 2313, 3247, 2309,
	3331, 1900, 3331, 3275, 1398, 3319, 1397, 3276, 1294, 1295,
	1292, 1293, 1165, 3067, 2787, 1105, 3346, 1105, 2164, 2036,
	3325, 3326, 1350, 1328, 1373, 3349, 3662, 3351, 3660, 3620,
	3600, 3599, 3597, 3543, 1437, 3510, 3409, 3303, 1592, 3302,
	1592, 3301, 3322, 3408, 3347, 3271, 3118, 3094, 3093, 3078,
	3298, 2257, 623, 3321, 1105, 1105, 3324, 2227, 1105, 1105,
	3335, 1543, 3077, 3334, 3328, 2797, 1349, 3687, 3686, 3176,
	3345, 1435, 1639, 2839, 2191, 993, 2098, 3319, 3319, 1123,
	3686, 3319, 3319, 3397, 3687, 3376, 1799, 3073, 3406, 3382,
	3383, 3222, 3362, 3393, 3394, 3358, 3355, 3410, 3411, 1102,
	1365, 3354, 65, 3392, 858, 859, 860, 861, 3215, 1102,
	1437, 3360, 184, 3, 1446, 2, 3706, 3707, 629, 3110,
	1, 2546, 1639, 1750, 1300, 862, 3112, 3403, 857, 1414,
	2342, 1947, 1441, 3343, 3344, 1754, 864, 3430, 3402, 2771,
	2772, 3066, 2774, 3404, 2560, 3398, 2055, 2742, 2307, 2179,
	122, 2948, 1338, 906, 1695, 1556, 1015, 3127, 1116, 1553,
	3421, 3417, 1115, 1113, 1644, 747, 2012, 3463, 2733, 3425,
	3457, 3429, 2707, 3405, 3693, 3722, 3654, 3696, 1569, 731,
	3422, 3591, 3513, 1105, 3658, 3515, 3420, 2060, 1170, 2819,
	929, 788, 758, 3480, 1238, 1534, 3486, 3451, 1435, 2883,
	2881, 1017, 757, 3145, 2580, 2790, 1592, 3465, 3399, 1014,
	3460, 3458, 3400, 3279, 3459, 930, 3472, 122, 1995, 3418,
	1491, 3476, 1495, 122, 2223, 3263, 1105, 3473, 3562, 3356,
	2998, 1437, 2642, 3455, 1519, 3557, 122, 3187, 3284, 3288,
	3285, 3286, 3287, 664, 993, 1926, 598, 3493, 122, 3319,
	975, 3396, 2008, 665, 2206, 3611, 3496, 886, 1781, 2188,
	887, 3502, 879, 1786, 2598, 3292, 2597, 1609, 3532, 1179,
	1626, 2901, 2902, 1216, 703, 3526, 2085, 2577, 3210, 2783,
	64, 1105, 63, 62, 61, 1977, 205, 3511, 749, 1746,
	204, 3314, 3588, 3698, 729, 728, 3544, 727, 726, 725,
	1746, 3504, 724, 3254, 3319, 2320, 3256, 2318, 2317, 3539,
	1910, 1909, 1975, 2961, 2672, 2667, 3535, 1841, 3538, 1435,
	1839, 2660, 2252, 3262, 3561, 2259, 1838, 3546, 1105, 1836,
	1837, 3639, 3572, 3573, 3373, 2717, 1437, 3278, 1787, 3586,
	3589, 2248, 3576, 3578, 3580, 3582, 1858, 2688, 3555, 3560,
	1855, 3319, 3590, 1854, 2680, 3369, 3363, 3569, 1886, 3461,
	3330, 3194, 3195, 3575, 3201, 2197, 1040, 1036, 1038, 1039,
	1037, 2495, 2229, 3505, 2924, 3594, 1437, 2171, 3596, 3463,
	2170, 2168, 2167, 1956, 1313, 3531, 3607, 3297, 2365, 1956,
	1956, 1956, 2363, 1086, 3059, 3630, 3055, 2020, 3619, 2032,
	2835, 3638, 1911, 3621, 1907, 2190, 3585, 3623, 3438, 1792,
	880, 3624, 3625, 2186, 159, 50, 104, 157, 49, 93,
	92, 103, 155, 48, 1435, 189, 188, 191, 190, 187,
	3545, 2416, 2417, 186, 1479, 3549, 3550, 185, 3601, 3661,
	3651, 3663, 3664, 3333, 852, 39, 3622, 38, 34, 3659,
	3657, 1105, 3526, 13, 3647, 3666, 3648, 12, 3649, 35,
	3650, 22, 21, 1560, 1435, 20, 3570, 26, 32, 31,
	3486, 3675, 115, 114, 3673, 30, 113, 112, 3677, 3678,
	3676, 111, 110, 109, 3692, 3682, 3700, 3684, 29, 3699,
	3681, 3688, 3689, 3690, 3691, 19, 43, 42, 41, 9,
	102, 100, 28, 3711, 3704, 1105, 101, 98, 1673, 99,
	96, 94, 76, 75, 74, 3712, 89, 3561, 3713, 3715,
	88, 87, 86, 85, 84, 3721, 3724, 82, 1592, 83,
	928, 73, 72, 71, 1914, 70, 69, 91, 97, 95,
	3348, 80, 90, 81, 79, 180, 54, 169, 143, 3731,
	78, 77, 68, 67, 66, 141, 917, 3700, 3738, 140,
	3699, 3737, 139, 170, 138, 137, 3452, 3724, 3739, 135,
	162, 136, 134, 3743, 171, 133, 132, 131, 130, 129,
	44, 45, 46, 2879, 3668, 3669, 47, 151, 150, 152,
	154, 156, 153, 120, 1188, 1187, 1197, 1198, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1189, 158, 122, 108, 148,
	122, 122, 146, 122, 174, 149, 147, 145, 59, 11,
	105, 18, 25, 4, 0, 915, 916, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 957, 1188, 1187, 1197,
	1198, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1189, 0,
	0, 0, 0, 991, 0, 0, 122, 0, 0, 0,
	0, 0, 991, 0, 0, 0, 0, 0, 0, 0,
	0, 1669, 0, 0, 0, 0, 122, 1666, 0, 0,
	1225, 1668, 1665, 1667, 1671, 1672, 0, 0, 0, 1670,
	0, 125, 126, 0, 127, 128, 0, 0, 2176, 2177,
	2178, 2082, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2193, 2194, 2195, 2196, 0, 0, 0, 959,
	0, 0, 958, 0, 0, 1188, 1187, 1197, 1198, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1189, 0, 3568, 1188,
	1187, 1197, 1198, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
	1189, 0, 0, 1206, 0, 0, 0, 0, 0, 943,
	0, 0, 142, 168, 178, 0, 106, 918, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 161, 160, 0, 0, 0,
	0, 60, 0, 0, 920, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3635, 0, 1887, 0, 0, 0, 0, 1848,
	0, 0, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661,
	1662, 1663, 1664, 1676, 1677, 1678, 1679, 1680, 1681, 1674,
	1675, 0, 0, 0, 0, 0, 0, 0, 0, 1889,
	1857, 0, 163, 164, 165, 0, 0, 942, 940, 1890,
	1891, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 3635, 939,
	0, 0, 0, 172, 0, 1856, 0, 0, 0, 0,
	914, 1956, 0, 0, 0, 0, 0, 0, 0, 0,
	1864, 919, 952, 116, 0, 0, 0, 166, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 948, 3635, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 949, 953, 0, 0, 0, 118, 0, 1880, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 936, 3741, 934, 938, 956, 0, 0, 0, 935,
	932, 931, 0, 937, 922, 923, 921, 924, 925, 926,
	927, 0, 954, 0, 955, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 950, 951, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 0, 0, 0, 0, 0, 0, 2336, 0, 1847,
	1849, 1846, 0, 1843, 0, 0, 0, 0, 1868, 0,
	0, 0, 946, 0, 0, 0, 0, 0, 945, 1874,
	0, 0, 0, 175, 176, 0, 177, 1859, 0, 1842,
	0, 144, 0, 941, 0, 0, 51, 0, 0, 1862,
	1896, 0, 0, 1863, 1865, 1867, 0, 1869, 1870, 1871,
	1875, 1876, 1877, 1879, 1882, 1883, 1884, 0, 0, 0,
	0, 1914, 0, 0, 1872, 1881, 1873, 0, 1887, 0,
	122, 0, 0, 1848, 0, 0, 1851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2613,
	0, 0, 0, 0, 0, 0, 0, 0, 1888, 0,
	0, 119, 40, 1889, 1857, 0, 0, 0, 52, 0,
	944, 0, 0, 1890, 1891, 0, 0, 0, 123, 124,
	0, 0, 0, 0, 1844, 1845, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1856,
	0, 0, 1885, 0, 0, 0, 0, 0, 676, 675,
	682, 672, 0, 0, 1864, 0, 0, 0, 0, 1861,
	679, 680, 0, 681, 685, 0, 1860, 666, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 690, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1878, 0, 0, 0, 0, 0, 0, 0, 0, 1866,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1893, 1892, 0, 0, 0, 0, 0, 0,
	694, 0, 1880, 696, 676, 675, 682, 672, 695, 0,
	0, 0, 0, 0, 0, 0, 679, 680, 0, 681,
	685, 0, 0, 666, 0, 0, 0, 0, 0, 2788,
	2789, 0, 0, 690, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1853, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 0, 0, 1847, 2637, 1846, 694, 2636, 0, 696,
	0, 0, 1868, 0, 695, 0, 0, 1895, 0, 0,
	1894, 0, 0, 1874, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1862, 1896, 0, 0, 1863, 1865, 1867,
	0, 1869, 1870, 1871, 1875, 1876, 1877, 1879, 1882, 1883,
	1884, 0, 0, 0, 0, 0, 0, 0, 1872, 1881,
	1873, 0, 0, 0, 0, 667, 669, 668, 0, 0,
	1851, 0, 0, 0, 0, 674, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 678, 0, 0,
	0, 0, 1888, 0, 693, 1058, 0, 0, 0, 0,
	0, 671, 1914, 1914, 1914, 1914, 0, 0, 0, 0,
	0, 0, 0, 0, 1914, 0, 0, 0, 1844, 1845,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1885, 0, 0, 0,
	0, 667, 669, 668, 0, 0, 0, 0, 0, 0,
	0, 674, 0, 1861, 0, 0, 676, 675, 682, 672,
	1860, 0, 0, 678, 0, 0, 0, 0, 679, 680,
	693, 681, 685, 0, 0, 666, 0, 671, 0, 0,
	2955, 661, 1058, 0, 1878, 690, 0, 0, 0, 0,
	0, 0, 0, 1866, 0, 0, 2967, 0, 0, 0,
	122, 0, 0, 0, 0, 122, 1893, 1892, 0, 0,
	673, 677, 683, 0, 684, 686, 1044, 0, 687, 688,
	689, 0, 0, 691, 692, 0, 122, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 1066, 1070, 1072, 1074,
	1076, 1077, 1079, 0, 1084, 1080, 1081, 1082, 1083, 0,
	1061, 1062, 1063, 1064, 1042, 1043, 1067, 0, 1045, 1853,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057,
	1059, 1055, 1056, 1065, 0, 0, 0, 0, 0, 0,
	0, 1069, 1071, 1073, 1075, 1078, 673, 677, 683, 0,
	684, 686, 0, 0, 687, 688, 689, 0, 0, 691,
	692, 1895, 0, 1044, 1894, 0, 0, 1034, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1060,
	0, 1058, 1956, 1066, 1070, 1072, 1074, 1076, 1077, 1079,
	0, 1084, 1080, 1081, 1082, 1083, 0, 1061, 1062, 1063,
	1064, 1042, 1043, 1067, 0, 1045, 0, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1057, 1059, 1055, 1056,
	1065, 0, 0, 0, 0, 0, 0, 0, 1069, 1071,
	1073, 1075, 1078, 667, 669, 668, 0, 0, 0, 670,
	0, 0, 0, 674, 0, 0, 0, 0, 991, 0,
	122, 0, 0, 0, 122, 678, 0, 0, 0, 0,
	0, 1914, 693, 0, 0, 0, 1060, 0, 0, 671,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3106, 0, 1044, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 670, 0, 2491, 2492, 0,
	0, 0, 1066, 1070, 1072, 1074, 1076, 1077, 1079, 0,
	1084, 1080, 1081, 1082, 1083, 0, 1061, 1062, 1063, 1064,
	1042, 1043, 1067, 0, 1045, 0, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1057, 1059, 1055, 1056, 1065,
	0, 0, 0, 0, 0, 0, 0, 1069, 1071, 1073,
	1075, 1078, 0, 0, 0, 0, 0, 0, 673, 677,
	683, 0, 684, 686, 0, 0, 687, 688, 689, 0,
	0, 691, 692, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1068, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 670, 1068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 765, 0, 0, 0, 0, 0, 0, 0,
	0, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 1914, 0, 718, 0, 0, 0, 307, 0,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 756,
	528, 479, 398, 351, 546, 545, 0, 0, 823, 831,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	710, 3381, 0, 746, 800, 799, 733, 743, 0, 0,
	280, 203, 474, 593, 476, 475, 734, 1068, 735, 739,
	742, 738, 736, 737, 0, 815, 0, 0, 0, 0,
	0, 0, 702, 714, 0, 719, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 0, 711,
	712, 0, 0, 0, 0, 766, 0, 713, 0, 0,
	761, 740, 744, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 741, 764, 768, 301, 837, 762, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 838, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 122, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 759, 0, 590, 0, 430,
	0, 0, 821, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 763, 0, 388, 369, 834, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 611, 612,
	613, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 1697,
	1696, 1698, 442, 335, 336, 0, 314, 262, 263, 607,
	819, 365, 556, 589, 481, 0, 833, 814, 816, 817,
	820, 824, 825, 826, 827, 828, 830, 832, 836, 606,
	0, 535, 550, 609, 549, 603, 371, 0, 392, 547,
	494, 0, 539, 513, 122, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	835, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	767, 531, 532, 355, 356, 357, 358, 822, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 614, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 844, 818, 843, 845,
	846, 842, 847, 848, 829, 723, 0, 774, 840, 839,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 604,
	601, 413, 605, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 807, 781, 782, 783, 720, 784,
	778, 779, 721, 780, 808, 772, 804, 805, 748, 775,
	785, 803, 786, 806, 809, 810, 849, 850, 792, 776,
	228, 851, 789, 811, 802, 801, 787, 773, 812, 813,
	755, 750, 790, 791, 777, 795, 796, 797, 722, 769,
	770, 771, 793, 794, 751, 752, 753, 754, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 602, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 798, 765, 608, 477, 478, 588, 0,
	715, 0, 0, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 718, 0, 0, 0,
	307, 1747, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 756, 528, 479, 398, 351, 546, 545, 0, 0,
	823, 831, 0, 0, 0, 0, 0, 0, 0, 1938,
	0, 0, 710, 0, 0, 746, 800, 799, 733, 743,
	0, 0, 280, 203, 474, 593, 476, 475, 734, 0,
	735, 739, 742, 738, 736, 737, 0, 815, 0, 0,
	0, 0, 0, 0, 702, 714, 0, 719, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 711, 712, 0, 0, 0, 0, 766, 0, 713,
	0, 0, 1939, 740, 744, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 741, 764, 768, 301, 837,
	762, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 838, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 759, 0, 590,
	0, 430, 0, 0, 821, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 763, 0, 388, 369, 834,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	611, 612, 613, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 607, 819, 365, 556, 589, 481, 0, 833, 814,
	816, 817, 820, 824, 825, 826, 827, 828, 830, 832,
	836, 606, 0, 535, 550, 609, 549, 603, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 835, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 767, 531, 532, 355, 356, 357, 358, 822,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 614, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 844, 818,
	843, 845, 846, 842, 847, 848, 829, 723, 0, 774,
	840, 839, 841, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 604, 601, 413, 605, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 807, 781, 782, 783,
	720, 784, 778, 779, 721, 780, 808, 772, 804, 805,
	748, 775, 785, 803, 786, 806, 809, 810, 849, 850,
	792, 776, 228, 851, 789, 811, 802, 801, 787, 773,
	812, 813, 755, 750, 790, 791, 777, 795, 796, 797,
	722, 769, 770, 771, 793, 794, 751, 752, 753, 754,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 602,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 798, 0, 608, 477, 478,
	588, 0, 715, 180, 765, 0, 0, 0, 0, 0,
	0, 0, 0, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 718, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 1209, 528, 479, 398, 351, 546, 545, 0, 0,
	823, 831, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 710, 0, 0, 746, 800, 799, 733, 743,
	0, 0, 280, 203, 474, 593, 476, 475, 734, 0,
	735, 739, 742, 738, 736, 737, 0, 815, 0, 0,
	0, 0, 0, 0, 702, 714, 0, 719, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 711, 712, 0, 0, 0, 0, 766, 0, 713,
	0, 0, 761, 740, 744, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 741, 764, 768, 301, 837,
	762, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 838, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 759, 0, 590,
	0, 430, 0, 0, 821, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 763, 0, 388, 369, 834,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	611, 612, 613, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 607, 819, 365, 556, 589, 481, 0, 833, 814,
	816, 817, 820, 824, 825, 826, 827, 828, 830, 832,
	836, 606, 0, 535, 550, 609, 549, 603, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 835, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 767, 531, 532, 355, 356, 357, 358, 822,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 614, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 844, 818,
	843, 845, 846, 842, 847, 848, 829, 723, 0, 774,
	840, 839, 841, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 604, 601, 413, 605, 0, 264, 487, 338, 144,
	379, 312, 552, 553, 0, 0, 807, 781, 782, 783,
	720, 784, 778, 779, 721, 780, 808, 772, 804, 805,
	748, 775, 785, 803, 786, 806, 809, 810, 849, 850,
	792, 776, 228, 851, 789, 811, 802, 801, 787, 773,
	812, 813, 755, 750, 790, 791, 777, 795, 796, 797,
	722, 769, 770, 771, 793, 794, 751, 752, 753, 754,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 602,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 798, 765, 608, 477, 478,
	588, 0, 715, 0, 0, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 0, 718, 0,
	0, 0, 307, 3740, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 756, 528, 479, 398, 351, 546, 545,
	0, 0, 823, 831, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 710, 0, 0, 746, 800, 799,
	733, 743, 0, 0, 280, 203, 474, 593, 476, 475,
	734, 0, 735, 739, 742, 738, 736, 737, 0, 815,
	0, 0, 0, 0, 0, 0, 702, 714, 0, 719,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 711, 712, 0, 0, 0, 0, 766,
	0, 713, 0, 0, 761, 740, 744, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 741, 764, 768,
	301, 837, 762, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 838, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 759,
	0, 590, 0, 430, 0, 0, 821, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 763, 0, 388,
	369, 834, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 611, 612, 613, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 607, 819, 365, 556, 589, 481, 0,
	833, 814, 816, 817, 820, 824, 825, 826, 827, 828,
	830, 832, 836, 606, 0, 535, 550, 609, 549, 603,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 835, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 767, 531, 532, 355, 356, 357,
	358, 822, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 614,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	844, 818, 843, 845, 846, 842, 847, 848, 829, 723,
	0, 774, 840, 839, 841, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 604, 601, 413, 605, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 807, 781,
	782, 783, 720, 784, 778, 779, 721, 780, 808, 772,
	804, 805, 748, 775, 785, 803, 786, 806, 809, 810,
	849, 850, 792, 776, 228, 851, 789, 811, 802, 801,
	787, 773, 812, 813, 755, 750, 790, 791, 777, 795,
	796, 797, 722, 769, 770, 771, 793, 794, 751, 752,
	753, 754, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 602, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 798, 765, 608,
	477, 478, 588, 0, 715, 0, 0, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	718, 0, 0, 0, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 756, 528, 479, 398, 351,
	546, 545, 0, 0, 823, 831, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 710, 0, 0, 746,
	800, 799, 733, 743, 0, 0, 280, 203, 474, 593,
	476, 475, 734, 0, 735, 739, 742, 738, 736, 737,
	0, 815, 0, 0, 0, 0, 0, 0, 702, 714,
	0, 719, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 711, 712, 0, 0, 0,
	0, 766, 0, 713, 0, 0, 761, 740, 744, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 741,
	764, 768, 301, 837, 762, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	838, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 759, 0, 590, 0, 430, 0, 0, 821, 0,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 763,
	0, 388, 369, 834, 3636, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 611, 612, 613, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 607, 819, 365, 556, 589,
	481, 0, 833, 814, 816, 817, 820, 824, 825, 826,
	827, 828, 830, 832, 836, 606, 0, 535, 550, 609,
	549, 603, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 835, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 767, 531, 532, 355,
	356, 357, 358, 822, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 614, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 844, 818, 843, 845, 846, 842, 847, 848,
	829, 723, 0, 774, 840, 839, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 604, 601, 413, 605, 0,
	264, 487, 338, 0, 379, 312, 552, 553, 0, 0,
	807, 781, 782, 783, 720, 784, 778, 779, 721, 780,
	808, 772, 804, 805, 748, 775, 785, 803, 786, 806,
	809, 810, 849, 850, 792, 776, 228, 851, 789, 811,
	802, 801, 787, 773, 812, 813, 755, 750, 790, 791,
	777, 795, 796, 797, 722, 769, 770, 771, 793, 794,
	751, 752, 753, 754, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 602, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 798,
	765, 608, 477, 478, 588, 0, 715, 0, 0, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 718, 0, 0, 0, 307, 1747, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 756, 528, 479,
	398, 351, 546, 545, 0, 0, 823, 831, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 710, 0,
	0, 746, 800, 799, 733, 743, 0, 0, 280, 203,
	474, 593, 476, 475, 734, 0, 735, 739, 742, 738,
	736, 737, 0, 815, 0, 0, 0, 0, 0, 0,
	702, 714, 0, 719, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 711, 712, 0,
	0, 0, 0, 766, 0, 713, 0, 0, 761, 740,
	744, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 741, 764, 768, 301, 837, 762, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 838, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 759, 0, 590, 0, 430, 0, 0,
	821, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 763, 0, 388, 369, 834, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 611, 612, 613, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 607, 819, 365,
	556, 589, 481, 0, 833, 814, 816, 817, 820, 824,
	825, 826, 827, 828, 830, 832, 836, 606, 0, 535,
	550, 609, 549, 603, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 835, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 767, 531,
	532, 355, 356, 357, 358, 822, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 614, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 844, 818, 843, 845, 846, 842,
	847, 848, 829, 723, 0, 774, 840, 839, 841, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 604, 601, 413,
	605, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 807, 781, 782, 783, 720, 784, 778, 779,
	721, 780, 808, 772, 804, 805, 748, 775, 785, 803,
	786, 806, 809, 810, 849, 850, 792, 776, 228, 851,
	789, 811, 802, 801, 787, 773, 812, 813, 755, 750,
	790, 791, 777, 795, 796, 797, 722, 769, 770, 771,
	793, 794, 751, 752, 753, 754, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 602, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 798, 765, 608, 477, 478, 588, 0, 715, 0,
	0, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 0, 0, 718, 0, 0, 0, 307, 0,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 756,
	528, 479, 398, 351, 546, 545, 0, 0, 823, 831,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	710, 0, 0, 746, 800, 799, 733, 743, 0, 0,
	280, 203, 474, 593, 476, 475, 734, 0, 735, 739,
	742, 738, 736, 737, 0, 815, 0, 0, 0, 0,
	0, 0, 702, 714, 0, 719, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 711,
	712, 1474, 0, 0, 0, 766, 0, 713, 0, 0,
	761, 740, 744, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 741, 764, 768, 301, 837, 762, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 838, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 759, 0, 590, 0, 430,
	0, 0, 821, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 763, 0, 388, 369, 834, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 611, 612,
	613, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 607,
	819, 365, 556, 589, 481, 0, 833, 814, 816, 817,
	820, 824, 825, 826, 827, 828, 830, 832, 836, 606,
	0, 535, 550, 609, 549, 603, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	835, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	767, 531, 532, 355, 356, 357, 358, 822, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 614, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 844, 818, 843, 845,
	846, 842, 847, 848, 829, 723, 0, 774, 840, 839,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 604,
	601, 413, 605, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 807, 781, 782, 783, 720, 784,
	778, 779, 721, 780, 808, 772, 804, 805, 748, 775,
	785, 803, 786, 806, 809, 810, 849, 850, 792, 776,
	228, 851, 789, 811, 802, 801, 787, 773, 812, 813,
	755, 750, 790, 791, 777, 795, 796, 797, 722, 769,
	770, 771, 793, 794, 751, 752, 753, 754, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 602, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 798, 0, 608, 477, 478, 588, 765,
	715, 0, 2106, 0, 0, 0, 0, 0, 367, 0,
	492, 525, 514, 597, 480, 0, 0, 0, 0, 0,
	0, 718, 0, 0, 0, 307, 0, 0, 337, 529,
	511, 521, 512, 497, 498, 499, 506, 317, 500, 501,
	502, 472, 503, 473, 504, 505, 756, 528, 479, 398,
	351, 546, 545, 0, 0, 823, 831, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 710, 0, 0,
	746, 800, 799, 733, 743, 0, 0, 280, 203, 474,
	593, 476, 475, 734, 0, 735, 739, 742, 738, 736,
	737, 0, 815, 0, 0, 0, 0, 0, 0, 702,
	714, 0, 719, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 711, 712, 0, 0,
	0, 0, 766, 0, 713, 0, 0, 761, 740, 744,
	0, 0, 0, 0, 270, 403, 420, 281, 394, 433,
	286, 401, 276, 366, 390, 0, 0, 272, 418, 400,
	348, 327, 328, 271, 0, 385, 305, 319, 302, 364,
	741, 764, 768, 301, 837, 762, 428, 274, 0, 427,
	363, 414, 419, 349, 343, 273, 416, 347, 342, 331,
	309, 838, 332, 333, 323, 375, 341, 376, 324, 353,
	352, 354, 0, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 759, 0, 590, 0, 430, 0, 0, 821,
	0, 0, 0, 402, 0, 0, 334, 0, 0, 0,
	763, 0, 388, 369, 834, 0, 0, 386, 339, 415,
	377, 421, 404, 429, 382, 378, 265, 405, 304, 350,
	277, 279, 299, 306, 308, 310, 311, 359, 360, 372,
	393, 406, 407, 408, 303, 287, 387, 288, 321, 289,
	266, 295, 293, 296, 395, 297, 268, 373, 412, 0,
	316, 383, 346, 269, 345, 374, 411, 410, 278, 437,
	443, 444, 533, 0, 449, 611, 612, 613, 458, 463,
	464, 465, 467, 468, 469, 470, 534, 551, 518, 488,
	451, 542, 485, 489, 490, 554, 0, 0, 0, 442,
	335, 336, 0, 314, 262, 263, 607, 819, 365, 556,
	589, 481, 0, 833, 814, 816, 817, 820, 824, 825,
	826, 827, 828, 830, 832, 836, 606, 0, 535, 550,
	609, 549, 603, 371, 0, 392, 547, 494, 0, 539,
	513, 0, 540, 509, 544, 0, 483, 0, 399, 423,
	435, 452, 455, 484, 569, 570, 571, 267, 454, 573,
	574, 575, 576, 577, 578, 579, 572, 835, 516, 493,
	519, 434, 496, 495, 0, 0, 530, 767, 531, 532,
	355, 356, 357, 358, 822, 557, 285, 453, 381, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 520, 614, 0, 580, 581, 0, 0, 447, 448,
	313, 320, 466, 322, 284, 370, 315, 432, 329, 0,
	459, 524, 460, 583, 586, 584, 585, 362, 325, 326,
	396, 330, 340, 384, 431, 368, 389, 282, 422, 397,
	344, 510, 537, 844, 818, 843, 845, 846, 842, 847,
	848, 829, 723, 0, 774, 840, 839, 841, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	564, 563, 562, 561, 560, 559, 558, 0, 0, 507,
	409, 294, 256, 290, 291, 298, 604, 601, 413, 605,
	0, 264, 487, 338, 0, 379, 312, 552, 553, 0,
	0, 807, 781, 782, 783, 720, 784, 778, 779, 721,
	780, 808, 772, 804, 805, 748, 775, 785, 803, 786,
	806, 809, 810, 849, 850, 792, 776, 228, 851, 789,
	811, 802, 801, 787, 773, 812, 813, 755, 750, 790,
	791, 777, 795, 796, 797, 722, 769, 770, 771, 793,
	794, 751, 752, 753, 754, 0, 0, 0, 438, 439,
	440, 462, 424, 486, 602, 0, 0, 0, 0, 0,
	0, 0, 536, 548, 582, 0, 591, 592, 594, 596,
	798, 765, 608, 477, 478, 588, 0, 715, 0, 0,
	367, 0, 492, 525, 514, 597, 480, 0, 0, 0,
	0, 0, 0, 718, 0, 0, 0, 307, 0, 0,
	337, 529, 511, 521, 512, 497, 498, 499, 506, 317,
	500, 501, 502, 472, 503, 473, 504, 505, 756, 528,
	479, 398, 351, 546, 545, 0, 0, 823, 831, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 710,
	0, 0, 746, 800, 799, 733, 743, 0, 0, 280,
	203, 474, 593, 476, 475, 734, 0, 735, 739, 742,
	738, 736, 737, 0, 815, 0, 0, 0, 0, 0,
	0, 702, 714, 0, 719, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 711, 712,
	1740, 0, 0, 0, 766, 0, 713, 0, 0, 761,
	740, 744, 0, 0, 0, 0, 270, 403, 420, 281,
	394, 433, 286, 401, 276, 366, 390, 0, 0, 272,
	418, 400, 348, 327, 328, 271, 0, 385, 305, 319,
	302, 364, 741, 764, 768, 301, 837, 762, 428, 274,
	0, 427, 363, 414, 419, 349, 343, 273, 416, 347,
	342, 331, 309, 838, 332, 333, 323, 375, 341, 376,
	324, 353, 352, 354, 0, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 587, 759, 0, 590, 0, 430, 0,
	0, 821, 0, 0, 0, 402, 0, 0, 334, 0,
	0, 0, 763, 0, 388, 369, 834, 0, 0, 386,
	339, 415, 377, 421, 404, 429, 382, 378, 265, 405,
	304, 350, 277, 279, 299, 306, 308, 310, 311, 359,
	360, 372, 393, 406, 407, 408, 303, 287, 387, 288,
	321, 289, 266, 295, 293, 296, 395, 297, 268, 373,
	412, 0, 316, 383, 346, 269, 345, 374, 411, 410,
	278, 437, 443, 444, 533, 0, 449, 611, 612, 613,
	458, 463, 464, 465, 467, 468, 469, 470, 534, 551,
	518, 488, 451, 542, 485, 489, 490, 554, 0, 0,
	0, 442, 335, 336, 0, 314, 262, 263, 607, 819,
	365, 556, 589, 481, 0, 833, 814, 816, 817, 820,
	824, 825, 826, 827, 828, 830, 832, 836, 606, 0,
	535, 550, 609, 549, 603, 371, 0, 392, 547, 494,
	0, 539, 513, 0, 540, 509, 544, 0, 483, 0,
	399, 423, 435, 452, 455, 484, 569, 570, 571, 267,
	454, 573, 574, 575, 576, 577, 578, 579, 572, 835,
	516, 493, 519, 434, 496, 495, 0, 0, 530, 767,
	531, 532, 355, 356, 357, 358, 822, 557, 285, 453,
	381, 0, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 523, 520, 614, 0, 580, 581, 0, 0,
	447, 448, 313, 320, 466, 322, 284, 370, 315, 432,
	329, 0, 459, 524, 460, 583, 586, 584, 585, 362,
	325, 326, 396, 330, 340, 384, 431, 368, 389, 282,
	422, 397, 344, 510, 537, 844, 818, 843, 845, 846,
	842, 847, 848, 829, 723, 0, 774, 840, 839, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 564, 563, 562, 561, 560, 559, 558, 0,
	0, 507, 409, 294, 256, 290, 291, 298, 604, 601,
	413, 605, 0, 264, 487, 338, 0, 379, 312, 552,
	553, 0, 0, 807, 781, 782, 783, 720, 784, 778,
	779, 721, 780, 808, 772, 804, 805, 748, 775, 785,
	803, 786, 806, 809, 810, 849, 850, 792, 776, 228,
	851, 789, 811, 802, 801, 787, 773, 812, 813, 755,
	750, 790, 791, 777, 795, 796, 797, 722, 769, 770,
	771, 793, 794, 751, 752, 753, 754, 0, 0, 0,
	438, 439, 440, 462, 424, 486, 602, 0, 0, 0,
	0, 0, 0, 0, 536, 548, 582, 0, 591, 592,
	594, 596, 798, 765, 608, 477, 478, 588, 0, 715,
	0, 0, 367, 0, 492, 525, 514, 597, 480, 0,
	0, 0, 0, 0, 0, 718, 0, 0, 0, 307,
	0, 0, 337, 529, 511, 521, 512, 497, 498, 499,
	506, 317, 500, 501, 502, 472, 503, 473, 504, 505,
	756, 528, 479, 398, 351, 546, 545, 0, 0, 823,
	831, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 710, 0, 0, 746, 800, 799, 733, 743, 0,
	0, 280, 203, 474, 593, 476, 475, 734, 0, 735,
	739, 742, 738, 736, 737, 0, 815, 0, 0, 0,
	0, 0, 0, 702, 714, 0, 719, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	711, 712, 0, 0, 0, 0, 766, 0, 713, 0,
	0, 761, 740, 744, 0, 0, 0, 0, 270, 403,
	420, 281, 394, 433, 286, 401, 276, 366, 390, 0,
	0, 272, 418, 400, 348, 327, 328, 271, 0, 385,
	305, 319, 302, 364, 741, 764, 768, 301, 837, 762,
	428, 274, 0, 427, 363, 414, 419, 349, 343, 273,
	416, 347, 342, 331, 309, 838, 332, 333, 323, 375,
	341, 376, 324, 353, 352, 354, 0, 0, 0, 0,
	0, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 759, 0, 590, 0,
	430, 0, 0, 821, 0, 0, 0, 402, 0, 0,
	334, 0, 0, 0, 763, 0, 388, 369, 834, 0,
	0, 386, 339, 415, 377, 421, 404, 429, 382, 378,
	265, 405, 304, 350, 277, 279, 299, 306, 308, 310,
	311, 359, 360, 372, 393, 406, 407, 408, 303, 287,
	387, 288, 321, 289, 266, 295, 293, 296, 395, 297,
	268, 373, 412, 0, 316, 383, 346, 269, 345, 374,
	411, 410, 278, 437, 443, 444, 533, 0, 449, 611,
	612, 613, 458, 463, 464, 465, 467, 468, 469, 470,
	534, 551, 518, 488, 451, 542, 485, 489, 490, 554,
	0, 0, 0, 442, 335, 336, 0, 314, 262, 263,
	607, 819, 365, 556, 589, 481, 0, 833, 814, 816,
	817, 820, 824, 825, 826, 827, 828, 830, 832, 836,
	606, 0, 535, 550, 609, 549, 603, 371, 0, 392,
	547, 494, 0, 539, 513, 0, 540, 509, 544, 0,
	483, 0, 399, 423, 435, 452, 455, 484, 569, 570,
	571, 267, 454, 573, 574, 575, 576, 577, 578, 579,
	572, 835, 516, 493, 519, 434, 496, 495, 0, 0,
	530, 767, 531, 532, 355, 356, 357, 358, 822, 557,
	285, 453, 381, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 522, 523, 520, 614, 0, 580, 581,
	0, 0, 447, 448, 313, 320, 466, 322, 284, 370,
	315, 432, 329, 0, 459, 524, 460, 583, 586, 584,
	585, 362, 325, 326, 396, 330, 340, 384, 431, 368,
	389, 282, 422, 397, 344, 510, 537, 844, 818, 843,
	845, 846, 842, 847, 848, 829, 723, 0, 774, 840,
	839, 841, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 564, 563, 562, 561, 560, 559,
	558, 0, 0, 507, 409, 294, 256, 290, 291, 298,
	604, 601, 413, 605, 0, 264, 487, 338, 0, 379,
	312, 552, 553, 0, 0, 807, 781, 782, 783, 720,
	784, 778, 779, 721, 780, 808, 772, 804, 805, 748,
	775, 785, 803, 786, 806, 809, 810, 849, 850, 792,
	776, 228, 851, 789, 811, 802, 801, 787, 773, 812,
	813, 755, 750, 790, 791, 777, 795, 796, 797, 722,
	769, 770, 771, 793, 794, 751, 752, 753, 754, 0,
	0, 0, 438, 439, 440, 462, 424, 486, 602, 0,
	0, 0, 0, 0, 0, 0, 536, 548, 582, 0,
	591, 592, 594, 596, 798, 765, 608, 477, 478, 588,
	0, 715, 0, 0, 367, 0, 492, 525, 514, 597,
	480, 0, 0, 0, 0, 0, 0, 718, 0, 0,
	0, 307, 0, 0, 337, 529, 511, 521, 512, 497,
	498, 499, 506, 317, 500, 501, 502, 472, 503, 473,
	504, 505, 756, 528, 479, 398, 351, 546, 545, 0,
	0, 823, 831, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 710, 0, 0, 746, 800, 799, 733,
	743, 0, 0, 280, 203, 474, 593, 476, 475, 2543,
	0, 2544, 739, 742, 738, 736, 737, 0, 815, 0,
	0, 0, 0, 0, 0, 702, 714, 0, 719, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 711, 712, 0, 0, 0, 0, 766, 0,
	713, 0, 0, 761, 740, 744, 0, 0, 0, 0,
	270, 403, 420, 281, 394, 433, 286, 401, 276, 366,
	390, 0, 0, 272, 418, 400, 348, 327, 328, 271,
	0, 385, 305, 319, 302, 364, 741, 764, 768, 301,
	837, 762, 428, 274, 0, 427, 363, 414, 419, 349,
	343, 273, 416, 347, 342, 331, 309, 838, 332, 333,
	323, 375, 341, 376, 324, 353, 352, 354, 0, 0,
	0, 0, 0, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 587, 759, 0,
	590, 0, 430, 0, 0, 821, 0, 0, 0, 402,
	0, 0, 334, 0, 0, 0, 763, 0, 388, 369,
	834, 0, 0, 386, 339, 415, 377, 421, 404, 429,
	382, 378, 265, 405, 304, 350, 277, 279, 299, 306,
	308, 310, 311, 359, 360, 372, 393, 406, 407, 408,
	303, 287, 387, 288, 321, 289, 266, 295, 293, 296,
	395, 297, 268, 373, 412, 0, 316, 383, 346, 269,
	345, 374, 411, 410, 278, 437, 443, 444, 533, 0,
	449, 611, 612, 613, 458, 463, 464, 465, 467, 468,
	469, 470, 534, 551, 518, 488, 451, 542, 485, 489,
	490, 554, 0, 0, 0, 442, 335, 336, 0, 314,
	262, 263, 607, 819, 365, 556, 589, 481, 0, 833,
	814, 816, 817, 820, 824, 825, 826, 827, 828, 830,
	832, 836, 606, 0, 535, 550, 609, 549, 603, 371,
	0, 392, 547, 494, 0, 539, 513, 0, 540, 509,
	544, 0, 483, 0, 399, 423, 435, 452, 455, 484,
	569, 570, 571, 267, 454, 573, 574, 575, 576, 577,
	578, 579, 572, 835, 516, 493, 519, 434, 496, 495,
	0, 0, 530, 767, 531, 532, 355, 356, 357, 358,
	822, 557, 285, 453, 381, 0, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 522, 523, 520, 614, 0,
	580, 581, 0, 0, 447, 448, 313, 320, 466, 322,
	284, 370, 315, 432, 329, 0, 459, 524, 460, 583,
	586, 584, 585, 362, 325, 326, 396, 330, 340, 384,
	431, 368, 389, 282, 422, 397, 344, 510, 537, 844,
	818, 843, 845, 846, 842, 847, 848, 829, 723, 0,
	774, 840, 839, 841, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 564, 563, 562, 561,
	560, 559, 558, 0, 0, 507, 409, 294, 256, 290,
	291, 298, 604, 601, 413, 605, 0, 264, 487, 338,
	0, 379, 312, 552, 553, 0, 0, 807, 781, 782,
	783, 720, 784, 778, 779, 721, 780, 808, 772, 804,
	805, 748, 775, 785, 803, 786, 806, 809, 810, 849,
	850, 792, 776, 228, 851, 789, 811, 802, 801, 787,
	773, 812, 813, 755, 750, 790, 791, 777, 795, 796,
	797, 722, 769, 770, 771, 793, 794, 751, 752, 753,
	754, 0, 0, 0, 438, 439, 440, 462, 424, 486,
	602, 0, 0, 0, 0, 0, 0, 0, 536, 548,
	582, 0, 591, 592, 594, 596, 798, 765, 608, 477,
	478, 588, 0, 715, 0, 0, 367, 0, 492, 525,
	514, 597, 480, 0, 0, 1610, 0, 0, 0, 718,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 756, 528, 479, 398, 351, 546,
	545, 0, 0, 823, 831, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 710, 0, 0, 746, 800,
	799, 733, 743, 0, 0, 280, 203, 474, 593, 476,
	475, 734, 0, 735, 739, 742, 738, 736, 737, 0,
	815, 0, 0, 0, 0, 0, 0, 0, 714, 0,
	719, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 711, 712, 0, 0, 0, 0,
	766, 0, 713, 0, 0, 761, 740, 744, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 741, 764,
	768, 301, 837, 762, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 838,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	759, 0, 590, 0, 430, 0, 0, 821, 0, 0,
	0, 402, 0, 0, 334, 0, 0, 0, 763, 0,
	388, 369, 834, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 1611, 1612,
	533, 0, 449, 611, 612, 613, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 607, 819, 365, 556, 589, 481,
	0, 833, 814, 816, 817, 820, 824, 825, 826, 827,
	828, 830, 832, 836, 606, 0, 535, 550, 609, 549,
	603, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 835, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 767, 531, 532, 355, 356,
	357, 358, 822, 557, 285, 453, 381, 0, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	614, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 844, 818, 843, 845, 846, 842, 847, 848, 829,
	723, 0, 774, 840, 839, 841, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 604, 601, 413, 605, 0, 264,
	487, 338, 0, 379, 312, 552, 553, 0, 0, 807,
	781, 782, 783, 720, 784, 778, 779, 721, 780, 808,
	772, 804, 805, 748, 775, 785, 803, 786, 806, 809,
	810, 849, 850, 792, 776, 228, 851, 789, 811, 802,
	801, 787, 773, 812, 813, 755, 750, 790, 791, 777,
	795, 796, 797, 722, 769, 770, 771, 793, 794, 751,
	752, 753, 754, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 602, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 798, 765,
	608, 477, 478, 588, 0, 715, 0, 0, 367, 0,
	492, 525, 514, 597, 480, 0, 0, 0, 0, 0,
	0, 718, 0, 0, 0, 307, 0, 0, 337, 529,
	511, 521, 512, 497, 498, 499, 506, 317, 500, 501,
	502, 472, 503, 473, 504, 505, 756, 528, 479, 398,
	351, 546, 545, 0, 0, 823, 831, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 710, 0, 0,
	746, 800, 799, 733, 743, 0, 0, 280, 203, 474,
	593, 476, 475, 734, 0, 735, 739, 742, 738, 736,
	737, 0, 815, 0, 0, 0, 0, 0, 0, 0,
	714, 0, 719, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 711, 712, 0, 0,
	0, 0, 766, 0, 713, 0, 0, 761, 740, 744,
	0, 0, 0, 0, 270, 403, 420, 281, 394, 433,
	286, 401, 276, 366, 390, 0, 0, 272, 418, 400,
	348, 327, 328, 271, 0, 385, 305, 319, 302, 364,
	741, 764, 768, 301, 837, 762, 428, 274, 0, 427,
	363, 414, 419, 349, 343, 273, 416, 347, 342, 331,
	309, 838, 332, 333, 323, 375, 341, 376, 324, 353,
	352, 354, 0, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 759, 0, 590, 0, 430, 0, 0, 821,
	0, 0, 0, 402, 0, 0, 334, 0, 0, 0,
	763, 0, 388, 369, 834, 0, 0, 386, 339, 415,
	377, 421, 404, 429, 382, 378, 265, 405, 304, 350,
	277, 279, 299, 306, 308, 310, 311, 359, 360, 372,
	393, 406, 407, 408, 303, 287, 387, 288, 321, 289,
	266, 295, 293, 296, 395, 297, 268, 373, 412, 0,
	316, 383, 346, 269, 345, 374, 411, 410, 278, 437,
	443, 444, 533, 0, 449, 611, 612, 613, 458, 463,
	464, 465, 467, 468, 469, 470, 534, 551, 518, 488,
	451, 542, 485, 489, 490, 554, 0, 0, 0, 442,
	335, 336, 0, 314, 262, 263, 607, 819, 365, 556,
	589, 481, 0, 833, 814, 816, 817, 820, 824, 825,
	826, 827, 828, 830, 832, 836, 606, 0, 535, 550,
	609, 549, 603, 371, 0, 392, 547, 494, 0, 539,
	513, 0, 540, 509, 544, 0, 483, 0, 399, 423,
	435, 452, 455, 484, 569, 570, 571, 267, 454, 573,
	574, 575, 576, 577, 578, 579, 572, 835, 516, 493,
	519, 434, 496, 495, 0, 0, 530, 767, 531, 532,
	355, 356, 357, 358, 822, 557, 285, 453, 381, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 520, 614, 0, 580, 581, 0, 0, 447, 448,
	313, 320, 466, 322, 284, 370, 315, 432, 329, 0,
	459, 524, 460, 583, 586, 584, 585, 362, 325, 326,
	396, 330, 340, 384, 431, 368, 389, 282, 422, 397,
	344, 510, 537, 844, 818, 843, 845, 846, 842, 847,
	848, 829, 723, 0, 774, 840, 839, 841, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	564, 563, 562, 561, 560, 559, 558, 0, 0, 507,
	409, 294, 256, 290, 291, 298, 604, 601, 413, 605,
	0, 264, 487, 338, 0, 379, 312, 552, 553, 0,
	0, 807, 781, 782, 783, 720, 784, 778, 779, 721,
	780, 808, 772, 804, 805, 748, 775, 785, 803, 786,
	806, 809, 810, 849, 850, 792, 776, 228, 851, 789,
	811, 802, 801, 787, 773, 812, 813, 755, 750, 790,
	791, 777, 795, 796, 797, 722, 769, 770, 771, 793,
	794, 751, 752, 753, 754, 0, 0, 0, 438, 439,
	440, 462, 424, 486, 602, 0, 0, 0, 0, 0,
	0, 0, 536, 548, 582, 0, 591, 592, 594, 596,
	798, 765, 608, 477, 478, 588, 0, 715, 0, 0,
	367, 0, 492, 525, 514, 597, 480, 0, 0, 0,
	0, 0, 0, 718, 0, 0, 0, 307, 0, 0,
	337, 529, 511, 521, 512, 497, 498, 499, 506, 317,
	500, 501, 502, 472, 503, 473, 504, 505, 756, 528,
	479, 398, 351, 546, 545, 0, 0, 823, 831, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 746, 800, 799, 733, 743, 0, 0, 280,
	203, 474, 593, 476, 475, 734, 0, 735, 739, 742,
	738, 736, 737, 0, 815, 0, 0, 0, 0, 0,
	0, 702, 714, 0, 719, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 711, 712,
	0, 0, 0, 0, 766, 0, 713, 0, 0, 761,
	740, 744, 0, 0, 0, 0, 270, 403, 420, 281,
	394, 433, 286, 401, 276, 366, 390, 0, 0, 272,
	418, 400, 348, 327, 328, 271, 0, 385, 305, 319,
	302, 364, 741, 764, 768, 301, 837, 762, 428, 274,
	0, 427, 363, 414, 419, 349, 343, 273, 416, 347,
	342, 331, 309, 838, 332, 333, 323, 375, 341, 376,
	324, 353, 352, 354, 0, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 587, 759, 0, 590, 0, 430, 0,
	0, 821, 0, 0, 0, 402, 0, 0, 334, 0,
	0, 0, 763, 0, 388, 369, 834, 0, 0, 386,
	339, 415, 377, 421, 404, 429, 382, 378, 265, 405,
	304, 350, 277, 279, 299, 306, 308, 310, 311, 359,
	360, 372, 393, 406, 407, 408, 303, 287, 387, 288,
	321, 289, 266, 295, 293, 296, 395, 297, 268, 373,
	412, 0, 316, 383, 346, 269, 345, 374, 411, 410,
	278, 437, 443, 444, 533, 0, 449, 611, 612, 613,
	458, 463, 464, 465, 467, 468, 469, 470, 534, 551,
	518, 488, 451, 542, 485, 489, 490, 554, 0, 0,
	0, 442, 335, 336, 0, 314, 262, 263, 607, 819,
	365, 556, 589, 481, 0, 833, 814, 816, 817, 820,
	824, 825, 826, 827, 828, 830, 832, 836, 606, 0,
	535, 550, 609, 549, 603, 371, 0, 392, 547, 494,
	0, 539, 513, 0, 540, 509, 544, 0, 483, 0,
	399, 423, 435, 452, 455, 484, 569, 570, 571, 267,
	454, 573, 574, 575, 576, 577, 578, 579, 572, 835,
	516, 493, 519, 434, 496, 495, 0, 0, 530, 767,
	531, 532, 355, 356, 357, 358, 822, 557, 285, 453,
	381, 0, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 523, 520, 614, 0, 580, 581, 0, 0,
	447, 448, 313, 320, 466, 322, 284, 370, 315, 432,
	329, 0, 459, 524, 460, 583, 586, 584, 585, 362,
	325, 326, 396, 330, 340, 384, 431, 368, 389, 282,
	422, 397, 344, 510, 537, 844, 818, 843, 845, 846,
	842, 847, 848, 829, 723, 0, 774, 840, 839, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 564, 563, 562, 561, 560, 559, 558, 0,
	0, 507, 409, 294, 256, 290, 291, 298, 604, 601,
	413, 605, 0, 264, 487, 338, 0, 379, 312, 552,
	553, 0, 0, 807, 781, 782, 783, 720, 784, 778,
	779, 721, 780, 808, 772, 804, 805, 748, 775, 785,
	803, 786, 806, 809, 810, 849, 850, 792, 776, 228,
	851, 789, 811, 802, 801, 787, 773, 812, 813, 755,
	750, 790, 791, 777, 795, 796, 797, 722, 769, 770,
	771, 793, 794, 751, 752, 753, 754, 0, 0, 0,
	438, 439, 440, 462, 424, 486, 602, 0, 0, 0,
	0, 0, 0, 0, 536, 548, 582, 0, 591, 592,
	594, 596, 798, 0, 608, 477, 478, 588, 0, 715,
	180, 54, 169, 143, 0, 0, 0, 0, 0, 0,
	367, 0, 492, 525, 514, 597, 480, 0, 170, 0,
	0, 0, 0, 0, 0, 162, 0, 307, 0, 171,
	337, 529, 511, 521, 512, 497, 498, 499, 506, 317,
	500, 501, 502, 472, 503, 473, 504, 505, 120, 528,
	479, 398, 351, 546, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 174,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 280,
	203, 474, 593, 476, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 194, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 403, 420, 281,
	394, 433, 286, 401, 276, 366, 390, 0, 0, 272,
	418, 400, 348, 327, 328, 271, 0, 385, 305, 319,
	302, 364, 0, 417, 445, 301, 436, 0, 428, 274,
	0, 427, 363, 414, 419, 349, 343, 273, 416, 347,
	342, 331, 309, 461, 332, 333, 323, 375, 341, 376,
	324, 353, 352, 354, 0, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 0, 0, 142, 168, 178,
	0, 106, 0, 587, 0, 0, 590, 0, 430, 0,
	0, 195, 0, 0, 0, 402, 0, 0, 334, 167,
	161, 160, 446, 0, 388, 369, 207, 0, 0, 386,
	339, 415, 377, 421, 404, 429, 382, 378, 265, 405,
	304, 350, 277, 279, 299, 306, 308, 310, 311, 359,
	360, 372, 393, 406, 407, 408, 303, 287, 387, 288,
	321, 289, 266, 295, 293, 296, 395, 297, 268, 373,
	412, 0, 316, 383, 346, 269, 345, 374, 411, 410,
	278, 437, 443, 444, 533, 0, 449, 566, 567, 568,
	458, 463, 464, 465, 467, 468, 469, 470, 534, 551,
	518, 488, 451, 542, 485, 489, 490, 554, 0, 0,
	0, 442, 335, 336, 0, 314, 262, 263, 425, 300,
	365, 556, 589, 481, 0, 543, 482, 491, 292, 515,
	527, 526, 361, 441, 198, 538, 541, 471, 208, 0,
	535, 550, 508, 549, 209, 371, 0, 392, 547, 494,
	0, 539, 513, 0, 540, 509, 544, 0, 483, 0,
	399, 423, 435, 452, 455, 484, 569, 570, 571, 267,
	454, 573, 574, 575, 576, 577, 578, 579, 572, 426,
	516, 493, 519, 434, 496, 495, 0, 0, 530, 450,
	531, 532, 355, 356, 357, 358, 318, 557, 285, 453,
	381, 118, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 523, 520, 206, 0, 580, 581, 0, 0,
	447, 448, 313, 320, 466, 322, 284, 370, 315, 432,
	329, 0, 459, 524, 460, 583, 586, 584, 585, 362,
	325, 326, 396, 330, 340, 384, 431, 368, 389, 282,
	422, 397, 344, 510, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 564, 563, 562, 561, 560, 559, 558, 0,
	0, 507, 409, 294, 256, 290, 291, 298, 380, 275,
	413, 391, 0, 264, 487, 338, 144, 379, 312, 552,
	553, 51, 0, 212, 213, 214, 215, 216, 217, 218,
	219, 257, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 233, 234, 235, 236, 555, 227, 228,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 0, 0, 0, 258, 259, 260,
	261, 0, 0, 252, 253, 254, 255, 0, 0, 0,
	438, 439, 440, 462, 424, 486, 210, 40, 196, 199,
	201, 200, 0, 52, 536, 548, 582, 5, 591, 592,
	594, 596, 595, 123, 211, 477, 478, 588, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 367, 0,
	492, 525, 514, 597, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 307, 0, 0, 337, 529,
	511, 521, 512, 497, 498, 499, 506, 317, 500, 501,
	502, 472, 503, 473, 504, 505, 120, 528, 479, 398,
	351, 546, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 280, 203, 474,
	593, 476, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 2240, 2243, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 403, 420, 281, 394, 433,
	286, 401, 276, 366, 390, 0, 0, 272, 418, 400,
	348, 327, 328, 271, 0, 385, 305, 319, 302, 364,
	0, 417, 445, 301, 436, 0, 428, 274, 0, 427,
	363, 414, 419, 349, 343, 273, 416, 347, 342, 331,
	309, 461, 332, 333, 323, 375, 341, 376, 324, 353,
	352, 354, 0, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 0, 0, 590, 2244, 430, 0, 0, 0,
	2239, 0, 2238, 402, 2236, 2241, 334, 0, 0, 0,
	446, 0, 388, 369, 610, 0, 0, 386, 339, 415,
	377, 421, 404, 429, 382, 378, 265, 405, 304, 350,
	277, 279, 299, 306, 308, 310, 311, 359, 360, 372,
	393, 406, 407, 408, 303, 287, 387, 288, 321, 289,
	266, 295, 293, 296, 395, 297, 268, 373, 412, 2242,
	316, 383, 346, 269, 345, 374, 411, 410, 278, 437,
	443, 444, 533, 0, 449, 611, 612, 613, 458, 463,
	464, 465, 467, 468, 469, 470, 534, 551, 518, 488,
	451, 542, 485, 489, 490, 554, 0, 0, 0, 442,
	335, 336, 0, 314, 262, 263, 607, 300, 365, 556,
	589, 481, 0, 543, 482, 491, 292, 515, 527, 526,
	361, 441, 0, 538, 541, 471, 606, 0, 535, 550,
	609, 549, 603, 371, 0, 392, 547, 494, 0, 539,
	513, 0, 540, 509, 544, 0, 483, 0, 399, 423,
	435, 452, 455, 484, 569, 570, 571, 267, 454, 573,
	574, 575, 576, 577, 578, 579, 572, 426, 516, 493,
	519, 434, 496, 495, 0, 0, 530, 450, 531, 532,
	355, 356, 357, 358, 318, 557, 285, 453, 381, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 520, 614, 0, 580, 581, 0, 0, 447, 448,
	313, 320, 466, 322, 284, 370, 315, 432, 329, 0,
	459, 524, 460, 583, 586, 584, 585, 362, 325, 326,
	396, 330, 340, 384, 431, 368, 389, 282, 422, 397,
	344, 510, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	564, 563, 562, 561, 560, 559, 558, 0, 0, 507,
	409, 294, 256, 290, 291, 298, 604, 601, 413, 605,
	0, 264, 487, 338, 144, 379, 312, 552, 553, 0,
	0, 212, 213, 214, 215, 216, 217, 218, 219, 257,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 233, 234, 235, 236, 555, 227, 228, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 0, 0, 0, 258, 259, 260, 261, 0,
	0, 252, 253, 254, 255, 0, 0, 0, 438, 439,
	440, 462, 424, 486, 602, 0, 0, 0, 0, 0,
	0, 0, 536, 548, 582, 0, 591, 592, 594, 596,
	595, 0, 608, 477, 478, 588, 367, 0, 492, 525,
	514, 597, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 0, 528, 479, 398, 351, 546,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1244, 0, 0, 202, 0,
	0, 733, 743, 0, 0, 280, 203, 474, 593, 476,
	475, 734, 0, 735, 739, 742, 738, 736, 737, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 740, 0, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 741, 417,
	445, 301, 436, 0, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 461,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	0, 0, 590, 0, 430, 0, 0, 0, 0, 0,
	0, 402, 0, 0, 334, 0, 0, 0, 446, 0,
	388, 369, 610, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 611, 612, 613, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 607, 300, 365, 556, 589, 481,
	0, 543, 482, 491, 292, 515, 527, 526, 361, 441,
	0, 538, 541, 471, 606, 0, 535, 550, 609, 549,
	603, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 426, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 450, 531, 532, 355, 356,
	357, 358, 318, 557, 285, 453, 381, 0, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	614, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 604, 601, 413, 605, 0, 264,
	487, 338, 0, 379, 312, 552, 553, 0, 0, 212,
	213, 214, 215, 216, 217, 218, 219, 257, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 233,
	234, 235, 236, 555, 227, 228, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	0, 0, 0, 258, 259, 260, 261, 0, 0, 252,
	253, 254, 255, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 602, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 595, 0,
	608, 477, 478, 588, 180, 54, 169, 143, 0, 0,
	0, 0, 0, 0, 367, 633, 492, 525, 514, 597,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 307, 0, 0, 337, 529, 511, 521, 512, 497,
	498, 499, 506, 317, 500, 501, 502, 472, 503, 473,
	504, 505, 0, 528, 479, 398, 351, 546, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 639, 0,
	0, 0, 0, 638, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 280, 203, 474, 593, 476, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 403, 420, 281, 394, 433, 286, 401, 276, 366,
	390, 0, 0, 272, 418, 400, 348, 327, 328, 271,
	0, 385, 305, 319, 302, 364, 0, 417, 445, 301,
	436, 0, 428, 274, 0, 427, 363, 414, 419, 349,
	343, 273, 416, 347, 342, 331, 309, 461, 332, 333,
	323, 375, 341, 376, 324, 353, 352, 354, 0, 0,
	0, 0, 0, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 637, 0, 587, 0, 0,
	590, 0, 430, 0, 0, 0, 0, 0, 0, 402,
	0, 0, 334, 0, 0, 0, 446, 0, 388, 369,
	610, 0, 0, 386, 339, 415, 377, 421, 404, 429,
	382, 378, 265, 405, 304, 350, 277, 279, 299, 306,
	308, 310, 311, 359, 360, 372, 393, 406, 407, 408,
	303, 287, 387, 288, 321, 289, 266, 295, 293, 296,
	395, 297, 268, 373, 412, 0, 316, 383, 346, 269,
	345, 374, 411, 410, 278, 437, 443, 444, 533, 0,
	449, 611, 612, 613, 458, 463, 464, 465, 467, 468,
	469, 470, 534, 551, 518, 488, 451, 542, 485, 489,
	490, 554, 0, 0, 0, 442, 335, 336, 0, 314,
	262, 263, 607, 300, 365, 556, 589, 481, 0, 543,
	482, 491, 292, 515, 527, 526, 361, 441, 0, 538,
	541, 471, 606, 0, 535, 550, 609, 549, 603, 371,
	0, 392, 547, 494, 0, 539, 513, 0, 540, 509,
	544, 0, 483, 0, 399, 423, 435, 452, 455, 484,
	569, 570, 571, 267, 454, 573, 574, 575, 576, 577,
	578, 579, 572, 426, 516, 493, 519, 434, 496, 495,
	0, 0, 530, 450, 531, 532, 355, 356, 357, 358,
	634, 636, 285, 453, 381, 647, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 522, 523, 520, 614, 0,
	580, 581, 0, 0, 447, 448, 313, 320, 466, 322,
	284, 370, 315, 432, 329, 0, 459, 524, 460, 583,
	586, 584, 585, 362, 325, 326, 396, 330, 340, 384,
	431, 368, 389, 282, 422, 397, 344, 510, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 564, 563, 562, 561,
	560, 559, 558, 0, 0, 507, 409, 294, 256, 290,
	291, 298, 604, 601, 413, 605, 0, 264, 487, 338,
	144, 379, 312, 552, 553, 0, 0, 212, 213, 214,
	215, 216, 217, 218, 219, 257, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 233, 234, 235,
	236, 555, 227, 228, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 0, 0,
	0, 258, 259, 260, 261, 0, 0, 252, 253, 254,
	255, 0, 0, 0, 438, 439, 440, 462, 424, 486,
	602, 0, 0, 0, 0, 0, 0, 0, 536, 548,
	582, 0, 591, 592, 594, 596, 595, 0, 608, 477,
	478, 588, 367, 0, 492, 525, 514, 597, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	0, 0, 337, 529, 511, 521, 512, 497, 498, 499,
	506, 317, 500, 501, 502, 472, 503, 473, 504, 505,
	0, 528, 479, 398, 351, 546, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 280, 203, 474, 593, 476, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 2240, 2243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 403,
	420, 281, 394, 433, 286, 401, 276, 366, 390, 0,
	0, 272, 418, 400, 348, 327, 328, 271, 0, 385,
	305, 319, 302, 364, 0, 417, 445, 301, 436, 0,
	428, 274, 0, 427, 363, 414, 419, 349, 343, 273,
	416, 347, 342, 331, 309, 461, 332, 333, 323, 375,
	341, 376, 324, 353, 352, 354, 0, 0, 0, 0,
	0, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 0, 0, 590, 2244,
	430, 0, 0, 0, 2239, 0, 2238, 402, 2236, 2241,
	334, 0, 0, 0, 446, 0, 388, 369, 610, 0,
	0, 386, 339, 415, 377, 421, 404, 429, 382, 378,
	265, 405, 304, 350, 277, 279, 299, 306, 308, 310,
	311, 359, 360, 372, 393, 406, 407, 408, 303, 287,
	387, 288, 321, 289, 266, 295, 293, 296, 395, 297,
	268, 373, 412, 2242, 316, 383, 346, 269, 345, 374,
	411, 410, 278, 437, 443, 444, 533, 0, 449, 611,
	612, 613, 458, 463, 464, 465, 467, 468, 469, 470,
	534, 551, 518, 488, 451, 542, 485, 489, 490, 554,
	0, 0, 0, 442, 335, 336, 0, 314, 262, 263,
	607, 300, 365, 556, 589, 481, 0, 543, 482, 491,
	292, 515, 527, 526, 361, 441, 0, 538, 541, 471,
	606, 0, 535, 550, 609, 549, 603, 371, 0, 392,
	547, 494, 0, 539, 513, 0, 540, 509, 544, 0,
	483, 0, 399, 423, 435, 452, 455, 484, 569, 570,
	571, 267, 454, 573, 574, 575, 576, 577, 578, 579,
	572, 426, 516, 493, 519, 434, 496, 495, 0, 0,
	530, 450, 531, 532, 355, 356, 357, 358, 318, 557,
	285, 453, 381, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 522, 523, 520, 614, 0, 580, 581,
	0, 0, 447, 448, 313, 320, 466, 322, 284, 370,
	315, 432, 329, 0, 459, 524, 460, 583, 586, 584,
	585, 362, 325, 326, 396, 330, 340, 384, 431, 368,
	389, 282, 422, 397, 344, 510, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 564, 563, 562, 561, 560, 559,
	558, 0, 0, 507, 409, 294, 256, 290, 291, 298,
	604, 601, 413, 605, 0, 264, 487, 338, 0, 379,
	312, 552, 553, 0, 0, 212, 213, 214, 215, 216,
	217, 218, 219, 257, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 233, 234, 235, 236, 555,
	227, 228, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 0, 0, 0, 258,
	259, 260, 261, 0, 0, 252, 253, 254, 255, 0,
	0, 0, 438, 439, 440, 462, 424, 486, 602, 0,
	0, 0, 0, 0, 0, 0, 536, 548, 582, 0,
	591, 592, 594, 596, 595, 0, 608, 477, 478, 588,
	367, 0, 492, 525, 514, 597, 480, 0, 1058, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 0, 0,
	337, 529, 511, 521, 512, 497, 498, 499, 506, 317,
	500, 501, 502, 472, 503, 473, 504, 505, 0, 528,
	479, 398, 351, 546, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 280,
	203, 474, 593, 476, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
	0, 0, 0, 0, 0, 0, 270, 403, 420, 281,
	394, 433, 286, 401, 276, 366, 390, 0, 0, 2389,
	2392, 2393, 2394, 2395, 2396, 2397, 0, 2402, 2398, 2399,
	2400, 2401, 0, 2384, 2385, 2386, 2387, 1042, 2368, 2390,
	0, 2369, 363, 2370, 2371, 2372, 2373, 2374, 2375, 2376,
	2377, 2378, 2381, 2382, 2379, 2380, 2388, 375, 341, 376,
	324, 353, 352, 354, 1069, 1071, 1073, 1075, 1078, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 587, 0, 0, 590, 0, 430, 0,
	0, 0, 0, 0, 0, 402, 0, 0, 334, 0,
	0, 0, 2383, 0, 388, 369, 610, 0, 0, 386,
	339, 415, 377, 421, 404, 429, 382, 378, 265, 405,
	304, 350, 277, 279, 299, 306, 308, 310, 311, 359,
	360, 372, 393, 406, 407, 408, 303, 287, 387, 288,
	321, 289, 266, 295, 293, 296, 395, 297, 268, 373,
	412, 0, 316, 383, 346, 269, 345, 374, 411, 410,
	278, 437, 443, 444, 533, 0, 449, 611, 612, 613,
	458, 463, 464, 465, 467, 468, 469, 470, 534, 551,
	518, 488, 451, 542, 485, 489, 490, 554, 0, 0,
	0, 442, 335, 336, 0, 314, 262, 263, 607, 300,
	365, 556, 589, 481, 0, 543, 482, 491, 292, 515,
	527, 526, 361, 441, 0, 538, 541, 471, 606, 0,
	535, 550, 609, 549, 603, 371, 0, 392, 547, 494,
	0, 539, 513, 0, 540, 509, 544, 0, 483, 0,
	399, 423, 435, 452, 455, 484, 569, 570, 571, 267,
	454, 573, 574, 575, 576, 577, 578, 579, 572, 426,
	516, 493, 519, 434, 496, 495, 0, 0, 530, 450,
	531, 532, 355, 356, 357, 358, 318, 557, 285, 453,
	381, 0, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 523, 520, 614, 0, 580, 581, 0, 0,
	447, 448, 313, 320, 466, 322, 284, 370, 315, 432,
	329, 0, 459, 524, 460, 583, 586, 584, 585, 362,
	325, 326, 396, 330, 340, 384, 431, 368, 389, 282,
	422, 397, 344, 510, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 564, 563, 562, 561, 560, 559, 558, 0,
	0, 507, 409, 294, 256, 290, 291, 298, 604, 601,
	413, 605, 0, 264, 2391, 338, 0, 379, 312, 552,
	553, 0, 0, 212, 213, 214, 215, 216, 217, 218,
	219, 257, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 233, 234, 235, 236, 555, 227, 228,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 0, 0, 0, 258, 259, 260,
	261, 0, 0, 252, 253, 254, 255, 0, 0, 0,
	438, 439, 440, 462, 424, 486, 602, 0, 0, 0,
	0, 0, 0, 0, 536, 548, 582, 0, 591, 592,
	594, 596, 595, 0, 608, 477, 478, 588, 367, 0,
	492, 525, 514, 597, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 307, 0, 0, 337, 529,
	511, 521, 512, 497, 498, 499, 506, 317, 500, 501,
	502, 472, 503, 473, 504, 505, 0, 528, 479, 398,
	351, 546, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 280, 203, 474,
	593, 476, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 2261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 403, 420, 281, 394, 433,
	286, 401, 276, 366, 390, 0, 0, 272, 418, 400,
	348, 327, 328, 271, 0, 385, 305, 319, 302, 364,
	0, 417, 445, 301, 436, 0, 428, 274, 0, 427,
	363, 414, 419, 349, 343, 273, 416, 347, 342, 331,
	309, 461, 332, 333, 323, 375, 341, 376, 324, 353,
	352, 354, 0, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 0, 0, 590, 2260, 430, 0, 0, 0,
	2266, 2263, 2265, 402, 0, 2264, 334, 0, 0, 0,
	446, 0, 388, 369, 610, 0, 2258, 386, 339, 415,
	377, 421, 404, 429, 382, 378, 265, 405, 304, 350,
	277, 279, 299, 306, 308, 310, 311, 359, 360, 372,
	393, 406, 407, 408, 303, 287, 387, 288, 321, 289,
	266, 295, 293, 296, 395, 297, 268, 373, 412, 0,
	316, 383, 346, 269, 345, 374, 411, 410, 278, 437,
	443, 444, 533, 0, 449, 611, 612, 613, 458, 463,
	464, 465, 467, 468, 469, 470, 534, 551, 518, 488,
	451, 542, 485, 489, 490, 554, 0, 0, 0, 442,
	335, 336, 0, 314, 262, 263, 607, 300, 365, 556,
	589, 481, 0, 543, 482, 491, 292, 515, 527, 526,
	361, 441, 0, 538, 541, 471, 606, 0, 535, 550,
	609, 549, 603, 371, 0, 392, 547, 494, 0, 539,
	513, 0, 540, 509, 544, 0, 483, 0, 399, 423,
	435, 452, 455, 484, 569, 570, 571, 267, 454, 573,
	574, 575, 576, 577, 578, 579, 572, 426, 516, 493,
	519, 434, 496, 495, 0, 0, 530, 450, 531, 532,
	355, 356, 357, 358, 318, 557, 285, 453, 381, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 520, 614, 0, 580, 581, 0, 0, 447, 448,
	313, 320, 466, 322, 284, 370, 315, 432, 329, 0,
	459, 524, 460, 583, 586, 584, 585, 362, 325, 326,
	396, 330, 340, 384, 431, 368, 389, 282, 422, 397,
	344, 510, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	564, 563, 562, 561, 560, 559, 558, 0, 0, 507,
	409, 294, 256, 290, 291, 298, 604, 601, 413, 605,
	0, 264, 487, 338, 0, 379, 312, 552, 553, 0,
	0, 212, 213, 214, 215, 216, 217, 218, 219, 257,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 233, 234, 235, 236, 555, 227, 228, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 0, 0, 0, 258, 259, 260, 261, 0,
	0, 252, 253, 254, 255, 0, 0, 0, 438, 439,
	440, 462, 424, 486, 602, 0, 0, 0, 0, 0,
	0, 0, 536, 548, 582, 0, 591, 592, 594, 596,
	595, 0, 608, 477, 478, 588, 367, 0, 492, 525,
	514, 597, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 0, 528, 479, 398, 351, 546,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 280, 203, 474, 593, 476,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 2261, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 0, 417,
	445, 301, 436, 0, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 461,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	0, 0, 590, 2260, 430, 0, 0, 0, 2266, 2263,
	2265, 402, 0, 2264, 334, 0, 0, 0, 446, 0,
	388, 369, 610, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 611, 612, 613, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 607, 300, 365, 556, 589, 481,
	0, 543, 482, 491, 292, 515, 527, 526, 361, 441,
	0, 538, 541, 471, 606, 0, 535, 550, 609, 549,
	603, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 426, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 450, 531, 532, 355, 356,
	357, 358, 318, 557, 285, 453, 381, 0, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	614, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 604, 601, 413, 605, 0, 264,
	487, 338, 0, 379, 312, 552, 553, 0, 0, 212,
	213, 214, 215, 216, 217, 218, 219, 257, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 233,
	234, 235, 236, 555, 227, 228, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	0, 0, 0, 258, 259, 260, 261, 0, 0, 252,
	253, 254, 255, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 602, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 595, 0,
	608, 477, 478, 588, 367, 0, 492, 525, 514, 597,
	480, 0, 0, 0, 0, 0, 1979, 0, 0, 0,
	0, 307, 0, 0, 337, 529, 511, 521, 512, 497,
	498, 499, 506, 317, 500, 501, 502, 472, 503, 473,
	504, 505, 0, 528, 479, 398, 351, 546, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 1980,
	0, 0, 0, 280, 203, 474, 593, 476, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 1174, 1175, 1176, 1173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 403, 420, 281, 394, 433, 286, 401, 276, 366,
	390, 0, 0, 272, 418, 400, 348, 327, 328, 271,
	0, 385, 305, 319, 302, 364, 0, 417, 445, 301,
	436, 0, 428, 274, 0, 427, 363, 414, 419, 349,
	343, 273, 416, 347, 342, 331, 309, 461, 332, 333,
	323, 375, 341, 376, 324, 353, 352, 354, 0, 0,
	0, 0, 0, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 587, 0, 0,
	590, 0, 430, 0, 0, 0, 0, 0, 0, 402,
	0, 0, 334, 0, 0, 0, 446, 0, 388, 369,
	610, 0, 0, 386, 339, 415, 377, 421, 404, 429,
	382, 378, 265, 405, 304, 350, 277, 279, 299, 306,
	308, 310, 311, 359, 360, 372, 393, 406, 407, 408,
	303, 287, 387, 288, 321, 289, 266, 295, 293, 296,
	395, 297, 268, 373, 412, 0, 316, 383, 346, 269,
	345, 374, 411, 410, 278, 437, 443, 444, 533, 0,
	449, 611, 612, 613, 458, 463, 464, 465, 467, 468,
	469, 470, 534, 551, 518, 488, 451, 542, 485, 489,
	490, 554, 0, 0, 0, 442, 335, 336, 0, 314,
	262, 263, 607, 300, 365, 556, 589, 481, 0, 543,
	482, 491, 292, 515, 527, 526, 361, 441, 0, 538,
	541, 471, 606, 0, 535, 550, 609, 549, 603, 371,
	0, 392, 547, 494, 0, 539, 513, 0, 540, 509,
	544, 0, 483, 0, 399, 423, 435, 452, 455, 484,
	569, 570, 571, 267, 454, 573, 574, 575, 576, 577,
	578, 579, 572, 426, 516, 493, 519, 434, 496, 495,
	0, 0, 530, 450, 531, 532, 355, 356, 357, 358,
	318, 557, 285, 453, 381, 0, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 522, 523, 520, 614, 0,
	580, 581, 0, 0, 447, 448, 313, 320, 466, 322,
	284, 370, 315, 432, 329, 0, 459, 524, 460, 583,
	586, 584, 585, 362, 325, 326, 396, 330, 340, 384,
	431, 368, 389, 282, 422, 397, 344, 510, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 564, 563, 562, 561,
	560, 559, 558, 0, 0, 507, 409, 294, 256, 290,
	291, 298, 604, 601, 413, 605, 0, 264, 487, 338,
	0, 379, 312, 552, 553, 0, 0, 212, 213, 214,
	215, 216, 217, 218, 219, 257, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 233, 234, 235,
	236, 555, 227, 228, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 0, 0,
	0, 258, 259, 260, 261, 0, 0, 252, 253, 254,
	255, 0, 0, 0, 438, 439, 440, 462, 424, 486,
	602, 0, 0, 0, 0, 0, 0, 0, 536, 548,
	582, 0, 591, 592, 594, 596, 595, 180, 608, 477,
	478, 588, 0, 0, 0, 0, 0, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 120, 528, 479, 398, 351,
	546, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 2027, 0, 202,
	0, 0, 0, 0, 0, 0, 280, 203, 474, 593,
	476, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 0,
	417, 445, 301, 436, 0, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	461, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 590, 0, 430, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 446,
	0, 388, 369, 610, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 611, 612, 613, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 607, 300, 365, 556, 589,
	481, 0, 543, 482, 491, 292, 515, 527, 526, 361,
	441, 0, 538, 541, 471, 606, 0, 535, 550, 609,
	549, 603, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 426, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 450, 531, 532, 355,
	356, 357, 358, 318, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 614, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 604, 601, 413, 605, 0,
	264, 487, 338, 144, 379, 312, 552, 553, 0, 0,
	212, 213, 214, 215, 216, 217, 218, 219, 257, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	233, 234, 235, 236, 555, 227, 228, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 0, 0, 0, 258, 259, 260, 261, 0, 0,
	252, 253, 254, 255, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 602, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 595,
	180, 608, 477, 478, 588, 0, 0, 0, 0, 0,
	367, 0, 492, 525, 514, 597, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 0, 0,
	337, 529, 511, 521, 512, 497, 498, 499, 506, 317,
	500, 501, 502, 472, 503, 473, 504, 505, 120, 528,
	479, 398, 351, 546, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	2015, 0, 202, 0, 0, 0, 0, 0, 0, 280,
	203, 474, 593, 476, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 403, 420, 281,
	394, 433, 286, 401, 276, 366, 390, 0, 0, 272,
	418, 400, 348, 327, 328, 271, 0, 385, 305, 319,
	302, 364, 0, 417, 445, 301, 436, 0, 428, 274,
	0, 427, 363, 414, 419, 349, 343, 273, 416, 347,
	342, 331, 309, 461, 332, 333, 323, 375, 341, 376,
	324, 353, 352, 354, 0, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 587, 0, 0, 590, 0, 430, 0,
	0, 0, 0, 0, 0, 402, 0, 0, 334, 0,
	0, 0, 446, 0, 388, 369, 610, 0, 0, 386,
	339, 415, 377, 421, 404, 429, 382, 378, 265, 405,
	304, 350, 277, 279, 299, 306, 308, 310, 311, 359,
	360, 372, 393, 406, 407, 408, 303, 287, 387, 288,
	321, 289, 266, 295, 293, 296, 395, 297, 268, 373,
	412, 0, 316, 383, 346, 269, 345, 374, 411, 410,
	278, 437, 443, 444, 533, 0, 449, 611, 612, 613,
	458, 463, 464, 465, 467, 468, 469, 470, 534, 551,
	518, 488, 451, 542, 485, 489, 490, 554, 0, 0,
	0, 442, 335, 336, 0, 314, 262, 263, 607, 300,
	365, 556, 589, 481, 0, 543, 482, 491, 292, 515,
	527, 526, 361, 441, 0, 538, 541, 471, 606, 0,
	535, 550, 609, 549, 603, 371, 0, 392, 547, 494,
	0, 539, 513, 0, 540, 509, 544, 0, 483, 0,
	399, 423, 435, 452, 455, 484, 569, 570, 571, 267,
	454, 573, 574, 575, 576, 577, 578, 579, 572, 426,
	516, 493, 519, 434, 496, 495, 0, 0, 530, 450,
	531, 532, 355, 356, 357, 358, 318, 557, 285, 453,
	381, 0, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 523, 520, 614, 0, 580, 581, 0, 0,
	447, 448, 313, 320, 466, 322, 284, 370, 315, 432,
	329, 0, 459, 524, 460, 583, 586, 584, 585, 362,
	325, 326, 396, 330, 340, 384, 431, 368, 389, 282,
	422, 397, 344, 510, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 564, 563, 562, 561, 560, 559, 558, 0,
	0, 507, 409, 294, 256, 290, 291, 298, 604, 601,
	413, 605, 0, 264, 487, 338, 144, 379, 312, 552,
	553, 0, 0, 212, 213, 214, 215, 216, 217, 218,
	219, 257, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 233, 234, 235, 236, 555, 227, 228,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 0, 0, 0, 258, 259, 260,
	261, 0, 0, 252, 253, 254, 255, 0, 0, 0,
	438, 439, 440, 462, 424, 486, 602, 0, 0, 0,
	0, 0, 0, 0, 536, 548, 582, 0, 591, 592,
	594, 596, 595, 0, 608, 477, 478, 588, 367, 0,
	492, 525, 514, 597, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 307, 974, 0, 337, 529,
	511, 521, 512, 497, 498, 499, 506, 317, 500, 501,
	502, 472, 503, 473, 504, 505, 0, 528, 479, 398,
	351, 546, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 981, 982, 0, 0, 0, 0, 280, 203, 474,
	593, 476, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 985, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 403, 969, 281, 394, 433,
	286, 401, 276, 366, 390, 0, 0, 272, 418, 400,
	348, 327, 328, 271, 0, 385, 305, 319, 302, 364,
	0, 417, 445, 301, 436, 959, 428, 274, 958, 427,
	363, 414, 419, 349, 343, 273, 416, 347, 342, 331,
	309, 461, 332, 333, 323, 375, 341, 376, 324, 353,
	352, 354, 0, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 0, 0, 590, 0, 430, 0, 0, 0,
	0, 0, 0, 402, 0, 0, 334, 0, 0, 0,
	446, 0, 388, 369, 610, 0, 0, 386, 339, 415,
	377, 421, 404, 429, 972, 378, 265, 405, 304, 350,
	277, 279, 299, 306, 308, 310, 311, 359, 360, 372,
	393, 406, 407, 408, 303, 287, 387, 288, 321, 289,
	266, 295, 293, 296, 395, 297, 268, 373, 412, 0,
	316, 383, 346, 269, 345, 374, 411, 410, 278, 437,
	443, 444, 533, 0, 449, 611, 612, 613, 458, 463,
	464, 465, 467, 468, 469, 470, 534, 551, 518, 488,
	451, 542, 485, 489, 490, 554, 0, 0, 0, 442,
	335, 336, 0, 314, 262, 263, 607, 300, 365, 556,
	589, 481, 0, 543, 482, 491, 292, 515, 527, 526,
	361, 441, 0, 538, 541, 471, 606, 0, 535, 550,
	609, 549, 603, 371, 0, 392, 547, 494, 0, 539,
	513, 0, 540, 509, 544, 0, 483, 0, 399, 423,
	435, 452, 455, 484, 569, 570, 571, 267, 454, 573,
	574, 575, 576, 577, 578, 973, 572, 426, 516, 493,
	519, 434, 496, 495, 0, 0, 530, 976, 531, 532,
	355, 356, 357, 358, 318, 557, 285, 453, 381, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 520, 614, 0, 580, 581, 0, 0, 447, 448,
	313, 320, 466, 322, 284, 370, 315, 432, 329, 0,
	459, 524, 460, 583, 586, 584, 585, 983, 970, 979,
	971, 330, 340, 384, 431, 368, 389, 282, 422, 397,
	980, 510, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	564, 563, 562, 561, 560, 559, 558, 0, 0, 507,
	409, 294, 256, 290, 291, 298, 604, 601, 413, 605,
	0, 264, 487, 338, 0, 379, 312, 552, 553, 0,
	0, 212, 213, 214, 215, 216, 217, 218, 219, 257,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 233, 234, 235, 236, 555, 227, 228, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 0, 0, 0, 258, 259, 260, 261, 0,
	0, 252, 253, 254, 255, 0, 0, 0, 438, 439,
	440, 462, 424, 486, 602, 0, 0, 0, 0, 0,
	0, 0, 536, 548, 582, 0, 591, 592, 594, 596,
	595, 180, 608, 477, 478, 588, 0, 0, 0, 0,
	0, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 307, 0,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 120,
	528, 479, 398, 351, 546, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1912, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	280, 203, 474, 593, 476, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 0, 417, 445, 301, 436, 0, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 461, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 0, 0, 590, 0, 430,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 446, 0, 388, 369, 610, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 611, 612,
	613, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 607,
	300, 365, 556, 589, 481, 0, 543, 482, 491, 292,
	515, 527, 526, 361, 441, 0, 538, 541, 471, 606,
	0, 535, 550, 609, 549, 603, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	426, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	450, 531, 532, 355, 356, 357, 358, 318, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 614, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 604,
	601, 413, 605, 0, 264, 487, 338, 144, 379, 312,
	552, 553, 0, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 257, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 233, 234, 235, 236, 555, 227,
	228, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 0, 0, 0, 258, 259,
	260, 261, 0, 0, 252, 253, 254, 255, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 602, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 595, 0, 608, 477, 478, 588, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 0, 528, 479,
	398, 351, 546, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 981, 982, 0, 0, 0, 0, 280, 203,
	474, 593, 476, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 985, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 0, 417, 445, 301, 436, 959, 428, 274, 958,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 461, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 0, 0, 590, 0, 430, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 446, 0, 388, 369, 610, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 611, 612, 613, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 607, 300, 365,
	556, 589, 481, 0, 543, 482, 491, 292, 515, 527,
	526, 361, 441, 0, 538, 541, 471, 606, 0, 535,
	550, 609, 549, 603, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 426, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 450, 531,
	532, 355, 356, 357, 358, 318, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 614, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 983, 1931,
	979, 1932, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 980, 510, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 604, 601, 413,
	605, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 212, 213, 214, 215, 216, 217, 218, 219,
	257, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 233, 234, 235, 236, 555, 227, 228, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 0, 0, 0, 258, 259, 260, 261,
	0, 0, 252, 253, 254, 255, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 602, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 595, 0, 608, 477, 478, 588, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 2746, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 0, 528, 479, 398, 351,
	546, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 280, 203, 474, 593,
	476, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 0,
	417, 445, 301, 436, 0, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	461, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 2749, 0, 0, 2748,
	587, 0, 0, 590, 0, 430, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 446,
	0, 388, 369, 610, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 611, 612, 613, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 607, 300, 365, 556, 589,
	481, 0, 543, 482, 491, 292, 515, 527, 526, 361,
	441, 0, 538, 541, 471, 606, 0, 535, 550, 609,
	549, 603, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 426, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 450, 531, 532, 355,
	356, 357, 358, 318, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 614, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 604, 601, 413, 605, 0,
	264, 487, 338, 0, 379, 312, 552, 553, 0, 0,
	212, 213, 214, 215, 216, 217, 218, 219, 257, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	233, 234, 235, 236, 555, 227, 228, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 0, 0, 0, 258, 259, 260, 261, 0, 0,
	252, 253, 254, 255, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 602, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 595,
	0, 608, 477, 478, 588, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 1440, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 0, 528, 479, 398, 351, 546, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	1438, 0, 0, 0, 280, 203, 474, 593, 476, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 0, 417, 445,
	301, 436, 0, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 461, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 590, 0, 430, 0, 0, 0, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 446, 0, 388,
	369, 610, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 611, 612, 613, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 607, 300, 365, 556, 589, 481, 0,
	543, 482, 491, 292, 515, 527, 526, 361, 441, 0,
	538, 541, 471, 606, 0, 535, 550, 609, 549, 603,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 426, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 450, 531, 532, 355, 356, 357,
	358, 318, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 614,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 604, 601, 413, 605, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 212, 213,
	214, 215, 216, 217, 218, 219, 257, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 233, 234,
	235, 236, 555, 227, 228, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 0,
	0, 0, 258, 259, 260, 261, 0, 0, 252, 253,
	254, 255, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 602, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 595, 0, 608,
	477, 478, 588, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 1434, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 0, 528, 479, 398, 351, 546, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 1438, 0,
	0, 0, 280, 203, 474, 593, 476, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 0, 417, 445, 301, 436,
	0, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 461, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 590,
	0, 430, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 446, 0, 388, 369, 610,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	611, 612, 613, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 607, 300, 365, 556, 589, 481, 0, 543, 482,
	491, 292, 515, 527, 526, 361, 441, 0, 538, 541,
	471, 606, 0, 535, 550, 609, 549, 603, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 426, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 450, 531, 532, 355, 356, 357, 358, 318,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 614, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 604, 601, 413, 605, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 257, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 233, 234, 235, 236,
	555, 227, 228, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 0, 0, 0,
	258, 259, 260, 261, 0, 0, 252, 253, 254, 255,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 602,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 595, 0, 608, 477, 478,
	588, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 307, 0,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 0,
	528, 479, 398, 351, 546, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3695, 0, 202, 800, 0, 0, 0, 0, 0,
	280, 203, 474, 593, 476, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 0, 417, 445, 301, 436, 0, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 461, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 0, 0, 590, 0, 430,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 446, 0, 388, 369, 610, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 611, 612,
	613, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 607,
	300, 365, 556, 589, 481, 0, 543, 482, 491, 292,
	515, 527, 526, 361, 441, 0, 538, 541, 471, 606,
	0, 535, 550, 609, 549, 603, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	426, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	450, 531, 532, 355, 356, 357, 358, 318, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 614, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 604,
	601, 413, 605, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 257, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 233, 234, 235, 236, 555, 227,
	228, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 0, 0, 0, 258, 259,
	260, 261, 0, 0, 252, 253, 254, 255, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 602, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 595, 0, 608, 477, 478, 588, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 0, 528, 479,
	398, 351, 546, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 1438, 0, 0, 0, 280, 203,
	474, 593, 476, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 0, 417, 445, 301, 436, 0, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 461, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 0, 0, 590, 0, 430, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 446, 0, 388, 369, 610, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 611, 612, 613, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 607, 300, 365,
	556, 589, 481, 0, 543, 482, 491, 292, 515, 527,
	526, 361, 441, 0, 538, 541, 471, 606, 0, 535,
	550, 609, 549, 603, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 426, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 450, 531,
	532, 355, 356, 357, 358, 318, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 614, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 604, 601, 413,
	605, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 212, 213, 214, 215, 216, 217, 218, 219,
	257, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 233, 234, 235, 236, 555, 227, 228, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 0, 0, 0, 258, 259, 260, 261,
	0, 0, 252, 253, 254, 255, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 602, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 595, 0, 608, 477, 478, 588, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 0, 528, 479, 398, 351,
	546, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 1438, 0, 0, 0, 280, 203, 474, 593,
	476, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1640, 0, 0, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 0,
	417, 445, 301, 436, 0, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	461, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 590, 0, 430, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 446,
	0, 388, 369, 610, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 611, 612, 613, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 607, 300, 365, 556, 589,
	481, 0, 543, 482, 491, 292, 515, 527, 526, 361,
	441, 0, 538, 541, 471, 606, 0, 535, 550, 609,
	549, 603, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 426, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 450, 531, 532, 355,
	356, 357, 358, 318, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 614, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 604, 601, 413, 605, 0,
	264, 487, 338, 0, 379, 312, 552, 553, 0, 0,
	212, 213, 214, 215, 216, 217, 218, 219, 257, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	233, 234, 235, 236, 555, 227, 228, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 0, 0, 0, 258, 259, 260, 261, 0, 0,
	252, 253, 254, 255, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 602, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 595,
	0, 608, 477, 478, 588, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 2332, 0, 0,
	0, 0, 307, 0, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 0, 528, 479, 398, 351, 546, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	2334, 0, 0, 0, 280, 203, 474, 593, 476, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 0, 417, 445,
	301, 436, 0, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 461, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 590, 0, 430, 0, 0, 0, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 446, 0, 388,
	369, 610, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 611, 612, 613, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 607, 300, 365, 556, 589, 481, 0,
	543, 482, 491, 292, 515, 527, 526, 361, 441, 0,
	538, 541, 471, 606, 0, 535, 550, 609, 549, 603,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 426, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 450, 531, 532, 355, 356, 357,
	358, 318, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 614,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 604, 601, 413, 605, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 212, 213,
	214, 215, 216, 217, 218, 219, 257, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 233, 234,
	235, 236, 555, 227, 228, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 0,
	0, 0, 258, 259, 260, 261, 0, 0, 252, 253,
	254, 255, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 602, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 595, 0, 608,
	477, 478, 588, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 2353, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 0, 528, 479, 398, 351, 546, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 1438, 0,
	0, 0, 280, 203, 474, 593, 476, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 0, 417, 445, 301, 436,
	0, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 461, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 590,
	0, 430, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 446, 0, 388, 369, 610,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	611, 612, 613, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 607, 300, 365, 556, 589, 481, 0, 543, 482,
	491, 292, 515, 527, 526, 361, 441, 0, 538, 541,
	471, 606, 0, 535, 550, 609, 549, 603, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 426, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 450, 531, 532, 355, 356, 357, 358, 318,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 614, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 604, 601, 413, 605, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 257, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 233, 234, 235, 236,
	555, 227, 228, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 0, 0, 0,
	258, 259, 260, 261, 0, 0, 252, 253, 254, 255,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 602,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 595, 0, 608, 477, 478,
	588, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 621, 307, 0,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 0,
	528, 479, 398, 351, 546, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	280, 203, 474, 593, 476, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 0, 417, 445, 301, 436, 0, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 461, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 0, 0, 590, 0, 430,
	0, 620, 0, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 446, 0, 388, 369, 610, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 611, 612,
	613, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 607,
	300, 365, 556, 589, 481, 0, 543, 482, 491, 292,
	515, 527, 526, 361, 441, 0, 538, 541, 471, 606,
	0, 535, 550, 609, 549, 603, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	426, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	450, 531, 532, 355, 356, 357, 358, 318, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 614, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 604,
	601, 413, 605, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 257, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 233, 234, 235, 236, 555, 227,
	228, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 0, 0, 0, 258, 259,
	260, 261, 0, 0, 252, 253, 254, 255, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 602, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 595, 0, 608, 477, 478, 588, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 0, 528, 479,
	398, 351, 546, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 800, 0, 0, 0, 0, 0, 280, 203,
	474, 593, 476, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 0, 417, 445, 301, 436, 0, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 461, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 0, 0, 590, 0, 430, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 446, 0, 388, 369, 610, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 611, 612, 613, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 607, 300, 365,
	556, 589, 481, 0, 543, 482, 491, 292, 515, 527,
	526, 361, 441, 0, 538, 541, 471, 606, 0, 535,
	550, 609, 549, 603, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 426, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 450, 531,
	532, 355, 356, 357, 358, 318, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 614, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 604, 601, 413,
	605, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 212, 213, 214, 215, 216, 217, 218, 219,
	257, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 233, 234, 235, 236, 555, 227, 228, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 0, 0, 0, 258, 259, 260, 261,
	0, 0, 252, 253, 254, 255, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 602, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 595, 0, 608, 477, 478, 588, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 0, 528, 479, 398, 351,
	546, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3674, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 280, 203, 474, 593,
	476, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 0,
	417, 445, 301, 436, 0, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	461, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 590, 0, 430, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 446,
	0, 388, 369, 610, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 611, 612, 613, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 607, 300, 365, 556, 589,
	481, 0, 543, 482, 491, 292, 515, 527, 526, 361,
	441, 0, 538, 541, 471, 606, 0, 535, 550, 609,
	549, 603, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 426, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 450, 531, 532, 355,
	356, 357, 358, 318, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 614, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 604, 601, 413, 605, 0,
	264, 487, 338, 0, 379, 312, 552, 553, 0, 0,
	212, 213, 214, 215, 216, 217, 218, 219, 257, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	233, 234, 235, 236, 555, 227, 228, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 0, 0, 0, 258, 259, 260, 261, 0, 0,
	252, 253, 254, 255, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 602, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 595,
	0, 608, 477, 478, 588, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 0, 528, 479, 398, 351, 546, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	3464, 0, 0, 0, 280, 203, 474, 593, 476, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 0, 417, 445,
	301, 436, 0, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 461, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 590, 0, 430, 0, 0, 0, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 446, 0, 388,
	369, 610, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 611, 612, 613, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 607, 300, 365, 556, 589, 481, 0,
	543, 482, 491, 292, 515, 527, 526, 361, 441, 0,
	538, 541, 471, 606, 0, 535, 550, 609, 549, 603,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 426, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 450, 531, 532, 355, 356, 357,
	358, 318, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 614,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 604, 601, 413, 605, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 212, 213,
	214, 215, 216, 217, 218, 219, 257, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 233, 234,
	235, 236, 555, 227, 228, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 0,
	0, 0, 258, 259, 260, 261, 0, 0, 252, 253,
	254, 255, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 602, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 595, 0, 608,
	477, 478, 588, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 0, 528, 479, 398, 351, 546, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 280, 203, 474, 593, 476, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 0, 417, 445, 301, 436,
	0, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 461, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 590,
	0, 430, 0, 0, 0, 3587, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 446, 0, 388, 369, 610,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	611, 612, 613, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 607, 300, 365, 556, 589, 481, 0, 543, 482,
	491, 292, 515, 527, 526, 361, 441, 0, 538, 541,
	471, 606, 0, 535, 550, 609, 549, 603, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 426, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 450, 531, 532, 355, 356, 357, 358, 318,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 614, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 604, 601, 413, 605, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 257, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 233, 234, 235, 236,
	555, 227, 228, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 0, 0, 0,
	258, 259, 260, 261, 0, 0, 252, 253, 254, 255,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 602,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 595, 0, 608, 477, 478,
	588, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 307, 0,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 0,
	528, 479, 398, 351, 546, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3320, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	280, 203, 474, 593, 476, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 0, 417, 445, 301, 436, 0, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 461, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 0, 0, 590, 0, 430,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 446, 0, 388, 369, 610, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 611, 612,
	613, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 607,
	300, 365, 556, 589, 481, 0, 543, 482, 491, 292,
	515, 527, 526, 361, 441, 0, 538, 541, 471, 606,
	0, 535, 550, 609, 549, 603, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	426, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	450, 531, 532, 355, 356, 357, 358, 318, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 614, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 604,
	601, 413, 605, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 257, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 233, 234, 235, 236, 555, 227,
	228, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 0, 0, 0, 258, 259,
	260, 261, 0, 0, 252, 253, 254, 255, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 602, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 595, 0, 608, 477, 478, 588, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 0, 528, 479,
	398, 351, 546, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3479,
	0, 202, 0, 0, 0, 0, 0, 0, 280, 203,
	474, 593, 476, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 0, 417, 445, 301, 436, 0, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 461, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 0, 0, 590, 0, 430, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 446, 0, 388, 369, 610, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 611, 612, 613, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 607, 300, 365,
	556, 589, 481, 0, 543, 482, 491, 292, 515, 527,
	526, 361, 441, 0, 538, 541, 471, 606, 0, 535,
	550, 609, 549, 603, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 426, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 450, 531,
	532, 355, 356, 357, 358, 318, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 614, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 604, 601, 413,
	605, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 212, 213, 214, 215, 216, 217, 218, 219,
	257, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 233, 234, 235, 236, 555, 227, 228, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 0, 0, 0, 258, 259, 260, 261,
	0, 0, 252, 253, 254, 255, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 602, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 595, 0, 608, 477, 478, 588, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 0, 528, 479, 398, 351,
	546, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 280, 203, 474, 593,
	476, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 0,
	417, 445, 301, 436, 0, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	461, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 590, 0, 430, 0, 0, 0, 3407,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 446,
	0, 388, 369, 610, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 611, 612, 613, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 607, 300, 365, 556, 589,
	481, 0, 543, 482, 491, 292, 515, 527, 526, 361,
	441, 0, 538, 541, 471, 606, 0, 535, 550, 609,
	549, 603, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 426, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 450, 531, 532, 355,
	356, 357, 358, 318, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 614, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 604, 601, 413, 605, 0,
	264, 487, 338, 0, 379, 312, 552, 553, 0, 0,
	212, 213, 214, 215, 216, 217, 218, 219, 257, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	233, 234, 235, 236, 555, 227, 228, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 0, 0, 0, 258, 259, 260, 261, 0, 0,
	252, 253, 254, 255, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 602, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 595,
	0, 608, 477, 478, 588, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 0, 528, 479, 398, 351, 546, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	2964, 0, 0, 0, 280, 203, 474, 593, 476, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 0, 417, 445,
	301, 436, 0, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 461, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 590, 0, 430, 0, 0, 0, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 446, 0, 388,
	369, 610, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 611, 612, 613, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 607, 300, 365, 556, 589, 481, 0,
	543, 482, 491, 292, 515, 527, 526, 361, 441, 0,
	538, 541, 471, 606, 0, 535, 550, 609, 549, 603,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 426, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 450, 531, 532, 355, 356, 357,
	358, 318, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 614,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 604, 601, 413, 605, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 212, 213,
	214, 215, 216, 217, 218, 219, 257, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 233, 234,
	235, 236, 555, 227, 228, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 0,
	0, 0, 258, 259, 260, 261, 0, 0, 252, 253,
	254, 255, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 602, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 595, 0, 608,
	477, 478, 588, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 0, 528, 479, 398, 351, 546, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 280, 203, 474, 593, 476, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2982, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 0, 417, 445, 301, 436,
	0, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 461, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 590,
	0, 430, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 446, 0, 388, 369, 610,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	611, 612, 613, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 607, 300, 365, 556, 589, 481, 0, 543, 482,
	491, 292, 515, 527, 526, 361, 441, 0, 538, 541,
	471, 606, 0, 535, 550, 609, 549, 603, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 426, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 450, 531, 532, 355, 356, 357, 358, 318,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 614, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 604, 601, 413, 605, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 257, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 233, 234, 235, 236,
	555, 227, 228, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 0, 0, 0,
	258, 259, 260, 261, 0, 0, 252, 253, 254, 255,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 602,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 595, 0, 608, 477, 478,
	588, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 307, 0,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 0,
	528, 479, 398, 351, 546, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1912, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	280, 203, 474, 593, 476, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 0, 417, 445, 301, 436, 0, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 461, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 0, 0, 590, 0, 430,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 446, 0, 388, 369, 610, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 611, 612,
	613, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 607,
	300, 365, 556, 589, 481, 0, 543, 482, 491, 292,
	515, 527, 526, 361, 441, 0, 538, 541, 471, 606,
	0, 535, 550, 609, 549, 603, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	426, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	450, 531, 532, 355, 356, 357, 358, 318, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 614, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 604,
	601, 413, 605, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 257, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 233, 234, 235, 236, 555, 227,
	228, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 0, 0, 0, 258, 259,
	260, 261, 0, 0, 252, 253, 254, 255, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 602, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 595, 0, 608, 477, 478, 588, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 0, 528, 479,
	398, 351, 546, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 280, 203,
	474, 593, 476, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 0, 417, 445, 301, 436, 0, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 461, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 0, 0, 590, 0, 430, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 446, 0, 388, 369, 610, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 611, 612, 613, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 607, 300, 365,
	556, 589, 481, 0, 543, 482, 491, 292, 515, 527,
	526, 361, 441, 0, 538, 541, 471, 606, 0, 535,
	550, 609, 549, 603, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 426, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 450, 531,
	532, 355, 356, 357, 358, 318, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 614, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 604, 601, 413,
	605, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 212, 213, 214, 215, 216, 217, 218, 219,
	257, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 233, 234, 235, 236, 555, 227, 228, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 0, 0, 0, 258, 259, 260, 261,
	0, 0, 252, 253, 254, 255, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 602, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 595, 0, 608, 477, 478, 588, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 0, 528, 479, 398, 351,
	546, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 2933, 0, 0, 0, 280, 203, 474, 593,
	476, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 0,
	417, 445, 301, 436, 0, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	461, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 590, 0, 430, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 446,
	0, 388, 369, 610, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 611, 612, 613, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 607, 300, 365, 556, 589,
	481, 0, 543, 482, 491, 292, 515, 527, 526, 361,
	441, 0, 538, 541, 471, 606, 0, 535, 550, 609,
	549, 603, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 426, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 450, 531, 532, 355,
	356, 357, 358, 318, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 614, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 604, 601, 413, 605, 0,
	264, 487, 338, 0, 379, 312, 552, 553, 0, 0,
	212, 213, 214, 215, 216, 217, 218, 219, 257, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	233, 234, 235, 236, 555, 227, 228, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 0, 0, 0, 258, 259, 260, 261, 0, 0,
	252, 253, 254, 255, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 602, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 595,
	0, 608, 477, 478, 588, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 0, 528, 479, 398, 351, 546, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 280, 203, 474, 593, 476, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2843, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 0, 417, 445,
	301, 436, 0, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 461, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 590, 0, 430, 0, 0, 0, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 446, 0, 388,
	369, 610, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 611, 612, 613, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 607, 300, 365, 556, 589, 481, 0,
	543, 482, 491, 292, 515, 527, 526, 361, 441, 0,
	538, 541, 471, 606, 0, 535, 550, 609, 549, 603,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 426, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 450, 531, 532, 355, 356, 357,
	358, 318, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 614,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 604, 601, 413, 605, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 212, 213,
	214, 215, 216, 217, 218, 219, 257, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 233, 234,
	235, 236, 555, 227, 228, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 0,
	0, 0, 258, 259, 260, 261, 0, 0, 252, 253,
	254, 255, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 602, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 595, 0, 608,
	477, 478, 588, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 0, 528, 479, 398, 351, 546, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 1438, 0,
	0, 0, 280, 203, 474, 593, 476, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 0, 417, 445, 301, 436,
	0, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 461, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 590,
	0, 430, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 446, 0, 388, 369, 610,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	611, 612, 613, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 607, 300, 365, 556, 589, 481, 0, 543, 482,
	491, 292, 515, 527, 526, 361, 441, 0, 538, 541,
	471, 606, 0, 535, 550, 609, 549, 603, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 426, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 450, 531, 532, 355, 356, 357, 358, 318,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 614, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 604, 601, 413, 605, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 257, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 233, 234, 235, 236,
	555, 227, 228, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 0, 0, 0,
	258, 259, 260, 261, 0, 0, 252, 253, 254, 255,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 602,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 595, 0, 608, 477, 478,
	588, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 307, 0,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 0,
	528, 479, 398, 351, 546, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 2334, 0, 0, 0,
	280, 203, 474, 593, 476, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 0, 417, 445, 301, 436, 0, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 461, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 0, 0, 590, 0, 430,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 446, 0, 388, 369, 610, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 611, 612,
	613, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 607,
	300, 365, 556, 589, 481, 0, 543, 482, 491, 292,
	515, 527, 526, 361, 441, 0, 538, 541, 471, 606,
	0, 535, 550, 609, 549, 603, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	426, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	450, 531, 532, 355, 356, 357, 358, 318, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 614, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 604,
	601, 413, 605, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 257, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 233, 234, 235, 236, 555, 227,
	228, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 0, 0, 0, 258, 259,
	260, 261, 0, 0, 252, 253, 254, 255, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 602, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 595, 0, 608, 477, 478, 588, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 2671, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 0, 528, 479,
	398, 351, 546, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 280, 203,
	474, 593, 476, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 0, 417, 445, 301, 436, 0, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 461, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 0, 0, 590, 0, 430, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 446, 0, 388, 369, 610, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 611, 612, 613, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 607, 300, 365,
	556, 589, 481, 0, 543, 482, 491, 292, 515, 527,
	526, 361, 441, 0, 538, 541, 471, 606, 0, 535,
	550, 609, 549, 603, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 426, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 450, 531,
	532, 355, 356, 357, 358, 318, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 614, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 604, 601, 413,
	605, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 212, 213, 214, 215, 216, 217, 218, 219,
	257, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 233, 234, 235, 236, 555, 227, 228, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 0, 0, 0, 258, 259, 260, 261,
	0, 0, 252, 253, 254, 255, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 602, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 595, 0, 608, 477, 478, 588, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 0, 528, 479, 398, 351,
	546, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 280, 203, 474, 593,
	476, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2047, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 0,
	417, 445, 301, 436, 0, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	461, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 590, 0, 430, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 446,
	0, 388, 369, 610, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 611, 612, 613, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 607, 300, 365, 556, 589,
	481, 0, 543, 482, 491, 292, 515, 527, 526, 361,
	441, 0, 538, 541, 471, 606, 0, 535, 550, 609,
	549, 603, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 426, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 450, 531, 532, 355,
	356, 357, 358, 318, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 614, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 604, 601, 413, 605, 0,
	264, 487, 338, 0, 379, 312, 552, 553, 0, 0,
	212, 213, 214, 215, 216, 217, 218, 219, 257, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	233, 234, 235, 236, 555, 227, 228, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 0, 0, 0, 258, 259, 260, 261, 0, 0,
	252, 253, 254, 255, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 602, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 595,
	0, 608, 477, 478, 588, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 0, 528, 479, 398, 351, 546, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 280, 203, 474, 593, 476, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2411, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 0, 417, 445,
	301, 436, 0, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 461, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 590, 0, 430, 0, 0, 0, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 446, 0, 388,
	369, 610, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 611, 612, 613, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 607, 300, 365, 556, 589, 481, 0,
	543, 482, 491, 292, 515, 527, 526, 361, 441, 0,
	538, 541, 471, 606, 0, 535, 550, 609, 549, 603,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 426, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 450, 531, 532, 355, 356, 357,
	358, 318, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 614,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 604, 601, 413, 605, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 212, 213,
	214, 215, 216, 217, 218, 219, 257, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 233, 234,
	235, 236, 555, 227, 228, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 0,
	0, 0, 258, 259, 260, 261, 0, 0, 252, 253,
	254, 255, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 602, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 595, 0, 608,
	477, 478, 588, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 0, 528, 479, 398, 351, 546, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 2409, 0,
	0, 0, 280, 203, 474, 593, 476, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 0, 417, 445, 301, 436,
	0, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 461, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 590,
	0, 430, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 446, 0, 388, 369, 610,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	611, 612, 613, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 607, 300, 365, 556, 589, 481, 0, 543, 482,
	491, 292, 515, 527, 526, 361, 441, 0, 538, 541,
	471, 606, 0, 535, 550, 609, 549, 603, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 426, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 450, 531, 532, 355, 356, 357, 358, 318,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 614, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 604, 601, 413, 605, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 257, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 233, 234, 235, 236,
	555, 227, 228, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 0, 0, 0,
	258, 259, 260, 261, 0, 0, 252, 253, 254, 255,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 602,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 595, 2199, 608, 477, 478,
	588, 0, 367, 0, 492, 525, 514, 597, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	0, 0, 337, 529, 511, 521, 512, 497, 498, 499,
	506, 317, 500, 501, 502, 472, 503, 473, 504, 505,
	0, 528, 479, 398, 351, 546, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 280, 203, 474, 593, 476, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 403,
	420, 281, 394, 433, 286, 401, 276, 366, 390, 0,
	0, 272, 418, 400, 348, 327, 328, 271, 0, 385,
	305, 319, 302, 364, 0, 417, 445, 301, 436, 0,
	428, 274, 0, 427, 363, 414, 419, 349, 343, 273,
	416, 347, 342, 331, 309, 461, 332, 333, 323, 375,
	341, 376, 324, 353, 352, 354, 0, 0, 0, 0,
	0, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 0, 0, 590, 0,
	430, 0, 0, 0, 0, 0, 0, 402, 0, 0,
	334, 0, 0, 0, 446, 0, 388, 369, 610, 0,
	0, 386, 339, 415, 377, 421, 404, 429, 382, 378,
	265, 405, 304, 350, 277, 279, 299, 306, 308, 310,
	311, 359, 360, 372, 393, 406, 407, 408, 303, 287,
	387, 288, 321, 289, 266, 295, 293, 296, 395, 297,
	268, 373, 412, 0, 316, 383, 346, 269, 345, 374,
	411, 410, 278, 437, 443, 444, 533, 0, 449, 611,
	612, 613, 458, 463, 464, 465, 467, 468, 469, 470,
	534, 551, 518, 488, 451, 542, 485, 489, 490, 554,
	0, 0, 0, 442, 335, 336, 0, 314, 262, 263,
	607, 300, 365, 556, 589, 481, 0, 543, 482, 491,
	292, 515, 527, 526, 361, 441, 0, 538, 541, 471,
	606, 0, 535, 550, 609, 549, 603, 371, 0, 392,
	547, 494, 0, 539, 513, 0, 540, 509, 544, 0,
	483, 0, 399, 423, 435, 452, 455, 484, 569, 570,
	571, 267, 454, 573, 574, 575, 576, 577, 578, 579,
	572, 426, 516, 493, 519, 434, 496, 495, 0, 0,
	530, 450, 531, 532, 355, 356, 357, 358, 318, 557,
	285, 453, 381, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 522, 523, 520, 614, 0, 580, 581,
	0, 0, 447, 448, 313, 320, 466, 322, 284, 370,
	315, 432, 329, 0, 459, 524, 460, 583, 586, 584,
	585, 362, 325, 326, 396, 330, 340, 384, 431, 368,
	389, 282, 422, 397, 344, 510, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 564, 563, 562, 561, 560, 559,
	558, 0, 0, 507, 409, 294, 256, 290, 291, 298,
	604, 601, 413, 605, 0, 264, 487, 338, 0, 379,
	312, 552, 553, 0, 0, 212, 213, 214, 215, 216,
	217, 218, 219, 257, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 233, 234, 235, 236, 555,
	227, 228, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 0, 0, 0, 258,
	259, 260, 261, 0, 0, 252, 253, 254, 255, 0,
	0, 0, 438, 439, 440, 462, 424, 486, 602, 0,
	0, 0, 0, 0, 0, 0, 536, 548, 582, 0,
	591, 592, 594, 596, 595, 0, 608, 477, 478, 588,
	367, 0, 492, 525, 514, 597, 480, 0, 1899, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 0, 0,
	337, 529, 511, 521, 512, 497, 498, 499, 506, 317,
	500, 501, 502, 472, 503, 473, 504, 505, 0, 528,
	479, 398, 351, 546, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 280,
	203, 474, 593, 476, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 403, 420, 281,
	394, 433, 286, 401, 276, 366, 390, 0, 0, 272,
	418, 400, 348, 327, 328, 271, 0, 385, 305, 319,
	302, 364, 0, 417, 445, 301, 436, 0, 428, 274,
	0, 427, 363, 414, 419, 349, 343, 273, 416, 347,
	342, 331, 309, 461, 332, 333, 323, 375, 341, 376,
	324, 353, 352, 354, 0, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 587, 0, 0, 590, 0, 430, 0,
	0, 0, 0, 0, 0, 402, 0, 0, 334, 0,
	0, 0, 446, 0, 388, 369, 610, 0, 0, 386,
	339, 415, 377, 421, 404, 429, 382, 378, 265, 405,
	304, 350, 277, 279, 299, 306, 308, 310, 311, 359,
	360, 372, 393, 406, 407, 408, 303, 287, 387, 288,
	321, 289, 266, 295, 293, 296, 395, 297, 268, 373,
	412, 0, 316, 383, 346, 269, 345, 374, 411, 410,
	278, 437, 443, 444, 533, 0, 449, 611, 612, 613,
	458, 463, 464, 465, 467, 468, 469, 470, 534, 551,
	518, 488, 451, 542, 485, 489, 490, 554, 0, 0,
	0, 442, 335, 336, 0, 314, 262, 263, 607, 300,
	365, 556, 589, 481, 0, 543, 482, 491, 292, 515,
	527, 526, 361, 441, 0, 538, 541, 471, 606, 0,
	535, 550, 609, 549, 603, 371, 0, 392, 547, 494,
	0, 539, 513, 0, 540, 509, 544, 0, 483, 0,
	399, 423, 435, 452, 455, 484, 569, 570, 571, 267,
	454, 573, 574, 575, 576, 577, 578, 579, 572, 426,
	516, 493, 519, 434, 496, 495, 0, 0, 530, 450,
	531, 532, 355, 356, 357, 358, 318, 557, 285, 453,
	381, 0, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 523, 520, 614, 0, 580, 581, 0, 0,
	447, 448, 313, 320, 466, 322, 284, 370, 315, 432,
	329, 0, 459, 524, 460, 583, 586, 584, 585, 362,
	325, 326, 396, 330, 340, 384, 431, 368, 389, 282,
	422, 397, 344, 510, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 564, 563, 562, 561, 560, 559, 558, 0,
	0, 507, 409, 294, 256, 290, 291, 298, 604, 601,
	413, 605, 0, 264, 487, 338, 0, 379, 312, 552,
	553, 0, 0, 212, 213, 214, 215, 216, 217, 218,
	219, 257, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 233, 234, 235, 236, 555, 227, 228,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 0, 0, 0, 258, 259, 260,
	261, 0, 0, 252, 253, 254, 255, 0, 0, 0,
	438, 439, 440, 462, 424, 486, 602, 0, 0, 0,
	0, 0, 0, 0, 536, 548, 582, 0, 591, 592,
	594, 596, 595, 0, 608, 477, 478, 588, 367, 0,
	492, 525, 514, 597, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 307, 0, 0, 337, 529,
	511, 521, 512, 497, 498, 499, 506, 317, 500, 501,
	502, 472, 503, 473, 504, 505, 0, 528, 479, 398,
	351, 546, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 1438, 0, 0, 0, 280, 203, 474,
	593, 476, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 403, 420, 281, 394, 433,
	286, 401, 276, 366, 390, 0, 0, 272, 418, 400,
	348, 327, 328, 271, 0, 385, 305, 319, 302, 364,
	0, 417, 445, 301, 436, 0, 428, 274, 0, 427,
	363, 414, 419, 349, 343, 273, 416, 347, 342, 331,
	309, 461, 332, 333, 323, 375, 341, 376, 324, 353,
	352, 354, 0, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 0, 0, 590, 0, 430, 0, 0, 0,
	0, 0, 0, 402, 0, 0, 334, 0, 0, 0,
	446, 0, 388, 369, 610, 0, 0, 386, 339, 415,
	377, 421, 404, 429, 1805, 378, 265, 405, 304, 350,
	277, 279, 299, 306, 308, 310, 311, 359, 360, 372,
	393, 406, 407, 408, 303, 287, 387, 288, 321, 289,
	266, 295, 293, 296, 395, 297, 268, 373, 412, 0,
	316, 383, 346, 269, 345, 374, 411, 410, 278, 437,
	443, 444, 533, 0, 449, 611, 612, 613, 458, 463,
	464, 465, 467, 468, 469, 470, 534, 551, 518, 488,
	451, 542, 485, 489, 490, 554, 0, 0, 0, 442,
	335, 336, 0, 314, 262, 263, 607, 300, 365, 556,
	589, 481, 0, 543, 482, 491, 292, 515, 527, 526,
	361, 441, 0, 538, 541, 471, 606, 0, 535, 550,
	609, 549, 603, 371, 0, 392, 547, 494, 0, 539,
	513, 0, 540, 509, 544, 0, 483, 0, 399, 423,
	435, 452, 455, 484, 569, 570, 571, 267, 454, 573,
	574, 575, 576, 577, 578, 579, 572, 426, 516, 493,
	519, 434, 496, 495, 0, 0, 530, 450, 531, 532,
	355, 356, 357, 358, 318, 557, 285, 453, 381, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 520, 614, 0, 580, 581, 0, 0, 447, 448,
	313, 320, 466, 322, 284, 370, 315, 432, 329, 0,
	459, 524, 460, 583, 586, 584, 585, 362, 325, 326,
	396, 330, 340, 384, 431, 368, 389, 282, 422, 397,
	344, 510, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	564, 563, 562, 561, 560, 559, 558, 0, 0, 507,
	409, 294, 256, 290, 291, 298, 604, 601, 413, 605,
	0, 264, 487, 338, 0, 379, 312, 552, 553, 0,
	0, 212, 213, 214, 215, 216, 217, 218, 219, 257,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 233, 234, 235, 236, 555, 227, 228, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 0, 0, 0, 258, 259, 260, 261, 0,
	0, 252, 253, 254, 255, 0, 0, 0, 438, 439,
	440, 462, 424, 486, 602, 0, 0, 0, 0, 0,
	0, 0, 536, 548, 582, 0, 591, 592, 594, 596,
	595, 0, 608, 477, 478, 588, 367, 0, 492, 525,
	514, 597, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 0, 528, 479, 398, 351, 546,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 280, 203, 474, 593, 476,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 0, 417,
	445, 301, 436, 0, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 461,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	0, 0, 590, 0, 430, 0, 0, 1468, 0, 0,
	0, 402, 0, 0, 334, 0, 0, 0, 446, 0,
	388, 369, 610, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 611, 612, 613, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 607, 300, 365, 556, 589, 481,
	0, 543, 482, 491, 292, 515, 527, 526, 361, 441,
	0, 538, 541, 471, 606, 0, 535, 550, 609, 549,
	603, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 426, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 450, 531, 532, 355, 356,
	357, 358, 318, 557, 285, 453, 381, 0, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	614, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 604, 601, 413, 605, 0, 264,
	487, 338, 0, 379, 312, 552, 553, 0, 0, 212,
	213, 214, 215, 216, 217, 218, 219, 257, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 233,
	234, 235, 236, 555, 227, 228, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	0, 0, 0, 258, 259, 260, 261, 0, 0, 252,
	253, 254, 255, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 602, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 595, 0,
	608, 477, 478, 588, 367, 0, 492, 525, 514, 597,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	621, 307, 0, 0, 337, 529, 511, 521, 512, 497,
	498, 499, 506, 317, 500, 501, 502, 472, 503, 473,
	504, 505, 0, 528, 479, 398, 351, 546, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 280, 203, 474, 593, 476, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 403, 420, 281, 394, 433, 286, 401, 276, 366,
	390, 0, 0, 272, 418, 400, 348, 327, 328, 271,
	0, 385, 305, 319, 302, 364, 0, 417, 445, 301,
	436, 0, 428, 274, 0, 427, 363, 414, 419, 349,
	343, 273, 416, 347, 342, 331, 309, 461, 332, 333,
	323, 375, 341, 376, 324, 353, 352, 354, 0, 0,
	0, 0, 0, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 587, 0, 0,
	590, 0, 430, 0, 0, 0, 0, 0, 0, 402,
	0, 0, 334, 0, 0, 0, 446, 0, 388, 369,
	610, 0, 0, 386, 339, 415, 377, 421, 404, 429,
	382, 378, 265, 405, 304, 350, 277, 279, 299, 306,
	308, 310, 311, 359, 360, 372, 393, 406, 407, 408,
	303, 287, 387, 288, 321, 289, 266, 295, 293, 296,
	395, 297, 268, 373, 412, 0, 316, 383, 346, 269,
	345, 374, 411, 410, 278, 437, 443, 444, 533, 0,
	449, 611, 612, 613, 458, 463, 464, 465, 467, 468,
	469, 470, 534, 551, 518, 488, 451, 542, 485, 489,
	490, 554, 0, 0, 0, 442, 335, 336, 0, 314,
	262, 263, 607, 300, 365, 556, 589, 481, 0, 543,
	482, 491, 292, 515, 527, 526, 361, 441, 0, 538,
	541, 471, 606, 0, 535, 550, 609, 549, 603, 371,
	0, 392, 547, 494, 0, 539, 513, 0, 540, 509,
	544, 0, 483, 0, 399, 423, 435, 452, 455, 484,
	569, 570, 571, 267, 454, 573, 574, 575, 576, 577,
	578, 579, 572, 426, 516, 493, 519, 434, 496, 495,
	0, 0, 530, 450, 531, 532, 355, 356, 357, 358,
	318, 557, 285, 453, 381, 0, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 522, 523, 520, 614, 0,
	580, 581, 0, 0, 447, 448, 313, 320, 466, 322,
	284, 370, 315, 432, 329, 0, 459, 524, 460, 583,
	586, 584, 585, 362, 325, 326, 396, 330, 340, 384,
	431, 368, 389, 282, 422, 397, 344, 510, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 564, 563, 562, 561,
	560, 559, 558, 0, 0, 507, 409, 294, 256, 290,
	291, 298, 604, 601, 413, 605, 0, 264, 487, 338,
	0, 379, 312, 552, 553, 0, 0, 212, 213, 214,
	215, 216, 217, 218, 219, 257, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 233, 234, 235,
	236, 555, 227, 228, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 0, 0,
	0, 258, 259, 260, 261, 0, 0, 252, 253, 254,
	255, 0, 0, 0, 438, 439, 440, 462, 424, 486,
	602, 0, 0, 0, 0, 0, 0, 0, 536, 548,
	582, 0, 591, 592, 594, 596, 595, 0, 608, 477,
	478, 588, 367, 0, 492, 525, 514, 597, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	0, 0, 337, 529, 511, 521, 512, 497, 498, 499,
	506, 317, 500, 501, 502, 472, 503, 473, 504, 505,
	0, 528, 479, 398, 351, 546, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 280, 203, 474, 593, 476, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 403,
	420, 281, 394, 433, 286, 401, 276, 366, 390, 0,
	0, 272, 418, 400, 348, 327, 328, 271, 0, 385,
	305, 319, 302, 364, 0, 417, 445, 301, 436, 0,
	428, 274, 0, 427, 363, 414, 419, 349, 343, 273,
	416, 347, 342, 331, 309, 461, 332, 333, 323, 375,
	341, 376, 324, 353, 352, 354, 0, 0, 0, 0,
	0, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 0, 631, 590, 0,
	430, 0, 0, 0, 0, 0, 0, 402, 0, 0,
	334, 0, 0, 0, 446, 0, 388, 369, 610, 0,
	0, 386, 339, 415, 377, 421, 404, 429, 382, 378,
	265, 405, 304, 350, 277, 279, 299, 306, 308, 310,
	311, 359, 360, 372, 393, 406, 407, 408, 303, 287,
	387, 288, 321, 289, 266, 295, 293, 296, 395, 297,
	268, 373, 412, 0, 316, 383, 346, 269, 345, 374,
	411, 410, 278, 437, 443, 444, 533, 0, 449, 611,
	612, 613, 458, 463, 464, 465, 467, 468, 469, 470,
	534, 551, 518, 488, 451, 542, 485, 489, 490, 554,
	0, 0, 0, 442, 335, 336, 0, 314, 262, 263,
	607, 300, 365, 556, 589, 481, 0, 543, 482, 491,
	292, 515, 527, 526, 361, 441, 0, 538, 541, 471,
	606, 0, 535, 550, 609, 549, 603, 371, 0, 392,
	547, 494, 0, 539, 513, 0, 540, 509, 544, 0,
	483, 0, 399, 423, 435, 452, 455, 484, 569, 570,
	571, 267, 454, 573, 574, 575, 576, 577, 578, 579,
	572, 426, 516, 493, 519, 434, 496, 495, 0, 0,
	530, 450, 531, 532, 355, 356, 357, 358, 318, 557,
	285, 453, 381, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 522, 523, 520, 614, 0, 580, 581,
	0, 0, 447, 448, 313, 320, 466, 322, 284, 370,
	315, 432, 329, 0, 459, 524, 460, 583, 586, 584,
	585, 362, 325, 326, 396, 330, 340, 384, 431, 368,
	389, 282, 422, 397, 344, 510, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 564, 563, 562, 561, 560, 559,
	558, 0, 0, 507, 409, 294, 256, 290, 291, 298,
	604, 601, 413, 605, 0, 264, 487, 338, 0, 379,
	312, 552, 553, 0, 0, 212, 213, 214, 215, 216,
	217, 218, 219, 257, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 233, 234, 235, 236, 555,
	227, 228, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 0, 0, 0, 258,
	259, 260, 261, 0, 0, 252, 253, 254, 255, 0,
	0, 0, 438, 439, 440, 462, 424, 486, 602, 0,
	0, 0, 0, 0, 0, 0, 536, 548, 582, 0,
	591, 592, 594, 596, 595, 0, 608, 477, 478, 588,
	367, 0, 492, 525, 514, 597, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 0, 0,
	337, 529, 511, 521, 512, 497, 498, 499, 506, 317,
	500, 501, 502, 472, 503, 473, 504, 505, 0, 528,
	479, 398, 351, 546, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 280,
	203, 474, 593, 476, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 403, 420, 281,
	394, 433, 286, 401, 276, 366, 390, 0, 0, 272,
	418, 400, 348, 327, 328, 271, 0, 385, 305, 319,
	302, 364, 0, 417, 445, 301, 436, 0, 428, 274,
	0, 427, 363, 414, 419, 349, 343, 273, 416, 347,
	342, 331, 309, 461, 332, 333, 323, 375, 341, 376,
	324, 353, 352, 354, 0, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 587, 0, 0, 590, 0, 430, 0,
	0, 0, 0, 0, 0, 402, 0, 0, 334, 0,
	0, 0, 446, 0, 388, 369, 610, 0, 0, 386,
	339, 415, 377, 421, 404, 429, 382, 378, 265, 405,
	304, 350, 277, 279, 299, 306, 308, 310, 311, 359,
	360, 372, 393, 406, 407, 408, 303, 287, 387, 288,
	321, 289, 266, 295, 293, 296, 395, 297, 268, 373,
	412, 0, 316, 383, 346, 269, 345, 374, 411, 410,
	278, 437, 443, 444, 533, 0, 449, 611, 612, 613,
	458, 463, 464, 465, 467, 468, 469, 470, 534, 551,
	518, 488, 451, 542, 485, 489, 490, 554, 0, 0,
	0, 442, 335, 336, 0, 314, 262, 263, 607, 300,
	365, 556, 589, 481, 0, 543, 482, 491, 292, 515,
	527, 526, 361, 441, 0, 538, 541, 471, 606, 0,
	535, 550, 609, 549, 603, 371, 0, 392, 547, 494,
	0, 539, 513, 0, 540, 509, 544, 0, 483, 0,
	399, 423, 435, 452, 455, 484, 569, 570, 571, 267,
	454, 573, 574, 575, 576, 577, 578, 579, 572, 426,
	516, 493, 519, 434, 496, 495, 0, 0, 530, 450,
	531, 532, 355, 356, 357, 358, 318, 557, 285, 453,
	381, 0, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 523, 520, 614, 0, 580, 581, 0, 0,
	447, 448, 313, 320, 466, 322, 284, 370, 315, 432,
	329, 0, 459, 524, 460, 583, 586, 584, 585, 362,
	325, 326, 396, 330, 340, 384, 431, 368, 389, 282,
	422, 397, 344, 510, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 564, 563, 562, 561, 560, 559, 558, 911,
	0, 507, 409, 294, 256, 290, 291, 298, 604, 601,
	413, 605, 0, 264, 487, 338, 0, 379, 312, 552,
	553, 0, 0, 212, 213, 214, 215, 216, 217, 218,
	219, 257, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 233, 234, 235, 236, 555, 227, 228,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 0, 0, 0, 258, 259, 260,
	261, 0, 0, 252, 253, 254, 255, 0, 0, 0,
	438, 439, 440, 462, 424, 486, 602, 0, 0, 0,
	0, 0, 0, 0, 536, 548, 582, 0, 591, 592,
	594, 596, 595, 0, 608, 477, 478, 588, 367, 0,
	492, 525, 514, 597, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 307, 0, 0, 337, 529,
	511, 521, 512, 497, 498, 499, 506, 317, 500, 501,
	502, 472, 503, 473, 504, 505, 0, 528, 479, 398,
	351, 546, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 280, 203, 474,
	593, 476, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 403, 420, 281, 394, 433,
	286, 401, 276, 366, 390, 0, 0, 272, 418, 400,
	348, 327, 328, 271, 0, 385, 305, 319, 302, 364,
	0, 417, 445, 301, 436, 0, 428, 274, 0, 427,
	363, 414, 419, 349, 343, 273, 416, 347, 342, 331,
	309, 461, 332, 333, 323, 375, 341, 376, 324, 353,
	352, 354, 0, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 0, 0, 590, 0, 430, 0, 0, 0,
	0, 0, 0, 402, 0, 0, 334, 0, 0, 0,
	446, 0, 388, 369, 610, 0, 0, 386, 339, 415,
	377, 421, 404, 429, 382, 378, 265, 405, 304, 350,
	277, 279, 299, 306, 308, 310, 311, 359, 360, 372,
	393, 406, 407, 408, 303, 287, 387, 288, 321, 289,
	266, 295, 293, 296, 395, 297, 268, 373, 412, 0,
	316, 383, 346, 269, 345, 374, 411, 410, 278, 437,
	443, 444, 533, 0, 449, 611, 612, 613, 458, 463,
	464, 465, 467, 468, 469, 470, 534, 551, 518, 488,
	451, 542, 485, 489, 490, 554, 0, 0, 0, 442,
	335, 336, 0, 314, 262, 263, 607, 300, 365, 556,
	589, 481, 0, 543, 482, 491, 292, 515, 527, 526,
	361, 441, 0, 538, 541, 471, 606, 0, 535, 550,
	609, 549, 603, 371, 0, 392, 547, 494, 0, 539,
	513, 0, 540, 509, 544, 0, 483, 0, 399, 423,
	435, 452, 455, 484, 569, 570, 571, 267, 454, 573,
	574, 575, 576, 577, 578, 579, 572, 426, 516, 493,
	519, 434, 496, 495, 0, 0, 530, 450, 531, 532,
	355, 356, 357, 358, 318, 557, 285, 453, 381, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 520, 614, 0, 580, 581, 0, 0, 447, 448,
	313, 320, 466, 322, 284, 370, 315, 432, 329, 0,
	459, 524, 460, 583, 586, 584, 585, 362, 325, 326,
	396, 330, 340, 384, 431, 368, 389, 282, 422, 397,
	344, 510, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	564, 563, 562, 561, 560, 559, 558, 0, 0, 507,
	409, 294, 256, 290, 291, 298, 604, 601, 413, 605,
	0, 264, 487, 338, 0, 379, 312, 552, 553, 0,
	0, 212, 213, 214, 215, 216, 217, 218, 219, 257,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 233, 234, 235, 236, 555, 227, 228, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 0, 0, 0, 258, 259, 260, 261, 0,
	0, 252, 253, 254, 255, 0, 0, 0, 438, 439,
	440, 462, 424, 486, 602, 0, 0, 0, 0, 0,
	0, 0, 536, 548, 582, 0, 591, 592, 594, 596,
	595, 0, 608, 477, 478, 588, 367, 0, 492, 525,
	514, 597, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 0, 528, 479, 398, 351, 546,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 280, 203, 474, 593, 476,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 403, 1418, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 0, 417,
	445, 301, 436, 0, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 461,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	0, 0, 590, 0, 430, 0, 0, 0, 0, 0,
	0, 402, 0, 0, 334, 0, 0, 0, 446, 0,
	388, 369, 610, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 611, 612, 613, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 607, 300, 365, 556, 589, 481,
	0, 543, 482, 491, 292, 515, 527, 526, 361, 441,
	0, 538, 541, 471, 606, 0, 535, 550, 609, 549,
	603, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 426, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 450, 531, 532, 355, 356,
	357, 358, 318, 557, 285, 453, 381, 0, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	614, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 604, 601, 413, 605, 0, 264,
	487, 338, 0, 379, 312, 552, 553, 0, 0, 212,
	213, 214, 215, 216, 217, 218, 219, 257, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 233,
	234, 235, 236, 555, 227, 228, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	0, 0, 0, 258, 259, 260, 261, 0, 0, 252,
	253, 254, 255, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 602, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 595, 0,
	608, 477, 478, 588, 367, 0, 492, 525, 514, 597,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 307, 0, 0, 337, 529, 511, 521, 512, 497,
	498, 499, 506, 317, 500, 501, 502, 472, 503, 473,
	504, 505, 0, 528, 479, 398, 351, 546, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 280, 203, 474, 593, 476, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 403, 1416, 281, 394, 433, 286, 401, 276, 366,
	390, 0, 0, 272, 418, 400, 348, 327, 328, 271,
	0, 385, 305, 319, 302, 364, 0, 417, 445, 301,
	436, 0, 428, 274, 0, 427, 363, 414, 419, 349,
	343, 273, 416, 347, 342, 331, 309, 461, 332, 333,
	323, 375, 341, 376, 324, 353, 352, 354, 0, 0,
	0, 0, 0, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 587, 0, 0,
	590, 0, 430, 0, 0, 0, 0, 0, 0, 402,
	0, 0, 334, 0, 0, 0, 446, 0, 388, 369,
	610, 0, 0, 386, 339, 415, 377, 421, 404, 429,
	382, 378, 265, 405, 304, 350, 277, 279, 299, 306,
	308, 310, 311, 359, 360, 372, 393, 406, 407, 408,
	303, 287, 387, 288, 321, 289, 266, 295, 293, 296,
	395, 297, 268, 373, 412, 0, 316, 383, 346, 269,
	345, 374, 411, 410, 278, 437, 443, 444, 533, 0,
	449, 611, 612, 613, 458, 463, 464, 465, 467, 468,
	469, 470, 534, 551, 518, 488, 451, 542, 485, 489,
	490, 554, 0, 0, 0, 442, 335, 336, 0, 314,
	262, 263, 607, 300, 365, 556, 589, 481, 0, 543,
	482, 491, 292, 515, 527, 526, 361, 441, 0, 538,
	541, 471, 606, 0, 535, 550, 609, 549, 603, 371,
	0, 392, 547, 494, 0, 539, 513, 0, 540, 509,
	544, 0, 483, 0, 399, 423, 435, 452, 455, 484,
	569, 570, 571, 267, 454, 573, 574, 575, 576, 577,
	578, 579, 572, 426, 516, 493, 519, 434, 496, 495,
	0, 0, 530, 450, 531, 532, 355, 356, 357, 358,
	318, 557, 285, 453, 381, 0, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 522, 523, 520, 614, 0,
	580, 581, 0, 0, 447, 448, 313, 320, 466, 322,
	284, 370, 315, 432, 329, 0, 459, 524, 460, 583,
	586, 584, 585, 362, 325, 326, 396, 330, 340, 384,
	431, 368, 389, 282, 422, 397, 344, 510, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 564, 563, 562, 561,
	560, 559, 558, 0, 0, 507, 409, 294, 256, 290,
	291, 298, 604, 601, 413, 605, 0, 264, 487, 338,
	0, 379, 312, 552, 553, 0, 0, 212, 213, 214,
	215, 216, 217, 218, 219, 257, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 233, 234, 235,
	236, 555, 227, 228, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 0, 0,
	0, 258, 259, 260, 261, 0, 0, 252, 253, 254,
	255, 0, 0, 0, 438, 439, 440, 462, 424, 486,
	602, 0, 0, 0, 0, 0, 0, 0, 536, 548,
	582, 0, 591, 592, 594, 596, 595, 0, 608, 477,
	478, 588, 367, 0, 492, 525, 514, 597, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	0, 0, 337, 529, 511, 521, 512, 497, 498, 499,
	506, 317, 500, 501, 502, 472, 503, 473, 504, 505,
	0, 528, 479, 398, 351, 546, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 280, 203, 474, 593, 476, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 403,
	420, 281, 394, 433, 286, 401, 276, 366, 390, 0,
	0, 272, 418, 400, 348, 327, 328, 271, 0, 385,
	305, 319, 302, 364, 0, 417, 445, 301, 436, 0,
	428, 274, 0, 427, 363, 414, 419, 349, 343, 273,
	416, 347, 342, 331, 309, 461, 332, 333, 323, 375,
	341, 376, 324, 353, 352, 354, 0, 0, 0, 0,
	0, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 0, 0, 590, 0,
	430, 0, 0, 0, 0, 0, 0, 402, 0, 0,
	334, 0, 0, 0, 446, 0, 388, 369, 610, 0,
	0, 386, 339, 415, 377, 421, 404, 429, 382, 378,
	265, 405, 304, 350, 277, 279, 697, 306, 308, 310,
	311, 359, 360, 372, 393, 406, 407, 408, 303, 287,
	387, 288, 321, 289, 266, 295, 293, 296, 395, 297,
	268, 373, 412, 0, 316, 383, 346, 269, 345, 374,
	411, 410, 278, 437, 443, 444, 533, 0, 449, 611,
	612, 613, 458, 463, 464, 465, 467, 468, 469, 470,
	534, 551, 518, 488, 451, 542, 485, 489, 490, 554,
	0, 0, 0, 442, 335, 336, 0, 314, 262, 263,
	607, 300, 365, 556, 589, 481, 0, 543, 482, 491,
	292, 515, 527, 526, 361, 441, 0, 538, 541, 471,
	606, 0, 535, 550, 609, 549, 603, 371, 0, 392,
	547, 494, 0, 539, 513, 0, 540, 509, 544, 0,
	483, 0, 399, 423, 435, 452, 455, 484, 569, 570,
	571, 267, 454, 573, 574, 575, 576, 577, 578, 579,
	572, 426, 516, 493, 519, 434, 496, 495, 0, 0,
	530, 450, 531, 532, 355, 356, 357, 358, 318, 557,
	285, 453, 381, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 522, 523, 520, 614, 0, 580, 581,
	0, 0, 447, 448, 313, 320, 466, 322, 284, 370,
	315, 432, 329, 0, 459, 524, 460, 583, 586, 584,
	585, 362, 325, 326, 396, 330, 340, 384, 431, 368,
	389, 282, 422, 397, 344, 510, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 564, 563, 562, 561, 560, 559,
	558, 0, 0, 507, 409, 294, 256, 290, 291, 298,
	604, 601, 413, 605, 0, 264, 487, 338, 0, 379,
	312, 552, 553, 0, 0, 212, 213, 214, 215, 216,
	217, 218, 219, 257, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 233, 234, 235, 236, 555,
	227, 228, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 0, 0, 0, 258,
	259, 260, 261, 0, 0, 252, 253, 254, 255, 0,
	0, 0, 438, 439, 440, 462, 424, 486, 602, 0,
	0, 0, 0, 0, 0, 0, 536, 548, 582, 0,
	591, 592, 594, 596, 595, 0, 608, 477, 478, 588,
	367, 0, 492, 525, 514, 597, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 0, 0,
	337, 529, 511, 521, 512, 497, 498, 499, 506, 317,
	500, 501, 502, 472, 503, 473, 504, 505, 0, 528,
	479, 398, 351, 546, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 280,
	203, 474, 593, 476, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 403, 420, 281,
	394, 433, 286, 401, 276, 366, 390, 0, 0, 272,
	418, 400, 348, 327, 328, 271, 0, 385, 305, 319,
	302, 364, 0, 417, 445, 301, 436, 0, 428, 274,
	0, 427, 363, 414, 419, 349, 343, 273, 416, 347,
	342, 331, 309, 461, 332, 333, 323, 375, 341, 376,
	324, 353, 352, 354, 0, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 587, 0, 0, 590, 0, 430, 0,
	0, 0, 0, 0, 0, 402, 0, 0, 334, 0,
	0, 0, 446, 0, 388, 369, 610, 0, 0, 386,
	339, 415, 377, 421, 404, 429, 655, 378, 265, 405,
	304, 350, 277, 279, 299, 306, 308, 310, 311, 359,
	360, 372, 393, 406, 407, 408, 303, 287, 387, 288,
	321, 289, 266, 295, 293, 296, 395, 297, 268, 373,
	412, 0, 316, 383, 346, 269, 345, 374, 411, 410,
	278, 437, 443, 444, 533, 0, 449, 611, 612, 613,
	458, 463, 464, 465, 467, 468, 469, 470, 534, 551,
	518, 488, 451, 542, 485, 489, 490, 554, 0, 0,
	0, 442, 335, 336, 0, 314, 262, 263, 607, 300,
	365, 556, 589, 481, 0, 543, 482, 491, 292, 515,
	527, 526, 361, 441, 0, 538, 541, 471, 606, 0,
	535, 550, 609, 549, 603, 371, 0, 392, 547, 494,
	0, 539, 513, 0, 540, 509, 544, 0, 483, 0,
	399, 423, 435, 452, 455, 484, 569, 570, 571, 267,
	454, 573, 574, 575, 576, 577, 578, 656, 572, 426,
	516, 493, 519, 434, 496, 495, 0, 0, 530, 450,
	531, 532, 355, 356, 357, 358, 318, 557, 285, 453,
	381, 0, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 523, 520, 614, 0, 580, 581, 0, 0,
	447, 448, 313, 320, 466, 322, 284, 370, 315, 432,
	329, 0, 459, 524, 460, 583, 586, 584, 585, 362,
	325, 326, 396, 330, 340, 384, 431, 368, 389, 282,
	422, 397, 344, 510, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 564, 563, 562, 561, 560, 559, 558, 0,
	0, 507, 409, 294, 256, 290, 291, 298, 604, 601,
	413, 605, 0, 264, 487, 338, 0, 379, 312, 552,
	553, 0, 0, 212, 213, 214, 215, 216, 217, 218,
	219, 257, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 233, 234, 235, 236, 555, 227, 228,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 0, 0, 0, 258, 259, 260,
	261, 0, 0, 252, 253, 254, 255, 0, 0, 0,
	438, 439, 440, 462, 424, 486, 602, 0, 0, 0,
	1887, 0, 0, 0, 536, 548, 582, 180, 591, 592,
	594, 596, 595, 0, 608, 477, 478, 588, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3329,
	0, 0, 0, 0, 0, 1889, 0, 0, 0, 0,
	0, 1174, 1175, 1176, 1173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 903, 0, 904, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1864, 0, 0, 0,
	0, 0, 884, 0, 0, 0, 1887, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 898, 0, 894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1673, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1889, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1880, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 0, 0, 0, 0, 0,
	0, 0, 3485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1868, 900, 0, 893, 0, 0,
	0, 0, 0, 0, 0, 1874, 897, 896, 0, 0,
	1880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 0, 1862, 1896, 885, 0, 1863,
	1865, 1867, 1887, 1869, 1870, 1871, 1875, 1876, 1877, 1879,
	1882, 1883, 1884, 1669, 0, 0, 0, 892, 0, 1666,
	1872, 1881, 1873, 1668, 1665, 1667, 1671, 1672, 0, 0,
	0, 1670, 0, 0, 0, 0, 902, 1889, 0, 0,
	0, 891, 0, 0, 0, 890, 0, 0, 0, 0,
	0, 877, 0, 0, 1888, 883, 0, 0, 0, 0,
	1868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1874, 0, 0, 1887, 0, 0, 881, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1864, 0,
	0, 1862, 1896, 0, 0, 1863, 1865, 1867, 1885, 1869,
	1870, 1871, 1875, 1876, 1877, 1879, 1882, 1883, 1884, 1889,
	0, 0, 0, 0, 901, 1861, 1872, 1881, 1873, 0,
	0, 0, 1860, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	882, 0, 0, 0, 0, 0, 1878, 0, 0, 0,
	1888, 0, 3456, 0, 0, 1866, 1880, 0, 0, 0,
	1864, 0, 0, 0, 1654, 1655, 1656, 1657, 1658, 1659,
	1660, 1661, 1662, 1663, 1664, 1676, 1677, 1678, 1679, 1680,
	1681, 1674, 1675, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1885, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1861, 0, 0, 0, 0, 0, 899, 1860, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1880, 0,
	0, 0, 0, 0, 0, 0, 1868, 0, 0, 0,
	0, 0, 1878, 0, 0, 0, 0, 1874, 0, 0,
	0, 1866, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 0, 144, 0, 0, 0, 1862, 1896, 0,
	0, 1863, 1865, 1867, 0, 1869, 1870, 1871, 1875, 1876,
	1877, 1879, 1882, 1883, 1884, 0, 0, 0, 0, 0,
	0, 0, 1872, 1881, 1873, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1874,
	0, 0, 0, 0, 0, 0, 1888, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1862,
	1896, 0, 0, 1863, 1865, 1867, 0, 1869, 1870, 1871,
	1875, 1876, 1877, 1879, 1882, 1883, 1884, 0, 0, 0,
	0, 0, 0, 0, 1872, 1881, 1873, 0, 0, 0,
	1885, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1861, 0, 0,
	0, 0, 0, 0, 1860, 0, 0, 0, 1888, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1878, 0,
	0, 0, 0, 0, 0, 0, 0, 1866, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1885, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1861,
	0, 0, 0, 0, 0, 0, 1860, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1878, 0, 0, 0, 0, 0, 0, 0, 0, 1866,
}

var yyPact = [...]int{
	321, -1000, -1000, -1000, -326, 13827, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	43655, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 345, 43655, -324, 27238, 41831, -1000, -1000, 2438, -1000,
	42439, 15671, 43655, 419, 415, 43655, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 786, -1000, 46087, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 685, 4421, 45479, 10759,
	-246, -1000, 1432, -51, 2326, 955, 960, 1185, 1185, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 46698, 805, 43047, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3699, 589, 805,
	20545, 77, 75, 1432, 404, -102, -101, -108, 430, -1000,
	1008, 3702, 182, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10759, 10759, 13827, -360, 13827, 10759,
	43655, 43655, -1000, -1000, -1000, -1000, -324, 42439, 685, 4421,
	10759, 2326, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -101, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-102, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -108, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 75, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4661, -1000,
	1423, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2175, 2868, 1419, 2325, 614,
	41831, 43655, -1000, 124, 614, -1000, -1000, -1000, 1432, 3268,
	-1000, 43655, 43655, 136, 1695, -1000, 411, 358, 352, 278,
	1418, -1000, -1000, -1000, -1000, -1000, -1000, 545, 3232, -1000,
	43655, 43655, 2896, 43655, -1000, 2109, 564, 4345, 3077, 1051,
	804, 2927, -1000, -1000, 2867, -1000, 262, 274, 281, 728,
	342, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 284, -1000,
	3155, -1000, -1000, 266, -1000, -1000, 258, -1000, -1000, -1000,
	73, -1000, -1000, -1000, -1000, -1000, -1000, -24, -1000, -1000,
	1017, 2057, 10759, 1951, -1000, 2769, 1472, -1000, -1000, -1000,
	6470, 12595, 12595, 12595, 12595, 43655, -1000, -1000, 2666, 10759,
	2861, 2860, 2859, 2858, -1000, -1000, -1000, -1000, -1000, -1000,
	1416, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1856, -1000, -1000, -1000, 13207, -1000, 2855, 2854, 2848, 2844,
	2838, 2837, 2818, 2816, 2813, 2802, 2799, 2798, 2797, 2796,
	2533, 15053, 2795, 2322, 2321, 2793, 2792, 2791, 2319, 2790,
	2789, 2788, 2533, 2533, 2786, 2784, 2783, 2778, 2777, 2776,
	2775, 2766, 2757, 2756, 2754, 2742, 2737, 2716, 2715, 2714,
	2712, 2711, 2710, 2705, 2704, 2703, 2702, 2698, 2697, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1273, -1000, 2696, 3258, 2576, -1000, 3148, 3146,
	3133, 3131, -289, 2689, 2095, -1000, -1000, 90, -1000, -73,
	-1000, -1000, 949, -1000, 911, -1000, 662, 43655, 43655, 200,
	776, 662, 662, 662, 662, 662, 762, 662, 3169, 785,
	782, 781, 780, 662, -48, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1686, 1684, 2960, 877, -1000, -1000, -1000, -1000,
	1336, 43655, -1000, 2616, 1605, 1605, 3218, 3168, 600, 592,
	568, 1605, 484, -1000, 1707, 1707, 1707, 1707, 1605, 436,
	581, 3172, 3172, 51, 1707, 62, 1605, 1605, 62, 1605,
	1605, -1000, 1680, 212, -299, -1000, -1000, -1000, -1000, 1707,
	1707, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3145, 3143,
	685, 685, 43655, 199, 43655, 685, 685, 685, 693, 14,
	44871, 44263, 2109, 557, 555, 1340, 1719, -1000, 1554, 43655,
	43655, 1554, 1554, 23590, 22982, -1000, 43655, -1000, 3258, 2576,
	2523, 1673, 2522, 2576, -113, -114, -115, 685, 685, 685,
	685, 685, 243, 685, 685, 685, 685, 685, 43655, 43655,
	41223, 685, 685, 685, 8918, 8918, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 13827, 1797, 1974, 181, -35,
	-317, 257, -1000, -1000, 43655, 3041, 213, -1000, -1000, -1000,
	2544, -1000, 2595, 2595, 2595, 2595, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2595, 2595, 2603, 2688, -1000,
	-1000, 2581, 2581, 2581, 2544, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2598, 2598, 2602, 2602, 2598, 43655, -125, -1000, -1000, 10759,
	43655, 3055, 362, 2685, 614, -1000, 43655, 10759, 381, 3258,
	3052, 3172, 3210, -1000, -1000, 1408, 2093, 2316, -1000, 278,
	-1000, 372, 278, 1584, -1000, 1096, -1000, -1000, -1000, -1000,
	-1000, 43655, -24, 394, -1000, -1000, 2302, 2684, -1000, 565,
	1049, 1335, -1000, 264, 4653, 35750, 2109, 35750, 43655, -1000,
	-1000, -1000, -1000, -1000, -1000, 61, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	270, -1000, 10759, 10759, 10759, 10759, 10759, -1000, 655, 11983,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 12595, 12595, 12595,
	12595, 12595, 12595, 12595, 12595, 12595, 12595, 12595, 12595, 2665,
	1698, 12595, 12595, 12595, 12595, 25414, 1673, 2953, 1337, 269,
	1472, 1472, 1472, 1472, 10759, -1000, 1718, 2057, 10759, 10759,
	10759, 10759, 43655, -1000, -1000, 46631, 10759, 10759, 3489, 10759,
	3127, 10759, 10759, 10759, 2504, 5238, 43655, 10759, -1000, 2501,
	2494, -1000, -1000, 1883, 10759, -1000, -1000, 10759, -1000, -1000,
	10759, 12595, 10759, -1000, 10759, 10759, 10759, -1000, -1000, 630,
	3127, 3127, 3127, 1678, 10759, 10759, 3127, 3127, 3127, 1666,
	3127, 3127, 3127, 3127, 3127, 3127, 3127, 3127, 3127, 3127,
	2492, 2491, 2490, 10147, 3172, -246, -1000, 8306, 3052, 3172,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-292, 2682, 43655, 2314, 2313, -336, 21, 944, 917, 927,
	-1000, 43655, 1738, 3121, -1000, 2681, 43655, 662, 662, 662,
	-1000, 43655, 35750, 43655, 43655, 2109, 43655, 43655, 43655, 662,
	662, 662, 662, 43655, -1000, 3014, 35750, 2991, 693, -1000,
	43655, 1336, 3115, 43655, 3218, 12595, 12595, -1000, -1000, 10759,
	40615, 1707, 1605, 1605, -1000, -1000, 43655, -1000, -1000, -1000,
	1707, 43655, 1707, 1707, 3218, 1707, -1000, -1000, -1000, 1605,
	1605, -1000, -1000, 10759, -1000, -1000, 1707, 1707, -1000, -1000,
	3218, 43655, 54, 3218, 3218, 58, -1000, -1000, -1000, 1605,
	43655, 43655, 662, 43655, -1000, 43655, 43655, -1000, -1000, 43655,
	43655, 3978, 43655, 40007, 3140, -1000, 35750, 43655, 43655, 33318,
	-1000, 1261, -1000, -2, -1000, 18, 14, 1554, 14, 1554,
	-1000, 558, 562, 21766, 505, 35750, 5850, -1000, -1000, 1554,
	1554, 5850, 5850, 1491, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1329, -1000, 241, 3172, -1000, -1000, -1000, -1000, -1000,
	2090, 2086, 2082, 43655, 43655, 35750, 2109, 43655, 685, 43655,
	43655, 43655, 43655, 43655, -1000, 2680, 1404, -1000, 3076, 43655,
	43655, 43655, 1159, -1000, -1000, 18711, 1397, 1159, -1000, 1731,
	-1000, 10759, 13827, -268, 10759, 13827, 13827, 10759, 13827, -1000,
	10759, 208, -1000, -1000, -1000, -1000, 2080, -1000, 2079, -1000,
	-1000, -1000, -1000, -1000, 2305, 2305, -1000, 2077, -1000, -1000,
	-1000, -1000, 2076, -1000, -1000, 2075, -1000, -1000, -1000, -1000,
	-185, 2477, 1017, -1000, 2304, 2923, -248, -1000, 19937, 43655,
	43655, 362, -339, 171, -1000, -248, -1000, 19324, 43655, 3172,
	-1000, -253, 3052, 10759, 43655, -1000, 3165, -1000, -1000, 278,
	-1000, 417, 344, -1000, -1000, -1000, -1000, -1000, -1000, 1396,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1321,
	-1000, 43655, -1000, -1000, 264, 35750, 37574, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 250, -1000, -1000, 172, -1000, 756,
	185, 1583, -1000, -1000, 204, 197, 159, 821, 2057, -1000,
	1727, 1727, 1740, -1000, 626, -1000, -1000, -1000, -1000, 2666,
	-1000, -1000, -1000, 2290, 1983, -1000, 1647, 1647, 1466, 1466,
	1466, 1466, 1466, 1656, 1656, -1000, -1000, -1000, 6470, 2665,
	12595, 12595, 12595, 12595, 757, 757, 3772, 3758, -1000, -1000,
	-1000, -1000, 10759, 154, 1726, -1000, 10759, 2420, 1387, 2186,
	1301, 1385, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2474, 2464, 2307, 3229, 2457, 10759, -1000, -1000,
	1582, 1579, 1578, -1000, 2287, 9535, -1000, -1000, -1000, 2456,
	1382, 2452, -1000, -1000, -1000, 2436, 1569, 1145, 2435, 1779,
	2429, 2428, 2427, 2426, 1309, 10759, 10759, 10759, 10759, 2425,
	1567, 1566, 10759, 10759, 10759, 10759, 2424, 10759, 10759, 10759,
	10759, 10759, 10759, 10759, 10759, 10759, 10759, 94, 94, 94,
	1293, 1276, -1000, -1000, 1565, -1000, 2057, -1000, -1000, 3052,
	-1000, 2664, 2055, 1271, -1000, -1000, -320, 2258, -1000, -1000,
	930, 902, 943, 3164, 3062, 43655, 1133, 2657, 43655, 43655,
	43655, 202, -1000, 1175, -1000, 185, -38, 423, 1025, 2895,
	3227, -135, 43655, 43655, 43655, 43655, 3114, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 39399, -1000, 2650, 1550, -1000,
	-1000, 1472, 1472, 2057, 2882, 43655, 43655, 3218, 3218, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1707, 3218, 3218, 1356,
	1605, 1707, -1000, -1000, 1707, -1000, -1000, 1707, -1000, -1000,
	1381, -1000, 43655, -1000, -1000, -1000, 3110, 2616, 1265, -1000,
	-1000, -1000, 3206, 1005, 648, 648, 887, 462, 3200, 17495,
	-1000, 1570, 1114, 735, 3030, 271, -1000, 1570, -182, 628,
	1570, 1570, 1570, 1570, 1570, 1570, 1570, 543, 537, 1570,
	1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
	959, 1570, 1570, 1570, 1570, 1570, -1000, 1570, 2646, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 567, 201, 3138, 327,
	322, 1175, 3136, 340, 3061, 1163, -1000, -1000, -1000, -1000,
	26022, 26022, 21158, 26022, -1000, 191, 14, -22, -1000, -1000,
	1261, 5850, 1261, 5850, -1000, -1000, 733, -1000, -1000, 1025,
	-1000, 43655, 43655, -1000, -1000, 2645, 1664, -1000, -1000, 15053,
	-1000, 5850, 5850, -1000, -1000, 26630, 43655, -1000, -28, -1000,
	-15, 3052, -1000, -1000, -1000, 1246, -1000, -1000, 1250, 1025,
	2921, 43655, 1246, 1246, 1246, -1000, -1000, 16887, 43655, 43655,
	-1000, -1000, -1000, 3218, 8918, -1000, 33318, -1000, -1000, 38790,
	-1000, 38182, 3218, 1704, -1000, 13827, 1882, 177, -1000, 229,
	-323, 174, 1840, 170, 2057, -1000, -1000, 2422, 2421, 1545,
	-1000, 1537, 2418, 1535, 1532, 2044, -1000, 36, -1000, 3044,
	1026, -1000, 2636, -1000, 1529, 2981, -1000, 1243, -1000, 1658,
	1519, -1000, -1000, 10759, -1000, 1026, 1518, 2978, 1243, 3052,
	2303, -1000, 1242, -1000, 2125, 1380, 130, -1000, -1000, -1000,
	43655, 2302, 1516, 37574, 1131, -1000, 731, 1377, 1366, -1000,
	35750, 261, 35750, -1000, 35750, -1000, -1000, 379, -1000, 43655,
	3046, -1000, -1000, -1000, 2258, 1653, -342, 43655, -1000, -1000,
	-1000, -1000, -1000, 1463, -1000, 757, 757, 3772, 2826, -1000,
	12595, -1000, 12595, 2946, -1000, 1659, -1000, 10759, 1877, 4574,
	10759, 4574, 870, 24806, 43655, -1000, -1000, 10759, 10759, -1000,
	2912, -1000, -1000, -1000, -1000, 10759, 10759, 2172, -1000, 43655,
	-1000, -1000, -1000, -1000, 24806, -1000, 12595, -1000, -1000, -1000,
	-1000, 10759, 1187, 1187, 2898, 1451, 94, 94, 94, 2842,
	2835, 2811, 1450, 94, 2780, 2734, 2730, 2699, 2694, 2690,
	2678, 2632, 2613, 2599, -1000, 2635, -1000, -1000, 1876, 11371,
	8306, -1000, -1000, 259, 1239, 2039, 2299, 116, -1000, 1651,
	-1000, -1000, -1000, 900, 377, -1000, 231, 2414, 1234, -1000,
	-1000, 43655, -1000, -1000, -1000, 16887, 2616, 2631, 2616, 102,
	1570, 583, 35750, 551, -1000, 43655, 1859, 1650, 2920, 727,
	3040, 43655, 2625, 363, 2620, 2619, 3102, 409, 4800, 43655,
	1152, -1000, 1361, 3702, -1000, 43655, -1000, 2109, -1000, 1605,
	-1000, -1000, 3218, -1000, -1000, 10759, 10759, 3218, 1605, 1605,
	1707, 43655, -1000, 409, 4800, 3086, 4272, 471, 2178, -1000,
	43655, -1000, -1000, -1000, 837, -1000, 912, 662, 43655, 1768,
	912, 1763, 2618, -1000, -1000, 43655, 43655, 43655, 43655, -1000,
	-1000, 43655, -1000, 43655, 43655, 43655, 43655, 43655, 36966, -1000,
	43655, 43655, -1000, 43655, 1762, 43655, 1758, 3075, -1000, 1570,
	1570, 854, -1000, -1000, 538, -1000, 36966, 2037, 2020, 2019,
	2014, 2297, 2295, 2294, 1570, 1570, 2011, 2293, 36358, 2291,
	1190, 2010, 2009, 2007, 2073, 2286, 864, -1000, 2285, 2059,
	2018, 1959, 43655, 2617, 2222, -1000, -1000, 102, 1570, 310,
	43655, 1644, 583, 422, 2112, 22374, 43655, 33318, 33318, 33318,
	33318, -1000, 2950, 2947, -1000, 2958, 2948, 2967, 43655, 33318,
	2616, -1000, 36358, -1000, -1000, -1000, 1673, 1442, 3072, 931,
	10759, -1000, -1000, -6, -5, -1000, -1000, -1000, 35750, 2281,
	505, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3160, 43655,
	43655, 654, 2411, 1233, -1000, -1000, -1000, 4800, 2595, 2595,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2595,
	2595, 2603, -1000, -1000, 2581, 2581, 2581, 2544, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2598, 2598,
	2602, 2602, 2598, -1000, -1000, 3216, -1000, 1217, -1000, -1000,
	1355, -1000, 3216, 1720, -327, 13827, 1709, 1564, -1000, 10759,
	13827, 10759, -273, 291, -279, -1000, -1000, -1000, 2276, -1000,
	-1000, -1000, 2004, -1000, 2003, -1000, 107, 148, 1757, -248,
	8306, 378, 43655, -248, 43655, 8306, -1000, 43655, 150, 376,
	-248, 3160, 36, 10759, 3027, -1000, -1000, 43655, 2000, -1000,
	-1000, -1000, 3226, 35750, 2109, 1526, 35142, -1000, 253, -1000,
	228, 549, 2267, -1000, 774, 114, 2262, 2258, -1000, -1000,
	-1000, -1000, 12595, 1472, -1000, -1000, -1000, 2057, 10759, 2409,
	-1000, 899, 899, 2099, 2407, 2406, -1000, 2595, 2595, -1000,
	2544, 2581, 2544, 899, 899, 2405, -1000, 2132, 2593, -1000,
	2529, 2489, 10759, -1000, 2402, 3670, 1368, -52, -215, 94,
	94, -1000, -1000, -1000, -1000, 94, 94, 94, 94, -1000,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	625, -128, -305, -133, -307, -1000, 2401, 1212, -1000, -1000,
	-1000, -1000, -1000, 3489, 1211, -1000, -1000, 2258, 2257, -1000,
	-1000, -1000, 43655, 2254, 2253, 1133, 4800, 2400, 3082, 16279,
	3079, 2113, -1000, -1000, -1000, 34534, 542, -1000, -1000, -1000,
	621, 260, 1999, 530, -1000, 43655, 340, 2997, 1640, 2248,
	43655, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3040, -1000,
	1036, 380, 32102, 14445, -1000, 370, 43655, 16279, 16279, 370,
	401, 1669, -1000, 614, 1150, 122, 33318, 43655, -1000, 32710,
	2395, -1000, 1025, 3218, -1000, 2057, 2057, -1000, 3218, 3218,
	1605, -1000, 401, -1000, 370, -1000, 1138, 18103, 474, 429,
	424, -1000, 588, -1000, -1000, 613, 3008, 4800, -1000, 43655,
	-1000, 43655, -1000, 43655, 43655, 662, 10759, 3008, 43655, 710,
	-1000, -1000, 999, 382, 365, 684, 684, 1208, -1000, 3051,
	-1000, -1000, 1149, -1000, -1000, -1000, -1000, 43655, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 24806, 24806, 3130, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2247, 2246, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 43655, 1437, -1000, 1639, 2113, 34534, 1638, 1554,
	2244, 542, 1859, 1636, -1000, 2240, -1000, 1028, 43655, 43655,
	-1000, 1143, -1000, 1635, 2880, 2919, 2880, -1000, -1000, -1000,
	-1000, 2944, -1000, 2708, -1000, -1000, 1143, -1000, -1000, -1000,
	-1000, -1000, 931, -1000, 3159, 912, 912, 912, 2394, -1000,
	-1000, -1000, 1131, 2391, -1000, -1000, -1000, 3242, -1000, -1000,
	-1000, -1000, -1000, -1000, 16887, 3038, 3212, 3198, 33926, 3212,
	-1000, -327, 1586, -1000, 1818, 168, 1783, 43655, -1000, -1000,
	-1000, 2390, 2388, -255, 117, 3197, 3196, 936, -1000, 2387,
	1092, -248, -1000, -1000, 1026, -1000, -1000, -1000, -1000, -248,
	-1000, 1026, -1000, 107, -1000, -1000, 3015, -1000, -1000, 2109,
	-1000, 222, -1000, -1000, -1000, -1000, -1000, -1000, 173, -1000,
	43655, -1000, 1061, 113, -1000, 2057, -1000, -1000, -1000, -1000,
	-1000, 4574, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 10759, -1000, -1000, -1000, 2485, -1000, -1000,
	10759, 2383, 2239, 2382, 2237, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3258, -1000, 3195, 1399, 2379, 2378, 1391, 2377, 2376,
	-1000, 10759, 2373, 3489, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 778, 370, 2366, 1046, -1000, -1000, -1000, -1000, 370,
	-1000, 2235, 179, -1000, -1000, -1000, 2225, 2224, 1975, -1000,
	-1000, 1942, 1363, 194, -1000, -1000, -1000, -1000, -1000, -1000,
	2112, 2104, 1633, -345, -1000, 2580, -1000, 1570, 1570, 1570,
	43655, 1362, -1000, 1570, 1570, 2364, -1000, -1000, 2363, 2361,
	-137, 633, 1610, 1607, -1000, 1972, 26022, 33318, 32710, 1106,
	-1000, 1349, -1000, -1000, -1000, -1000, -1000, 3218, 633, -1000,
	460, 1965, 12595, 2579, 12595, 2571, 482, 2569, 1353, -1000,
	43655, -1000, -1000, 43655, 287, 2566, -1000, 2565, 2876, 434,
	2562, 2561, 43655, 2468, -1000, 3008, 43655, 671, 3037, -1000,
	-1000, -1000, 359, -1000, -1000, 491, -1000, 43655, -1000, 43655,
	-1000, 1433, -1000, 24806, -1000, -1000, 1352, -1000, 2222, 2220,
	-1000, 179, 2218, 5850, -1000, -1000, 2997, 2217, -1000, 43655,
	1028, 1028, 3258, 43655, 8306, -1000, -1000, 10759, 2555, -1000,
	10759, -1000, -1000, -1000, -1000, -1000, 2552, 3022, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1628, -1000, 10759, 10759, -1000,
	-1000, 656, 13827, -282, 282, -1000, -1000, -1000, -257, 2214,
	-1000, -1000, 3194, 2213, 2139, 43655, -1000, -1000, 1026, 1026,
	-255, -1000, -1000, 1025, -1000, -1000, 998, 539, -1000, 2358,
	2442, -1000, 2433, 94, -1000, 94, -1000, 230, 10759, -1000,
	2205, -1000, -1000, -1000, 2204, -1000, -1000, 2255, -1000, 2357,
	4800, -140, -137, 16279, -140, -1000, -1000, 371, -1000, -1000,
	335, -1000, -1000, 1938, 561, -1000, -1000, -1000, 1624, 1794,
	2153, 30278, 24806, 25414, 2203, -1000, -1000, 32102, 1628, 1628,
	46694, 270, 47038, -1000, 2551, 963, 1604, -1000, 1958, -1000,
	1956, -1000, 3218, 1106, 120, -1000, -1000, 1510, -1000, 963,
	2178, 3193, -1000, 3627, 43655, 2846, 43655, 2548, 1623, 12595,
	-1000, 613, 2971, -1000, -1000, 287, -1000, -1000, 1775, 12595,
	-1000, -1000, 2199, 25414, 790, 1621, 1618, 891, 2547, -1000,
	496, 3240, -1000, -1000, -1000, 832, 2546, -1000, 1756, 1750,
	-1000, 43655, -1000, 30278, 30278, 764, 764, 30278, 30278, 2545,
	684, -1000, -1000, 12595, -1000, -1000, 1570, -1000, -1000, -1000,
	1570, 1403, -1000, -1000, -1000, -1000, -1000, -1000, 2104, -1000,
	-1000, 3172, -1000, -1000, 2057, 43655, 2057, 31494, -1000, 3192,
	3185, -1000, 2057, 1017, -1000, -327, 43655, 43655, -260, 1949,
	-1000, 2198, 132, -1000, -1000, 1022, -257, -262, 58, 24806,
	1594, -1000, -1000, -1000, -1000, -1000, 2342, -1000, 559, -1000,
	-1000, -1000, 1017, 2341, 2312, -1000, -1000, -127, -1000, -1000,
	395, -1000, -1000, -1000, 521, 2192, -1000, -1000, 333, -1000,
	-1000, 2191, -1000, -1000, 101, -1000, 1576, 1351, -1000, 2544,
	10759, -1000, -1000, -1000, -1000, -1000, -1000, 610, -1000, 370,
	46966, -1000, 1114, -1000, 998, 610, 29062, 560, 279, -1000,
	1933, -1000, -1000, 3258, -1000, 556, -1000, 477, -1000, 1332,
	-1000, 1303, 30886, 1924, 2527, -1000, 46790, 743, -1000, -1000,
	3772, -1000, -1000, -1000, -1000, -1000, -1000, 2188, 2177, -1000,
	-1000, -1000, -1000, -1000, 1911, 2543, -21, 3126, 2165, -1000,
	-1000, 2541, 1297, 1291, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1287, 1272, 30278, -1000, -1000, 3772, 1900,
	24806, 1570, -1000, -1000, 1263, 1262, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2540, -1000, -1000, 3184, -260, -1000, 2163,
	105, 126, -1000, 2162, -1000, -1000, 640, -251, 86, 84,
	82, -1000, -1000, -1000, 10759, -1000, -1000, 43655, 493, -1000,
	-1000, -1000, 169, -1000, -1000, -1000, -1000, 2153, 2152, -1000,
	30278, 3051, 2107, 438, 3182, -1000, 47038, -1000, 1570, -1000,
	438, 1237, -1000, 1570, 1570, -1000, 407, -1000, 1562, -1000,
	1887, -1000, 3172, -1000, 396, -1000, 431, -1000, -1000, -1000,
	1219, -1000, -1000, -1000, 46790, 461, -1000, 586, 2537, -1000,
	-1000, 2292, 10759, 2533, 1570, 2130, -119, 30278, 2782, 2736,
	2701, 2194, 1213, -1000, -1000, 24806, -1000, -1000, 29670, 43655,
	2139, -1000, -1000, 692, 119, 126, -1000, 3181, 131, 3180,
	3179, 981, 1732, -1000, 95, 91, 88, -1000, -1000, -1000,
	-1000, 513, -1000, 249, -1000, -1000, -1000, 272, -1000, -1000,
	3051, -1000, 3178, 471, -1000, 24806, -1000, -1000, 29062, 1628,
	1628, -1000, -1000, 1886, -1000, -1000, -1000, -1000, 1880, -1000,
	-1000, -1000, 1210, -1000, 43655, 810, 7694, -1000, 1978, -1000,
	43655, -1000, 2918, -1000, 218, 1205, 272, 764, 272, 764,
	272, 764, 272, 764, 235, -1000, -1000, -1000, 1200, -1000,
	-1000, 2531, 1860, 117, 128, 3177, -1000, 2139, 3175, 2139,
	2139, -1000, 100, 640, -1000, -1000, -1000, 2145, -1000, -1000,
	-1000, -1000, 1570, 1570, 2142, 2141, 386, -1000, -1000, -1000,
	28454, 474, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 461,
	47038, -1000, 7694, 1158, -1000, 2057, -1000, 684, -1000, -1000,
	2901, 2532, 3222, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 43655, 3066, 24198, 115, -1000, -1000, -1000,
	2140, -1000, 2139, -1000, -1000, 1568, -1000, -303, 1838, 1807,
	-1000, -1000, 43655, -1000, 43655, 460, -1000, 47038, 1155, -1000,
	7694, -1000, -1000, 3239, -1000, 3234, 808, 808, 272, 272,
	272, 272, -1000, -1000, 43655, -1000, 1141, -1000, -1000, -1000,
	1348, -1000, -1000, -1000, -1000, 2136, -1000, -1000, 2135, -1000,
	-1000, -1000, 1097, 2178, -1000, -1000, -1000, -1000, -1000, 1861,
	502, -1000, 971, -1000, 1560, -1000, 27846, 43655, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 43655, 7082, -1000, 1134, -1000,
	-1000, 2057, 43655, -1000,
}

var yyPgo = [...]int{
	0, 176, 3282, 242, 174, 3793, 79, 241, 235, 226,
	239, 3792, 3791, 3790, 3789, 3052, 3044, 3788, 3787, 3786,
	3785, 3782, 3779, 3776, 3762, 3761, 3760, 3759, 3758, 3757,
	3756, 3752, 3751, 3750, 3749, 3748, 3747, 3746, 3745, 3742,
	3741, 3739, 3735, 3734, 3732, 3729, 3725, 236, 3724, 3723,
	3722, 3721, 3720, 3714, 3713, 3712, 3711, 3709, 3708, 3707,
	3706, 3705, 3703, 3702, 3701, 3700, 3699, 3697, 3694, 3693,
	3692, 3691, 3690, 3686, 3684, 3683, 3682, 3681, 3680, 3679,
	3677, 3676, 224, 3672, 3043, 3671, 3670, 3669, 3668, 3667,
	3666, 3665, 220, 3658, 3653, 3652, 3651, 3647, 3646, 3645,
	3643, 3642, 3639, 3638, 209, 3637, 3635, 3633, 3632, 229,
	3631, 206, 3629, 172, 126, 3627, 3623, 3618, 3617, 3615,
	3614, 233, 184, 71, 3613, 49, 3608, 3607, 215, 3604,
	154, 3603, 151, 3602, 3601, 3599, 3598, 3597, 3596, 3595,
	3593, 3592, 3591, 3590, 3589, 3588, 3587, 3586, 3585, 3584,
	3583, 94, 3580, 253, 3579, 72, 3578, 3575, 129, 73,
	125, 248, 2294, 249, 244, 186, 177, 97, 3574, 325,
	3572, 161, 222, 156, 27, 3570, 138, 3569, 254, 42,
	45, 238, 139, 57, 207, 120, 3567, 213, 104, 107,
	3566, 3564, 142, 3563, 227, 178, 3562, 101, 3558, 3557,
	3556, 3555, 3554, 194, 188, 3552, 3551, 127, 3550, 3547,
	132, 3544, 75, 128, 168, 121, 3542, 2099, 117, 134,
	113, 95, 3541, 89, 3540, 3539, 3538, 3537, 179, 3536,
	3535, 131, 69, 3534, 3532, 3531, 67, 3530, 78, 3529,
	70, 3528, 58, 3526, 3525, 3524, 3523, 3520, 3517, 3516,
	3511, 3508, 3507, 3505, 3504, 54, 3503, 3502, 7, 15,
	14, 3501, 25, 3496, 169, 3495, 3492, 3491, 3490, 3487,
	93, 92, 3485, 90, 165, 3484, 9, 28, 68, 3483,
	3482, 218, 130, 99, 146, 3481, 313, 3480, 3478, 3477,
	159, 3475, 612, 3472, 3469, 3468, 3467, 3465, 3464, 23,
	3463, 214, 39, 3462, 137, 136, 3461, 38, 48, 210,
	230, 3460, 3458, 3456, 141, 204, 116, 88, 0, 3455,
	163, 3454, 3453, 3452, 252, 3450, 225, 243, 166, 152,
	250, 247, 3449, 3448, 65, 3447, 162, 31, 52, 133,
	81, 18, 324, 3446, 415, 8, 192, 3444, 196, 3443,
	195, 16, 316, 150, 3442, 3441, 33, 255, 3440, 3439,
	3437, 123, 3436, 3434, 326, 82, 3432, 3430, 3429, 3427,
	35, 3426, 37, 13, 3425, 118, 3424, 240, 3423, 280,
	157, 181, 180, 153, 217, 232, 85, 77, 3422, 1676,
	148, 96, 22, 3421, 223, 3420, 187, 149, 3416, 124,
	3415, 237, 256, 198, 3413, 182, 10, 44, 36, 29,
	43, 12, 294, 203, 3412, 3411, 21, 50, 3409, 51,
	3407, 19, 3405, 3404, 3402, 74, 5, 3400, 3399, 17,
	20, 3398, 34, 205, 170, 122, 91, 60, 3397, 3394,
	47, 147, 3392, 155, 158, 160, 3390, 76, 3389, 3388,
	3385, 856, 3379, 246, 3377, 3375, 3374, 3373, 3372, 3371,
	3370, 3369, 212, 3365, 105, 40, 3364, 3362, 3361, 3360,
	83, 144, 3359, 3358, 3357, 3356, 32, 140, 3355, 11,
	3354, 26, 24, 30, 3352, 100, 3351, 3, 183, 3349,
	3348, 4, 3347, 3346, 1, 2, 3345, 3344, 114, 3343,
	102, 46, 167, 110, 3342, 3338, 87, 211, 143, 3336,
	3335, 106, 234, 193, 3334, 84, 219, 251, 3333, 200,
	3332, 3329, 3328, 3326, 3325, 3324, 1057, 3323, 3322, 231,
	64, 98, 111, 3321, 3319, 3318, 86, 164, 115, 108,
	59, 80, 3317, 112, 191, 3316, 190, 3314, 3312, 3311,
	103, 3310, 3309, 3306, 3305, 185, 3302, 3301, 189, 221,
	3300, 3299, 311, 3298, 3295, 3294, 3293, 3291, 3290, 3287,
	3286, 3285, 3272, 245, 331, 3270,
}

//line mysql_sql.y:11882
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObejectInfo {
	v, _ := st.union.(tree.ObejectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 568, 571, 571, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 119, 119, 148, 547, 547, 118,
	553, 553, 553, 554, 554, 115, 137, 136, 139, 139,
	138, 138, 135, 135, 131, 134, 134, 133, 133, 132,
	127, 129, 129, 128, 130, 130, 116, 104, 117, 497,
	497, 496, 496, 495, 495, 448, 448, 494, 494, 494,
	493, 493, 493, 492, 492, 491, 491, 490, 490, 488,
	488, 489, 487, 486, 486, 486, 484, 484, 484, 480,
	480, 482, 481, 481, 483, 475, 475, 478, 478, 476,
	476, 476, 476, 479, 474, 474, 474, 473, 473, 103,
	103, 103, 391, 391, 102, 102, 405, 405, 405, 405,
	405, 403, 403, 403, 403, 403, 403, 402, 402, 401,
	401, 406, 406, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 93, 93, 93, 93, 93, 98,
	98, 98, 559, 559, 558, 558, 560, 560, 560, 560,
	561, 561, 96, 96, 96, 97, 400, 400, 400, 94,
	95, 95, 390, 390, 395, 395, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 399,
	399, 399, 397, 397, 396, 396, 398, 398, 87, 87,
	87, 90, 89, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 88, 88, 88, 88, 88, 88, 83, 83,
	83, 83, 83, 82, 82, 84, 84, 387, 387, 386,
	99, 99, 100, 556, 556, 555, 557, 557, 557, 557,
	101, 107, 107, 107, 107, 107, 107, 107, 106, 106,
	109, 109, 108, 110, 92, 92, 92, 92, 92, 92,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 522, 522, 522, 524, 524, 322, 323,
	572, 325, 321, 321, 321, 518, 518, 519, 520, 521,
	521, 521, 105, 14, 193, 193, 423, 423, 11, 11,
	11, 11, 11, 11, 11, 11, 13, 81, 86, 86,
	263, 263, 268, 268, 269, 269, 269, 274, 274, 275,
	275, 264, 264, 264, 264, 264, 264, 264, 264, 264,
	264, 264, 264, 264, 264, 264, 264, 264, 264, 264,
	264, 264, 264, 250, 250, 250, 245, 245, 245, 245,
	246, 246, 247, 247, 248, 248, 248, 248, 249, 249,
	315, 315, 270, 270, 270, 272, 272, 271, 267, 265,
	265, 265, 265, 265, 265, 265, 266, 266, 266, 266,
	273, 273, 79, 85, 85, 85, 535, 535, 80, 546,
	546, 451, 451, 336, 336, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 456, 457, 332, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 54, 57, 58, 53,
	53, 53, 376, 376, 52, 573, 573, 310, 310, 67,
	66, 56, 68, 69, 70, 71, 72, 73, 51, 65,
	65, 65, 65, 65, 65, 65, 65, 76, 469, 469,
	575, 575, 575, 74, 75, 450, 450, 450, 64, 63,
	62, 61, 60, 60, 50, 50, 49, 49, 55, 143,
	59, 144, 144, 329, 329, 329, 331, 331, 327, 574,
	574, 419, 419, 330, 330, 48, 48, 48, 48, 77,
	328, 328, 309, 326, 326, 326, 12, 12, 10, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 26, 27, 29, 384, 384, 381,
	28, 20, 19, 19, 23, 22, 18, 18, 21, 24,
	25, 25, 9, 9, 9, 9, 15, 15, 16, 166,
	166, 218, 218, 530, 530, 526, 526, 527, 527, 527,
	528, 528, 529, 529, 111, 463, 463, 463, 463, 463,
	463, 8, 8, 188, 188, 462, 462, 462, 462, 462,
	462, 388, 388, 388, 507, 507, 507, 508, 187, 187,
	182, 182, 464, 464, 353, 509, 509, 472, 472, 471,
	471, 470, 470, 185, 185, 186, 186, 169, 169, 122,
	122, 477, 477, 477, 477, 485, 485, 447, 447, 255,
	255, 302, 302, 303, 303, 159, 159, 160, 160, 160,
	160, 160, 160, 562, 562, 563, 564, 565, 565, 566,
	566, 566, 567, 567, 567, 567, 567, 515, 515, 517,
	517, 516, 184, 184, 180, 180, 181, 181, 181, 179,
	179, 178, 177, 177, 176, 174, 174, 174, 175, 175,
	175, 192, 192, 162, 162, 162, 161, 161, 161, 161,
	161, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 163, 163, 523, 523, 523, 452, 452,
	452, 459, 459, 283, 283, 284, 284, 282, 282, 164,
	164, 165, 165, 165, 165, 281, 281, 280, 167, 167,
	173, 172, 172, 168, 168, 168, 168, 291, 291, 290,
	290, 290, 290, 114, 120, 120, 121, 191, 191, 289,
	288, 288, 288, 190, 190, 189, 189, 183, 183, 171,
	171, 171, 171, 287, 170, 285, 552, 552, 551, 551,
	550, 548, 548, 548, 549, 549, 549, 549, 499, 499,
	499, 499, 499, 316, 316, 316, 320, 320, 319, 319,
	319, 319, 319, 324, 7, 7, 7, 7, 7, 7,
	7, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 39, 202, 203, 40, 204, 204,
	205, 205, 206, 206, 207, 208, 209, 209, 209, 209,
	38, 194, 194, 195, 195, 196, 196, 197, 198, 198,
	198, 201, 199, 200, 200, 570, 570, 569, 37, 37,
	30, 152, 152, 153, 153, 153, 155, 155, 251, 251,
	251, 154, 154, 156, 156, 156, 531, 534, 532, 532,
	536, 536, 536, 537, 537, 537, 537, 538, 538, 31,
	140, 145, 541, 541, 541, 540, 540, 542, 542, 543,
	543, 306, 306, 307, 307, 150, 151, 151, 147, 142,
	158, 158, 158, 158, 158, 141, 146, 149, 533, 539,
	539, 539, 385, 385, 382, 383, 383, 380, 379, 379,
	379, 545, 545, 544, 544, 544, 317, 317, 32, 375,
	375, 377, 378, 378, 378, 369, 369, 369, 369, 36,
	373, 373, 374, 374, 374, 374, 374, 374, 374, 370,
	370, 372, 372, 368, 368, 368, 368, 368, 368, 368,
	35, 157, 157, 367, 367, 364, 364, 362, 362, 363,
	363, 361, 361, 361, 365, 365, 43, 78, 44, 45,
	46, 42, 366, 366, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 124, 123, 123, 123, 123, 123, 126,
	126, 305, 305, 304, 304, 125, 252, 252, 41, 230,
	230, 439, 439, 434, 434, 434, 434, 434, 454, 454,
	454, 435, 435, 435, 436, 436, 436, 438, 438, 438,
	437, 437, 437, 437, 437, 453, 453, 455, 455, 455,
	407, 407, 408, 408, 408, 411, 411, 426, 426, 427,
	427, 425, 425, 432, 432, 431, 431, 430, 430, 429,
	429, 428, 428, 428, 428, 422, 422, 421, 421, 409,
	409, 409, 409, 409, 410, 410, 410, 420, 420, 424,
	424, 279, 279, 278, 278, 238, 238, 239, 239, 277,
	277, 236, 236, 237, 237, 237, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 505, 505, 506, 241, 241, 253, 253, 253, 253,
	253, 253, 240, 240, 242, 242, 219, 219, 217, 217,
	217, 217, 210, 210, 211, 211, 212, 212, 212, 216,
	216, 215, 215, 215, 215, 213, 213, 214, 214, 214,
	214, 214, 214, 393, 393, 502, 502, 503, 503, 498,
	498, 498, 501, 501, 501, 501, 501, 501, 501, 504,
	504, 504, 500, 500, 220, 300, 300, 300, 318, 318,
	318, 318, 299, 299, 299, 235, 235, 234, 234, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 392, 392, 333, 333, 334, 334, 262, 261, 261,
	261, 261, 261, 259, 260, 258, 258, 258, 258, 258,
	257, 257, 256, 256, 256, 371, 371, 254, 254, 244,
	244, 244, 243, 243, 243, 433, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 297, 297, 297, 298, 298,
	298, 298, 298, 298, 298, 298, 343, 343, 349, 349,
	514, 514, 513, 221, 221, 221, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 231, 231, 231, 416, 416,
	416, 416, 417, 417, 417, 417, 418, 418, 418, 414,
	414, 415, 415, 354, 355, 355, 460, 460, 461, 461,
	412, 412, 413, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 468, 468, 468, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 525, 525, 525, 510, 510, 510,
	511, 511, 511, 511, 511, 511, 511, 511, 511, 511,
	511, 511, 512, 512, 512, 512, 512, 512, 512, 512,
	512, 512, 512, 512, 512, 512, 512, 512, 512, 295,
	295, 295, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	356, 356, 357, 357, 465, 465, 465, 465, 465, 465,
	466, 466, 467, 467, 467, 467, 458, 458, 458, 458,
	458, 458, 458, 458, 458, 458, 458, 458, 458, 458,
	458, 458, 458, 458, 458, 458, 458, 458, 458, 458,
	458, 458, 458, 458, 458, 341, 292, 292, 292, 358,
	350, 350, 351, 351, 352, 352, 344, 344, 344, 344,
	344, 344, 345, 345, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 346, 346, 348, 348,
	360, 360, 360, 359, 359, 359, 359, 359, 359, 359,
	233, 233, 233, 233, 338, 338, 338, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 223,
	223, 223, 223, 227, 227, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 228,
	228, 228, 228, 228, 226, 226, 226, 226, 226, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 112, 113, 113,
	225, 301, 301, 440, 440, 443, 443, 441, 441, 442,
	444, 444, 444, 445, 445, 445, 446, 446, 446, 449,
	449, 308, 308, 308, 314, 314, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 6, 1, 2, 4,
	0, 1, 1, 0, 1, 5, 2, 2, 6, 9,
	6, 9, 4, 7, 8, 0, 1, 1, 2, 4,
	6, 1, 2, 4, 0, 2, 10, 10, 2, 0,
	2, 1, 3, 3, 3, 0, 2, 1, 3, 5,
	0, 2, 3, 1, 3, 1, 1, 1, 3, 1,
	1, 1, 1, 0, 3, 3, 0, 3, 3, 0,
	1, 3, 0, 1, 3, 0, 2, 1, 2, 3,
	4, 3, 3, 1, 0, 1, 1, 0, 1, 8,
	5, 7, 0, 3, 8, 5, 1, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	4, 1, 3, 1, 2, 2, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 2, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 2, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 1, 1, 2, 2, 1,
	1, 1, 3, 2, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 1, 3, 3, 1, 2, 2, 2, 1,
	2, 2, 3, 4, 4, 6, 1, 1, 1, 2,
	4, 6, 1, 4, 1, 3, 3, 4, 4, 4,
	4, 3, 3, 2, 4, 4, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 2, 2, 0, 1, 4, 2, 4, 1, 5,
	3, 2, 1, 2, 2, 4, 4, 5, 2, 1,
	3, 4, 4, 1, 2, 9, 7, 1, 3, 3,
	1, 1, 3, 1, 3, 2, 1, 2, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 4, 4,
	2, 4, 3, 3, 1, 1, 1, 1, 1, 1,
	2, 3, 4, 7, 2, 3, 3, 4, 5, 3,
	4, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 1, 1,
	1, 1, 6, 4, 1, 1, 0, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 10, 7, 4, 4,
	1, 3, 1, 6, 3, 3, 3, 1, 1, 1,
	3, 2, 4, 5, 5, 6, 5, 5, 3, 2,
	2, 1, 3, 4, 3, 7, 5, 8, 2, 2,
	1, 3, 2, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 2, 1, 3, 2, 1, 2,
	2, 1, 2, 3, 2, 2, 3, 6, 3, 3,
	1, 1, 7, 7, 8, 8, 0, 4, 7, 0,
	3, 0, 2, 0, 1, 1, 1, 1, 4, 2,
	2, 3, 3, 4, 5, 3, 4, 4, 2, 2,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 3, 2,
	5, 5, 0, 2, 7, 0, 1, 0, 1, 5,
	5, 3, 3, 2, 4, 4, 4, 4, 4, 1,
	1, 1, 3, 3, 1, 1, 1, 6, 0, 1,
	1, 1, 1, 5, 5, 0, 1, 1, 3, 3,
	3, 4, 6, 7, 4, 4, 7, 8, 3, 3,
	2, 3, 4, 0, 2, 2, 0, 2, 2, 1,
	1, 1, 1, 0, 1, 4, 4, 5, 4, 3,
	1, 3, 1, 1, 3, 5, 2, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 4, 4, 1, 3, 1,
	4, 6, 6, 4, 4, 4, 4, 4, 3, 6,
	3, 5, 1, 1, 2, 2, 11, 8, 9, 1,
	3, 2, 4, 0, 2, 0, 1, 1, 1, 1,
	0, 1, 0, 1, 4, 2, 1, 5, 4, 4,
	2, 5, 5, 1, 3, 2, 1, 5, 4, 4,
	2, 0, 5, 4, 0, 1, 3, 3, 1, 3,
	1, 3, 1, 3, 4, 0, 1, 0, 1, 1,
	3, 1, 1, 0, 4, 1, 3, 2, 1, 0,
	8, 0, 4, 7, 4, 0, 2, 0, 2, 0,
	2, 0, 4, 1, 3, 1, 1, 6, 4, 5,
	7, 4, 5, 0, 1, 3, 8, 0, 6, 0,
	4, 6, 1, 1, 1, 1, 1, 2, 3, 1,
	3, 6, 0, 3, 0, 1, 2, 4, 4, 0,
	1, 3, 1, 3, 3, 0, 1, 1, 0, 2,
	2, 0, 2, 3, 3, 3, 1, 3, 3, 3,
	3, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 7, 7, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 2, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 3,
	1, 1, 1, 4, 4, 4, 3, 2, 2, 2,
	3, 2, 3, 4, 1, 3, 4, 0, 2, 1,
	1, 2, 2, 0, 1, 2, 4, 1, 3, 1,
	3, 2, 3, 1, 4, 3, 0, 1, 1, 2,
	5, 2, 2, 2, 0, 2, 3, 3, 0, 1,
	3, 1, 3, 0, 1, 2, 1, 1, 0, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 1, 7, 1, 3,
	0, 1, 1, 3, 1, 3, 0, 1, 1, 1,
	14, 1, 3, 0, 1, 1, 3, 1, 1, 2,
	4, 1, 1, 1, 1, 0, 1, 2, 9, 9,
	7, 1, 2, 3, 3, 3, 0, 4, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 4, 1, 1,
	3, 4, 3, 0, 1, 1, 1, 0, 2, 7,
	8, 8, 0, 3, 3, 0, 3, 0, 3, 0,
	5, 1, 3, 0, 3, 3, 0, 2, 9, 6,
	0, 2, 2, 3, 3, 4, 4, 4, 1, 0,
	2, 2, 1, 3, 2, 1, 3, 2, 1, 3,
	2, 0, 1, 3, 4, 3, 1, 1, 4, 1,
	3, 1, 1, 1, 1, 0, 1, 1, 1, 11,
	0, 2, 3, 3, 2, 2, 3, 1, 1, 1,
	3, 3, 4, 0, 2, 2, 2, 2, 2, 2,
	6, 0, 4, 1, 1, 0, 3, 0, 1, 1,
	2, 4, 4, 4, 0, 1, 8, 2, 4, 4,
	4, 9, 0, 2, 11, 9, 11, 8, 6, 9,
	7, 10, 7, 2, 2, 9, 4, 5, 3, 0,
	4, 1, 3, 0, 3, 6, 0, 2, 10, 0,
	2, 0, 2, 0, 3, 2, 4, 3, 0, 2,
	1, 0, 2, 3, 0, 2, 3, 0, 2, 1,
	0, 3, 2, 4, 3, 0, 1, 0, 1, 1,
	0, 6, 0, 3, 5, 0, 4, 0, 3, 1,
	3, 4, 5, 0, 3, 1, 3, 2, 3, 1,
	2, 0, 4, 6, 5, 0, 2, 0, 2, 4,
	5, 4, 5, 1, 5, 6, 5, 0, 3, 0,
	1, 1, 3, 3, 3, 0, 4, 1, 3, 3,
	3, 0, 1, 1, 3, 2, 3, 3, 3, 4,
	4, 3, 3, 3, 3, 4, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 5,
	4, 1, 3, 3, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	4, 6, 0, 1, 1, 3, 1, 1, 1, 1,
	1, 7, 9, 7, 9, 2, 1, 7, 9, 7,
	9, 8, 5, 0, 1, 0, 1, 1, 1, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 3, 1, 3, 5, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 2, 1,
	2, 2, 1, 1, 2, 2, 2, 3, 3, 2,
	2, 1, 5, 6, 4, 1, 1, 1, 5, 4,
	1, 1, 2, 0, 1, 1, 2, 5, 0, 1,
	1, 2, 2, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 2, 2, 2, 0, 3, 0, 3, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 3, 5, 2, 2, 2, 2, 4, 1,
	1, 2, 5, 6, 8, 6, 6, 6, 1, 1,
	1, 1, 1, 1, 3, 4, 4, 4, 7, 9,
	7, 7, 7, 9, 7, 7, 0, 2, 0, 1,
	1, 2, 4, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 2, 2, 2, 0, 1, 1, 1, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	5, 0, 1, 3, 0, 1, 0, 2, 0, 2,
	0, 1, 6, 8, 8, 6, 6, 5, 5, 5,
	6, 6, 6, 6, 5, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 1, 1, 1, 4, 4,
	6, 8, 6, 4, 5, 4, 4, 4, 3, 4,
	6, 6, 7, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 8, 4, 2, 3, 2, 4, 2, 2, 4,
	6, 2, 2, 4, 6, 4, 2, 4, 4, 4,
	0, 1, 2, 3, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 3,
	0, 1, 1, 3, 1, 3, 3, 3, 3, 3,
	2, 1, 1, 1, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 1, 3, 4, 4, 5, 4,
	5, 3, 4, 5, 6, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 2, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 4, 4, 1, 2, 3, 5,
	1, 1, 3, 0, 1, 0, 3, 0, 3, 3,
	0, 3, 5, 0, 3, 5, 0, 1, 1, 0,
	1, 1, 2, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -568, -571, -2, -5, 620, -1, -4, -113, -87,
	-7, -14, -115, -116, -8, -111, -9, -10, -12, -91,
	-106, -108, -110, -109, -47, -11, -105, -82, -83, -93,
	-99, -102, -103, -104, -117, -112, -114, -159, -118, -119,
	610, -88, -89, -90, -33, -32, -31, -30, -140, -145,
	-148, 544, 616, 447, 14, 496, -15, -16, -515, -17,
	259, -321, -322, -323, -325, -572, -48, -49, -50, -60,
	-61, -62, -63, -64, -74, -75, -76, -51, -52, -53,
	-56, -54, -67, -66, -68, -69, -70, -71, -72, -73,
	-55, -59, -143, -144, -77, -57, -78, -58, -80, -79,
	-85, -81, -86, -142, -147, -13, 234, -84, 76, -94,
	-95, -96, -97, -98, -100, -101, 371, 377, 434, 609,
	61, -160, -162, 626, 627, 159, 160, 162, 163, -34,
	-35, -36, -37, -38, -39, -41, -40, -42, -43, -44,
	-45, -46, 230, 16, 539, -18, -21, -19, -22, -20,
	-28, -29, -27, -24, -26, -141, -25, -146, -23, -149,
	254, 253, 38, 320, 321, 322, 375, 252, 231, 15,
	31, 42, 351, -161, 82, 531, 532, 534, 232, -163,
	13, 631, -6, -3, -2, -127, -131, -135, -138, -139,
	-136, -137, -4, -113, 117, 244, 611, -318, 367, 612,
	614, 613, 85, 93, -311, -313, 447, 259, 371, 377,
	609, 627, 546, 547, 548, 549, 550, 551, 552, 553,
	555, 556, 557, 558, 559, 560, 561, 571, 572, 562,
	563, 564, 565, 566, 567, 568, 569, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 499, 596, 597, 598, 599, 527, 554, 590, 591,
	592, 593, 349, 350, 536, 271, 295, 402, 301, 308,
	159, 178, 172, 200, 192, 532, 167, 275, 313, 276,
	92, 162, 482, 107, 459, 431, 165, 290, 292, 294,
	528, 529, 361, 297, 526, 296, 298, 300, 530, 277,
	352, 188, 183, 289, 273, 181, 278, 40, 279, 205,
	280, 281, 541, 455, 348, 461, 305, 52, 429, 182,
	456, 293, 458, 209, 213, 473, 474, 176, 177, 463,
	476, 204, 207, 208, 251, 345, 346, 43, 538, 263,
	477, 211, 203, 199, 485, 309, 307, 202, 175, 198,
	274, 65, 215, 214, 216, 425, 426, 427, 428, 282,
	283, 365, 472, 195, 184, 353, 168, 23, 480, 258,
	460, 378, 284, 302, 310, 210, 212, 265, 270, 540,
	531, 433, 269, 306, 478, 180, 262, 291, 257, 481,
	169, 534, 380, 285, 163, 299, 475, 484, 64, 393,
	174, 166, 248, 160, 267, 272, 286, 287, 288, 525,
	312, 311, 303, 533, 196, 264, 201, 186, 173, 197,
	161, 266, 483, 394, 607, 351, 412, 194, 191, 268,
	241, 479, 462, 164, 416, 395, 189, 314, 603, 604,
	605, 366, 344, 315, 316, 187, 255, 453, 454, 319,
	422, 335, 396, 432, 403, 397, 222, 223, 323, 465,
	467, 206, 606, 324, 325, 326, 457, 327, 328, 329,
	330, 370, 56, 58, 94, 97, 96, 628, 629, 63,
	29, 356, 359, 391, 398, 337, 608, 537, 334, 338,
	339, 360, 25, 414, 382, 418, 417, 48, 49, 50,
	53, 54, 55, 57, 59, 60, 51, 524, 375, 388,
	486, 45, 47, 385, 27, 362, 413, 435, 333, 415,
	446, 46, 444, 445, 466, 26, 364, 363, 62, 44,
	421, 423, 424, 317, 331, 373, 617, 487, 368, 384,
	387, 369, 336, 358, 389, 67, 66, 381, 618, 376,
	374, 332, 542, 543, 340, 570, 354, 430, 521, 520,
	519, 518, 517, 516, 515, 514, 320, 321, 322, 399,
	400, 401, 411, 404, 405, 406, 407, 408, 409, 410,
	449, 450, 619, 468, 470, 471, 469, 236, 630, 355,
	239, 621, 622, 95, 623, 625, 624, 28, -398, -396,
	-318, 532, 609, 377, 531, 534, 371, 351, 627, 375,
	259, 320, 321, 322, 447, 349, -204, -318, 630, -169,
	243, 39, -217, -318, -169, -84, -16, -15, -161, -162,
	-217, 238, -326, 24, 429, -92, 430, 234, 82, 77,
	-318, -9, -104, -8, -111, -82, -159, 434, -324, -318,
	320, 320, -324, 238, -318, 269, 410, -451, 244, -402,
	-375, 270, -401, -377, -404, -378, 32, 230, 232, 231,
	544, 266, 16, 375, 240, 14, 13, 376, 252, 25,
	26, 28, 15, 377, 379, 29, 380, 383, 384, 385,
	42, 388, 389, 259, 85, 93, 88, 277, -203, -318,
	-352, -344, 114, -347, -339, -340, -342, -494, -488, -337,
	82, 141, 142, 149, 115, 632, -341, -433, 36, 117,
	550, 554, 590, 497, -293, -294, -295, -296, -297, -298,
	-318, -489, -487, 88, 98, 100, 104, 105, 103, 101,
	153, 185, 102, 89, 154, -162, 85, -510, 560, -312,
	583, 596, 597, 598, 599, 582, 61, -458, -467, 237,
	-465, 152, 190, 255, 186, 14, 147, 422, 187, 591,
	592, 593, 557, 579, 499, 561, 571, 586, 552, 553,
	555, 547, 548, 549, 551, 562, 564, 578, -468, 574,
	584, 585, 570, 594, 595, 587, 588, 589, 625, 87,
	86, 577, 576, 563, 558, 559, 565, 546, 556, 566,
	567, 575, 580, 581, 359, 107, 360, 361, 489, 352,
	362, 244, 429, 70, 363, 364, 365, 366, 367, 496,
	368, 71, 369, 358, 259, 412, 370, 189, 206, 501,
	500, 502, 493, 490, 488, 491, 492, 494, 495, 568,
	569, 573, -120, -121, 601, -562, -286, -563, 6, 7,
	8, 9, -564, 154, -553, 431, 540, 88, 164, 161,
	-389, 164, 113, 169, 168, -389, 166, 323, 265, -366,
	-152, 349, 412, 327, 94, 269, -369, -367, 528, -453,
	317, 313, 289, 239, 110, -153, 249, 248, 108, 489,
	237, 386, 308, 56, 58, -526, -527, 227, 228, 229,
	-517, 522, -516, -318, 361, 96, 97, 27, 238, 372,
	265, 467, 465, 466, 468, 469, 470, 471, -65, -469,
	-450, 462, 461, -330, 454, 460, 452, 464, 455, 350,
	329, 544, 328, 230, 621, 529, 523, -308, 396, 432,
	486, 487, 373, 433, 473, 475, 456, 107, 193, 190,
	239, 241, 238, 349, 489, 412, 94, 327, -526, 161,
	473, 475, 269, 410, 41, -395, 422, -394, -396, 474,
	485, 86, 87, 472, -308, 107, 453, 453, -562, -286,
	-160, -162, -114, -515, 530, 530, 530, 239, 349, 412,
	269, 240, 238, 525, 528, 241, 489, 237, 320, 372,
	265, 327, 94, 166, -452, -523, 32, -459, 224, 225,
	226, 33, 34, -1, 121, 631, -344, -344, -6, 634,
	-6, -344, -318, -318, 156, -223, -227, -224, -226, -225,
	-229, -228, 190, 191, 152, 194, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 207, 208, 205, 31, 206,
	255, 186, 187, 188, 189, 209, 172, 192, 537, 217,
	173, 218, 174, 219, 175, 220, 176, 177, 221, 178,
	181, 182, 183, 184, 180, 155, -193, 88, 32, 82,
	155, 88, -185, 261, -169, -217, 155, 632, -185, -562,
	-178, -179, 11, -217, -299, -318, 431, 124, -92, 77,
	-92, 430, 77, -518, -519, -520, -522, 234, 430, 429,
	-109, 155, 277, 17, -324, -324, 80, -217, -377, 269,
	-402, -375, 36, 79, 156, 242, 156, 79, 82, 373,
	349, 412, 374, 489, 238, 386, 241, 269, 387, 349,
	412, 238, 241, 489, 269, 349, 238, 241, 412, 269,
	387, 349, 452, 453, 241, 27, 378, 381, 382, 453,
	-473, 485, 156, 113, 110, 111, 112, -344, 131, -359,
	124, 125, 126, 127, 128, 129, 130, 138, 137, 148,
	141, 142, 143, 144, 145, 146, 147, 139, 140, 134,
	114, 132, 136, 133, 116, 151, -162, -344, -352, 61,
	-342, -342, -342, -342, -318, -433, -349, -344, 82, 82,
	82, 82, 155, 101, 88, -344, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, -466, 82,
	82, -356, -357, 82, 82, -337, -299, 82, 88, 88,
	82, 82, 82, 88, 82, 82, 82, -357, -357, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, -179, 156, -178, 82, -178, -179,
	-163, -162, 32, 33, 32, 33, 32, 33, 32, 33,
	-565, 618, 82, 98, 628, 222, 478, 539, 167, 168,
	169, -364, 244, -202, -318, -204, 372, 241, 525, 241,
	-153, -364, -364, -364, -364, -364, 240, -364, 24, 238,
	238, 238, 238, -364, 496, 124, 124, 59, -528, 171,
	156, -517, -184, 82, -329, 132, 136, -329, -282, 18,
	24, 267, 267, 267, -329, 307, -573, -574, 17, 134,
	-327, -574, -327, -327, -329, -575, 240, 463, 43, 268,
	267, -180, -181, 22, -180, 457, 453, -419, 458, 459,
	-331, -574, -330, -329, -329, -330, -329, -329, -329, 32,
	238, 241, 489, 327, 622, -573, -573, 31, 31, -451,
	-451, -217, -451, 523, -309, -318, -451, -451, -451, -529,
	243, -559, -558, 476, -561, 478, 161, -396, 161, -396,
	-377, 269, 269, 156, 124, 24, -397, 124, 135, -396,
	-396, -397, -397, -240, 41, -317, 152, -318, 88, -240,
	41, -556, -555, -217, -179, -163, -162, 83, 83, 83,
	533, 533, 533, -451, -451, -451, -451, -451, -453, -451,
	-451, -451, -451, -451, -324, -194, -318, -204, 244, -451,
	-451, -451, -164, -165, 143, -344, -318, -164, -3, -129,
	-128, 118, 119, 121, 612, 367, 611, 615, 609, -396,
	41, -446, 394, 393, -440, -442, 82, -441, 82, -441,
	-441, -441, -441, -441, 82, 82, -443, 82, -443, -443,
	-440, -444, 82, -444, -445, 82, -445, -444, -318, -423,
	539, -350, -352, -318, 39, -462, 61, -159, 82, 31,
	82, -185, -318, -344, -463, 61, -159, 82, 31, -179,
	-122, 39, -181, 21, 155, 98, 88, -109, -92, 77,
	-109, 83, 156, -521, 104, 105, -524, 204, 196, -318,
	-107, 88, -7, -8, -9, -10, -47, -82, -159, -490,
	-488, 82, 32, 421, 79, 17, -403, 238, 489, 372,
	265, 241, 349, -401, -384, -381, -379, -317, -377, -380,
	-379, -406, -299, 453, -123, 436, 435, 319, -344, -344,
	-344, -344, -344, 103, 114, 344, 104, 105, -339, -360,
	32, 315, 316, -340, -340, -340, -340, -340, -340, -340,
	-340, -340, -340, -340, -340, -348, -358, -433, 82, 134,
	132, 136, 133, 116, -342, -342, -340, -340, -242, -317,
	152, 83, 156, -344, -514, -513, 118, -344, -344, -344,
	-344, -318, -511, -512, 503, 504, 505, 506, 507, 508,
	509, 510, 511, 512, 513, 363, 358, 364, 362, 352,
	370, 365, 366, 189, 520, 521, 514, 515, 516, 517,
	518, 519, -350, -350, -344, -511, -350, -292, 33, 32,
	-352, -352, -352, 83, -344, -525, 342, 341, 343, -182,
	-318, -350, 83, 83, 83, 98, -352, -352, -350, -340,
	-350, -350, -350, -350, -512, -292, -292, -292, -292, 143,
	-352, -352, -292, -292, -292, -292, 143, -292, -292, -292,
	-292, -292, -292, -292, -292, -292, -292, 83, 83, 83,
	143, -352, -180, -121, -471, -470, -344, 41, -122, -181,
	-566, 619, 82, -299, -554, 88, 88, 632, 479, 480,
	165, 168, 167, -318, 114, 35, 82, -194, -364, -364,
	-364, -531, -318, -385, -382, -379, -318, -318, -375, -318,
	-318, -217, -364, -364, -364, -364, -217, -251, 53, 54,
	55, -379, -154, 56, 57, -529, -516, 35, -183, -318,
	-282, -342, -342, -344, -379, 269, -573, -329, -329, -310,
	-309, -331, -326, -331, -331, -282, -327, -329, -329, -344,
	-331, -327, -282, -318, 453, -282, -282, -419, -329, -328,
	-318, -328, -364, -309, -310, -310, -217, -217, -263, -268,
	-264, -269, 261, 235, 356, 357, 233, 231, 11, 232,
	-276, 308, -365, 497, -246, -247, 77, 42, -249, 259,
	398, 391, 271, 275, 92, 276, 431, 277, 240, 279,
	280, 281, 296, 298, 251, 282, 283, 284, 422, 285,
	160, 297, 286, 287, 288, 374, -241, 6, 330, 41,
	51, 52, 445, 444, 542, 539, 272, -531, -531, 31,
	31, -385, -318, -318, -172, -167, -171, -168, -173, -285,
	-287, -170, 82, -217, -162, -318, 156, 477, 479, 480,
	-559, -397, -559, -397, 32, 421, -400, 421, 32, -375,
	-394, 473, 475, -390, 88, 422, -380, -399, 79, 152,
	-470, -397, -397, -399, -399, 151, 156, -557, 478, 479,
	227, -180, 98, 98, 98, -219, -217, -531, -384, -375,
	-318, -451, -219, -219, -219, -318, -318, 82, 155, 36,
	-318, -318, -318, -281, 156, -280, 17, -319, -318, 35,
	88, 155, -281, -130, -128, 120, -344, -6, 611, -344,
	-6, -6, -344, -6, -344, -449, 395, 98, 98, -301,
	88, -301, 98, 98, 98, 545, 83, 88, -388, 79,
	-464, -353, -509, 601, -187, 83, -182, -507, -508, -182,
	-186, -318, -462, 632, 633, -464, -187, 83, -507, -180,
	602, -122, -177, -176, -344, -318, 24, -109, -92, -519,
	155, 156, -183, -403, -383, -380, -405, 143, -318, -391,
	156, 539, 635, 86, 242, -545, -544, 413, 83, 156,
	-474, 243, 496, 88, 632, 429, 222, 223, 103, 344,
	104, 105, -433, -352, -348, -342, -342, -340, -340, -346,
	256, -346, 113, -344, 633, -343, -513, 120, -344, 35,
	156, 35, 156, 80, 155, 83, 83, 17, 17, 83,
	-344, 83, 83, 83, 83, 17, 17, -344, 83, 155,
	83, 83, 83, 83, 80, 83, 156, 83, 83, 83,
	83, 156, -352, -352, -344, -352, 83, 83, 83, -344,
	-344, -344, -352, 83, -344, -344, -344, -344, -344, -344,
	-344, -344, -344, -344, -413, 448, -413, -413, 156, 156,
	156, 83, -122, 82, 98, 156, 629, -305, -304, 88,
	166, 169, 169, 168, 24, 36, -203, -205, -206, -207,
	-208, -209, 134, 157, 158, 82, -217, -217, -217, -534,
	399, -546, 156, 41, -544, 489, -150, 319, -368, 80,
	-157, 17, 539, -217, -217, -217, -217, -230, 35, 17,
	-166, -218, -318, 82, 83, 156, -376, 80, -318, -310,
	-282, -282, -331, -282, -282, 156, 23, -329, -331, -331,
	-327, 155, -309, -439, 35, -184, 156, 21, 261, -216,
	-315, -213, -215, 246, -334, -214, 249, -503, 247, 245,
	108, 250, 304, 109, 240, -315, -315, 246, -250, 242,
	35, -315, -266, 240, 347, 304, 247, 21, 261, -265,
	240, 109, -318, 246, 250, 247, 245, -314, 124, -308,
	151, 242, 43, 374, -314, 543, 261, -314, -314, -314,
	-314, -314, -314, -314, 278, 278, -314, -314, -314, -314,
	-314, -314, -314, -314, -314, -314, -314, 161, -314, -314,
	-314, -314, -314, -314, 82, 273, 274, -535, 399, 31,
	355, 355, -546, 31, -158, 349, 31, -288, -289, -290,
	-291, 68, 72, 74, 69, 70, 71, 75, 31, 156,
	-316, -320, 35, -318, 88, -316, -162, -167, -172, -316,
	82, -558, -560, 481, 478, 484, -399, -399, 242, 82,
	124, -399, -399, 41, -317, -555, 485, 479, -122, 156,
	79, -219, -195, -196, -197, -198, -223, -299, 191, 194,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 207,
	208, 205, 206, 255, 186, 187, 188, 189, 209, 172,
	192, 537, 173, 174, 175, 176, 177, 178, 181, 182,
	183, 184, 180, -318, -204, -282, -165, -167, -318, 88,
	-318, 143, -282, 121, -6, 119, -134, -133, -132, 122,
	609, 615, 121, 121, 121, 83, 83, 83, 156, 83,
	83, 83, 156, 83, 156, 98, -477, 458, 40, 156,
	82, 83, 156, 61, 156, 124, 83, 156, -344, 83,
	61, -122, 88, 156, -174, 37, 38, 155, 431, -318,
	-488, 83, -405, 156, 242, 155, 155, -381, 377, -317,
	-383, 21, 539, -299, 39, -305, 124, 632, -318, 83,
	-346, -346, 113, -342, -339, 83, 121, -344, 119, -221,
	-223, 393, 394, -344, -221, -222, -228, 152, 190, 255,
	189, 188, 186, 393, 394, -240, -318, -344, -344, 83,
	-344, -344, 17, -318, -240, -340, -344, -179, -179, 83,
	83, -412, -413, -412, -412, 83, 83, 83, 83, -412,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	82, 98, 100, 98, 100, -470, -567, 63, 617, 62,
	421, 103, 309, 156, 98, 88, 633, 156, 124, 169,
	-547, 313, 349, 385, 83, 156, -299, -195, -184, 82,
	-184, -537, 460, 401, 411, -314, -336, -335, 351, 42,
	-456, 422, 407, 408, -382, 269, -318, -543, 95, 124,
	79, 334, 338, 339, 335, 336, 337, -362, -363, -361,
	-365, -531, 82, 82, -159, 35, 132, 82, 82, 35,
	-434, 324, -223, -217, -166, -318, 17, 156, -530, 155,
	-1, -318, -375, -329, -282, -344, -344, -282, -329, -329,
	-331, -318, -434, -223, 35, -264, 235, 232, -409, 306,
	307, -410, -424, 309, -426, 82, -220, -299, -214, -502,
	-503, -364, -318, 109, -502, 109, 82, -220, -299, -299,
	-267, -328, -299, -318, -318, -318, -318, -272, -271, -299,
	-274, 32, -275, -318, -318, -318, -318, 109, -318, 109,
	-245, 41, 48, 49, 50, -314, -314, 193, -248, 41,
	421, 423, 424, -274, 98, 98, 98, 98, 88, 88,
	88, -314, -314, 98, 88, -320, 88, -504, 168, 45,
	46, 98, 98, 98, 98, 41, 88, -253, 41, 289,
	293, 290, 291, 292, 88, 98, 41, 98, 41, 98,
	41, -318, 82, -505, -506, 88, -537, -314, 355, -396,
	124, -336, -542, 319, -151, 92, 32, -188, 235, 232,
	-531, -387, -386, -299, -171, -171, -171, -171, 68, 68,
	68, 73, 68, 73, 68, -290, -387, -173, -184, -320,
	83, -552, -551, -550, -548, 76, 243, 77, -350, 478,
	482, 483, -383, -332, 88, -390, -192, 24, -217, -217,
	-455, 299, 300, 83, 156, -223, -284, 19, 155, -284,
	117, -6, -130, -132, -344, -6, -344, 611, 367, 612,
	88, 98, 98, -485, 442, 437, 439, 109, -353, -472,
	-471, 61, -159, -182, -464, -508, -470, -318, 633, 61,
	-159, -464, -192, -477, -176, -175, 44, -318, 98, 17,
	-380, -375, 143, 143, -318, 378, -391, 88, 400, 88,
	238, 633, 88, -305, -339, -344, 83, -231, 177, 176,
	-231, 35, 83, 83, -441, -441, -440, -443, -440, -231,
	-231, 83, 83, 24, 83, 83, 83, -344, 83, 83,
	156, -460, 498, -461, 572, -412, -412, -412, -412, -412,
	-412, -412, -412, -412, -412, -412, -412, -412, -412, -412,
	-412, -355, -354, 261, 443, 624, 624, 443, 624, 624,
	83, 156, -511, 156, -304, 88, -318, 88, 88, -207,
	-223, 83, 35, -210, -211, -212, -220, -213, -215, 35,
	-538, 92, -532, 88, -318, -539, 92, 402, 154, 353,
	41, 403, 404, 419, 348, 98, 98, 409, -533, -318,
	-158, -541, 52, 124, 88, -217, -361, -308, 151, 280,
	327, -279, -278, -318, 88, -210, -159, -217, -210, -210,
	-159, -435, 326, 21, 98, 142, -185, 80, 155, -167,
	-218, -318, 143, 83, -282, -282, -282, -329, -435, -159,
	-421, 310, 82, -419, 82, -419, 109, 335, -427, -425,
	261, -270, 45, 47, -223, -500, -318, -498, -500, -318,
	-498, -498, -364, -344, -270, -220, 242, 31, 232, -273,
	332, 333, 338, -392, 305, 114, -392, 156, -174, 156,
	-318, -240, -240, 31, 88, 88, -219, 83, 156, 124,
	-538, -532, 124, -397, 88, -539, -543, 124, 88, 156,
	-188, -188, -282, 156, 124, -190, -189, 79, 80, -191,
	79, -189, 68, 68, -282, -550, -549, 24, -503, -503,
	-503, 83, 83, 15, -197, 41, -283, 20, 21, 143,
	-283, 121, 119, 121, 121, -318, 83, 83, -447, 603,
	-481, -483, 437, 21, 21, 15, 243, 83, -464, -464,
	-485, 45, 46, -375, -391, 422, -217, 156, 633, -221,
	-344, 83, -344, 83, 88, 83, 88, -179, 21, 83,
	156, 83, 83, 83, 156, 83, 83, -344, 83, -511,
	236, -159, 83, 156, -159, 88, -536, 413, 88, 88,
	98, 41, 98, 154, 405, -457, -151, -540, 92, 124,
	632, 82, -314, -314, -314, -318, 83, 156, -314, -314,
	83, 83, 83, -238, 539, -436, 260, 98, 142, 98,
	142, 98, -316, -167, -318, -282, -530, 155, -282, -436,
	-411, 311, 98, -340, 82, -340, 82, -420, 308, 82,
	83, 156, -318, -299, -235, -234, -232, 103, 114, 41,
	391, -233, 92, 151, 294, 297, 296, 272, 295, -262,
	-333, 79, 397, 332, 333, -365, 603, 527, 245, 108,
	109, 379, -334, 82, 82, 80, 314, 82, 82, -500,
	83, -270, -299, 41, -273, 41, 345, 305, -271, -318,
	151, -240, 83, -506, 88, -536, 88, -399, -541, 88,
	-531, -179, -386, -470, -344, 82, -344, 82, 68, 11,
	19, -337, -344, -352, 244, -6, 612, 367, -255, 604,
	88, 21, 88, -479, 88, -387, -447, -125, -252, -308,
	277, 83, 83, 83, -412, -412, -415, -414, -418, 443,
	306, 451, -352, 88, 88, 83, 83, -199, -223, -155,
	539, -238, -212, -155, 21, 539, 352, 41, 98, 41,
	406, 124, 104, 105, -306, -307, 88, -370, -372, -299,
	82, -240, -242, 88, -278, -337, -337, -236, -159, 35,
	-237, -276, -365, -124, -123, -236, 82, -437, 160, 98,
	142, 98, 98, -282, -282, -437, -426, 21, 83, -406,
	83, -406, 82, 124, -340, -425, -428, 61, -232, 103,
	-340, 88, -242, -243, 41, 293, 289, 124, 124, -244,
	41, 273, 274, -254, 82, 304, 15, 193, 82, 109,
	109, -217, -370, -370, -501, 334, 335, 336, 340, 338,
	339, 337, -501, -370, -370, 82, -393, -392, -340, -314,
	-314, 151, -540, -180, -183, -499, -318, 245, 21, 21,
	-318, -318, -302, 605, 98, 88, 439, -255, -448, 606,
	-475, -419, -240, 124, 83, -417, 116, 405, 409, -338,
	-341, 98, 100, 185, 154, 83, 83, 538, -156, 60,
	485, 88, 400, 88, 352, 88, 633, 156, 124, 83,
	156, -440, -344, -407, 261, -159, 156, -276, -308, -125,
	-407, -239, -277, -318, 88, -454, 168, 325, 539, 98,
	142, 98, -179, -438, 168, 325, -410, 83, 83, 83,
	-406, 98, 83, -432, -429, 82, -276, 263, 134, 88,
	88, 98, 82, -465, 31, 88, -371, 82, 83, 83,
	83, 83, -370, 98, -240, -314, 83, 83, 156, 82,
	21, -302, 88, -484, 442, -478, -476, 437, 438, 439,
	440, 88, -416, -417, 409, -338, -341, 601, 449, 449,
	449, -201, -318, 304, 422, -307, 88, -373, -372, -174,
	83, -408, 313, 21, -276, -314, -408, 83, 156, -314,
	-314, 325, 98, 142, 98, -180, 325, -422, 312, 83,
	-432, -276, -431, -430, 311, 264, 82, 83, -344, -356,
	-314, 83, -257, -256, 535, -370, -373, 80, -373, 80,
	-373, 80, -373, 80, 83, -240, -318, 245, -303, -318,
	-479, -486, 243, -482, -483, 441, -476, 21, 439, 21,
	21, -126, 156, 113, 450, 450, 450, -200, 35, 444,
	378, -374, 251, 345, 346, 92, 539, 332, 333, -174,
	21, -409, -240, -277, -337, -337, 98, 98, 83, 156,
	-318, 260, 82, -351, -345, -344, 260, 83, -318, -261,
	-259, -260, 79, 456, 302, 303, 83, -501, -501, -501,
	-501, -262, 83, 156, -493, 82, 98, -481, -480, -482,
	21, -479, 21, -479, -479, 446, -416, 88, -314, -314,
	88, 88, 331, -299, 82, -421, -430, -429, -351, 83,
	156, -392, -260, 79, -259, 79, 16, 15, -373, -373,
	-373, -373, -318, -497, 31, 83, -492, -491, -300, -487,
	-318, 442, 443, 88, -479, 124, -570, -569, 623, 98,
	98, -318, -406, -411, 83, -345, -258, 299, 300, 31,
	168, -258, -496, -495, -494, 83, 156, 155, 88, 88,
	83, -426, 103, 41, 301, 156, 124, -491, -318, -495,
	41, -344, 155, -318,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	0, 268, 269, 270, 874, 875, 876, 877, 878, 879,
	880, 0, 0, 0, 0, 0, 632, 633, 0, 598,
	0, 0, 0, 0, 0, 0, 484, 485, 486, 487,
	488, 489, 490, 491, 492, 493, 494, 495, 496, 497,
	498, 499, 500, 501, 502, 503, 504, 505, 506, 507,
	508, 509, 510, 511, 512, 513, 514, 515, 368, 369,
	370, 371, 372, 373, 374, 375, 0, 293, 289, 214,
	215, 216, 217, 218, 300, 301, 461, 0, 0, 0,
	0, 715, -2, 60, 0, 282, 0, 273, 273, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, -2, 645, 0, 599, 600, 601, 602, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	352, 353, 354, 348, 349, 351, 350, -2, 0, 645,
	0, 0, 0, 723, 0, 0, 0, 0, 0, 766,
	788, 23, 0, 7, 9, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 0, 0, 19, 0, 19, 0,
	0, 0, 1278, 1279, 1280, 1281, 2059, 2029, -2, 1802,
	1779, 1954, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095,
	2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105,
	2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115,
	2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125,
	2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135,
	2136, 2137, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753,
	1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1780, 1781, 1782, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1803, 1804, 1805,
	1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815,
	1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825,
	1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835,
	1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845,
	1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855,
	1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865,
	1866, 1867, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876,
	1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886,
	1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896,
	1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
	1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916,
	1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926,
	1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936,
	1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946,
	1947, 1948, 1949, 1950, 1951, 1952, 1953, 1955, 1956, 1957,
	1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967,
	1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977,
	1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, -2, 1987,
	1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
	1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
	2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
	2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027,
	2028, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038,
	2039, 2040, 2041, 2042, 2043, 2044, -2, -2, -2, 2048,
	2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058,
	2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069,
	2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 0, 266,
	264, 1749, 1779, 1802, 1856, 1867, 1868, 1902, 1954, 1986,
	2029, 2045, 2046, 2047, 2059, 0, 0, 898, 0, 693,
	0, 0, 698, 1228, 693, 294, 634, 635, 723, 749,
	596, 0, 330, 0, 1793, 334, 2036, 0, 0, 0,
	593, 324, 325, 326, 327, 328, 329, 0, 0, 873,
	0, 0, 320, 0, 288, 1858, 2058, 0, 0, 0,
	0, 0, 157, 1009, 159, 1011, 163, 171, 0, 0,
	0, 176, 177, 180, 181, 182, 183, 184, 0, 188,
	0, 190, 193, 0, 195, 196, 0, 199, 200, 201,
	0, 211, 212, 213, 1012, 1013, 1014, -2, 88, 896,
	1707, 1594, 0, 1601, 1614, 1625, 1358, 1359, 1360, 1361,
	0, 0, 0, 0, 0, 0, 1369, 1370, 0, 1398,
	2092, 2133, 2134, 0, 1378, 1379, 1380, 1381, 1382, 1383,
	97, 109, 110, 1647, 1648, 1649, 1650, 1651, 1652, 1653,
	0, 1655, 1656, 1657, 1565, 1345, 1278, 0, 2101, 0,
	2123, 2128, 2129, 2130, 2131, 2122, 0, 0, 1550, 0,
	1540, 0, 0, -2, -2, 0, 0, 1927, -2, 2135,
	2136, 2137, 2098, 2119, 2127, 2102, 2103, 2126, 2094, 2095,
	2096, 2089, 2090, 2091, 2093, 2105, 2107, 2118, 0, 2114,
	2124, 2125, 2034, 0, 0, 0, 0, 0, 2075, 111,
	112, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1561, -2,
	-2, 1564, -2, 1567, -2, -2, -2, -2, 1572, 1573,
	-2, 1575, -2, -2, -2, -2, -2, -2, -2, 1552,
	1553, 1554, 1555, 1544, 1545, 1546, 1547, 1548, 1549, -2,
	-2, -2, 749, 824, 0, 749, 0, 724, 771, 774,
	777, 780, 727, 0, 0, 61, 62, 0, 283, 284,
	272, 274, 0, 278, 0, 271, 1045, 0, 0, 0,
	0, 1045, 1045, 1045, 1045, 1045, 0, 1045, 0, 0,
	0, 0, 0, 1045, 0, 931, 1016, 1017, 1018, 1043,
	1044, 1116, 0, 0, 0, 650, 646, 647, 648, 649,
	737, 0, 739, 742, 573, 573, 797, 519, 0, 0,
	0, 573, 0, 533, 525, 0, 0, 0, 573, 0,
	0, 744, 744, 0, 576, 583, 573, 573, -2, 573,
	573, 570, 573, 0, 0, 1057, 539, 540, 541, 525,
	525, 544, 545, 546, 556, 557, 584, 1731, 0, 0,
	461, 461, 0, 461, 0, 461, 461, 461, 652, 1897,
	1800, 1873, 1858, 2058, 0, 239, 1927, 244, 0, 1801,
	1820, 0, 0, 1838, 0, -2, 0, 310, 749, 0,
	0, 723, 0, 0, 0, 0, 0, 461, 461, 461,
	461, 461, 1115, 461, 461, 461, 461, 461, 0, 0,
	0, 461, 461, 461, 0, 0, 789, 790, 785, 786,
	787, 791, 792, 5, 6, 19, 0, 0, 0, 0,
	0, 0, 67, 66, 0, 1708, 1726, 1660, 1661, 1662,
	1713, 1664, 1717, 1717, 1717, 1717, 1693, 1694, 1695, 1696,
	1697, 1698, 1699, 1700, 1701, 1717, 1717, 0, 0, 1706,
	1684, 1715, 1715, 1715, 1713, 1710, 1665, 1666, 1667, 1668,
	1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
	1720, 1720, 1723, 1723, 1720, 0, 366, 364, 365, 1590,
	0, 0, 0, 0, 693, 697, 0, 0, 0, 749,
	-2, 0, 0, 597, 331, 1282, 0, 0, 335, 0,
	336, 0, 0, 0, 355, 0, 358, 343, 344, 345,
	339, 0, 137, 0, 322, 323, 0, 0, 290, 0,
	0, 0, 462, 0, 0, 0, 0, 0, 0, 168,
	164, 172, 175, 185, 192, 0, 204, 206, 209, 165,
	173, 178, 179, 186, 207, 166, 169, 170, 174, 208,
	210, 167, 187, 191, 205, 189, 194, 197, 198, 203,
	0, 138, 0, 0, 0, 0, 0, 1600, 0, 0,
	1633, 1634, 1635, 1636, 1637, 1638, 1639, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 1594, 0, 0,
	1364, 1365, 1366, 1367, 0, 1371, 0, 1399, 0, 0,
	0, 0, 0, 1654, 1658, 0, 1590, 1590, 0, 1590,
	1586, 0, 0, 0, 0, 0, 0, 1590, 1523, 0,
	0, 1525, 1541, 0, 0, 1527, 1528, 0, 1531, 1532,
	1590, 0, 1590, 1536, 1590, 1590, 1590, 1519, 1520, 0,
	1586, 1586, 1586, 1586, 0, 0, 1586, 1586, 1586, 1586,
	1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
	0, 0, 0, 0, 744, 0, 750, 0, -2, 0,
	768, 770, 772, 773, 775, 776, 778, 779, 781, 782,
	729, 0, 0, 63, 0, 0, 0, 0, 276, 0,
	281, 0, 0, 0, 895, 0, 0, 1045, 1045, 1045,
	932, 0, 0, 0, 0, 0, 0, 0, 0, 1045,
	1045, 1045, 1045, 0, 1063, 0, 0, 0, 652, 651,
	0, 738, 0, 0, 797, 0, 0, 517, 518, 0,
	0, 525, 573, 573, 531, 532, 527, 526, 579, 580,
	576, 0, 576, 576, 797, 0, 550, 551, 552, 573,
	573, 558, 745, 0, 559, 560, 576, 0, 581, 582,
	797, 0, 0, 797, 797, 0, 568, 569, 571, 573,
	0, 0, 1045, 0, 589, 527, 527, 1732, 1733, 0,
	0, 1054, 0, 0, 0, 592, 0, 0, 0, 0,
	653, 219, 222, 0, 225, 0, 1897, 0, 1897, 0,
	232, 0, 0, 0, 0, 0, 0, 262, 263, 0,
	0, 0, 0, 253, 256, 1222, 1223, 1006, 1007, 257,
	258, 302, 303, 0, 744, 767, 769, 763, 764, 765,
	0, 0, 0, 0, 0, 0, 0, 0, 461, 0,
	0, 0, 0, 0, 628, 0, 911, 630, 0, 0,
	0, 0, 805, 799, 801, 868, 97, 805, 8, 84,
	81, 0, 19, 0, 0, 19, 19, 0, 19, 267,
	0, 1729, 1727, 1728, 1663, 1714, 0, 1689, 0, 1690,
	1691, 1692, 1702, 1703, 0, 0, 1685, 0, 1686, 1687,
	1688, 1679, 0, 1680, 1681, 0, 1682, 1683, 265, 363,
	0, 0, 1591, 899, 0, 671, 685, 666, 0, 674,
	0, 0, 1229, 0, 654, 685, 656, 0, 674, 744,
	721, 0, 699, 0, 0, 332, 0, 340, 337, 0,
	341, 0, 0, 357, 359, 360, 361, 346, 347, 594,
	318, 319, 311, 312, 313, 314, 315, 316, 317, 321,
	107, 0, 291, 292, 0, 0, 0, 151, 152, 153,
	154, 155, 156, 158, 142, 617, 619, 998, 1010, 0,
	1001, 0, 161, 202, 134, 0, 0, 0, 1595, 1596,
	1597, 1598, 1599, 1604, 0, 1606, 1608, 1610, 1612, 0,
	1630, -2, -2, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
	1353, 1354, 1355, 1356, 1357, 1615, 1628, 1629, 0, 0,
	0, 0, 0, 0, 1626, 1626, 1621, 0, 1384, 1224,
	1225, 1362, 0, 0, 1396, 1400, 0, 0, 0, 0,
	0, 98, 1585, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
	1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506,
	1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,
	1517, 1518, 0, 0, 1594, 0, 0, 0, 1587, 1588,
	0, 0, 0, 1478, 0, 0, 1484, 1485, 1486, 0,
	680, 0, 1551, 1524, 1542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 823, 825, 0, 689, 691, 692, 718, 699,
	725, 0, 0, 0, 59, 64, 0, 1083, 285, 286,
	0, 0, 280, 0, 0, 0, -2, 0, 0, 0,
	0, 0, 946, 459, 992, 0, 0, 0, 1008, 1033,
	1041, 0, 0, 0, 0, 0, 1089, 933, 938, 939,
	940, 934, 935, 941, 942, 0, 740, 0, 0, 837,
	516, 574, 575, 798, 522, 1858, 527, 797, 797, 534,
	528, 535, 578, 536, 537, 538, 576, 797, 797, 746,
	573, 576, 561, 577, 576, 564, 565, 0, 572, 585,
	590, 586, 0, 588, 542, 543, 1091, 742, 378, 379,
	380, 382, 0, 430, 430, 430, 413, 430, 0, 0,
	401, 1734, 0, 0, 0, 0, 410, 1734, 0, 0,
	1734, 1734, 1734, 1734, 1734, 1734, 1734, 0, 0, 1734,
	1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734,
	0, 1734, 1734, 1734, 1734, 1734, 1208, 1734, 0, 1055,
	420, 421, 422, 423, 428, 429, 0, 456, 0, 0,
	0, 459, 0, 980, 810, 0, 811, 812, 808, 839,
	863, 863, 0, 863, 843, 1228, 0, 0, 230, 231,
	220, 0, 221, 0, 233, 234, 0, 236, 237, 238,
	245, 1800, 1873, 240, 242, 0, 0, 246, 259, 260,
	261, 0, 0, 251, 252, 0, 0, 305, 306, 308,
	0, 699, 1058, 1059, 1060, 614, 1226, 615, 616, 620,
	0, 0, 623, 624, 625, 626, 627, 913, 0, 0,
	985, 986, 987, 797, 0, 806, 0, 802, 869, 0,
	871, 0, 797, 0, 82, 19, 0, 75, 72, 0,
	0, 0, 0, 0, 1709, 1659, 1730, 0, 0, 0,
	1711, 0, 0, 0, 0, 0, 65, 701, 661, 0,
	665, 682, 0, 686, 0, 0, 678, 670, 675, 0,
	0, 695, 662, 0, 1230, 655, 0, 0, 660, 699,
	0, 722, 751, 752, 755, 1283, 0, 342, 338, 356,
	0, 0, 0, 0, 145, 995, 0, 146, 150, 140,
	0, 0, 0, 1000, 0, 997, 1002, 0, 160, 0,
	0, 135, 136, 1074, 1083, 0, 0, 0, 1605, 1607,
	1609, 1611, 1613, 0, 1616, 1626, 1626, 1622, 0, 1617,
	0, 1619, 0, 1595, 1368, 0, 1401, 0, 0, 0,
	0, 0, 0, 0, 0, 1468, 1469, 0, 0, 1473,
	0, 1475, 1476, 1477, 1479, 0, 0, 0, 1483, 0,
	1522, 1543, 1526, 1529, 0, 1533, 0, 1535, 1537, 1538,
	1539, 0, 749, 749, 0, 0, 1440, 1440, 1440, 0,
	0, 0, 0, 1440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1385, 0, 1386, 1387, 0, 0,
	0, 826, 719, 0, 0, 0, 0, 0, 1081, 0,
	287, 275, 277, 0, 0, 1046, 0, 0, 901, 902,
	904, 0, 907, 908, 909, 913, 742, 0, 742, 953,
	1734, 463, 0, 0, 994, 0, 969, 0, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 1093, 0, 0,
	0, 639, 643, 23, 743, 0, 520, 0, 521, 573,
	529, 530, 797, 553, 554, 0, 0, 797, 573, 573,
	576, 0, 587, 1093, 0, 0, 1054, 1159, 1127, 391,
	0, 1239, 1240, 431, 0, 1246, 1255, 1045, 1315, 0,
	1255, 0, 0, 1257, 1258, 0, 0, 0, 0, 414,
	415, 0, 400, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 441, 0, 0, 0, 0, 0, 1735, 1734,
	1734, 0, 408, 409, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 0, 1734, 1734, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1199, 0, 0,
	0, 0, 0, 0, 0, 1214, 1215, 953, 1734, 0,
	0, 0, 463, 967, 976, 0, 0, 0, 0, 0,
	0, 830, 0, 0, 829, 0, 0, 0, 0, 0,
	742, 864, 0, 866, 867, 841, -2, 0, 810, 846,
	1590, 223, 224, 0, 0, 229, 247, 249, 0, 0,
	0, 248, 250, 254, 255, 304, 307, 309, 761, 0,
	0, 1117, 0, 914, 915, 917, 918, 0, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1784, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 912, 631, 795, 800, 807, 870, 872,
	98, 803, 795, 0, 85, 19, 84, 76, 77, 0,
	19, 0, 0, 0, 0, 1719, 1718, 1704, 0, 1705,
	1716, 1721, 0, 1724, 0, 367, 705, 0, 0, 685,
	687, 0, 0, 685, 0, 0, 694, 0, 0, 0,
	685, 761, 701, 0, 758, 756, 757, 0, 0, 595,
	108, 362, 0, 0, 0, 0, 0, 618, 0, 999,
	142, 0, 0, 162, 0, 0, 0, 1083, 1078, 1589,
	1618, 1620, 0, 1627, 1623, 1363, 1372, 1397, 0, 0,
	1403, 1415, 1415, 0, 0, 0, 1406, 1717, 1717, 1409,
	1713, 1715, 1713, 1415, 1415, 0, 99, 0, 0, 1474,
	0, 0, 0, 681, 0, 0, 0, 1436, 1438, 1440,
	1440, 1447, 1441, 1448, 1449, 1440, 1440, 1440, 1440, 1454,
	1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440,
	1434, 0, 0, 1648, 1649, 690, 0, 0, 732, 733,
	734, 735, 736, 0, 0, 54, 55, 1083, 0, 279,
	56, 57, 0, 0, 0, 906, 0, 0, 0, 1232,
	0, 957, 954, 955, 956, 0, 989, 464, 465, 466,
	467, 0, 0, 0, 993, 0, 980, 962, 0, 0,
	0, 1034, 1035, 1036, 1037, 1038, 1039, 1040, -2, 1049,
	0, 0, 0, 1232, 1068, 0, 0, 1232, 1232, 0,
	1101, 0, 1090, 693, 0, -2, 0, 0, 641, 0,
	0, 838, 523, 797, 547, 747, 748, 562, 797, 797,
	573, 591, 1101, 1092, 0, 381, 430, 0, 1147, 0,
	0, 1153, 0, 1160, 384, 0, 432, 0, 1245, 1272,
	1256, 1272, 1316, 1272, 1272, 1045, 0, 432, 0, 0,
	402, 438, 0, 0, 0, 0, 0, 398, 435, 755,
	385, 387, 388, 389, 439, 440, 442, 0, 444, 445,
	404, 416, 417, 418, 419, 0, 0, 0, 411, 424,
	425, 426, 427, 386, 1176, 1177, 1178, 1181, 1182, 1183,
	1184, 0, 0, 1187, 1188, 1189, 1190, 1191, 1269, 1270,
	1271, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1216, 1217,
	1218, 1219, 1220, 1221, 1200, 1201, 1202, 1203, 1204, 1205,
	1206, 1207, 0, 0, 1211, 0, 957, 0, 0, 0,
	0, 989, 969, 0, 979, 0, 981, 982, 0, 0,
	663, 797, 297, 0, 833, 827, 0, 816, 831, 832,
	819, 0, 821, 0, 817, 818, 797, 809, 840, 865,
	842, 845, 847, 848, 854, 0, 0, 0, 0, 226,
	227, 228, 235, 0, 483, 241, 717, 0, 1227, 621,
	622, 1118, 1119, 629, 0, 919, 793, 0, 0, 793,
	80, 83, 0, 78, 0, 0, 0, 0, 70, 68,
	1712, 0, 0, 707, 122, 0, 0, 0, 683, 0,
	688, 685, 669, 679, 668, 676, 677, 696, 1231, 685,
	659, 658, 720, 705, 753, 754, 0, 1284, 333, 0,
	996, 142, 147, 148, 149, 143, 141, 1003, 0, 1005,
	0, 1076, 0, 0, 1624, 1402, 1373, 1404, 1416, 1417,
	1405, 0, 1375, 1376, 1407, 1408, 1410, 1411, 1412, 1413,
	1414, 1377, 1470, 0, 1472, 1480, 1481, 0, 1530, 1534,
	0, 0, 0, 0, 0, 1445, 1446, 1450, 1451, 1452,
	1453, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	1464, 749, 1435, 0, 0, 0, 0, 0, 0, 0,
	730, 0, 0, 0, 1082, 1084, 58, 894, 897, 903,
	905, 0, 0, 0, 1233, 1234, 1236, 1237, 1238, 0,
	930, 0, 0, 948, 949, 959, 0, 0, 0, 469,
	470, 0, 0, 0, 482, 478, 479, 480, 460, 988,
	976, 965, 0, 0, 975, 0, 1050, 1734, 1734, 1734,
	0, 0, 1161, 1734, 1734, 0, 1070, 1072, 0, 0,
	1165, 1104, 0, 0, 1095, 0, 863, 0, 0, 797,
	640, 643, 644, 741, 524, 566, 563, 797, 1104, 377,
	1125, 0, 0, 0, 0, 0, 1157, 0, 0, 1129,
	0, 403, 433, 0, -2, 0, 1273, 0, 1259, 1273,
	0, 0, 1272, 0, 392, 432, 0, 0, 0, 446,
	450, 451, 0, 448, 1311, 0, 449, 0, 437, 0,
	443, 1179, 1180, 0, 1185, 1186, 0, 1210, 0, 0,
	452, 0, 0, 0, 453, 458, 962, 0, 977, 0,
	983, 984, 749, 0, 0, 813, 834, 0, 0, 814,
	0, 815, 820, 822, 296, 849, 0, 0, 851, 852,
	853, 844, 243, 762, 916, 0, 783, 0, 0, 804,
	784, 0, 19, 0, 0, 73, 1722, 1725, 709, 0,
	706, 123, 0, 0, 0, 0, 673, 684, 667, 657,
	707, 759, 760, 144, 139, 1004, 1086, 0, 1077, 0,
	0, 1482, 0, 1440, 1437, 1440, 1439, 1431, 0, 1388,
	0, 1390, 1391, 1392, 0, 1394, 1395, 0, 728, 0,
	0, 936, 1165, 0, 936, 958, 947, 0, 990, 991,
	0, 471, 472, 0, 475, 481, 960, 961, 0, 0,
	973, 0, 0, 0, 0, 1042, 1056, 0, 0, 0,
	-2, 0, -2, 1067, 0, 1110, 0, 1102, 0, 1094,
	0, 1097, 797, 797, -2, 637, 642, 0, 567, 1110,
	1127, 0, 1148, 0, 0, 0, 0, 0, 0, 0,
	1128, 0, 1141, 434, 1274, -2, 1287, 1289, 0, 1055,
	1292, 1293, 0, 0, 0, 0, 0, 0, 1337, 1301,
	0, 0, 1305, 1306, 1307, 0, 0, 1310, 0, 1642,
	1643, 0, 1314, 0, 0, 0, 0, 0, 0, 0,
	1253, 393, 394, 0, 396, 397, 1734, 1312, 436, 390,
	1734, 406, 1209, 1212, 1213, 457, 454, 455, 965, 968,
	664, 744, 298, 299, 835, 0, 828, 858, 855, 0,
	0, 920, 794, 796, 74, 79, 0, 0, 711, 0,
	708, 0, 702, 704, 133, 672, 709, 95, 125, 0,
	0, 1374, 1471, 1521, 1443, 1444, 0, 1432, 0, 1426,
	1427, 1428, 1433, 0, 0, 731, 726, 0, 922, 929,
	943, 1061, 1235, 928, 0, 0, 468, 473, 0, 476,
	477, 0, 963, 964, 0, 971, 0, 0, 1029, 1713,
	0, 1051, 1052, 1053, 1162, 1163, 1164, 1120, 1069, 0,
	-2, 1173, 0, 1065, 1086, 1120, 0, 1098, 0, 1105,
	0, 1103, 1096, 749, 638, 1107, 383, 1159, 1149, 0,
	1151, 0, 0, 0, 0, 1130, -2, 0, 1288, 1290,
	1291, 1294, 1295, 1296, 1342, 1343, 1344, 0, 0, 1299,
	1339, 1340, 1341, 1300, 0, 0, 0, 0, 0, 1640,
	1641, 1335, 0, 0, 1260, 1262, 1263, 1264, 1265, 1266,
	1267, 1268, 1261, 0, 0, 0, 1252, 1254, 395, 0,
	0, 1734, 978, 295, 0, 0, 859, 861, 856, 857,
	69, 71, 86, 0, 710, 124, 0, 711, 87, 0,
	116, 0, 1087, 0, 1442, 1429, 0, 0, 0, 0,
	0, 1644, 1645, 1646, 0, 1389, 1393, 0, 0, 944,
	945, 950, 0, 952, 474, 966, 970, 973, 0, 1020,
	0, 755, 0, 1122, 0, 1071, 1054, 1175, 1734, 1073,
	1122, 0, 1167, 1734, 1734, 1088, 0, 1100, 0, 1112,
	0, 1106, 744, 376, 0, 1109, 1145, 1150, 1152, 1154,
	0, 1158, 1156, 1131, -2, 0, 1139, 0, 0, 1297,
	1298, 0, 0, 1540, 1734, 0, 1330, 0, 1020, 1020,
	1020, 1020, 0, 447, 405, 0, 836, 850, 0, 0,
	0, 700, 96, 113, 0, 126, 127, 0, 0, 0,
	0, 1079, 0, 1418, 0, 0, 0, 1422, 1423, 1424,
	1425, 0, 921, 0, 951, 972, 974, 1019, 1030, 1031,
	755, 1064, 0, 1159, 1174, 0, 1066, 1166, 0, 0,
	0, 1099, 1111, 0, 1114, 636, 1108, 1126, 0, 1155,
	1132, 1140, 0, 1135, 0, 0, 0, 1338, 0, 1304,
	0, 1309, 1318, 1331, 0, 0, 1241, 0, 1243, 0,
	1247, 0, 1249, 0, 0, 407, 860, 862, 0, 713,
	703, 100, 0, 122, 119, 0, 128, 0, 0, 0,
	0, 1075, 0, 0, 1419, 1420, 1421, 0, 923, 924,
	937, 1021, 1734, 1734, 0, 0, 0, 1027, 1028, 1032,
	0, 1147, 1179, 1168, 1169, 1170, 1113, 1146, 1134, 0,
	-2, 1142, 0, 0, 1592, 1602, 1603, 1302, 1308, 1317,
	1319, 1320, 0, 1332, 1333, 1334, 1336, 1020, 1020, 1020,
	1020, 1251, 712, 0, 89, 0, 0, 117, 118, 120,
	0, 129, 0, 131, 132, 0, 1430, 925, 0, 0,
	1024, 1025, 0, 1123, 0, 1125, 1136, -2, 0, 1144,
	0, 1303, 1321, 0, 1322, 0, 0, 0, 1242, 1244,
	1248, 1250, 714, 1085, 0, 101, 0, 103, 105, 106,
	1275, 114, 115, 121, 130, 0, 910, 926, 0, 1022,
	1023, 1026, 0, 1127, 1143, 1593, 1323, 1325, 1326, 0,
	0, 1324, 90, 91, 0, 102, 0, 0, 1080, 927,
	1124, 1121, 1327, 1329, 1328, 0, 0, 104, 1276, 92,
	93, 94, 0, 1277,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 115, 3, 3, 3, 146, 138, 3,
	82, 83, 143, 141, 156, 142, 155, 144, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 634, 631,
	125, 124, 126, 3, 635, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 148, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 632, 137, 633, 149,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 116, 117, 118, 119, 120, 121, 122, 123, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 139,
	140, 145, 147, 150, 151, 152, 153, 154, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:807
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:814
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:820
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:828
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:834
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:838
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:853
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:857
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:863
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:872
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:905
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:914
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option)
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:923
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option)
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:934
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Obeject:     yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:944
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:954
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:967
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:987
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:993
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1000
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1008
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1014
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1023
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1033
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1041
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1049
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1057
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1067
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1075
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1085
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1092
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1101
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1111
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1115
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1121
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1125
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1131
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1140
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1150
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1154
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1160
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1169
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1173
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1179
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1200
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1213
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1220
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1224
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1230
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1234
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1240
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1247
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1255
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1259
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1273
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1279
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1285
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin(), yyDollar[5].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1292
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1296
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1300
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1306
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1315
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1326
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1330
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1336
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1340
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1346
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1350
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1356
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1380
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1399
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1403
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1407
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1412
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1416
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1425
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1435
		{
			yyVAL.str = ""
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1442
		{
			yyVAL.str = yyDollar[3].str
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1447
		{
			yyVAL.str = "\n"
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1454
		{
			yyVAL.str = yyDollar[3].str
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1459
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1463
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1491
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1495
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1501
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1509
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1529
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1548
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1573
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1577
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1581
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1586
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1590
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1596
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1609
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1620
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1633
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1637
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1647
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1660
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1673
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1679
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1685
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1692
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1700
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1709
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1713
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1717
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1721
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1725
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1729
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1736
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1740
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1746
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1753
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1762
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1766
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1772
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1776
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1780
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1784
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1788
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1792
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1796
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1800
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1804
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1808
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1812
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1816
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1820
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1824
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1828
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1832
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1836
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1840
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1844
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1848
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1852
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1856
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1860
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1864
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1868
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1872
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1876
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1880
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1884
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1888
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1892
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1896
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1900
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1904
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1908
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1912
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1916
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1920
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1924
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1928
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1932
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1936
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1940
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1944
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1948
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1952
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1956
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1960
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1964
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1968
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1972
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1985
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1992
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1999
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2009
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2013
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2019
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2026
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2034
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2038
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2042
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2046
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2052
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2056
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2062
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2069
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2076
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2085
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2115
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2119
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2123
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2129
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2135
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2139
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2146
		{
			yyVAL.str = yyDollar[3].str
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2152
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2156
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2162
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2170
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2179
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2188
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2196
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2204
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2227
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2250
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2257
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2264
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2272
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2279
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2286
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2295
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2299
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2303
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2309
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2313
		{
			yyVAL.str = yyDollar[1].str
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2319
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2323
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2329
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2333
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2344
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2350
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2355
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2359
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2363
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2367
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2371
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2375
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2379
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2383
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2387
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2393
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2397
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2401
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2405
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2410
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2415
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2421
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2434
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2447
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2460
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2473
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2489
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2496
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2507
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2518
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2522
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2528
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2538
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2544
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2548
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2554
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2560
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2564
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2568
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2572
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2578
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2590
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2596
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2600
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2606
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2610
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2616
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2622
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2633
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2639
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2643
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2647
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2651
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2655
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2659
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2667
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2675
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2685
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2697
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2701
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2709
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2717
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2756
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2760
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2766
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2772
		{
			yyVAL.str = yyDollar[1].str
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2777
		{
			yyVAL.str = "true"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2778
		{
			yyVAL.str = "false"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2779
		{
			yyVAL.str = yyDollar[1].str
		}
	case 362:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2784
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2790
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2799
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2806
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2814
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2818
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2841
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2864
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2874
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2881
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2890
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2894
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2900
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2904
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2928
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2938
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2954
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2972
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2976
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2982
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2986
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2992
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2998
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3006
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3016
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3024
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3034
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3044
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3054
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3061
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3065
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3069
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3073
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3077
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3084
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3090
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3094
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3098
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3102
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3106
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3110
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3114
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3118
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3123
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3154
		{
			yyVAL.str = ""
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3158
		{
			yyVAL.str = string("COLUMN")
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3163
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3169
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3175
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3183
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3187
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3193
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3201
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3208
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3214
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3220
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3226
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3232
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3239
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3246
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3254
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3260
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3272
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3278
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3286
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3290
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3297
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3315
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3329
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3343
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3356
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3362
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3373
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3386
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3390
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3398
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3402
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3407
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3411
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3427
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3431
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3435
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3439
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3446
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3450
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3454
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3458
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3465
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3469
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3476
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3480
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3484
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3488
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3495
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3502
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3508
		{
			yyVAL.item = nil
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3513
		{
			yyVAL.item = nil
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3556
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3565
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3573
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3581
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3585
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3589
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3600
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3604
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3610
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3615
		{
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3619
		{
		}
	case 529:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3624
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3634
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3644
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3652
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3658
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3664
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3670
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3676
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3682
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3688
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3697
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3701
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3705
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3709
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3713
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3717
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3721
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3725
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3731
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3740
		{
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3742
		{
		}
	case 553:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3751
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3761
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3770
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3774
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3778
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3784
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3790
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3796
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3802
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3811
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3821
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3833
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3837
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3843
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3855
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3869
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3875
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3881
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3888
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3892
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3897
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3901
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3905
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3910
		{
			yyVAL.str = ""
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3914
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3920
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3933
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3937
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3943
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3948
		{
			yyLOCAL = &tree.ShowCreateView{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3952
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3956
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3962
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3968
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3972
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3978
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3984
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3988
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3992
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3998
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4002
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4028
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4036
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4044
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4052
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4056
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4062
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4075
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4083
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4092
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4098
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4106
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4114
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4122
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4128
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4136
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4142
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4150
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4156
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4166
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4171
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4178
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4194
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4207
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4218
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4222
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4228
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4233
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4240
		{
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4242
		{
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4245
		{
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4254
		{
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4258
		{
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4263
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4272
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4279
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4285
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4293
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4300
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4307
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4327
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4335
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4345
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4349
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4355
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4362
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4368
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4376
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4383
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4390
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4409
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4413
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4417
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4422
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4426
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4430
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4436
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4445
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4449
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4455
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4459
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4465
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4469
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4475
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4480
		{
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4484
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4491
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4495
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4502
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4507
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4511
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4517
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4521
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4527
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4531
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4536
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4540
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4553
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4564
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4575
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4597
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4620
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4628
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4637
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4641
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4654
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4658
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4663
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4667
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4674
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4679
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4686
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4692
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4696
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4700
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4704
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4708
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4712
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4717
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4721
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4727
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4737
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4752
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4756
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4770
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4774
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4780
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4789
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4793
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4797
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4801
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4805
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4811
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4818
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4827
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4831
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4837
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4845
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4849
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4854
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4858
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4864
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4868
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4872
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4877
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4881
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4887
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4893
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4897
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:4903
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4908
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4912
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4916
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4921
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4925
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4929
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4934
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4938
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4946
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4950
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4954
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4968
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4972
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4982
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4992
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5002
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5014
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5022
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5030
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5039
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5047
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5055
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5063
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5071
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5079
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5087
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5095
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5103
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5113
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5124
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5138
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5142
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5146
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5151
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5155
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5159
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5168
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5172
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5177
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5181
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5186
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5190
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5196
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5200
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5206
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5210
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5215
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5219
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5224
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5232
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5238
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5246
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5254
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5264
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5270
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5279
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5288
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5297
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5307
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5311
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5321
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5325
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5329
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5333
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 823:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5339
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5349
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5353
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5359
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5365
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5369
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5375
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5381
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5385
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5389
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5395
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5399
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5405
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5409
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5415
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5419
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5425
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5429
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5439
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5452
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5458
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5464
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: tree.NewCStrUseOrigin(yyDollar[1].cstrUnion().Origin(), yylex.(*Lexer).useOrigin),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5478
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5489
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5496
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5500
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5506
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5516
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5520
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5524
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5529
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5533
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5537
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5541
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5546
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5550
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5554
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5558
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5562
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5567
		{
			yyVAL.str = ""
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5571
		{
			yyVAL.str = yyDollar[1].str
		}
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5575
		{
			yyVAL.str = yyDollar[2].str
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5581
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 868:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5587
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5591
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5595
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5599
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5603
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5609
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 894:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5649
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5662
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5668
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 897:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5674
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5687
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5692
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5698
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5705
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5709
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5715
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5721
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5726
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5730
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5734
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5738
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5745
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5778
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5783
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5789
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5796
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5800
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5806
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5812
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5816
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5820
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5826
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5832
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5838
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5842
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5848
		{
			yyVAL.str = ""
		}
	case 927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5855
		{
			yyVAL.str = yyDollar[2].str
		}
	case 928:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5861
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5876
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5893
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].str
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5910
		{
			yyVAL.str = yyDollar[1].str
		}
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5914
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 933:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5920
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 934:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5924
		{
			yyVAL.str = "DEFINER = "
		}
	case 935:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5928
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 936:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5933
		{
			yyVAL.str = ""
		}
	case 937:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:5937
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 943:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5951
		{
			yyVAL.str = ""
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5959
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 947:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:5965
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].str
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5978
		{
			yyVAL.str = yyDollar[1].str
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5982
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 950:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5988
		{
			var Typ = tree.AccountIdentifiedByPassword
			var Str = yyDollar[3].str
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5997
		{
			var Typ = tree.AccountIdentifiedByRandomPassword
			var Str string
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6006
		{
			var Typ = tree.AccountIdentifiedWithSSL
			var Str = yyDollar[3].str
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6016
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6022
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6029
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6036
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6044
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6050
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6059
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6076
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6093
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6111
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6117
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6124
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6132
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6138
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6146
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6152
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6160
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6166
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6175
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6179
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6184
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6188
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6195
		{
			yyVAL.str = yyDollar[3].str
		}
	case 976:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6200
		{
			yyVAL.str = ""
		}
	case 977:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6204
		{
			yyVAL.str = yyDollar[2].str
		}
	case 978:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6210
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6223
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var comment = yyDollar[6].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, comment)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6232
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6236
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6242
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6248
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6254
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6263
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6271
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6279
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6287
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 989:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6292
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6304
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6315
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6424
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6428
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6434
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6447
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6451
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6457
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6470
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6474
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6478
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6483
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6487
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6493
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6500
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6506
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6515
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1008:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6522
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6533
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6537
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6543
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6552
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6556
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6560
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6565
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6569
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6573
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6577
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6583
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6614
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6618
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6644
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6650
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6662
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6668
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6674
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6680
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6686
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6694
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6698
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6704
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6718
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6732
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6736
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6740
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6744
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6748
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6752
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6756
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6762
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6777
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6781
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6792
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6796
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6801
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6805
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6811
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6815
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6821
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6830
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6839
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6845
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6849
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6855
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6866
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6872
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6890
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6908
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6926
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6942
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6946
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6955
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6967
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6976
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6988
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6998
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7008
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7019
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7029
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7040
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7050
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7057
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7067
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7080
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7088
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7097
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7106
		{
			yyVAL.str = ""
		}
	case 1080:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7110
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7116
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7120
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7125
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7129
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7136
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7148
		{
			yyVAL.str = ""
		}
	case 1087:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7152
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1088:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7158
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7179
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7193
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7197
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7201
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7207
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7211
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7218
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7225
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7232
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7239
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7243
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7247
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7251
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7255
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7262
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7269
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7273
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7280
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7287
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7291
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7297
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7303
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7307
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7314
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7321
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7328
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7335
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7339
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7344
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7348
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7352
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7357
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7361
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7374
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7378
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7386
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7394
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7398
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7410
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7414
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7420
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7424
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7430
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7443
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7457
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7461
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7467
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7471
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7477
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7486
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7497
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7501
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7506
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7510
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7516
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7521
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7529
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7533
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7543
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7547
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7558
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7566
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7574
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7582
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7593
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7602
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7612
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7622
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7626
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7631
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7635
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7641
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7645
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7651
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7660
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7670
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7674
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7680
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7684
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7690
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7699
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7709
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7713
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7719
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7723
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7727
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7733
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7737
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7741
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7745
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7749
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7753
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7757
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7762
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7766
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7770
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7774
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7778
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7782
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7786
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7790
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7794
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7798
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7802
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7806
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7810
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7816
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7822
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7826
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7830
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7834
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7838
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7844
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7850
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7856
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7862
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7868
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7874
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7878
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7882
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7886
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7893
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7897
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:7903
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7914
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7918
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7924
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7928
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7932
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7936
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7940
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7944
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7958
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7962
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7971
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7976
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7981
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			atTs := &tree.AtTimeStamp{
				Expr: yyDollar[3].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7989
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			atTs := &tree.AtTimeStamp{
				Expr: yyDollar[5].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7998
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8005
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8009
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8015
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8019
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8023
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8029
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8033
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8039
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8052
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8065
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8104
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8144
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8158
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8164
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8177
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8190
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8203
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8216
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8231
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8241
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8247
		{
			yyVAL.str = ""
		}
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8251
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8261
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8267
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8273
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8294
		{
			yyVAL.str = ""
		}
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8298
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8304
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8310
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8316
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8322
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin(), yyDollar[5].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8330
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8334
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8338
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8342
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8348
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8354
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8360
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin(), yyDollar[5].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8367
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8371
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8377
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8381
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8387
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8391
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8395
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8399
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8403
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8407
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8412
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8416
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8420
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8424
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8428
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8432
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8436
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8440
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8444
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8448
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[3].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8462
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8466
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8470
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8474
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8478
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8482
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8488
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8492
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8497
		{
			yyVAL.str = ""
		}
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8501
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8507
		{
			yyVAL.str = ""
		}
	case 1316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8511
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1317:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8517
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8534
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8541
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8548
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8555
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8562
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8571
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8577
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8583
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8587
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8591
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8595
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8599
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8604
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8611
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8615
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8619
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8624
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8628
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8633
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8637
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8653
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8659
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8663
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8667
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8671
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8675
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8679
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8683
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8687
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8691
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8695
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8699
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8703
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8707
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8713
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8717
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8721
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8725
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8729
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8733
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8737
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8741
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8745
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8749
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8791
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8795
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8799
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8804
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8812
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8816
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8820
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8824
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8828
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8838
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8842
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8846
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8850
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8854
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8858
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8862
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8868
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8877
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8886
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8897
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8907
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8917
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8926
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8936
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8946
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8956
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8965
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8975
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8979
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8984
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8988
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8994
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8998
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9004
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9013
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9025
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9042
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9059
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9072
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9085
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9097
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9111
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9126
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9141
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9158
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9173
		{
		}
	case 1419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9180
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9184
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9188
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9194
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9198
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9202
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9206
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9212
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9216
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9220
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9226
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9234
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9244
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9248
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9255
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9260
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9264
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9269
		{
			yyVAL.str = ","
		}
	case 1437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9273
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9278
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9282
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1440:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9287
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9294
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9320
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9332
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9344
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9355
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9366
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9377
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9387
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9397
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9408
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9419
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9430
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9441
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9452
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9463
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9474
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9485
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9496
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9507
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9518
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9529
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9540
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9551
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9569
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9578
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9587
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9596
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9605
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9616
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9625
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9635
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9644
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9653
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9662
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9671
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9683
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9694
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9707
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9719
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9742
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9778
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9791
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9804
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9816
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9825
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9833
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9841
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9854
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9863
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9874
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9885
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9894
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9906
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9916
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9926
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9935
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9946
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9955
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9965
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9974
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9983
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9993
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9997
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10003
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10007
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10026
		{
		}
	case 1551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10028
		{
		}
	case 1585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10069
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10081
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10085
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10089
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10095
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10100
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10104
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10110
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10114
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10120
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10124
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10131
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10135
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10139
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin("concat", yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10148
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10152
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10156
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10161
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10165
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10171
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10175
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10179
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10183
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10187
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10191
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10195
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10199
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10203
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10207
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10215
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10219
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10223
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10227
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10231
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10235
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10239
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10243
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10247
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10251
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10257
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10261
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10267
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10271
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10278
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10282
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10286
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10292
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10296
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10300
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10304
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10308
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10312
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10316
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10322
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10326
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10330
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10334
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10340
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10353
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10358
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10364
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10368
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10381
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10386
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10390
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10394
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10398
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10402
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10409
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10413
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10417
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10421
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10428
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10439
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10444
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10450
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10462
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10474
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10486
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10499
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10512
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10525
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10538
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10551
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10564
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10577
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10590
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10603
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10616
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10631
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10658
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10700
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10736
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10772
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10789
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10801
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10821
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10841
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10861
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10877
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10890
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10903
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10916
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10929
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10941
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10953
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10965
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10977
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10989
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11001
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11013
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11025
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11037
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11050
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11063
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11076
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11089
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11104
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11112
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11121
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11131
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11154
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11159
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11165
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11172
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11176
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11181
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11185
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11191
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11197
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11204
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11211
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11220
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11227
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11234
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11243
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11247
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11251
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11257
		{
		}
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11259
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11269
		{
			yyVAL.str = ""
		}
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11273
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
