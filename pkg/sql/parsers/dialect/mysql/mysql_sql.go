// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const OF = 57367
const CONNECT = 57368
const MANAGE = 57369
const GRANTS = 57370
const OWNERSHIP = 57371
const REFERENCE = 57372
const LOWER_THAN_SET = 57373
const SET = 57374
const ALL = 57375
const DISTINCT = 57376
const DISTINCTROW = 57377
const AS = 57378
const EXISTS = 57379
const ASC = 57380
const DESC = 57381
const INTO = 57382
const DUPLICATE = 57383
const DEFAULT = 57384
const LOCK = 57385
const KEYS = 57386
const NULLS = 57387
const FIRST = 57388
const LAST = 57389
const AFTER = 57390
const INSTANT = 57391
const INPLACE = 57392
const COPY = 57393
const DISABLE = 57394
const ENABLE = 57395
const UNDEFINED = 57396
const MERGE = 57397
const TEMPTABLE = 57398
const DEFINER = 57399
const INVOKER = 57400
const SQL = 57401
const SECURITY = 57402
const CASCADED = 57403
const VALUES = 57404
const NEXT = 57405
const VALUE = 57406
const SHARE = 57407
const MODE = 57408
const SQL_NO_CACHE = 57409
const SQL_CACHE = 57410
const JOIN = 57411
const STRAIGHT_JOIN = 57412
const LEFT = 57413
const RIGHT = 57414
const INNER = 57415
const OUTER = 57416
const CROSS = 57417
const NATURAL = 57418
const USE = 57419
const FORCE = 57420
const CENTROIDX = 57421
const APPLY = 57422
const DEDUP = 57423
const LOWER_THAN_ON = 57424
const ON = 57425
const USING = 57426
const SUBQUERY_AS_EXPR = 57427
const LOWER_THAN_STRING = 57428
const ID = 57429
const AT_ID = 57430
const AT_AT_ID = 57431
const STRING = 57432
const VALUE_ARG = 57433
const LIST_ARG = 57434
const COMMENT = 57435
const COMMENT_KEYWORD = 57436
const QUOTE_ID = 57437
const STAGE = 57438
const CREDENTIALS = 57439
const STAGES = 57440
const SNAPSHOTS = 57441
const INTEGRAL = 57442
const HEX = 57443
const FLOAT = 57444
const HEXNUM = 57445
const BIT_LITERAL = 57446
const NULL = 57447
const TRUE = 57448
const FALSE = 57449
const LOWER_THAN_CHARSET = 57450
const CHARSET = 57451
const UNIQUE = 57452
const KEY = 57453
const OR = 57454
const PIPE_CONCAT = 57455
const XOR = 57456
const AND = 57457
const NOT = 57458
const BETWEEN = 57459
const CASE = 57460
const WHEN = 57461
const THEN = 57462
const ELSE = 57463
const END = 57464
const ELSEIF = 57465
const LOWER_THAN_EQ = 57466
const LE = 57467
const GE = 57468
const NE = 57469
const NULL_SAFE_EQUAL = 57470
const IS = 57471
const LIKE = 57472
const REGEXP = 57473
const IN = 57474
const ASSIGNMENT = 57475
const ILIKE = 57476
const SHIFT_LEFT = 57477
const SHIFT_RIGHT = 57478
const DIV = 57479
const MOD = 57480
const UNARY = 57481
const COLLATE = 57482
const BINARY = 57483
const UNDERSCORE_BINARY = 57484
const INTERVAL = 57485
const OUT = 57486
const INOUT = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const WORK = 57493
const CONSISTENT = 57494
const SNAPSHOT = 57495
const SAVEPOINT = 57496
const CHAIN = 57497
const NO = 57498
const RELEASE = 57499
const PRIORITY = 57500
const QUICK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const DECIMAL_VALUE = 57515
const TIME = 57516
const TIMESTAMP = 57517
const DATETIME = 57518
const YEAR = 57519
const CHAR = 57520
const VARCHAR = 57521
const BOOL = 57522
const CHARACTER = 57523
const VARBINARY = 57524
const NCHAR = 57525
const TEXT = 57526
const TINYTEXT = 57527
const MEDIUMTEXT = 57528
const LONGTEXT = 57529
const DATALINK = 57530
const BLOB = 57531
const TINYBLOB = 57532
const MEDIUMBLOB = 57533
const LONGBLOB = 57534
const JSON = 57535
const ENUM = 57536
const UUID = 57537
const VECF32 = 57538
const VECF64 = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const INT1 = 57548
const INT2 = 57549
const INT3 = 57550
const INT4 = 57551
const INT8 = 57552
const S3OPTION = 57553
const STAGEOPTION = 57554
const SQL_SMALL_RESULT = 57555
const SQL_BIG_RESULT = 57556
const SQL_BUFFER_RESULT = 57557
const SQL_CALC_FOUND_ROWS = 57558
const LOW_PRIORITY = 57559
const HIGH_PRIORITY = 57560
const DELAYED = 57561
const CREATE = 57562
const ALTER = 57563
const DROP = 57564
const RENAME = 57565
const ANALYZE = 57566
const PHYPLAN = 57567
const ADD = 57568
const RETURNS = 57569
const SCHEMA = 57570
const TABLE = 57571
const SEQUENCE = 57572
const INDEX = 57573
const VIEW = 57574
const TO = 57575
const IGNORE = 57576
const IF = 57577
const PRIMARY = 57578
const COLUMN = 57579
const CONSTRAINT = 57580
const SPATIAL = 57581
const FULLTEXT = 57582
const FOREIGN = 57583
const KEY_BLOCK_SIZE = 57584
const SHOW = 57585
const DESCRIBE = 57586
const EXPLAIN = 57587
const DATE = 57588
const ESCAPE = 57589
const REPAIR = 57590
const OPTIMIZE = 57591
const TRUNCATE = 57592
const MAXVALUE = 57593
const PARTITION = 57594
const REORGANIZE = 57595
const LESS = 57596
const THAN = 57597
const PROCEDURE = 57598
const TRIGGER = 57599
const STATUS = 57600
const VARIABLES = 57601
const ROLE = 57602
const PROXY = 57603
const AVG_ROW_LENGTH = 57604
const STORAGE = 57605
const DISK = 57606
const MEMORY = 57607
const CHECKSUM = 57608
const COMPRESSION = 57609
const DATA = 57610
const DIRECTORY = 57611
const DELAY_KEY_WRITE = 57612
const ENCRYPTION = 57613
const ENGINE = 57614
const MAX_ROWS = 57615
const MIN_ROWS = 57616
const PACK_KEYS = 57617
const ROW_FORMAT = 57618
const STATS_AUTO_RECALC = 57619
const STATS_PERSISTENT = 57620
const STATS_SAMPLE_PAGES = 57621
const DYNAMIC = 57622
const COMPRESSED = 57623
const REDUNDANT = 57624
const COMPACT = 57625
const FIXED = 57626
const COLUMN_FORMAT = 57627
const AUTO_RANDOM = 57628
const ENGINE_ATTRIBUTE = 57629
const SECONDARY_ENGINE_ATTRIBUTE = 57630
const INSERT_METHOD = 57631
const RESTRICT = 57632
const CASCADE = 57633
const ACTION = 57634
const PARTIAL = 57635
const SIMPLE = 57636
const CHECK = 57637
const ENFORCED = 57638
const RANGE = 57639
const LIST = 57640
const ALGORITHM = 57641
const LINEAR = 57642
const PARTITIONS = 57643
const SUBPARTITION = 57644
const SUBPARTITIONS = 57645
const CLUSTER = 57646
const TYPE = 57647
const ANY = 57648
const SOME = 57649
const EXTERNAL = 57650
const LOCALFILE = 57651
const URL = 57652
const PREPARE = 57653
const DEALLOCATE = 57654
const RESET = 57655
const EXTENSION = 57656
const RETENTION = 57657
const PERIOD = 57658
const CLONE = 57659
const INCREMENT = 57660
const CYCLE = 57661
const MINVALUE = 57662
const PUBLICATION = 57663
const SUBSCRIPTIONS = 57664
const PUBLICATIONS = 57665
const PROPERTIES = 57666
const PARSER = 57667
const VISIBLE = 57668
const INVISIBLE = 57669
const BTREE = 57670
const HASH = 57671
const RTREE = 57672
const BSI = 57673
const IVFFLAT = 57674
const MASTER = 57675
const HNSW = 57676
const ZONEMAP = 57677
const LEADING = 57678
const BOTH = 57679
const TRAILING = 57680
const UNKNOWN = 57681
const LISTS = 57682
const OP_TYPE = 57683
const REINDEX = 57684
const EF_SEARCH = 57685
const EF_CONSTRUCTION = 57686
const M = 57687
const QUANTIZATION = 57688
const EXPIRE = 57689
const ACCOUNT = 57690
const ACCOUNTS = 57691
const UNLOCK = 57692
const DAY = 57693
const NEVER = 57694
const PUMP = 57695
const MYSQL_COMPATIBILITY_MODE = 57696
const UNIQUE_CHECK_ON_AUTOINCR = 57697
const MODIFY = 57698
const CHANGE = 57699
const SECOND = 57700
const ASCII = 57701
const COALESCE = 57702
const COLLATION = 57703
const HOUR = 57704
const MICROSECOND = 57705
const MINUTE = 57706
const MONTH = 57707
const QUARTER = 57708
const REPEAT = 57709
const REVERSE = 57710
const ROW_COUNT = 57711
const WEEK = 57712
const REVOKE = 57713
const FUNCTION = 57714
const PRIVILEGES = 57715
const TABLESPACE = 57716
const EXECUTE = 57717
const SUPER = 57718
const GRANT = 57719
const OPTION = 57720
const REFERENCES = 57721
const REPLICATION = 57722
const SLAVE = 57723
const CLIENT = 57724
const USAGE = 57725
const RELOAD = 57726
const FILE = 57727
const TEMPORARY = 57728
const ROUTINE = 57729
const EVENT = 57730
const SHUTDOWN = 57731
const NULLX = 57732
const AUTO_INCREMENT = 57733
const APPROXNUM = 57734
const SIGNED = 57735
const UNSIGNED = 57736
const ZEROFILL = 57737
const ENGINES = 57738
const LOW_CARDINALITY = 57739
const AUTOEXTEND_SIZE = 57740
const ADMIN_NAME = 57741
const RANDOM = 57742
const SUSPEND = 57743
const ATTRIBUTE = 57744
const HISTORY = 57745
const REUSE = 57746
const CURRENT = 57747
const OPTIONAL = 57748
const FAILED_LOGIN_ATTEMPTS = 57749
const PASSWORD_LOCK_TIME = 57750
const UNBOUNDED = 57751
const SECONDARY = 57752
const RESTRICTED = 57753
const USER = 57754
const IDENTIFIED = 57755
const CIPHER = 57756
const ISSUER = 57757
const X509 = 57758
const SUBJECT = 57759
const SAN = 57760
const REQUIRE = 57761
const SSL = 57762
const NONE = 57763
const PASSWORD = 57764
const SHARED = 57765
const EXCLUSIVE = 57766
const MAX_QUERIES_PER_HOUR = 57767
const MAX_UPDATES_PER_HOUR = 57768
const MAX_CONNECTIONS_PER_HOUR = 57769
const MAX_USER_CONNECTIONS = 57770
const FORMAT = 57771
const VERBOSE = 57772
const CONNECTION = 57773
const TRIGGERS = 57774
const PROFILES = 57775
const LOAD = 57776
const INLINE = 57777
const INFILE = 57778
const TERMINATED = 57779
const OPTIONALLY = 57780
const ENCLOSED = 57781
const ESCAPED = 57782
const STARTING = 57783
const LINES = 57784
const ROWS = 57785
const IMPORT = 57786
const DISCARD = 57787
const JSONTYPE = 57788
const MODUMP = 57789
const OVER = 57790
const PRECEDING = 57791
const FOLLOWING = 57792
const GROUPS = 57793
const DATABASES = 57794
const TABLES = 57795
const SEQUENCES = 57796
const EXTENDED = 57797
const FULL = 57798
const PROCESSLIST = 57799
const FIELDS = 57800
const COLUMNS = 57801
const OPEN = 57802
const ERRORS = 57803
const WARNINGS = 57804
const INDEXES = 57805
const SCHEMAS = 57806
const NODE = 57807
const LOCKS = 57808
const ROLES = 57809
const TABLE_NUMBER = 57810
const COLUMN_NUMBER = 57811
const TABLE_VALUES = 57812
const TABLE_SIZE = 57813
const NAMES = 57814
const GLOBAL = 57815
const PERSIST = 57816
const SESSION = 57817
const ISOLATION = 57818
const LEVEL = 57819
const READ = 57820
const WRITE = 57821
const ONLY = 57822
const REPEATABLE = 57823
const COMMITTED = 57824
const UNCOMMITTED = 57825
const SERIALIZABLE = 57826
const LOCAL = 57827
const EVENTS = 57828
const PLUGINS = 57829
const CURRENT_TIMESTAMP = 57830
const DATABASE = 57831
const CURRENT_TIME = 57832
const LOCALTIME = 57833
const LOCALTIMESTAMP = 57834
const UTC_DATE = 57835
const UTC_TIME = 57836
const UTC_TIMESTAMP = 57837
const REPLACE = 57838
const CONVERT = 57839
const SEPARATOR = 57840
const TIMESTAMPDIFF = 57841
const CURRENT_DATE = 57842
const CURRENT_USER = 57843
const CURRENT_ROLE = 57844
const SECOND_MICROSECOND = 57845
const MINUTE_MICROSECOND = 57846
const MINUTE_SECOND = 57847
const HOUR_MICROSECOND = 57848
const HOUR_SECOND = 57849
const HOUR_MINUTE = 57850
const DAY_MICROSECOND = 57851
const DAY_SECOND = 57852
const DAY_MINUTE = 57853
const DAY_HOUR = 57854
const YEAR_MONTH = 57855
const SQL_TSI_HOUR = 57856
const SQL_TSI_DAY = 57857
const SQL_TSI_WEEK = 57858
const SQL_TSI_MONTH = 57859
const SQL_TSI_QUARTER = 57860
const SQL_TSI_YEAR = 57861
const SQL_TSI_SECOND = 57862
const SQL_TSI_MINUTE = 57863
const RECURSIVE = 57864
const CONFIG = 57865
const DRAINER = 57866
const SOURCE = 57867
const STREAM = 57868
const HEADERS = 57869
const CONNECTOR = 57870
const CONNECTORS = 57871
const DAEMON = 57872
const PAUSE = 57873
const CANCEL = 57874
const TASK = 57875
const RESUME = 57876
const MATCH = 57877
const AGAINST = 57878
const BOOLEAN = 57879
const LANGUAGE = 57880
const WITH = 57881
const QUERY = 57882
const EXPANSION = 57883
const WITHOUT = 57884
const VALIDATION = 57885
const UPGRADE = 57886
const RETRY = 57887
const ADDDATE = 57888
const BIT_AND = 57889
const BIT_OR = 57890
const BIT_XOR = 57891
const CAST = 57892
const COUNT = 57893
const APPROX_COUNT = 57894
const APPROX_COUNT_DISTINCT = 57895
const SERIAL_EXTRACT = 57896
const APPROX_PERCENTILE = 57897
const CURDATE = 57898
const CURTIME = 57899
const DATE_ADD = 57900
const DATE_SUB = 57901
const EXTRACT = 57902
const GROUP_CONCAT = 57903
const MAX = 57904
const MID = 57905
const MIN = 57906
const NOW = 57907
const POSITION = 57908
const SESSION_USER = 57909
const STD = 57910
const STDDEV = 57911
const MEDIAN = 57912
const CLUSTER_CENTERS = 57913
const KMEANS = 57914
const STDDEV_POP = 57915
const STDDEV_SAMP = 57916
const SUBDATE = 57917
const SUBSTR = 57918
const SUBSTRING = 57919
const SUM = 57920
const SYSDATE = 57921
const SYSTEM_USER = 57922
const TRANSLATE = 57923
const TRIM = 57924
const VARIANCE = 57925
const VAR_POP = 57926
const VAR_SAMP = 57927
const AVG = 57928
const RANK = 57929
const ROW_NUMBER = 57930
const DENSE_RANK = 57931
const BIT_CAST = 57932
const BITMAP_BIT_POSITION = 57933
const BITMAP_BUCKET_NUMBER = 57934
const BITMAP_COUNT = 57935
const BITMAP_CONSTRUCT_AGG = 57936
const BITMAP_OR_AGG = 57937
const NEXTVAL = 57938
const SETVAL = 57939
const CURRVAL = 57940
const LASTVAL = 57941
const ARROW = 57942
const ROW = 57943
const OUTFILE = 57944
const HEADER = 57945
const MAX_FILE_SIZE = 57946
const FORCE_QUOTE = 57947
const PARALLEL = 57948
const STRICT = 57949
const UNUSED = 57950
const BINDINGS = 57951
const DO = 57952
const DECLARE = 57953
const LOOP = 57954
const WHILE = 57955
const LEAVE = 57956
const ITERATE = 57957
const UNTIL = 57958
const CALL = 57959
const PREV = 57960
const SLIDING = 57961
const FILL = 57962
const SPBEGIN = 57963
const BACKEND = 57964
const SERVERS = 57965
const HANDLER = 57966
const PERCENT = 57967
const SAMPLE = 57968
const MO_TS = 57969
const PITR = 57970
const RECOVERY_WINDOW = 57971
const INTERNAL = 57972
const CDC = 57973
const GROUPING = 57974
const SETS = 57975
const CUBE = 57976
const ROLLUP = 57977
const LOGSERVICE = 57978
const REPLICAS = 57979
const STORES = 57980
const SETTINGS = 57981
const KILL = 57982
const BACKUP = 57983
const FILESYSTEM = 57984
const PARALLELISM = 57985
const RESTORE = 57986
const QUERY_RESULT = 57987

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"OF",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CENTROIDX",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"SAVEPOINT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"SQL_CALC_FOUND_ROWS",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"CLONE",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"HNSW",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EF_SEARCH",
	"EF_CONSTRUCTION",
	"M",
	"QUANTIZATION",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"RECOVERY_WINDOW",
	"INTERNAL",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:13037

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 142,
	11, 814,
	22, 814,
	-2, 807,
	-1, 167,
	246, 1256,
	248, 1144,
	-2, 1200,
	-1, 194,
	44, 637,
	248, 637,
	275, 644,
	276, 644,
	480, 637,
	-2, 672,
	-1, 234,
	666, 2033,
	-2, 536,
	-1, 548,
	666, 2157,
	-2, 413,
	-1, 606,
	666, 2216,
	-2, 411,
	-1, 607,
	666, 2217,
	-2, 412,
	-1, 608,
	666, 2218,
	-2, 414,
	-1, 749,
	327, 181,
	452, 181,
	453, 181,
	-2, 1930,
	-1, 816,
	86, 1715,
	-2, 2093,
	-1, 817,
	86, 1734,
	-2, 2064,
	-1, 821,
	86, 1735,
	-2, 2092,
	-1, 855,
	86, 1642,
	-2, 2297,
	-1, 856,
	86, 1643,
	-2, 2296,
	-1, 857,
	86, 1644,
	-2, 2286,
	-1, 858,
	86, 2258,
	-2, 2279,
	-1, 859,
	86, 2259,
	-2, 2280,
	-1, 860,
	86, 2260,
	-2, 2288,
	-1, 861,
	86, 2261,
	-2, 2268,
	-1, 862,
	86, 2262,
	-2, 2277,
	-1, 863,
	86, 2263,
	-2, 2289,
	-1, 864,
	86, 2264,
	-2, 2290,
	-1, 865,
	86, 2265,
	-2, 2295,
	-1, 866,
	86, 2266,
	-2, 2300,
	-1, 867,
	86, 2267,
	-2, 2301,
	-1, 868,
	86, 1711,
	-2, 2131,
	-1, 869,
	86, 1712,
	-2, 1914,
	-1, 870,
	86, 1713,
	-2, 2140,
	-1, 871,
	86, 1714,
	-2, 1923,
	-1, 873,
	86, 1717,
	-2, 1931,
	-1, 875,
	86, 1719,
	-2, 2164,
	-1, 877,
	86, 1722,
	-2, 1952,
	-1, 879,
	86, 1724,
	-2, 2176,
	-1, 880,
	86, 1725,
	-2, 2175,
	-1, 881,
	86, 1726,
	-2, 1999,
	-1, 882,
	86, 1727,
	-2, 2088,
	-1, 885,
	86, 1730,
	-2, 2187,
	-1, 887,
	86, 1732,
	-2, 2190,
	-1, 888,
	86, 1733,
	-2, 2192,
	-1, 889,
	86, 1736,
	-2, 2200,
	-1, 890,
	86, 1737,
	-2, 2073,
	-1, 891,
	86, 1738,
	-2, 2118,
	-1, 892,
	86, 1739,
	-2, 2083,
	-1, 893,
	86, 1740,
	-2, 2108,
	-1, 904,
	86, 1620,
	-2, 2291,
	-1, 905,
	86, 1621,
	-2, 2292,
	-1, 906,
	86, 1622,
	-2, 2293,
	-1, 1010,
	475, 672,
	476, 672,
	-2, 638,
	-1, 1061,
	128, 1914,
	139, 1914,
	159, 1914,
	-2, 1888,
	-1, 1182,
	22, 841,
	-2, 790,
	-1, 1292,
	11, 814,
	22, 814,
	-2, 1497,
	-1, 1376,
	22, 841,
	-2, 790,
	-1, 1736,
	86, 1787,
	-2, 2090,
	-1, 1737,
	86, 1788,
	-2, 2091,
	-1, 2346,
	87, 1014,
	-2, 1020,
	-1, 2362,
	111, 1192,
	155, 1192,
	195, 1192,
	198, 1192,
	288, 1192,
	-2, 1185,
	-1, 2527,
	11, 814,
	22, 814,
	-2, 955,
	-1, 2561,
	87, 1874,
	160, 1874,
	-2, 2075,
	-1, 2562,
	87, 1874,
	160, 1874,
	-2, 2074,
	-1, 2563,
	87, 1850,
	160, 1850,
	-2, 2061,
	-1, 2564,
	87, 1851,
	160, 1851,
	-2, 2066,
	-1, 2565,
	87, 1852,
	160, 1852,
	-2, 1987,
	-1, 2566,
	87, 1853,
	160, 1853,
	-2, 1980,
	-1, 2567,
	87, 1854,
	160, 1854,
	-2, 1904,
	-1, 2568,
	87, 1855,
	160, 1855,
	-2, 2063,
	-1, 2569,
	87, 1856,
	160, 1856,
	-2, 1985,
	-1, 2570,
	87, 1857,
	160, 1857,
	-2, 1979,
	-1, 2571,
	87, 1858,
	160, 1858,
	-2, 1967,
	-1, 2572,
	87, 1874,
	160, 1874,
	-2, 1968,
	-1, 2573,
	87, 1874,
	160, 1874,
	-2, 1969,
	-1, 2575,
	87, 1863,
	160, 1863,
	-2, 2108,
	-1, 2576,
	87, 1840,
	160, 1840,
	-2, 2093,
	-1, 2577,
	87, 1872,
	160, 1872,
	-2, 2064,
	-1, 2578,
	87, 1872,
	160, 1872,
	-2, 2092,
	-1, 2579,
	87, 1872,
	160, 1872,
	-2, 1932,
	-1, 2580,
	87, 1870,
	160, 1870,
	-2, 2083,
	-1, 2581,
	87, 1867,
	160, 1867,
	-2, 1957,
	-1, 2582,
	86, 1821,
	87, 1821,
	160, 1821,
	410, 1821,
	411, 1821,
	412, 1821,
	-2, 1903,
	-1, 2583,
	86, 1822,
	87, 1822,
	160, 1822,
	410, 1822,
	411, 1822,
	412, 1822,
	-2, 1905,
	-1, 2584,
	86, 1823,
	87, 1823,
	160, 1823,
	410, 1823,
	411, 1823,
	412, 1823,
	-2, 2136,
	-1, 2585,
	86, 1825,
	87, 1825,
	160, 1825,
	410, 1825,
	411, 1825,
	412, 1825,
	-2, 2065,
	-1, 2586,
	86, 1827,
	87, 1827,
	160, 1827,
	410, 1827,
	411, 1827,
	412, 1827,
	-2, 2043,
	-1, 2587,
	86, 1829,
	87, 1829,
	160, 1829,
	410, 1829,
	411, 1829,
	412, 1829,
	-2, 1986,
	-1, 2588,
	86, 1831,
	87, 1831,
	160, 1831,
	410, 1831,
	411, 1831,
	412, 1831,
	-2, 1963,
	-1, 2589,
	86, 1832,
	87, 1832,
	160, 1832,
	410, 1832,
	411, 1832,
	412, 1832,
	-2, 1964,
	-1, 2590,
	86, 1834,
	87, 1834,
	160, 1834,
	410, 1834,
	411, 1834,
	412, 1834,
	-2, 1902,
	-1, 2591,
	87, 1877,
	160, 1877,
	410, 1877,
	411, 1877,
	412, 1877,
	-2, 1937,
	-1, 2592,
	87, 1877,
	160, 1877,
	410, 1877,
	411, 1877,
	412, 1877,
	-2, 1953,
	-1, 2593,
	87, 1880,
	160, 1880,
	410, 1880,
	411, 1880,
	412, 1880,
	-2, 1933,
	-1, 2594,
	87, 1880,
	160, 1880,
	410, 1880,
	411, 1880,
	412, 1880,
	-2, 2002,
	-1, 2595,
	87, 1877,
	160, 1877,
	410, 1877,
	411, 1877,
	412, 1877,
	-2, 2025,
	-1, 2822,
	111, 1192,
	155, 1192,
	195, 1192,
	198, 1192,
	288, 1192,
	-2, 1186,
	-1, 2842,
	84, 734,
	160, 734,
	-2, 1371,
	-1, 3275,
	198, 1192,
	312, 1460,
	-2, 1432,
	-1, 3469,
	111, 1192,
	155, 1192,
	195, 1192,
	198, 1192,
	-2, 1312,
	-1, 3472,
	111, 1192,
	155, 1192,
	195, 1192,
	198, 1192,
	-2, 1312,
	-1, 3484,
	84, 734,
	160, 734,
	-2, 1371,
	-1, 3505,
	198, 1192,
	312, 1460,
	-2, 1433,
	-1, 3662,
	111, 1192,
	155, 1192,
	195, 1192,
	198, 1192,
	-2, 1313,
	-1, 3689,
	87, 1274,
	160, 1274,
	-2, 1192,
	-1, 3839,
	87, 1274,
	160, 1274,
	-2, 1192,
	-1, 4012,
	87, 1278,
	160, 1278,
	-2, 1192,
	-1, 4068,
	87, 1279,
	160, 1279,
	-2, 1192,
}

const yyPrivate = 57344

const yyLast = 55411

var yyAct = [...]int{
	783, 759, 785, 4090, 4122, 2873, 223, 4114, 1637, 4016,
	2000, 1716, 4022, 3490, 3589, 4023, 3908, 3295, 4015, 3839,
	3261, 3966, 768, 3931, 2111, 3371, 3886, 3817, 3717, 3519,
	2867, 1549, 3782, 3877, 1328, 761, 3372, 3838, 1712, 3909,
	3649, 2779, 1776, 3751, 2870, 813, 649, 1183, 1060, 3593,
	1481, 3807, 3887, 3889, 3450, 1945, 37, 3584, 3455, 1487,
	1763, 3506, 2845, 667, 2413, 673, 673, 3270, 1177, 3659,
	3670, 673, 691, 700, 1719, 3216, 700, 3231, 3192, 3664,
	3631, 3473, 3369, 2987, 2098, 2985, 2986, 3442, 2559, 3219,
	208, 2095, 2963, 3290, 2896, 2060, 68, 3475, 2784, 2113,
	3272, 3279, 3414, 2069, 2136, 2521, 2982, 2686, 1781, 712,
	2557, 3055, 2168, 2210, 2416, 3015, 2810, 1960, 2651, 3334,
	3278, 3199, 2973, 3193, 3195, 3197, 3241, 708, 697, 3194,
	2374, 1173, 141, 2823, 3190, 2324, 1542, 36, 3163, 751,
	756, 2323, 2206, 2194, 2176, 2629, 1615, 1778, 3029, 3103,
	1622, 1874, 2611, 941, 2177, 1626, 1638, 2141, 2169, 2205,
	2799, 1630, 2091, 2794, 2898, 1627, 2500, 2878, 672, 672,
	981, 2414, 2837, 1990, 680, 6, 2522, 2373, 219, 8,
	1446, 218, 7, 1921, 2064, 1121, 1710, 1054, 2555, 2362,
	2505, 1777, 2207, 1589, 1558, 1659, 760, 1527, 2409, 649,
	666, 1521, 750, 2353, 2723, 1959, 2061, 758, 1770, 2356,
	1470, 769, 1750, 1701, 2240, 23, 2175, 1641, 2172, 1199,
	2157, 15, 1596, 223, 1709, 223, 705, 1112, 1113, 1053,
	2529, 1413, 1490, 648, 673, 2501, 1917, 1920, 1526, 1580,
	980, 1482, 682, 1019, 908, 27, 1715, 1523, 1782, 24,
	715, 209, 25, 16, 17, 10, 1466, 1092, 714, 201,
	957, 205, 1398, 699, 963, 711, 978, 1329, 2214, 1374,
	2531, 910, 14, 911, 1005, 669, 3896, 3803, 206, 64,
	197, 168, 1260, 1261, 1262, 1259, 2759, 2759, 2759, 33,
	1109, 3380, 3487, 695, 3248, 3072, 752, 198, 3071, 1069,
	1260, 1261, 1262, 1259, 189, 2224, 1178, 3620, 199, 1260,
	1261, 1262, 1259, 1108, 1491, 1110, 3458, 696, 1087, 3364,
	1179, 2674, 1887, 2617, 2615, 692, 2614, 140, 678, 2612,
	1603, 1599, 1456, 685, 1104, 1066, 1105, 680, 207, 703,
	1068, 674, 126, 1178, 694, 668, 2722, 971, 2322, 972,
	1525, 202, 757, 1393, 3864, 930, 1105, 1449, 1450, 1451,
	1105, 693, 928, 2112, 1367, 3173, 2328, 1888, 1039, 2332,
	1396, 3156, 3153, 1452, 3158, 1652, 3155, 4102, 1504, 2751,
	2749, 1881, 1389, 1103, 1601, 3582, 8, 3051, 952, 7,
	1088, 3049, 2146, 752, 1260, 1261, 1262, 1259, 1260, 1261,
	1262, 1259, 966, 3872, 962, 3758, 3752, 3585, 3370, 2191,
	3891, 2171, 1323, 909, 3132, 2163, 2454, 4128, 3885, 4099,
	3824, 3766, 1258, 2753, 920, 206, 206, 206, 148, 149,
	4051, 150, 151, 1222, 3599, 2660, 152, 3632, 3474, 153,
	1404, 206, 206, 2211, 1645, 206, 1657, 206, 2365, 1636,
	3883, 206, 64, 197, 168, 3790, 929, 3636, 2668, 3764,
	944, 3433, 2704, 927, 3825, 1082, 1077, 1072, 1076, 1080,
	3942, 1566, 1403, 1064, 1642, 1065, 1654, 1402, 1399, 1401,
	930, 928, 1070, 710, 1421, 3994, 3130, 1438, 2778, 2980,
	3075, 3063, 1890, 1085, 140, 2222, 140, 1075, 1644, 202,
	1656, 1405, 167, 195, 204, 196, 124, 2774, 1419, 1650,
	206, 64, 197, 168, 202, 202, 1034, 1032, 202, 1033,
	202, 2357, 3792, 2549, 202, 194, 188, 187, 854, 1257,
	1682, 1649, 70, 921, 2550, 968, 899, 961, 898, 900,
	901, 3022, 902, 903, 1953, 2074, 965, 964, 1083, 1702,
	925, 2630, 1706, 3157, 3154, 1528, 2536, 1530, 1086, 2535,
	1478, 206, 2537, 2776, 3265, 2364, 1028, 953, 3023, 3024,
	206, 64, 197, 168, 1250, 1668, 1705, 206, 64, 197,
	168, 3609, 2771, 202, 2830, 1073, 3894, 960, 1974, 206,
	64, 197, 168, 190, 191, 192, 206, 64, 197, 168,
	2075, 2076, 2108, 1899, 1900, 3893, 970, 2775, 1040, 1084,
	3263, 959, 1488, 1489, 1718, 958, 1500, 4026, 4027, 1501,
	1237, 946, 1255, 1238, 1420, 1063, 2772, 1062, 951, 1602,
	1600, 1816, 200, 2754, 2828, 1036, 2796, 3894, 3980, 3893,
	3979, 3892, 1194, 202, 2311, 4050, 2797, 3987, 3991, 1074,
	202, 1240, 3875, 136, 1191, 949, 3373, 193, 3968, 137,
	2446, 1486, 202, 1951, 3056, 1485, 1488, 1489, 1707, 202,
	2655, 673, 673, 1202, 1205, 167, 195, 204, 196, 3971,
	3892, 3978, 673, 1187, 2831, 4094, 4095, 3878, 3879, 3880,
	3881, 2226, 1704, 969, 3057, 2795, 3058, 3373, 194, 1038,
	1188, 3968, 700, 700, 3755, 673, 2802, 2092, 1503, 2918,
	3905, 1722, 1202, 1205, 2082, 3387, 138, 1697, 3443, 950,
	3212, 2218, 3641, 3448, 3093, 2974, 1081, 3608, 2488, 63,
	2352, 2154, 3996, 3997, 2495, 3610, 1115, 1609, 1608, 1235,
	3794, 3795, 2781, 697, 697, 697, 3992, 3993, 2777, 4000,
	3999, 3998, 4001, 969, 2752, 3531, 3774, 2223, 3775, 1253,
	1254, 3989, 1078, 2665, 1476, 1079, 3091, 2773, 1300, 193,
	1252, 1514, 2452, 2968, 672, 1176, 1037, 1422, 65, 3583,
	4025, 3895, 3802, 1225, 1392, 1185, 1069, 3050, 2491, 2492,
	2490, 3390, 3097, 2758, 1248, 1249, 967, 1179, 1197, 1179,
	3206, 3799, 2552, 1236, 1952, 3217, 1180, 3638, 1213, 1703,
	3546, 1179, 3777, 146, 203, 1187, 147, 3665, 3745, 1217,
	3655, 169, 1066, 3418, 2498, 1247, 61, 1068, 665, 2212,
	1186, 2212, 3210, 3073, 4059, 956, 1721, 1720, 3293, 2212,
	3294, 2329, 1889, 3229, 3776, 2213, 3267, 3543, 1179, 3924,
	1332, 3070, 3600, 3919, 923, 3291, 3292, 1105, 3242, 1069,
	2245, 1105, 1105, 2106, 2107, 1089, 1105, 2838, 1071, 1105,
	702, 2364, 1105, 701, 3823, 3536, 1502, 2225, 1204, 1203,
	1239, 2978, 2833, 1230, 3164, 2359, 1232, 3829, 3207, 3208,
	3910, 3926, 139, 45, 3491, 1066, 3932, 3262, 924, 62,
	1068, 2872, 3498, 5, 3209, 3821, 1206, 2613, 695, 695,
	695, 1604, 1465, 2343, 1233, 1035, 3204, 1204, 1203, 1294,
	3788, 3626, 143, 144, 3218, 1395, 145, 1397, 3746, 2229,
	2231, 2232, 696, 696, 696, 945, 3426, 3765, 943, 1409,
	692, 692, 692, 1412, 909, 3995, 1175, 1418, 698, 1182,
	1181, 2750, 1065, 1488, 1489, 1372, 3547, 1214, 1377, 694,
	694, 694, 1333, 3793, 3429, 1210, 1211, 3180, 169, 169,
	169, 1296, 1297, 1298, 1299, 1216, 693, 693, 693, 3297,
	981, 1891, 1301, 1651, 169, 169, 1692, 203, 169, 1693,
	169, 2486, 3637, 2669, 169, 1400, 1477, 3904, 3708, 1488,
	1489, 4134, 1226, 2086, 1196, 2909, 709, 3218, 698, 3697,
	65, 1193, 2910, 2911, 2912, 698, 2464, 2432, 1463, 3596,
	1190, 1192, 1195, 2412, 2435, 2463, 1208, 698, 1228, 4117,
	2801, 2808, 3428, 1242, 698, 673, 1243, 1538, 1516, 926,
	1231, 1234, 673, 1537, 3213, 1215, 649, 649, 2975, 3094,
	3830, 2484, 2485, 169, 2093, 1484, 649, 649, 2494, 746,
	1553, 1553, 748, 673, 1245, 3796, 1227, 747, 3822, 1462,
	65, 2552, 3988, 971, 2419, 972, 3770, 65, 3703, 3268,
	3888, 2434, 1480, 1479, 700, 1581, 667, 2805, 2806, 65,
	1461, 1592, 1555, 1344, 1345, 3933, 65, 3808, 1551, 1551,
	3271, 1174, 2804, 3642, 169, 2919, 223, 2920, 2921, 3843,
	3152, 4014, 1560, 169, 2455, 649, 2419, 2422, 3476, 2083,
	169, 2218, 1698, 2868, 2869, 2429, 2872, 3205, 2433, 1728,
	1731, 1732, 169, 3774, 2412, 3775, 3580, 2947, 1511, 169,
	1729, 3376, 1291, 1229, 1414, 1522, 710, 3965, 3291, 3292,
	1524, 3769, 1241, 3470, 3463, 1515, 3718, 3719, 3720, 3724,
	3722, 3723, 3725, 3721, 3287, 1222, 1559, 1634, 3017, 3019,
	4118, 3168, 1639, 1378, 3296, 935, 1415, 1416, 2230, 1648,
	1376, 1425, 1426, 1427, 1428, 1429, 2661, 1431, 2363, 3777,
	2541, 1246, 2450, 1437, 1547, 1548, 2814, 2818, 2819, 2820,
	2815, 2817, 2816, 2344, 1029, 2215, 2081, 2058, 1680, 1472,
	1473, 1411, 1683, 1424, 1430, 2418, 1244, 2764, 3034, 3035,
	2420, 3776, 1553, 2422, 1553, 1187, 939, 1893, 3325, 1658,
	1643, 937, 936, 1532, 1534, 3096, 1436, 1655, 1435, 1434,
	1433, 1041, 3842, 1545, 1546, 1448, 1445, 704, 3226, 3710,
	697, 2241, 2423, 697, 697, 1221, 3436, 2418, 2412, 2417,
	2916, 2415, 2420, 3415, 3699, 1423, 1691, 3288, 3698, 1613,
	1069, 1616, 1617, 2407, 2421, 2645, 1610, 1069, 1505, 1506,
	2227, 2228, 1492, 1618, 1619, 1495, 1582, 973, 1031, 1029,
	1443, 1030, 1553, 4013, 1624, 1625, 2768, 2913, 2336, 1536,
	1029, 1408, 1605, 1902, 4115, 4116, 1903, 1647, 938, 1187,
	1780, 1467, 1471, 1471, 1471, 942, 2421, 3704, 3705, 3618,
	1458, 3170, 1811, 1812, 1829, 1815, 1632, 1561, 1629, 678,
	1764, 1633, 970, 1830, 1567, 2335, 1467, 1467, 1573, 2428,
	3105, 3104, 3018, 2426, 2449, 1901, 1837, 1579, 1839, 1593,
	1840, 1841, 1842, 975, 976, 977, 931, 1594, 2423, 1455,
	2338, 2337, 2938, 2939, 1406, 1407, 1714, 1464, 2476, 932,
	3671, 4130, 1717, 1031, 1474, 2787, 1030, 3377, 1730, 935,
	1184, 3227, 1493, 1494, 1031, 1496, 1497, 1030, 1498, 4136,
	1457, 1187, 2948, 2950, 2951, 2952, 2949, 1892, 2788, 2789,
	3975, 1895, 1258, 1897, 3247, 1457, 1733, 1666, 2085, 1695,
	1669, 1904, 1906, 2843, 1907, 695, 1909, 1910, 695, 695,
	667, 1581, 1699, 1872, 1814, 1661, 1918, 1553, 1923, 1924,
	934, 1926, 1516, 673, 3331, 937, 936, 2552, 673, 696,
	2355, 1553, 696, 696, 2220, 981, 2765, 692, 1946, 3327,
	692, 692, 2392, 3770, 2519, 1690, 1894, 3771, 2135, 1689,
	1875, 1553, 1685, 1687, 1688, 1684, 694, 1516, 1711, 694,
	694, 1219, 691, 1713, 3289, 1819, 1820, 1821, 1828, 1708,
	2844, 2279, 1686, 693, 2278, 1042, 693, 693, 1835, 2937,
	1222, 1836, 1973, 4124, 4112, 1759, 1760, 1752, 2632, 1220,
	3439, 1980, 1980, 3389, 1516, 2316, 1516, 1516, 1849, 1850,
	673, 673, 2660, 2047, 1918, 2051, 3301, 4070, 1553, 2055,
	2056, 2254, 1675, 1676, 2071, 4037, 649, 1667, 1871, 1258,
	1670, 1671, 2520, 4034, 4028, 3299, 1928, 4010, 1883, 1925,
	649, 1933, 1553, 1260, 1261, 1262, 1259, 3331, 1220, 1927,
	3959, 1260, 1261, 1262, 1259, 1977, 2844, 1258, 2354, 1100,
	1101, 1102, 1260, 1261, 1262, 1259, 4125, 4071, 3958, 673,
	1918, 1553, 1878, 2118, 4143, 673, 673, 673, 708, 708,
	2419, 2422, 2520, 3952, 1184, 2128, 2129, 2130, 2131, 2391,
	4071, 2002, 2137, 1099, 3186, 1843, 1096, 2253, 4038, 223,
	2049, 2133, 223, 223, 3927, 223, 4035, 2255, 3128, 3162,
	4011, 2109, 3160, 1986, 1987, 1679, 2520, 3037, 1873, 1879,
	1912, 1983, 2755, 1258, 1678, 1700, 1738, 1739, 1740, 1741,
	1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 2650, 2101,
	2102, 1258, 1761, 1762, 2637, 1829, 1829, 2179, 2087, 913,
	914, 915, 916, 1914, 1915, 1916, 2255, 1829, 1829, 3915,
	1913, 1948, 1949, 2211, 2196, 1929, 1930, 1931, 1932, 2078,
	3862, 2080, 2114, 1922, 2120, 2121, 2122, 2220, 2114, 2114,
	2114, 2117, 2099, 2100, 2094, 1943, 1966, 1938, 2073, 2145,
	1942, 1838, 2148, 2149, 2405, 2151, 2321, 1946, 1971, 2315,
	3861, 1553, 2209, 1961, 1643, 1963, 1964, 1954, 3856, 2190,
	3855, 1984, 1985, 2072, 1962, 3854, 2423, 2181, 1956, 1970,
	3853, 2418, 2412, 2417, 3833, 2415, 2420, 3832, 2314, 697,
	1564, 2286, 3916, 1373, 1982, 3805, 1979, 1981, 2202, 2104,
	2057, 1069, 1444, 3863, 1069, 1767, 1539, 753, 4126, 3487,
	2048, 3552, 2203, 1069, 2059, 2053, 1093, 1094, 1095, 1098,
	3500, 1097, 3465, 3041, 2054, 3407, 3403, 2186, 1222, 2088,
	2077, 2846, 2079, 2378, 2663, 2662, 1467, 1066, 3309, 3012,
	2421, 2255, 1068, 2255, 2654, 1947, 2741, 2729, 2255, 1066,
	1471, 2721, 3447, 2255, 1068, 2116, 2676, 2220, 2658, 2174,
	2220, 918, 1471, 2646, 2123, 2124, 2115, 1965, 2255, 2639,
	2634, 2174, 1260, 1261, 1262, 1259, 2399, 1711, 2142, 913,
	914, 915, 916, 1972, 2552, 2626, 1975, 1976, 2274, 2259,
	2201, 786, 796, 3501, 1275, 3466, 1957, 1958, 3408, 3404,
	2140, 787, 2159, 788, 792, 795, 791, 789, 790, 2126,
	1069, 3310, 2520, 1967, 1968, 2624, 1663, 2192, 2251, 2378,
	1258, 1309, 2622, 2620, 1258, 2180, 2377, 1946, 2317, 1258,
	2694, 2378, 1207, 1978, 2189, 2187, 2635, 2293, 2292, 1171,
	1166, 3735, 2640, 2635, 2198, 2277, 1066, 2268, 2267, 2326,
	2327, 1068, 2330, 2200, 695, 2333, 793, 2266, 2627, 1165,
	1161, 1162, 1163, 1164, 3550, 2699, 2339, 2698, 2697, 2695,
	2234, 2256, 751, 2204, 1291, 673, 673, 673, 696, 2103,
	3252, 3920, 2309, 4137, 933, 2217, 692, 3088, 2625, 794,
	673, 673, 673, 673, 2257, 2621, 2621, 2219, 1453, 2378,
	1672, 2316, 1454, 2375, 1543, 694, 2233, 1818, 1817, 4098,
	1258, 1258, 2379, 2380, 2381, 1544, 2384, 1516, 1258, 3672,
	1258, 1258, 693, 2236, 2237, 3921, 1752, 2235, 1106, 1107,
	1258, 918, 3479, 1111, 1541, 2242, 1468, 2696, 2247, 1844,
	1845, 1846, 1847, 1516, 2255, 1851, 1852, 1853, 1854, 1856,
	1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866,
	2441, 2287, 2288, 3673, 2290, 3477, 2199, 1818, 1817, 1499,
	2220, 2297, 2447, 1673, 3897, 3804, 3480, 3762, 2348, 2349,
	2350, 1274, 1273, 1283, 1284, 1276, 1277, 1278, 1279, 1280,
	1281, 1282, 1275, 2366, 2367, 2368, 2369, 3701, 3243, 1509,
	1510, 3700, 1512, 1513, 2396, 1517, 1518, 1519, 2398, 3478,
	2400, 2448, 1278, 1279, 1280, 1281, 1282, 1275, 673, 1980,
	3686, 1855, 3645, 3457, 3332, 3323, 3315, 2524, 2524, 2071,
	2524, 3311, 2310, 2312, 2313, 2318, 940, 3221, 1540, 1568,
	1569, 1570, 1571, 1572, 2971, 1574, 1575, 1576, 1577, 1578,
	649, 649, 2970, 1584, 1585, 1586, 1587, 1469, 1187, 2812,
	2401, 2760, 3362, 2673, 1553, 673, 1260, 1261, 1262, 1259,
	2238, 2239, 1453, 2638, 2345, 2543, 1454, 3365, 2411, 3244,
	673, 1848, 2184, 2410, 2700, 2701, 1187, 2596, 667, 1260,
	1261, 1262, 1259, 1332, 1592, 2183, 2071, 2182, 1440, 2602,
	2616, 2604, 2547, 2683, 223, 1273, 1283, 1284, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, 1275, 2598, 1439, 1189, 2612,
	2606, 1522, 2385, 3245, 2528, 1069, 2143, 1771, 2404, 1758,
	2538, 3042, 2539, 2526, 1908, 2530, 1276, 1277, 1278, 1279,
	1280, 1281, 1282, 1275, 2642, 1755, 1757, 1754, 2397, 1756,
	3713, 2544, 2545, 2424, 2425, 1771, 2430, 2248, 1597, 2388,
	2143, 1066, 2656, 3107, 2394, 2209, 1068, 2395, 1559, 2532,
	1262, 1259, 1553, 3977, 1553, 1259, 1553, 3712, 3059, 2554,
	2907, 1187, 2905, 2114, 1260, 1261, 1262, 1259, 2884, 2675,
	2882, 2601, 3692, 3363, 2607, 1283, 1284, 1276, 1277, 1278,
	1279, 1280, 1281, 1282, 1275, 1333, 1260, 1261, 1262, 1259,
	3646, 3647, 2666, 2713, 1597, 1553, 1187, 2493, 4108, 2499,
	2707, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1264, 4133,
	2743, 2533, 2744, 2560, 1311, 2714, 4107, 1532, 1534, 3121,
	1553, 1260, 1261, 1262, 1259, 3639, 2702, 1310, 4106, 3445,
	2386, 2387, 1471, 1551, 1260, 1261, 1262, 1259, 4104, 2548,
	2389, 2390, 2959, 2685, 1833, 2551, 1260, 1261, 1262, 1259,
	2811, 2715, 2652, 2653, 2957, 2608, 4103, 2270, 1551, 1834,
	4041, 4009, 1260, 1261, 1262, 1259, 4008, 2600, 2597, 2762,
	2763, 1598, 3922, 2766, 4132, 2718, 2719, 2780, 3451, 2687,
	3858, 2687, 3120, 2955, 2393, 3640, 3846, 3836, 1187, 3446,
	1260, 1261, 1262, 1259, 3826, 1553, 3753, 4129, 1516, 3675,
	2691, 3674, 2958, 3492, 1516, 2051, 4019, 2672, 2670, 1260,
	1261, 1262, 1259, 2842, 2956, 2667, 2705, 3614, 3481, 2848,
	2262, 3456, 2849, 3444, 2681, 3211, 2648, 2269, 1260, 1261,
	1262, 1259, 3602, 1260, 1261, 1262, 1259, 2659, 2664, 2657,
	2859, 2747, 2944, 2954, 1260, 1261, 1262, 1259, 3084, 3054,
	1187, 3053, 2942, 2941, 1260, 1261, 1262, 1259, 2881, 1260,
	1261, 1262, 1259, 2829, 2940, 1187, 1187, 1187, 1980, 2932,
	2926, 1187, 2925, 2891, 2892, 2893, 2894, 1187, 2901, 2693,
	2902, 2903, 2824, 2904, 3601, 2906, 2924, 2703, 2923, 2680,
	2826, 2677, 2678, 2756, 2628, 2540, 2901, 2320, 1711, 3540,
	2839, 2162, 2943, 1069, 2161, 2599, 2160, 2156, 2524, 2155,
	2860, 1260, 1261, 1262, 1259, 2809, 2840, 1260, 1261, 1262,
	1259, 2825, 2960, 2110, 3395, 2002, 1260, 1261, 1262, 1259,
	1898, 649, 2862, 2850, 1896, 2560, 1664, 1391, 3198, 2051,
	3797, 3798, 1263, 1187, 2071, 2071, 2071, 2071, 2071, 2071,
	1293, 1260, 1261, 1262, 1259, 1260, 1261, 1262, 1259, 1303,
	1187, 2071, 1169, 4127, 2524, 4109, 3590, 4096, 2965, 2791,
	2879, 2793, 4058, 2875, 2879, 2679, 2790, 4057, 2807, 4054,
	3020, 746, 1553, 3984, 748, 1312, 3983, 3783, 2886, 747,
	2841, 3963, 2847, 673, 673, 8, 2832, 2876, 7, 1274,
	1273, 1283, 1284, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1275, 3907, 2876, 2887, 2888, 2861, 3650, 3901, 2890, 2864,
	2119, 1168, 3882, 3124, 2897, 2877, 3873, 2883, 2874, 3850,
	3845, 3844, 3801, 3787, 2889, 3785, 3754, 3694, 3123, 3654,
	3643, 1922, 3628, 1535, 3627, 3623, 3008, 3621, 3619, 223,
	1260, 1261, 1262, 1259, 223, 3616, 3613, 3612, 2976, 3588,
	2922, 3586, 3559, 3556, 3021, 1260, 1261, 1262, 1259, 3554,
	2858, 2964, 3441, 3423, 2716, 3416, 1829, 3400, 1829, 2724,
	2725, 3069, 3398, 3393, 2934, 2730, 3343, 3321, 2880, 3038,
	2988, 2966, 3320, 3318, 2972, 3083, 3031, 3032, 3317, 3312,
	3307, 1553, 3306, 3222, 3090, 3184, 3183, 2988, 2453, 3174,
	3172, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2969, 3169,
	2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474,
	2475, 3064, 2477, 2478, 2479, 2480, 2481, 3167, 2482, 3043,
	3011, 3025, 3010, 3076, 3047, 3009, 3028, 3005, 3122, 1617,
	2989, 2990, 2991, 2992, 2993, 2994, 2325, 2740, 1875, 1618,
	1619, 2852, 3951, 3068, 2739, 3098, 2855, 3095, 3074, 1624,
	1625, 1069, 3052, 3027, 2953, 1260, 1261, 1262, 1259, 2945,
	2935, 2933, 2929, 1069, 1260, 1261, 1262, 1259, 2928, 3066,
	2927, 1260, 1261, 1262, 1259, 2769, 1632, 2761, 1629, 2851,
	3077, 1633, 2757, 3045, 854, 853, 3171, 3044, 2856, 2857,
	2649, 3087, 2340, 3175, 3176, 3177, 3179, 2738, 3181, 3182,
	2334, 3092, 3067, 2737, 2331, 3062, 2165, 1187, 4135, 2158,
	3065, 3060, 1886, 1187, 3080, 3079, 1885, 3078, 1665, 3201,
	1340, 1336, 1335, 3086, 1260, 1261, 1262, 1259, 1172, 3215,
	1260, 1261, 1262, 1259, 673, 922, 3099, 4084, 3939, 3935,
	3100, 3779, 3778, 3767, 3763, 3119, 3615, 3597, 3232, 1187,
	2736, 3569, 673, 3472, 673, 1187, 1187, 3471, 1591, 3106,
	3469, 3110, 3111, 3438, 2071, 2375, 3412, 3251, 2735, 3113,
	3115, 3116, 3410, 3112, 3409, 3114, 3406, 1260, 1261, 1262,
	1259, 3405, 2734, 206, 3161, 197, 168, 2441, 3399, 3397,
	3378, 2733, 3368, 3225, 3367, 1260, 1261, 1262, 1259, 3277,
	2732, 3280, 3354, 3280, 3280, 3353, 3253, 3235, 1187, 1260,
	1261, 1262, 1259, 3240, 3228, 3166, 3188, 3165, 1260, 1261,
	1262, 1259, 2824, 3185, 3159, 3126, 3302, 1260, 1261, 1262,
	1259, 3117, 3298, 3109, 2731, 1553, 1553, 3223, 3108, 3102,
	3260, 2728, 3203, 3036, 3255, 1069, 2623, 1069, 3264, 3266,
	2619, 2618, 2298, 1069, 3187, 3236, 202, 3237, 2291, 3249,
	2876, 1260, 1261, 1262, 1259, 2285, 3303, 3304, 1260, 1261,
	1262, 1259, 2284, 1551, 1551, 2283, 3224, 2282, 2280, 2276,
	1069, 1066, 673, 3234, 2275, 3275, 1068, 2273, 3201, 3238,
	3239, 2727, 3246, 2264, 2261, 3250, 2876, 2260, 2252, 2164,
	3276, 1516, 2876, 2876, 2051, 2051, 1869, 3285, 3259, 1868,
	2411, 798, 142, 1867, 1832, 2410, 1831, 142, 1260, 1261,
	1262, 1259, 2726, 3281, 3282, 1822, 1723, 1724, 1725, 1726,
	1727, 3286, 1565, 2798, 1563, 4083, 3300, 1274, 1273, 1283,
	1284, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1275, 1260,
	1261, 1262, 1259, 4040, 206, 2876, 2281, 3957, 1187, 1330,
	2250, 3934, 2707, 3868, 3865, 3852, 3847, 3748, 1768, 3747,
	3366, 3729, 1772, 1773, 1774, 1775, 1260, 1261, 1262, 1259,
	679, 3308, 1813, 142, 3711, 2114, 3707, 3133, 3134, 3685,
	1823, 3949, 2720, 3135, 3136, 3137, 3138, 3669, 3139, 3140,
	3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3314,
	3328, 3329, 3313, 3570, 3322, 3319, 3567, 673, 3326, 1260,
	1261, 1262, 1259, 4076, 3538, 3537, 3316, 202, 3534, 2914,
	2915, 3339, 2710, 3340, 3533, 3499, 3283, 2706, 1260, 1261,
	1262, 1259, 3496, 1876, 2930, 2931, 3494, 3459, 3118, 1612,
	3347, 1623, 3350, 3351, 3352, 1286, 1614, 1290, 1628, 1260,
	1261, 1262, 1259, 1631, 1260, 1261, 1262, 1259, 3356, 2967,
	1620, 1447, 2999, 1287, 1289, 1285, 2961, 1288, 1274, 1273,
	1283, 1284, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1275,
	2137, 3420, 2885, 2835, 3422, 2834, 3379, 2827, 3424, 3837,
	2792, 3947, 2682, 3430, 3254, 2560, 2742, 2633, 3381, 3256,
	3257, 3382, 2542, 2483, 1067, 3385, 2687, 1766, 3401, 142,
	3388, 3386, 3683, 2376, 2347, 1950, 2346, 2319, 3431, 1260,
	1261, 1262, 1259, 1753, 142, 3391, 142, 202, 673, 2051,
	3425, 2125, 3427, 1882, 1260, 1261, 1262, 1259, 1696, 1646,
	3464, 1969, 3258, 1274, 1273, 1283, 1284, 1276, 1277, 1278,
	1279, 1280, 1281, 1282, 1275, 1621, 3437, 2524, 2071, 3484,
	1390, 1375, 1371, 3440, 1370, 1369, 1274, 1273, 1283, 1284,
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 1275, 3417, 1368,
	1367, 3413, 3502, 1366, 3419, 1187, 3435, 1365, 1364, 1363,
	1362, 1361, 1360, 1359, 3277, 3434, 1069, 1358, 1187, 1357,
	1876, 1356, 1355, 1069, 1354, 1876, 1876, 1353, 1352, 1351,
	1187, 1350, 3549, 1349, 1348, 1347, 1553, 1346, 1343, 1342,
	3220, 3681, 1341, 1339, 3486, 1338, 1337, 3452, 1334, 3330,
	1327, 2114, 1326, 1324, 1323, 3454, 673, 1322, 2051, 1321,
	1320, 1319, 1187, 1318, 1317, 1316, 1315, 3551, 1314, 1313,
	3532, 3346, 1308, 3483, 1551, 2144, 1307, 1306, 2147, 1305,
	1304, 2150, 3482, 1224, 2152, 3525, 1170, 3489, 3335, 3336,
	3945, 3535, 2383, 2361, 223, 1274, 1273, 1283, 1284, 1276,
	1277, 1278, 1279, 1280, 1281, 1282, 1275, 1187, 3563, 3560,
	1212, 4074, 3544, 4024, 3338, 3539, 2813, 3541, 2553, 2167,
	1223, 3007, 3002, 3574, 3548, 2997, 3000, 3003, 3345, 3572,
	3344, 3001, 3555, 3553, 3341, 3006, 2996, 3573, 3557, 2995,
	2195, 3976, 3558, 3562, 3884, 3564, 125, 3565, 3004, 3617,
	2514, 2515, 3503, 3690, 67, 3561, 2647, 2636, 1441, 2114,
	3625, 3082, 66, 1940, 1941, 3542, 3273, 3595, 3274, 2451,
	1187, 1935, 1936, 1937, 3383, 3384, 3545, 2897, 3357, 2039,
	1606, 2631, 2652, 2653, 3581, 2671, 1660, 3571, 1640, 2341,
	1187, 1553, 1553, 3591, 2127, 3592, 1218, 3232, 3622, 3196,
	3624, 3189, 2863, 2836, 2403, 2371, 1944, 1911, 4087, 2988,
	3663, 1818, 1817, 3663, 3849, 675, 1386, 1387, 1384, 1385,
	1382, 1383, 3652, 676, 3305, 1187, 3679, 1187, 2496, 1551,
	1764, 677, 3651, 3657, 3658, 2489, 3682, 2052, 3684, 1380,
	1381, 1508, 1507, 1251, 1553, 2244, 2185, 3576, 3634, 2249,
	3633, 3635, 3653, 3349, 2988, 3630, 3660, 2258, 3644, 3030,
	2342, 2197, 673, 1460, 1187, 1187, 1459, 1432, 1187, 1187,
	1483, 4047, 3668, 4045, 3656, 4002, 3667, 3486, 3973, 3972,
	3970, 3911, 1764, 2181, 3869, 3743, 3742, 3680, 3731, 3611,
	3678, 3587, 3402, 3375, 2265, 3726, 1069, 3691, 1946, 3688,
	3532, 3740, 2272, 3374, 3695, 3360, 3715, 3716, 2436, 2406,
	3727, 3728, 3485, 3749, 3750, 3525, 1662, 2876, 3359, 3040,
	1457, 3488, 4078, 4077, 2289, 3421, 1553, 3085, 2767, 2294,
	2295, 2296, 2263, 1394, 2299, 2300, 2301, 2302, 2303, 2304,
	2305, 2306, 2307, 2308, 3737, 1209, 3493, 3736, 3495, 3780,
	1802, 4077, 4078, 3738, 3709, 3355, 1184, 3761, 210, 3,
	3773, 1475, 75, 2, 1551, 3714, 913, 914, 915, 916,
	4100, 1184, 1717, 4101, 1717, 1, 3784, 3127, 3786, 2748,
	3756, 1880, 1388, 917, 3760, 912, 3806, 1529, 2534, 2105,
	3768, 3772, 1557, 1884, 919, 3013, 3813, 3014, 3789, 3348,
	3818, 3016, 2770, 3811, 2216, 2977, 2487, 2351, 142, 142,
	142, 1067, 3214, 1442, 974, 1824, 1187, 1677, 1201, 1674,
	1200, 1198, 1769, 800, 2170, 2962, 2936, 3835, 3739, 3800,
	3841, 1274, 1273, 1283, 1284, 1276, 1277, 1278, 1279, 1280,
	1281, 1282, 1275, 3812, 4086, 4121, 3595, 3814, 3809, 4039,
	3815, 4089, 1694, 784, 3827, 3831, 3964, 3874, 4043, 3876,
	1187, 3759, 2221, 1256, 3061, 1553, 1001, 841, 811, 1325,
	1653, 3131, 3129, 810, 3603, 3449, 3604, 2803, 3744, 3033,
	2243, 3820, 1002, 2153, 1292, 3848, 3871, 3757, 1069, 1607,
	1611, 2402, 3828, 3930, 3689, 3269, 3859, 2871, 1635, 3925,
	3497, 3607, 3857, 1551, 1274, 1273, 1283, 1284, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, 1275, 3605, 3606, 716, 2084,
	647, 3903, 3890, 1051, 1798, 3730, 2166, 717, 2382, 3990,
	3870, 1795, 3851, 954, 3432, 1797, 1794, 1796, 1800, 1801,
	3898, 2360, 3899, 1799, 955, 3676, 3677, 947, 2822, 2821,
	1734, 3912, 1265, 1751, 3150, 3151, 1876, 1302, 1876, 755,
	3900, 2246, 2800, 1717, 3520, 3026, 74, 73, 72, 71,
	231, 802, 230, 3781, 3906, 3648, 3960, 1876, 1876, 4091,
	3929, 781, 3687, 1187, 780, 3914, 779, 778, 777, 776,
	2507, 1553, 3693, 2508, 3954, 2506, 2504, 2503, 2066, 3961,
	3944, 3946, 3948, 3950, 2065, 3039, 3358, 3928, 3923, 2132,
	2134, 1591, 3230, 3937, 3962, 2900, 3460, 3461, 3462, 2895,
	1991, 1989, 3953, 3467, 3468, 3943, 3732, 1520, 2431, 1551,
	2438, 1988, 4021, 1379, 3866, 3867, 3392, 3598, 3940, 3941,
	3969, 3706, 3967, 2946, 1553, 3594, 1934, 3818, 2427, 2008,
	3981, 2917, 2005, 2004, 2908, 1802, 3985, 3702, 3696, 3982,
	2641, 2036, 2644, 4012, 3816, 3662, 3504, 3505, 3511, 4020,
	2370, 1120, 4003, 1116, 4005, 4004, 1118, 1119, 1117, 2692,
	3324, 2408, 1551, 4006, 4007, 3191, 2786, 1805, 1806, 1807,
	1808, 1809, 1810, 1803, 1804, 2785, 4036, 2783, 2782, 1417,
	3902, 3986, 3629, 2558, 4029, 2556, 4030, 1167, 4031, 3337,
	4032, 3333, 4033, 2178, 3342, 4046, 2998, 4048, 4049, 4044,
	2193, 3081, 4042, 2067, 2063, 2062, 2684, 1091, 1090, 2690,
	3890, 1588, 2979, 1187, 4052, 2497, 3791, 1939, 948, 4053,
	2708, 2709, 2358, 109, 41, 122, 108, 185, 2711, 2712,
	59, 184, 58, 3841, 4066, 120, 182, 57, 103, 102,
	119, 180, 4068, 4069, 2717, 4067, 4075, 4072, 4073, 4085,
	56, 4093, 215, 4092, 214, 217, 4079, 4080, 4081, 4082,
	216, 213, 2609, 2610, 212, 1595, 211, 1562, 3974, 3666,
	4105, 679, 4097, 1723, 1876, 3956, 1187, 907, 44, 43,
	186, 42, 110, 60, 40, 39, 38, 4110, 3509, 3929,
	4111, 4113, 34, 13, 12, 35, 4119, 22, 21, 4123,
	1681, 20, 4120, 26, 32, 31, 135, 142, 134, 1798,
	30, 133, 132, 131, 130, 129, 1795, 128, 127, 29,
	1797, 1794, 1796, 1800, 1801, 19, 51, 4131, 1799, 3521,
	50, 49, 48, 47, 46, 9, 4093, 4139, 4092, 4138,
	123, 118, 3512, 116, 28, 117, 114, 115, 4123, 2853,
	2854, 4140, 113, 3507, 4144, 112, 111, 106, 3529, 3530,
	4064, 104, 86, 85, 3508, 84, 99, 98, 97, 96,
	95, 94, 92, 93, 1000, 142, 989, 206, 64, 197,
	168, 83, 142, 82, 81, 80, 79, 101, 107, 105,
	2502, 90, 100, 91, 89, 142, 198, 88, 142, 142,
	87, 3513, 78, 189, 77, 76, 166, 199, 165, 164,
	163, 142, 162, 160, 161, 159, 158, 3733, 157, 156,
	155, 3734, 154, 1717, 52, 53, 140, 2509, 2513, 2514,
	2515, 2510, 2518, 2511, 2516, 54, 55, 2512, 176, 2517,
	175, 126, 177, 179, 181, 178, 183, 173, 985, 986,
	202, 171, 174, 172, 170, 69, 11, 121, 18, 1029,
	4, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1793, 1805, 1806, 1807, 1808, 1809, 1810, 1803, 1804,
	0, 2509, 2513, 2514, 2515, 2510, 2518, 2511, 2516, 0,
	1876, 2512, 0, 2517, 0, 0, 0, 0, 0, 3528,
	0, 2417, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3517, 148, 149, 0,
	150, 151, 0, 0, 0, 152, 0, 0, 153, 0,
	0, 0, 0, 1031, 0, 0, 1030, 0, 3514, 3518,
	3516, 3515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3046, 0, 3048, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1015, 0, 0, 0, 3523,
	3524, 1876, 0, 0, 990, 0, 1876, 0, 0, 0,
	0, 167, 195, 204, 196, 124, 3860, 0, 2195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 992, 0, 0, 194, 188, 187, 0, 0, 0,
	0, 70, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3531, 3101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3510, 0, 728, 727, 734, 724,
	3522, 0, 0, 0, 0, 0, 0, 0, 0, 731,
	732, 3125, 733, 737, 0, 0, 718, 0, 0, 0,
	0, 0, 0, 3913, 0, 0, 742, 1014, 1012, 3917,
	3918, 0, 190, 191, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1011, 0, 0, 0, 0, 0,
	3938, 0, 0, 0, 0, 2070, 984, 0, 0, 0,
	0, 200, 746, 0, 0, 748, 0, 991, 1024, 0,
	747, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 193, 0, 137, 0,
	0, 1020, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3527, 0, 0, 0, 0, 0, 0, 1021, 1025, 0,
	142, 0, 0, 142, 142, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 1008, 0, 1006,
	1010, 1028, 0, 0, 0, 1007, 1004, 1003, 63, 1009,
	994, 995, 993, 996, 997, 998, 999, 0, 1026, 0,
	1027, 0, 0, 3284, 0, 0, 1067, 0, 0, 142,
	2037, 1022, 1023, 0, 0, 1998, 0, 0, 1067, 0,
	0, 0, 4055, 4056, 0, 0, 3526, 0, 0, 4060,
	4061, 4062, 4063, 0, 142, 0, 0, 65, 0, 0,
	719, 721, 720, 0, 0, 0, 2039, 2007, 1018, 0,
	0, 726, 0, 0, 1017, 0, 2040, 2041, 0, 0,
	0, 0, 0, 730, 0, 0, 0, 0, 0, 1013,
	745, 0, 146, 203, 0, 147, 0, 723, 0, 0,
	169, 713, 2006, 0, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2014, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1292, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1016, 0, 0,
	0, 139, 45, 987, 988, 0, 982, 0, 62, 0,
	0, 983, 0, 0, 0, 0, 0, 0, 2030, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 144, 0, 0, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 725, 729, 735, 0, 736,
	738, 0, 0, 739, 740, 741, 0, 0, 743, 744,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3394,
	0, 0, 1997, 1999, 1996, 0, 3396, 1993, 0, 0,
	0, 0, 2018, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2024, 0, 0, 0, 2037, 0, 0,
	0, 2009, 1998, 1992, 0, 0, 0, 0, 3411, 0,
	0, 0, 0, 2012, 2046, 0, 0, 2013, 2015, 2017,
	0, 2019, 2020, 2021, 2025, 2026, 2027, 2029, 2032, 2033,
	2034, 0, 0, 2039, 2007, 0, 0, 0, 2022, 2031,
	2023, 0, 0, 2040, 2041, 0, 0, 0, 0, 0,
	2001, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2006,
	0, 0, 0, 0, 0, 2038, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2014, 0, 0,
	0, 0, 0, 0, 722, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1994, 1995, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2035, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2011, 0, 0, 0, 0, 0, 0, 2010,
	0, 0, 0, 0, 0, 2030, 0, 0, 0, 0,
	2527, 0, 0, 0, 1876, 0, 0, 0, 0, 0,
	0, 0, 0, 2028, 0, 0, 0, 0, 0, 0,
	1876, 0, 2016, 3566, 0, 0, 3568, 0, 0, 0,
	0, 0, 0, 0, 0, 2043, 2042, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3575, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2070, 0, 1997,
	2866, 1996, 0, 0, 2865, 142, 0, 0, 0, 2018,
	0, 0, 0, 0, 0, 0, 0, 0, 2003, 0,
	2024, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2012, 2046, 0, 0, 2013, 2015, 2017, 0, 2019, 2020,
	2021, 2025, 2026, 2027, 2029, 2032, 2033, 2034, 0, 0,
	2045, 0, 0, 2044, 0, 2022, 2031, 2023, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2001, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2038, 0, 0, 0, 0, 1139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1994, 1995, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2035, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2011,
	0, 0, 0, 0, 0, 0, 2010, 0, 0, 0,
	1139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2028, 0, 0, 0, 0, 0, 0, 0, 0, 2016,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2043, 2042, 0, 0, 0, 0, 142, 0,
	0, 1124, 0, 1260, 1261, 1262, 1259, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1147, 1151, 1153, 1155, 1157, 1158, 1160, 1139,
	1165, 1161, 1162, 1163, 1164, 0, 1142, 1143, 1144, 1145,
	1122, 1123, 1148, 0, 1125, 2003, 1127, 1128, 1129, 1130,
	1126, 1131, 1132, 1133, 1134, 1135, 1138, 1140, 1136, 1137,
	1146, 0, 0, 0, 0, 0, 0, 0, 1150, 1152,
	1154, 1156, 1159, 0, 1124, 0, 0, 0, 1114, 0,
	0, 0, 0, 1802, 0, 0, 0, 2045, 0, 0,
	2044, 0, 0, 0, 0, 1147, 1151, 1153, 1155, 1157,
	1158, 1160, 0, 1165, 1161, 1162, 1163, 1164, 1141, 1142,
	1143, 1144, 1145, 1122, 1123, 1148, 0, 1125, 0, 1127,
	1128, 1129, 1130, 1126, 1131, 1132, 1133, 1134, 1135, 1138,
	1140, 1136, 1137, 1146, 0, 2070, 2070, 2070, 2070, 2070,
	2070, 1150, 1152, 1154, 1156, 1159, 0, 0, 0, 0,
	0, 0, 2070, 1124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 0, 0,
	0, 0, 0, 0, 1147, 1151, 1153, 1155, 1157, 1158,
	1160, 1141, 1165, 1161, 1162, 1163, 1164, 0, 1142, 1143,
	1144, 1145, 1122, 1123, 1148, 0, 1125, 0, 1127, 1128,
	1129, 1130, 1126, 1131, 1132, 1133, 1134, 1135, 1138, 1140,
	1136, 1137, 1146, 0, 0, 0, 728, 727, 734, 724,
	1150, 1152, 1154, 1156, 1159, 0, 0, 0, 0, 731,
	732, 2037, 733, 737, 0, 3936, 718, 0, 206, 0,
	142, 0, 0, 0, 0, 142, 742, 0, 0, 0,
	0, 0, 0, 0, 0, 2688, 2689, 1798, 0, 0,
	1141, 3661, 0, 0, 1795, 0, 142, 2039, 1797, 1794,
	1796, 1800, 1801, 0, 0, 0, 1799, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 748, 0, 0, 0, 0,
	747, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 728, 727, 734, 724, 0, 0, 0,
	0, 2014, 4017, 0, 0, 0, 731, 732, 0, 733,
	737, 0, 0, 718, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 742, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2037, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2030,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1149,
	0, 0, 4017, 0, 2039, 0, 0, 0, 0, 1783,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
	1805, 1806, 1807, 1808, 1809, 1810, 1803, 1804, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	719, 721, 720, 0, 0, 0, 0, 0, 3840, 0,
	0, 726, 0, 0, 0, 0, 0, 0, 2014, 4017,
	1067, 0, 142, 730, 0, 0, 0, 0, 142, 0,
	745, 0, 1149, 2018, 0, 2070, 0, 723, 0, 0,
	0, 0, 0, 0, 2024, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 2012, 2046, 0, 0, 2013, 2015,
	2017, 0, 2019, 2020, 2021, 2025, 2026, 2027, 2029, 2032,
	2033, 2034, 0, 0, 0, 4142, 2030, 0, 0, 2022,
	2031, 2023, 0, 0, 0, 0, 0, 719, 721, 720,
	0, 0, 0, 0, 0, 0, 0, 0, 726, 0,
	0, 1149, 0, 0, 0, 0, 0, 0, 0, 0,
	730, 0, 0, 0, 0, 0, 2038, 745, 0, 0,
	0, 0, 0, 0, 723, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 725, 729, 735, 0, 736,
	738, 0, 0, 739, 740, 741, 0, 0, 743, 744,
	2018, 0, 0, 0, 0, 0, 2035, 0, 0, 0,
	0, 2024, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2011, 0, 0, 0, 0, 0, 0,
	2010, 2012, 2046, 0, 0, 2013, 2015, 2017, 0, 2019,
	2020, 2021, 2025, 2026, 2027, 2029, 2032, 2033, 2034, 0,
	0, 0, 0, 0, 2028, 0, 2022, 2031, 2023, 0,
	0, 0, 0, 2016, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 725, 729, 735, 0, 736, 738, 0, 0,
	739, 740, 741, 2038, 0, 743, 744, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2035, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 722, 0, 0, 0, 0, 0,
	2011, 0, 0, 0, 0, 0, 0, 2010, 0, 0,
	0, 169, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2028, 0, 0, 0, 0, 0, 0, 0, 0,
	2016, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 818, 0, 0, 0, 0, 0,
	0, 722, 0, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 770, 0, 2070,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 809, 568, 519, 434, 385, 586, 585, 0,
	0, 878, 886, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 0, 0, 0, 0, 762, 0, 0, 799,
	854, 853, 786, 796, 0, 0, 309, 229, 514, 634,
	516, 515, 787, 0, 788, 792, 795, 791, 789, 790,
	0, 869, 0, 0, 0, 0, 0, 0, 754, 766,
	0, 771, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 763, 764, 0, 0, 0,
	0, 819, 0, 765, 0, 142, 814, 793, 797, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	794, 817, 821, 330, 892, 815, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 893, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 812, 0, 631, 0, 470,
	0, 0, 876, 0, 0, 0, 440, 0, 0, 366,
	0, 142, 0, 816, 0, 423, 403, 889, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 661, 662,
	663, 498, 0, 413, 0, 503, 504, 505, 507, 508,
	509, 510, 574, 591, 558, 528, 491, 582, 525, 529,
	530, 357, 594, 1826, 1825, 1827, 482, 367, 368, 0,
	339, 338, 380, 416, 345, 291, 292, 656, 873, 399,
	596, 629, 630, 521, 0, 888, 868, 870, 871, 875,
	879, 880, 881, 882, 883, 885, 887, 891, 655, 0,
	575, 590, 659, 589, 652, 405, 0, 427, 587, 534,
	0, 579, 553, 0, 580, 549, 584, 0, 523, 0,
	435, 463, 475, 492, 495, 524, 609, 610, 611, 296,
	494, 613, 614, 615, 616, 617, 618, 619, 612, 890,
	556, 533, 559, 474, 536, 535, 0, 0, 570, 820,
	571, 572, 389, 390, 391, 392, 877, 597, 314, 493,
	415, 0, 557, 142, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 560, 664, 0, 620, 621, 0, 0,
	487, 488, 344, 351, 506, 353, 313, 404, 346, 472,
	361, 0, 499, 564, 500, 623, 626, 624, 625, 396,
	356, 358, 431, 362, 372, 419, 471, 402, 424, 311,
	462, 433, 377, 550, 577, 899, 872, 898, 900, 901,
	897, 902, 903, 884, 775, 0, 827, 895, 894, 896,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 604, 603, 602, 601, 600, 599, 598, 0,
	0, 547, 448, 323, 285, 319, 320, 327, 653, 650,
	453, 654, 782, 293, 527, 370, 0, 414, 343, 592,
	593, 0, 644, 861, 834, 835, 836, 772, 837, 831,
	832, 773, 833, 862, 825, 858, 859, 801, 828, 838,
	857, 839, 860, 863, 864, 904, 905, 845, 829, 257,
	906, 842, 865, 856, 855, 840, 826, 866, 867, 808,
	803, 843, 844, 830, 849, 850, 851, 774, 822, 823,
	824, 846, 847, 804, 805, 806, 807, 0, 0, 0,
	478, 479, 480, 502, 0, 464, 526, 651, 0, 0,
	0, 0, 0, 0, 0, 576, 588, 622, 0, 632,
	633, 635, 637, 852, 639, 438, 439, 646, 0, 848,
	642, 643, 640, 374, 425, 444, 432, 818, 657, 517,
	518, 658, 628, 0, 767, 0, 401, 0, 0, 532,
	565, 554, 638, 520, 0, 0, 0, 0, 0, 0,
	770, 0, 0, 0, 336, 1877, 0, 369, 569, 551,
	561, 552, 537, 538, 539, 546, 348, 540, 541, 542,
	512, 543, 513, 544, 545, 809, 568, 519, 434, 385,
	586, 585, 0, 0, 878, 886, 0, 0, 0, 0,
	0, 0, 0, 0, 874, 0, 2096, 0, 0, 762,
	0, 0, 799, 854, 853, 786, 796, 0, 0, 309,
	229, 514, 634, 516, 515, 787, 0, 788, 792, 795,
	791, 789, 790, 0, 869, 0, 0, 0, 0, 0,
	0, 754, 766, 0, 771, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 763, 764,
	0, 0, 0, 0, 819, 0, 765, 0, 0, 2097,
	793, 797, 0, 0, 0, 0, 299, 441, 460, 310,
	429, 473, 315, 437, 452, 305, 400, 426, 0, 0,
	301, 458, 436, 382, 359, 360, 300, 0, 420, 334,
	350, 331, 398, 794, 817, 821, 330, 892, 815, 468,
	303, 0, 467, 397, 454, 459, 383, 376, 0, 302,
	456, 381, 375, 363, 340, 893, 364, 365, 354, 409,
	373, 410, 355, 387, 386, 388, 0, 0, 0, 0,
	0, 496, 497, 0, 0, 645, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 627, 812, 0,
	631, 0, 470, 0, 0, 876, 0, 0, 0, 440,
	0, 0, 366, 0, 0, 0, 816, 0, 423, 403,
	889, 0, 0, 421, 371, 455, 411, 461, 442, 469,
	417, 412, 294, 443, 333, 384, 306, 308, 328, 335,
	337, 341, 342, 393, 394, 406, 428, 445, 446, 447,
	332, 316, 422, 317, 352, 318, 295, 324, 322, 325,
	430, 326, 297, 407, 451, 0, 347, 418, 379, 298,
	378, 408, 450, 449, 307, 477, 483, 484, 573, 0,
	489, 661, 662, 663, 498, 0, 413, 0, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	656, 873, 399, 596, 629, 630, 521, 0, 888, 868,
	870, 871, 875, 879, 880, 881, 882, 883, 885, 887,
	891, 655, 0, 575, 590, 659, 589, 652, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 890, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 820, 571, 572, 389, 390, 391, 392, 877,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 664, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 899, 872,
	898, 900, 901, 897, 902, 903, 884, 775, 0, 827,
	895, 894, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 653, 650, 453, 654, 782, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 861, 834, 835, 836,
	772, 837, 831, 832, 773, 833, 862, 825, 858, 859,
	801, 828, 838, 857, 839, 860, 863, 864, 904, 905,
	845, 829, 257, 906, 842, 865, 856, 855, 840, 826,
	866, 867, 808, 803, 843, 844, 830, 849, 850, 851,
	774, 822, 823, 824, 846, 847, 804, 805, 806, 807,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	651, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 852, 639, 438, 439,
	646, 0, 848, 642, 643, 640, 374, 425, 444, 432,
	0, 657, 517, 518, 658, 628, 0, 767, 206, 818,
	0, 0, 0, 0, 0, 0, 0, 0, 401, 0,
	0, 532, 565, 554, 638, 520, 0, 0, 0, 0,
	0, 0, 770, 0, 0, 0, 336, 0, 0, 369,
	569, 551, 561, 552, 537, 538, 539, 546, 348, 540,
	541, 542, 512, 543, 513, 544, 545, 1295, 568, 519,
	434, 385, 586, 585, 0, 0, 878, 886, 0, 0,
	0, 0, 0, 0, 0, 0, 874, 0, 0, 0,
	0, 762, 0, 0, 799, 854, 853, 786, 796, 0,
	0, 309, 229, 514, 634, 516, 515, 787, 0, 788,
	792, 795, 791, 789, 790, 0, 869, 0, 0, 0,
	0, 0, 0, 754, 766, 0, 771, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	763, 764, 0, 0, 0, 0, 819, 0, 765, 0,
	0, 814, 793, 797, 0, 0, 0, 0, 299, 441,
	460, 310, 429, 473, 315, 437, 452, 305, 400, 426,
	0, 0, 301, 458, 436, 382, 359, 360, 300, 0,
	420, 334, 350, 331, 398, 794, 817, 821, 330, 892,
	815, 468, 303, 0, 467, 397, 454, 459, 383, 376,
	0, 302, 456, 381, 375, 363, 340, 893, 364, 365,
	354, 409, 373, 410, 355, 387, 386, 388, 0, 0,
	0, 0, 0, 496, 497, 0, 0, 645, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 627,
	812, 0, 631, 0, 470, 0, 0, 876, 0, 0,
	0, 440, 0, 0, 366, 0, 0, 0, 816, 0,
	423, 403, 889, 0, 0, 421, 371, 455, 411, 461,
	442, 469, 417, 412, 294, 443, 333, 384, 306, 308,
	328, 335, 337, 341, 342, 393, 394, 406, 428, 445,
	446, 447, 332, 316, 422, 317, 352, 318, 295, 324,
	322, 325, 430, 326, 297, 407, 451, 0, 347, 418,
	379, 298, 378, 408, 450, 449, 307, 477, 483, 484,
	573, 0, 489, 661, 662, 663, 498, 0, 413, 0,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 656, 873, 399, 596, 629, 630, 521, 0,
	888, 868, 870, 871, 875, 879, 880, 881, 882, 883,
	885, 887, 891, 655, 0, 575, 590, 659, 589, 652,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 890, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 820, 571, 572, 389, 390, 391,
	392, 877, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 664,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	899, 872, 898, 900, 901, 897, 902, 903, 884, 775,
	0, 827, 895, 894, 896, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 653, 650, 453, 654, 782, 293, 527,
	370, 169, 414, 343, 592, 593, 0, 644, 861, 834,
	835, 836, 772, 837, 831, 832, 773, 833, 862, 825,
	858, 859, 801, 828, 838, 857, 839, 860, 863, 864,
	904, 905, 845, 829, 257, 906, 842, 865, 856, 855,
	840, 826, 866, 867, 808, 803, 843, 844, 830, 849,
	850, 851, 774, 822, 823, 824, 846, 847, 804, 805,
	806, 807, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 651, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 852, 639,
	438, 439, 646, 0, 848, 642, 643, 640, 374, 425,
	444, 432, 818, 657, 517, 518, 658, 628, 0, 767,
	0, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 770, 0, 0, 0, 336,
	4141, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	809, 568, 519, 434, 385, 586, 585, 0, 0, 878,
	886, 0, 0, 0, 0, 0, 0, 0, 0, 874,
	0, 0, 0, 0, 762, 0, 0, 799, 854, 853,
	786, 796, 0, 0, 309, 229, 514, 634, 516, 515,
	787, 0, 788, 792, 795, 791, 789, 790, 0, 869,
	0, 0, 0, 0, 0, 0, 754, 766, 0, 771,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 763, 764, 0, 0, 0, 0, 819,
	0, 765, 0, 0, 814, 793, 797, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 794, 817,
	821, 330, 892, 815, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	893, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 812, 0, 631, 0, 470, 0, 0,
	876, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 816, 0, 423, 403, 889, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 661, 662, 663, 498,
	0, 413, 0, 503, 504, 505, 507, 508, 509, 510,
	574, 591, 558, 528, 491, 582, 525, 529, 530, 357,
	594, 0, 0, 0, 482, 367, 368, 0, 339, 338,
	380, 416, 345, 291, 292, 656, 873, 399, 596, 629,
	630, 521, 0, 888, 868, 870, 871, 875, 879, 880,
	881, 882, 883, 885, 887, 891, 655, 0, 575, 590,
	659, 589, 652, 405, 0, 427, 587, 534, 0, 579,
	553, 0, 580, 549, 584, 0, 523, 0, 435, 463,
	475, 492, 495, 524, 609, 610, 611, 296, 494, 613,
	614, 615, 616, 617, 618, 619, 612, 890, 556, 533,
	559, 474, 536, 535, 0, 0, 570, 820, 571, 572,
	389, 390, 391, 392, 877, 597, 314, 493, 415, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	563, 560, 664, 0, 620, 621, 0, 0, 487, 488,
	344, 351, 506, 353, 313, 404, 346, 472, 361, 0,
	499, 564, 500, 623, 626, 624, 625, 396, 356, 358,
	431, 362, 372, 419, 471, 402, 424, 311, 462, 433,
	377, 550, 577, 899, 872, 898, 900, 901, 897, 902,
	903, 884, 775, 0, 827, 895, 894, 896, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	604, 603, 602, 601, 600, 599, 598, 0, 0, 547,
	448, 323, 285, 319, 320, 327, 653, 650, 453, 654,
	782, 293, 527, 370, 0, 414, 343, 592, 593, 0,
	644, 861, 834, 835, 836, 772, 837, 831, 832, 773,
	833, 862, 825, 858, 859, 801, 828, 838, 857, 839,
	860, 863, 864, 904, 905, 845, 829, 257, 906, 842,
	865, 856, 855, 840, 826, 866, 867, 808, 803, 843,
	844, 830, 849, 850, 851, 774, 822, 823, 824, 846,
	847, 804, 805, 806, 807, 0, 0, 0, 478, 479,
	480, 502, 0, 464, 526, 651, 0, 0, 0, 0,
	0, 0, 0, 576, 588, 622, 0, 632, 633, 635,
	637, 852, 639, 438, 439, 646, 0, 848, 642, 643,
	640, 374, 425, 444, 432, 818, 657, 517, 518, 658,
	628, 0, 767, 0, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 770, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 809, 568, 519, 434, 385, 586, 585,
	0, 0, 878, 886, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 0, 0, 0, 0, 762, 0, 0,
	799, 854, 853, 786, 796, 0, 0, 309, 229, 514,
	634, 516, 515, 787, 0, 788, 792, 795, 791, 789,
	790, 0, 869, 0, 0, 0, 0, 0, 0, 754,
	766, 0, 771, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 763, 764, 0, 0,
	0, 0, 819, 0, 765, 0, 0, 814, 793, 797,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 794, 817, 821, 330, 892, 815, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 893, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 812, 0, 631, 0,
	470, 0, 0, 876, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 816, 0, 423, 403, 889, 4018,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 873,
	399, 596, 629, 630, 521, 0, 888, 868, 870, 871,
	875, 879, 880, 881, 882, 883, 885, 887, 891, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	890, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	820, 571, 572, 389, 390, 391, 392, 877, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 899, 872, 898, 900,
	901, 897, 902, 903, 884, 775, 0, 827, 895, 894,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 782, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 861, 834, 835, 836, 772, 837,
	831, 832, 773, 833, 862, 825, 858, 859, 801, 828,
	838, 857, 839, 860, 863, 864, 904, 905, 845, 829,
	257, 906, 842, 865, 856, 855, 840, 826, 866, 867,
	808, 803, 843, 844, 830, 849, 850, 851, 774, 822,
	823, 824, 846, 847, 804, 805, 806, 807, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 852, 639, 438, 439, 646, 0,
	848, 642, 643, 640, 374, 425, 444, 432, 818, 657,
	517, 518, 658, 628, 0, 767, 0, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 770, 0, 0, 0, 336, 1877, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 809, 568, 519, 434,
	385, 586, 585, 0, 0, 878, 886, 0, 0, 0,
	0, 0, 0, 0, 0, 874, 0, 0, 0, 0,
	762, 0, 0, 799, 854, 853, 786, 796, 0, 0,
	309, 229, 514, 634, 516, 515, 787, 0, 788, 792,
	795, 791, 789, 790, 0, 869, 0, 0, 0, 0,
	0, 0, 754, 766, 0, 771, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 763,
	764, 0, 0, 0, 0, 819, 0, 765, 0, 0,
	814, 793, 797, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 794, 817, 821, 330, 892, 815,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 893, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 812,
	0, 631, 0, 470, 0, 0, 876, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 816, 0, 423,
	403, 889, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 873, 399, 596, 629, 630, 521, 0, 888,
	868, 870, 871, 875, 879, 880, 881, 882, 883, 885,
	887, 891, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 890, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 820, 571, 572, 389, 390, 391, 392,
	877, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 899,
	872, 898, 900, 901, 897, 902, 903, 884, 775, 0,
	827, 895, 894, 896, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 782, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 861, 834, 835,
	836, 772, 837, 831, 832, 773, 833, 862, 825, 858,
	859, 801, 828, 838, 857, 839, 860, 863, 864, 904,
	905, 845, 829, 257, 906, 842, 865, 856, 855, 840,
	826, 866, 867, 808, 803, 843, 844, 830, 849, 850,
	851, 774, 822, 823, 824, 846, 847, 804, 805, 806,
	807, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 852, 639, 438,
	439, 646, 0, 848, 642, 643, 640, 374, 425, 444,
	432, 818, 657, 517, 518, 658, 628, 0, 767, 0,
	401, 0, 0, 532, 565, 554, 638, 520, 0, 0,
	0, 0, 0, 0, 770, 0, 0, 0, 336, 0,
	0, 369, 569, 551, 561, 552, 537, 538, 539, 546,
	348, 540, 541, 542, 512, 543, 513, 544, 545, 809,
	568, 519, 434, 385, 586, 585, 0, 0, 878, 886,
	0, 0, 0, 0, 0, 0, 0, 0, 874, 0,
	0, 0, 0, 762, 0, 0, 799, 854, 853, 786,
	796, 0, 0, 309, 229, 514, 634, 516, 515, 787,
	0, 788, 792, 795, 791, 789, 790, 0, 869, 0,
	0, 0, 0, 0, 0, 754, 766, 0, 771, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 763, 764, 1590, 0, 0, 0, 819, 0,
	765, 0, 0, 814, 793, 797, 0, 0, 0, 0,
	299, 441, 460, 310, 429, 473, 315, 437, 452, 305,
	400, 426, 0, 0, 301, 458, 436, 382, 359, 360,
	300, 0, 420, 334, 350, 331, 398, 794, 817, 821,
	330, 892, 815, 468, 303, 0, 467, 397, 454, 459,
	383, 376, 0, 302, 456, 381, 375, 363, 340, 893,
	364, 365, 354, 409, 373, 410, 355, 387, 386, 388,
	0, 0, 0, 0, 0, 496, 497, 0, 0, 645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 812, 0, 631, 0, 470, 0, 0, 876,
	0, 0, 0, 440, 0, 0, 366, 0, 0, 0,
	816, 0, 423, 403, 889, 0, 0, 421, 371, 455,
	411, 461, 442, 469, 417, 412, 294, 443, 333, 384,
	306, 308, 328, 335, 337, 341, 342, 393, 394, 406,
	428, 445, 446, 447, 332, 316, 422, 317, 352, 318,
	295, 324, 322, 325, 430, 326, 297, 407, 451, 0,
	347, 418, 379, 298, 378, 408, 450, 449, 307, 477,
	483, 484, 573, 0, 489, 661, 662, 663, 498, 0,
	413, 0, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 656, 873, 399, 596, 629, 630,
	521, 0, 888, 868, 870, 871, 875, 879, 880, 881,
	882, 883, 885, 887, 891, 655, 0, 575, 590, 659,
	589, 652, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 890, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 820, 571, 572, 389,
	390, 391, 392, 877, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 664, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 899, 872, 898, 900, 901, 897, 902, 903,
	884, 775, 0, 827, 895, 894, 896, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 653, 650, 453, 654, 782,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	861, 834, 835, 836, 772, 837, 831, 832, 773, 833,
	862, 825, 858, 859, 801, 828, 838, 857, 839, 860,
	863, 864, 904, 905, 845, 829, 257, 906, 842, 865,
	856, 855, 840, 826, 866, 867, 808, 803, 843, 844,
	830, 849, 850, 851, 774, 822, 823, 824, 846, 847,
	804, 805, 806, 807, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 651, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	852, 639, 438, 439, 646, 0, 848, 642, 643, 640,
	374, 425, 444, 432, 0, 657, 517, 518, 658, 628,
	818, 767, 0, 2271, 0, 0, 0, 0, 0, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 770, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 809, 568,
	519, 434, 385, 586, 585, 0, 0, 878, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 0, 0,
	0, 0, 762, 0, 0, 799, 854, 853, 786, 796,
	0, 0, 309, 229, 514, 634, 516, 515, 787, 0,
	788, 792, 795, 791, 789, 790, 0, 869, 0, 0,
	0, 0, 0, 0, 754, 766, 0, 771, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 763, 764, 0, 0, 0, 0, 819, 0, 765,
	0, 0, 814, 793, 797, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 794, 817, 821, 330,
	892, 815, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 893, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 812, 0, 631, 0, 470, 0, 0, 876, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 816,
	0, 423, 403, 889, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 661, 662, 663, 498, 0, 413,
	0, 503, 504, 505, 507, 508, 509, 510, 574, 591,
	558, 528, 491, 582, 525, 529, 530, 357, 594, 0,
	0, 0, 482, 367, 368, 0, 339, 338, 380, 416,
	345, 291, 292, 656, 873, 399, 596, 629, 630, 521,
	0, 888, 868, 870, 871, 875, 879, 880, 881, 882,
	883, 885, 887, 891, 655, 0, 575, 590, 659, 589,
	652, 405, 0, 427, 587, 534, 0, 579, 553, 0,
	580, 549, 584, 0, 523, 0, 435, 463, 475, 492,
	495, 524, 609, 610, 611, 296, 494, 613, 614, 615,
	616, 617, 618, 619, 612, 890, 556, 533, 559, 474,
	536, 535, 0, 0, 570, 820, 571, 572, 389, 390,
	391, 392, 877, 597, 314, 493, 415, 0, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 563, 560,
	664, 0, 620, 621, 0, 0, 487, 488, 344, 351,
	506, 353, 313, 404, 346, 472, 361, 0, 499, 564,
	500, 623, 626, 624, 625, 396, 356, 358, 431, 362,
	372, 419, 471, 402, 424, 311, 462, 433, 377, 550,
	577, 899, 872, 898, 900, 901, 897, 902, 903, 884,
	775, 0, 827, 895, 894, 896, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 604, 603,
	602, 601, 600, 599, 598, 0, 0, 547, 448, 323,
	285, 319, 320, 327, 653, 650, 453, 654, 782, 293,
	527, 370, 0, 414, 343, 592, 593, 0, 644, 861,
	834, 835, 836, 772, 837, 831, 832, 773, 833, 862,
	825, 858, 859, 801, 828, 838, 857, 839, 860, 863,
	864, 904, 905, 845, 829, 257, 906, 842, 865, 856,
	855, 840, 826, 866, 867, 808, 803, 843, 844, 830,
	849, 850, 851, 774, 822, 823, 824, 846, 847, 804,
	805, 806, 807, 0, 0, 0, 478, 479, 480, 502,
	0, 464, 526, 651, 0, 0, 0, 0, 0, 0,
	0, 576, 588, 622, 0, 632, 633, 635, 637, 852,
	639, 438, 439, 646, 0, 848, 642, 643, 640, 374,
	425, 444, 432, 818, 657, 517, 518, 658, 628, 0,
	767, 0, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 0, 0, 0, 0, 0, 770, 0, 0, 0,
	336, 0, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 809, 568, 519, 434, 385, 586, 585, 0, 0,
	878, 886, 0, 0, 0, 0, 0, 0, 0, 0,
	874, 0, 0, 0, 0, 762, 0, 0, 799, 854,
	853, 786, 796, 0, 0, 309, 229, 514, 634, 516,
	515, 787, 0, 788, 792, 795, 791, 789, 790, 0,
	869, 0, 0, 0, 0, 0, 0, 754, 766, 0,
	771, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 763, 764, 1870, 0, 0, 0,
	819, 0, 765, 0, 0, 814, 793, 797, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 301, 458, 436, 382,
	359, 360, 300, 0, 420, 334, 350, 331, 398, 794,
	817, 821, 330, 892, 815, 468, 303, 0, 467, 397,
	454, 459, 383, 376, 0, 302, 456, 381, 375, 363,
	340, 893, 364, 365, 354, 409, 373, 410, 355, 387,
	386, 388, 0, 0, 0, 0, 0, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 812, 0, 631, 0, 470, 0,
	0, 876, 0, 0, 0, 440, 0, 0, 366, 0,
	0, 0, 816, 0, 423, 403, 889, 0, 0, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 0, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 661, 662, 663,
	498, 0, 413, 0, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 656, 873, 399, 596,
	629, 630, 521, 0, 888, 868, 870, 871, 875, 879,
	880, 881, 882, 883, 885, 887, 891, 655, 0, 575,
	590, 659, 589, 652, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 890, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 820, 571,
	572, 389, 390, 391, 392, 877, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 664, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 899, 872, 898, 900, 901, 897,
	902, 903, 884, 775, 0, 827, 895, 894, 896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 653, 650, 453,
	654, 782, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 861, 834, 835, 836, 772, 837, 831, 832,
	773, 833, 862, 825, 858, 859, 801, 828, 838, 857,
	839, 860, 863, 864, 904, 905, 845, 829, 257, 906,
	842, 865, 856, 855, 840, 826, 866, 867, 808, 803,
	843, 844, 830, 849, 850, 851, 774, 822, 823, 824,
	846, 847, 804, 805, 806, 807, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 651, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 852, 639, 438, 439, 646, 0, 848, 642,
	643, 640, 374, 425, 444, 432, 818, 657, 517, 518,
	658, 628, 0, 767, 0, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 770,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 809, 568, 519, 434, 385, 586,
	585, 0, 0, 878, 886, 0, 0, 0, 0, 0,
	0, 0, 0, 874, 0, 0, 0, 0, 762, 0,
	0, 799, 854, 853, 786, 796, 0, 0, 309, 229,
	514, 634, 516, 515, 787, 0, 788, 792, 795, 791,
	789, 790, 0, 869, 0, 0, 0, 0, 0, 0,
	754, 766, 0, 771, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 763, 764, 0,
	0, 0, 0, 819, 0, 765, 0, 0, 814, 793,
	797, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 794, 817, 821, 330, 892, 815, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 893, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 812, 0, 631,
	0, 470, 0, 0, 876, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 816, 0, 423, 403, 889,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	661, 662, 663, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 656,
	873, 399, 596, 629, 630, 521, 0, 888, 868, 870,
	871, 875, 879, 880, 881, 882, 883, 885, 887, 891,
	655, 0, 575, 590, 659, 589, 652, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 890, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 820, 571, 572, 389, 390, 391, 392, 877, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 664, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 899, 872, 898,
	900, 901, 897, 902, 903, 884, 775, 0, 827, 895,
	894, 896, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	653, 650, 453, 654, 782, 293, 527, 370, 0, 414,
	343, 592, 593, 0, 644, 861, 834, 835, 836, 772,
	837, 831, 832, 773, 833, 862, 825, 858, 859, 801,
	828, 838, 857, 839, 860, 863, 864, 904, 905, 845,
	829, 257, 906, 842, 865, 856, 855, 840, 826, 866,
	867, 808, 803, 843, 844, 830, 849, 850, 851, 774,
	822, 823, 824, 846, 847, 804, 805, 806, 807, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 651,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 852, 639, 438, 439, 646,
	0, 848, 642, 643, 640, 374, 425, 444, 432, 818,
	657, 517, 518, 658, 628, 0, 767, 0, 401, 0,
	0, 532, 565, 554, 638, 520, 0, 0, 0, 0,
	0, 0, 770, 0, 0, 0, 336, 0, 0, 369,
	569, 551, 561, 552, 537, 538, 539, 546, 348, 540,
	541, 542, 512, 543, 513, 544, 545, 809, 568, 519,
	434, 385, 586, 585, 0, 0, 878, 886, 0, 0,
	0, 0, 0, 0, 0, 0, 874, 0, 0, 0,
	0, 762, 0, 0, 799, 854, 853, 786, 796, 0,
	0, 309, 229, 514, 634, 516, 515, 787, 0, 788,
	792, 795, 791, 789, 790, 0, 869, 0, 0, 0,
	0, 0, 0, 754, 766, 0, 771, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	763, 764, 0, 0, 0, 0, 819, 0, 765, 0,
	0, 814, 793, 797, 0, 0, 0, 0, 299, 441,
	460, 310, 429, 473, 315, 437, 452, 305, 400, 426,
	0, 0, 301, 458, 436, 382, 359, 360, 300, 0,
	420, 334, 350, 331, 398, 794, 817, 821, 330, 892,
	815, 468, 303, 0, 467, 397, 454, 459, 383, 376,
	0, 302, 456, 381, 375, 363, 340, 893, 364, 365,
	354, 409, 373, 410, 355, 387, 386, 388, 0, 0,
	0, 0, 0, 496, 497, 0, 0, 645, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 627,
	812, 0, 631, 0, 470, 0, 0, 876, 0, 0,
	0, 440, 0, 0, 366, 0, 0, 0, 816, 0,
	423, 403, 889, 0, 0, 421, 371, 455, 411, 461,
	442, 469, 417, 412, 294, 443, 333, 384, 306, 308,
	328, 335, 337, 341, 342, 393, 394, 406, 428, 445,
	446, 447, 332, 316, 422, 317, 352, 318, 295, 324,
	322, 325, 430, 326, 297, 407, 451, 0, 347, 418,
	379, 298, 378, 408, 450, 449, 307, 477, 483, 484,
	573, 0, 489, 661, 662, 663, 498, 0, 413, 0,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 656, 873, 399, 596, 629, 630, 521, 0,
	888, 868, 870, 871, 875, 879, 880, 881, 882, 883,
	885, 887, 891, 655, 0, 575, 590, 659, 589, 652,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 890, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 820, 571, 572, 389, 390, 391,
	392, 877, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 664,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	899, 872, 898, 900, 901, 897, 902, 903, 884, 775,
	0, 827, 895, 894, 896, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 653, 650, 453, 654, 782, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 861, 834,
	835, 836, 772, 837, 831, 832, 773, 833, 862, 825,
	858, 859, 801, 828, 838, 857, 839, 860, 863, 864,
	904, 905, 845, 829, 257, 906, 842, 865, 856, 855,
	840, 826, 866, 867, 808, 803, 843, 844, 830, 849,
	850, 851, 774, 822, 823, 824, 846, 847, 804, 805,
	806, 807, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 651, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 852, 639,
	438, 439, 646, 0, 3577, 642, 3578, 3579, 374, 425,
	444, 432, 818, 657, 517, 518, 658, 628, 0, 767,
	0, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 770, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	809, 568, 519, 434, 385, 586, 585, 0, 0, 878,
	886, 0, 0, 0, 0, 0, 0, 0, 0, 874,
	0, 0, 0, 0, 762, 0, 0, 799, 854, 853,
	786, 796, 0, 0, 309, 229, 514, 634, 516, 515,
	2745, 0, 2746, 792, 795, 791, 789, 790, 0, 869,
	0, 0, 0, 0, 0, 0, 754, 766, 0, 771,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 763, 764, 0, 0, 0, 0, 819,
	0, 765, 0, 0, 814, 793, 797, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 794, 817,
	821, 330, 892, 815, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	893, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 812, 0, 631, 0, 470, 0, 0,
	876, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 816, 0, 423, 403, 889, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 661, 662, 663, 498,
	0, 413, 0, 503, 504, 505, 507, 508, 509, 510,
	574, 591, 558, 528, 491, 582, 525, 529, 530, 357,
	594, 0, 0, 0, 482, 367, 368, 0, 339, 338,
	380, 416, 345, 291, 292, 656, 873, 399, 596, 629,
	630, 521, 0, 888, 868, 870, 871, 875, 879, 880,
	881, 882, 883, 885, 887, 891, 655, 0, 575, 590,
	659, 589, 652, 405, 0, 427, 587, 534, 0, 579,
	553, 0, 580, 549, 584, 0, 523, 0, 435, 463,
	475, 492, 495, 524, 609, 610, 611, 296, 494, 613,
	614, 615, 616, 617, 618, 619, 612, 890, 556, 533,
	559, 474, 536, 535, 0, 0, 570, 820, 571, 572,
	389, 390, 391, 392, 877, 597, 314, 493, 415, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	563, 560, 664, 0, 620, 621, 0, 0, 487, 488,
	344, 351, 506, 353, 313, 404, 346, 472, 361, 0,
	499, 564, 500, 623, 626, 624, 625, 396, 356, 358,
	431, 362, 372, 419, 471, 402, 424, 311, 462, 433,
	377, 550, 577, 899, 872, 898, 900, 901, 897, 902,
	903, 884, 775, 0, 827, 895, 894, 896, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	604, 603, 602, 601, 600, 599, 598, 0, 0, 547,
	448, 323, 285, 319, 320, 327, 653, 650, 453, 654,
	782, 293, 527, 370, 0, 414, 343, 592, 593, 0,
	644, 861, 834, 835, 836, 772, 837, 831, 832, 773,
	833, 862, 825, 858, 859, 801, 828, 838, 857, 839,
	860, 863, 864, 904, 905, 845, 829, 257, 906, 842,
	865, 856, 855, 840, 826, 866, 867, 808, 803, 843,
	844, 830, 849, 850, 851, 774, 822, 823, 824, 846,
	847, 804, 805, 806, 807, 0, 0, 0, 478, 479,
	480, 502, 0, 464, 526, 651, 0, 0, 0, 0,
	0, 0, 0, 576, 588, 622, 0, 632, 633, 635,
	637, 852, 639, 438, 439, 646, 0, 848, 642, 643,
	640, 374, 425, 444, 432, 818, 657, 517, 518, 658,
	628, 0, 767, 0, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 1735, 0, 0, 0, 770, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 809, 568, 519, 434, 385, 586, 585,
	0, 0, 878, 886, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 0, 0, 0, 0, 762, 0, 0,
	799, 854, 853, 786, 796, 0, 0, 309, 229, 514,
	634, 516, 515, 787, 0, 788, 792, 795, 791, 789,
	790, 0, 869, 0, 0, 0, 0, 0, 0, 0,
	766, 0, 771, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 763, 764, 0, 0,
	0, 0, 819, 0, 765, 0, 0, 814, 793, 797,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 794, 817, 821, 330, 892, 815, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 893, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 812, 0, 631, 0,
	470, 0, 0, 876, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 816, 0, 423, 403, 889, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 1736, 1737, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 873,
	399, 596, 629, 630, 521, 0, 888, 868, 870, 871,
	875, 879, 880, 881, 882, 883, 885, 887, 891, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	890, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	820, 571, 572, 389, 390, 391, 392, 877, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 899, 872, 898, 900,
	901, 897, 902, 903, 884, 775, 0, 827, 895, 894,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 782, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 861, 834, 835, 836, 772, 837,
	831, 832, 773, 833, 862, 825, 858, 859, 801, 828,
	838, 857, 839, 860, 863, 864, 904, 905, 845, 829,
	257, 906, 842, 865, 856, 855, 840, 826, 866, 867,
	808, 803, 843, 844, 830, 849, 850, 851, 774, 822,
	823, 824, 846, 847, 804, 805, 806, 807, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 852, 639, 438, 439, 646, 0,
	848, 642, 643, 640, 374, 425, 444, 432, 818, 657,
	517, 518, 658, 628, 0, 767, 0, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 770, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 809, 568, 519, 434,
	385, 586, 585, 0, 0, 878, 886, 0, 0, 0,
	0, 0, 0, 0, 0, 874, 0, 0, 0, 0,
	762, 0, 0, 799, 854, 853, 786, 796, 0, 0,
	309, 229, 514, 634, 516, 515, 787, 0, 788, 792,
	795, 791, 789, 790, 0, 869, 0, 0, 0, 0,
	0, 0, 0, 766, 0, 771, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 763,
	764, 0, 0, 0, 0, 819, 0, 765, 0, 0,
	814, 793, 797, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 794, 817, 821, 330, 892, 815,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 893, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 812,
	0, 631, 0, 470, 0, 0, 876, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 816, 0, 423,
	403, 889, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 661, 662, 663, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 656, 873, 399, 596, 629, 630, 521, 0, 888,
	868, 870, 871, 875, 879, 880, 881, 882, 883, 885,
	887, 891, 655, 0, 575, 590, 659, 589, 652, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 890, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 820, 571, 572, 389, 390, 391, 392,
	877, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 664, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 899,
	872, 898, 900, 901, 897, 902, 903, 884, 775, 0,
	827, 895, 894, 896, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 653, 650, 453, 654, 782, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 861, 834, 835,
	836, 772, 837, 831, 832, 773, 833, 862, 825, 858,
	859, 801, 828, 838, 857, 839, 860, 863, 864, 904,
	905, 845, 829, 257, 906, 842, 865, 856, 855, 840,
	826, 866, 867, 808, 803, 843, 844, 830, 849, 850,
	851, 774, 822, 823, 824, 846, 847, 804, 805, 806,
	807, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 651, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 852, 639, 438,
	439, 646, 0, 848, 642, 643, 640, 374, 425, 444,
	432, 818, 657, 517, 518, 658, 628, 0, 767, 0,
	401, 0, 0, 532, 565, 554, 638, 520, 0, 0,
	0, 0, 0, 0, 770, 0, 0, 0, 336, 0,
	0, 369, 569, 551, 561, 552, 537, 538, 539, 546,
	348, 540, 541, 542, 512, 543, 513, 544, 545, 809,
	568, 519, 434, 385, 586, 585, 0, 0, 878, 886,
	0, 0, 0, 0, 0, 0, 0, 0, 874, 0,
	0, 0, 0, 0, 0, 0, 799, 854, 853, 786,
	796, 0, 0, 309, 229, 514, 634, 516, 515, 787,
	0, 788, 792, 795, 791, 789, 790, 0, 869, 0,
	0, 0, 0, 0, 0, 754, 766, 0, 771, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 763, 764, 0, 0, 0, 0, 819, 0,
	765, 0, 0, 814, 793, 797, 0, 0, 0, 0,
	299, 441, 460, 310, 429, 473, 315, 437, 452, 305,
	400, 426, 0, 0, 301, 458, 436, 382, 359, 360,
	300, 0, 420, 334, 350, 331, 398, 794, 817, 821,
	330, 892, 815, 468, 303, 0, 467, 397, 454, 459,
	383, 376, 0, 302, 456, 381, 375, 363, 340, 893,
	364, 365, 354, 409, 373, 410, 355, 387, 386, 388,
	0, 0, 0, 0, 0, 496, 497, 0, 0, 645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 812, 0, 631, 0, 470, 0, 0, 876,
	0, 0, 0, 440, 0, 0, 366, 0, 0, 0,
	816, 0, 423, 403, 889, 0, 0, 421, 371, 455,
	411, 461, 442, 469, 417, 412, 294, 443, 333, 384,
	306, 308, 328, 335, 337, 341, 342, 393, 394, 406,
	428, 445, 446, 447, 332, 316, 422, 317, 352, 318,
	295, 324, 322, 325, 430, 326, 297, 407, 451, 0,
	347, 418, 379, 298, 378, 408, 450, 449, 307, 477,
	483, 484, 573, 0, 489, 661, 662, 663, 498, 0,
	413, 0, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 656, 873, 399, 596, 629, 630,
	521, 0, 888, 868, 870, 871, 875, 879, 880, 881,
	882, 883, 885, 887, 891, 655, 0, 575, 590, 659,
	589, 652, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 890, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 820, 571, 572, 389,
	390, 391, 392, 877, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 664, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 899, 872, 898, 900, 901, 897, 902, 903,
	884, 775, 0, 827, 895, 894, 896, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 653, 650, 453, 654, 782,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	861, 834, 835, 836, 772, 837, 831, 832, 773, 833,
	862, 825, 858, 859, 801, 828, 838, 857, 839, 860,
	863, 864, 904, 905, 845, 829, 257, 906, 842, 865,
	856, 855, 840, 826, 866, 867, 808, 803, 843, 844,
	830, 849, 850, 851, 774, 822, 823, 824, 846, 847,
	804, 805, 806, 807, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 651, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	852, 639, 438, 439, 646, 0, 848, 642, 643, 640,
	374, 425, 444, 432, 0, 657, 517, 518, 658, 628,
	0, 767, 206, 64, 197, 168, 0, 0, 0, 0,
	0, 0, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 198, 0, 0, 0, 0, 0, 0, 189, 0,
	336, 0, 199, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 140, 568, 519, 434, 385, 586, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 514, 634, 516,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 301, 458, 436, 382,
	359, 360, 300, 0, 420, 334, 350, 331, 398, 0,
	457, 485, 330, 476, 0, 468, 303, 0, 467, 397,
	454, 459, 383, 376, 0, 302, 456, 381, 375, 363,
	340, 501, 364, 365, 354, 409, 373, 410, 355, 387,
	386, 388, 0, 0, 0, 0, 0, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 167, 195, 204, 196,
	124, 0, 0, 627, 0, 0, 631, 0, 470, 0,
	0, 221, 0, 0, 0, 440, 0, 0, 366, 194,
	188, 187, 486, 0, 423, 403, 233, 0, 0, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 0, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 606, 607, 608,
	498, 0, 413, 0, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 465, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 224, 578, 581, 511, 234, 0, 575,
	590, 548, 589, 235, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	138, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 232, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 65, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 239, 304, 453,
	240, 0, 293, 527, 370, 169, 414, 343, 592, 593,
	61, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 236, 45, 222, 225,
	227, 226, 0, 62, 576, 588, 622, 5, 632, 633,
	635, 637, 636, 639, 438, 439, 646, 0, 641, 642,
	643, 640, 374, 425, 444, 432, 143, 237, 517, 518,
	238, 628, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 140, 568, 519, 434, 385, 586, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 514, 634, 516,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 2419, 2422, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 301, 458, 436, 382,
	359, 360, 300, 0, 420, 334, 350, 331, 398, 0,
	457, 485, 330, 476, 0, 468, 303, 0, 467, 397,
	454, 459, 383, 376, 0, 302, 456, 381, 375, 363,
	340, 501, 364, 365, 354, 409, 373, 410, 355, 387,
	386, 388, 0, 0, 0, 0, 0, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 0, 0, 631, 2423, 470, 0,
	0, 0, 2418, 0, 2417, 440, 2415, 2420, 366, 0,
	0, 0, 486, 0, 423, 403, 660, 0, 0, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 2421, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 661, 662, 663,
	498, 0, 413, 0, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 656, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 655, 0, 575,
	590, 659, 589, 652, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 664, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 653, 650, 453,
	654, 0, 293, 527, 370, 169, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 651, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 646, 0, 641, 642,
	643, 640, 374, 425, 444, 432, 0, 657, 517, 518,
	658, 628, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 0, 568, 519, 434, 385, 586, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1331, 0, 0, 228, 0,
	0, 786, 796, 0, 0, 309, 229, 514, 634, 516,
	515, 787, 0, 788, 792, 795, 791, 789, 790, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 793, 0, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 301, 458, 436, 382,
	359, 360, 300, 0, 420, 334, 350, 331, 398, 794,
	457, 485, 330, 476, 0, 468, 303, 0, 467, 397,
	454, 459, 383, 376, 0, 302, 456, 381, 375, 363,
	340, 501, 364, 365, 354, 409, 373, 410, 355, 387,
	386, 388, 0, 0, 0, 0, 0, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 0, 0, 631, 0, 470, 0,
	0, 0, 0, 0, 0, 440, 0, 0, 366, 0,
	0, 0, 486, 0, 423, 403, 660, 0, 0, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 0, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 661, 662, 663,
	498, 0, 413, 0, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 656, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 655, 0, 575,
	590, 659, 589, 652, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 664, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 653, 650, 453,
	654, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 651, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 646, 0, 641, 642,
	643, 640, 374, 425, 444, 432, 0, 657, 517, 518,
	658, 628, 206, 64, 197, 168, 0, 0, 0, 0,
	0, 0, 401, 683, 0, 532, 565, 554, 638, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 0, 568, 519, 434, 385, 586, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 690, 0, 0,
	0, 0, 0, 0, 0, 689, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 514, 634, 516,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 301, 458, 436, 382,
	359, 360, 300, 0, 420, 334, 350, 331, 398, 0,
	457, 485, 330, 476, 0, 468, 303, 0, 467, 397,
	454, 459, 383, 376, 0, 302, 456, 381, 375, 363,
	340, 501, 364, 365, 354, 409, 373, 410, 355, 387,
	386, 388, 0, 0, 0, 0, 0, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	687, 688, 0, 627, 0, 0, 631, 0, 470, 0,
	0, 0, 0, 0, 0, 440, 0, 0, 366, 0,
	0, 0, 486, 0, 423, 403, 660, 0, 0, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 0, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 661, 662, 663,
	498, 0, 413, 0, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 656, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 655, 0, 575,
	590, 659, 589, 652, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 684, 686, 314, 493, 415,
	698, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 664, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 65, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 653, 650, 453,
	654, 0, 293, 527, 370, 169, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 651, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 646, 0, 641, 642,
	643, 640, 374, 425, 444, 432, 0, 657, 517, 518,
	658, 628, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 1139, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 0, 568, 519, 434, 385, 586, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 514, 634, 516,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1124, 0, 0, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 2582, 2585, 2586, 2587,
	2588, 2589, 2590, 0, 2595, 2591, 2592, 2593, 2594, 0,
	2577, 2578, 2579, 2580, 1122, 2561, 2583, 0, 2562, 397,
	2563, 2564, 2565, 2566, 1126, 2567, 2568, 2569, 2570, 2571,
	2574, 2575, 2572, 2573, 2581, 409, 373, 410, 355, 387,
	386, 388, 1150, 1152, 1154, 1156, 1159, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 0, 0, 631, 0, 470, 0,
	0, 0, 0, 0, 0, 440, 0, 0, 366, 0,
	0, 0, 2576, 0, 423, 403, 660, 0, 0, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 0, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 661, 662, 663,
	498, 0, 413, 0, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 656, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 655, 0, 575,
	590, 659, 589, 652, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 664, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 653, 650, 453,
	654, 0, 293, 2584, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 651, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 646, 0, 641, 642,
	643, 640, 374, 425, 444, 432, 0, 657, 517, 518,
	658, 628, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 0, 568, 519, 434, 385, 586, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 514, 634, 516,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 2419, 2422, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 301, 458, 436, 382,
	359, 360, 300, 0, 420, 334, 350, 331, 398, 0,
	457, 485, 330, 476, 0, 468, 303, 0, 467, 397,
	454, 459, 383, 376, 0, 302, 456, 381, 375, 363,
	340, 501, 364, 365, 354, 409, 373, 410, 355, 387,
	386, 388, 0, 0, 0, 0, 0, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 0, 0, 631, 2423, 470, 0,
	0, 0, 2418, 0, 2417, 440, 2415, 2420, 366, 0,
	0, 0, 486, 0, 423, 403, 660, 0, 0, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 2421, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 661, 662, 663,
	498, 0, 413, 0, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 656, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 655, 0, 575,
	590, 659, 589, 652, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 664, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 653, 650, 453,
	654, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 651, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 646, 0, 641, 642,
	643, 640, 374, 425, 444, 432, 0, 657, 517, 518,
	658, 628, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 0, 568, 519, 434, 385, 586, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 514, 634, 516,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 2440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 301, 458, 436, 382,
	359, 360, 300, 0, 420, 334, 350, 331, 398, 0,
	457, 485, 330, 476, 0, 468, 303, 0, 467, 397,
	454, 459, 383, 376, 0, 302, 456, 381, 375, 363,
	340, 501, 364, 365, 354, 409, 373, 410, 355, 387,
	386, 388, 0, 0, 0, 0, 0, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 0, 0, 631, 2439, 470, 0,
	0, 0, 2445, 2442, 2444, 440, 0, 2443, 366, 0,
	0, 0, 486, 0, 423, 403, 660, 0, 2437, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 0, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 661, 662, 663,
	498, 0, 413, 0, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 656, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 655, 0, 575,
	590, 659, 589, 652, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 664, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 653, 650, 453,
	654, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 651, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 646, 0, 641, 642,
	643, 640, 374, 425, 444, 432, 0, 657, 517, 518,
	658, 628, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 0, 568, 519, 434, 385, 586, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 514, 634, 516,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 2440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 301, 458, 436, 382,
	359, 360, 300, 0, 420, 334, 350, 331, 398, 0,
	457, 485, 330, 476, 0, 468, 303, 0, 467, 397,
	454, 459, 383, 376, 0, 302, 456, 381, 375, 363,
	340, 501, 364, 365, 354, 409, 373, 410, 355, 387,
	386, 388, 0, 0, 0, 0, 0, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 0, 0, 631, 2439, 470, 0,
	0, 0, 2445, 2442, 2444, 440, 0, 2443, 366, 0,
	0, 0, 486, 0, 423, 403, 660, 0, 0, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 0, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 661, 662, 663,
	498, 0, 413, 0, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 656, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 655, 0, 575,
	590, 659, 589, 652, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 664, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 653, 650, 453,
	654, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 651, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 646, 0, 641, 642,
	643, 640, 374, 425, 444, 432, 0, 657, 517, 518,
	658, 628, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 0, 0, 0, 0, 2138, 0, 0, 0, 0,
	336, 0, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 0, 568, 519, 434, 385, 586, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 2139, 0, 0, 0, 309, 229, 514, 634, 516,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 1260, 1261, 1262, 1259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 301, 458, 436, 382,
	359, 360, 300, 0, 420, 334, 350, 331, 398, 0,
	457, 485, 330, 476, 0, 468, 303, 0, 467, 397,
	454, 459, 383, 376, 0, 302, 456, 381, 375, 363,
	340, 501, 364, 365, 354, 409, 373, 410, 355, 387,
	386, 388, 0, 0, 0, 0, 0, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 0, 0, 631, 0, 470, 0,
	0, 0, 0, 0, 0, 440, 0, 0, 366, 0,
	0, 0, 486, 0, 423, 403, 660, 0, 0, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 0, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 661, 662, 663,
	498, 0, 413, 0, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 656, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 655, 0, 575,
	590, 659, 589, 652, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 664, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 653, 650, 453,
	654, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 651, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 646, 0, 641, 642,
	643, 640, 374, 425, 444, 432, 206, 657, 517, 518,
	658, 628, 0, 0, 0, 0, 401, 0, 0, 532,
	565, 554, 638, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 369, 569, 551,
	561, 552, 537, 538, 539, 546, 348, 540, 541, 542,
	512, 543, 513, 544, 545, 140, 568, 519, 434, 385,
	586, 585, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	2188, 0, 228, 0, 0, 0, 0, 0, 0, 309,
	229, 514, 634, 516, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 441, 460, 310,
	429, 473, 315, 437, 452, 305, 400, 426, 0, 0,
	301, 458, 436, 382, 359, 360, 300, 0, 420, 334,
	350, 331, 398, 0, 457, 485, 330, 476, 0, 468,
	303, 0, 467, 397, 454, 459, 383, 376, 0, 302,
	456, 381, 375, 363, 340, 501, 364, 365, 354, 409,
	373, 410, 355, 387, 386, 388, 0, 0, 0, 0,
	0, 496, 497, 0, 0, 645, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 627, 0, 0,
	631, 0, 470, 0, 0, 0, 0, 0, 0, 440,
	0, 0, 366, 0, 0, 0, 486, 0, 423, 403,
	660, 0, 0, 421, 371, 455, 411, 461, 442, 469,
	417, 412, 294, 443, 333, 384, 306, 308, 328, 335,
	337, 341, 342, 393, 394, 406, 428, 445, 446, 447,
	332, 316, 422, 317, 352, 318, 295, 324, 322, 325,
	430, 326, 297, 407, 451, 0, 347, 418, 379, 298,
	378, 408, 450, 449, 307, 477, 483, 484, 573, 0,
	489, 661, 662, 663, 498, 0, 413, 0, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	656, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 655, 0, 575, 590, 659, 589, 652, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 664, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 653, 650, 453, 654, 0, 293, 527, 370, 169,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	651, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	646, 0, 641, 642, 643, 640, 374, 425, 444, 432,
	206, 657, 517, 518, 658, 628, 0, 0, 0, 0,
	401, 0, 0, 532, 565, 554, 638, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 369, 569, 551, 561, 552, 537, 538, 539, 546,
	348, 540, 541, 542, 512, 543, 513, 544, 545, 140,
	568, 519, 434, 385, 586, 585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 2173, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 514, 634, 516, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 441, 460, 310, 429, 473, 315, 437, 452, 305,
	400, 426, 0, 0, 301, 458, 436, 382, 359, 360,
	300, 0, 420, 334, 350, 331, 398, 0, 457, 485,
	330, 476, 0, 468, 303, 0, 467, 397, 454, 459,
	383, 376, 0, 302, 456, 381, 375, 363, 340, 501,
	364, 365, 354, 409, 373, 410, 355, 387, 386, 388,
	0, 0, 0, 0, 0, 496, 497, 0, 0, 645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 0, 0, 631, 0, 470, 0, 0, 0,
	0, 0, 0, 440, 0, 0, 366, 0, 0, 0,
	486, 0, 423, 403, 660, 0, 0, 421, 371, 455,
	411, 461, 442, 469, 417, 412, 294, 443, 333, 384,
	306, 308, 328, 335, 337, 341, 342, 393, 394, 406,
	428, 445, 446, 447, 332, 316, 422, 317, 352, 318,
	295, 324, 322, 325, 430, 326, 297, 407, 451, 0,
	347, 418, 379, 298, 378, 408, 450, 449, 307, 477,
	483, 484, 573, 0, 489, 661, 662, 663, 498, 0,
	413, 0, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 656, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 655, 0, 575, 590, 659,
	589, 652, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 664, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 653, 650, 453, 654, 0,
	293, 527, 370, 169, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 651, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 646, 0, 641, 642, 643, 640,
	374, 425, 444, 432, 0, 657, 517, 518, 658, 628,
	401, 0, 0, 532, 565, 554, 638, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 1050,
	0, 369, 569, 551, 561, 552, 537, 538, 539, 546,
	348, 540, 541, 542, 512, 543, 513, 544, 545, 0,
	568, 519, 434, 385, 586, 585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 1057, 1058, 0,
	0, 0, 0, 309, 229, 514, 634, 516, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1061, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 441, 1044, 310, 429, 473, 315, 437, 452, 305,
	400, 426, 0, 0, 301, 458, 436, 382, 359, 360,
	300, 0, 420, 334, 350, 331, 398, 0, 457, 485,
	330, 476, 1031, 468, 303, 1030, 467, 397, 454, 459,
	383, 376, 0, 302, 456, 381, 375, 363, 340, 501,
	364, 365, 354, 409, 373, 410, 355, 387, 386, 388,
	0, 0, 0, 0, 0, 496, 497, 0, 0, 645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 0, 0, 631, 0, 470, 0, 0, 0,
	0, 0, 0, 440, 0, 0, 366, 0, 0, 0,
	486, 0, 423, 403, 660, 0, 0, 421, 371, 455,
	411, 461, 442, 469, 1048, 412, 294, 443, 333, 384,
	306, 308, 328, 335, 337, 341, 342, 393, 394, 406,
	428, 445, 446, 447, 332, 316, 422, 317, 352, 318,
	295, 324, 322, 325, 430, 326, 297, 407, 451, 0,
	347, 418, 379, 298, 378, 408, 450, 449, 307, 477,
	483, 484, 573, 0, 489, 661, 662, 663, 498, 0,
	413, 0, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 656, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 655, 0, 575, 590, 659,
	589, 652, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 1049, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 1052, 571, 572, 389,
	390, 391, 392, 349, 597, 1047, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 664, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 1059, 1045, 1055, 1046,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 1056,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 653, 650, 453, 654, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 651, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 646, 0, 641, 642, 643, 640,
	1043, 425, 444, 432, 206, 657, 517, 518, 658, 628,
	0, 0, 0, 0, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 140, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2068, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 169, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 1057, 1058, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1061, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 1031, 468, 303, 1030,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	1059, 2089, 1055, 2090, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 1056, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 2981, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	2984, 0, 0, 0, 2983, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 1556, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 1554, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1552, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 1550, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 1554, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1552, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4088, 0,
	228, 854, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 1554, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1552, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 1554, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1765, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 2523, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 2525, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 2138, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 2139, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 3200, 3202, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 2546, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 1554, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 671, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 670, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 854, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4065, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 3819, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 3955, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1779, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3834, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 3741, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 3233, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3252, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2068, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 3453, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3361, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3089, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 1554, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 2525, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 2899, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 2643, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2605, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 2603, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 2372, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 1919, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 2050, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 1554, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 1955, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 1583, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 671, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 681, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	979, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 3178, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 1905, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 1533, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 1531, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 1410, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 749, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 660, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 706, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 661,
	662, 663, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 656, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 655,
	0, 575, 590, 659, 589, 652, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 707, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 664, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 653,
	650, 453, 654, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 2037, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 651, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 646, 2039,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 657,
	517, 518, 658, 628, 0, 0, 0, 0, 2037, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2014, 2039, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2014, 0,
	0, 0, 0, 0, 0, 0, 0, 3810, 0, 0,
	0, 2030, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2030, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2018, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2024, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2012, 2046, 0, 0,
	2013, 2015, 2017, 0, 2019, 2020, 2021, 2025, 2026, 2027,
	2029, 2032, 2033, 2034, 0, 0, 0, 0, 0, 0,
	2018, 2022, 2031, 2023, 0, 0, 0, 0, 0, 0,
	0, 2024, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2012, 2046, 0, 0, 2013, 2015, 2017, 2038, 2019,
	2020, 2021, 2025, 2026, 2027, 2029, 2032, 2033, 2034, 0,
	0, 0, 0, 0, 0, 0, 2022, 2031, 2023, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2035, 0,
	0, 0, 0, 2038, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2011, 0, 0, 0, 0,
	0, 0, 2010, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2028, 0, 0, 0,
	0, 0, 0, 2035, 0, 2016, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2011, 0, 0, 0, 0, 0, 0, 2010, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2028, 0, 0, 0, 0, 0, 0, 0, 0,
	2016,
}

var yyPact = [...]int{
	265, -1000, -1000, -1000, -325, 15869, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 49821, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 463, 49821, -317, 31261, 47901, -1000, -1000, 2850, -1000,
	48541, 17809, 49821, 545, 542, 49821, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1001, -1000, 54301, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 894, 4433, 53661, 12002,
	-205, -1000, 1813, -24, 2723, 533, -185, -192, 1188, 1204,
	1262, 1058, 49821, 1144, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 290, 1119, 49181,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4138, 270, 995, 1119, 22937, 157,
	155, 1813, 434, -65, 220, -1000, 1526, 4154, 209, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	12002, 12002, 15869, -376, 15869, 12002, 49821, 49821, -1000, -1000,
	-1000, -1000, -317, 48541, 894, 4433, 12002, 2723, 533, -185,
	-192, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -65, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 155, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5278, -1000, 1721,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2489, 3270, 1720, 2716, 832,
	47901, 49821, -1000, 147, 832, -1000, -1000, -1000, 1813, 3630,
	-1000, 49821, 49821, 252, 2030, -1000, 576, 564, 557, 432,
	377, 1713, -1000, -1000, -1000, -1000, -1000, -1000, 741, 3598,
	-1000, 49821, 49821, 3296, 49821, -1000, 2452, 768, -1000, 5563,
	3429, 1388, 1005, 3307, -1000, -1000, 3267, -1000, 393, 637,
	374, 787, 460, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	325, -1000, 3485, -1000, -1000, 375, -1000, -1000, 361, -1000,
	-1000, -1000, 152, -1000, -1000, -1000, -1000, -1000, -1000, 27,
	-1000, -1000, 1242, 2401, 12002, 2133, -1000, 3017, 1759, -1000,
	-1000, -1000, 7495, 14574, 14574, 14574, 14574, 49821, -1000, -1000,
	3131, 12002, 3264, 3263, 3261, 3260, -1000, -1000, -1000, -1000,
	-1000, -1000, 3256, 1702, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2182, -1000, -1000, -1000, 15217, -1000, 3253,
	3252, 3250, 3249, 3248, 3247, 3245, 3244, 3243, 3241, 3238,
	3237, 3236, 3234, 2953, 17159, 3232, 2710, 2709, 3230, 3229,
	3227, 2708, 3226, 3223, 3222, 2953, 2953, 3221, 3219, 3218,
	3217, 3215, 3213, 3212, 3211, 3208, 3206, 3205, 3203, 3201,
	3197, 3196, 3195, 3194, 3193, 3192, 3191, 3187, 3184, 3183,
	3169, 3168, 3166, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1573, -1000, 3165,
	3615, 3021, -1000, 3476, 3457, 3455, 3453, -254, 3164, 2395,
	-1000, -1000, 125, 3586, 49821, -275, 49821, 445, -71, -73,
	-78, -1000, -55, -1000, -1000, 1192, -1000, 1127, 53021, 961,
	-1000, -1000, 49821, 892, 892, 892, 49821, 235, 1016, 892,
	892, 892, 892, 892, 966, 892, 3513, 994, 993, 992,
	990, 892, -26, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2029, 2010, 3368, 1114, -1000, -1000, -1000, -1000, 1582, 49821,
	-1000, 3065, 445, -297, 1802, 1802, 3572, 3572, 3512, 3509,
	815, 794, 743, 1802, 597, -1000, 1959, 1959, 1959, 1959,
	1802, 516, 807, 3518, 3518, 191, 1959, 93, 1802, 1802,
	93, 1802, 1802, -1000, 1976, 370, -262, -1000, -1000, -1000,
	-1000, 1959, 1959, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3480, 3479, 894, 894, 49821, 894, 231, 49821, 894, 894,
	894, 49821, 899, -306, 62, 52381, 51741, 2514, 2452, 766,
	760, 1586, 1950, -1000, 1816, 49821, 49821, 1816, 1816, 26141,
	25501, -1000, 49821, -1000, 3615, 3021, 2927, 1643, 2925, 3021,
	-79, 445, 894, 894, 894, 894, 894, 350, 894, 894,
	894, 894, 894, 49821, 49821, 47261, 894, 894, 894, 894,
	10067, 1526, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15869, 2132, 2208, 206, 0,
	-303, 284, -1000, -1000, 49821, 3408, 327, -1000, -1000, -1000,
	3043, -1000, 3050, 3050, 3050, 3050, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3050, 3050, 3064, 3159,
	-1000, -1000, 3045, 3045, 3045, 3043, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3052, 3052, 3057, 3057, 3052, 49821, -107, -1000, -1000,
	12002, 49821, 3418, 412, 3143, 832, -1000, -1000, 49821, 339,
	414, 3615, 3416, 3518, 3565, -1000, -1000, 1697, 2394, 2706,
	-1000, 377, -1000, 497, 377, -1000, 583, 583, 1853, -1000,
	1414, -1000, -1000, -1000, -1000, -1000, -1000, 49821, 27, 438,
	-1000, -1000, 2674, 3142, -1000, 684, 1339, 1608, -1000, 303,
	5660, 40221, 2452, 40221, 49821, -1000, -1000, -1000, -1000, -1000,
	-1000, 144, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 384, -1000, 12002, 12002,
	12002, 12002, 12002, -1000, 1022, 13931, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14574, 14574, 14574, 14574, 14574, 14574, 14574,
	14574, 14574, 14574, 14574, 14574, 3127, 2049, 14574, 14574, 14574,
	14574, 28061, 1643, 3110, 1585, 326, 1759, 1759, 1759, 1759,
	12002, -1000, 2045, 2401, 12002, 12002, 12002, 12002, 34461, 49821,
	-1000, -1000, 5249, 12002, 12002, 3731, 12002, 3448, 12002, 12002,
	12002, 2918, 6200, 49821, 12002, -1000, 2909, 2907, -1000, -1000,
	2217, 12002, -1000, -1000, 12002, -1000, -1000, 12002, 14574, 12002,
	-1000, 12002, 12002, 12002, -1000, -1000, 3426, 3448, 3448, 3448,
	1974, 12002, 12002, 3448, 3448, 3448, 1914, 3448, 3448, 3448,
	3448, 3448, 3448, 3448, 3448, 3448, 3448, 3448, 2906, 2902,
	2899, 11359, 3518, -205, -1000, 9424, 3416, 3518, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -256, 3137,
	49821, 2704, 2700, -342, 197, 475, 49821, 1210, -1000, -1000,
	49821, 2392, 49821, 2388, 107, 1176, 1130, 1134, -1000, -1000,
	49821, 51101, -1000, 49821, 2056, 49821, 49821, 3441, -1000, 49821,
	49821, 892, 892, 892, -1000, 45341, 40221, 49821, 49821, 2452,
	49821, 49821, 49821, 892, 892, 892, 892, 49821, -1000, 3387,
	40221, 3376, 899, -1000, 49821, 1582, 3440, 49821, -1000, -1000,
	-1000, -1000, 3572, 14574, 14574, -1000, -1000, 12002, -1000, 298,
	46621, 1959, 1802, 1802, -1000, -1000, 49821, -1000, -1000, -1000,
	1959, 49821, 1959, 1959, 3572, 1959, -1000, -1000, -1000, 1802,
	1802, -1000, -1000, 12002, -1000, -1000, 1959, 1959, -1000, -1000,
	3572, 49821, 118, 3572, 3572, 137, -1000, -1000, -1000, 1802,
	49821, 49821, 892, 49821, -1000, 49821, 49821, -1000, -1000, 49821,
	49821, 4634, 49821, 45341, 45981, 3475, -1000, 40221, 49821, 49821,
	1580, -1000, 957, 37661, -1000, 49821, 1528, -1000, 51, -1000,
	104, 62, 1816, 62, 1816, 956, -1000, 681, 970, 24221,
	615, 40221, 6843, -1000, -1000, 1816, 1816, 6843, 6843, 1764,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1579, -1000, 368,
	3518, -1000, -1000, -1000, -1000, -1000, 2381, -284, 49821, 45341,
	40221, 2452, 49821, 894, 49821, 49821, 49821, 49821, 49821, -1000,
	3135, 1690, -1000, 3427, 49821, 49821, 49821, 49821, 1441, -1000,
	-1000, 21009, 1681, -1000, -1000, 2076, -1000, 12002, 15869, -237,
	12002, 15869, 15869, 12002, 15869, -1000, 12002, 319, -1000, -1000,
	-1000, -1000, 2367, -1000, 2365, -1000, -1000, -1000, -1000, -1000,
	2697, 2697, -1000, 2364, -1000, -1000, -1000, -1000, 2362, -1000,
	-1000, 2359, -1000, -1000, -1000, -1000, -147, 2892, 1242, -1000,
	2694, 3306, -207, -1000, 22297, 49821, 49821, 412, -344, 2009,
	2007, 1994, 3491, -1000, -207, -1000, 21653, 49821, 3518, -1000,
	-210, 3416, 12002, 49821, -1000, 3507, -1000, -1000, 377, -1000,
	-1000, -1000, 583, 471, -1000, -1000, -1000, -1000, -1000, -1000,
	1671, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -66, -67, 1578, -1000, 49821, -1000, -1000, 303,
	40221, 42141, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 283,
	-1000, -1000, 178, -1000, 955, 291, 1850, -1000, -1000, 244,
	213, 245, 1052, 2401, -1000, 2094, 2094, 2098, -1000, 822,
	-1000, -1000, -1000, -1000, 3131, -1000, -1000, -1000, 2092, 2003,
	-1000, 1905, 1905, 1682, 1682, 1682, 1682, 1682, 2031, 2031,
	-1000, -1000, -1000, 7495, 3127, 14574, 14574, 14574, 14574, 987,
	987, 1880, 3633, -1000, -1000, -1000, -1000, 12002, 195, 2073,
	-1000, 12002, 3004, 1698, 2942, 1437, 1824, -1000, 3043, 12002,
	1670, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2890, 2887, 2363, 3585, 2886, 12002, -1000, -1000, 1810,
	1801, 1800, -1000, 2300, 10716, -1000, -1000, -1000, 2880, 1669,
	2877, -1000, -1000, -1000, 2872, 1798, 1397, 2871, 2876, 2870,
	2868, 2865, 2858, 1571, 12002, 12002, 12002, 12002, 2851, 1791,
	1790, 12002, 12002, 12002, 12002, 2845, 12002, 12002, 12002, 12002,
	12002, 12002, 12002, 12002, 12002, 12002, 49821, 179, 179, 179,
	1568, 1539, -1000, -1000, 1781, -1000, 2401, -1000, -1000, 3416,
	-1000, 3121, 2355, 1536, -1000, -1000, -312, 2624, 49821, 49821,
	196, 49821, 2692, -276, 49821, -1000, -1000, 2688, -1000, -1000,
	-1000, 1165, 1124, 1187, -1000, 49821, -1000, 2680, 3422, 3506,
	889, 49821, 3120, 3118, 49821, 49821, 49821, 314, -1000, -1000,
	1398, -1000, 291, 15, 558, 1330, 3279, 854, -108, 49821,
	49821, 49821, 49821, 3439, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 44701, -1000, 3117, 1779, -1000, -1000, 1759, 1759,
	2401, 49821, 49821, 49821, 3278, 49821, 49821, 3572, 3572, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1959, 3572, 3572, 1429,
	1802, 1959, -1000, -1000, 1959, -344, -1000, 1959, -1000, -344,
	1657, -344, 49821, -1000, -1000, -1000, 3438, 3065, 1534, -1000,
	-1000, -1000, 3558, 1004, 880, 880, 1089, 769, 3557, 19729,
	-1000, 1884, 1189, 942, 3395, 381, -1000, 1884, -144, 845,
	1884, 1884, 1884, 1884, 1884, 1884, 1884, 739, 730, 1884,
	1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884,
	1203, 1884, 1884, 1884, 1884, 1884, -1000, 1884, 3107, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 770, 677, 312, 3473,
	419, -1000, 417, 1398, 691, 3466, 459, 49821, 49821, 4148,
	1422, -1000, -1000, -1000, -1000, -1000, 28701, 28701, 23581, 28701,
	-1000, 184, 1816, 62, 61, -1000, -1000, 1528, 6843, 1528,
	6843, 2353, -1000, -1000, 940, -1000, -1000, 1330, -1000, 49821,
	49821, -1000, -1000, 3106, 1987, -1000, -1000, 17159, -1000, 6843,
	6843, -1000, -1000, 30621, 49821, -1000, 21, -1000, 38, 3416,
	-1000, -1000, -1000, 1277, -1000, -1000, 1503, 1330, 3305, 49821,
	1277, 1277, 1277, -1000, -1000, 18449, 49821, 49821, -1000, -1000,
	-1000, -284, 3572, 10067, -1000, 37661, -1000, -1000, 44061, -1000,
	43421, 2035, -1000, 15869, 2192, 203, -1000, 280, -307, 199,
	2015, 198, 2401, -1000, -1000, 2844, 2843, 1776, -1000, 1775,
	2839, 1768, 1738, 2352, -1000, 76, -1000, 3410, 1338, -1000,
	3101, -1000, 1723, 3365, -1000, 1484, -1000, 1985, 1722, -1000,
	-1000, -1000, 12002, 42781, 12002, 1083, 1338, 1716, 3364, 1484,
	3416, 2678, -1000, 1478, -1000, 2274, 1625, 222, -1000, -1000,
	-1000, 49821, 2674, 1711, 42141, 1352, -1000, 936, 1616, 1615,
	-1000, 40221, 369, 40221, -1000, 40221, -1000, -1000, 437, -1000,
	49821, 3415, -1000, -1000, -1000, 2624, 1975, -343, 49821, -1000,
	-1000, -1000, -1000, -1000, 1709, -1000, 987, 987, 1880, 2418,
	-1000, 14574, -1000, 14574, 3095, -1000, 2018, -1000, 12002, 2180,
	5205, 12002, 5205, 1714, 27421, 34461, -91, 3414, 3030, 49821,
	-1000, -1000, 12002, 12002, -1000, 3025, -1000, -1000, -1000, -1000,
	12002, 12002, 2236, -1000, 49821, -1000, -1000, -1000, -1000, 27421,
	-1000, 14574, -1000, -1000, -1000, -1000, 12002, 1369, 1369, 2985,
	1704, 179, 179, 179, 2915, 2884, 2834, 1700, 179, 2827,
	2793, 2784, 2775, 2761, 2743, 2696, 2690, 2637, 2630, 1699,
	-1000, 3100, -1000, -1000, 2168, 13288, 9424, -1000, -1000, 316,
	1462, 2351, 2670, 128, -1000, 1973, -1000, 2665, 49821, 49821,
	1200, -1000, 49821, 3581, -1000, -1000, -1000, -1000, 1122, -1000,
	2663, -1000, 261, 242, 2235, 340, 1237, 18449, 3065, 3094,
	3065, 218, 1884, 663, 40221, 754, -1000, 49821, 2211, 1971,
	3303, 851, 3407, 49821, 49821, 3091, 548, 3089, 3087, 3437,
	532, 5357, 49821, 1396, -1000, 1612, 4154, -1000, 49821, -1000,
	-1000, 49821, -1000, 2452, -1000, 1802, -1000, -1000, 3572, -1000,
	-1000, 12002, 12002, 3572, 1802, 1802, -1000, 1959, -1000, 49821,
	-1000, -344, 532, 5357, 3436, 4891, 809, 2502, -1000, 49821,
	-1000, -1000, -1000, 962, -1000, 1110, 892, 49821, 2117, 1110,
	2115, 3086, -1000, -1000, 49821, 49821, 49821, 49821, -1000, -1000,
	49821, -1000, 49821, 49821, 49821, 49821, 49821, 41501, -1000, 49821,
	49821, -1000, 49821, 2109, 49821, 2107, 963, -1000, 1884, 1884,
	1062, -1000, -1000, 667, -1000, 41501, 2346, 2344, 2330, 2328,
	2658, 2656, 2650, 1884, 1884, 2327, 2649, 40861, 2648, 1316,
	2322, 2311, 2310, 2360, 2647, 1095, -1000, 2642, 2301, 2272,
	2260, 49821, 3070, 2539, -1000, -1000, 2235, 218, 1884, 402,
	49821, 1964, 1956, 663, 629, 629, 554, -17, 24861, -1000,
	-1000, -1000, 49821, 37661, 37661, 37661, 37661, 37661, 37661, -1000,
	3340, 3326, 3066, -1000, 3327, 3323, 3349, 3336, 3311, 49821,
	37661, 3065, -1000, 40861, -1000, -1000, -1000, 1643, 1692, 4202,
	1091, 12002, 6843, -1000, -1000, 46, 69, -1000, -1000, -1000,
	-1000, 40221, 2641, 615, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3505, 49821, 49821, 911, 2836, 1457, -1000, -1000, -1000,
	5357, 3050, 3050, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3050, 3050, 3064, -1000, -1000, 3045, 3045, 3045,
	3043, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3052, 3052, 3057, 3057, 3052, -1000, -1000, -1000, 3570,
	-1000, 1456, -1000, -1000, 1604, -1000, 2050, -327, 15869, 2042,
	2033, -1000, 12002, 15869, 12002, -238, 403, -243, -1000, -1000,
	-1000, 2640, -1000, -1000, -1000, 2309, -1000, 2307, -1000, 205,
	240, 2105, -207, 9424, 429, 49821, -207, 49821, 9424, -1000,
	49821, 186, -367, -370, 168, 2636, 428, -207, 3505, 76,
	12002, 3386, -1000, -1000, 49821, 2306, -1000, -1000, -1000, 3580,
	40221, 2452, 1780, 39581, -1000, 371, -1000, 275, 632, 2635,
	-1000, 989, 127, 2633, 2624, -1000, -1000, -1000, -1000, 14574,
	1759, -1000, -1000, -1000, 2401, 12002, 2832, -1000, 1159, 1159,
	2167, 2831, 2826, -1000, 3050, 3050, -1000, 3043, 3045, 3043,
	1159, 1159, 2824, -1000, 3042, -1000, 3414, -1000, 2255, 2621,
	-1000, 2511, 2496, 12002, -1000, 2818, 3560, 1448, -29, -175,
	179, 179, -1000, -1000, -1000, -1000, 179, 179, 179, 179,
	-1000, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 841, -88, -266, -89, -268, -1000, 2817, 1452,
	-1000, -1000, -1000, -1000, -1000, 3731, 1449, 562, 562, 2624,
	2605, -1000, 921, 2587, 1151, 49821, 2578, -280, -1000, 2577,
	-1000, -1000, 49821, 49821, 49821, 50461, 653, 49821, 49821, 2574,
	-1000, 2573, 2816, 1434, -1000, -1000, 49821, -1000, -1000, -1000,
	2809, 3435, 19089, 3433, 2402, -1000, -1000, -1000, 29981, 629,
	-1000, -1000, -1000, 758, 468, 2283, 618, -1000, 49821, 559,
	3257, 1949, 2571, 49821, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3407, -1000, 1093, -344, 505, 36381, 16519, -1000,
	413, 49821, -1000, 49821, 19089, 19089, 413, 521, 2017, -1000,
	832, 1320, 135, 37661, 49821, -1000, 37021, 2799, -1000, -1000,
	1330, 3572, -1000, 2401, 2401, -344, 3572, 3572, 1802, -1000,
	-1000, 521, -1000, 413, -1000, 1468, 20369, 579, 524, 478,
	-1000, 733, -1000, -1000, 831, 3390, 5357, -1000, 49821, -1000,
	49821, -1000, 49821, 49821, 892, 12002, 3390, 49821, 914, -1000,
	1235, 512, 489, 861, 861, 1375, -1000, 3414, -1000, -1000,
	1356, -1000, -1000, -1000, -1000, 49821, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 27421, 27421, 3462, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2570, 2568, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 49821, 1691, -1000, 1943, 2567, 2402, 29981, 1938, 1816,
	2566, 2561, 629, -1000, 2560, 2555, -1000, 2211, 1937, 982,
	49821, -1000, 1289, 49821, 49821, -1000, 1387, -1000, 1936, 3275,
	3301, 3275, -1000, 3275, -1000, -1000, -1000, -1000, 3335, 2554,
	-1000, 3331, -1000, 3329, -1000, -1000, -1000, -1000, 1387, -1000,
	-1000, -1000, -1000, -1000, 1091, -1000, 3499, 1110, 1110, 1110,
	2798, -1000, -1000, -1000, -1000, 1352, 2795, -1000, -1000, -1000,
	3610, -1000, -1000, -1000, -1000, -1000, -1000, 18449, 3406, 3568,
	3554, 38941, -1000, -327, 1977, -1000, 2110, 194, 1992, 49821,
	-1000, -1000, -1000, 2787, 2785, -212, 202, 3552, 3542, 1126,
	-1000, 2783, 1345, -207, -1000, -1000, 1338, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -374, -207, -1000, 1338, -1000, 205,
	-1000, -1000, 3398, -1000, -1000, 2452, -1000, 273, -1000, -1000,
	-1000, -1000, -1000, -1000, 276, -1000, 49821, -1000, 1343, 126,
	-1000, 2401, -1000, -1000, -1000, -1000, -1000, 5205, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2551, -1000,
	-1000, 12002, -1000, -1000, -1000, 2397, -1000, -1000, 12002, 2782,
	2550, 2781, 2545, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3615, -1000, 3541, 1679, 2774, 2769, 1678, 2767, 2765, -1000,
	12002, 2759, 3731, 1071, 2543, 1071, -1000, -1000, 458, 29341,
	49821, 3578, -1000, 49821, 2541, -1000, -1000, 49821, 2235, 622,
	2235, 718, 49821, -284, -1000, -94, 1237, 5357, 1012, 413,
	2756, 1340, -1000, -1000, -1000, -1000, 413, -1000, 2540, 288,
	-1000, -1000, -1000, -1000, 2281, -1000, -1000, 2247, 1634, 301,
	-1000, -1000, -1000, -1000, -1000, -1000, 2242, 49821, 38301, 2285,
	1935, -348, -1000, 3041, -1000, 1884, 1884, 1884, 904, 49821,
	1675, -1000, 1884, 1884, 2753, -1000, -1000, 903, 2750, 2746,
	-118, 850, 1903, 1870, -1000, 2276, 28701, 37661, 37021, 1372,
	-1000, 1590, -1000, -1000, -1000, -1000, -1000, -1000, 3572, 850,
	-1000, 575, 2261, 14574, 3040, 14574, 3036, 586, 3029, 1673,
	-1000, 49821, -1000, -1000, 49821, 4036, 3028, -1000, 3022, 3277,
	553, 3019, 3018, 49821, 2372, -1000, 3390, 49821, 805, 3404,
	-1000, -1000, -1000, 453, -1000, -1000, -1000, 643, -1000, 49821,
	-1000, 49821, -1000, 1749, -1000, 27421, -1000, -1000, 1664, -1000,
	2539, 2537, -1000, -1000, 288, 2531, 6843, -1000, -1000, -1000,
	-1000, -1000, 3257, 2530, 2242, 49821, -1000, 49821, 1289, 1289,
	3615, 49821, 9424, -1000, -1000, 12002, 3010, -1000, 12002, -1000,
	-1000, -1000, 2744, -1000, -1000, -1000, -1000, -1000, 3007, 3388,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1739, -1000, 12002,
	12645, -1000, 884, 15869, -245, 395, -1000, -1000, -1000, -214,
	2529, -1000, -1000, 3540, 2527, 2434, 49821, -1000, -1000, 1338,
	-1000, 1338, -212, -1000, -1000, 1330, -1000, -1000, 1178, 734,
	-1000, 2740, 296, -1000, 2357, -1000, 2305, 179, -1000, 179,
	-1000, 267, 12002, -1000, 2525, -1000, -1000, -1000, 2524, -1000,
	-1000, 2290, -1000, 2739, -1000, 2523, -1000, -1000, 49821, -1000,
	-1000, 1149, 2516, -357, -1000, 2515, 2235, 2513, 2235, 49821,
	607, -1000, 2512, 2510, -1000, -1000, 5357, -119, -118, 19089,
	-119, -1000, -1000, 436, 439, -1000, -1000, 2243, 680, -1000,
	-1000, 2508, 642, -1000, 1289, -1000, 1934, 2142, 2484, 34461,
	27421, 28061, 2507, 455, -1000, -1000, 36381, 1739, 1739, 5585,
	452, 384, 54962, -1000, 2991, 1206, 1857, -1000, 2259, -1000,
	2257, -1000, 3572, 1372, 133, -1000, -1000, 1773, -1000, 1206,
	2502, 3536, -1000, 3224, 49821, 3115, 49821, 2983, 1932, 14574,
	-1000, 831, 3361, -1000, -1000, 4036, -1000, -1000, 2125, 14574,
	-1000, -1000, 2505, 28061, 967, 1913, 1909, 1036, 2980, -1000,
	686, 3609, -1000, -1000, -1000, 1051, 2978, -1000, 2104, 2077,
	-1000, 49821, -1000, 34461, 34461, 811, 811, 34461, 34461, 2965,
	861, -1000, -1000, 14574, -1000, -1000, 1884, -1000, -1000, -1000,
	1884, 1726, -1000, -1000, -1000, -1000, -1000, -1000, 2285, -1000,
	-1000, 1277, -1000, 3518, -1000, -1000, 2401, 49821, 2401, -1000,
	35741, -1000, 3535, 3534, -1000, 2401, 262, 278, 2963, 2961,
	-1000, -327, 49821, 49821, -216, 2254, -1000, 2504, 248, -1000,
	-1000, 1274, -214, -218, 137, 27421, 1889, -1000, 2737, 383,
	-136, -1000, -1000, -1000, -1000, 2736, -1000, 1031, -1000, -1000,
	-1000, 1242, 2735, 2734, -1000, -1000, -1000, -1000, 49821, -1000,
	2455, -284, 2503, -284, 2501, 606, 2235, -1000, -1000, -100,
	-1000, -1000, 461, -1000, -1000, -1000, 648, 2408, -1000, -1000,
	433, -1000, -1000, -1000, 2242, 2500, -1000, -1000, 117, -1000,
	1887, 1648, -1000, -1000, -1000, 49821, -1000, -1000, -1000, 828,
	-1000, 413, 54907, -1000, 1189, 49821, -1000, 1178, 828, 33181,
	732, 318, -1000, 2252, -1000, -1000, 3615, -1000, 714, -1000,
	584, -1000, 1640, -1000, 1637, 35101, 2245, 3092, -1000, 5722,
	971, -1000, -1000, 1880, -1000, -1000, -1000, -1000, -1000, -1000,
	2499, 2498, -1000, -1000, -1000, -1000, -1000, 2244, 2960, 31,
	3452, 2497, -1000, -1000, 2959, 1633, 1628, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1623, 1621, 34461,
	-1000, -1000, 1880, 2238, 27421, 1884, -1000, -1000, 1613, 1583,
	-1000, -1000, -1000, -1000, -1000, -298, 2958, 12002, 12002, -1000,
	-1000, -1000, 2957, -1000, -1000, 3533, -216, -221, 2494, 193,
	233, -1000, 2490, -1000, -105, 3348, -140, -1000, -1000, 654,
	-208, 175, 139, 120, -1000, -1000, -1000, 12002, -1000, -1000,
	-1000, 116, -1000, 1886, -1000, -284, -1000, -284, 2235, 2485,
	49821, 685, -1000, -1000, -1000, -1000, 271, -1000, -1000, -1000,
	-1000, -1000, -1000, 2484, 2479, -1000, -1000, 569, 3530, -1000,
	54962, -1000, 1884, -1000, -1000, 569, 1572, -1000, 1884, 1884,
	-1000, 517, -1000, 1819, -1000, 2230, -1000, 3518, -1000, 513,
	-1000, 571, -1000, -1000, -1000, 1517, -1000, -1000, -1000, 5722,
	577, -1000, 823, 2955, -1000, -1000, 2732, 12002, 2953, 1884,
	2731, -82, 34461, 3276, 3097, 2987, 2638, 1496, -1000, -1000,
	27421, -1000, -1000, 33821, -1000, 2951, 1481, 1463, 49821, 2434,
	-1000, -1000, 2459, -1000, 896, 243, 233, -1000, 3529, 223,
	3528, 3527, 1240, 3345, -1000, -1000, 2096, -1000, 214, 173,
	171, -1000, -1000, -1000, -1000, -284, 2455, 2454, -1000, -1000,
	2451, -284, 611, -1000, 366, -1000, -1000, -1000, 389, -1000,
	3524, 809, -1000, 27421, -1000, -1000, 33181, 1739, 1739, -1000,
	-1000, 2224, -1000, -1000, -1000, -1000, 2219, -1000, -1000, -1000,
	1450, -1000, 49821, 1025, 8781, -1000, 2279, -1000, 49821, -1000,
	3300, -1000, 307, 1447, 389, 811, 389, 811, 389, 811,
	389, 811, 359, -1000, -1000, -1000, 1446, 12002, -1000, -1000,
	1438, -1000, -1000, -1000, 2947, 2218, 202, 200, 3522, -1000,
	2434, 3520, 2434, 2434, -1000, 182, -126, 654, -1000, -1000,
	-1000, -1000, -1000, -1000, -284, -1000, 2447, -1000, -1000, -1000,
	-1000, 1884, 1884, 2445, 2440, 492, -1000, -1000, 1884, 1884,
	1884, 1884, 32541, 579, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 577, 54962, -1000, 8781, 1430, -1000, 2401, -1000, 861,
	-1000, -1000, 3298, 3020, 3577, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2929, 2730, -1000, 49821, 3446,
	26781, 226, -1000, -1000, -1000, 2435, -1000, 2434, -1000, -1000,
	1821, -138, -1000, -1000, -264, 2214, 2196, -1000, -1000, 49821,
	2186, 2174, 2156, 2433, -1000, 49821, 575, -1000, 54962, 1407,
	-1000, 8781, -1000, -1000, 3607, -1000, 3605, 997, 997, 389,
	389, 389, 389, 12002, -1000, -1000, -1000, 49821, -1000, 1406,
	-1000, -1000, -1000, 1589, -1000, -1000, -1000, -1000, 2431, -141,
	-1000, -1000, 2265, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1284, 2502, -1000, -1000, -1000, -1000, -1000, 2227, 692, -1000,
	2701, 1229, -1000, 1795, -1000, 31901, 49821, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 49821, 8138, -1000, 1415,
	-1000, -1000, 2401, 49821, -1000,
}

var yyPgo = [...]int{
	0, 175, 3628, 251, 181, 4250, 90, 255, 272, 253,
	254, 252, 4248, 4247, 4246, 3432, 3424, 4245, 4244, 4243,
	4242, 4241, 4237, 4236, 4235, 4234, 4233, 4232, 4230, 4228,
	4226, 4225, 4215, 4214, 4212, 4210, 4209, 4208, 4206, 4205,
	4204, 4203, 4202, 4200, 4199, 4198, 4196, 249, 4195, 4194,
	4192, 4190, 4187, 4184, 4183, 4182, 4181, 4179, 4178, 4177,
	4176, 4175, 4174, 4173, 4171, 4164, 4163, 4162, 4161, 4160,
	4159, 4158, 4157, 4156, 4155, 4153, 4152, 4151, 4147, 4146,
	4145, 4142, 4137, 4136, 4135, 245, 4134, 3416, 4133, 4131,
	4130, 4125, 4124, 4123, 4122, 4121, 4120, 4116, 4115, 333,
	4109, 4108, 4107, 4105, 4104, 4103, 4102, 4101, 4100, 4098,
	4096, 4095, 4094, 289, 4093, 4091, 4090, 4088, 215, 4087,
	221, 4085, 178, 137, 4084, 4083, 4082, 4076, 4075, 4074,
	4073, 4072, 4071, 4070, 4069, 4068, 4067, 4065, 244, 195,
	74, 4059, 49, 4058, 4056, 222, 4055, 157, 4054, 152,
	4053, 4052, 4051, 4050, 4045, 4044, 4042, 4040, 4031, 4030,
	4029, 4028, 4027, 4026, 4025, 4022, 4021, 4020, 4017, 4016,
	4015, 4014, 4013, 4012, 54, 4008, 264, 4007, 80, 4006,
	189, 4005, 75, 4002, 56, 132, 259, 2991, 261, 4001,
	193, 3998, 3997, 257, 177, 3995, 3994, 275, 3993, 206,
	230, 184, 95, 118, 3991, 143, 3990, 269, 47, 50,
	241, 154, 3986, 3984, 55, 180, 131, 3983, 218, 106,
	119, 3981, 3979, 148, 3977, 239, 188, 3975, 110, 3973,
	3972, 3971, 24, 3970, 3969, 202, 200, 3968, 3967, 98,
	3965, 3956, 68, 134, 3955, 78, 129, 171, 124, 3951,
	103, 130, 99, 3950, 123, 107, 3949, 88, 3948, 3947,
	3946, 3943, 185, 3941, 3940, 149, 61, 3938, 3937, 3936,
	69, 3935, 81, 3934, 31, 3931, 60, 3928, 3927, 3924,
	3923, 3922, 3921, 3919, 3918, 3916, 3915, 3913, 3911, 57,
	3909, 3908, 3907, 3906, 7, 12, 15, 3902, 29, 3901,
	173, 3900, 3898, 166, 3897, 201, 3891, 3890, 100, 94,
	3889, 93, 164, 3885, 10, 27, 77, 3882, 3880, 3879,
	332, 3876, 3875, 3874, 273, 3868, 3867, 3866, 190, 3865,
	3863, 3860, 631, 3859, 3858, 3857, 3856, 3854, 3851, 147,
	3849, 1, 220, 43, 3846, 135, 141, 3845, 40, 32,
	3843, 48, 117, 205, 138, 102, 3842, 3841, 3840, 660,
	198, 105, 38, 0, 104, 226, 176, 3839, 3838, 3837,
	263, 3836, 242, 210, 235, 373, 274, 232, 3835, 3834,
	64, 3832, 160, 35, 53, 140, 352, 22, 207, 3831,
	1747, 9, 214, 3829, 212, 3827, 8, 18, 156, 158,
	3825, 3824, 34, 267, 3823, 3822, 3820, 133, 3819, 3818,
	231, 79, 3817, 3814, 3811, 3804, 3803, 42, 3802, 191,
	16, 3799, 109, 3798, 250, 3797, 246, 142, 186, 183,
	159, 224, 237, 83, 86, 3796, 1924, 162, 113, 17,
	3795, 229, 3793, 187, 136, 3790, 91, 3789, 258, 265,
	213, 3788, 192, 11, 51, 39, 30, 44, 13, 346,
	204, 3787, 3786, 26, 52, 3771, 59, 3770, 20, 3769,
	3768, 41, 3767, 67, 5, 3765, 3764, 19, 23, 3763,
	37, 211, 172, 126, 97, 70, 3762, 3761, 155, 146,
	3760, 150, 165, 161, 3759, 82, 3757, 3756, 3753, 3752,
	1006, 260, 3751, 3749, 3748, 3747, 3745, 3743, 3742, 3741,
	217, 3740, 112, 45, 3739, 3738, 3737, 3736, 84, 151,
	3734, 3733, 3732, 3731, 33, 145, 3729, 14, 3728, 25,
	21, 36, 3727, 111, 3726, 2, 196, 3723, 3722, 3,
	3721, 3719, 4, 3715, 3714, 120, 3698, 101, 28, 167,
	114, 3696, 3695, 92, 216, 144, 3694, 3693, 108, 248,
	208, 3692, 96, 240, 266, 3691, 219, 3690, 3689, 3688,
	3687, 3685, 1287, 3684, 3683, 247, 62, 85, 3682, 236,
	121, 3677, 3676, 87, 163, 125, 122, 58, 89, 3675,
	116, 209, 3674, 203, 3672, 262, 3671, 3669, 115, 3667,
	3665, 3664, 3663, 194, 3662, 3659, 197, 238, 3658, 3657,
	271, 3655, 3653, 3652, 3651, 3649, 3645, 3643, 3640, 3633,
	3632, 256, 314, 3631,
}

//line mysql_sql.y:13037
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectOptionUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectOptionsUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 616, 619, 619, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 128,
	128, 354, 354, 355, 355, 130, 350, 350, 349, 349,
	131, 132, 133, 595, 595, 134, 135, 165, 594, 594,
	594, 594, 594, 167, 167, 167, 167, 167, 167, 167,
	471, 129, 129, 129, 129, 129, 171, 171, 171, 171,
	171, 127, 601, 601, 601, 602, 602, 124, 154, 153,
	156, 156, 155, 155, 152, 152, 148, 151, 151, 150,
	150, 149, 144, 146, 146, 145, 147, 147, 125, 113,
	126, 544, 544, 543, 543, 542, 542, 496, 496, 497,
	497, 341, 341, 341, 541, 541, 541, 540, 540, 539,
	539, 538, 538, 536, 536, 537, 535, 534, 534, 534,
	532, 532, 532, 528, 528, 530, 529, 529, 531, 523,
	523, 526, 526, 524, 524, 524, 524, 527, 522, 522,
	522, 521, 521, 112, 112, 112, 438, 438, 111, 111,
	452, 452, 452, 452, 452, 450, 450, 450, 450, 450,
	450, 449, 449, 448, 448, 453, 453, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 100, 100,
	100, 100, 100, 100, 100, 107, 105, 105, 105, 106,
	607, 607, 606, 606, 608, 608, 608, 608, 609, 609,
	103, 103, 103, 104, 447, 447, 447, 101, 102, 102,
	437, 437, 442, 442, 441, 441, 441, 441, 441, 441,
	441, 441, 441, 441, 441, 441, 441, 446, 446, 446,
	444, 444, 443, 443, 445, 445, 91, 91, 91, 91,
	91, 91, 95, 96, 97, 97, 97, 97, 94, 93,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 92,
	92, 92, 92, 92, 92, 86, 86, 86, 86, 86,
	85, 85, 87, 87, 434, 434, 433, 108, 108, 109,
	604, 604, 603, 605, 605, 605, 605, 110, 116, 116,
	116, 116, 116, 116, 116, 116, 115, 115, 115, 118,
	118, 117, 119, 99, 99, 99, 99, 99, 99, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 569, 569, 569, 569, 570,
	570, 368, 369, 620, 371, 367, 367, 367, 565, 565,
	566, 567, 568, 568, 568, 114, 14, 224, 224, 470,
	470, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 13, 84, 89, 89, 90, 304, 304, 305, 299,
	299, 306, 306, 170, 307, 307, 307, 312, 312, 313,
	313, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 284, 284, 284, 279, 279, 279, 279,
	279, 280, 280, 281, 281, 282, 282, 282, 282, 283,
	283, 360, 360, 308, 308, 308, 310, 310, 309, 303,
	301, 301, 301, 301, 301, 301, 301, 302, 302, 302,
	302, 302, 311, 311, 82, 88, 88, 88, 88, 582,
	582, 83, 83, 83, 593, 593, 500, 500, 382, 382,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 505, 506, 378, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 79, 80, 81,
	54, 57, 58, 169, 172, 172, 172, 172, 53, 53,
	53, 423, 423, 52, 621, 621, 353, 353, 67, 66,
	56, 68, 69, 70, 71, 72, 73, 51, 65, 65,
	65, 65, 65, 65, 65, 65, 76, 517, 517, 623,
	623, 623, 74, 75, 499, 499, 499, 64, 63, 62,
	61, 60, 60, 50, 50, 49, 49, 55, 160, 59,
	161, 161, 375, 375, 375, 377, 377, 373, 622, 622,
	466, 466, 376, 376, 48, 48, 48, 48, 77, 374,
	374, 352, 372, 372, 372, 12, 12, 10, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 26, 27, 29, 431, 431,
	428, 28, 20, 19, 19, 23, 22, 18, 18, 21,
	24, 25, 25, 9, 9, 9, 9, 15, 15, 16,
	194, 194, 251, 251, 576, 576, 572, 572, 573, 573,
	573, 574, 574, 575, 575, 120, 511, 511, 511, 511,
	511, 511, 8, 8, 219, 219, 510, 510, 510, 510,
	510, 510, 435, 435, 435, 554, 554, 554, 555, 218,
	218, 211, 211, 512, 512, 399, 556, 556, 520, 520,
	519, 519, 518, 518, 216, 216, 217, 217, 197, 197,
	139, 139, 525, 525, 525, 525, 533, 533, 495, 495,
	289, 289, 343, 343, 344, 344, 184, 184, 185, 185,
	185, 185, 185, 185, 610, 610, 611, 612, 613, 613,
	614, 614, 614, 615, 615, 615, 615, 615, 562, 562,
	564, 564, 563, 215, 215, 209, 209, 210, 210, 210,
	208, 208, 207, 206, 206, 205, 203, 203, 203, 204,
	204, 204, 223, 223, 187, 187, 187, 186, 186, 186,
	186, 186, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 188, 191, 191, 192, 192, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 321,
	321, 322, 322, 322, 322, 322, 137, 137, 504, 504,
	320, 320, 189, 189, 190, 190, 190, 190, 319, 319,
	318, 202, 202, 201, 200, 200, 200, 195, 195, 195,
	195, 195, 196, 330, 330, 329, 329, 328, 328, 328,
	328, 331, 123, 136, 136, 138, 222, 222, 213, 212,
	327, 326, 326, 326, 326, 221, 221, 220, 220, 214,
	214, 199, 199, 199, 199, 325, 198, 323, 600, 600,
	599, 599, 598, 596, 596, 596, 597, 597, 597, 597,
	546, 546, 546, 546, 546, 361, 361, 361, 366, 366,
	364, 364, 364, 364, 364, 370, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 39, 234,
	235, 40, 236, 236, 237, 237, 238, 238, 239, 240,
	241, 241, 241, 241, 415, 415, 38, 225, 225, 226,
	226, 227, 227, 228, 229, 229, 229, 233, 230, 231,
	231, 618, 618, 617, 37, 37, 30, 175, 175, 176,
	176, 176, 178, 178, 285, 285, 285, 177, 177, 179,
	179, 179, 577, 579, 579, 581, 580, 580, 580, 583,
	583, 583, 583, 583, 584, 584, 584, 584, 585, 585,
	31, 157, 157, 182, 182, 162, 588, 588, 588, 587,
	587, 589, 589, 590, 590, 347, 347, 348, 348, 173,
	174, 174, 164, 159, 181, 181, 181, 181, 181, 183,
	183, 253, 253, 158, 163, 166, 168, 578, 586, 586,
	586, 432, 432, 429, 430, 430, 427, 426, 426, 426,
	592, 592, 591, 591, 591, 362, 362, 32, 422, 422,
	424, 425, 425, 425, 416, 416, 416, 416, 36, 420,
	420, 421, 421, 421, 421, 421, 421, 421, 421, 421,
	421, 421, 417, 417, 419, 419, 414, 414, 414, 414,
	414, 414, 414, 414, 35, 35, 35, 180, 180, 413,
	413, 410, 410, 232, 232, 408, 408, 409, 409, 407,
	407, 407, 411, 411, 43, 78, 44, 45, 46, 42,
	412, 412, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 141, 140, 140, 140, 140, 140,
	143, 143, 346, 346, 345, 345, 142, 286, 286, 41,
	264, 264, 487, 487, 482, 482, 482, 482, 482, 502,
	502, 502, 483, 483, 483, 484, 484, 484, 486, 486,
	486, 485, 485, 485, 485, 485, 501, 501, 503, 503,
	503, 454, 454, 455, 455, 455, 458, 458, 474, 474,
	475, 475, 473, 473, 480, 480, 479, 479, 478, 478,
	477, 477, 476, 476, 476, 476, 469, 469, 468, 468,
	456, 456, 456, 456, 456, 457, 457, 457, 467, 467,
	472, 472, 317, 317, 316, 316, 272, 272, 273, 273,
	315, 315, 270, 270, 271, 271, 271, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 552, 552, 553, 275, 275, 287, 287, 287,
	287, 287, 287, 274, 274, 276, 276, 252, 252, 250,
	250, 242, 242, 242, 242, 242, 242, 243, 243, 244,
	244, 245, 245, 245, 249, 249, 248, 248, 248, 248,
	246, 246, 247, 247, 247, 247, 247, 247, 440, 440,
	549, 549, 550, 550, 545, 545, 545, 548, 548, 548,
	548, 548, 548, 548, 548, 551, 551, 551, 547, 547,
	254, 340, 340, 340, 363, 363, 363, 363, 365, 339,
	339, 339, 269, 269, 268, 268, 266, 266, 266, 266,
	266, 266, 266, 266, 266, 266, 266, 266, 266, 266,
	266, 266, 266, 266, 266, 266, 266, 266, 439, 439,
	379, 379, 380, 380, 298, 297, 297, 297, 297, 297,
	295, 296, 294, 294, 294, 294, 294, 291, 291, 290,
	290, 290, 292, 292, 292, 292, 292, 418, 418, 288,
	288, 278, 278, 278, 277, 277, 277, 481, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 388, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 293, 337,
	337, 337, 338, 338, 338, 338, 338, 338, 338, 338,
	389, 389, 395, 395, 561, 561, 560, 255, 255, 255,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 265,
	265, 265, 463, 463, 463, 463, 464, 464, 464, 464,
	465, 465, 465, 461, 461, 462, 462, 400, 401, 401,
	508, 508, 509, 509, 459, 459, 460, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	516, 516, 516, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 571,
	571, 571, 557, 557, 557, 558, 558, 558, 558, 558,
	558, 558, 558, 558, 558, 558, 558, 559, 559, 559,
	559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
	559, 559, 559, 559, 335, 335, 335, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 402, 402, 403, 403, 513,
	513, 513, 513, 513, 513, 514, 514, 515, 515, 515,
	515, 507, 507, 507, 507, 507, 507, 507, 507, 507,
	507, 507, 507, 507, 507, 507, 507, 507, 507, 507,
	507, 507, 507, 507, 507, 507, 507, 507, 507, 507,
	507, 387, 332, 332, 332, 404, 396, 396, 397, 397,
	398, 398, 390, 390, 390, 390, 390, 390, 391, 391,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 392, 392, 394, 394, 406, 406, 406, 405,
	405, 405, 405, 405, 405, 405, 267, 267, 267, 267,
	384, 384, 384, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 257, 257, 257, 257, 261,
	261, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 262, 262, 262, 262, 262,
	260, 260, 260, 260, 260, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 121, 122, 122, 259, 342, 342,
	488, 488, 491, 491, 489, 489, 490, 492, 492, 492,
	493, 493, 493, 494, 494, 494, 498, 498, 351, 351,
	351, 359, 359, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 12, 1, 3, 0, 3,
	3, 3, 4, 1, 2, 4, 5, 6, 1, 2,
	1, 2, 3, 10, 10, 11, 11, 12, 8, 13,
	1, 5, 6, 8, 10, 9, 5, 7, 9, 8,
	6, 4, 0, 1, 1, 0, 1, 5, 2, 2,
	6, 9, 6, 9, 4, 7, 8, 0, 1, 1,
	2, 4, 6, 1, 2, 4, 0, 2, 10, 11,
	2, 0, 2, 1, 3, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 3,
	0, 3, 3, 0, 1, 3, 0, 1, 3, 0,
	2, 1, 2, 3, 4, 3, 3, 1, 0, 1,
	1, 0, 1, 8, 5, 7, 0, 3, 8, 5,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 1, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 3, 4, 4, 5,
	1, 3, 3, 1, 2, 2, 2, 1, 2, 2,
	3, 4, 4, 6, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 3, 4, 5, 4, 2, 2,
	0, 1, 4, 2, 4, 1, 5, 3, 2, 1,
	2, 2, 4, 4, 5, 2, 1, 3, 4, 4,
	1, 2, 9, 7, 1, 3, 3, 1, 1, 3,
	1, 3, 2, 1, 2, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 4, 2,
	4, 3, 3, 1, 1, 1, 1, 1, 1, 2,
	3, 4, 7, 2, 3, 3, 4, 3, 4, 4,
	5, 3, 4, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 1, 1, 1, 1, 6, 4, 1, 1, 0,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 10, 7, 4, 4, 3, 1, 3, 3, 1,
	3, 1, 6, 7, 3, 3, 3, 1, 1, 1,
	3, 2, 4, 5, 5, 6, 5, 5, 3, 2,
	2, 1, 3, 4, 3, 7, 5, 8, 2, 2,
	1, 3, 2, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 1, 2, 1, 3, 2, 1,
	2, 2, 1, 2, 3, 2, 2, 3, 6, 3,
	3, 3, 1, 1, 7, 7, 7, 8, 8, 0,
	4, 7, 6, 6, 0, 3, 0, 2, 0, 1,
	1, 1, 1, 4, 2, 2, 3, 3, 4, 5,
	3, 4, 4, 2, 2, 2, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	4, 3, 3, 3, 4, 5, 6, 5, 2, 5,
	5, 0, 2, 7, 0, 1, 0, 1, 5, 5,
	3, 3, 2, 4, 4, 4, 4, 4, 1, 1,
	1, 3, 3, 1, 1, 1, 6, 0, 1, 1,
	1, 1, 5, 5, 0, 1, 1, 3, 3, 3,
	4, 7, 7, 5, 4, 7, 8, 3, 3, 2,
	3, 4, 0, 2, 2, 0, 2, 2, 1, 1,
	1, 1, 0, 1, 5, 5, 6, 4, 3, 1,
	3, 1, 1, 3, 5, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 4, 1, 3,
	1, 4, 6, 6, 4, 4, 4, 4, 4, 3,
	6, 3, 5, 1, 1, 2, 2, 11, 8, 9,
	1, 3, 2, 4, 0, 2, 0, 1, 1, 1,
	1, 0, 1, 0, 1, 4, 2, 1, 5, 4,
	4, 2, 5, 5, 1, 3, 2, 1, 5, 4,
	4, 2, 0, 5, 4, 0, 1, 3, 3, 1,
	3, 1, 3, 1, 3, 4, 0, 1, 0, 1,
	1, 3, 1, 1, 0, 4, 1, 3, 2, 1,
	0, 8, 0, 4, 7, 4, 0, 2, 0, 2,
	0, 2, 0, 4, 1, 3, 1, 1, 6, 4,
	5, 7, 4, 5, 0, 1, 3, 8, 0, 6,
	0, 4, 6, 1, 1, 1, 1, 1, 2, 3,
	1, 3, 6, 0, 3, 0, 1, 2, 4, 4,
	0, 1, 3, 1, 3, 3, 0, 1, 1, 0,
	2, 2, 0, 2, 3, 3, 3, 1, 3, 3,
	3, 3, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 7, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 4, 7, 6, 6, 3, 5, 0, 2,
	0, 2, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 3, 1, 1, 1, 1, 4, 4, 4,
	3, 4, 3, 2, 2, 2, 2, 2, 3, 2,
	3, 2, 4, 1, 3, 4, 0, 2, 1, 3,
	1, 1, 2, 2, 3, 0, 1, 2, 4, 1,
	3, 1, 3, 2, 3, 1, 4, 3, 0, 1,
	1, 2, 5, 2, 2, 2, 0, 2, 3, 3,
	0, 1, 3, 1, 3, 0, 1, 2, 1, 1,
	0, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	1, 9, 1, 3, 0, 1, 1, 3, 1, 3,
	0, 1, 1, 1, 0, 2, 14, 1, 3, 0,
	1, 1, 3, 1, 1, 2, 4, 1, 1, 1,
	1, 0, 1, 2, 9, 9, 7, 1, 2, 3,
	3, 3, 0, 4, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 4, 1, 1, 1, 3,
	3, 4, 3, 3, 0, 1, 1, 1, 0, 2,
	7, 8, 10, 2, 2, 8, 0, 3, 3, 0,
	3, 0, 3, 0, 5, 1, 3, 0, 3, 3,
	0, 2, 9, 8, 0, 2, 2, 3, 3, 0,
	2, 0, 2, 4, 4, 4, 5, 1, 0, 2,
	2, 1, 3, 2, 1, 3, 2, 1, 3, 2,
	0, 1, 3, 4, 3, 1, 1, 4, 1, 3,
	1, 1, 1, 1, 0, 1, 1, 1, 11, 0,
	2, 3, 3, 2, 2, 3, 1, 1, 3, 3,
	3, 3, 1, 3, 3, 4, 0, 2, 2, 2,
	2, 2, 2, 2, 6, 7, 10, 0, 4, 1,
	1, 0, 3, 0, 1, 0, 1, 1, 2, 4,
	4, 4, 0, 1, 8, 2, 4, 4, 4, 9,
	0, 2, 11, 9, 11, 8, 6, 9, 7, 10,
	7, 6, 7, 10, 2, 2, 9, 4, 5, 3,
	0, 4, 1, 3, 0, 3, 6, 0, 2, 10,
	0, 2, 0, 2, 0, 3, 2, 4, 3, 0,
	2, 1, 0, 2, 3, 0, 2, 3, 0, 2,
	1, 0, 3, 2, 4, 3, 0, 1, 0, 1,
	1, 0, 6, 0, 3, 5, 0, 4, 0, 3,
	1, 3, 4, 5, 0, 3, 1, 3, 2, 3,
	1, 2, 0, 4, 6, 5, 0, 2, 0, 2,
	4, 5, 4, 5, 1, 5, 6, 5, 0, 3,
	0, 1, 1, 3, 3, 3, 0, 4, 1, 3,
	3, 3, 0, 1, 1, 3, 2, 3, 3, 3,
	4, 4, 3, 3, 3, 3, 4, 4, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	5, 4, 1, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	4, 0, 5, 5, 5, 5, 6, 0, 1, 1,
	3, 1, 1, 1, 1, 1, 7, 9, 7, 9,
	2, 1, 7, 9, 7, 9, 8, 5, 0, 1,
	0, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	3, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 2, 1, 2, 2, 1,
	1, 2, 2, 2, 3, 3, 2, 2, 1, 5,
	6, 4, 1, 1, 1, 5, 4, 1, 1, 2,
	0, 1, 1, 2, 5, 0, 1, 1, 2, 2,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 2,
	2, 2, 0, 4, 7, 3, 3, 0, 3, 0,
	3, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 3, 5, 2, 2, 2, 2,
	4, 1, 1, 2, 5, 6, 8, 6, 6, 6,
	1, 1, 1, 1, 1, 1, 3, 9, 1, 4,
	4, 4, 7, 9, 7, 7, 7, 9, 7, 7,
	0, 2, 0, 1, 1, 2, 4, 1, 2, 2,
	1, 2, 2, 1, 2, 2, 2, 2, 2, 0,
	1, 1, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 5, 0, 1, 3, 0, 1,
	0, 2, 0, 2, 0, 1, 6, 8, 8, 6,
	6, 5, 5, 5, 6, 6, 6, 6, 5, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	1, 1, 1, 4, 4, 6, 8, 6, 4, 5,
	4, 4, 4, 3, 4, 6, 6, 7, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 8, 4, 2, 3,
	2, 4, 2, 2, 4, 6, 2, 2, 4, 6,
	4, 2, 4, 4, 4, 0, 1, 2, 3, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 3, 0, 1, 1, 3,
	1, 3, 3, 3, 3, 3, 2, 1, 1, 1,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	1, 3, 4, 4, 5, 4, 5, 3, 4, 5,
	6, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 2, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 4, 4, 1, 2, 3, 5, 1, 1, 3,
	0, 1, 0, 3, 0, 3, 3, 0, 3, 5,
	0, 3, 5, 0, 1, 1, 0, 1, 1, 2,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -616, -619, -2, -5, 638, -1, -4, -122, -91,
	-7, -14, -124, -125, -8, -120, -9, -10, -12, -98,
	-115, -117, -119, -118, -47, -11, -114, -85, -86, -100,
	-108, -111, -112, -113, -126, -121, -123, -184, -127, -128,
	-129, -171, -132, -134, -135, 628, -92, -93, -94, -95,
	-96, -97, -33, -32, -31, -30, -157, -162, -165, -167,
	-130, 561, 634, 464, 14, 513, -15, -16, -562, -17,
	267, -367, -368, -369, -371, -620, -48, -49, -50, -60,
	-61, -62, -63, -64, -74, -75, -76, -51, -52, -53,
	-56, -54, -67, -66, -68, -69, -70, -71, -72, -73,
	-55, -59, -160, -161, -77, -57, -78, -58, -169, -172,
	-131, -79, -80, -81, -83, -82, -88, -84, -89, -159,
	-164, -13, -170, -90, 241, -87, 77, -101, -102, -103,
	-104, -105, -106, -107, -109, -110, 388, 394, 451, 627,
	62, -185, -187, 657, 658, 661, 548, 551, 163, 164,
	166, 167, 171, 174, -34, -35, -36, -37, -38, -39,
	-41, -40, -42, -43, -44, -45, -46, 237, 16, 556,
	-18, -21, -19, -22, -20, -28, -29, -27, -24, -26,
	-158, -25, -163, -23, -166, -168, -133, 262, 261, 39,
	328, 329, 330, 392, 260, 238, 240, 15, 32, 43,
	367, -186, 86, 549, 239, -188, 13, 663, -6, -3,
	-2, -144, -148, -152, -155, -156, -153, -154, -4, -122,
	121, 252, 629, -363, 384, 630, 632, 631, 89, 97,
	-356, -358, 464, 267, 388, 394, 627, 658, 661, 548,
	551, 563, 564, 565, 566, 567, 568, 569, 570, 572,
	573, 574, 575, 576, 577, 578, 588, 589, 579, 580,
	581, 582, 583, 584, 585, 586, 590, 591, 592, 593,
	594, 595, 596, 597, 598, 599, 600, 601, 602, 603,
	516, 613, 614, 615, 616, 544, 571, 607, 608, 609,
	610, 365, 366, 553, 279, 303, 419, 309, 316, 163,
	183, 177, 206, 197, 549, 172, 283, 321, 284, 96,
	166, 499, 111, 476, 448, 169, 298, 300, 302, 545,
	546, 378, 305, 543, 304, 306, 308, 547, 285, 368,
	193, 188, 297, 281, 186, 286, 41, 287, 361, 360,
	211, 288, 289, 558, 472, 364, 478, 313, 53, 446,
	187, 473, 301, 475, 215, 219, 490, 351, 491, 181,
	182, 480, 493, 210, 213, 214, 259, 357, 358, 44,
	555, 271, 494, 217, 653, 209, 204, 502, 317, 315,
	362, 208, 180, 203, 282, 66, 221, 220, 222, 442,
	443, 444, 445, 290, 291, 382, 489, 200, 189, 369,
	173, 23, 497, 266, 477, 395, 292, 310, 318, 216,
	218, 273, 278, 333, 557, 450, 363, 277, 314, 495,
	185, 270, 299, 265, 498, 654, 174, 397, 293, 167,
	307, 492, 656, 501, 65, 410, 179, 170, 645, 646,
	256, 164, 275, 280, 655, 294, 295, 296, 542, 320,
	319, 311, 171, 550, 201, 272, 207, 191, 178, 202,
	165, 274, 500, 411, 625, 367, 429, 199, 196, 276,
	249, 496, 479, 168, 433, 412, 194, 322, 620, 621,
	622, 383, 356, 323, 324, 192, 263, 470, 471, 327,
	439, 346, 413, 449, 420, 414, 228, 229, 331, 482,
	484, 212, 623, 335, 336, 337, 474, 338, 339, 340,
	341, 387, 57, 59, 98, 101, 100, 659, 660, 64,
	30, 373, 376, 408, 415, 348, 626, 554, 345, 349,
	350, 377, 26, 431, 399, 435, 434, 49, 50, 51,
	54, 55, 56, 58, 60, 61, 52, 541, 392, 405,
	503, 46, 48, 402, 28, 379, 430, 452, 344, 432,
	463, 47, 461, 462, 483, 27, 381, 380, 63, 45,
	438, 440, 441, 325, 342, 390, 635, 504, 385, 401,
	404, 386, 347, 375, 406, 68, 67, 398, 636, 393,
	391, 343, 559, 560, 352, 587, 370, 447, 538, 537,
	536, 535, 534, 533, 532, 531, 328, 329, 330, 416,
	417, 418, 428, 421, 422, 423, 424, 425, 426, 427,
	466, 467, 637, 485, 487, 488, 486, 244, 662, 371,
	372, 247, 639, 640, 99, 641, 643, 642, 29, 644,
	652, 649, 650, 651, 562, 232, 647, -445, -443, -363,
	549, 627, 394, 548, 551, 388, 367, 658, 661, 392,
	267, 328, 329, 330, 464, 365, -236, -363, 662, -197,
	251, 40, -250, -363, -197, -87, -16, -15, -186, -187,
	-250, 246, -372, 24, 446, -99, 447, 241, 242, 86,
	78, -363, -9, -113, -8, -120, -85, -184, 451, -370,
	-363, 328, 328, -370, 246, -365, 277, 427, -363, -500,
	252, -449, -422, 278, -448, -424, -451, -425, 33, 237,
	239, 238, 561, 274, 16, 392, 248, 14, 13, 393,
	260, 26, 27, 29, 15, 394, 396, 30, 397, 400,
	401, 402, 43, 405, 406, 267, 89, 97, 92, 285,
	-235, -363, -398, -390, 118, -393, -385, -386, -388, -341,
	-536, -383, 86, 145, 146, 153, 119, 664, -387, -481,
	37, 121, 567, 571, 607, 514, -333, -334, -335, -336,
	-337, -338, 552, -363, -537, -535, 92, 102, 104, 108,
	109, 107, 105, 157, 190, 106, 93, 158, -187, 89,
	-557, 577, -357, 600, 613, 614, 615, 616, 599, 62,
	-507, -515, 245, -513, 156, 195, 263, 191, 14, 151,
	439, 192, 608, 609, 610, 574, 596, 516, 578, 588,
	603, 569, 570, 572, 564, 565, 566, 568, 579, 581,
	595, -516, 591, 601, 602, 587, 611, 612, 649, 604,
	605, 606, 643, 91, 90, 594, 593, 580, 575, 576,
	582, 563, 573, 583, 584, 592, 597, 598, 376, 111,
	377, 378, 506, 368, 81, 379, 252, 446, 71, 380,
	381, 382, 383, 384, 513, 385, 72, 386, 375, 267,
	429, 387, 194, 212, 518, 517, 519, 510, 507, 505,
	508, 509, 511, 512, 585, 586, 590, -136, -138, 618,
	-610, -324, -611, 6, 7, 8, 9, -612, 158, -601,
	448, 557, 92, 321, 365, 17, 506, 648, 547, 648,
	547, 168, 165, -436, 168, 117, 174, 173, 250, 168,
	-436, -363, 171, 648, 170, 645, 331, -412, -175, 365,
	429, 338, 98, 277, -416, -413, 545, -501, 325, 321,
	297, 247, 114, -176, 257, 256, 112, 506, 245, 403,
	316, 57, 59, -572, -573, 234, 235, 236, -564, 539,
	-563, -363, 648, 653, 378, 100, 101, 645, 646, 28,
	246, 389, 273, 484, 482, 483, 485, 486, 487, 488,
	-65, -517, -499, 479, 478, -376, 471, 477, 469, 481,
	472, 366, 340, 561, 339, 237, 639, 546, 540, -351,
	413, 449, 503, 504, 390, 450, 490, 492, 473, 111,
	198, 195, 247, 249, 246, 645, 365, 506, 429, 98,
	338, 246, -572, 653, 165, 490, 492, 448, 277, 427,
	42, -442, 439, -441, -443, 491, 502, 90, 91, 489,
	-351, 111, 470, 470, -610, -324, -185, -187, -123, -562,
	547, 648, 247, 365, 429, 277, 248, 246, 542, 545,
	249, 506, 245, 328, 389, 273, 338, 98, 170, 645,
	-191, -192, -193, 230, 231, 232, 70, 235, 233, 67,
	33, 34, 35, -1, 125, 663, -390, -390, -6, 666,
	-6, -390, -363, -363, 160, -257, -261, -258, -260, -259,
	-263, -262, 195, 196, 156, 199, 205, 201, 202, 203,
	204, 206, 207, 208, 209, 210, 213, 214, 211, 32,
	212, 263, 191, 192, 193, 194, 215, 177, 197, 554,
	223, 178, 224, 179, 225, 180, 226, 181, 182, 227,
	183, 186, 187, 188, 189, 185, 159, -224, 92, 33,
	86, 159, 92, -216, 269, -197, -250, -242, 159, 664,
	-216, -610, -207, -208, 11, -250, -339, -363, 448, 128,
	-99, 78, -99, 447, 78, -99, 447, 241, -565, -566,
	-567, -569, 241, 447, 446, 242, -118, 159, 285, 17,
	-370, -370, 84, -250, -424, 277, -449, -422, 37, 83,
	160, 250, 160, 83, 86, 390, 365, 429, 391, 506,
	246, 403, 249, 277, 404, 365, 429, 246, 249, 506,
	277, 365, 246, 249, 429, 277, 404, 365, 469, 470,
	249, 28, 395, 398, 399, 470, -521, 502, 160, 117,
	114, 115, 116, -390, 135, -405, 128, 129, 130, 131,
	132, 133, 134, 142, 141, 152, 145, 146, 147, 148,
	149, 150, 151, 143, 144, 138, 118, 136, 140, 137,
	120, 155, -187, -390, -398, 62, -388, -388, -388, -388,
	-363, -481, -395, -390, 86, 86, 86, 86, 86, 159,
	105, 92, -390, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, -514, 86, 86, -402, -403,
	86, 86, -383, -339, 86, 92, 92, 86, 86, 86,
	92, 86, 86, 86, -403, -403, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, -208, 160, -207, 86, -207, -208, -188, -187,
	33, 34, 33, 34, 33, 34, 33, 34, -613, 636,
	86, 102, 659, 228, 17, -363, 645, -363, -595, 33,
	550, 550, 550, 550, 495, 556, 172, 173, 174, -363,
	171, 250, -363, -410, 252, -410, -410, -234, -363, 273,
	389, 249, 542, 249, -176, -410, -410, -410, -410, -410,
	248, -410, 24, 246, 246, 246, 246, -410, 513, 128,
	128, 60, -574, 176, 160, -564, -215, 86, -595, 654,
	655, 656, -375, 136, 140, -375, -320, 18, -320, 24,
	24, 275, 275, 275, -375, 315, -621, -622, 17, 138,
	-373, -622, -373, -373, -375, -623, 248, 480, 44, 276,
	275, -209, -210, 22, -209, 474, 470, -466, 475, 476,
	-377, -622, -376, -375, -375, -376, -375, -375, -375, 33,
	246, 249, 506, 338, 640, -621, -621, 32, 32, -500,
	-500, -250, -500, -500, 540, -352, -363, -500, -500, -500,
	-304, -305, -250, -575, 251, 656, -607, -606, 493, -609,
	495, 165, -443, 165, -443, 89, -424, 277, 277, 160,
	128, 24, -444, 128, 139, -443, -443, -444, -444, -274,
	42, -362, 156, -363, 92, -274, 42, -604, -603, -250,
	-208, -188, -187, 87, 87, 87, 550, -595, -500, -500,
	-500, -500, -500, -501, -500, -500, -500, -500, -500, -370,
	-225, -363, -236, 252, -500, -500, -500, -500, -189, -190,
	147, -390, -363, -193, -3, -146, -145, 122, 123, 125,
	630, 384, 629, 633, 627, -443, 42, -494, 411, 410,
	-488, -490, 86, -489, 86, -489, -489, -489, -489, -489,
	86, 86, -491, 86, -491, -491, -488, -492, 86, -492,
	-493, 86, -493, -492, -363, -470, 556, -396, -398, -363,
	40, -510, 62, -184, 86, 32, 86, -216, -363, 192,
	170, 644, 36, -511, 62, -184, 86, 32, -208, -139,
	40, -210, 21, 159, 102, 92, -118, -99, 78, -118,
	-99, -99, 87, 160, -568, 108, 109, -570, 210, 201,
	-363, -116, 92, -535, -7, -11, -8, -9, -10, -47,
	-85, -184, 548, 551, -538, -536, 86, 33, 438, 83,
	17, -450, 246, 506, 389, 273, 249, 365, -448, -431,
	-428, -426, -362, -424, -427, -426, -453, -339, 470, -140,
	453, 452, 327, -390, -390, -390, -390, -390, 107, 118,
	356, 108, 109, -385, -406, 33, 323, 324, -386, -386,
	-386, -386, -386, -386, -386, -386, -386, -386, -386, -386,
	-394, -404, -481, 86, 138, 136, 140, 137, 120, -388,
	-388, -386, -386, -276, -362, 156, 87, 160, -390, -561,
	-560, 122, -390, -390, -390, -390, -417, -419, -339, 86,
	-363, -558, -559, 520, 521, 522, 523, 524, 525, 526,
	527, 528, 529, 530, 380, 375, 381, 379, 368, 387,
	382, 383, 194, 537, 538, 531, 532, 533, 534, 535,
	536, -396, -396, -390, -558, -396, -332, 34, 33, -398,
	-398, -398, 87, -390, -571, 354, 353, 355, -211, -363,
	-396, 87, 87, 87, 102, -398, -398, -396, -386, -396,
	-396, -396, -396, -559, -332, -332, -332, -332, 147, -398,
	-398, -332, -332, -332, -332, 147, -332, -332, -332, -332,
	-332, -332, -332, -332, -332, -332, -332, 87, 87, 87,
	147, -398, -209, -138, -519, -518, -390, 42, -139, -210,
	-614, 637, 86, -339, -602, 92, 92, 664, 170, 645,
	17, 506, -363, 17, 246, -363, 102, -363, 102, 496,
	497, 169, 173, 172, -363, 171, -363, -363, 118, -363,
	-363, 36, -236, -225, -410, -410, -410, -579, -363, 93,
	-432, -429, -426, -363, -363, -422, -363, -352, -250, -410,
	-410, -410, -410, -250, -285, 54, 55, 56, -426, -177,
	57, 58, -575, -563, 36, -214, -363, -320, -388, -388,
	-390, 365, 506, 246, -426, 277, -621, -375, -375, -353,
	-352, -377, -372, -377, -377, -320, -373, -375, -375, -390,
	-377, -373, -320, -363, 470, -320, -320, -466, -375, -374,
	-363, -374, -410, -352, -353, -353, -250, -250, -299, -306,
	-300, -307, 269, 243, 373, 374, 240, 238, 11, 239,
	-314, 316, -411, 514, -280, -281, 78, 43, -283, 267,
	415, 408, 279, 283, 96, 284, 448, 285, 248, 287,
	288, 289, 304, 306, 259, 290, 291, 292, 439, 293,
	164, 305, 294, 295, 296, 391, -275, 6, 341, 42,
	52, 53, 462, 461, 559, 556, 280, -363, -579, -577,
	32, -363, 32, -432, -426, -363, -363, 160, 250, -200,
	-202, -199, -195, -196, -201, -323, -325, -198, 86, -250,
	-187, -363, -443, 160, 494, 496, 497, -607, -444, -607,
	-444, 250, 33, 438, -447, 438, 33, -422, -441, 490,
	492, -437, 92, 439, -427, -446, 83, 156, -518, -444,
	-444, -446, -446, 155, 160, -605, 495, 496, 234, -209,
	102, -232, 647, -252, -250, -579, -431, -422, -363, -500,
	-252, -252, -252, -365, -365, 86, 159, 37, -363, -363,
	-363, -363, -319, 160, -318, 17, -364, -363, 36, 92,
	159, -147, -145, 124, -390, -6, 629, -390, -6, -6,
	-390, -6, -390, -498, 412, 102, 102, -342, 92, -342,
	102, 102, 102, 562, 87, 92, -435, 83, -512, -399,
	-556, 618, -218, 87, -211, -554, -555, -211, -217, -363,
	-510, -242, 128, 128, 128, 25, -512, -218, 87, -554,
	-209, 619, -139, -206, -205, -390, -363, 24, -118, -99,
	-566, 159, 160, -214, -450, -430, -427, -452, 147, -363,
	-438, 160, 556, 667, 90, 250, -592, -591, 430, 87,
	160, -522, 251, 513, 92, 664, 446, 228, 229, 107,
	356, 108, 109, -481, -398, -394, -388, -388, -386, -386,
	-392, 264, -392, 117, -390, 665, -389, -560, 124, -390,
	36, 160, 36, 160, 84, 160, 87, -488, -390, 159,
	87, 87, 17, 17, 87, -390, 87, 87, 87, 87,
	17, 17, -390, 87, 159, 87, 87, 87, 87, 84,
	87, 160, 87, 87, 87, 87, 160, -398, -398, -390,
	-398, 87, 87, 87, -390, -390, -390, -398, 87, -390,
	-390, -390, -390, -390, -390, -390, -390, -390, -390, -214,
	-460, 465, -460, -460, 160, 160, 160, 87, -139, 86,
	102, 160, 660, -346, -345, 92, -363, -363, 170, 645,
	-363, 92, 645, -363, 92, 170, 174, 174, 173, -363,
	92, 37, 24, 24, 314, -235, 86, 86, -250, -250,
	-250, -581, 416, -593, 160, 42, -591, 506, -173, 327,
	-414, 84, -180, 334, 17, 556, -250, -250, -250, -250,
	-264, 36, 17, -194, -251, -363, 86, 87, 160, -363,
	-363, -363, -423, 84, -363, -353, -320, -320, -377, -320,
	-320, 160, 23, -375, -377, -377, -242, -373, -242, 159,
	-242, -352, -487, 36, -215, 160, 21, 269, -249, -360,
	-246, -248, 254, -380, -247, 257, -550, 255, 253, 112,
	258, 312, 113, 248, -360, -360, 254, -284, 250, 36,
	-360, -302, 248, 359, 312, 255, 21, 269, -301, 248,
	113, -363, 254, 258, 255, 253, -359, 128, -351, 155,
	250, 44, 391, -359, 560, 269, -359, -359, -359, -359,
	-359, -359, -359, 286, 286, -359, -359, -359, -359, -359,
	-359, -359, -359, -359, -359, -359, 165, -359, -359, -359,
	-359, -359, -359, 86, 281, 282, 314, -582, 416, 32,
	371, 371, 372, -593, 367, 43, 32, -181, 365, -305,
	-303, -374, 32, -326, -327, -328, -329, -331, -330, 69,
	73, 75, 79, 70, 71, 72, 76, 81, 74, 32,
	160, -361, -366, 36, -363, 92, -361, -187, -202, -200,
	-361, 86, -444, -606, -608, 498, 495, 501, -446, -446,
	102, 250, 86, 128, -446, -446, 42, -362, -603, 502,
	496, -139, 160, 83, -252, -226, -227, -228, -229, -257,
	-339, 196, 199, 201, 202, 203, 204, 206, 207, 208,
	209, 210, 213, 214, 211, 212, 263, 191, 192, 193,
	194, 215, 177, 197, 554, 178, 179, 180, 181, 182,
	183, 186, 187, 188, 189, 185, -363, -236, -232, -320,
	-190, -202, -363, 92, -363, 147, 125, -6, 123, -151,
	-150, -149, 126, 627, 633, 125, 125, 125, 87, 87,
	87, 160, 87, 87, 87, 160, 87, 160, 102, -525,
	475, 41, 160, 86, 87, 160, 62, 160, 128, 87,
	160, -390, -363, 92, -390, 192, 87, 62, -139, 92,
	160, -203, 38, 39, 159, 448, -363, -536, 87, -452,
	160, 250, 159, 159, -428, 394, -362, -430, 21, 556,
	-339, 40, -346, 128, 664, -363, 87, -392, -392, 117,
	-388, -385, 87, 125, -390, 123, -255, -257, 410, 411,
	-390, -255, -256, -262, 156, 195, 263, 194, 193, 191,
	410, 411, -274, -419, 553, -203, 87, -363, -390, -390,
	87, -390, -390, 17, -363, -274, -386, -390, -208, -208,
	87, 87, -459, -460, -459, -459, 87, 87, 87, 87,
	-459, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 86, 102, 104, 102, 104, -518, -615, 64,
	635, 63, 438, 107, 317, 160, 102, 92, 665, 160,
	128, 92, -363, -363, 17, 246, -363, 17, 174, 92,
	-594, 321, 365, 506, 246, 365, 321, 506, 246, -471,
	102, 402, -237, -238, -239, -240, -241, 138, 161, 162,
	-226, -215, 86, -215, -584, 477, 418, 428, -359, -382,
	-381, 367, 43, -505, 439, 424, 425, -429, 277, -352,
	-590, 99, 128, 83, 345, 349, 351, 350, 346, 347,
	348, -408, -409, -407, -411, -352, -577, 86, 86, -184,
	36, 136, -180, 334, 86, 86, 36, -482, 335, -257,
	-250, -194, -363, 17, 160, -576, 159, -1, -363, -363,
	-422, -375, -320, -390, -390, -320, -375, -375, -377, -363,
	-242, -482, -257, 36, -300, 243, 239, -456, 314, 315,
	-457, -472, 317, -474, 86, -254, -339, -247, -549, -550,
	-410, -363, 113, -549, 113, 86, -254, -339, -339, -303,
	-339, -363, -363, -363, -363, -310, -309, -339, -312, 33,
	-313, -363, -363, -363, -363, 113, -363, 113, -279, 42,
	49, 50, 51, 334, -359, -359, 198, -282, 42, 438,
	440, 441, -312, 102, 102, 102, 102, 92, 92, 92,
	-359, -359, 102, 92, -366, 92, -551, 173, 46, 47,
	102, 102, 102, 102, 42, 92, -287, 42, 297, 301,
	298, 299, 300, 92, 102, 42, 102, 42, 102, 42,
	-363, 86, -552, -553, 92, -471, -584, -359, 371, -443,
	128, 128, -382, -586, 96, 419, -586, -589, 327, -183,
	506, 33, -219, 243, 239, -577, -434, -433, -339, -199,
	-199, -199, -199, -199, -199, 69, 80, 69, -212, 86,
	69, 74, 69, 74, 69, -328, 69, 80, -434, -201,
	-215, -366, 87, -600, -599, -598, -596, 77, 251, 78,
	-396, -446, 495, 499, 500, -430, -378, 92, -437, -223,
	24, -250, -250, -503, 307, 308, 87, 160, -257, -322,
	19, 159, 121, -6, -147, -149, -390, -6, -390, 629,
	384, 630, 92, 102, 102, -533, 459, 454, 456, 113,
	-399, -520, -519, 62, -184, -211, -512, -555, -518, -363,
	665, 665, 665, 665, 92, 62, -184, -512, -223, -525,
	-205, -204, 45, -363, 102, 17, -427, -422, 147, 147,
	-363, 395, -438, 92, 417, 92, 246, 665, 92, -346,
	-385, -390, 87, -265, 182, 181, -265, 36, 87, 87,
	-489, -489, -488, -491, -488, -265, -265, 87, 86, -203,
	87, 24, 87, 87, 87, -390, 87, 87, 160, -508,
	515, -509, 589, -459, -459, -459, -459, -459, -459, -459,
	-459, -459, -459, -459, -459, -459, -459, -459, -459, -459,
	-401, -400, 269, 460, 642, 642, 460, 642, 642, 87,
	160, -558, 160, -354, 322, -354, -345, 92, 250, 92,
	170, -363, 92, 645, 92, -363, -363, -363, 314, -363,
	314, -363, -363, 92, 92, 87, 160, -339, 87, 36,
	-243, -244, -245, -254, -246, -248, 36, -585, 96, -580,
	92, -363, 93, -586, 158, 369, 42, 420, 421, 436,
	364, 102, 102, 426, -578, -363, -182, 246, 365, -588,
	53, 128, 92, -250, -407, -351, 155, 288, -242, 338,
	-317, -316, -363, 92, -243, -184, -250, -250, -243, -243,
	-184, -483, 337, 21, 102, 146, -216, 84, 159, -202,
	-251, -363, 147, 87, -320, -242, -320, -320, -375, -483,
	-184, -468, 318, 86, -466, 86, -466, 113, 346, -475,
	-473, 269, -308, 46, 48, -257, -547, -363, -545, -547,
	-363, -545, -545, -410, -390, -308, -254, 250, 32, 239,
	-311, 343, 344, 349, 351, -439, 313, 118, -439, 160,
	-203, 160, -363, -274, -274, 32, 92, 92, -252, 87,
	160, 128, 92, -585, -580, 128, -444, 92, 92, -586,
	92, 92, -590, 128, -253, 246, -352, 160, -219, -219,
	-320, 160, 128, -221, -220, 83, 84, -222, 83, -220,
	-220, 69, -213, 92, 69, 69, -320, -598, -597, 24,
	-550, -550, -550, 87, 87, 15, -228, 42, -321, 20,
	21, 147, 125, 123, 125, 125, -363, 87, 87, -495,
	620, -529, -531, 454, 21, 21, 15, 251, 87, -512,
	665, -512, -533, 46, 47, -422, -438, 439, -250, 160,
	665, -255, -293, 92, -390, 87, -390, 87, 92, 87,
	92, -208, 21, 87, 160, 87, 87, 87, 160, 87,
	87, -390, 87, -558, -355, 192, 92, -355, 365, -364,
	-363, 17, -363, 92, -363, -471, 314, -471, 314, 246,
	-363, -232, -415, 555, -239, -257, 244, -184, 87, 160,
	-184, 92, -583, 430, 102, 42, 102, 158, 422, -506,
	-174, 96, -252, 33, -219, -587, 96, 128, 664, 86,
	-359, -359, -359, 250, -363, 87, 160, -359, -359, 87,
	250, 87, 87, -272, 556, -484, 268, 102, 146, 102,
	146, 102, -361, -202, -363, -320, -576, 159, -320, -484,
	-458, 319, 102, -386, 86, -386, 86, -467, 316, 86,
	87, 160, -363, -339, -269, -268, -266, 107, 118, 42,
	408, -267, 96, 155, 302, 305, 304, 280, 303, -298,
	-379, 83, 414, 343, 344, -411, 620, 544, 253, 112,
	113, 396, -380, 86, 86, 84, 322, 86, 86, -547,
	87, -308, -339, 42, -311, 42, 357, 313, -309, -363,
	155, -274, 87, -553, 92, -583, 92, -446, -588, 92,
	-174, -252, -577, -208, -433, -518, -390, 86, -390, 87,
	86, 69, 11, 19, -383, -390, -398, 649, 651, 652,
	252, -6, 630, 384, -289, 621, 92, 21, 92, -527,
	92, -434, -495, -142, -286, -351, 285, 87, -292, 138,
	556, 87, 87, -459, -459, -462, -461, -465, 460, 314,
	468, -398, 92, 92, 87, 87, 92, -363, 170, 92,
	664, 92, -471, 92, -471, -363, 314, 92, 92, -230,
	-257, -178, 556, -272, -245, -178, 21, 556, 368, 42,
	102, 42, 423, 92, -182, 128, 108, 109, -347, -348,
	92, -417, -274, -276, 92, 365, -316, -383, -383, -270,
	-184, 36, -271, -314, -411, 365, -141, -140, -270, 86,
	-485, 164, 102, 146, 102, 102, -320, -320, -485, -474,
	21, 87, -453, 87, -453, 86, 128, -386, -473, -476,
	62, -266, 107, -386, 92, -276, -277, 42, 301, 297,
	128, 128, -278, 42, 281, 282, -288, 86, 312, 15,
	198, 86, 113, 113, -250, -417, -417, -548, 345, 346,
	347, 352, 349, 350, 348, 351, -548, -417, -417, 86,
	-440, -439, -386, -359, -359, 155, -587, -209, -214, -546,
	-363, 253, 21, 21, -504, 556, 650, 86, 86, -363,
	-363, -343, 622, 102, 92, 456, -289, -496, 623, -523,
	-466, -274, 128, 87, 76, 554, 557, 87, -464, 120,
	422, 426, -384, -387, 102, 104, 190, 158, 87, 87,
	-363, -350, -349, 92, -232, 92, -232, 92, 314, -471,
	555, -179, 61, 502, 92, 93, 417, 92, 93, 368,
	-174, 92, 665, 160, 128, 87, -363, -454, 269, -184,
	160, -314, -351, -363, -142, -454, -273, -315, -363, 92,
	-502, 173, 336, 556, 102, 146, 102, -208, -486, 173,
	336, -457, 87, 87, 87, -453, 102, 87, -480, -477,
	86, -314, 271, 138, 92, 92, 102, 86, -513, 32,
	92, -418, 86, 87, 87, 87, 87, -417, 102, -274,
	-359, 87, 87, 160, 652, 86, -398, -398, 86, 21,
	-343, -497, 624, 92, -532, 459, -526, -524, 454, 455,
	456, 457, 92, 555, 66, 558, -463, -464, 426, -384,
	-387, 618, 466, 466, 466, 665, 160, 128, -232, -232,
	-471, 92, -233, -363, 312, 439, -348, 92, -420, -455,
	321, 21, -314, -359, -455, 87, 160, -359, -359, 336,
	102, 146, 102, -209, 336, -469, 320, 87, -480, -314,
	-479, -478, 319, 272, 86, 87, -390, -402, -359, 87,
	-291, -290, 552, -417, -420, 84, -420, 84, -420, 84,
	-420, 84, 87, -274, -363, 253, -137, 86, 87, 87,
	-344, -363, -527, 92, -534, 251, -530, -531, 458, -524,
	21, 456, 21, 21, -143, 160, 66, 117, 467, 467,
	467, -232, -349, 92, 92, -232, -231, 36, 461, 395,
	-421, 259, 357, 358, 96, 556, 343, 344, 362, 361,
	360, 363, 21, -456, -274, -315, -383, -383, 102, 102,
	87, 160, -363, 268, 86, -397, -391, -390, 268, 87,
	-363, -297, -295, -296, 83, 473, 310, 311, 87, -548,
	-548, -548, -548, -298, 87, 160, -396, 87, 160, -541,
	86, 102, -529, -528, -530, 21, -527, 21, -527, -527,
	463, 556, -463, -232, 92, -359, -359, 92, 92, 342,
	-359, -359, -359, -359, -339, 86, -468, -478, -477, -397,
	87, 160, -439, -296, 83, -295, 83, 16, 15, -420,
	-420, -420, -420, 86, 87, -363, -544, 32, 87, -540,
	-539, -340, -535, -363, 459, 460, 92, -527, 128, 557,
	-618, -617, 641, 102, 102, -363, 102, 102, 102, 92,
	-453, -458, 87, -391, -294, 307, 308, 32, 173, -294,
	-396, -543, -542, -341, 87, 160, 159, 92, 558, 92,
	87, -474, 107, 42, 309, 87, 160, 128, -539, -363,
	-542, 42, -390, 159, -363,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 316, 317, 318, 319,
	320, 321, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 0, 0, 0, 0, 0, 723, 724, 0, 687,
	0, 0, 0, 0, 0, 0, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, 592,
	593, 594, 595, 596, 431, 432, 433, 434, 435, 436,
	437, 438, 439, 440, 0, 350, 346, 258, 259, 260,
	261, 262, 263, 264, 357, 358, 536, 0, 0, 0,
	0, 806, -2, 102, 0, 0, 0, 0, 339, 0,
	330, 330, 0, 0, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, -2, 736, 0,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 415, 416, 417,
	411, 412, 414, 413, -2, 0, 0, 736, 0, 0,
	0, 814, 0, 0, 0, 857, 875, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1424, 1425,
	1426, 1427, 2230, 2200, -2, 1962, 1936, 2124, 2125, 2019,
	2032, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276,
	2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286,
	2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296,
	2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306,
	2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316,
	2317, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
	1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
	1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
	1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931,
	1932, 1933, 1934, 1935, 1937, 1938, 1939, 1940, 1941, 1942,
	1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952,
	1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1963,
	1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973,
	1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983,
	1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993,
	1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
	2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
	2014, 2015, 2016, 2017, 2018, 2020, 2021, 2022, 2023, 2024,
	2025, 2026, 2027, 2028, 2029, 2030, 2031, 2034, 2035, 2036,
	2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,
	2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
	2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066,
	2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076,
	2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086,
	2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096,
	2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106,
	2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116,
	2117, 2118, 2119, 2120, 2121, 2122, 2123, 2126, 2127, 2128,
	2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138,
	2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148,
	2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, -2, 2158,
	2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168,
	2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178,
	2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188,
	2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198,
	2199, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209,
	2210, 2211, 2212, 2213, 2214, 2215, -2, -2, -2, 2219,
	2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229,
	2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240,
	2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250,
	2251, 2252, 2253, 2254, 2255, 2256, 2257, 0, 314, 312,
	1906, 1936, 1962, 2019, 2032, 2033, 2072, 2124, 2125, 2157,
	2200, 2216, 2217, 2218, 2230, 0, 0, 1012, 0, 784,
	0, 0, 789, 1371, 784, 351, 725, 726, 814, 840,
	685, 0, 389, 0, 1952, 393, 2207, 0, 0, 0,
	0, 682, 383, 384, 385, 386, 387, 388, 0, 0,
	985, 0, 0, 379, 0, 345, 2022, 2229, 1428, 0,
	0, 0, 0, 0, 201, 1138, 203, 1140, 207, 215,
	0, 0, 0, 220, 221, 224, 225, 226, 227, 228,
	0, 232, 0, 234, 237, 0, 239, 240, 0, 243,
	244, 245, 0, 255, 256, 257, 1141, 1142, 1143, -2,
	130, 1010, 1864, 1750, 0, 1757, 1770, 1781, 1510, 1511,
	1512, 1513, 0, 0, 0, 0, 0, 0, 1521, 1522,
	0, 1552, 2272, 2313, 2314, 0, 1530, 1531, 1532, 1533,
	1534, 1535, 0, 141, 153, 154, 1803, 1804, 1805, 1806,
	1807, 1808, 1809, 0, 1811, 1812, 1813, 1721, 1497, 1424,
	0, 2281, 0, 2303, 2308, 2309, 2310, 2311, 2302, 0,
	0, 1705, 0, 1695, 0, 0, -2, -2, 0, 0,
	2097, -2, 2315, 2316, 2317, 2278, 2299, 2307, 2282, 2283,
	2306, 2274, 2275, 2276, 2269, 2270, 2271, 2273, 2285, 2287,
	2298, 0, 2294, 2304, 2305, 2205, 0, 0, 2252, 0,
	0, 0, 2247, 155, 156, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1716, -2, 1718, -2, 1720, -2, 1723, -2,
	-2, -2, -2, 1728, 1729, -2, 1731, -2, -2, -2,
	-2, -2, -2, -2, 1707, 1708, 1709, 1710, 1699, 1700,
	1701, 1702, 1703, 1704, -2, -2, -2, 840, 933, 0,
	840, 0, 815, 862, 865, 868, 871, 818, 0, 0,
	103, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 340, 341, 329, 331, 0, 335, 0, 0, 331,
	328, 322, 0, 1181, 1181, 1181, 0, 0, 0, 1181,
	1181, 1181, 1181, 1181, 0, 1181, 0, 0, 0, 0,
	0, 1181, 0, 1047, 1145, 1146, 1147, 1179, 1180, 1257,
	0, 0, 0, 741, 737, 738, 739, 740, 828, 0,
	830, 833, 0, 0, 662, 662, 900, 900, 0, 608,
	0, 0, 0, 662, 0, 622, 614, 0, 0, 0,
	662, 0, 0, 835, 835, 0, 665, 672, 662, 662,
	-2, 662, 662, 659, 662, 0, 0, 1195, 628, 629,
	630, 614, 614, 633, 634, 635, 645, 646, 673, 1888,
	0, 0, 536, 536, 0, 536, 536, 0, 536, 536,
	536, 0, 743, 1978, 2067, 1959, 2038, 1916, 2022, 2229,
	0, 287, 2097, 292, 0, 1961, 1981, 0, 0, 2000,
	0, -2, 0, 367, 840, 0, 0, 814, 0, 0,
	0, 0, 536, 536, 536, 536, 536, 1256, 536, 536,
	536, 536, 536, 0, 0, 0, 536, 536, 536, 536,
	0, 876, 877, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 5, 6, 19, 0, 0, 0, 0,
	0, 0, 109, 108, 0, 1865, 1883, 1816, 1817, 1818,
	1870, 1820, 1874, 1874, 1874, 1874, 1849, 1850, 1851, 1852,
	1853, 1854, 1855, 1856, 1857, 1858, 1874, 1874, 0, 0,
	1863, 1840, 1872, 1872, 1872, 1870, 1867, 1821, 1822, 1823,
	1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833,
	1834, 1877, 1877, 1880, 1880, 1877, 0, 429, 427, 428,
	1746, 0, 0, 0, 0, 784, 788, 1369, 0, 0,
	0, 840, -2, 0, 0, 686, 390, 1429, 0, 0,
	394, 0, 395, 0, 0, 397, 0, 0, 0, 418,
	0, 421, 405, 406, 407, 408, 401, 0, 181, 0,
	381, 382, 0, 0, 347, 0, 0, 0, 537, 0,
	0, 0, 0, 0, 0, 212, 208, 216, 219, 229,
	236, 0, 248, 250, 253, 209, 217, 222, 223, 230,
	251, 210, 213, 214, 218, 252, 254, 211, 231, 235,
	249, 233, 238, 241, 242, 247, 0, 182, 0, 0,
	0, 0, 0, 1756, 0, 0, 1789, 1790, 1791, 1792,
	1793, 1794, 1795, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -2, 1750, 0, 0, 1516, 1517, 1518, 1519,
	0, 1523, 0, 1553, 0, 0, 0, 0, 0, 0,
	1810, 1814, 0, 1746, 1746, 0, 1746, 1742, 0, 0,
	0, 0, 0, 0, 1746, 1678, 0, 0, 1680, 1696,
	0, 0, 1682, 1683, 0, 1686, 1687, 1746, 0, 1746,
	1691, 1746, 1746, 1746, 1674, 1675, 0, 1742, 1742, 1742,
	1742, 0, 0, 1742, 1742, 1742, 1742, 1742, 1742, 1742,
	1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 0, 0,
	0, 0, 835, 0, 841, 0, -2, 0, 859, 861,
	863, 864, 866, 867, 869, 870, 872, 873, 820, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 71, 73,
	0, 0, 0, 0, 0, 0, 333, 0, 338, 324,
	2059, 0, 323, 0, 0, 0, 0, 0, 1009, 0,
	0, 1181, 1181, 1181, 1048, 0, 0, 0, 0, 0,
	0, 0, 0, 1181, 1181, 1181, 1181, 0, 1201, 0,
	0, 0, 743, 742, 0, 829, 0, 0, 70, 597,
	598, 599, 900, 0, 0, 601, 602, 0, 603, 0,
	0, 614, 662, 662, 620, 621, 616, 615, 668, 669,
	665, 0, 665, 665, 900, 0, 639, 640, 641, 662,
	662, 647, 836, 0, 648, 649, 665, 0, 670, 671,
	900, 0, 0, 900, 900, 0, 657, 658, 660, 662,
	0, 0, 1181, 0, 678, 616, 616, 1889, 1890, 0,
	0, 1192, 0, 0, 0, 0, 681, 0, 0, 0,
	445, 446, 0, 0, 744, 0, 266, 270, 0, 273,
	0, 2067, 0, 2067, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 310, 311, 0, 0, 0, 0, 301,
	304, 1363, 1364, 1135, 1136, 305, 306, 359, 360, 0,
	835, 858, 860, 854, 855, 856, 0, 1183, 0, 0,
	0, 0, 0, 536, 0, 0, 0, 0, 0, 719,
	0, 1027, 721, 0, 0, 0, 0, 0, 908, 902,
	904, 980, 141, 878, 8, 126, 123, 0, 19, 0,
	0, 19, 19, 0, 19, 315, 0, 1886, 1884, 1885,
	1819, 1871, 0, 1845, 0, 1846, 1847, 1848, 1859, 1860,
	0, 0, 1841, 0, 1842, 1843, 1844, 1835, 0, 1836,
	1837, 0, 1838, 1839, 313, 426, 0, 0, 1747, 1013,
	0, 762, 776, 757, 0, 765, 0, 0, 1371, 0,
	0, 0, 0, 745, 776, 747, 0, 765, 835, 812,
	0, 790, 0, 0, 391, 0, 402, 396, 0, 403,
	398, 399, 0, 0, 420, 422, 423, 424, 409, 410,
	683, 376, 377, 378, 368, 369, 370, 371, 372, 373,
	374, 375, 0, 0, 380, 151, 0, 348, 349, 0,
	0, 0, 195, 196, 197, 198, 199, 200, 202, 186,
	708, 710, 1127, 1139, 0, 1130, 0, 205, 246, 178,
	0, 0, 0, 1751, 1752, 1753, 1754, 1755, 1760, 0,
	1762, 1764, 1766, 1768, 0, 1786, -2, -2, 1498, 1499,
	1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
	1771, 1784, 1785, 0, 0, 0, 0, 0, 0, 1782,
	1782, 1777, 0, 1536, 1365, 1366, 1514, 0, 0, 1550,
	1554, 0, 0, 0, 0, 0, 0, 1162, 1870, 0,
	142, 1741, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652,
	1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662,
	1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672,
	1673, 0, 0, 1750, 0, 0, 0, 1743, 1744, 0,
	0, 0, 1633, 0, 0, 1639, 1640, 1641, 0, 771,
	0, 1706, 1679, 1697, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 932, 934, 0, 780, 782, 783, 809, 790,
	816, 0, 0, 0, 101, 106, 0, 1224, 0, 0,
	0, 0, 0, 0, 0, 74, 1196, 75, 1198, 342,
	343, 0, 0, 337, 325, 2059, 327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1063, 1064,
	534, 1121, 0, 0, 0, 1137, 1166, 1177, 0, 0,
	0, 0, 0, 1230, 1049, 1054, 1055, 1056, 1050, 1051,
	1057, 1058, 0, 831, 0, 0, 949, 600, 663, 664,
	901, 604, 0, 0, 611, 2022, 616, 900, 900, 623,
	617, 624, 667, 625, 626, 627, 665, 900, 900, 837,
	662, 665, 650, 666, 665, 1371, 654, 0, 661, 1371,
	679, 1371, 0, 677, 631, 632, 1232, 833, 443, 444,
	449, 451, 0, 501, 501, 501, 483, 501, 0, 0,
	471, 1891, 0, 0, 0, 0, 480, 1891, 0, 0,
	1891, 1891, 1891, 1891, 1891, 1891, 1891, 0, 0, 1891,
	1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891,
	0, 1891, 1891, 1891, 1891, 1891, 1349, 1891, 0, 1193,
	491, 492, 493, 494, 499, 500, 0, 0, 529, 0,
	0, 1062, 0, 534, 0, 0, 1104, 0, 0, 913,
	0, 914, 915, 916, 911, 951, 975, 975, 0, 975,
	955, 1371, 0, 0, 0, 278, 279, 267, 0, 268,
	0, 0, 281, 282, 0, 284, 285, 286, 293, 1959,
	2038, 288, 290, 0, 0, 294, 307, 308, 309, 0,
	0, 299, 300, 0, 0, 362, 363, 365, 0, 790,
	1197, 72, 1184, 705, 1367, 706, 707, 711, 0, 0,
	714, 715, 716, 717, 718, 1029, 0, 0, 1113, 1114,
	1115, 1183, 900, 0, 909, 0, 905, 981, 0, 983,
	0, 0, 124, 19, 0, 117, 114, 0, 0, 0,
	0, 0, 1866, 1815, 1887, 0, 0, 0, 1868, 0,
	0, 0, 0, 0, 107, 792, 752, 0, 756, 773,
	0, 777, 0, 0, 769, 761, 766, 0, 0, 786,
	753, 1370, 0, 0, 0, 0, 746, 0, 0, 751,
	790, 0, 813, 842, 843, 846, 1430, 0, 404, 400,
	419, 0, 0, 0, 0, 189, 1124, 0, 190, 194,
	184, 0, 0, 0, 1129, 0, 1126, 1131, 0, 204,
	0, 0, 179, 180, 1215, 1224, 0, 0, 0, 1761,
	1763, 1765, 1767, 1769, 0, 1772, 1782, 1782, 1778, 0,
	1773, 0, 1775, 0, 1751, 1520, 0, 1555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 846, 0, 0,
	1623, 1624, 0, 0, 1628, 0, 1630, 1631, 1632, 1634,
	0, 0, 0, 1638, 0, 1677, 1698, 1681, 1684, 0,
	1688, 0, 1690, 1692, 1693, 1694, 0, 840, 840, 0,
	0, 1594, 1594, 1594, 0, 0, 0, 0, 1594, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1539, 0, 1540, 1541, 0, 0, 0, 935, 810, 0,
	0, 0, 0, 0, 1222, 0, 91, 0, 0, 0,
	0, 96, 0, 0, 76, 344, 332, 334, 0, 326,
	0, 1182, 0, 0, 0, 0, -2, 1029, 833, 0,
	833, 1074, 1891, 538, 0, 0, 1123, 0, 1093, 0,
	0, 0, -2, 0, 0, 0, 1177, 0, 0, 0,
	1234, 0, 0, 0, 730, 734, 23, 834, 0, 607,
	605, 0, 609, 0, 610, 662, 618, 619, 900, 642,
	643, 0, 0, 900, 662, 662, 653, 665, 674, 0,
	675, 1371, 1234, 0, 0, 1192, 1300, 1268, 461, 0,
	1384, 1385, 502, 0, 1391, 1400, 1181, 1462, 0, 1400,
	0, 0, 1402, 1403, 0, 0, 0, 0, 484, 485,
	0, 470, 0, 0, 0, 0, 0, 0, 469, 0,
	0, 512, 0, 0, 0, 0, 0, 1892, 1891, 1891,
	0, 478, 479, 0, 482, 0, 0, 0, 0, 0,
	0, 0, 0, 1891, 1891, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 0, 0, 0, 1355, 1356, 0, 1074, 1891, 0,
	0, 0, 0, 538, 1118, 1118, 1091, 1109, 0, 447,
	448, 509, 0, 0, 0, 0, 0, 0, 0, 941,
	0, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 833, 976, 0, 978, 979, 953, -2, 0, 913,
	958, 1746, 0, 271, 272, 0, 0, 277, 295, 297,
	269, 0, 0, 0, 296, 298, 302, 303, 361, 364,
	366, 852, 0, 0, 1258, 0, 1030, 1031, 1033, 1034,
	0, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1943, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1028, 722, 1116, 891,
	903, 910, 982, 984, 142, 906, 0, 127, 19, 126,
	118, 119, 0, 19, 0, 0, 0, 0, 1876, 1875,
	1861, 0, 1862, 1873, 1878, 0, 1881, 0, 430, 796,
	0, 0, 776, 778, 0, 0, 776, 0, 0, 785,
	0, 0, 0, 0, 0, 0, 0, 776, 852, 792,
	0, 849, 847, 848, 0, 0, 684, 152, 425, 0,
	0, 0, 0, 0, 709, 0, 1128, 186, 0, 0,
	206, 0, 0, 0, 1224, 1219, 1745, 1774, 1776, 0,
	1783, 1779, 1515, 1524, 1551, 0, 0, 1557, 1569, 1569,
	0, 0, 0, 1560, 1874, 1874, 1563, 1870, 1872, 1870,
	1569, 1569, 0, 1163, 0, 1164, 846, 143, 0, 0,
	1629, 0, 0, 0, 772, 0, 0, 0, 1590, 1592,
	1594, 1594, 1601, 1595, 1602, 1603, 1594, 1594, 1594, 1594,
	1608, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594,
	1594, 1594, 1588, 0, 0, 1804, 1805, 781, 0, 0,
	823, 824, 825, 826, 827, 0, 0, 61, 61, 1224,
	0, 100, 92, 0, 0, 0, 0, 0, 336, 0,
	77, 78, 80, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 1015, 1016, 1018, 0, 1021, 1022, 1023,
	0, 0, 1377, 0, 1078, 1075, 1076, 1077, 0, 1118,
	539, 540, 541, 542, 0, 0, 0, 1122, 0, 0,
	1086, 0, 0, 0, 1167, 1168, 1169, 1170, 1171, 1172,
	1173, 1174, -2, 1187, 0, 1371, 0, 0, 1377, 1206,
	0, 0, 1211, 0, 1377, 1377, 0, 1242, 0, 1231,
	784, 0, -2, 0, 0, 732, 0, 0, 950, 606,
	612, 900, 636, 838, 839, 1371, 900, 900, 662, 680,
	676, 1242, 1233, 0, 450, 501, 0, 1288, 0, 0,
	1294, 0, 1301, 454, 0, 503, 0, 1390, 1418, 1401,
	1418, 1463, 1418, 1418, 1181, 0, 503, 0, 0, 472,
	0, 0, 0, 0, 0, 468, 506, 846, 455, 457,
	458, 459, 510, 511, 513, 0, 515, 516, 474, 486,
	487, 488, 489, 490, 0, 0, 0, 481, 495, 496,
	497, 498, 456, 1317, 1318, 1319, 1322, 1323, 1324, 1325,
	0, 0, 1328, 1329, 1330, 1331, 1332, 1415, 1416, 1417,
	1333, 1334, 1335, 1336, 1337, 1338, 1339, 1357, 1358, 1359,
	1360, 1361, 1362, 1341, 1342, 1343, 1344, 1345, 1346, 1347,
	1348, 0, 0, 1352, 0, 0, 1078, 0, 0, 0,
	0, 0, 1118, 532, 0, 0, 533, 1093, 0, 1111,
	0, 1105, 1106, 0, 0, 754, 900, 354, 0, 945,
	936, 0, 920, 0, 922, 942, 923, 943, 0, 0,
	927, 0, 929, 0, 925, 926, 931, 924, 900, 912,
	952, 977, 954, 957, 959, 960, 966, 0, 0, 0,
	0, 265, 274, 275, 276, 283, 0, 558, 289, 808,
	0, 1368, 712, 713, 1259, 1260, 720, 0, 1035, 889,
	0, 0, 122, 125, 0, 120, 0, 0, 0, 0,
	112, 110, 1869, 0, 0, 798, 166, 0, 0, 0,
	774, 0, 779, 776, 760, 770, 759, 767, 768, 787,
	1372, 1373, 1374, 1375, 0, 776, 750, 749, 811, 796,
	844, 845, 0, 1431, 392, 0, 1125, 186, 191, 192,
	193, 187, 185, 1132, 0, 1134, 0, 1217, 0, 0,
	1780, 1556, 1525, 1558, 1570, 1571, 1559, 0, 1527, 1528,
	1561, 1562, 1564, 1565, 1566, 1567, 1568, 1529, 0, 1165,
	1625, 0, 1627, 1635, 1636, 0, 1685, 1689, 0, 0,
	0, 0, 0, 1599, 1600, 1604, 1605, 1606, 1607, 1609,
	1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619,
	840, 1589, 0, 0, 0, 0, 0, 0, 0, 821,
	0, 0, 0, 63, 0, 63, 1223, 1225, 0, 980,
	0, 0, 97, 0, 0, 79, 81, 0, 2023, 0,
	0, 0, 0, 1183, 1008, 1024, 1020, 0, 0, 0,
	0, 1378, 1379, 1381, 1382, 1383, 0, 1046, 0, 0,
	1066, 1067, 1068, 1080, 0, 544, 545, 0, 0, 0,
	557, 553, 554, 555, 535, 1117, 1100, 0, 0, 1089,
	0, 0, 1099, 0, 1188, 1891, 1891, 1891, 1175, 0,
	0, 1302, 1891, 1891, 0, 1208, 1210, 1212, 0, 0,
	1306, 1245, 0, 0, 1236, 0, 975, 0, 0, 900,
	731, 734, 735, 832, 613, 651, 655, 652, 900, 1245,
	442, 1266, 0, 0, 0, 0, 0, 1298, 0, 0,
	1270, 0, 473, 504, 0, -2, 0, 1419, 0, 1404,
	1419, 0, 0, 1418, 0, 462, 503, 0, 0, 0,
	517, 522, 523, 0, 519, 520, 1458, 0, 521, 0,
	508, 0, 514, 1320, 1321, 0, 1326, 1327, 0, 1351,
	0, 0, 453, 524, 0, 0, 0, 525, 526, 531,
	1119, 1120, 1086, 0, 1100, 0, 1110, 0, 1107, 1108,
	840, 0, 0, 917, 946, 0, 0, 918, 0, 919,
	921, 944, 0, 938, 928, 930, 353, 961, 0, 0,
	963, 964, 965, 956, 291, 853, 1032, 0, 874, 0,
	0, 907, 0, 19, 0, 0, 115, 1879, 1882, 800,
	0, 797, 167, 0, 0, 0, 0, 764, 775, 758,
	1376, 748, 798, 850, 851, 188, 183, 1133, 1227, 0,
	1218, 0, 1482, 1538, 0, 1637, 0, 1594, 1591, 1594,
	1593, 1585, 0, 1542, 0, 1544, 1545, 1546, 0, 1548,
	1549, 0, 819, 0, 59, 0, 62, 60, 0, 99,
	93, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 1017, 1019, 0, 1052, 1306, 0,
	1052, 1079, 1065, 0, 0, 546, 547, 0, 550, 556,
	1081, 0, 0, 1083, 1084, 1085, 0, 0, 1097, 0,
	0, 0, 0, 0, 1178, 1194, 0, 0, 0, -2,
	0, 0, -2, 1205, 0, 1251, 0, 1243, 0, 1235,
	0, 1238, 900, 900, -2, 728, 733, 0, 656, 1251,
	1268, 0, 1289, 0, 0, 0, 0, 0, 0, 0,
	1269, 0, 1282, 505, 1420, -2, 1434, 1436, 0, 1193,
	1439, 1440, 0, 0, 0, 0, 0, 0, 1489, 1448,
	0, 0, 1452, 1453, 1454, 0, 0, 1457, 0, 1798,
	1799, 0, 1461, 0, 0, 0, 0, 0, 0, 0,
	1398, 463, 464, 0, 466, 467, 1891, 1459, 507, 460,
	1891, 476, 1350, 1353, 1354, 530, 527, 528, 1089, 1092,
	1103, 1112, 755, 835, 355, 356, 947, 0, 937, 939,
	970, 967, 0, 0, 1036, 890, 898, 2252, 2254, 2251,
	116, 121, 0, 0, 802, 0, 799, 0, 793, 795,
	177, 763, 800, 137, 169, 0, 0, 1526, 0, 0,
	0, 1626, 1676, 1597, 1598, 0, 1586, 0, 1580, 1581,
	1582, 1587, 0, 0, 822, 817, 64, 95, 0, 98,
	68, 1183, 0, 1183, 0, 0, 0, 1011, 1025, 0,
	1038, 1045, 1059, 1199, 1380, 1044, 0, 0, 543, 548,
	0, 551, 552, 1101, 1100, 0, 1087, 1088, 0, 1095,
	0, 0, 1189, 1190, 1191, 0, 1303, 1304, 1305, 1261,
	1207, 0, -2, 1314, 0, 0, 1203, 1227, 1261, 0,
	1239, 0, 1246, 0, 1244, 1237, 840, 729, 1248, 452,
	1300, 1290, 0, 1292, 0, 0, 0, 0, 1271, -2,
	0, 1435, 1437, 1438, 1441, 1442, 1443, 1494, 1495, 1496,
	0, 0, 1446, 1491, 1492, 1493, 1447, 0, 0, 0,
	0, 0, 1796, 1797, 1487, 0, 0, 1405, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414, 1406, 0, 0, 0,
	1397, 1399, 465, 0, 0, 1891, 1102, 352, 0, 0,
	971, 973, 968, 969, 892, 0, 0, 0, 0, 111,
	113, 128, 0, 801, 168, 0, 802, 139, 0, 160,
	0, 1228, 0, 1537, 0, 0, 0, 1596, 1583, 0,
	0, 0, 0, 0, 1800, 1801, 1802, 0, 1543, 1547,
	94, 0, 66, 0, 83, 1183, 84, 1183, 0, 0,
	0, 0, 1060, 1061, 1069, 1070, 0, 1072, 1073, 549,
	1082, 1090, 1094, 1097, 0, 1149, 1176, 1263, 0, 1209,
	1192, 1316, 1891, 1213, 1214, 1263, 0, 1308, 1891, 1891,
	1229, 0, 1241, 0, 1253, 0, 1247, 835, 441, 0,
	1250, 1286, 1291, 1293, 1295, 0, 1299, 1297, 1272, -2,
	0, 1280, 0, 0, 1444, 1445, 0, 0, 1695, 1891,
	0, 1477, 0, 1149, 1149, 1149, 1149, 0, 518, 475,
	0, 948, 962, 0, 899, 0, 0, 0, 0, 0,
	791, 129, 0, 138, 157, 0, 170, 171, 0, 0,
	0, 0, 1220, 0, 1485, 1486, 0, 1572, 0, 0,
	0, 1576, 1577, 1578, 1579, 1183, 68, 0, 85, 86,
	0, 1183, 0, 1037, 0, 1071, 1096, 1098, 1148, 1202,
	0, 1300, 1315, 0, 1204, 1307, 0, 0, 0, 1240,
	1252, 0, 1255, 727, 1249, 1267, 0, 1296, 1273, 1281,
	0, 1276, 0, 0, 0, 1490, 0, 1451, 0, 1456,
	1465, 1478, 0, 0, 1386, 0, 1388, 0, 1392, 0,
	1394, 0, 0, 477, 972, 974, 0, 1746, 894, 895,
	0, 804, 794, 140, 144, 0, 166, 163, 0, 172,
	0, 0, 0, 0, 1216, 0, 1483, 0, 1573, 1574,
	1575, 65, 67, 69, 1183, 87, 0, 1039, 1040, 1053,
	1150, 1891, 1891, 0, 0, 0, 1156, 1157, 1891, 1891,
	1891, 1891, 0, 1288, 1320, 1309, 1310, 1311, 1254, 1287,
	1275, 0, -2, 1283, 0, 0, 1748, 1758, 1759, 1449,
	1455, 1464, 1466, 1467, 0, 1479, 1480, 1481, 1488, 1149,
	1149, 1149, 1149, 1396, 893, 0, 0, 803, 0, 131,
	0, 0, 161, 162, 164, 0, 173, 0, 175, 176,
	0, 0, 1584, 89, 1041, 0, 0, 1153, 1154, 0,
	0, 0, 0, 0, 1264, 0, 1266, 1277, -2, 0,
	1285, 0, 1450, 1468, 0, 1469, 0, 0, 0, 1387,
	1389, 1393, 1395, 1746, 896, 805, 1226, 0, 145, 0,
	147, 149, 150, 1421, 158, 159, 165, 174, 0, 0,
	1026, 1042, 0, 1151, 1152, 1155, 1158, 1159, 1160, 1161,
	0, 1268, 1284, 1749, 1470, 1472, 1473, 0, 0, 1471,
	0, 132, 133, 0, 146, 0, 0, 1221, 1484, 1043,
	1265, 1262, 1474, 1476, 1475, 897, 0, 0, 148, 1422,
	134, 135, 136, 0, 1423,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 119, 3, 3, 3, 150, 142, 3,
	86, 87, 147, 145, 160, 146, 159, 148, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 666, 663,
	129, 128, 130, 3, 667, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 152, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 664, 141, 665, 153,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 120, 121, 122, 123, 124,
	125, 126, 127, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 143, 144, 149, 151, 154, 155, 156,
	157, 158, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 57986, 661, 57987, 662, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:847
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:854
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:860
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:874
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:878
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:893
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:897
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:903
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:908
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:912
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:945
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:959
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:970
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:982
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:986
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:991
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:995
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1001
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
				Internal:    yyDollar[12].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1016
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1020
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1024
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1028
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1035
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1043
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1051
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion(), yyDollar[4].boolValUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1057
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1064
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1073
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1081
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1089
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1099
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1109
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1119
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(""),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1129
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELDATABASE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1139
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELTABLE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1151
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
				Internal:    yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1162
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
				Internal:    yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1173
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
				Internal:    yyDollar[11].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1185
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
				Internal:     yyDollar[11].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1197
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				PitrValue:    yyDollar[10].int64ValUnion(),
				PitrUnit:     yyDollar[11].str,
				Internal:     yyDollar[12].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1210
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
				Internal:    yyDollar[8].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1221
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
				Internal:     yyDollar[13].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1237
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1245
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1253
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1261
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1270
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1280
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1292
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1300
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1309
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1319
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1329
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1339
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1359
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1365
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1372
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1380
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1386
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1395
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1405
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1413
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1421
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1429
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1439
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1447
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1457
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1464
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1473
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1483
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1487
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1493
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1497
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1503
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1512
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1522
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1526
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1532
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1541
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1545
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1551
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1572
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1586
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1593
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1597
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1603
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1607
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1613
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1620
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1628
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1632
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1644
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1648
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1662
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1666
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1671
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1678
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1682
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1686
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1692
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1701
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1712
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1716
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1722
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1726
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1732
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1736
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1742
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarExpr{
				Name:   v,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1762
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1781
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1785
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1789
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1794
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1798
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1807
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1817
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1824
		{
			yyVAL.str = yyDollar[3].str
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1829
		{
			yyVAL.str = "\n"
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1836
		{
			yyVAL.str = yyDollar[3].str
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1841
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1845
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1873
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1877
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1883
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1891
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1911
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1930
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1955
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1959
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1963
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1968
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1972
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1978
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1991
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2002
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2015
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2019
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2029
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2042
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2055
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2061
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2067
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2075
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2085
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2095
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2099
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2103
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2107
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2111
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2115
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2122
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2126
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2132
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2139
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2148
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2152
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2158
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2162
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2166
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2170
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2174
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2178
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2182
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2186
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2190
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2194
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2198
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2202
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2206
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2210
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2214
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2218
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2222
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2226
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2230
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2234
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2238
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2242
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2246
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2250
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2254
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2258
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2262
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2266
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2270
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2274
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2278
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2282
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2286
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2290
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2294
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2298
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2302
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2306
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2310
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2314
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2318
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2322
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2326
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2330
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2334
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2338
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2342
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2346
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2350
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2354
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2358
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2373
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2382
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2389
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2396
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2405
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2423
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2427
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2433
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2440
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2448
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2452
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2456
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2460
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2466
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2470
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2476
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2483
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2490
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2499
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2529
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2533
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2537
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2543
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2549
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2553
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2560
		{
			yyVAL.str = yyDollar[3].str
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2566
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2570
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2576
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2584
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2593
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2602
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2610
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2618
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2641
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   v,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2660
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2667
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2674
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2682
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2689
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2696
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2705
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2709
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2713
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2719
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2723
		{
			yyVAL.str = yyDollar[1].str
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2729
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2733
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2739
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2743
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2757
		{
			yyLOCAL = &tree.SavePoint{Name: tree.Identifier(yyDollar[2].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2763
		{
			yyLOCAL = &tree.ReleaseSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2769
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2774
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2779
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[5].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2784
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2790
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2796
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2801
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2805
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2809
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2813
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2817
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2821
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2825
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2829
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2833
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2839
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2843
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2847
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2851
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2856
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2861
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2867
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2880
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2893
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2906
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2919
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2935
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2942
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2953
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2964
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2968
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2974
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2984
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2990
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2994
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:3000
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3006
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3010
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3014
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3018
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3024
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3037
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3043
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3047
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3051
		{
			yyLOCAL = tree.NewPrepareVar(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3058
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3062
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3068
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3074
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3085
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3091
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3095
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3099
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3103
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3107
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3111
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3119
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3127
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3137
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3145
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3155
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3165
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3181
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3185
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3193
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3201
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3241
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3245
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3251
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3257
		{
			yyVAL.str = yyDollar[1].str
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3262
		{
			yyVAL.str = "true"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3263
		{
			yyVAL.str = "false"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3264
		{
			yyVAL.str = yyDollar[1].str
		}
	case 425:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3269
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3275
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3284
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3291
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3299
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3303
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3328
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3351
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3361
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3368
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3377
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3385
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3389
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3395
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3406
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3410
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3416
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3420
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3444
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3454
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3464
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3480
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3498
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3502
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3508
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3512
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3518
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3524
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3532
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3542
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3550
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3560
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3570
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3580
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3587
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3591
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3595
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3599
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3603
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3610
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3616
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3620
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3624
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3628
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3632
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3636
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3640
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3644
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3649
		{
			yyVAL.str = ""
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3681
		{
			yyVAL.str = ""
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3685
		{
			yyVAL.str = string("COLUMN")
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3690
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3696
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3702
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3710
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3714
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3720
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3728
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3735
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3741
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3747
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3753
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3759
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3766
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3773
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3781
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3787
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3799
		{
			var keyType = tree.INDEX_TYPE_HNSW
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, 0)
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3805
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3811
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3819
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3823
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3830
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3848
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3863
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3878
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3893
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3906
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3912
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3923
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3935
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountUnlock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3946
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountLock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3959
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3963
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3971
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3975
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3980
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3984
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4000
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4004
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4008
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4012
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4019
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4023
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4027
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4031
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4038
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4042
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4049
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4053
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4057
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4061
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4068
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4075
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4081
		{
			yyVAL.item = nil
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4086
		{
			yyVAL.item = nil
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4135
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4141
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4147
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4153
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4162
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4170
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4178
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4186
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level: tree.RECOVERYWINDOWLEVELACCOUNT,
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4192
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4199
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4207
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:       tree.RECOVERYWINDOWLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4216
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4220
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4224
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4235
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4239
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4245
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4250
		{
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4254
		{
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4259
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4269
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4279
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4287
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4293
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4299
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4305
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4311
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4317
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4323
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4332
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4336
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4340
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4344
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4348
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4352
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4356
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4360
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4366
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4375
		{
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4377
		{
		}
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4386
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4396
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4405
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4409
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4413
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4419
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4425
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4431
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4437
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4446
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4457
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4469
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4477
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4483
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4495
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4509
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4515
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4521
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4528
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4532
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4537
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4541
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4545
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4550
		{
			yyVAL.str = ""
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4554
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4560
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4575
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4579
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4585
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4593
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4600
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4608
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4614
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4620
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4625
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4633
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4639
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4644
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4650
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4656
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4660
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4688
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4696
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4704
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4712
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4716
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4722
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4735
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4743
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4752
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4758
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4766
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4774
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4782
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4788
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4796
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4802
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4810
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4816
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4826
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4831
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4838
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4854
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4867
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4878
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4882
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4888
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4894
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4903
		{
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4905
		{
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4908
		{
		}
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4917
		{
		}
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4921
		{
		}
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4926
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4935
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4942
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4948
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4956
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4963
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4970
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4990
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4998
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5008
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5012
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5018
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5025
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5031
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5039
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5046
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5053
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5072
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5076
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5080
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5085
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5089
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5093
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:5099
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5108
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5112
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5118
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5122
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5128
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5132
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5138
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5143
		{
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5147
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5154
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5158
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5165
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5170
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5174
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5180
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5184
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5190
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5194
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5199
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5203
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5216
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5227
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5238
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5260
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5283
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5291
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5300
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5304
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5317
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5321
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5326
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5330
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5337
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5342
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5349
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5355
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5359
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5363
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5367
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5371
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5375
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5380
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5384
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5390
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5400
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5415
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5419
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5433
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5437
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5443
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5452
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5456
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5460
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5464
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5468
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5474
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5481
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5490
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5494
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5500
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5508
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5512
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5517
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5521
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5527
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5531
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5535
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5540
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5544
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5550
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5556
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5560
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5566
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5571
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5575
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5579
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5584
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5588
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5592
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5597
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5601
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5609
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5613
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5617
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5631
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5635
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5645
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5655
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5665
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5677
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5685
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5693
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5702
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5710
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5718
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5726
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5734
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5742
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5750
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5758
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5766
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5776
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: tree.QuerySpecOptionDistinct&yyDollar[2].selectOptionsUnion() != 0,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].selectOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5789
		{
			yyLOCAL = tree.QuerySpecOptionNone
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5793
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5799
		{
			yyLOCAL = yyDollar[1].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5803
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion() | yyDollar[2].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5809
		{
			yyLOCAL = tree.QuerySpecOptionSqlSmallResult
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5813
		{
			yyLOCAL = tree.QuerySpecOptionSqlBigResult
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5817
		{
			yyLOCAL = tree.QuerySpecOptionSqlBufferResult
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5821
		{
			yyLOCAL = tree.QuerySpecOptionStraightJoin
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5825
		{
			yyLOCAL = tree.QuerySpecOptionHighPriority
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5829
		{
			yyLOCAL = tree.QuerySpecOptionSqlCalcFoundRows
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5833
		{
			yyLOCAL = tree.QuerySpecOptionSqlNoCache
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5837
		{
			yyLOCAL = tree.QuerySpecOptionAll
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5841
		{
			yyLOCAL = tree.QuerySpecOptionDistinct
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5845
		{
			yyLOCAL = tree.QuerySpecOptionDistinctRow
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5867
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5871
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5876
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5880
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5890
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5899
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5908
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5919
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5923
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5928
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5932
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5937
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5941
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5947
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5951
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5957
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5961
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5965
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5969
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5974
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5982
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5988
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5996
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6006
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6016
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6020
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6026
		{
			if strings.Contains(yyDollar[2].str, ":") {
				ss := strings.SplitN(yyDollar[2].str, ":", 2)
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: ss[0],
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
					Option:   ss[1],
				}
			} else {
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: yyDollar[2].str,
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6046
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6055
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6064
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6072
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:6083
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6093
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6097
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 925:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6103
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6107
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6117
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 928:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6121
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6125
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 930:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6129
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6135
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 932:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6141
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6152
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6156
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:6162
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6168
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6172
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6178
		{
			yyVAL.str = yyDollar[1].str
		}
	case 939:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6185
		{
			yyVAL.str = yyDollar[2].str
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6191
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6197
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 942:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6201
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 943:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6205
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 944:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6209
		{
			yyVAL.str = tree.JOIN_TYPE_CENTROIDX + ":" + yyDollar[2].str
		}
	case 945:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6215
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6219
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6225
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6229
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6235
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6239
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6245
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6249
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6259
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6272
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6278
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6284
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6298
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6309
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6316
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6320
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6326
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6336
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6340
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6344
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6349
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6353
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6357
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6361
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6366
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6370
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6374
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6378
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6382
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6387
		{
			yyVAL.str = ""
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6391
		{
			yyVAL.str = yyDollar[1].str
		}
	case 977:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6395
		{
			yyVAL.str = yyDollar[2].str
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6401
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6405
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 980:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6410
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6414
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6418
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6422
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6426
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6432
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1008:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6474
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6487
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6493
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1011:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6499
		{
			yyLOCAL = tree.NewCreateProcedure(
				yyDollar[2].sourceOptionalUnion(), yyDollar[4].procNameUnion(), yyDollar[6].procArgsUnion(), yyDollar[8].str, yyDollar[9].str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6507
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6512
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6519
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6526
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6530
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6536
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6542
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6547
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6551
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6555
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6559
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6564
		{
			yyVAL.str = "sql"
		}
	case 1025:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6568
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1026:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6575
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6608
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6613
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6620
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6627
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6631
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6637
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6643
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6647
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6651
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6657
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6663
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6669
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6673
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6679
		{
			yyVAL.str = ""
		}
	case 1043:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6686
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1044:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6692
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6707
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6724
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6741
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1048:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6745
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1049:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6751
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1050:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6755
		{
			yyVAL.str = "DEFINER = "
		}
	case 1051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6759
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1052:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6764
		{
			yyVAL.str = ""
		}
	case 1053:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6768
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1059:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6782
		{
			yyVAL.str = ""
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6790
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6796
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6801
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6807
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6820
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6825
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6830
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6836
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6843
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6850
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6857
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6864
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6872
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6878
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6885
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6892
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6900
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6906
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6915
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6932
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6948
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6967
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6973
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6982
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:7000
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:7006
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:7013
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:7021
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:7027
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7035
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7041
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7049
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7055
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7064
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7068
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7073
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7077
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:7084
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7089
		{
			yyVAL.str = ""
		}
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7093
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1102:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7099
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7112
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7123
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7127
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7133
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7139
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7145
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7152
		{
			yyVAL.str = ""
		}
	case 1110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7156
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1111:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7161
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7165
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7171
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7179
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7187
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7195
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = &tree.DropPitr{
				IfExists: ifExists,
				Name:     name,
				Internal: yyDollar[5].boolValUnion(),
			}

		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7208
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1118:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7213
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7225
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7236
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7345
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7349
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7355
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7368
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7372
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7378
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7391
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7395
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7399
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7404
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7408
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7414
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7421
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7427
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7436
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1137:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7443
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7454
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7458
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7464
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7473
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7477
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7481
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7486
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7490
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7494
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7498
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7504
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7535
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7539
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				} else if opt2.HnswM > 0 {
					opt1.HnswM = opt2.HnswM
				} else if opt2.HnswEfConstruction > 0 {
					opt1.HnswEfConstruction = opt2.HnswEfConstruction
				} else if len(opt2.HnswQuantization) > 0 {
					opt1.HnswQuantization = opt2.HnswQuantization
				} else if opt2.HnswEfSearch > 0 {
					opt1.HnswEfSearch = opt2.HnswEfSearch
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7573
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7579
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7591
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7597
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7603
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7609
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7615
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7621
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("M should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswM = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7632
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_CONSTRUCTION should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfConstruction = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7643
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_SEARCH should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfSearch = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7654
		{
			io := tree.NewIndexOption()
			io.HnswQuantization = yyDollar[3].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7663
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7667
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7673
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7687
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7701
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7705
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7709
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7713
		{
			yyLOCAL = tree.INDEX_TYPE_HNSW
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7717
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7721
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7725
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7729
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7735
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7749
		{
			var t = tree.NewCloneDatabase()
			t.DstDatabase = tree.Identifier(yyDollar[4].str)
			t.SrcDatabase = tree.Identifier(yyDollar[6].str)
			t.AtTsExpr = yyDollar[7].atTimeStampUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7757
		{
			var t = tree.NewCloneDatabase()
			t.DstDatabase = tree.Identifier(yyDollar[4].str)
			t.SrcDatabase = tree.Identifier(yyDollar[6].str)
			t.AtTsExpr = yyDollar[7].atTimeStampUnion()
			t.ToAccountName = tree.Identifier(yyDollar[10].cstrUnion().Compare())
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7767
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7771
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7782
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7786
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7791
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7795
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7800
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7804
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7810
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7814
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7820
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7829
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7838
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7844
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7848
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7854
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7865
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7871
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7889
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7907
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7925
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7941
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7945
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7954
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7966
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7975
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7987
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7997
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8007
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8018
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8028
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8039
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8047
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8056
		{
			t := tree.NewCloneTable()
			t.CreateTable.Table = *yyDollar[5].tableNameUnion()
			t.CreateTable.LikeTableName = *yyDollar[7].tableNameUnion()
			t.CreateTable.IsAsLike = true
			t.SrcTable = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8065
		{
			t := tree.NewCloneTable()
			t.CreateTable.Table = *yyDollar[5].tableNameUnion()
			t.CreateTable.LikeTableName = *yyDollar[7].tableNameUnion()
			t.CreateTable.IsAsLike = true
			t.SrcTable = *yyDollar[7].tableNameUnion()
			t.ToAccountName = tree.Identifier(yyDollar[10].cstrUnion().Compare())
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8077
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8084
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8094
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8107
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8115
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8124
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8133
		{
			yyVAL.str = ""
		}
	case 1221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:8137
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8143
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8147
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8152
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8156
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:8163
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8175
		{
			yyVAL.str = ""
		}
	case 1228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8179
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1229:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8185
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8206
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8220
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8224
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8228
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8234
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8238
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8245
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8252
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8259
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8266
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8270
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8274
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8278
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8282
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8289
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8296
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8300
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8307
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8314
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8318
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8324
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8330
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8334
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8341
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8348
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8355
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8362
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8366
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8371
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8375
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8379
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8384
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8388
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8401
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8405
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8413
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8421
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8425
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8437
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8441
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8447
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8451
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8457
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8470
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8484
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8488
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8494
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8498
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8504
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8513
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8524
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8528
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8533
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8537
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8543
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8548
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8556
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8560
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8570
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8574
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8585
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8593
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8601
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8609
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8620
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8629
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8639
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8649
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8653
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8658
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8662
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8668
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8672
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8678
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8687
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8697
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8701
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8707
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8711
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8717
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8726
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8736
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8740
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8746
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8750
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8754
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8760
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8764
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8768
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8772
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8776
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8780
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8784
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8789
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8793
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8797
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8801
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8805
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8809
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8813
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8817
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8821
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8825
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8829
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8833
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8837
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8843
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8849
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8853
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8857
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8861
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8865
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8871
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8877
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8883
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8889
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8895
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8901
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8905
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8909
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8913
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8920
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8924
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8930
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8941
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8945
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8951
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8955
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8959
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8963
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8967
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8971
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8985
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8989
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8998
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:9004
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9012
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9016
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9023
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9032
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9040
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9047
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ASOFTIMESTAMP,
				Expr: tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9055
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9062
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9066
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9072
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9076
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9080
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9086
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9090
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9096
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9109
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9122
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9163
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9205
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9219
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9225
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9238
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9251
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9264
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9277
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9292
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9302
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9308
		{
			yyVAL.str = ""
		}
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9312
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9322
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9328
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9334
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9356
		{
			yyVAL.str = ""
		}
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9360
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9366
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9372
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9376
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9381
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9389
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9393
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9397
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9401
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9407
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9413
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9417
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9422
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9429
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9433
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9439
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9443
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9449
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9453
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9457
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9461
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9465
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9469
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9474
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9478
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9482
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9486
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9490
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9494
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9498
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9502
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9506
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9510
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9524
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9528
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9532
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9536
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9540
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9544
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9550
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9554
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9559
		{
			yyVAL.str = ""
		}
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9563
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9569
		{
			yyVAL.str = ""
		}
	case 1463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9573
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1464:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9579
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9596
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9603
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9610
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9617
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9624
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9633
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9639
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9645
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9649
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9653
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9657
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9661
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9666
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9673
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9677
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9681
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9686
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9690
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9694
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9698
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9702
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9707
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9711
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9716
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9720
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9736
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9742
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9746
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9750
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9754
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9758
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9762
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9766
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9770
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9774
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9778
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9782
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9786
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9790
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9796
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9800
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9804
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9808
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9812
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9816
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9820
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9824
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9828
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9832
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9874
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9878
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9882
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9887
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9895
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9899
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9903
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9907
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9911
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9921
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9925
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9929
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9933
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9937
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9941
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9945
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9949
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9962
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1539:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9968
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9977
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9986
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9997
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10007
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10017
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10026
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10036
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10046
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10056
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10065
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10075
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10079
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10084
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10088
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10094
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10098
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:10104
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10113
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10125
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10142
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10159
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10172
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10185
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10197
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10211
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10226
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10241
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10258
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10273
		{
		}
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10280
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10284
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10288
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10294
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10298
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10302
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10306
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10312
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10316
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10320
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10326
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10334
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10344
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10348
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10355
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10360
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10364
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10369
		{
			yyVAL.str = ","
		}
	case 1591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10373
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10378
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10382
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1594:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10387
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10394
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10420
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10432
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10444
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10455
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10466
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10477
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10487
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10497
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10508
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10519
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10530
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10541
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10552
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10563
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10574
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10585
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10596
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10607
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10618
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10629
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10640
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10651
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10662
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10686
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10695
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10704
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10713
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10722
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10733
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10742
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10752
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10761
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10770
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10779
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10788
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10800
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10811
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10824
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10836
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10859
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1674:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10895
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10908
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10921
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10933
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10942
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10950
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10958
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10971
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10980
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10991
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11002
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11011
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11023
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11033
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11043
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11052
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11063
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11072
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11082
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11091
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11100
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11110
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11114
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11120
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11124
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11143
		{
		}
	case 1706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:11145
		{
		}
	case 1741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11187
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11199
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11203
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11207
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:11213
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11218
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11222
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11228
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11232
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11238
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11242
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11249
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11253
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11257
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11266
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11270
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11274
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11279
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11283
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11289
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11293
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11297
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11301
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11305
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11309
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11313
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11317
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11321
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11325
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11333
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11337
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11341
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11345
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11349
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11353
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11357
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11361
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11365
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11369
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11375
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11379
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11385
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11389
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11396
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11400
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11404
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11410
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11414
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11418
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11422
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11426
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11430
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11434
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11440
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11444
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11448
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11452
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11458
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11471
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11476
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11482
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11486
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11499
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11504
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11508
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11512
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11516
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11520
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11527
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11531
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11535
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11539
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11546
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11557
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11562
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11568
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11580
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11592
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11604
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11617
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11630
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11643
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11656
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11669
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11682
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11695
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11708
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11721
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11734
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11749
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11776
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11818
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11854
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11890
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11907
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11919
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11939
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1843:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11959
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1844:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11979
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1845:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11995
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1846:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12008
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1847:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12021
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12034
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12047
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12059
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1851:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12071
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1852:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12083
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1853:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12095
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1854:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12107
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12119
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12131
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12143
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12155
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1859:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12167
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12180
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1861:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12193
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1862:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12206
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1863:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12219
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1864:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12234
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1865:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12242
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1866:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12251
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12261
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12284
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1869:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12289
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1870:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12295
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1872:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12302
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1873:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12306
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1874:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12311
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1875:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12315
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1876:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12321
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1877:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12327
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1878:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12334
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1879:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12341
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1880:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12350
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1881:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12357
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1882:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12364
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1883:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12373
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12377
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12381
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1886:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12387
		{
		}
	case 1887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12389
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1891:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12399
		{
			yyVAL.str = ""
		}
	case 1892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12403
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
