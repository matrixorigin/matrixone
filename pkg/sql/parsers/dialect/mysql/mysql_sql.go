// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const SELECT = 57352
const STREAM = 57353
const INSERT = 57354
const UPDATE = 57355
const DELETE = 57356
const FROM = 57357
const WHERE = 57358
const GROUP = 57359
const HAVING = 57360
const ORDER = 57361
const BY = 57362
const LIMIT = 57363
const OFFSET = 57364
const FOR = 57365
const LOWER_THAN_SET = 57366
const SET = 57367
const ALL = 57368
const DISTINCT = 57369
const DISTINCTROW = 57370
const AS = 57371
const EXISTS = 57372
const ASC = 57373
const DESC = 57374
const INTO = 57375
const DUPLICATE = 57376
const DEFAULT = 57377
const LOCK = 57378
const KEYS = 57379
const VALUES = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const SUBQUERY_AS_EXPR = 57399
const LOWER_THAN_STRING = 57400
const ID = 57401
const AT_ID = 57402
const AT_AT_ID = 57403
const STRING = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const INTEGRAL = 57409
const HEX = 57410
const BIT_LITERAL = 57411
const FLOAT = 57412
const HEXNUM = 57413
const NULL = 57414
const TRUE = 57415
const FALSE = 57416
const LOWER_THAN_CHARSET = 57417
const CHARSET = 57418
const UNIQUE = 57419
const KEY = 57420
const OR = 57421
const PIPE_CONCAT = 57422
const XOR = 57423
const AND = 57424
const NOT = 57425
const BETWEEN = 57426
const CASE = 57427
const WHEN = 57428
const THEN = 57429
const ELSE = 57430
const END = 57431
const LE = 57432
const GE = 57433
const NE = 57434
const NULL_SAFE_EQUAL = 57435
const IS = 57436
const LIKE = 57437
const REGEXP = 57438
const IN = 57439
const ASSIGNMENT = 57440
const SHIFT_LEFT = 57441
const SHIFT_RIGHT = 57442
const DIV = 57443
const MOD = 57444
const UNARY = 57445
const COLLATE = 57446
const BINARY = 57447
const UNDERSCORE_BINARY = 57448
const INTERVAL = 57449
const BEGIN = 57450
const START = 57451
const TRANSACTION = 57452
const COMMIT = 57453
const ROLLBACK = 57454
const WORK = 57455
const CONSISTENT = 57456
const SNAPSHOT = 57457
const CHAIN = 57458
const NO = 57459
const RELEASE = 57460
const PRIORITY = 57461
const QUICK = 57462
const BIT = 57463
const TINYINT = 57464
const SMALLINT = 57465
const MEDIUMINT = 57466
const INT = 57467
const INTEGER = 57468
const BIGINT = 57469
const INTNUM = 57470
const REAL = 57471
const DOUBLE = 57472
const FLOAT_TYPE = 57473
const DECIMAL = 57474
const NUMERIC = 57475
const DECIMAL_VALUE = 57476
const TIME = 57477
const TIMESTAMP = 57478
const DATETIME = 57479
const YEAR = 57480
const CHAR = 57481
const VARCHAR = 57482
const BOOL = 57483
const CHARACTER = 57484
const VARBINARY = 57485
const NCHAR = 57486
const TEXT = 57487
const TINYTEXT = 57488
const MEDIUMTEXT = 57489
const LONGTEXT = 57490
const BLOB = 57491
const TINYBLOB = 57492
const MEDIUMBLOB = 57493
const LONGBLOB = 57494
const JSON = 57495
const ENUM = 57496
const GEOMETRY = 57497
const POINT = 57498
const LINESTRING = 57499
const POLYGON = 57500
const GEOMETRYCOLLECTION = 57501
const MULTIPOINT = 57502
const MULTILINESTRING = 57503
const MULTIPOLYGON = 57504
const INT1 = 57505
const INT2 = 57506
const INT3 = 57507
const INT4 = 57508
const INT8 = 57509
const SQL_SMALL_RESULT = 57510
const SQL_BIG_RESULT = 57511
const SQL_BUFFER_RESULT = 57512
const LOW_PRIORITY = 57513
const HIGH_PRIORITY = 57514
const DELAYED = 57515
const CREATE = 57516
const ALTER = 57517
const DROP = 57518
const RENAME = 57519
const ANALYZE = 57520
const ADD = 57521
const SCHEMA = 57522
const TABLE = 57523
const INDEX = 57524
const VIEW = 57525
const TO = 57526
const IGNORE = 57527
const IF = 57528
const PRIMARY = 57529
const COLUMN = 57530
const CONSTRAINT = 57531
const SPATIAL = 57532
const FULLTEXT = 57533
const FOREIGN = 57534
const KEY_BLOCK_SIZE = 57535
const SHOW = 57536
const DESCRIBE = 57537
const EXPLAIN = 57538
const DATE = 57539
const ESCAPE = 57540
const REPAIR = 57541
const OPTIMIZE = 57542
const TRUNCATE = 57543
const MAXVALUE = 57544
const PARTITION = 57545
const REORGANIZE = 57546
const LESS = 57547
const THAN = 57548
const PROCEDURE = 57549
const TRIGGER = 57550
const STATUS = 57551
const VARIABLES = 57552
const ROLE = 57553
const PROXY = 57554
const AVG_ROW_LENGTH = 57555
const STORAGE = 57556
const DISK = 57557
const MEMORY = 57558
const CHECKSUM = 57559
const COMPRESSION = 57560
const DATA = 57561
const DIRECTORY = 57562
const DELAY_KEY_WRITE = 57563
const ENCRYPTION = 57564
const ENGINE = 57565
const MAX_ROWS = 57566
const MIN_ROWS = 57567
const PACK_KEYS = 57568
const ROW_FORMAT = 57569
const STATS_AUTO_RECALC = 57570
const STATS_PERSISTENT = 57571
const STATS_SAMPLE_PAGES = 57572
const DYNAMIC = 57573
const COMPRESSED = 57574
const REDUNDANT = 57575
const COMPACT = 57576
const FIXED = 57577
const COLUMN_FORMAT = 57578
const AUTO_RANDOM = 57579
const RESTRICT = 57580
const CASCADE = 57581
const ACTION = 57582
const PARTIAL = 57583
const SIMPLE = 57584
const CHECK = 57585
const ENFORCED = 57586
const RANGE = 57587
const LIST = 57588
const ALGORITHM = 57589
const LINEAR = 57590
const PARTITIONS = 57591
const SUBPARTITION = 57592
const SUBPARTITIONS = 57593
const TYPE = 57594
const ANY = 57595
const SOME = 57596
const PREPARE = 57597
const DEALLOCATE = 57598
const PROPERTIES = 57599
const PARSER = 57600
const VISIBLE = 57601
const INVISIBLE = 57602
const BTREE = 57603
const HASH = 57604
const RTREE = 57605
const BSI = 57606
const ZONEMAP = 57607
const LEADING = 57608
const BOTH = 57609
const TRAILING = 57610
const UNKNOWN = 57611
const EXPIRE = 57612
const ACCOUNT = 57613
const UNLOCK = 57614
const DAY = 57615
const NEVER = 57616
const SECOND = 57617
const ASCII = 57618
const COALESCE = 57619
const COLLATION = 57620
const HOUR = 57621
const MICROSECOND = 57622
const MINUTE = 57623
const MONTH = 57624
const QUARTER = 57625
const REPEAT = 57626
const REVERSE = 57627
const ROW_COUNT = 57628
const WEEK = 57629
const REVOKE = 57630
const FUNCTION = 57631
const PRIVILEGES = 57632
const TABLESPACE = 57633
const EXECUTE = 57634
const SUPER = 57635
const GRANT = 57636
const OPTION = 57637
const REFERENCES = 57638
const REPLICATION = 57639
const SLAVE = 57640
const CLIENT = 57641
const USAGE = 57642
const RELOAD = 57643
const FILE = 57644
const TEMPORARY = 57645
const ROUTINE = 57646
const EVENT = 57647
const SHUTDOWN = 57648
const NULLX = 57649
const AUTO_INCREMENT = 57650
const APPROXNUM = 57651
const SIGNED = 57652
const UNSIGNED = 57653
const ZEROFILL = 57654
const USER = 57655
const IDENTIFIED = 57656
const CIPHER = 57657
const ISSUER = 57658
const X509 = 57659
const SUBJECT = 57660
const SAN = 57661
const REQUIRE = 57662
const SSL = 57663
const NONE = 57664
const PASSWORD = 57665
const MAX_QUERIES_PER_HOUR = 57666
const MAX_UPDATES_PER_HOUR = 57667
const MAX_CONNECTIONS_PER_HOUR = 57668
const MAX_USER_CONNECTIONS = 57669
const FORMAT = 57670
const VERBOSE = 57671
const CONNECTION = 57672
const LOAD = 57673
const INFILE = 57674
const TERMINATED = 57675
const OPTIONALLY = 57676
const ENCLOSED = 57677
const ESCAPED = 57678
const STARTING = 57679
const LINES = 57680
const DATABASES = 57681
const TABLES = 57682
const EXTENDED = 57683
const FULL = 57684
const PROCESSLIST = 57685
const FIELDS = 57686
const COLUMNS = 57687
const OPEN = 57688
const ERRORS = 57689
const WARNINGS = 57690
const INDEXES = 57691
const SCHEMAS = 57692
const NAMES = 57693
const GLOBAL = 57694
const SESSION = 57695
const ISOLATION = 57696
const LEVEL = 57697
const READ = 57698
const WRITE = 57699
const ONLY = 57700
const REPEATABLE = 57701
const COMMITTED = 57702
const UNCOMMITTED = 57703
const SERIALIZABLE = 57704
const LOCAL = 57705
const CURRENT_TIMESTAMP = 57706
const DATABASE = 57707
const CURRENT_TIME = 57708
const LOCALTIME = 57709
const LOCALTIMESTAMP = 57710
const UTC_DATE = 57711
const UTC_TIME = 57712
const UTC_TIMESTAMP = 57713
const REPLACE = 57714
const CONVERT = 57715
const SEPARATOR = 57716
const CURRENT_DATE = 57717
const CURRENT_USER = 57718
const CURRENT_ROLE = 57719
const SECOND_MICROSECOND = 57720
const MINUTE_MICROSECOND = 57721
const MINUTE_SECOND = 57722
const HOUR_MICROSECOND = 57723
const HOUR_SECOND = 57724
const HOUR_MINUTE = 57725
const DAY_MICROSECOND = 57726
const DAY_SECOND = 57727
const DAY_MINUTE = 57728
const DAY_HOUR = 57729
const YEAR_MONTH = 57730
const SQL_TSI_HOUR = 57731
const SQL_TSI_DAY = 57732
const SQL_TSI_WEEK = 57733
const SQL_TSI_MONTH = 57734
const SQL_TSI_QUARTER = 57735
const SQL_TSI_YEAR = 57736
const SQL_TSI_SECOND = 57737
const SQL_TSI_MINUTE = 57738
const RECURSIVE = 57739
const CONFIG = 57740
const MATCH = 57741
const AGAINST = 57742
const BOOLEAN = 57743
const LANGUAGE = 57744
const WITH = 57745
const QUERY = 57746
const EXPANSION = 57747
const ADDDATE = 57748
const BIT_AND = 57749
const BIT_OR = 57750
const BIT_XOR = 57751
const CAST = 57752
const COUNT = 57753
const APPROX_COUNT_DISTINCT = 57754
const APPROX_PERCENTILE = 57755
const CURDATE = 57756
const CURTIME = 57757
const DATE_ADD = 57758
const DATE_SUB = 57759
const EXTRACT = 57760
const GROUP_CONCAT = 57761
const MAX = 57762
const MID = 57763
const MIN = 57764
const NOW = 57765
const POSITION = 57766
const SESSION_USER = 57767
const STD = 57768
const STDDEV = 57769
const STDDEV_POP = 57770
const STDDEV_SAMP = 57771
const SUBDATE = 57772
const SUBSTR = 57773
const SUBSTRING = 57774
const SUM = 57775
const SYSDATE = 57776
const SYSTEM_USER = 57777
const TRANSLATE = 57778
const TRIM = 57779
const VARIANCE = 57780
const VAR_POP = 57781
const VAR_SAMP = 57782
const AVG = 57783
const ROW = 57784
const OUTFILE = 57785
const HEADER = 57786
const MAX_FILE_SIZE = 57787
const FORCE_QUOTE = 57788
const UNUSED = 57789

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"INTEGRAL",
	"HEX",
	"BIT_LITERAL",
	"FLOAT",
	"HEXNUM",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"TYPE",
	"ANY",
	"SOME",
	"PREPARE",
	"DEALLOCATE",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"EXPIRE",
	"ACCOUNT",
	"UNLOCK",
	"DAY",
	"NEVER",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"LOAD",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"DATABASES",
	"TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT_DISTINCT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"UNUSED",
	"';'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:6807

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 61,
	21, 407,
	-2, 388,
	-1, 66,
	199, 564,
	-2, 600,
	-1, 81,
	226, 273,
	227, 273,
	-2, 294,
	-1, 332,
	63, 1387,
	466, 1387,
	-2, 97,
	-1, 351,
	63, 725,
	466, 725,
	-2, 562,
	-1, 352,
	63, 555,
	466, 555,
	-2, 563,
	-1, 358,
	21, 408,
	-2, 371,
	-1, 430,
	94, 1268,
	105, 1268,
	124, 1268,
	-2, 1090,
	-1, 458,
	21, 408,
	-2, 371,
	-1, 609,
	58, 1416,
	-2, 1423,
	-1, 617,
	58, 1417,
	-2, 1431,
	-1, 619,
	58, 1413,
	-2, 1433,
	-1, 620,
	58, 1414,
	-2, 1434,
	-1, 625,
	58, 1415,
	-2, 1440,
	-1, 626,
	58, 1418,
	-2, 1441,
	-1, 627,
	58, 1419,
	-2, 1442,
	-1, 628,
	58, 854,
	-2, 1443,
	-1, 629,
	58, 855,
	-2, 1444,
	-1, 630,
	58, 856,
	-2, 1445,
	-1, 632,
	58, 1420,
	-2, 1447,
	-1, 633,
	58, 873,
	-2, 1448,
	-1, 634,
	58, 872,
	-2, 1449,
	-1, 637,
	58, 1421,
	-2, 1452,
	-1, 638,
	58, 1422,
	-2, 1453,
	-1, 644,
	58, 935,
	-2, 1268,
	-1, 645,
	58, 944,
	-2, 1293,
	-1, 646,
	58, 948,
	-2, 1332,
	-1, 647,
	58, 959,
	-2, 1392,
	-1, 648,
	58, 961,
	-2, 1402,
	-1, 649,
	58, 949,
	-2, 1407,
	-1, 650,
	58, 957,
	-2, 1411,
	-1, 651,
	58, 938,
	-2, 1412,
	-1, 801,
	1, 590,
	60, 590,
	465, 590,
	-2, 597,
	-1, 938,
	21, 407,
	-2, 783,
	-1, 984,
	124, 1100,
	-2, 1098,
	-1, 986,
	124, 504,
	-2, 1095,
	-1, 987,
	124, 505,
	-2, 1096,
	-1, 1176,
	1, 591,
	60, 591,
	465, 591,
	-2, 597,
	-1, 1263,
	58, 1002,
	-2, 1409,
	-1, 1264,
	58, 1003,
	-2, 1410,
	-1, 1425,
	56, 328,
	59, 328,
	-2, 689,
	-1, 1740,
	79, 597,
	120, 597,
	156, 597,
	159, 597,
	-2, 637,
	-1, 1742,
	260, 750,
	-2, 731,
	-1, 1766,
	56, 328,
	59, 328,
	-2, 690,
	-1, 1850,
	79, 597,
	120, 597,
	156, 597,
	159, 597,
	-2, 638,
	-1, 1878,
	260, 750,
	-2, 732,
	-1, 2262,
	59, 612,
	60, 612,
	-2, 597,
	-1, 2266,
	59, 612,
	60, 612,
	-2, 597,
	-1, 2278,
	59, 616,
	60, 616,
	-2, 597,
	-1, 2281,
	59, 617,
	60, 617,
	-2, 597,
}

const yyPrivate = 57344

const yyLast = 23373

var yyAct = [...]int{
	788, 1266, 2273, 2268, 2266, 2239, 2265, 654, 2213, 1908,
	777, 2104, 672, 2184, 2228, 1223, 1890, 2165, 2078, 2166,
	1846, 2081, 2059, 543, 1734, 1163, 1906, 98, 869, 580,
	2014, 588, 311, 317, 2066, 317, 1267, 1907, 1219, 835,
	359, 1921, 315, 22, 101, 1795, 1760, 1898, 805, 428,
	321, 652, 1565, 1879, 358, 1589, 1428, 1897, 353, 353,
	1461, 522, 1561, 531, 855, 1788, 97, 1549, 1798, 385,
	807, 1806, 1810, 608, 1440, 1606, 829, 1409, 1566, 1218,
	775, 1577, 1746, 1636, 1169, 966, 1626, 1570, 1503, 429,
	1644, 1615, 653, 453, 1182, 981, 984, 98, 975, 533,
	772, 967, 1350, 60, 976, 663, 1336, 1254, 848, 1466,
	832, 1205, 1439, 830, 1403, 814, 3, 436, 29, 1181,
	1854, 1177, 790, 1265, 655, 684, 61, 1280, 773, 601,
	431, 387, 1268, 852, 816, 815, 455, 22, 328, 328,
	304, 468, 1145, 871, 433, 314, 15, 323, 1221, 29,
	312, 6, 313, 5, 572, 303, 420, 61, 307, 905,
	874, 506, 1245, 384, 556, 764, 324, 325, 12, 7,
	4, 1152, 485, 94, 1932, 1842, 1733, 785, 589, 969,
	89, 93, 1148, 2131, 93, 600, 316, 421, 1550, 92,
	93, 1404, 558, 2121, 434, 520, 1392, 505, 93, 1385,
	26, 83, 67, 382, 550, 733, 355, 837, 838, 2153,
	302, 452, 29, 374, 93, 1395, 435, 2151, 730, 406,
	61, 319, 554, 93, 818, 26, 83, 67, 780, 90,
	500, 93, 90, 26, 83, 67, 496, 392, 732, 559,
	15, 2188, 1528, 544, 545, 6, 90, 5, 2169, 2170,
	2012, 1553, 2092, 753, 440, 439, 542, 2095, 1935, 541,
	544, 545, 90, 2015, 2016, 2017, 2018, 1554, 1735, 1555,
	784, 90, 1578, 1579, 1580, 1581, 1377, 462, 1610, 90,
	1607, 849, 1412, 1410, 438, 1411, 1413, 1150, 1148, 471,
	1412, 1410, 1407, 1411, 1413, 407, 1406, 1405, 1918, 1794,
	1793, 491, 487, 498, 499, 461, 1895, 1839, 497, 1730,
	765, 486, 1776, 1998, 460, 1257, 1258, 1259, 1773, 317,
	1777, 98, 2179, 318, 2130, 2258, 1255, 1987, 442, 492,
	376, 2155, 1609, 1471, 1258, 1259, 767, 2274, 2193, 2150,
	373, 372, 2106, 457, 459, 1415, 1416, 1417, 1418, 2168,
	2067, 2068, 2069, 2071, 2070, 2200, 2080, 433, 458, 2128,
	478, 368, 360, 1981, 2102, 2103, 471, 2106, 2249, 1950,
	2112, 1949, 1972, 357, 2157, 2158, 568, 494, 2275, 66,
	2269, 91, 2240, 1393, 385, 1938, 437, 1504, 551, 454,
	2133, 2134, 495, 540, 539, 523, 555, 2090, 557, 81,
	1774, 1389, 1232, 482, 1156, 2231, 1582, 792, 525, 489,
	1574, 521, 1731, 320, 434, 1790, 1789, 353, 766, 1459,
	528, 490, 493, 429, 429, 429, 29, 29, 353, 353,
	524, 488, 526, 1228, 61, 61, 435, 562, 441, 473,
	472, 412, 840, 317, 604, 604, 841, 379, 380, 381,
	1230, 1229, 432, 371, 1976, 560, 561, 735, 585, 1227,
	410, 839, 409, 367, 2253, 2217, 1769, 464, 465, 2044,
	1595, 1556, 1468, 1429, 1383, 751, 1382, 1376, 1371, 1197,
	603, 603, 353, 353, 461, 353, 511, 535, 1161, 736,
	414, 413, 1142, 778, 547, 548, 731, 328, 886, 739,
	587, 474, 456, 353, 353, 476, 398, 863, 582, 582,
	923, 1544, 544, 545, 2232, 375, 473, 472, 760, 1599,
	544, 545, 1542, 353, 536, 353, 1256, 801, 1575, 2156,
	385, 2079, 534, 806, 2132, 2235, 571, 98, 508, 2226,
	1147, 797, 573, 1550, 1470, 502, 787, 1421, 1590, 791,
	510, 823, 2116, 574, 1613, 353, 850, 98, 591, 466,
	1373, 1543, 303, 328, 567, 779, 1171, 1234, 1775, 353,
	429, 1772, 353, 821, 1151, 484, 811, 1571, 1574, 61,
	578, 579, 793, 400, 29, 1974, 399, 530, 864, 1973,
	1146, 68, 61, 29, 68, 353, 353, 868, 98, 1386,
	68, 61, 762, 782, 883, 328, 810, 570, 68, 856,
	575, 576, 577, 824, 872, 856, 856, 302, 819, 820,
	737, 759, 590, 794, 68, 742, 756, 809, 755, 599,
	728, 546, 783, 68, 549, 2229, 2230, 870, 738, 812,
	813, 68, 887, 873, 758, 757, 754, 768, 463, 328,
	776, 1977, 1978, 1412, 1410, 825, 1411, 1413, 537, 940,
	594, 595, 596, 597, 598, 432, 1422, 781, 398, 1704,
	786, 1351, 796, 746, 747, 879, 328, 1270, 1269, 817,
	1832, 1401, 2045, 2047, 2048, 2049, 2046, 445, 450, 451,
	411, 795, 802, 803, 939, 866, 1575, 1351, 377, 1509,
	851, 1568, 947, 1983, 1982, 1569, 1572, 1343, 1750, 1944,
	882, 879, 861, 862, 1745, 1967, 846, 1831, 2248, 828,
	949, 1341, 1342, 1340, 2264, 2055, 847, 2053, 1278, 1847,
	858, 859, 860, 973, 973, 978, 2245, 403, 1279, 880,
	881, 882, 879, 867, 2210, 400, 2051, 538, 399, 2194,
	865, 941, 942, 943, 944, 986, 2041, 1573, 2247, 750,
	2054, 434, 2052, 1275, 806, 2140, 2088, 749, 1164, 1165,
	945, 926, 927, 928, 929, 930, 923, 2087, 415, 398,
	2061, 2050, 408, 938, 987, 1491, 2039, 1512, 2038, 963,
	1511, 2040, 2278, 98, 98, 2037, 913, 2034, 2028, 880,
	881, 882, 879, 1183, 880, 881, 882, 879, 1706, 2025,
	2024, 1933, 1144, 880, 881, 882, 879, 1926, 311, 880,
	881, 882, 879, 1925, 1924, 1199, 880, 881, 882, 879,
	1490, 872, 1166, 1168, 1920, 1919, 434, 972, 1912, 1756,
	1709, 1755, 1754, 353, 1753, 1187, 447, 448, 449, 1540,
	957, 740, 880, 881, 882, 879, 400, 2189, 435, 399,
	873, 29, 2178, 2161, 353, 1683, 1680, 1681, 1682, 61,
	2060, 1714, 2110, 1713, 1712, 1710, 604, 1301, 98, 2109,
	1224, 2086, 1188, 1189, 1190, 1250, 1141, 1252, 985, 965,
	2042, 397, 798, 799, 800, 856, 856, 856, 979, 401,
	980, 2035, 1140, 2162, 2031, 1276, 1277, 2030, 2234, 2029,
	1200, 1969, 603, 1934, 1191, 1922, 1246, 1247, 1248, 1249,
	1462, 1845, 1178, 328, 1155, 880, 881, 882, 879, 1843,
	1763, 1587, 1193, 1711, 1195, 1586, 1585, 1584, 1273, 1158,
	1225, 699, 698, 1622, 1239, 1242, 1157, 963, 959, 920,
	919, 1315, 2256, 741, 1244, 2137, 1196, 817, 1194, 1192,
	1360, 2136, 1226, 1260, 924, 925, 926, 927, 928, 929,
	930, 923, 2117, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
	1331, 1332, 1333, 1334, 1335, 1352, 2084, 1355, 1345, 1346,
	1231, 2005, 1235, 1236, 1237, 931, 932, 924, 925, 926,
	927, 928, 929, 930, 923, 1243, 1474, 2283, 880, 881,
	882, 879, 1297, 1362, 1294, 2277, 2276, 2001, 1296, 1293,
	1295, 1299, 1300, 1154, 2259, 2000, 1298, 1518, 1344, 1833,
	1474, 1517, 1271, 1272, 1830, 1274, 1365, 2255, 2254, 1338,
	808, 1310, 1311, 1312, 1313, 1314, 1715, 1716, 1320, 1321,
	1322, 1323, 1154, 2243, 1882, 1822, 394, 2010, 396, 406,
	1154, 2242, 1787, 393, 391, 390, 402, 395, 1992, 404,
	405, 1740, 2216, 2215, 1354, 1356, 1357, 1353, 1723, 880,
	881, 882, 879, 1215, 1361, 1625, 1363, 1600, 1885, 1521,
	880, 881, 882, 879, 1880, 1994, 2176, 1364, 1519, 1893,
	1894, 1994, 2171, 1241, 2159, 1881, 890, 891, 892, 893,
	894, 895, 896, 888, 1516, 386, 1515, 1282, 1283, 1284,
	1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1304, 1305,
	1306, 1307, 1308, 1309, 1302, 1303, 1927, 1478, 1513, 1886,
	2148, 2147, 1483, 1378, 1700, 1994, 2126, 1480, 1160, 353,
	1994, 2125, 353, 1994, 2124, 461, 1473, 353, 880, 881,
	882, 879, 1398, 1458, 1388, 922, 921, 931, 932, 924,
	925, 926, 927, 928, 929, 930, 923, 1994, 2123, 2115,
	2114, 1425, 2009, 2008, 1438, 1159, 1474, 1431, 2007, 2006,
	880, 881, 882, 879, 2003, 2004, 1396, 1397, 1436, 791,
	2003, 2002, 1359, 461, 98, 98, 98, 98, 880, 881,
	882, 879, 1441, 1818, 1426, 461, 98, 1456, 1186, 1999,
	1423, 1817, 1358, 1892, 1441, 1567, 592, 22, 1420, 1816,
	1400, 1594, 1387, 353, 1427, 880, 881, 882, 879, 1994,
	1993, 98, 98, 880, 881, 882, 879, 1474, 1698, 808,
	1888, 880, 881, 882, 879, 1474, 1684, 1390, 1427, 1457,
	1474, 1482, 1432, 877, 1721, 1224, 1474, 1481, 1379, 1186,
	1380, 1366, 1887, 1889, 1375, 1374, 1479, 1384, 1369, 1368,
	1464, 1465, 1186, 1185, 1741, 1399, 880, 881, 882, 879,
	1154, 1153, 1612, 1433, 1214, 1434, 1148, 1178, 1419, 1703,
	1424, 1430, 29, 744, 743, 1475, 1724, 875, 1476, 1477,
	61, 1215, 1435, 482, 1372, 1437, 1348, 1442, 1443, 1444,
	1445, 880, 881, 882, 879, 1453, 1455, 1454, 1215, 1241,
	15, 481, 1895, 1460, 501, 6, 93, 5, 480, 83,
	67, 1498, 479, 1463, 1883, 1162, 480, 1485, 1486, 1487,
	1488, 1489, 1143, 1493, 93, 1697, 529, 1494, 1495, 1496,
	1497, 569, 2279, 1469, 2225, 2219, 2201, 1472, 2198, 2196,
	973, 2139, 1532, 973, 1696, 482, 1535, 880, 881, 882,
	879, 1693, 353, 1695, 90, 1506, 353, 353, 1510, 2076,
	353, 2064, 1538, 2062, 1501, 1502, 880, 881, 882, 879,
	1694, 1522, 90, 461, 856, 880, 881, 882, 879, 2057,
	856, 1529, 1564, 2019, 1797, 98, 1990, 1690, 1989, 1988,
	322, 1539, 880, 881, 882, 879, 1985, 98, 1183, 1980,
	1598, 1965, 1527, 1986, 1500, 1689, 532, 1807, 1534, 880,
	881, 882, 879, 434, 1799, 1811, 1338, 1499, 880, 881,
	882, 879, 1508, 1814, 1588, 1804, 1531, 880, 881, 882,
	879, 1803, 1783, 1758, 1514, 938, 1545, 1547, 1524, 1629,
	1751, 1533, 1536, 1537, 1530, 1523, 1688, 1591, 1592, 354,
	1339, 90, 1541, 1402, 1687, 1367, 1583, 1233, 1201, 1184,
	1548, 964, 962, 961, 61, 960, 958, 906, 880, 881,
	882, 879, 955, 1596, 1601, 1602, 880, 881, 882, 879,
	1611, 1631, 954, 353, 952, 1686, 951, 1593, 950, 353,
	1624, 1685, 1597, 948, 918, 1623, 917, 916, 1691, 1692,
	1634, 880, 881, 882, 879, 1603, 1620, 880, 881, 882,
	879, 1633, 1717, 915, 914, 912, 1705, 353, 1719, 911,
	910, 1718, 880, 881, 882, 879, 1174, 1629, 1632, 98,
	477, 909, 1347, 880, 881, 882, 879, 908, 1744, 907,
	904, 903, 1720, 902, 901, 362, 363, 364, 365, 1702,
	880, 881, 882, 879, 880, 881, 882, 879, 361, 1699,
	353, 900, 353, 582, 899, 98, 1766, 1701, 1739, 582,
	1738, 898, 1708, 897, 763, 1207, 1210, 1211, 1212, 1208,
	1722, 1209, 1213, 461, 1725, 734, 483, 1616, 1617, 1759,
	2206, 2204, 1441, 2167, 1621, 1619, 1414, 1726, 1240, 593,
	1786, 503, 1748, 1729, 1450, 1448, 1447, 1446, 1224, 1451,
	1449, 2263, 1370, 1452, 1743, 1211, 1212, 1179, 1742, 1551,
	1781, 507, 1779, 1782, 1749, 1768, 1784, 1747, 1752, 1747,
	1757, 1164, 1165, 1558, 1785, 1172, 433, 1767, 1727, 827,
	582, 1765, 1761, 1764, 1770, 1936, 1557, 1728, 48, 1202,
	1217, 1771, 804, 61, 1270, 1269, 2181, 1780, 517, 518,
	515, 516, 553, 1801, 1802, 552, 934, 1139, 937, 1207,
	1210, 1211, 1212, 1208, 1791, 1209, 1213, 1805, 299, 28,
	1809, 27, 935, 936, 933, 1800, 922, 921, 931, 932,
	924, 925, 926, 927, 928, 929, 930, 923, 353, 353,
	1819, 509, 98, 513, 514, 1808, 2220, 2144, 2142, 300,
	2097, 301, 461, 1821, 1851, 2096, 1899, 1901, 2094, 1899,
	1899, 1564, 2022, 2020, 1812, 1823, 1815, 1844, 1825, 461,
	1827, 856, 362, 363, 364, 365, 1778, 1737, 1736, 1628,
	512, 1840, 361, 1627, 1820, 361, 1467, 808, 1484, 1824,
	1381, 1828, 1829, 475, 806, 1826, 2208, 2207, 1905, 1835,
	2207, 2208, 842, 1216, 1900, 1896, 388, 1838, 34, 1,
	527, 378, 1316, 1848, 1876, 519, 1902, 1903, 1836, 1837,
	748, 1915, 1904, 444, 470, 745, 469, 467, 1349, 1281,
	685, 968, 974, 1768, 2246, 2058, 2180, 2212, 2138, 2183,
	761, 671, 1916, 2089, 1552, 1910, 1911, 2011, 2091, 1914,
	2013, 1394, 1929, 1391, 504, 1525, 1923, 1526, 697, 688,
	953, 690, 729, 446, 1940, 687, 1913, 1608, 366, 443,
	389, 1917, 1732, 1792, 1930, 1813, 1796, 2272, 2262, 1928,
	922, 921, 931, 932, 924, 925, 926, 927, 928, 929,
	930, 923, 2238, 2218, 2105, 2257, 2149, 353, 2199, 2192,
	2101, 1937, 326, 843, 563, 418, 98, 2077, 1576, 1408,
	1170, 1149, 774, 327, 1943, 1901, 2129, 2063, 1941, 1942,
	369, 1945, 1946, 1947, 1948, 1173, 370, 1951, 1952, 1953,
	1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963,
	1964, 1896, 1966, 1970, 1968, 1984, 1176, 1175, 1261, 889,
	1337, 956, 946, 2023, 606, 1507, 1996, 662, 656, 1605,
	1604, 1997, 1991, 1891, 1995, 822, 33, 32, 31, 878,
	982, 686, 100, 1198, 2056, 433, 983, 1761, 921, 931,
	932, 924, 925, 926, 927, 928, 929, 930, 923, 2021,
	2098, 1931, 2185, 670, 669, 668, 461, 667, 1206, 461,
	461, 461, 2036, 1204, 1203, 461, 834, 833, 1224, 2026,
	2027, 876, 2164, 2163, 2119, 2032, 2033, 2120, 1841, 1979,
	2043, 1975, 2065, 1971, 2111, 2073, 2074, 2075, 1850, 1849,
	2099, 2083, 2072, 1877, 1878, 1884, 1643, 353, 353, 2085,
	1639, 1641, 2082, 1642, 1640, 1707, 1635, 1562, 1563, 1560,
	1559, 2100, 1618, 1614, 2093, 970, 977, 789, 95, 831,
	11, 10, 752, 9, 14, 21, 2107, 2108, 98, 20,
	19, 56, 61, 55, 54, 461, 53, 18, 8, 52,
	51, 50, 17, 16, 46, 44, 43, 461, 42, 41,
	40, 39, 38, 45, 37, 36, 2113, 35, 65, 64,
	63, 2122, 62, 23, 24, 25, 74, 870, 73, 2118,
	70, 72, 71, 2127, 69, 30, 1520, 582, 582, 13,
	2135, 2, 0, 0, 0, 2143, 2141, 2145, 2146, 0,
	2223, 0, 0, 0, 0, 0, 2152, 2154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2160, 0,
	2187, 0, 0, 0, 0, 2172, 2173, 2174, 2175, 2191,
	0, 0, 2186, 922, 921, 931, 932, 924, 925, 926,
	927, 928, 929, 930, 923, 2190, 922, 921, 931, 932,
	924, 925, 926, 927, 928, 929, 930, 923, 0, 0,
	0, 2202, 0, 0, 2205, 2203, 2177, 0, 0, 2214,
	0, 0, 0, 2209, 0, 2211, 0, 461, 0, 461,
	0, 0, 0, 2195, 0, 2197, 778, 2222, 778, 2224,
	0, 0, 0, 0, 0, 0, 0, 2187, 2237, 0,
	0, 0, 0, 2233, 0, 0, 461, 0, 0, 2186,
	2236, 0, 2241, 0, 0, 778, 2244, 0, 0, 0,
	0, 0, 2214, 2250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2227, 2260, 0, 0, 0, 0, 0,
	0, 2261, 0, 0, 0, 0, 0, 0, 0, 0,
	2271, 0, 2252, 2270, 0, 0, 0, 0, 0, 0,
	2280, 2282, 0, 2281, 0, 2271, 1096, 1138, 0, 0,
	1083, 0, 1045, 1098, 1019, 1034, 1106, 1035, 1036, 1070,
	998, 1054, 224, 1032, 0, 1086, 990, 1022, 1023, 992,
	1029, 993, 1020, 1047, 169, 1018, 1057, 194, 1104, 0,
	0, 253, 208, 0, 0, 1050, 1088, 1052, 1075, 1044,
	1071, 1006, 1064, 1099, 1033, 1068, 1100, 0, 0, 0,
	0, 0, 798, 799, 800, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 1067, 1093, 1031, 0, 154,
	1097, 1051, 1069, 0, 0, 991, 1065, 0, 996, 999,
	1105, 1091, 1026, 1027, 0, 0, 0, 0, 0, 0,
	0, 1048, 1053, 1072, 1041, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1024, 0, 1061, 0, 0, 0,
	1001, 997, 0, 1046, 0, 143, 258, 272, 152, 249,
	285, 157, 256, 148, 223, 245, 0, 1137, 145, 270,
	255, 205, 188, 189, 144, 0, 240, 167, 180, 164,
	221, 0, 1095, 297, 163, 288, 1000, 280, 147, 1132,
	279, 220, 267, 271, 206, 200, 146, 269, 204, 199,
	192, 171, 184, 232, 198, 233, 185, 210, 209, 211,
	1116, 1117, 1118, 1119, 1120, 1128, 1129, 0, 1133, 1134,
	1135, 1005, 0, 1025, 1073, 0, 989, 1081, 1089, 1043,
	282, 1092, 1040, 1039, 1123, 0, 1122, 257, 1124, 1125,
	193, 1087, 1021, 1030, 298, 1028, 243, 226, 1094, 1060,
	1136, 241, 196, 268, 234, 273, 259, 281, 237, 235,
	139, 260, 166, 207, 149, 150, 162, 168, 170, 172,
	173, 216, 217, 229, 248, 261, 262, 263, 165, 158,
	242, 159, 182, 160, 140, 250, 161, 141, 230, 266,
	1121, 178, 238, 203, 142, 202, 231, 265, 264, 289,
	295, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1130, 0, 1131, 294, 176, 988, 277,
	0, 222, 1084, 994, 1004, 1002, 1037, 1062, 1063, 218,
	293, 1077, 1080, 1078, 1107, 246, 0, 0, 0, 0,
	0, 187, 228, 0, 247, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 995, 0, 254, 275, 287,
	278, 1038, 1012, 1049, 286, 1015, 1013, 1076, 1014, 1066,
	1109, 212, 213, 214, 215, 179, 0, 156, 1058, 1042,
	1110, 1111, 1112, 1113, 1114, 1115, 1017, 1090, 175, 181,
	0, 183, 155, 227, 177, 284, 190, 1082, 219, 186,
	251, 191, 197, 239, 283, 225, 244, 153, 274, 252,
	201, 1011, 1016, 1010, 1055, 1056, 1101, 1102, 1103, 1074,
	1003, 1085, 1007, 1009, 1008, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 0, 1059, 138, 0, 195,
	1108, 236, 174, 922, 921, 931, 932, 924, 925, 926,
	927, 928, 929, 930, 923, 922, 921, 931, 932, 924,
	925, 926, 927, 928, 929, 930, 923, 693, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 1126,
	1127, 290, 291, 292, 276, 664, 0, 0, 0, 169,
	0, 0, 194, 0, 0, 0, 253, 208, 0, 2221,
	0, 0, 707, 713, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 657, 0, 0, 0, 607, 699, 698,
	673, 682, 0, 0, 151, 674, 0, 681, 675, 679,
	678, 676, 677, 0, 644, 0, 0, 0, 0, 0,
	0, 605, 661, 0, 665, 922, 921, 931, 932, 924,
	925, 926, 927, 928, 929, 930, 923, 0, 0, 0,
	0, 0, 0, 0, 0, 658, 659, 0, 0, 0,
	0, 694, 0, 660, 0, 0, 696, 0, 683, 0,
	143, 258, 272, 152, 249, 285, 157, 256, 148, 223,
	245, 1834, 0, 145, 270, 255, 205, 188, 189, 144,
	0, 240, 167, 180, 164, 221, 680, 692, 650, 163,
	648, 691, 280, 147, 0, 279, 220, 267, 271, 206,
	200, 146, 269, 204, 199, 192, 171, 184, 232, 198,
	233, 185, 210, 209, 211, 0, 0, 922, 921, 931,
	932, 924, 925, 926, 927, 928, 929, 930, 923, 0,
	0, 0, 689, 0, 0, 282, 0, 0, 706, 0,
	0, 0, 257, 0, 0, 193, 0, 0, 0, 651,
	0, 243, 226, 716, 0, 0, 241, 196, 268, 234,
	273, 259, 281, 237, 235, 139, 260, 166, 207, 149,
	150, 162, 168, 170, 172, 173, 216, 217, 229, 248,
	261, 262, 263, 165, 158, 242, 159, 182, 160, 140,
	250, 161, 141, 230, 266, 0, 178, 238, 203, 142,
	202, 231, 265, 264, 289, 295, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1318, 1317,
	1319, 294, 176, 0, 277, 704, 222, 715, 700, 701,
	702, 705, 708, 709, 646, 649, 710, 712, 714, 717,
	246, 0, 0, 0, 0, 0, 187, 228, 0, 247,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 275, 287, 647, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 695, 212, 213, 214, 215,
	645, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 181, 0, 183, 155, 227, 177,
	284, 190, 0, 219, 186, 251, 191, 197, 239, 283,
	225, 244, 153, 274, 252, 201, 723, 703, 722, 724,
	725, 721, 726, 727, 711, 666, 0, 719, 718, 720,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 195, 0, 236, 174, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 117, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
	640, 641, 642, 643, 0, 0, 290, 291, 292, 276,
	93, 0, 693, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 0, 0, 0, 0, 0, 0, 0,
	664, 0, 0, 0, 169, 0, 0, 194, 0, 0,
	0, 253, 208, 0, 0, 0, 0, 707, 713, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 657, 0,
	0, 0, 607, 699, 698, 673, 682, 0, 0, 151,
	674, 0, 681, 675, 679, 678, 676, 677, 0, 644,
	0, 0, 0, 0, 0, 0, 605, 661, 0, 665,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	658, 659, 0, 0, 0, 0, 694, 0, 660, 0,
	0, 696, 0, 683, 0, 143, 258, 272, 152, 249,
	285, 157, 256, 148, 223, 245, 0, 0, 145, 270,
	255, 205, 188, 189, 144, 0, 240, 167, 180, 164,
	221, 680, 692, 650, 163, 648, 691, 280, 147, 0,
	279, 220, 267, 271, 206, 200, 146, 269, 204, 199,
	192, 171, 184, 232, 198, 233, 185, 210, 209, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 689, 0, 0,
	282, 0, 0, 706, 0, 0, 0, 257, 0, 0,
	193, 0, 0, 0, 651, 0, 243, 226, 716, 0,
	0, 241, 196, 268, 234, 273, 259, 281, 237, 235,
	139, 260, 166, 207, 149, 150, 162, 168, 170, 172,
	173, 216, 217, 229, 248, 261, 262, 263, 165, 158,
	242, 159, 182, 160, 140, 250, 161, 141, 230, 266,
	0, 178, 238, 203, 142, 202, 231, 265, 264, 289,
	295, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 294, 176, 0, 277,
	704, 222, 715, 700, 701, 702, 705, 708, 709, 646,
	649, 710, 712, 714, 717, 246, 0, 0, 0, 0,
	0, 187, 228, 0, 247, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 275, 287,
	647, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	695, 212, 213, 214, 215, 645, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 181,
	0, 183, 155, 227, 177, 284, 190, 0, 219, 186,
	251, 191, 197, 239, 283, 225, 244, 153, 274, 252,
	201, 723, 703, 722, 724, 725, 721, 726, 727, 711,
	666, 0, 719, 718, 720, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 195,
	68, 236, 174, 609, 610, 611, 612, 613, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 623, 117, 624,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	635, 636, 637, 638, 639, 640, 641, 642, 643, 693,
	0, 290, 291, 292, 276, 0, 0, 0, 0, 224,
	0, 0, 0, 0, 0, 0, 0, 664, 0, 0,
	0, 169, 857, 0, 194, 0, 0, 0, 253, 208,
	0, 0, 0, 0, 707, 713, 0, 0, 0, 0,
	0, 0, 853, 0, 0, 657, 0, 0, 0, 607,
	699, 698, 673, 682, 0, 0, 151, 674, 0, 681,
	675, 679, 678, 676, 677, 0, 644, 0, 0, 0,
	0, 0, 0, 605, 661, 0, 665, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 658, 659, 0,
	0, 0, 0, 694, 0, 660, 0, 0, 854, 0,
	683, 0, 143, 258, 272, 152, 249, 285, 157, 256,
	148, 223, 245, 0, 0, 145, 270, 255, 205, 188,
	189, 144, 0, 240, 167, 180, 164, 221, 680, 692,
	650, 163, 648, 691, 280, 147, 0, 279, 220, 267,
	271, 206, 200, 146, 269, 204, 199, 192, 171, 184,
	232, 198, 233, 185, 210, 209, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 689, 0, 0, 282, 0, 0,
	706, 0, 0, 0, 257, 0, 0, 193, 0, 0,
	0, 651, 0, 243, 226, 716, 0, 0, 241, 196,
	268, 234, 273, 259, 281, 237, 235, 139, 260, 166,
	207, 149, 150, 162, 168, 170, 172, 173, 216, 217,
	229, 248, 261, 262, 263, 165, 158, 242, 159, 182,
	160, 140, 250, 161, 141, 230, 266, 0, 178, 238,
	203, 142, 202, 231, 265, 264, 289, 295, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 176, 0, 277, 704, 222, 715,
	700, 701, 702, 705, 708, 709, 646, 649, 710, 712,
	714, 717, 246, 0, 0, 0, 0, 0, 187, 228,
	0, 247, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 275, 287, 647, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 695, 212, 213,
	214, 215, 645, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 181, 0, 183, 155,
	227, 177, 284, 190, 0, 219, 186, 251, 191, 197,
	239, 283, 225, 244, 153, 274, 252, 201, 723, 703,
	722, 724, 725, 721, 726, 727, 711, 666, 0, 719,
	718, 720, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 195, 0, 236, 174,
	609, 610, 611, 612, 613, 614, 615, 616, 617, 618,
	619, 620, 621, 622, 623, 117, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 641, 642, 643, 693, 0, 290, 291,
	292, 276, 0, 0, 0, 0, 224, 0, 0, 0,
	0, 0, 0, 0, 664, 0, 0, 0, 169, 2251,
	0, 194, 0, 0, 0, 253, 208, 0, 0, 0,
	0, 707, 713, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 657, 0, 0, 0, 607, 699, 698, 673,
	682, 0, 0, 151, 674, 0, 681, 675, 679, 678,
	676, 677, 0, 644, 0, 0, 0, 0, 0, 0,
	605, 661, 0, 665, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 658, 659, 0, 0, 0, 0,
	694, 0, 660, 0, 0, 696, 0, 683, 0, 143,
	258, 272, 152, 249, 285, 157, 256, 148, 223, 245,
	0, 0, 145, 270, 255, 205, 188, 189, 144, 0,
	240, 167, 180, 164, 221, 680, 692, 650, 163, 648,
	691, 280, 147, 0, 279, 220, 267, 271, 206, 200,
	146, 269, 204, 199, 192, 171, 184, 232, 198, 233,
	185, 210, 209, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 689, 0, 0, 282, 0, 0, 706, 0, 0,
	0, 257, 0, 0, 193, 0, 0, 0, 651, 0,
	243, 226, 716, 0, 0, 241, 196, 268, 234, 273,
	259, 281, 237, 235, 139, 260, 166, 207, 149, 150,
	162, 168, 170, 172, 173, 216, 217, 229, 248, 261,
	262, 263, 165, 158, 242, 159, 182, 160, 140, 250,
	161, 141, 230, 266, 0, 178, 238, 203, 142, 202,
	231, 265, 264, 289, 295, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 176, 0, 277, 704, 222, 715, 700, 701, 702,
	705, 708, 709, 646, 649, 710, 712, 714, 717, 246,
	0, 0, 0, 0, 0, 187, 228, 0, 247, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 275, 287, 647, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 695, 212, 213, 214, 215, 645,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 181, 0, 183, 155, 227, 177, 284,
	190, 0, 219, 186, 251, 191, 197, 239, 283, 225,
	244, 153, 274, 252, 201, 723, 703, 722, 724, 725,
	721, 726, 727, 711, 666, 0, 719, 718, 720, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 195, 0, 236, 174, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 620, 621,
	622, 623, 117, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 693, 0, 290, 291, 292, 276, 0,
	0, 0, 0, 224, 0, 0, 0, 0, 0, 0,
	0, 664, 0, 0, 0, 169, 857, 0, 194, 0,
	0, 0, 253, 208, 0, 0, 0, 0, 707, 713,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 657,
	0, 0, 0, 607, 699, 698, 673, 682, 0, 0,
	151, 674, 0, 681, 675, 679, 678, 676, 677, 0,
	644, 0, 0, 0, 0, 0, 0, 605, 661, 0,
	665, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 658, 659, 0, 0, 0, 0, 694, 0, 660,
	0, 0, 696, 0, 683, 0, 143, 258, 272, 152,
	249, 285, 157, 256, 148, 223, 245, 0, 0, 145,
	270, 255, 205, 188, 189, 144, 0, 240, 167, 180,
	164, 221, 680, 692, 650, 163, 648, 691, 280, 147,
	0, 279, 220, 267, 271, 206, 200, 146, 269, 204,
	199, 192, 171, 184, 232, 198, 233, 185, 210, 209,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 689, 0,
	0, 282, 0, 0, 706, 0, 0, 0, 257, 0,
	0, 193, 0, 0, 0, 651, 0, 243, 226, 716,
	0, 0, 241, 196, 268, 234, 273, 259, 281, 237,
	235, 139, 260, 166, 207, 149, 150, 162, 168, 170,
	172, 173, 216, 217, 229, 248, 261, 262, 263, 165,
	158, 242, 159, 182, 160, 140, 250, 161, 141, 230,
	266, 0, 178, 238, 203, 142, 202, 231, 265, 264,
	289, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 176, 0,
	277, 704, 222, 715, 700, 701, 702, 705, 708, 709,
	646, 649, 710, 712, 714, 717, 246, 0, 0, 0,
	0, 0, 187, 228, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 275,
	287, 647, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 695, 212, 213, 214, 215, 645, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	181, 0, 183, 155, 227, 177, 284, 190, 0, 219,
	186, 251, 191, 197, 239, 283, 225, 244, 153, 274,
	252, 201, 723, 703, 722, 724, 725, 721, 726, 727,
	711, 666, 0, 719, 718, 720, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	195, 0, 236, 174, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 618, 619, 620, 621, 622, 623, 117,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	0, 0, 290, 291, 292, 276, 693, 0, 0, 1492,
	0, 0, 0, 0, 0, 0, 224, 0, 0, 0,
	0, 0, 0, 0, 664, 0, 0, 0, 169, 0,
	0, 194, 0, 0, 0, 253, 208, 0, 0, 0,
	0, 707, 713, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 657, 0, 0, 0, 607, 699, 698, 673,
	682, 0, 0, 151, 674, 0, 681, 675, 679, 678,
	676, 677, 0, 644, 0, 0, 0, 0, 0, 0,
	605, 661, 0, 665, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 658, 659, 0, 0, 0, 0,
	694, 0, 660, 0, 0, 696, 0, 683, 0, 143,
	258, 272, 152, 249, 285, 157, 256, 148, 223, 245,
	0, 0, 145, 270, 255, 205, 188, 189, 144, 0,
	240, 167, 180, 164, 221, 680, 692, 650, 163, 648,
	691, 280, 147, 0, 279, 220, 267, 271, 206, 200,
	146, 269, 204, 199, 192, 171, 184, 232, 198, 233,
	185, 210, 209, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 689, 0, 0, 282, 0, 0, 706, 0, 0,
	0, 257, 0, 0, 193, 0, 0, 0, 651, 0,
	243, 226, 716, 0, 0, 241, 196, 268, 234, 273,
	259, 281, 237, 235, 139, 260, 166, 207, 149, 150,
	162, 168, 170, 172, 173, 216, 217, 229, 248, 261,
	262, 263, 165, 158, 242, 159, 182, 160, 140, 250,
	161, 141, 230, 266, 0, 178, 238, 203, 142, 202,
	231, 265, 264, 289, 295, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 176, 0, 277, 704, 222, 715, 700, 701, 702,
	705, 708, 709, 646, 649, 710, 712, 714, 717, 246,
	0, 0, 0, 0, 0, 187, 228, 0, 247, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 275, 287, 647, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 695, 212, 213, 214, 215, 645,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 181, 0, 183, 155, 227, 177, 284,
	190, 0, 219, 186, 251, 191, 197, 239, 283, 225,
	244, 153, 274, 252, 201, 723, 703, 722, 724, 725,
	721, 726, 727, 711, 666, 0, 719, 718, 720, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 195, 0, 236, 174, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 620, 621,
	622, 623, 117, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 693, 0, 290, 291, 292, 276, 0,
	0, 0, 0, 224, 0, 0, 0, 0, 0, 0,
	0, 664, 0, 0, 0, 169, 0, 0, 194, 0,
	0, 0, 253, 208, 0, 0, 0, 0, 707, 713,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 657,
	0, 0, 0, 607, 699, 698, 673, 682, 0, 0,
	151, 674, 0, 681, 675, 679, 678, 676, 677, 0,
	644, 0, 0, 0, 0, 0, 0, 605, 661, 0,
	665, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 658, 659, 602, 0, 0, 0, 694, 0, 660,
	0, 0, 696, 0, 683, 0, 143, 258, 272, 152,
	249, 285, 157, 256, 148, 223, 245, 0, 0, 145,
	270, 255, 205, 188, 189, 144, 0, 240, 167, 180,
	164, 221, 680, 692, 650, 163, 648, 691, 280, 147,
	0, 279, 220, 267, 271, 206, 200, 146, 269, 204,
	199, 192, 171, 184, 232, 198, 233, 185, 210, 209,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 689, 0,
	0, 282, 0, 0, 706, 0, 0, 0, 257, 0,
	0, 193, 0, 0, 0, 651, 0, 243, 226, 716,
	0, 0, 241, 196, 268, 234, 273, 259, 281, 237,
	235, 139, 260, 166, 207, 149, 150, 162, 168, 170,
	172, 173, 216, 217, 229, 248, 261, 262, 263, 165,
	158, 242, 159, 182, 160, 140, 250, 161, 141, 230,
	266, 0, 178, 238, 203, 142, 202, 231, 265, 264,
	289, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 176, 0,
	277, 704, 222, 715, 700, 701, 702, 705, 708, 709,
	646, 649, 710, 712, 714, 717, 246, 0, 0, 0,
	0, 0, 187, 228, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 275,
	287, 647, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 695, 212, 213, 214, 215, 645, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	181, 0, 183, 155, 227, 177, 284, 190, 0, 219,
	186, 251, 191, 197, 239, 283, 225, 244, 153, 274,
	252, 201, 723, 703, 722, 724, 725, 721, 726, 727,
	711, 666, 0, 719, 718, 720, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	195, 0, 236, 174, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 618, 619, 620, 621, 622, 623, 117,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	693, 0, 290, 291, 292, 276, 0, 0, 0, 0,
	224, 0, 0, 0, 0, 0, 0, 0, 664, 0,
	0, 0, 169, 0, 0, 194, 0, 0, 0, 253,
	208, 0, 0, 0, 0, 707, 713, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 657, 0, 0, 0,
	607, 699, 698, 673, 682, 0, 0, 151, 674, 0,
	681, 675, 679, 678, 676, 677, 0, 644, 0, 0,
	0, 0, 0, 0, 605, 661, 0, 665, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 658, 659,
	0, 0, 0, 0, 694, 0, 660, 0, 0, 696,
	0, 683, 0, 143, 258, 272, 152, 249, 285, 157,
	256, 148, 223, 245, 0, 0, 145, 270, 255, 205,
	188, 189, 144, 0, 240, 167, 180, 164, 221, 680,
	692, 650, 163, 648, 691, 280, 147, 0, 279, 220,
	267, 271, 206, 200, 146, 269, 204, 199, 192, 171,
	184, 232, 198, 233, 185, 210, 209, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 689, 0, 0, 282, 0,
	0, 706, 0, 0, 0, 257, 0, 0, 193, 0,
	0, 0, 651, 0, 243, 226, 716, 0, 0, 241,
	196, 268, 234, 273, 259, 281, 237, 235, 139, 260,
	166, 207, 149, 150, 162, 168, 170, 172, 173, 216,
	217, 229, 248, 261, 262, 263, 165, 158, 242, 159,
	182, 160, 140, 250, 161, 141, 230, 266, 0, 178,
	238, 203, 142, 202, 231, 265, 264, 289, 295, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 176, 0, 277, 704, 222,
	715, 700, 701, 702, 705, 708, 709, 646, 649, 710,
	712, 714, 717, 246, 0, 0, 0, 0, 0, 187,
	228, 0, 247, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 275, 287, 647, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 695, 212,
	213, 214, 215, 645, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 181, 0, 183,
	155, 227, 177, 284, 190, 0, 219, 186, 251, 191,
	197, 239, 283, 225, 244, 153, 274, 252, 201, 723,
	703, 722, 724, 725, 721, 726, 727, 711, 666, 0,
	719, 718, 720, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 195, 0, 236,
	174, 609, 610, 611, 612, 613, 614, 615, 616, 617,
	618, 619, 620, 621, 622, 623, 117, 624, 625, 626,
	627, 628, 629, 630, 631, 632, 633, 634, 635, 636,
	637, 638, 639, 640, 641, 642, 643, 693, 0, 290,
	291, 292, 276, 0, 0, 0, 0, 224, 0, 0,
	0, 1262, 0, 0, 0, 664, 0, 0, 0, 169,
	0, 0, 194, 0, 0, 0, 253, 208, 0, 0,
	0, 0, 707, 713, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 657, 0, 0, 0, 607, 699, 698,
	673, 682, 0, 0, 151, 674, 0, 681, 675, 679,
	678, 676, 677, 0, 644, 0, 0, 0, 0, 0,
	0, 0, 661, 0, 665, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 658, 659, 0, 0, 0,
	0, 694, 0, 660, 0, 0, 696, 0, 683, 0,
	143, 258, 272, 152, 249, 285, 157, 256, 148, 223,
	245, 0, 0, 145, 270, 255, 205, 188, 189, 144,
	0, 240, 167, 180, 164, 221, 680, 692, 650, 163,
	648, 691, 280, 147, 0, 279, 220, 267, 271, 206,
	200, 146, 269, 204, 199, 192, 171, 184, 232, 198,
	233, 185, 210, 209, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 689, 0, 0, 282, 0, 0, 706, 0,
	0, 0, 257, 0, 0, 193, 0, 0, 0, 651,
	0, 243, 226, 716, 0, 0, 241, 196, 268, 234,
	273, 259, 281, 237, 235, 139, 260, 166, 207, 149,
	150, 162, 168, 170, 172, 173, 216, 217, 229, 248,
	261, 262, 263, 165, 158, 242, 159, 182, 160, 140,
	250, 161, 141, 230, 266, 0, 178, 238, 203, 142,
	202, 231, 265, 264, 289, 1263, 1264, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 176, 0, 277, 704, 222, 715, 700, 701,
	702, 705, 708, 709, 646, 649, 710, 712, 714, 717,
	246, 0, 0, 0, 0, 0, 187, 228, 0, 247,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 275, 287, 647, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 695, 212, 213, 214, 215,
	645, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 181, 0, 183, 155, 227, 177,
	284, 190, 0, 219, 186, 251, 191, 197, 239, 283,
	225, 244, 153, 274, 252, 201, 723, 703, 722, 724,
	725, 721, 726, 727, 711, 666, 0, 719, 718, 720,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 195, 0, 236, 174, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 117, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
	640, 641, 642, 643, 693, 0, 290, 291, 292, 276,
	0, 0, 0, 0, 224, 0, 0, 0, 0, 0,
	0, 0, 664, 0, 0, 0, 169, 0, 0, 194,
	0, 0, 0, 253, 208, 0, 0, 0, 0, 707,
	713, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	657, 0, 0, 0, 607, 699, 698, 673, 682, 0,
	0, 151, 674, 0, 681, 675, 679, 678, 676, 677,
	0, 644, 0, 0, 0, 0, 0, 0, 0, 661,
	0, 665, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 658, 659, 0, 0, 0, 0, 694, 0,
	660, 0, 0, 696, 0, 683, 0, 143, 258, 272,
	152, 249, 285, 157, 256, 148, 223, 245, 0, 0,
	145, 270, 255, 205, 188, 189, 144, 0, 240, 167,
	180, 164, 221, 680, 692, 650, 163, 648, 691, 280,
	147, 0, 279, 220, 267, 271, 206, 200, 146, 269,
	204, 199, 192, 171, 184, 232, 198, 233, 185, 210,
	209, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 689,
	0, 0, 282, 0, 0, 706, 0, 0, 0, 257,
	0, 0, 193, 0, 0, 0, 651, 0, 243, 226,
	716, 0, 0, 241, 196, 268, 234, 273, 259, 281,
	237, 235, 139, 260, 166, 207, 149, 150, 162, 168,
	170, 172, 173, 216, 217, 229, 248, 261, 262, 263,
	165, 158, 242, 159, 182, 160, 140, 250, 161, 141,
	230, 266, 0, 178, 238, 203, 142, 202, 231, 265,
	264, 289, 295, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 176,
	0, 277, 704, 222, 715, 700, 701, 702, 705, 708,
	709, 646, 649, 710, 712, 714, 717, 246, 0, 0,
	0, 0, 0, 187, 228, 0, 247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	275, 287, 647, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 695, 212, 213, 214, 215, 645, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 181, 0, 183, 155, 227, 177, 284, 190, 0,
	219, 186, 251, 191, 197, 239, 283, 225, 244, 153,
	274, 252, 201, 723, 703, 722, 724, 725, 721, 726,
	727, 711, 666, 0, 719, 718, 720, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 195, 0, 236, 174, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
	117, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 693, 0, 290, 291, 292, 276, 0, 0, 0,
	0, 224, 0, 0, 0, 0, 0, 0, 0, 664,
	0, 0, 0, 169, 0, 0, 194, 0, 0, 0,
	253, 208, 0, 0, 0, 0, 707, 713, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 699, 698, 673, 682, 0, 0, 151, 674,
	0, 681, 675, 679, 678, 676, 677, 0, 644, 0,
	0, 0, 0, 0, 0, 605, 661, 0, 665, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 658,
	659, 0, 0, 0, 0, 694, 0, 660, 0, 0,
	696, 0, 683, 0, 143, 258, 272, 152, 249, 285,
	157, 256, 148, 223, 245, 0, 0, 145, 270, 255,
	205, 188, 189, 144, 0, 240, 167, 180, 164, 221,
	680, 692, 650, 163, 648, 691, 280, 147, 0, 279,
	220, 267, 271, 206, 200, 146, 269, 204, 199, 192,
	171, 184, 232, 198, 233, 185, 210, 209, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 689, 0, 0, 282,
	0, 0, 706, 0, 0, 0, 257, 0, 0, 193,
	0, 0, 0, 651, 0, 243, 226, 716, 0, 0,
	241, 196, 268, 234, 273, 259, 281, 237, 235, 139,
	260, 166, 207, 149, 150, 162, 168, 170, 172, 173,
	216, 217, 229, 248, 261, 262, 263, 165, 158, 242,
	159, 182, 160, 140, 250, 161, 141, 230, 266, 0,
	178, 238, 203, 142, 202, 231, 265, 264, 289, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 176, 0, 277, 704,
	222, 715, 700, 701, 702, 705, 708, 709, 646, 649,
	710, 712, 714, 717, 246, 0, 0, 0, 0, 0,
	187, 228, 0, 247, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 275, 287, 647,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 695,
	212, 213, 214, 215, 645, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 181, 0,
	183, 155, 227, 177, 284, 190, 0, 219, 186, 251,
	191, 197, 239, 283, 225, 244, 153, 274, 252, 201,
	723, 703, 722, 724, 725, 721, 726, 727, 711, 666,
	0, 719, 718, 720, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 195, 0,
	236, 174, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 618, 619, 620, 621, 622, 623, 117, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 0, 0,
	290, 291, 292, 276, 338, 0, 337, 341, 333, 0,
	0, 0, 0, 0, 0, 0, 224, 0, 0, 0,
	329, 0, 0, 0, 0, 0, 0, 0, 169, 0,
	348, 194, 0, 0, 0, 253, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 351, 0, 0, 352,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 338, 0, 337, 341, 333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 0, 0, 0, 143,
	258, 272, 152, 249, 285, 157, 256, 148, 223, 245,
	0, 0, 145, 270, 255, 205, 188, 189, 144, 0,
	240, 167, 180, 164, 221, 0, 0, 297, 163, 288,
	0, 280, 147, 0, 279, 220, 267, 271, 206, 200,
	146, 269, 204, 199, 192, 171, 184, 232, 198, 233,
	185, 210, 209, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 331, 330, 334, 0, 0,
	0, 0, 0, 336, 282, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 193, 340, 0, 0, 298, 0,
	243, 226, 0, 0, 0, 241, 196, 268, 234, 332,
	259, 281, 237, 356, 139, 260, 166, 207, 149, 150,
	162, 168, 170, 172, 173, 216, 217, 229, 248, 261,
	262, 263, 165, 158, 242, 159, 182, 160, 140, 250,
	161, 141, 230, 266, 0, 178, 238, 203, 142, 202,
	231, 265, 264, 289, 295, 296, 331, 330, 334, 0,
	0, 0, 0, 0, 336, 0, 0, 0, 0, 0,
	294, 176, 0, 277, 0, 222, 340, 0, 0, 0,
	0, 0, 0, 218, 293, 0, 0, 0, 0, 246,
	769, 0, 0, 335, 339, 342, 228, 343, 344, 0,
	0, 345, 346, 347, 0, 0, 349, 350, 0, 0,
	0, 254, 275, 287, 278, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 179,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 181, 0, 183, 155, 227, 177, 284,
	190, 0, 219, 186, 251, 191, 197, 239, 283, 225,
	244, 153, 274, 252, 201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 339, 770, 0, 343, 771,
	0, 0, 345, 346, 347, 0, 0, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 195, 0, 236, 174, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 0, 0, 290, 291, 292, 276, 338,
	0, 337, 341, 333, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 0, 329, 0, 0, 0, 0,
	0, 0, 0, 169, 0, 348, 194, 0, 0, 0,
	253, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 0, 352, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 258, 272, 152, 249, 285,
	157, 256, 148, 223, 245, 0, 0, 145, 270, 255,
	205, 188, 189, 144, 0, 240, 167, 180, 164, 221,
	0, 0, 297, 163, 288, 0, 280, 147, 0, 279,
	220, 267, 271, 206, 200, 146, 269, 204, 199, 192,
	171, 184, 232, 198, 233, 185, 210, 209, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	331, 330, 334, 0, 0, 0, 0, 0, 336, 282,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 193,
	340, 0, 0, 298, 0, 243, 226, 0, 0, 0,
	241, 196, 268, 234, 332, 259, 281, 237, 235, 139,
	260, 166, 207, 149, 150, 162, 168, 170, 172, 173,
	216, 217, 229, 248, 261, 262, 263, 165, 158, 242,
	159, 182, 160, 140, 250, 161, 141, 230, 266, 0,
	178, 238, 203, 142, 202, 231, 265, 264, 289, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 176, 0, 277, 0,
	222, 0, 0, 0, 0, 0, 0, 0, 218, 293,
	0, 0, 0, 0, 246, 0, 0, 0, 335, 339,
	342, 228, 343, 344, 0, 0, 345, 346, 347, 0,
	0, 349, 350, 0, 0, 0, 254, 275, 287, 278,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 179, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 181, 0,
	183, 155, 227, 177, 284, 190, 0, 219, 186, 251,
	191, 197, 239, 283, 225, 244, 153, 274, 252, 201,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 195, 0,
	236, 174, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 0, 0,
	290, 291, 292, 276, 93, 0, 26, 83, 67, 0,
	0, 0, 0, 0, 0, 0, 224, 305, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 169, 0,
	0, 194, 0, 0, 0, 253, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	258, 272, 152, 249, 285, 157, 256, 148, 223, 245,
	0, 0, 145, 270, 255, 205, 188, 189, 144, 0,
	240, 167, 180, 164, 221, 0, 0, 297, 163, 288,
	0, 280, 147, 0, 279, 220, 267, 271, 206, 200,
	146, 269, 204, 199, 192, 171, 184, 232, 198, 233,
	185, 210, 209, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 193, 0, 0, 0, 298, 0,
	243, 226, 0, 0, 0, 241, 196, 268, 234, 273,
	259, 281, 237, 235, 139, 260, 166, 207, 149, 150,
	162, 168, 170, 172, 173, 216, 217, 229, 248, 261,
	262, 263, 165, 158, 242, 159, 182, 160, 140, 250,
	161, 141, 230, 266, 0, 178, 238, 203, 142, 202,
	231, 265, 264, 289, 295, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 176, 0, 277, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 218, 293, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 187, 228, 0, 247, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 275, 287, 278, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 306,
	308, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 181, 0, 183, 155, 227, 177, 284,
	190, 0, 219, 186, 251, 191, 197, 239, 283, 225,
	244, 153, 274, 252, 201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 195, 68, 236, 174, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 224, 0, 290, 291, 292, 276, 0,
	0, 0, 0, 0, 0, 169, 0, 0, 194, 0,
	0, 0, 253, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 1571, 1574, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 258, 272, 152,
	249, 285, 157, 256, 148, 223, 245, 0, 0, 145,
	270, 255, 205, 188, 189, 144, 0, 240, 167, 180,
	164, 221, 0, 0, 297, 163, 288, 0, 280, 147,
	0, 279, 220, 267, 271, 206, 200, 146, 269, 204,
	199, 192, 171, 184, 232, 198, 233, 185, 210, 209,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1575, 282, 0, 0, 0, 1568, 0, 1567, 257, 1569,
	1572, 193, 0, 0, 0, 298, 0, 243, 226, 0,
	0, 0, 241, 196, 268, 234, 273, 259, 281, 237,
	235, 139, 260, 166, 207, 149, 150, 162, 168, 170,
	172, 173, 216, 217, 229, 248, 261, 262, 263, 165,
	158, 242, 159, 182, 160, 140, 250, 161, 141, 230,
	266, 1573, 178, 238, 203, 142, 202, 231, 265, 264,
	289, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 176, 0,
	277, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	218, 293, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 187, 228, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 275,
	287, 278, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 179, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	181, 0, 183, 155, 227, 177, 284, 190, 0, 219,
	186, 251, 191, 197, 239, 283, 225, 244, 153, 274,
	252, 201, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	195, 0, 236, 174, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	224, 0, 290, 291, 292, 276, 0, 884, 0, 0,
	0, 0, 169, 0, 0, 194, 0, 0, 0, 253,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 885, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	880, 881, 882, 879, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 258, 272, 152, 249, 285, 157,
	256, 148, 223, 245, 0, 0, 145, 270, 255, 205,
	188, 189, 144, 0, 240, 167, 180, 164, 221, 0,
	0, 297, 163, 288, 0, 280, 147, 0, 279, 220,
	267, 271, 206, 200, 146, 269, 204, 199, 192, 171,
	184, 232, 198, 233, 185, 210, 209, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 193, 0,
	0, 0, 298, 0, 243, 226, 0, 0, 0, 241,
	196, 268, 234, 273, 259, 281, 237, 235, 139, 260,
	166, 207, 149, 150, 162, 168, 170, 172, 173, 216,
	217, 229, 248, 261, 262, 263, 165, 158, 242, 159,
	182, 160, 140, 250, 161, 141, 230, 266, 0, 178,
	238, 203, 142, 202, 231, 265, 264, 289, 295, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 176, 0, 277, 0, 222,
	0, 0, 0, 0, 0, 0, 0, 218, 293, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 187,
	228, 0, 247, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 275, 287, 278, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 179, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 181, 0, 183,
	155, 227, 177, 284, 190, 0, 219, 186, 251, 191,
	197, 239, 283, 225, 244, 153, 274, 252, 201, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 195, 0, 236,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 224, 0, 290,
	291, 292, 276, 0, 0, 0, 0, 0, 0, 169,
	417, 0, 194, 0, 0, 0, 253, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 425, 426,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 258, 272, 152, 249, 285, 157, 256, 148, 223,
	245, 0, 0, 145, 270, 255, 205, 188, 189, 144,
	0, 240, 167, 180, 164, 221, 0, 0, 297, 163,
	288, 400, 280, 147, 399, 279, 220, 267, 271, 206,
	200, 146, 269, 204, 199, 192, 171, 184, 232, 198,
	233, 185, 210, 209, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 0, 0, 0, 0,
	0, 0, 257, 0, 0, 193, 0, 0, 0, 298,
	0, 243, 226, 0, 0, 0, 241, 196, 268, 234,
	273, 259, 281, 416, 235, 139, 260, 166, 207, 149,
	150, 162, 168, 170, 172, 173, 216, 217, 229, 248,
	261, 262, 263, 165, 158, 242, 159, 182, 160, 140,
	250, 161, 141, 230, 266, 0, 178, 238, 203, 142,
	202, 231, 265, 264, 289, 295, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 176, 0, 277, 0, 222, 0, 0, 0,
	0, 0, 0, 0, 218, 293, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 187, 228, 0, 247,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 275, 287, 278, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 419, 212, 213, 214, 215,
	179, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 181, 0, 183, 155, 227, 177,
	284, 190, 0, 427, 422, 423, 191, 197, 239, 283,
	225, 244, 153, 274, 252, 424, 0, 0, 0, 0,
	0, 0, 0, 0, 1301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 195, 0, 236, 174, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 93, 0, 290, 291, 292, 276,
	0, 0, 0, 0, 0, 0, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 169, 0,
	0, 194, 0, 0, 0, 253, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 971, 0, 99, 0, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 1297,
	0, 1294, 0, 154, 0, 1296, 1293, 1295, 1299, 1300,
	0, 0, 0, 1298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	258, 272, 152, 249, 285, 157, 256, 148, 223, 245,
	0, 0, 145, 270, 255, 205, 188, 189, 144, 0,
	240, 167, 180, 164, 221, 0, 0, 297, 163, 288,
	0, 280, 147, 0, 279, 220, 267, 271, 206, 200,
	146, 269, 204, 199, 192, 171, 184, 232, 198, 233,
	185, 210, 209, 211, 1282, 1283, 1284, 1285, 1286, 1287,
	1288, 1289, 1290, 1291, 1292, 1304, 1305, 1306, 1307, 1308,
	1309, 1302, 1303, 0, 282, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 193, 0, 0, 0, 298, 0,
	243, 226, 0, 0, 0, 241, 196, 268, 234, 273,
	259, 281, 237, 235, 139, 260, 166, 207, 149, 150,
	162, 168, 170, 172, 173, 216, 217, 229, 248, 261,
	262, 263, 165, 158, 242, 159, 182, 160, 140, 250,
	161, 141, 230, 266, 0, 178, 238, 203, 142, 202,
	231, 265, 264, 289, 295, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 176, 0, 277, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 218, 293, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 187, 228, 0, 247, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 275, 287, 278, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 179,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 181, 0, 183, 155, 227, 177, 284,
	190, 0, 219, 186, 251, 191, 197, 239, 283, 225,
	244, 153, 274, 252, 201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 195, 68, 236, 174, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 224, 0, 290, 291, 292, 276, 0,
	0, 0, 0, 0, 0, 169, 0, 0, 194, 0,
	0, 0, 253, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 425, 426, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 258, 272, 152,
	249, 285, 157, 256, 148, 223, 245, 0, 0, 145,
	270, 255, 205, 188, 189, 144, 0, 240, 167, 180,
	164, 221, 0, 0, 297, 163, 288, 400, 280, 147,
	399, 279, 220, 267, 271, 206, 200, 146, 269, 204,
	199, 192, 171, 184, 232, 198, 233, 185, 210, 209,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 0, 0, 0, 0, 0, 0, 257, 0,
	0, 193, 0, 0, 0, 298, 0, 243, 226, 0,
	0, 0, 241, 196, 268, 234, 273, 259, 281, 237,
	235, 139, 260, 166, 207, 149, 150, 162, 168, 170,
	172, 173, 216, 217, 229, 248, 261, 262, 263, 165,
	158, 242, 159, 182, 160, 140, 250, 161, 141, 230,
	266, 0, 178, 238, 203, 142, 202, 231, 265, 264,
	289, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 176, 0,
	277, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	218, 293, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 187, 228, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 275,
	287, 278, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 179, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	181, 0, 183, 155, 227, 177, 284, 190, 0, 427,
	422, 423, 191, 197, 239, 283, 225, 244, 153, 274,
	252, 424, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	195, 0, 236, 174, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	0, 0, 290, 291, 292, 276, 224, 0, 0, 0,
	564, 0, 0, 0, 0, 0, 0, 0, 169, 565,
	0, 194, 0, 0, 0, 253, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 351, 0, 0, 352,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	258, 272, 152, 249, 285, 157, 256, 148, 223, 245,
	0, 0, 145, 270, 255, 205, 188, 189, 144, 0,
	240, 167, 180, 164, 221, 0, 0, 297, 163, 288,
	0, 280, 147, 0, 279, 220, 267, 271, 206, 200,
	146, 269, 204, 199, 192, 171, 184, 232, 198, 233,
	185, 210, 209, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 193, 0, 0, 0, 298, 0,
	243, 226, 0, 0, 0, 241, 196, 268, 234, 273,
	259, 281, 237, 235, 139, 260, 166, 207, 149, 150,
	162, 168, 170, 172, 173, 216, 217, 229, 248, 261,
	262, 263, 165, 158, 242, 159, 182, 160, 140, 250,
	161, 141, 230, 266, 0, 178, 238, 203, 142, 202,
	231, 265, 264, 289, 295, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 176, 0, 277, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 218, 293, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 187, 228, 0, 247, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 275, 287, 278, 0, 0, 0, 286, 0,
	0, 0, 0, 566, 0, 212, 213, 214, 215, 179,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 181, 0, 183, 155, 227, 177, 284,
	190, 0, 219, 186, 251, 191, 197, 239, 283, 225,
	244, 153, 274, 252, 201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 195, 0, 236, 174, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 0, 0, 290, 291, 292, 276, 224,
	0, 0, 0, 845, 0, 0, 0, 0, 0, 0,
	0, 169, 0, 0, 194, 0, 0, 0, 253, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 351,
	0, 0, 352, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 258, 272, 152, 249, 285, 157, 256,
	148, 223, 245, 0, 0, 145, 270, 255, 205, 188,
	189, 144, 0, 240, 167, 180, 164, 221, 0, 0,
	297, 163, 288, 0, 280, 147, 0, 279, 220, 267,
	271, 206, 200, 146, 269, 204, 199, 192, 171, 184,
	232, 198, 233, 185, 210, 209, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 0, 0,
	0, 0, 0, 0, 257, 0, 0, 193, 0, 0,
	0, 298, 0, 243, 226, 0, 0, 0, 241, 196,
	268, 234, 273, 259, 281, 237, 235, 139, 260, 166,
	207, 149, 150, 162, 168, 170, 172, 173, 216, 217,
	229, 248, 261, 262, 263, 165, 158, 242, 159, 182,
	160, 140, 250, 161, 141, 230, 266, 0, 178, 238,
	203, 142, 202, 231, 265, 264, 289, 295, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 176, 0, 277, 0, 222, 0,
	0, 0, 0, 0, 0, 0, 218, 293, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 187, 228,
	0, 247, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 275, 287, 278, 0, 0,
	0, 286, 0, 0, 0, 0, 844, 0, 212, 213,
	214, 215, 179, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 181, 0, 183, 155,
	227, 177, 284, 190, 0, 219, 186, 251, 191, 197,
	239, 283, 225, 244, 153, 274, 252, 201, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 195, 0, 236, 174,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 224, 0, 290, 291,
	292, 276, 0, 0, 0, 0, 0, 0, 169, 586,
	0, 194, 0, 0, 0, 253, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 0, 584,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 0, 0, 0, 143,
	258, 272, 152, 249, 285, 157, 256, 148, 223, 245,
	0, 0, 145, 270, 255, 205, 188, 189, 144, 0,
	240, 167, 180, 164, 221, 0, 0, 297, 163, 288,
	0, 280, 147, 0, 279, 220, 267, 271, 206, 200,
	146, 269, 204, 199, 192, 171, 184, 232, 198, 233,
	185, 210, 209, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 193, 0, 0, 0, 298, 0,
	243, 226, 0, 0, 0, 241, 196, 268, 234, 273,
	259, 281, 237, 235, 139, 260, 166, 207, 149, 150,
	162, 168, 170, 172, 173, 216, 217, 229, 248, 261,
	262, 263, 165, 158, 242, 159, 182, 160, 140, 250,
	161, 141, 230, 266, 0, 178, 238, 203, 142, 202,
	231, 265, 264, 289, 295, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 176, 0, 277, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 218, 293, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 187, 228, 0, 247, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 275, 287, 278, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 179,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 181, 0, 183, 155, 227, 177, 284,
	190, 0, 219, 186, 251, 191, 197, 239, 283, 225,
	244, 153, 274, 252, 201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 195, 0, 236, 174, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 224, 0, 290, 291, 292, 276, 0,
	0, 0, 0, 0, 0, 169, 581, 0, 194, 0,
	0, 0, 253, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 584, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 0, 0, 0, 143, 258, 272, 152,
	249, 285, 157, 256, 148, 223, 245, 0, 0, 145,
	270, 255, 205, 188, 189, 144, 0, 240, 167, 180,
	164, 221, 0, 0, 297, 163, 288, 0, 280, 147,
	0, 279, 220, 267, 271, 206, 200, 146, 269, 204,
	199, 192, 171, 184, 232, 198, 233, 185, 210, 209,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 0, 0, 0, 0, 0, 0, 257, 0,
	0, 193, 0, 0, 0, 298, 0, 243, 226, 0,
	0, 0, 241, 196, 268, 234, 273, 259, 281, 237,
	235, 139, 260, 166, 207, 149, 150, 162, 168, 170,
	172, 173, 216, 217, 229, 248, 261, 262, 263, 165,
	158, 242, 159, 182, 160, 140, 250, 161, 141, 230,
	266, 0, 178, 238, 203, 142, 202, 231, 265, 264,
	289, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 176, 0,
	277, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	218, 293, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 187, 228, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 275,
	287, 278, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 179, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	181, 0, 183, 155, 227, 177, 284, 190, 0, 219,
	186, 251, 191, 197, 239, 283, 225, 244, 153, 274,
	252, 201, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	195, 0, 236, 174, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	224, 0, 290, 291, 292, 276, 0, 0, 0, 0,
	0, 0, 169, 0, 0, 194, 0, 0, 0, 253,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2182, 0,
	99, 699, 0, 0, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 258, 272, 152, 249, 285, 157,
	256, 148, 223, 245, 0, 0, 145, 270, 255, 205,
	188, 189, 144, 0, 240, 167, 180, 164, 221, 0,
	0, 297, 163, 288, 0, 280, 147, 0, 279, 220,
	267, 271, 206, 200, 146, 269, 204, 199, 192, 171,
	184, 232, 198, 233, 185, 210, 209, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 193, 0,
	0, 0, 298, 0, 243, 226, 0, 0, 0, 241,
	196, 268, 234, 273, 259, 281, 237, 235, 139, 260,
	166, 207, 149, 150, 162, 168, 170, 172, 173, 216,
	217, 229, 248, 261, 262, 263, 165, 158, 242, 159,
	182, 160, 140, 250, 161, 141, 230, 266, 0, 178,
	238, 203, 142, 202, 231, 265, 264, 289, 295, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 176, 0, 277, 0, 222,
	0, 0, 0, 0, 0, 0, 0, 218, 293, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 187,
	228, 0, 247, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 275, 287, 278, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 179, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 181, 0, 183,
	155, 227, 177, 284, 190, 0, 219, 186, 251, 191,
	197, 239, 283, 225, 244, 153, 274, 252, 201, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 195, 0, 236,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 224, 0, 290,
	291, 292, 276, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 194, 0, 0, 0, 253, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	584, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 0, 0, 0,
	143, 258, 272, 152, 249, 285, 157, 256, 148, 223,
	245, 0, 0, 145, 270, 255, 205, 188, 189, 144,
	0, 240, 167, 180, 164, 221, 0, 0, 297, 163,
	288, 0, 280, 147, 0, 279, 220, 267, 271, 206,
	200, 146, 269, 204, 199, 192, 171, 184, 232, 198,
	233, 185, 210, 209, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 0, 0, 0, 0,
	0, 0, 257, 0, 0, 193, 0, 0, 0, 298,
	0, 243, 226, 0, 0, 0, 241, 196, 268, 234,
	273, 259, 281, 237, 235, 139, 260, 166, 207, 149,
	150, 162, 168, 170, 172, 173, 216, 217, 229, 248,
	261, 262, 263, 165, 158, 242, 159, 182, 160, 140,
	250, 161, 141, 230, 266, 0, 178, 238, 203, 142,
	202, 231, 265, 264, 289, 295, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 176, 0, 277, 0, 222, 0, 0, 0,
	0, 0, 0, 0, 218, 293, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 187, 228, 0, 247,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 275, 287, 278, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	179, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 181, 0, 183, 155, 227, 177,
	284, 190, 0, 219, 186, 251, 191, 197, 239, 283,
	225, 244, 153, 274, 252, 201, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 195, 0, 236, 174, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 224, 0, 290, 291, 292, 276,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 194,
	0, 0, 0, 253, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 584, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1762, 0, 0, 0, 143, 258, 272,
	152, 249, 285, 157, 256, 148, 223, 245, 0, 0,
	145, 270, 255, 205, 188, 189, 144, 0, 240, 167,
	180, 164, 221, 0, 0, 297, 163, 288, 0, 280,
	147, 0, 279, 220, 267, 271, 206, 200, 146, 269,
	204, 199, 192, 171, 184, 232, 198, 233, 185, 210,
	209, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 257,
	0, 0, 193, 0, 0, 0, 298, 0, 243, 226,
	0, 0, 0, 241, 196, 268, 234, 273, 259, 281,
	237, 235, 139, 260, 166, 207, 149, 150, 162, 168,
	170, 172, 173, 216, 217, 229, 248, 261, 262, 263,
	165, 158, 242, 159, 182, 160, 140, 250, 161, 141,
	230, 266, 0, 178, 238, 203, 142, 202, 231, 265,
	264, 289, 295, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 176,
	0, 277, 0, 222, 0, 0, 0, 0, 0, 0,
	0, 218, 293, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 187, 228, 0, 247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	275, 287, 278, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 179, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 181, 0, 183, 155, 227, 177, 284, 190, 0,
	219, 186, 251, 191, 197, 239, 283, 225, 244, 153,
	274, 252, 201, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 195, 0, 236, 174, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 224, 0, 290, 291, 292, 276, 0, 0, 0,
	0, 0, 0, 169, 0, 0, 194, 0, 0, 0,
	253, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 0, 584, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 258, 272, 152, 249, 285,
	157, 256, 148, 223, 245, 0, 0, 145, 270, 255,
	205, 188, 189, 144, 0, 240, 167, 180, 164, 221,
	0, 0, 297, 163, 288, 0, 280, 147, 0, 279,
	220, 267, 271, 206, 200, 146, 269, 204, 199, 192,
	171, 184, 232, 198, 233, 185, 210, 209, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 193,
	0, 0, 0, 298, 0, 243, 226, 0, 0, 0,
	241, 196, 268, 234, 273, 259, 281, 237, 235, 139,
	260, 166, 207, 149, 150, 162, 168, 170, 172, 173,
	216, 217, 229, 248, 261, 262, 263, 165, 158, 242,
	159, 182, 160, 140, 250, 161, 141, 230, 266, 0,
	178, 238, 203, 142, 202, 231, 265, 264, 289, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 176, 0, 277, 0,
	222, 0, 0, 0, 0, 0, 0, 0, 218, 293,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	187, 228, 0, 247, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 275, 287, 278,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 1546,
	212, 213, 214, 215, 179, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 181, 0,
	183, 155, 227, 177, 284, 190, 0, 219, 186, 251,
	191, 197, 239, 283, 225, 244, 153, 274, 252, 201,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 195, 0,
	236, 174, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 224, 0,
	290, 291, 292, 276, 0, 0, 0, 0, 0, 0,
	169, 1238, 0, 194, 0, 0, 0, 253, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 584, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 258, 272, 152, 249, 285, 157, 256, 148,
	223, 245, 0, 0, 145, 270, 255, 205, 188, 189,
	144, 0, 240, 167, 180, 164, 221, 0, 0, 297,
	163, 288, 0, 280, 147, 0, 279, 220, 267, 271,
	206, 200, 146, 269, 204, 199, 192, 171, 184, 232,
	198, 233, 185, 210, 209, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 257, 0, 0, 193, 0, 0, 0,
	298, 0, 243, 226, 0, 0, 0, 241, 196, 268,
	234, 273, 259, 281, 237, 235, 139, 260, 166, 207,
	149, 150, 162, 168, 170, 172, 173, 216, 217, 229,
	248, 261, 262, 263, 165, 158, 242, 159, 182, 160,
	140, 250, 161, 141, 230, 266, 0, 178, 238, 203,
	142, 202, 231, 265, 264, 289, 295, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 294, 176, 0, 277, 0, 222, 0, 0,
	0, 0, 0, 0, 0, 218, 293, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 0, 187, 228, 0,
	247, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 275, 287, 278, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 179, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 181, 0, 183, 155, 227,
	177, 284, 190, 0, 219, 186, 251, 191, 197, 239,
	283, 225, 244, 153, 274, 252, 201, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 195, 0, 236, 174, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 224, 0, 290, 291, 292,
	276, 0, 0, 0, 0, 0, 0, 169, 0, 0,
	194, 0, 0, 0, 253, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 699, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 258,
	272, 152, 249, 285, 157, 256, 148, 223, 245, 0,
	0, 145, 270, 255, 205, 188, 189, 144, 0, 240,
	167, 180, 164, 221, 0, 0, 297, 163, 288, 0,
	280, 147, 0, 279, 220, 267, 271, 206, 200, 146,
	269, 204, 199, 192, 171, 184, 232, 198, 233, 185,
	210, 209, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 0, 0, 0, 0, 0, 0,
	257, 0, 0, 193, 0, 0, 0, 298, 0, 243,
	226, 0, 0, 0, 241, 196, 268, 234, 273, 259,
	281, 237, 235, 139, 260, 166, 207, 149, 150, 162,
	168, 170, 172, 173, 216, 217, 229, 248, 261, 262,
	263, 165, 158, 242, 159, 182, 160, 140, 250, 161,
	141, 230, 266, 0, 178, 238, 203, 142, 202, 231,
	265, 264, 289, 295, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	176, 0, 277, 0, 222, 0, 0, 0, 0, 0,
	0, 0, 218, 293, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 187, 228, 0, 247, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 275, 287, 278, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 179, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 181, 0, 183, 155, 227, 177, 284, 190,
	0, 219, 186, 251, 191, 197, 239, 283, 225, 244,
	153, 274, 252, 201, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 195, 0, 236, 174, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 224, 0, 290, 291, 292, 276, 0, 0,
	0, 0, 0, 0, 169, 0, 0, 194, 0, 0,
	0, 253, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1909, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 258, 272, 152, 249,
	285, 157, 256, 148, 223, 245, 0, 0, 145, 270,
	255, 205, 188, 189, 144, 0, 240, 167, 180, 164,
	221, 0, 0, 297, 163, 288, 0, 280, 147, 0,
	279, 220, 267, 271, 206, 200, 146, 269, 204, 199,
	192, 171, 184, 232, 198, 233, 185, 210, 209, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 257, 0, 0,
	193, 0, 0, 0, 298, 0, 243, 226, 0, 0,
	0, 241, 196, 268, 234, 273, 259, 281, 237, 235,
	139, 260, 166, 207, 149, 150, 162, 168, 170, 172,
	173, 216, 217, 229, 248, 261, 262, 263, 165, 158,
	242, 159, 182, 160, 140, 250, 161, 141, 230, 266,
	0, 178, 238, 203, 142, 202, 231, 265, 264, 289,
	295, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 294, 176, 0, 277,
	0, 222, 0, 0, 0, 0, 0, 0, 0, 218,
	293, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	0, 187, 228, 0, 247, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 275, 287,
	278, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 179, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 181,
	0, 183, 155, 227, 177, 284, 190, 0, 219, 186,
	251, 191, 197, 239, 283, 225, 244, 153, 274, 252,
	201, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 195,
	0, 236, 174, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 224,
	0, 290, 291, 292, 276, 0, 0, 0, 0, 0,
	0, 169, 0, 0, 194, 0, 0, 0, 253, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 584, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 258, 272, 152, 249, 285, 157, 256,
	148, 223, 245, 0, 0, 145, 270, 255, 205, 188,
	189, 144, 0, 240, 167, 180, 164, 221, 0, 0,
	297, 163, 288, 0, 280, 147, 0, 279, 220, 267,
	271, 206, 200, 146, 269, 204, 199, 192, 171, 184,
	232, 198, 233, 185, 210, 209, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 0, 0,
	0, 0, 0, 0, 257, 0, 0, 193, 0, 0,
	0, 298, 0, 243, 226, 0, 0, 0, 241, 196,
	268, 234, 273, 259, 281, 237, 235, 139, 260, 166,
	207, 149, 150, 162, 168, 170, 172, 173, 216, 217,
	229, 248, 261, 262, 263, 165, 158, 242, 159, 182,
	160, 140, 250, 161, 141, 230, 266, 0, 178, 238,
	203, 142, 202, 231, 265, 264, 289, 295, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 176, 0, 277, 0, 222, 0,
	0, 0, 0, 0, 0, 0, 218, 293, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 187, 228,
	0, 247, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 275, 287, 278, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 179, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 181, 0, 183, 155,
	227, 177, 284, 190, 0, 219, 186, 251, 191, 197,
	239, 283, 225, 244, 153, 274, 252, 201, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 195, 0, 236, 174,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 224, 0, 290, 291,
	292, 276, 0, 0, 0, 0, 0, 0, 169, 0,
	0, 194, 0, 0, 0, 253, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1599, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	258, 272, 152, 249, 285, 157, 256, 148, 223, 245,
	0, 0, 145, 270, 255, 205, 188, 189, 144, 0,
	240, 167, 180, 164, 221, 0, 0, 297, 163, 288,
	0, 280, 147, 0, 279, 220, 267, 271, 206, 200,
	146, 269, 204, 199, 192, 171, 184, 232, 198, 233,
	185, 210, 209, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 193, 0, 0, 0, 298, 0,
	243, 226, 0, 0, 0, 241, 196, 268, 234, 273,
	259, 281, 237, 235, 139, 260, 166, 207, 149, 150,
	162, 168, 170, 172, 173, 216, 217, 229, 248, 261,
	262, 263, 165, 158, 242, 159, 182, 160, 140, 250,
	161, 141, 230, 266, 0, 178, 238, 203, 142, 202,
	231, 265, 264, 289, 295, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 176, 0, 277, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 218, 293, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 187, 228, 0, 247, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 275, 287, 278, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 179,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 181, 0, 183, 155, 227, 177, 284,
	190, 0, 219, 186, 251, 191, 197, 239, 283, 225,
	244, 153, 274, 252, 201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 195, 0, 236, 174, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 224, 0, 290, 291, 292, 276, 0,
	0, 0, 0, 0, 0, 169, 0, 0, 194, 0,
	0, 0, 253, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 836,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 258, 272, 152,
	249, 285, 157, 256, 148, 223, 245, 0, 0, 145,
	270, 255, 205, 188, 189, 144, 0, 240, 167, 180,
	164, 221, 0, 0, 297, 163, 288, 0, 280, 147,
	0, 279, 220, 267, 271, 206, 200, 146, 269, 204,
	199, 192, 171, 184, 232, 198, 233, 185, 210, 209,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 0, 0, 0, 0, 0, 0, 257, 0,
	0, 193, 0, 0, 0, 298, 0, 243, 226, 0,
	0, 0, 241, 196, 268, 234, 273, 259, 281, 237,
	235, 139, 260, 166, 207, 149, 150, 162, 168, 170,
	172, 173, 216, 217, 229, 248, 261, 262, 263, 165,
	158, 242, 159, 182, 160, 140, 250, 161, 141, 230,
	266, 0, 178, 238, 203, 142, 202, 231, 265, 264,
	289, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 176, 0,
	277, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	218, 293, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 187, 228, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 275,
	287, 278, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 179, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	181, 0, 183, 155, 227, 177, 284, 190, 0, 219,
	186, 251, 191, 197, 239, 283, 225, 244, 153, 274,
	252, 201, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	195, 0, 236, 174, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	224, 0, 290, 291, 292, 276, 0, 0, 0, 0,
	0, 0, 169, 0, 0, 194, 0, 0, 0, 253,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1630, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 258, 272, 152, 249, 285, 157,
	256, 148, 223, 245, 0, 0, 145, 270, 255, 205,
	188, 189, 144, 0, 240, 167, 180, 164, 221, 0,
	0, 297, 163, 288, 0, 280, 147, 0, 279, 220,
	267, 271, 206, 200, 146, 269, 204, 199, 192, 171,
	184, 232, 198, 233, 185, 210, 209, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 193, 0,
	0, 0, 298, 0, 243, 226, 0, 0, 0, 241,
	196, 268, 234, 273, 259, 281, 237, 235, 139, 260,
	166, 207, 149, 150, 162, 168, 170, 172, 173, 216,
	217, 229, 248, 261, 262, 263, 165, 158, 242, 159,
	182, 160, 140, 250, 161, 141, 230, 266, 0, 178,
	238, 203, 142, 202, 231, 265, 264, 289, 295, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 176, 0, 277, 0, 222,
	0, 0, 0, 0, 0, 0, 0, 218, 293, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 187,
	228, 0, 247, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 275, 287, 278, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 179, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 181, 0, 183,
	155, 227, 177, 284, 190, 0, 219, 186, 251, 191,
	197, 239, 283, 225, 244, 153, 274, 252, 201, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 195, 0, 236,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 224, 0, 290,
	291, 292, 276, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 194, 0, 0, 0, 253, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1253, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 258, 272, 152, 249, 285, 157, 256, 148, 223,
	245, 0, 0, 145, 270, 255, 205, 188, 189, 144,
	0, 240, 167, 180, 164, 221, 0, 0, 297, 163,
	288, 0, 280, 147, 0, 279, 220, 267, 271, 206,
	200, 146, 269, 204, 199, 192, 171, 184, 232, 198,
	233, 185, 210, 209, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 0, 0, 0, 0,
	0, 0, 257, 0, 0, 193, 0, 0, 0, 298,
	0, 243, 226, 0, 0, 0, 241, 196, 268, 234,
	273, 259, 281, 237, 235, 139, 260, 166, 207, 149,
	150, 162, 168, 170, 172, 173, 216, 217, 229, 248,
	261, 262, 263, 165, 158, 242, 159, 182, 160, 140,
	250, 161, 141, 230, 266, 0, 178, 238, 203, 142,
	202, 231, 265, 264, 289, 295, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 176, 0, 277, 0, 222, 0, 0, 0,
	0, 0, 0, 0, 218, 293, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 187, 228, 0, 247,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 275, 287, 278, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	179, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 181, 0, 183, 155, 227, 177,
	284, 190, 0, 219, 186, 251, 191, 197, 239, 283,
	225, 244, 153, 274, 252, 201, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 195, 0, 236, 174, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 224, 0, 290, 291, 292, 276,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 194,
	0, 0, 0, 253, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 1251, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 258, 272,
	152, 249, 285, 157, 256, 148, 223, 245, 0, 0,
	145, 270, 255, 205, 188, 189, 144, 0, 240, 167,
	180, 164, 221, 0, 0, 297, 163, 288, 0, 280,
	147, 0, 279, 220, 267, 271, 206, 200, 146, 269,
	204, 199, 192, 171, 184, 232, 198, 233, 185, 210,
	209, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 257,
	0, 0, 193, 0, 0, 0, 298, 0, 243, 226,
	0, 0, 0, 241, 196, 268, 234, 273, 259, 281,
	237, 235, 139, 260, 166, 207, 149, 150, 162, 168,
	170, 172, 173, 216, 217, 229, 248, 261, 262, 263,
	165, 158, 242, 159, 182, 160, 140, 250, 161, 141,
	230, 266, 0, 178, 238, 203, 142, 202, 231, 265,
	264, 289, 295, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 176,
	0, 277, 0, 222, 0, 0, 0, 0, 0, 0,
	0, 218, 293, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 187, 228, 0, 247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	275, 287, 278, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 179, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 181, 0, 183, 155, 227, 177, 284, 190, 0,
	219, 186, 251, 191, 197, 239, 283, 225, 244, 153,
	274, 252, 201, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 195, 0, 236, 174, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 224, 0, 290, 291, 292, 276, 0, 0, 0,
	0, 0, 0, 169, 0, 0, 194, 0, 0, 0,
	253, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 0, 352, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 258, 272, 152, 249, 285,
	157, 256, 148, 223, 245, 0, 0, 145, 270, 255,
	205, 188, 189, 144, 0, 240, 167, 180, 164, 221,
	0, 0, 297, 163, 288, 0, 280, 147, 0, 279,
	220, 267, 271, 206, 200, 146, 269, 204, 199, 192,
	171, 184, 232, 198, 233, 185, 210, 209, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 0, 0, 0, 257, 0, 0, 193,
	0, 0, 0, 298, 0, 243, 226, 0, 0, 0,
	241, 196, 268, 234, 273, 259, 281, 237, 235, 139,
	260, 166, 207, 149, 150, 162, 168, 170, 172, 173,
	216, 217, 229, 248, 261, 262, 263, 165, 158, 242,
	159, 182, 160, 140, 250, 161, 141, 230, 266, 0,
	178, 238, 203, 142, 202, 231, 265, 264, 289, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 176, 0, 277, 0,
	222, 0, 0, 0, 0, 0, 0, 0, 218, 293,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	187, 228, 0, 247, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 275, 287, 278,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 179, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 181, 0,
	183, 155, 227, 177, 284, 190, 0, 219, 186, 251,
	191, 197, 239, 283, 225, 244, 153, 274, 252, 201,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 195, 0,
	236, 174, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 1180, 0,
	290, 291, 292, 276, 0, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 169, 0, 0,
	194, 0, 0, 0, 253, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 258,
	272, 152, 249, 285, 157, 256, 148, 223, 245, 0,
	0, 145, 270, 255, 205, 188, 189, 144, 0, 240,
	167, 180, 164, 221, 0, 0, 297, 163, 288, 0,
	280, 147, 0, 279, 220, 267, 271, 206, 200, 146,
	269, 204, 199, 192, 171, 184, 232, 198, 233, 185,
	210, 209, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 0, 0, 0, 0, 0, 0,
	257, 0, 0, 193, 0, 0, 0, 298, 0, 243,
	226, 0, 0, 0, 241, 196, 268, 234, 273, 259,
	281, 237, 235, 139, 260, 166, 207, 149, 150, 162,
	168, 170, 172, 173, 216, 217, 229, 248, 261, 262,
	263, 165, 158, 242, 159, 182, 160, 140, 250, 161,
	141, 230, 266, 0, 178, 238, 203, 142, 202, 231,
	265, 264, 289, 295, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	176, 0, 277, 0, 222, 0, 0, 0, 0, 0,
	0, 0, 218, 293, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 187, 228, 0, 247, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 275, 287, 278, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 179, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 181, 0, 183, 155, 227, 177, 284, 190,
	0, 219, 186, 251, 191, 197, 239, 283, 225, 244,
	153, 274, 252, 201, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 195, 0, 236, 174, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 224, 0, 290, 291, 292, 276, 0, 0,
	0, 0, 0, 0, 169, 0, 0, 194, 0, 0,
	0, 253, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 258, 272, 152, 249,
	285, 157, 256, 148, 223, 245, 0, 0, 145, 270,
	255, 205, 188, 189, 144, 0, 240, 167, 180, 164,
	221, 0, 0, 297, 163, 288, 0, 280, 147, 0,
	279, 220, 267, 271, 206, 200, 146, 269, 204, 199,
	192, 171, 184, 232, 198, 233, 185, 210, 209, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 1167, 0, 0, 0, 257, 0, 0,
	193, 0, 0, 0, 298, 0, 243, 226, 0, 0,
	0, 241, 196, 268, 234, 273, 259, 281, 237, 235,
	139, 260, 166, 207, 149, 150, 162, 168, 170, 172,
	173, 216, 217, 229, 248, 261, 262, 263, 165, 158,
	242, 159, 182, 160, 140, 250, 161, 141, 230, 266,
	0, 178, 238, 203, 142, 202, 231, 265, 264, 289,
	295, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 294, 176, 0, 277,
	0, 222, 0, 0, 0, 0, 0, 0, 0, 218,
	293, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	0, 187, 228, 0, 247, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 275, 287,
	278, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 179, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 181,
	0, 183, 155, 227, 177, 284, 190, 0, 219, 186,
	251, 191, 197, 239, 283, 225, 244, 153, 274, 252,
	201, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 195,
	0, 236, 174, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 224,
	0, 290, 291, 292, 276, 0, 0, 0, 0, 0,
	0, 169, 0, 0, 194, 0, 0, 0, 253, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 584, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 258, 272, 152, 249, 285, 157, 256,
	148, 223, 245, 0, 0, 145, 270, 255, 205, 188,
	189, 144, 0, 240, 167, 180, 164, 221, 0, 0,
	297, 163, 288, 0, 280, 147, 0, 279, 220, 267,
	271, 206, 200, 146, 269, 204, 199, 192, 171, 184,
	232, 198, 233, 185, 210, 209, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 0, 0,
	0, 0, 0, 0, 257, 0, 0, 193, 0, 0,
	0, 298, 0, 243, 226, 0, 0, 0, 241, 196,
	268, 234, 273, 259, 281, 237, 235, 139, 260, 166,
	207, 149, 150, 162, 168, 170, 172, 173, 216, 217,
	229, 248, 261, 262, 263, 165, 158, 242, 159, 182,
	160, 140, 250, 161, 141, 230, 266, 0, 178, 238,
	203, 142, 202, 231, 265, 264, 289, 295, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 176, 0, 277, 0, 222, 0,
	0, 0, 0, 0, 0, 0, 218, 293, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 187, 228,
	0, 247, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 275, 287, 826, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 179, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 181, 0, 183, 155,
	227, 177, 284, 190, 0, 219, 186, 251, 191, 197,
	239, 283, 225, 244, 153, 274, 252, 201, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 195, 0, 236, 174,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 224, 0, 290, 291,
	292, 276, 0, 0, 0, 0, 0, 0, 169, 0,
	0, 194, 0, 0, 0, 253, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	258, 272, 152, 249, 285, 157, 256, 148, 223, 245,
	0, 0, 145, 270, 255, 205, 188, 189, 144, 0,
	240, 167, 180, 164, 221, 0, 0, 297, 163, 288,
	0, 280, 147, 0, 279, 220, 267, 271, 206, 200,
	146, 269, 204, 199, 192, 171, 184, 232, 198, 233,
	185, 210, 209, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 193, 0, 0, 0, 298, 0,
	243, 226, 0, 0, 0, 241, 196, 268, 234, 273,
	259, 281, 237, 235, 139, 260, 166, 207, 149, 150,
	162, 168, 170, 172, 173, 216, 217, 229, 248, 261,
	262, 263, 165, 158, 242, 159, 182, 160, 140, 250,
	161, 141, 230, 266, 0, 178, 238, 203, 142, 202,
	231, 265, 264, 289, 295, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 176, 0, 277, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 218, 293, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 187, 228, 0, 247, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 275, 287, 278, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 179,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 181, 0, 183, 155, 227, 177, 284,
	190, 0, 219, 186, 251, 191, 197, 239, 283, 225,
	244, 153, 274, 252, 201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 383, 0,
	0, 138, 0, 195, 0, 236, 174, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 224, 0, 290, 291, 292, 276, 0,
	0, 0, 0, 0, 96, 169, 0, 0, 194, 0,
	0, 0, 253, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 258, 272, 152,
	249, 285, 157, 256, 148, 223, 245, 0, 0, 145,
	270, 255, 205, 188, 189, 144, 0, 240, 167, 180,
	164, 221, 0, 0, 297, 163, 288, 0, 280, 147,
	0, 279, 220, 267, 271, 206, 200, 146, 269, 204,
	199, 192, 171, 184, 232, 198, 233, 185, 210, 209,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 0, 0, 0, 0, 0, 0, 257, 0,
	0, 193, 0, 0, 0, 298, 0, 243, 226, 0,
	0, 0, 241, 196, 268, 234, 273, 259, 281, 237,
	235, 139, 260, 166, 207, 149, 150, 162, 168, 170,
	172, 173, 216, 217, 229, 248, 261, 262, 263, 165,
	158, 242, 159, 182, 160, 140, 250, 161, 141, 230,
	266, 0, 178, 238, 203, 142, 202, 231, 265, 264,
	289, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 176, 0,
	277, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	218, 293, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 187, 228, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 275,
	287, 278, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 179, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	181, 0, 183, 155, 227, 177, 284, 190, 0, 219,
	186, 251, 191, 197, 239, 283, 225, 244, 153, 274,
	252, 201, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	195, 0, 236, 174, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	224, 0, 290, 291, 292, 276, 0, 0, 0, 0,
	0, 0, 169, 0, 0, 194, 0, 0, 0, 253,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 258, 272, 152, 249, 285, 157,
	256, 148, 223, 245, 0, 0, 145, 270, 255, 205,
	188, 189, 144, 0, 240, 167, 180, 164, 221, 0,
	0, 297, 163, 288, 0, 280, 147, 0, 279, 220,
	267, 271, 206, 200, 146, 269, 204, 199, 192, 171,
	184, 232, 198, 233, 185, 210, 209, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 193, 0,
	0, 0, 298, 0, 243, 226, 0, 0, 0, 241,
	196, 268, 234, 273, 259, 281, 237, 235, 139, 260,
	166, 207, 149, 150, 162, 168, 170, 172, 173, 216,
	217, 229, 248, 261, 262, 263, 165, 158, 242, 159,
	182, 160, 140, 250, 161, 141, 230, 266, 0, 178,
	238, 203, 142, 202, 231, 265, 264, 289, 295, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 176, 0, 277, 0, 222,
	0, 0, 0, 0, 0, 0, 0, 218, 293, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 187,
	228, 0, 247, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 275, 287, 278, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 179, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 181, 0, 183,
	155, 227, 177, 284, 190, 0, 219, 186, 251, 191,
	197, 239, 283, 225, 244, 153, 274, 252, 201, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 195, 0, 236,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 224, 0, 290,
	291, 292, 276, 0, 1220, 0, 0, 0, 0, 169,
	0, 0, 194, 0, 0, 0, 253, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 798, 799, 800,
	1222, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 258, 272, 152, 249, 285, 157, 256, 148, 223,
	245, 0, 0, 145, 270, 255, 205, 188, 189, 144,
	0, 240, 167, 180, 164, 221, 0, 0, 297, 163,
	288, 0, 280, 147, 0, 279, 220, 267, 271, 206,
	200, 146, 269, 204, 199, 192, 171, 184, 232, 198,
	233, 185, 210, 209, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 0, 0, 0, 0,
	0, 0, 257, 0, 0, 193, 0, 0, 0, 298,
	0, 243, 226, 0, 0, 0, 241, 196, 268, 234,
	273, 259, 281, 237, 235, 139, 260, 166, 207, 149,
	150, 162, 168, 170, 172, 173, 216, 217, 229, 248,
	261, 262, 263, 165, 158, 242, 159, 182, 160, 140,
	250, 161, 141, 230, 266, 0, 178, 238, 203, 142,
	202, 231, 265, 264, 289, 295, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 176, 0, 277, 0, 222, 0, 0, 0,
	0, 0, 0, 0, 218, 293, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 187, 228, 0, 247,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 275, 287, 278, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	179, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 181, 0, 183, 155, 227, 177,
	284, 190, 0, 219, 186, 251, 191, 197, 239, 283,
	225, 244, 153, 274, 252, 201, 0, 0, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 0, 194, 0, 0, 0, 253, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 195, 0, 236, 174, 798, 799,
	800, 1222, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 290, 291, 292, 276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 258, 272, 152, 249, 285, 157, 256, 148,
	223, 245, 0, 0, 145, 270, 255, 205, 188, 189,
	144, 0, 240, 167, 180, 164, 221, 0, 0, 297,
	163, 288, 0, 280, 147, 0, 279, 220, 267, 271,
	206, 200, 146, 269, 204, 199, 192, 171, 184, 232,
	198, 233, 185, 210, 209, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 257, 0, 0, 193, 0, 0, 0,
	298, 0, 243, 226, 0, 0, 0, 241, 196, 268,
	234, 273, 259, 281, 237, 235, 139, 260, 166, 207,
	149, 150, 162, 168, 170, 172, 173, 216, 217, 229,
	248, 261, 262, 263, 165, 158, 242, 159, 182, 160,
	140, 250, 161, 141, 230, 266, 0, 178, 238, 203,
	142, 202, 231, 265, 264, 289, 295, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 294, 176, 0, 277, 0, 222, 0, 0,
	0, 0, 0, 0, 0, 218, 293, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 0, 187, 228, 0,
	247, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 275, 287, 278, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 179, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 181, 0, 183, 155, 227,
	177, 284, 190, 0, 219, 186, 251, 191, 197, 239,
	283, 225, 244, 153, 274, 252, 201, 0, 0, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 169, 0, 0, 194, 0, 0, 0, 253, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 195, 0, 236, 174, 798,
	799, 800, 0, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 292,
	276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 258, 272, 152, 249, 285, 157, 256,
	148, 223, 245, 0, 0, 145, 270, 255, 205, 188,
	189, 144, 0, 240, 167, 180, 164, 221, 0, 0,
	297, 163, 288, 0, 280, 147, 0, 279, 220, 267,
	271, 206, 200, 146, 269, 204, 199, 192, 171, 184,
	232, 198, 233, 185, 210, 209, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 0, 0,
	0, 0, 0, 0, 257, 0, 0, 193, 0, 0,
	0, 298, 0, 243, 226, 0, 0, 0, 241, 196,
	268, 234, 273, 259, 281, 237, 235, 139, 260, 166,
	207, 149, 150, 162, 168, 170, 172, 173, 216, 217,
	229, 248, 261, 262, 263, 165, 158, 242, 159, 182,
	160, 140, 250, 161, 141, 230, 266, 0, 178, 238,
	203, 142, 202, 231, 265, 264, 289, 295, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 176, 0, 277, 0, 222, 0,
	0, 0, 0, 0, 0, 0, 218, 293, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 1659, 187, 228,
	0, 247, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 275, 287, 278, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 179, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 181, 0, 183, 155,
	227, 177, 284, 190, 0, 219, 186, 251, 191, 197,
	239, 283, 225, 244, 153, 274, 252, 201, 0, 0,
	0, 0, 0, 0, 1659, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1647, 1874, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 195, 0, 236, 174,
	1666, 1670, 1672, 1674, 1676, 1677, 1679, 0, 1683, 1680,
	1681, 1682, 0, 1179, 1661, 1662, 1663, 1664, 1645, 1646,
	1667, 0, 1648, 0, 1649, 1650, 1651, 1652, 1653, 1654,
	1655, 1656, 1657, 1658, 1665, 0, 2267, 0, 290, 291,
	292, 276, 1669, 1671, 1673, 1675, 1678, 1856, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1660, 1666, 1670, 1672,
	1674, 1676, 1677, 1679, 0, 1683, 1680, 1681, 1682, 0,
	0, 1661, 1662, 1663, 1664, 1645, 1646, 1667, 0, 1648,
	0, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1665, 93, 1874, 26, 83, 67, 0, 0, 1669,
	1671, 1673, 1675, 1678, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 0,
	0, 0, 1179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1660, 0, 49, 0, 0, 0, 0,
	90, 0, 0, 1874, 0, 0, 1939, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1856, 1860, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1864, 1637,
	1638, 0, 1179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1853, 0,
	0, 0, 1855, 1857, 1859, 0, 1861, 1862, 1863, 1865,
	1866, 1867, 1869, 1870, 1871, 1872, 1856, 84, 85, 0,
	86, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1875, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1668, 0, 0, 0, 0, 0, 1873, 0, 0, 0,
	0, 0, 0, 66, 82, 91, 0, 47, 0, 0,
	0, 0, 0, 1852, 0, 0, 1860, 0, 0, 0,
	0, 0, 0, 81, 76, 75, 0, 1864, 1868, 0,
	0, 0, 0, 0, 0, 1858, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1853, 0, 0,
	0, 1855, 1857, 1859, 0, 1861, 1862, 1863, 1865, 1866,
	1867, 1869, 1870, 1871, 1872, 0, 1860, 1668, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1864, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 0, 0, 0,
	0, 1875, 0, 0, 0, 0, 0, 1853, 0, 0,
	0, 1855, 1857, 1859, 0, 1861, 1862, 1863, 1865, 1866,
	1867, 1869, 1870, 1871, 1872, 0, 0, 57, 0, 0,
	0, 80, 0, 58, 0, 1873, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1875, 1852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1868, 0, 0,
	59, 0, 0, 0, 1858, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1873, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1868, 0, 0,
	0, 0, 0, 0, 1858, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68,
}

var yyPact = [...]int{
	22952, -1000, -292, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 20831, -1000, -1000, 1326,
	-1000, 8564, 21268, 51, 21268, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 215, -1000, 21268,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 8109, 7654, 137,
	-1000, 1756, -1000, -1000, -1000, -1000, 133, 259, 20394, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 700, -35, 259, 332, 333, 356, 356, 9875, 1756,
	174, 56, -1000, 661, 22952, 169, 21268, -1000, 378, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1756, 1756, 21268, -70, 554, -1000, 221, 213,
	171, 377, -1000, -1000, -1000, -1000, 1768, -1000, 21268, 1504,
	21268, -1000, 1287, 1316, -1000, -1000, 1558, -1000, 109, 4,
	-19, 101, -1000, -1000, 149, -1000, -1000, -1000, -1000, -1000,
	36, -1000, -4, -1000, -12, -1000, -1000, -1000, -127, -1000,
	-1000, -1000, -1000, -1000, 1279, 344, 1576, -183, 1618, 1710,
	1344, 1750, 1707, 1664, 1662, -1000, -3, 192, 192, 209,
	192, -1000, -1000, -1000, -1000, -1000, -1000, 283, -1000, -1000,
	-1000, -1000, 1297, 21268, -1000, 1378, 430, 430, 643, 167,
	-1000, -1000, -101, -140, 430, 430, -140, 6, -1000, 1670,
	1667, -1000, -1000, -1000, -1000, -1000, -1000, 193, 196, -1000,
	-181, -1000, 322, -1000, 302, -1000, 11204, 148, 1302, 513,
	-1000, 448, 21268, 21268, 21268, 448, 448, 12521, 12084, 376,
	-1000, 1710, 1344, -1000, 1166, 1569, 1344, 193, 193, 193,
	193, 193, 21268, 5411, 5411, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 180, 1557, -1000, 21268, 1710, 1618, 1710,
	-1000, 375, 781, 888, -1000, -1000, 221, 1244, -1000, 597,
	-1000, -1000, -1000, -1000, 21268, 188, -1000, 878, 1546, 112,
	7735, 16017, 18639, 21268, 16017, -1000, -1000, -1000, -1000, -1000,
	-129, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 112, 16017, 16017, -79, -1000, -1000, -283, 1618, 5858,
	-1000, -1000, 5858, -1000, -1000, -1000, -1000, -1000, -1000, 207,
	192, -1000, 16017, 605, 18639, 830, 21268, 196, -1000, 21268,
	1297, 1653, 21268, 1761, 6752, 1761, 21268, -1000, -1000, 430,
	430, -1000, 643, 643, -1000, -1000, -133, 1761, 1761, -118,
	21268, 192, -1000, -1000, 19957, 1639, 16891, -1000, -167, 330,
	308, 313, -1000, -1000, 1785, -1000, -1000, 1254, 11647, 10761,
	216, 16017, 3617, -1000, -1000, 448, 448, 448, 3617, 3617,
	387, -1000, -1000, -1000, -1000, -1000, -1000, 21268, 1618, -1000,
	-1000, -1000, -1000, -1000, 16017, 18639, 21268, 21268, 22427, -1000,
	1248, -1000, -1000, 9438, 374, 5858, 1012, 1545, -1000, -1000,
	1543, 1536, 1533, 1516, 1515, 1513, 1512, -1000, 1439, -1000,
	-1000, 1511, 1509, 1503, 1492, -1000, -1000, -1000, -1000, -1000,
	-1000, 1491, -1000, -1000, -1000, 1487, 1439, -1000, -1000, 1486,
	1485, 1469, 1468, 1466, -1000, -1000, -1000, -1000, -1000, -1000,
	885, 884, 1610, -1000, -1000, -1000, -1000, 3170, 6752, 6752,
	6752, 6752, -1000, -1000, 1423, 5858, 1465, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 7199, -1000, 1460, 1458, 1456, 1454, 1444,
	1439, 1438, 883, 1437, 1435, 1434, 6752, 1433, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1248, -1000,
	-280, -1000, 10324, 21268, 21268, -1000, 1618, -1000, 1618, 2280,
	-1000, 1674, -1000, 221, 94, -1000, -1000, -1000, -1000, -1000,
	-1000, 368, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1293, -1000, 21268, 478, -1000, -1000, -1000, -1000, -1000,
	-4, -12, 1237, -1000, -44, 108, -1000, 1231, -1000, -1000,
	-1000, 478, 1237, 203, 881, 874, -1000, 1126, 364, 1286,
	-1000, 737, 19520, 21268, 229, 1635, 1254, 1500, -1000, -1000,
	-1000, 1612, 19083, -1000, 1431, 1223, -1000, -1000, 5858, -1000,
	-1000, 1761, 1761, 1761, 430, 22427, 643, 21268, 643, -1000,
	-1000, 643, -1000, 355, 21268, 229, 1430, -1000, 1654, 1269,
	-1000, -1000, -1000, -1000, 1651, 21705, 174, -1000, -1000, 327,
	298, 316, 18639, 201, -1000, -1000, 1254, -1000, -1000, -1000,
	1429, 473, -1000, -1000, 6752, -1000, 744, -1000, 3617, 3617,
	3617, -1000, -1000, 14706, -1000, -1000, 1237, 1254, 1573, 1270,
	-1000, -1000, -1000, -1000, 1761, 5411, -1000, 16891, -1000, 5858,
	5858, 5858, 5858, -1000, 18202, -1000, 17765, -1000, 240, 6305,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5858, 1658, 1658,
	1658, 5858, 651, 5858, 5858, -1000, 668, 10109, 1658, 1658,
	1658, 1658, 1658, -1000, 2715, 1658, 1658, 1658, 1658, -1000,
	-1000, 6752, 6752, 6752, 6752, 6752, 6752, 6752, 6752, 6752,
	6752, 6752, 6752, 1422, 619, 6752, 6752, 6752, 1569, 1502,
	1257, -1000, -1000, -1000, -1000, -1000, 581, 744, 5858, 722,
	5858, 5858, 5858, -1000, 1162, 1142, -1000, -1000, 5858, -1000,
	5858, 6752, 5858, -1000, 1658, 1761, 1212, -1000, 1427, -1000,
	1219, 1604, -1000, 354, 1255, -1000, 466, 1215, -1000, -1000,
	-1000, -1000, 353, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -71,
	-1000, -1000, 21268, 878, 1210, 1765, 352, 350, 16017, -1000,
	179, 16017, -1000, -1000, 21268, 200, 16017, -6, -146, 5858,
	5858, 21268, 5858, -1000, -1000, -1000, 1378, 595, 1425, -229,
	-1000, -42, -1000, 1571, 67, -1000, 1612, -1000, 427, -1000,
	21268, 1199, -1000, 349, 22952, -1000, 21268, 744, -1000, -1000,
	-1000, 1761, -1000, 430, -1000, 430, 643, 21268, -1000, -1000,
	-229, 1124, 21268, 16891, 16891, 16891, 16891, -1000, 1592, 1591,
	-1000, 1590, 1589, 1598, 21268, 16891, 21268, -1000, -1000, -1000,
	22066, -1000, -1000, -1000, -1000, 1103, 1756, -1000, -1000, -1000,
	284, 1254, 16017, 855, 216, -1000, -1000, -1000, -1000, -1000,
	21268, 21268, 1759, -1000, 1252, 1560, -1000, 626, 626, 590,
	-1000, -1000, 348, -1000, -1000, 258, -1000, -1000, -1000, -1000,
	-1000, 1423, -1000, -1000, -1000, 1096, 1127, 744, 5858, -1000,
	-1000, 5858, 5858, 1108, 5858, 1087, 1207, 1201, -1000, 1082,
	1763, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5858, 5858, 5858, 5858, 5858, 770, 4964, -1000, -1000, -1000,
	5858, 5858, 5858, 5858, 887, 1861, -1000, 659, 659, 393,
	393, 393, 393, 393, 854, 854, -1000, -1000, -1000, 3170,
	1422, 6752, 6752, 6752, 172, 2609, 2597, -1000, 5858, 607,
	-1000, 5858, 731, -1000, 1078, 1449, 1056, 1054, -1000, -1000,
	971, 1038, 2047, 1029, 5858, 1759, -280, 4511, 204, 21268,
	-280, 21268, 21268, 4511, -1000, 21268, 2280, 779, -1000, -1000,
	-1000, 16017, 410, 449, -1000, 14269, 16017, -1000, -1000, 16017,
	123, 1616, -1000, -1000, -104, -83, 744, 744, 347, -1000,
	1647, 1633, 9001, -1000, -69, -1000, -1000, -1000, 321, -1000,
	872, 871, 870, 866, 21268, -1000, -1000, -1000, -1000, -1000,
	454, 454, 454, 169, 1175, 346, 16891, 21268, -1000, 16454,
	1027, -1000, -1000, 1761, 1761, 430, -1000, -8, -53, 1233,
	-1000, 460, 1562, 1570, 1562, -1000, -1000, -1000, -1000, 1579,
	-1000, 898, -1000, -1000, 1233, -1000, 1378, -1000, -1000, -1000,
	1237, 1025, -1000, -1000, -1000, -1000, 1755, 1749, 17328, -1000,
	-1000, -1000, -1000, -1000, 5858, 1498, 1481, 1470, 22712, 1196,
	-1000, -1000, -1000, -1000, 5858, 1455, 1424, 1416, 1375, 1357,
	-1000, 5858, 5858, 1366, 1340, 1323, 1314, 1295, 1188, -1000,
	172, 2609, 1059, -1000, 6752, 6752, 1239, 576, -1000, 5858,
	717, 719, 13395, -1000, 5858, -1000, -1000, -1000, 13395, -1000,
	6752, -1000, 1204, 1755, -1000, 1018, 1247, -1000, -280, -1000,
	-1000, 1212, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1237, -1000, -1000, -1000, -1000, 16017, 1648, 229, -1000,
	-2, 214, -285, -82, 1748, 1747, 21268, 174, 21268, 1011,
	1225, -1000, -1000, -1000, 22789, 497, -1000, 21268, 633, 329,
	192, 329, 627, 1412, -1000, -1000, -69, -1000, 774, 772,
	771, 769, -50, -1000, -1000, -1000, -1000, -1000, 1405, 13395,
	-1000, 13832, 865, 21705, 16891, 16454, 1024, -1000, 342, -1000,
	-1000, -1000, -1000, 1761, -1000, -8, -1000, 282, 277, 33,
	1746, 1753, 21268, 5858, -1000, -1000, 5858, 1404, -1000, 5858,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5858, 5858, -1000,
	-1000, 744, -1000, -1000, -1000, 1002, -1000, 273, 273, -28,
	-1000, -1000, -1000, 1356, -1000, 1386, 1386, 1356, 1356, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1403, 1397,
	-1000, 1356, 1379, 1379, 1356, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1387, 1387, 1395, 1387, -1000, 1169, -1000, -1000, -1000, -1000,
	-1000, 1161, 1153, 5858, -1000, -1000, -1000, -1000, -1000, -1000,
	6752, -1000, -1000, -1000, -1000, 744, 5858, 995, -1000, 1356,
	1386, -1000, 1356, 1379, 1356, 273, 273, 974, 657, 969,
	2791, -1000, -1000, -1000, 4511, 1212, -1000, 16017, 16017, -232,
	-5, 21268, -287, 864, -1000, 1737, 856, 664, -1000, 1378,
	23007, 9001, 1019, -1000, -1000, 21268, 21268, -1000, 21268, 21268,
	192, 5858, -1000, -1000, -1000, -1000, -1000, -1000, 15580, -1000,
	-1000, -1000, -1000, -1000, 1761, 1024, 342, -1000, -1000, 407,
	-1000, -1000, -1000, -1000, 768, -1000, -1000, -1000, 855, 1710,
	-1000, 744, 744, 21268, 744, 744, 1127, -1000, -1000, -1000,
	-1000, -1000, -31, -1000, -1000, -1000, -1000, 765, -1000, 764,
	-1000, -1000, -1000, 850, 850, -1000, -1000, 754, -1000, -1000,
	-1000, 753, -1000, -1000, 747, -1000, -1000, -1000, -1000, 1076,
	-1000, 744, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5858, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-118, -289, 741, -1000, 848, -94, -1000, -1000, 1646, 165,
	22957, -1000, 454, 454, 589, 454, 454, 454, 454, 134,
	132, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 1373, -1000, -1000, 1019, -1000,
	-1000, 640, 6752, -1000, -1000, 846, 13832, 337, 419, 1371,
	-1000, 103, 623, 622, -1000, 21268, -1000, 1368, 1377, 58,
	1361, -1000, 1360, 1358, 21268, 1008, 1180, -1000, 1356, 5858,
	1753, -1000, 23, -1000, -1000, -1000, 1159, -1000, -1000, 965,
	957, 1141, -1000, 1135, 931, 1129, 1123, -1000, 997, -105,
	-87, -1000, 1355, -1000, -1000, 1733, 174, -1000, 1732, 23007,
	-1000, 740, 739, 454, 454, 728, 844, 842, 839, 454,
	454, 727, 836, 22066, 725, 718, 716, 721, 825, 434,
	711, 692, 690, 21268, 1351, 805, -1000, -1000, 2609, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	710, 1335, -1000, -1000, 1333, 15580, 72, 72, 15580, 15580,
	15580, 1331, 270, -1000, 15580, 1630, 926, 1710, -1000, -1000,
	-1000, -1000, -1000, 816, -1000, -1000, -1000, 707, -1000, 696,
	-1000, 195, -102, -87, -1000, 1728, -95, 1725, 1720, 21268,
	664, -1000, 102, -1000, -1000, -1000, 13395, 13395, -1000, -1000,
	-1000, -1000, 814, 807, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 139, 21268, 1120, -1000,
	458, 912, 5858, -223, 15580, 1118, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1094, 1091, 1086, 15580, -1000, -1000, -1000,
	98, 114, -1000, -1000, 1630, -1000, -1000, 901, 895, 1313,
	695, -82, 1718, -1000, 664, 1717, 664, 664, 1081, -1000,
	-1000, 73, 159, 151, -1000, 250, -1000, -1000, -1000, -1000,
	-1000, -1000, 142, 1044, -1000, 805, 798, -1000, 843, 1568,
	-1000, -10, 1042, -1000, -1000, -1000, -1000, 1036, -1000, -1000,
	454, 797, 47, -1000, -1000, -1000, -1000, -1000, 1661, 12958,
	-114, -1000, 792, -1000, 664, -1000, -1000, -1000, 21268, 71,
	679, 6752, 1311, 6752, 1310, 91, 1308, -1000, -1000, -1000,
	-1000, -1000, 270, -1000, -1000, 1566, 1565, 1773, -1000, -1000,
	-1000, -1000, 114, 114, 114, 114, -7, 674, -1000, 830,
	-1000, 21268, -1000, 1013, -1000, -1000, -1000, 341, -1000, -1000,
	-1000, -1000, 1307, 1716, -1000, 2699, 21268, 2060, 21268, 1306,
	445, 6752, -1000, -1000, 1778, -1000, 1776, 380, 380, -1000,
	-1000, -1000, 849, -1000, 441, -1000, 15143, 21268, -1000, 162,
	77, -1000, 1001, -1000, 993, 21268, 666, 1764, -1000, -1000,
	-1000, 683, 111, -1000, 21268, 4064, -1000, 340, 978, -1000,
	890, 57, -1000, -1000, 964, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 744, 21268, -1000, 162, 1603, -1000, 654, -1000,
	-1000, -1000, 22828, 158, -1000, -1000, 22828, 70, -1000, 155,
	-1000, -1000, 956, -1000, 730, 1304, -1000, 70, 23007, 5858,
	-1000, 23007, 947, -1000,
}

var yyPgo = [...]int{
	0, 116, 2111, 170, 152, 150, 169, 2109, 1711, 1709,
	2105, 2104, 2102, 2101, 2100, 2098, 2096, 2095, 2094, 2093,
	2092, 2090, 2089, 2088, 168, 2087, 2085, 2084, 2083, 2082,
	2081, 2080, 2079, 2078, 2076, 2075, 2074, 145, 2073, 1678,
	2072, 2071, 2070, 2069, 2068, 158, 2067, 2066, 2064, 2063,
	2061, 2060, 2059, 2055, 2054, 2053, 2052, 2051, 2050, 161,
	42, 103, 180, 125, 189, 185, 129, 76, 119, 162,
	113, 2049, 2048, 110, 25, 122, 2047, 54, 40, 31,
	178, 104, 48, 63, 93, 2046, 2045, 91, 2043, 2042,
	2040, 2039, 62, 2038, 78, 39, 94, 28, 2037, 2036,
	2035, 83, 2034, 2033, 2031, 2030, 90, 2026, 65, 53,
	2025, 2024, 2023, 2019, 2018, 29, 2014, 46, 2013, 2011,
	2010, 2009, 2008, 2007, 2004, 14, 17, 19, 2003, 2002,
	16, 3, 2001, 160, 70, 86, 109, 1997, 362, 1996,
	1994, 1993, 111, 1988, 132, 1987, 1985, 1984, 1983, 9,
	1982, 41, 1981, 1980, 1966, 49, 1963, 1962, 1961, 96,
	44, 55, 95, 1960, 1959, 79, 148, 15, 80, 0,
	143, 38, 1958, 1957, 1956, 186, 140, 134, 1955, 99,
	237, 115, 60, 1953, 52, 75, 1950, 1949, 1948, 107,
	73, 51, 1947, 92, 1945, 36, 88, 1944, 106, 1942,
	123, 1, 101, 1941, 159, 1940, 1939, 1938, 121, 1937,
	1936, 61, 120, 1916, 1915, 1910, 26, 1907, 37, 21,
	1906, 147, 167, 1903, 1902, 1901, 128, 100, 84, 1900,
	1899, 77, 1898, 114, 81, 74, 112, 690, 108, 67,
	18, 1897, 156, 1895, 187, 154, 133, 1894, 1893, 166,
	1420, 165, 1892, 142, 10, 1891, 1890, 11, 1889, 23,
	1888, 1886, 1885, 1884, 5, 1883, 1882, 1868, 4, 2,
	1867, 6, 105, 45, 68, 1866, 71, 72, 1865, 1863,
	1862, 1861, 1860, 222, 1859, 1858, 1857, 1856, 1855, 1853,
	1852, 85, 1851, 1850, 1849, 1848, 64, 1847, 1845, 1844,
	1843, 1842, 30, 1841, 1840, 20, 1838, 24, 1837, 1834,
	1833, 12, 124, 1831, 1830, 13, 1829, 1828, 7, 8,
	1827, 1826, 57, 47, 34, 82, 87, 1825, 22, 1822,
	98, 1821, 1820, 127, 1819, 102, 1818, 117, 163, 203,
	1817, 141, 1816, 1815, 1814, 1813, 1810, 1805, 1802, 698,
	1801, 1800, 164, 56, 1799, 1798, 1796, 135, 1793,
}

//line mysql_sql.y:6807
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 354, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 53, 321, 321, 320, 320, 319,
	319, 318, 318, 318, 317, 317, 317, 316, 316, 315,
	315, 314, 314, 312, 312, 313, 311, 310, 310, 308,
	308, 306, 306, 307, 307, 301, 301, 304, 304, 302,
	302, 302, 302, 305, 300, 300, 300, 299, 299, 52,
	52, 52, 239, 239, 51, 51, 253, 253, 253, 253,
	253, 251, 251, 251, 251, 250, 250, 249, 249, 254,
	254, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 46, 46, 46, 46, 49, 50,
	247, 247, 247, 247, 247, 248, 248, 248, 47, 48,
	48, 238, 238, 243, 243, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 246, 246, 246,
	245, 245, 244, 244, 40, 40, 40, 43, 42, 237,
	237, 237, 237, 237, 237, 237, 237, 41, 41, 41,
	41, 41, 41, 38, 38, 37, 37, 39, 39, 236,
	236, 235, 56, 56, 56, 56, 56, 56, 56, 55,
	55, 58, 58, 57, 45, 45, 45, 45, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 344, 344, 344,
	346, 346, 173, 174, 355, 172, 172, 172, 340, 340,
	341, 342, 343, 343, 343, 54, 7, 36, 36, 283,
	283, 186, 186, 187, 187, 185, 185, 185, 185, 185,
	185, 286, 287, 182, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 28, 28, 35, 356, 356,
	356, 33, 34, 282, 282, 282, 32, 31, 30, 29,
	29, 27, 27, 26, 26, 179, 179, 181, 181, 177,
	357, 357, 259, 259, 180, 180, 25, 25, 178, 178,
	156, 176, 176, 176, 6, 10, 10, 10, 10, 10,
	10, 16, 15, 13, 12, 11, 14, 5, 5, 5,
	5, 8, 8, 9, 68, 68, 96, 96, 353, 353,
	349, 349, 350, 350, 350, 351, 351, 352, 352, 4,
	290, 290, 290, 290, 290, 290, 329, 329, 329, 330,
	86, 86, 81, 81, 291, 291, 202, 331, 331, 298,
	298, 297, 297, 296, 296, 84, 84, 85, 85, 72,
	72, 59, 59, 303, 303, 303, 303, 309, 309, 280,
	280, 122, 122, 152, 152, 153, 153, 60, 60, 61,
	61, 61, 61, 61, 61, 337, 337, 339, 339, 338,
	83, 83, 79, 79, 80, 80, 80, 78, 78, 77,
	76, 76, 75, 74, 74, 74, 63, 63, 62, 62,
	62, 62, 62, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 64, 64, 345, 345, 345, 284, 284,
	284, 289, 289, 135, 135, 136, 136, 134, 134, 65,
	65, 66, 66, 66, 66, 133, 133, 132, 67, 67,
	73, 69, 69, 71, 71, 71, 71, 143, 143, 142,
	142, 142, 142, 89, 89, 141, 140, 140, 140, 88,
	88, 87, 87, 82, 82, 70, 70, 139, 358, 358,
	137, 165, 165, 165, 171, 171, 164, 164, 164, 164,
	164, 175, 170, 170, 166, 166, 167, 167, 167, 3,
	3, 3, 19, 19, 19, 19, 23, 23, 347, 347,
	17, 233, 233, 232, 232, 234, 234, 234, 234, 228,
	228, 229, 229, 229, 229, 230, 230, 230, 231, 231,
	231, 231, 227, 227, 226, 224, 224, 224, 225, 225,
	225, 225, 225, 225, 168, 168, 18, 221, 221, 222,
	222, 222, 223, 223, 215, 215, 215, 215, 22, 219,
	219, 220, 220, 220, 220, 220, 216, 216, 218, 218,
	214, 214, 214, 214, 214, 21, 213, 213, 211, 211,
	209, 209, 210, 210, 208, 208, 208, 212, 212, 20,
	285, 285, 255, 255, 258, 258, 265, 265, 266, 266,
	264, 264, 271, 271, 270, 270, 269, 269, 268, 268,
	267, 267, 262, 262, 261, 261, 256, 256, 256, 256,
	256, 257, 257, 260, 260, 263, 263, 113, 113, 114,
	114, 114, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 327, 327, 328, 116, 116, 116, 120, 120, 120,
	120, 120, 120, 115, 115, 117, 117, 97, 97, 95,
	95, 90, 90, 91, 91, 92, 92, 93, 93, 94,
	94, 94, 94, 94, 94, 241, 241, 325, 325, 326,
	326, 322, 322, 322, 324, 324, 324, 324, 324, 323,
	323, 98, 150, 150, 150, 169, 169, 169, 149, 149,
	149, 112, 112, 111, 111, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 240, 240,
	183, 183, 184, 184, 130, 128, 128, 129, 129, 129,
	129, 126, 127, 125, 125, 125, 125, 125, 124, 124,
	123, 123, 123, 217, 217, 121, 121, 119, 119, 119,
	118, 118, 118, 272, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 194, 194, 199,
	199, 336, 336, 335, 99, 99, 99, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 108, 108, 108, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 295, 295, 295, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 348,
	348, 348, 332, 332, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 147, 147, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 203, 203,
	204, 204, 292, 292, 292, 292, 292, 292, 293, 293,
	294, 294, 294, 294, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 192, 144, 144, 144, 205, 200, 200, 201,
	201, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 197, 197, 197, 197, 197, 189, 189, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 196, 196, 198,
	198, 207, 207, 207, 206, 206, 206, 206, 206, 206,
	206, 110, 110, 110, 110, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 101, 101, 101, 101, 105,
	105, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 106, 106, 106, 106, 104,
	104, 104, 104, 104, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 103,
	151, 151, 273, 273, 276, 276, 274, 274, 275, 277,
	277, 277, 278, 278, 278, 279, 279, 279, 281, 281,
	155, 155, 155, 161, 161, 154, 154, 162, 162, 163,
	163, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157,
}

var yyR2 = [...]int{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 14, 0, 2, 1, 3, 3,
	3, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 0,
	3, 0, 3, 0, 3, 0, 2, 1, 2, 3,
	4, 3, 3, 1, 0, 1, 1, 0, 1, 9,
	4, 7, 0, 3, 7, 4, 1, 3, 3, 3,
	1, 0, 1, 1, 1, 1, 3, 1, 4, 1,
	3, 1, 2, 1, 1, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	2, 1, 1, 1, 3, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 6,
	3, 1, 1, 1, 1, 1, 1, 1, 2, 4,
	6, 1, 4, 1, 3, 3, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 2, 2, 0,
	4, 2, 4, 1, 5, 3, 2, 1, 2, 2,
	4, 4, 5, 2, 1, 1, 2, 9, 7, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 2, 4, 3, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 1, 1, 1, 1, 6, 1, 7, 9, 0,
	2, 0, 1, 1, 2, 2, 2, 1, 4, 2,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 5, 1, 1,
	1, 5, 5, 0, 1, 1, 2, 2, 3, 6,
	7, 4, 4, 7, 8, 0, 2, 0, 2, 2,
	1, 1, 1, 1, 0, 1, 4, 5, 1, 3,
	1, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 4, 4, 6, 4, 4, 3, 1, 1, 2,
	2, 11, 8, 9, 1, 3, 2, 4, 0, 2,
	0, 1, 1, 1, 1, 0, 1, 0, 1, 4,
	2, 1, 5, 4, 4, 2, 0, 1, 3, 3,
	1, 3, 1, 3, 1, 3, 4, 0, 1, 0,
	1, 1, 3, 1, 1, 0, 4, 1, 3, 2,
	1, 0, 8, 0, 4, 7, 4, 0, 2, 0,
	2, 0, 2, 0, 4, 1, 3, 1, 1, 4,
	3, 4, 5, 4, 5, 2, 3, 1, 3, 6,
	0, 3, 0, 1, 2, 4, 4, 0, 1, 3,
	1, 3, 2, 0, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 1, 7, 7, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 2, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 3,
	1, 1, 1, 4, 4, 4, 3, 2, 2, 2,
	3, 2, 3, 0, 2, 1, 1, 2, 2, 0,
	1, 2, 4, 1, 3, 1, 4, 3, 0, 1,
	2, 0, 1, 2, 1, 1, 0, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 8, 11, 0, 1,
	6, 0, 2, 1, 2, 2, 2, 2, 2, 0,
	1, 2, 2, 2, 2, 1, 3, 2, 2, 2,
	2, 2, 1, 3, 2, 1, 3, 2, 0, 3,
	3, 5, 5, 4, 1, 1, 4, 1, 3, 1,
	3, 2, 1, 1, 0, 1, 1, 1, 11, 0,
	2, 3, 2, 3, 1, 1, 1, 3, 3, 4,
	0, 2, 2, 2, 2, 5, 1, 1, 0, 3,
	0, 1, 1, 2, 4, 4, 4, 0, 1, 10,
	0, 1, 0, 6, 0, 4, 0, 3, 1, 3,
	4, 5, 0, 3, 1, 3, 2, 3, 1, 2,
	0, 6, 0, 2, 0, 2, 4, 5, 4, 5,
	1, 6, 5, 0, 3, 0, 1, 0, 1, 1,
	3, 2, 3, 3, 4, 4, 3, 3, 3, 3,
	4, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 5,
	4, 1, 3, 3, 0, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 0, 1, 1, 3, 1, 1, 2, 1, 7,
	7, 7, 7, 8, 5, 0, 1, 0, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 0,
	1, 3, 1, 3, 5, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 2, 1, 2, 2, 1, 1,
	2, 2, 2, 2, 2, 1, 5, 6, 1, 2,
	0, 1, 1, 2, 5, 0, 1, 1, 1, 2,
	2, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	2, 2, 2, 0, 3, 0, 3, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 1, 1,
	3, 5, 2, 2, 2, 2, 1, 1, 2, 5,
	6, 6, 6, 1, 1, 1, 1, 0, 2, 0,
	1, 1, 2, 4, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 2, 2, 2, 0, 1, 1, 5,
	4, 4, 5, 5, 5, 5, 4, 5, 5, 5,
	5, 5, 5, 5, 1, 1, 1, 4, 4, 6,
	8, 6, 4, 5, 5, 4, 6, 6, 7, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 4, 2, 3, 2, 4,
	6, 2, 2, 4, 6, 4, 2, 2, 0, 1,
	2, 3, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 3, 0, 1, 1,
	3, 3, 3, 3, 3, 2, 3, 4, 3, 4,
	1, 3, 4, 3, 4, 1, 1, 1, 3, 4,
	4, 5, 3, 4, 5, 6, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 1,
	2, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 4, 1,
	1, 3, 0, 1, 0, 3, 0, 3, 3, 0,
	3, 5, 0, 3, 5, 0, 1, 1, 0, 1,
	1, 2, 2, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -354, -2, -1, -3, -4, -5, -6, -44, -55,
	-57, -58, -24, -7, -54, -37, -38, -40, -46, -51,
	-52, -53, -60, -19, -18, -17, 12, -8, -9, -337,
	-10, -172, -173, -174, -355, -25, -26, -27, -29, -30,
	-31, -32, -33, -34, -35, -28, -36, 195, -39, 53,
	-41, -42, -43, -47, -48, -49, -50, 305, 311, 348,
	-61, -63, -20, -21, -22, -23, 191, 14, 420, -11,
	-14, -12, -13, -15, -16, 213, 212, 32, 272, 273,
	309, 211, 192, 13, 125, 126, 128, 129, 25, -62,
	58, 193, -64, 10, 465, -72, 33, -95, -169, 62,
	-157, -160, 423, 424, 425, 426, 427, 428, 429, 430,
	431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 457, 458, 417, 230,
	254, 257, 264, 125, 144, 138, 166, 158, 133, 234,
	235, 69, 128, 377, 79, 362, 347, 131, 249, 251,
	253, 256, 236, 154, 149, 248, 232, 147, 237, 34,
	238, 171, 239, 240, 422, 358, 287, 364, 261, 345,
	148, 359, 252, 361, 172, 176, 369, 311, 142, 143,
	366, 371, 170, 210, 37, 419, 222, 372, 174, 169,
	165, 380, 265, 263, 168, 141, 164, 233, 42, 178,
	177, 179, 341, 342, 343, 344, 241, 242, 299, 368,
	161, 150, 291, 134, 22, 375, 217, 363, 312, 243,
	258, 266, 173, 175, 224, 229, 421, 228, 262, 373,
	146, 221, 250, 216, 376, 135, 305, 314, 244, 129,
	255, 370, 379, 41, 327, 140, 132, 207, 126, 226,
	231, 245, 246, 247, 268, 267, 259, 162, 223, 167,
	139, 163, 127, 225, 378, 328, 464, 289, 330, 160,
	157, 227, 200, 374, 365, 130, 334, 329, 155, 269,
	461, 462, 463, 300, 286, 270, 271, 153, 214, -39,
	-9, -8, -62, -63, -176, 23, 345, -45, 346, 195,
	58, -169, -5, -4, -37, -60, -175, -169, 272, -175,
	198, -169, -250, -221, -249, -222, -252, -223, -168, 26,
	192, 191, 225, 14, 193, 309, 199, 12, 10, 310,
	211, 13, 311, 313, 314, 317, 318, 319, 36, 322,
	323, 62, 65, -169, -250, -221, 229, 236, -77, -78,
	-138, 19, 6, 7, 8, 9, -285, 330, 228, -215,
	-213, 320, 208, 207, 80, 382, 197, -349, -350, 188,
	189, 190, -339, 414, -338, -169, 415, -155, -356, -282,
	365, 364, -180, 363, 356, 367, 358, 191, 79, 159,
	156, 199, 366, 37, 369, 370, 359, 330, -349, 130,
	127, -237, 85, 135, 134, -237, 228, 35, -243, 340,
	-242, -244, 369, 370, 380, 63, 64, 368, -155, -169,
	79, -78, -138, -77, -61, -63, -337, 330, 228, 199,
	198, 382, 272, -284, -345, 26, -289, 185, 186, 187,
	27, 28, -1, -84, 220, -95, 124, -78, -77, -78,
	-149, -169, 347, 94, -45, -45, 346, -340, -341, -342,
	-344, 195, 346, 345, 124, 15, -175, 56, -95, 55,
	59, 15, 59, 58, 466, 63, 307, 321, 330, 308,
	320, 200, 228, 321, 228, 356, 200, 312, 315, 316,
	357, 55, 201, 55, -299, 380, -59, 33, -80, 21,
	-64, -63, 20, 26, 27, 26, 27, 26, 27, -347,
	198, 414, -211, 203, -211, 199, -211, -351, 137, 59,
	-339, -83, 58, -179, 102, -179, -357, 15, 104, 227,
	226, 360, 357, -259, 361, 362, -180, -179, -179, -180,
	198, 382, 25, 25, -283, 203, -352, 202, 373, 420,
	133, 134, 135, -247, 26, 35, 339, -221, 228, 59,
	94, 23, -245, 94, 105, -244, -244, -244, -245, -245,
	-115, 35, -168, 121, 65, -115, 35, 124, -79, -80,
	-64, -63, 60, 60, -283, -283, -283, -283, -283, -175,
	-65, -66, 112, -195, -169, 86, -197, 62, -190, 423,
	424, 425, 426, 427, 428, 429, 430, 431, 432, 433,
	434, 435, 436, 437, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 457, 458, 79, 345, 299, 330, 155, 300,
	153, 214, -191, -193, -318, -312, -188, 58, 110, 111,
	118, 87, -192, -272, 30, 89, 390, -145, -146, -147,
	-148, -313, -311, 65, 70, 73, 76, 77, 75, 74,
	151, 72, 66, 123, -63, -332, -158, -288, -294, 197,
	-292, 156, 152, 12, 116, 340, 121, -295, 64, 63,
	293, 294, 295, 382, 290, 296, 203, 47, 297, 298,
	301, 389, 302, 48, 303, 292, 218, 304, 393, 392,
	394, 386, 383, 381, 384, 385, 387, 388, -65, -290,
	38, -60, 58, 25, 58, -169, -79, -59, -80, 124,
	70, 65, -45, 60, 59, -343, 76, 77, -346, 170,
	162, -169, -56, 65, -3, -4, -5, -6, -24, -37,
	-60, -314, -312, 58, -251, 198, 306, 224, -249, 225,
	311, 314, -227, -226, -224, -168, -222, -254, -149, -168,
	357, -251, -227, -226, 349, 460, -59, -195, -169, -76,
	-75, -195, 200, -211, -227, 86, -221, -167, 62, 63,
	64, -169, -352, -338, 29, -82, -169, -134, 16, -193,
	-134, -95, -179, -179, -181, -357, -177, -357, 357, -134,
	-134, -259, -178, -169, -211, -227, 330, 30, -69, -67,
	-70, -71, -73, -137, -139, -95, 58, 374, 375, 131,
	134, 133, 7, -248, 339, 26, -221, -242, -238, 65,
	340, -226, -246, 55, 121, -296, -195, 35, -245, -245,
	-245, -246, -246, 120, -169, -59, -227, -221, -169, -97,
	-95, -170, -167, -160, -133, 59, -132, 15, -164, 85,
	82, 83, 84, -169, 29, 65, 124, -195, 101, -206,
	94, 95, 96, 97, 98, 99, 100, 58, 58, 58,
	58, 58, 58, 58, 58, -204, 58, 58, 58, 58,
	58, 58, 58, -204, 58, 58, 58, 58, 58, 65,
	65, 107, 106, 117, 110, 111, 112, 113, 114, 115,
	116, 108, 109, 104, 86, 102, 103, 88, -63, -195,
	-201, -193, -193, -193, -193, -272, -199, -195, 58, -195,
	58, 58, 58, -293, 58, 58, -203, -204, 58, 65,
	58, 58, 58, -193, 58, -133, -291, -202, -331, 459,
	-86, 60, -81, -169, -329, -330, -81, -85, -169, -59,
	-59, -162, -163, -154, -159, -166, -167, -160, 288, 196,
	26, 85, 29, 31, 293, 325, 88, 121, 20, 89,
	156, 120, 295, 390, 294, 191, 51, 392, 394, 393,
	383, 381, 332, 336, 338, 335, 382, 356, 35, 14,
	32, 212, 27, 28, 114, 193, 92, 93, 215, 30,
	213, 77, 23, 54, 15, 17, 18, 296, 331, 203,
	202, 104, 349, 199, 49, 12, 123, 33, 101, 333,
	45, 81, 47, 102, 21, 384, 385, 36, 348, 416,
	219, 116, 297, 298, 52, 86, 339, 75, 55, 82,
	19, 50, 103, 194, 389, 48, 337, 301, 303, 414,
	302, 197, 367, 10, 292, 391, 25, 211, 46, 198,
	357, 91, 201, 76, 218, 152, 6, 80, 13, 53,
	56, 386, 387, 388, 38, 90, 16, 304, 420, 340,
	350, 351, 352, 353, 354, 355, 180, 181, 182, 183,
	184, 260, 206, 204, 208, 209, 459, 460, 185, 186,
	283, 285, 159, 188, 189, 190, 220, 137, 7, 23,
	-45, -341, 124, 59, -82, -253, 112, 62, 59, -225,
	331, 466, 63, 60, 59, -253, 201, 65, 65, 59,
	22, 124, 59, -74, 31, 32, -95, 203, -95, -228,
	-229, 337, 30, -214, 56, -209, -210, -208, -212, 35,
	15, -68, -96, -169, 58, 60, 59, -195, -134, -134,
	-134, -179, -170, -181, -176, -181, -177, 124, -156, -169,
	-228, 58, 25, -140, -141, -142, -143, 45, 49, 51,
	46, 47, 48, 52, 25, 59, -358, 29, -165, -171,
	29, -166, 65, -167, -160, -61, -63, 132, 135, 135,
	134, -221, 201, 58, 94, -246, -246, -246, 35, -168,
	55, 59, -134, -66, -67, -69, -195, -195, -195, -195,
	-169, 65, -169, 112, -189, 86, 286, 75, 76, 77,
	-190, -207, 26, 270, 271, -200, -201, -195, -144, 27,
	26, -144, -144, -195, -144, 112, -201, -201, 60, 70,
	-333, -334, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 404, 405, 297, 292, 298, 296, 290, 304, 299,
	300, 155, 412, 413, 406, 407, 408, 409, 410, 411,
	-144, -144, -144, -144, -144, -195, -348, 284, 283, 285,
	-144, -144, -144, -144, -191, -191, -191, -191, -191, -191,
	-191, -191, -191, -191, -191, -191, -198, -205, -272, 58,
	104, 102, 103, 88, -193, -191, -191, 60, 59, -336,
	-335, 90, -195, -333, -200, -195, -200, -200, 60, 60,
	-201, -200, -191, -200, -144, -134, 59, 58, 60, 59,
	38, 124, 59, 94, 60, 59, 124, 347, -169, -312,
	60, 15, 124, 124, -226, 20, 420, -168, -149, 201,
	-227, -300, 202, 389, -303, 361, -195, -195, -169, -75,
	-83, 86, 58, -233, 420, 339, 338, 334, -230, -231,
	333, 335, 332, 336, 55, 278, 279, 280, 281, -208,
	-155, 120, 239, -95, -68, -169, 15, 59, -353, 124,
	-1, -169, -134, -179, -179, -181, -169, -233, 60, -236,
	-235, -149, -70, -70, -70, -70, 45, 45, 45, 50,
	45, 50, 45, -142, -236, -73, -169, -171, 60, 135,
	-227, -182, 65, -238, -95, -95, -136, 17, 124, -189,
	286, 75, -272, 60, 59, -195, -195, -195, 29, -201,
	60, 60, 60, 60, 15, -195, -195, -195, -195, -195,
	60, 15, 15, -195, -195, -195, -195, -195, -201, -198,
	-193, -191, -191, -196, 215, 85, -195, -194, -335, 92,
	-195, 59, 56, 60, 15, 60, 60, 60, 56, 60,
	59, 60, -195, -136, -202, -298, -297, -296, 38, -60,
	-81, -291, -169, -330, -296, -169, -162, -159, -167, -160,
	70, -227, 112, 112, 62, -168, 340, -168, -227, -239,
	420, 33, -309, 355, 350, 352, 124, 29, 30, -90,
	-91, -92, -98, -93, -149, -184, -94, 206, 204, 208,
	-326, 80, 209, 260, 81, 199, -232, -234, 341, 342,
	343, 344, 85, -231, 65, 65, 65, 65, -95, -161,
	94, -161, -161, -84, 56, 124, -67, -96, -169, 112,
	60, -134, -134, -179, -186, -187, -185, 288, -286, 340,
	331, -134, 59, 94, -88, -87, 55, 56, -89, 55,
	-87, 45, 45, -134, -83, 60, -135, 18, 20, -169,
	112, -195, 60, 60, 60, -99, -101, 327, 328, -105,
	-102, -104, -103, -107, -106, 156, 157, 121, 160, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 25,
	214, 152, 153, 154, 155, 172, 138, 158, 418, 180,
	139, 181, 140, 182, 141, 183, 142, 143, 184, 144,
	147, 148, 149, 146, 60, -195, 60, 60, 60, 60,
	60, -195, -195, 15, 60, 60, 60, 60, 60, -196,
	85, -193, -190, 60, 93, -195, 91, -100, -106, 121,
	156, 214, 155, 154, 152, 327, 328, -115, -195, -115,
	-191, 60, -135, 60, 59, -291, -168, 20, 29, -228,
	311, 198, -280, 461, -307, 350, 20, 20, -60, -95,
	60, 59, -101, -94, -169, 81, -325, -326, -211, -325,
	81, 58, -234, 70, 70, 70, 70, -231, 58, -115,
	-117, -168, 121, 65, -165, -67, -169, -134, -353, 124,
	-134, -185, 289, 36, 123, 291, 35, 287, 20, -78,
	-235, -195, -195, 58, -195, -195, -201, 60, -108, 143,
	142, -108, -279, 328, 327, -273, -275, 58, -274, 58,
	-274, -273, -273, 58, 58, -273, -276, 58, -276, -273,
	-277, 58, -277, -278, 58, -277, 60, 60, 60, -195,
	-190, -195, 60, -273, -274, -273, -276, -273, -108, -108,
	60, 60, 23, 60, 60, -296, -168, -168, -239, 312,
	-95, -122, 462, 65, 20, 65, -305, 65, -83, -113,
	-114, -131, 325, 230, -212, 234, 69, 235, 347, 236,
	199, 238, 239, 240, 210, 241, 242, 243, 340, 244,
	245, 246, 247, 308, 6, 274, -92, -112, -111, -109,
	75, 86, 35, 325, -110, 69, 120, 253, 231, 254,
	-130, -183, 204, 80, 81, 313, -184, -322, -323, -169,
	-323, -169, -322, -322, -211, -195, -216, -218, -149, 58,
	-134, -134, 70, -287, -182, -79, -82, -281, 329, 70,
	70, -151, 65, -151, 70, 70, 70, 60, -195, -301,
	-259, -152, 463, 70, 65, 352, 29, -255, 220, 59,
	-131, -161, -161, -155, 120, -161, -161, -161, -161, 237,
	237, -161, -161, -161, -161, -161, -161, -161, -161, -161,
	-161, -161, -161, -161, -161, 58, -109, 75, -191, 65,
	-117, -118, 35, 252, 248, -119, 35, 232, 233, -121,
	58, 260, 81, 81, -95, 58, 56, 269, 58, 58,
	58, -323, 60, 60, 59, -273, -195, -78, 290, 60,
	60, 60, 60, 59, 60, 60, 60, 59, 60, 59,
	60, -308, 355, -304, -302, 350, 351, 352, 353, 58,
	20, -60, 20, -131, 70, 70, -161, -161, 70, 65,
	65, 65, -161, -161, 70, 65, -171, 70, 70, 70,
	70, 35, 65, -120, 35, 248, 252, 249, 250, 251,
	70, 35, 70, 35, 70, 35, -169, 58, -327, -328,
	65, 70, 58, -217, 58, -216, -324, 278, 279, 280,
	282, 281, -324, -216, -216, -216, 58, -241, -240, 261,
	86, -219, -218, -74, 60, -79, 65, 70, 70, -310,
	202, -306, 354, -302, 20, 352, 20, 20, -153, -169,
	-305, -256, 262, 263, -257, -263, 265, -115, -115, 65,
	65, -116, 231, -97, 60, 59, 94, 60, -195, -124,
	-123, 416, -216, 60, 60, 60, 60, -216, 261, -220,
	210, 69, 420, 276, 277, -74, 60, 60, -317, 58,
	70, -307, 20, -305, 20, -305, -305, 60, 59, -261,
	266, 58, -259, 58, -259, 81, 279, 232, 233, 60,
	-328, 65, 60, -128, -129, -126, -127, 55, 359, 258,
	259, 60, -219, -219, -219, -219, 60, -161, 65, 275,
	-321, 25, 60, -316, -315, -150, -311, -169, 355, 65,
	-305, -169, -258, 267, 70, -191, 58, -191, 58, -260,
	264, 58, -240, -127, 55, -126, 55, 14, 13, -130,
	70, -167, -320, -319, -318, 60, 59, 124, -265, 58,
	20, 60, -254, 60, -254, 58, 94, -191, -125, 255,
	256, 25, 134, -125, 59, 94, -315, -169, -266, -264,
	220, -257, 60, 60, -254, 70, 60, 75, 35, 257,
	-319, 35, -195, 124, 60, 59, 62, -262, 268, 60,
	-169, -264, -267, 38, 70, -271, -268, 58, -131, 222,
	-271, -131, -270, -269, 267, 223, 60, 59, 62, 58,
	-269, -268, -201, 60,
}

var yyDef = [...]int{
	23, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 509, 510, 511, 0, 317, 318, 0,
	304, 0, 0, 0, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 236, 0, 185, 184,
	164, 165, 166, 124, 125, 126, 127, 0, 0, 0,
	387, -2, 512, 513, 514, 515, -2, 330, 0, 305,
	306, 307, 308, 309, 310, 225, 226, 227, 222, 223,
	224, -2, 0, 330, 177, 0, 169, 169, 0, 407,
	0, 0, 418, 438, 23, 365, 0, 370, 689, 725,
	726, 727, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430,
	1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440,
	1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
	1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1252, 1253,
	1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
	1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
	1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
	1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
	1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
	1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
	1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
	1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
	1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 186,
	319, 320, 407, 407, 208, 0, 1293, 212, 0, 0,
	0, 301, 204, 205, 206, 207, 0, 501, 0, 201,
	0, 183, 0, 0, 85, 557, 87, 559, 0, 91,
	93, 94, -2, 98, 99, 100, 101, 102, 103, 104,
	0, 106, 1301, 108, 1361, 111, 112, 113, 0, 122,
	123, -2, -2, 554, 0, 0, 1349, 67, -2, 0,
	0, 0, 423, 426, 429, 432, 518, 588, 588, 0,
	588, 601, 565, 566, 567, 586, 587, 335, 331, 332,
	333, 334, 395, 0, 397, 400, 285, 285, 0, 0,
	276, 277, 0, 294, 285, 285, 294, 0, 1090, 0,
	0, 268, 269, 270, 274, 275, 295, 239, 337, 178,
	179, 168, 0, 173, 0, 167, 1351, 0, 138, 0,
	143, 0, 1300, 1365, 1315, 0, 0, 1333, 0, 162,
	-2, 402, 0, 408, 0, 407, 0, 239, 239, 239,
	239, 239, 0, 0, 0, 439, 440, 435, 436, 437,
	441, 442, 3, 0, 0, 369, 0, 402, -2, 0,
	209, 728, 0, 0, 213, 214, 0, 0, 228, 0,
	231, 217, 218, 219, 0, 0, 203, 0, 0, 81,
	0, 0, 0, 0, 0, 561, 92, 121, 95, 96,
	0, 116, 118, 120, 119, 105, 117, 107, 109, 110,
	115, 81, 0, 0, 0, 68, 390, 0, 371, 0,
	420, 422, 0, 424, 425, 427, 428, 430, 431, 0,
	588, 519, 0, 0, 0, 0, 0, 337, 336, 0,
	396, 0, 0, 447, 0, 447, 0, 290, 291, 285,
	285, 278, 287, 0, 292, 293, 0, 447, 447, 0,
	0, 588, 1091, 1092, 0, 0, 0, 338, 0, 0,
	171, 0, 176, 128, 133, 131, 132, 134, 0, 0,
	0, 0, 0, 160, 161, 0, 0, 0, 0, 0,
	151, 154, 683, 684, 555, 155, 156, 0, 371, 403,
	419, 421, 416, 417, 0, 0, 0, 0, 0, 316,
	455, 449, 451, 496, 31, 0, 980, 725, 985, -2,
	1424, 1425, 1426, 1427, 1428, 1429, 1430, -2, 1432, -2,
	-2, 1435, 1436, 1437, 1439, -2, -2, -2, -2, -2,
	-2, 1446, -2, -2, -2, 1450, 1451, -2, -2, 1454,
	1455, 1456, 1457, 1458, -2, -2, -2, -2, -2, -2,
	-2, -2, 996, 796, 797, 798, 799, 0, 0, 0,
	0, 0, 806, 807, 0, 819, 0, 813, 814, 815,
	816, 43, 44, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 943, 783, 0, 0, 0, 928, 0,
	918, 0, 956, 0, 0, 0, 0, 0, 45, 46,
	934, 936, 937, 939, 940, 941, 942, 945, 946, 947,
	950, 951, 952, 953, 954, 955, 958, 960, 930, 931,
	932, 933, 922, 923, 924, 925, 926, 927, 455, 339,
	357, 341, 0, 346, 0, 690, 371, 393, 371, 0,
	210, 0, 215, 0, 0, 230, 232, 233, 234, 220,
	221, 302, 199, 200, 192, 193, 194, 195, 196, 197,
	198, 202, 41, 0, 0, 82, 83, 84, 86, 97,
	0, 0, 75, 542, 548, 545, 558, 0, 89, 560,
	114, 0, 70, 0, 0, 0, 391, 404, 31, 409,
	410, 413, 0, 0, 529, 0, 556, 580, 506, 507,
	508, -2, 0, 398, 0, 0, 483, 265, 0, 286,
	266, 447, 447, 447, 285, 0, 287, 0, 287, 281,
	282, 0, 296, 298, 0, 529, 1392, 240, 460, 0,
	461, 462, 458, 485, 488, 491, 0, 180, 181, 0,
	0, 175, 0, 0, 135, 136, 137, 144, 139, 141,
	0, 0, 145, 157, 158, 159, 363, 364, 0, 0,
	0, 149, 150, 0, 163, 389, 311, 312, 0, 314,
	687, 315, 502, 503, 447, 0, 456, 0, 452, 0,
	0, 0, 0, 497, 0, 499, 0, 975, 0, 0,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 967, 963, 963,
	963, 0, 963, 0, 0, 903, 0, 0, 963, 963,
	963, 963, 963, 904, 0, 963, 963, 963, 963, 917,
	911, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 969,
	0, 802, 803, 804, 805, 808, 0, 820, 0, 0,
	967, 967, 967, 906, 0, 0, 908, 919, 0, 912,
	967, 0, 967, 916, 963, 447, 340, 354, 0, 358,
	0, 0, 350, 352, 345, 347, 0, 0, 367, 392,
	394, 729, 0, 1097, -2, 1099, -2, -2, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
	1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152,
	1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
	1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
	1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
	1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
	1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
	1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
	1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
	1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
	1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242,
	1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 0,
	216, 229, 0, 0, 0, 0, 76, 80, 0, 544,
	0, 0, 547, 88, 0, 0, 0, 64, 373, 0,
	0, 0, 0, 412, 414, 415, 400, 0, 0, 521,
	530, 0, 589, 0, 0, 585, -2, 592, 0, 598,
	0, 0, 324, 328, 23, 401, 0, 448, 267, 271,
	272, 447, 288, 285, 289, 285, 287, 0, 297, 300,
	521, 0, 0, 0, 0, 0, 0, 476, 0, 0,
	475, 0, 0, 0, 0, 0, 0, 489, 490, 492,
	0, 494, 495, 504, 505, 0, 407, 182, 170, 172,
	0, 130, 0, 0, 0, 146, 147, 148, 152, 153,
	0, 0, 445, 450, 457, 460, 971, 972, 973, 974,
	498, 500, 32, 453, 976, 0, 978, 981, 986, 987,
	983, 0, 1001, -2, -2, 0, 968, 969, 0, 964,
	965, 0, 0, 0, 0, 0, 0, 0, 920, 0,
	0, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	0, 0, 0, 0, 0, 0, 0, 869, 870, 871,
	0, 0, 0, 0, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 988, 999, 1000, 0,
	0, 0, 0, 0, 997, 992, 0, 800, 0, 817,
	821, 0, 0, 962, 0, 969, 0, 0, 929, 907,
	0, 0, 0, 0, 0, 445, 357, 359, 0, 0,
	357, 0, 0, 0, 366, 0, 0, 0, 303, 42,
	235, 0, 0, 0, 543, 0, 0, 546, 90, 0,
	72, 0, 65, 66, 377, 0, 405, 406, 32, 411,
	0, 0, 691, 520, 0, 531, 532, 533, 534, 535,
	0, 0, 0, 0, 0, 581, 582, 583, 584, 593,
	1093, 1093, 1093, 365, 0, -2, 0, 0, 326, 0,
	0, 484, 279, 447, 447, 285, 299, 241, 0, 447,
	189, 0, 479, 473, 0, 466, 477, 478, 469, 0,
	471, 0, 467, 468, 447, 459, 400, 493, 487, 174,
	129, 0, 253, 140, 313, 688, 443, 0, 0, 977,
	979, 982, 984, 857, 0, 0, 0, 0, 0, 0,
	846, 840, 841, 921, 0, 0, 0, 0, 0, 0,
	865, 0, 0, 0, 0, 0, 0, 0, 0, 989,
	997, 993, 0, 990, 0, 0, 970, 0, 822, 0,
	0, 0, 0, 858, 0, 862, 905, 909, 0, 913,
	0, 915, 0, 443, 355, 0, 360, 361, 357, 344,
	351, 343, 353, 348, 349, 368, 730, 1098, 1095, 1096,
	211, 74, 77, 78, 79, 549, 0, 550, 529, 71,
	0, 0, 379, 53, 0, 0, 0, 0, 0, 0,
	692, 693, 695, 696, 0, 0, 698, 752, 0, 707,
	588, 707, 0, 0, 709, 710, 522, 523, 0, 0,
	0, 0, 0, 537, 538, 539, 540, 541, 0, 0,
	1094, 0, 0, 491, 0, 0, 447, 325, 328, 329,
	399, 283, 280, 447, 237, 242, 243, 0, 247, 0,
	0, 407, 0, 0, 463, 480, 0, 0, 464, 0,
	465, 470, 472, 188, 486, 142, 433, 0, 0, 33,
	454, 970, 842, 843, 844, 0, 824, 836, 836, 1085,
	1026, 1027, 1028, 1072, 1030, 1076, 1076, 1072, 1072, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 0, 0,
	1049, 1072, 1074, 1074, 1072, 1069, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1079, 1079, 1082, 1079, 845, 0, 864, 847, 848, 851,
	849, 0, 0, 0, 863, 852, 853, 839, 966, 991,
	0, 998, 994, 801, 809, 818, 0, 0, 827, 1072,
	1076, 830, 1072, 1074, 1072, 836, 836, 0, 0, 0,
	0, 850, 434, 356, 0, 342, 553, 0, 0, 72,
	0, 0, 381, 0, 378, 0, 0, 0, 516, 400,
	-2, 0, -2, 697, 753, 719, 719, 708, 719, 719,
	588, 0, 524, 525, 526, 527, 528, 536, 0, 594,
	595, 685, 686, 596, 447, 447, -2, 322, 327, 0,
	284, 244, 245, 246, 0, 249, 250, 252, 0, 402,
	190, 191, 481, 0, 474, 444, 446, 810, 825, 837,
	838, 826, 1088, 1086, 1087, 1029, 1073, 0, 1054, 0,
	1055, 1056, 1057, 0, 0, 1050, 1051, 0, 1052, 1053,
	1045, 0, 1046, 1047, 0, 1048, 861, 866, 867, 0,
	995, 823, 811, 828, 829, 831, 832, 833, 834, 835,
	812, 859, 0, 910, 914, 362, 551, 552, 69, 73,
	55, 383, 0, 380, 0, 374, 376, 63, 0, 602,
	-2, 639, 1093, 1093, 0, 1093, 1093, 1093, 1093, 0,
	0, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
	1093, 1093, 1093, 1093, 1093, 0, 694, 721, -2, 733,
	735, 0, 0, 738, 739, 0, 0, 0, 0, 775,
	745, 0, 0, 1013, 1014, 0, 751, 0, 711, 720,
	0, 720, 0, 0, 719, 0, 0, 576, 1072, 0,
	407, 323, 0, 251, 238, 187, 0, 1025, 1089, 0,
	0, 0, 1070, 0, 0, 0, 0, 868, 0, 49,
	0, 372, 0, 382, 54, 0, 0, 599, 0, 597,
	641, 0, 0, 1093, 1093, 0, 0, 0, 0, 1093,
	1093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 734, 736, 737, 740,
	741, 742, 780, 781, 782, 743, 777, 778, 779, 744,
	0, 0, 1011, 1012, 773, 0, 0, 0, 0, 0,
	0, 0, 705, 569, 0, 413, 0, 402, 248, 482,
	1078, 1077, 1067, 0, 1068, 1075, 1080, 0, 1083, 0,
	860, 47, 51, 56, 57, 0, 0, 0, 0, 0,
	0, 517, 635, 640, 642, 643, 0, 0, 646, 647,
	648, 649, 0, 0, 652, 653, 654, 655, 656, 657,
	658, 659, 660, 661, 677, 678, 679, 680, 681, 682,
	662, 663, 664, 665, 666, 667, 674, 0, 0, 671,
	0, 0, 0, 768, 0, 0, 712, 714, 715, 716,
	717, 718, 713, 0, 0, 0, 0, 704, 706, 748,
	0, 568, 577, 578, 413, 321, 1071, 0, 0, 34,
	0, 53, 0, 58, 0, 0, 0, 0, 0, 385,
	375, 624, 0, 0, 630, 0, 636, 644, 645, 650,
	651, 668, 0, 0, 670, 0, 0, 776, 0, 755,
	769, 0, 0, 569, 569, 569, 569, 0, 749, 570,
	1093, 0, 0, 574, 575, 579, 1081, 1084, 25, 0,
	0, 50, 0, 59, 0, 61, 62, 384, 0, 604,
	0, 0, 0, 0, 0, 633, 0, 675, 676, 669,
	672, 673, 746, 754, 756, 757, 758, 0, 770, 771,
	772, 774, 699, 700, 701, 702, 0, 0, 572, 0,
	24, 0, 35, 0, 37, 39, 40, 722, 48, 52,
	60, 386, 606, 0, 625, 0, 0, 0, 0, 0,
	0, 0, 747, 759, 0, 760, 0, 0, 0, 703,
	571, 573, 26, 27, 0, 36, 0, 0, 603, 0,
	635, 626, 0, 628, 0, 0, 0, 0, 761, 763,
	764, 0, 0, 762, 0, 0, 38, 723, 0, 608,
	0, 622, 627, 629, 0, 634, 632, 765, 767, 766,
	28, 29, 30, 0, 607, 0, 620, 605, 0, 631,
	724, 609, -2, 0, 623, 610, -2, 0, 618, 0,
	611, 619, 0, 614, 0, 0, 613, 0, -2, 0,
	615, -2, 0, 621,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 87, 3, 3, 3, 115, 107, 3,
	58, 60, 112, 110, 59, 111, 124, 113, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 465,
	95, 94, 96, 3, 466, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 117, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 106, 3, 118,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 88, 89, 90, 91, 92, 93, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 108, 109, 114,
	116, 119, 120, 121, 122, 123, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:514
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:520
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:546
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:550
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 24:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:556
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				File:              yyDollar[5].str,
				DuplicateHandling: yyDollar[6].duplicateKeyUnion(),
				Table:             yyDollar[9].tableNameUnion(),
				Fields:            yyDollar[10].fieldsUnion(),
				Lines:             yyDollar[11].linesUnion(),
				IgnoredLines:      uint64(yyDollar[12].int64ValUnion()),
				ColumnList:        yyDollar[13].loadColumnsUnion(),
				Assignments:       yyDollar[14].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:571
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:575
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:581
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:585
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:591
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:598
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:607
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:611
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:615
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:620
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:624
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:628
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:634
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:643
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:654
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:658
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:664
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:668
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:674
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:678
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:684
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:708
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//        	yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:727
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:731
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:736
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:740
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:748
		{
			yyVAL.str = ""
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:752
		{
			yyVAL.str = yyDollar[3].str
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:757
		{
			yyVAL.str = "\n"
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:761
		{
			yyVAL.str = yyDollar[3].str
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:766
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:770
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:794
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:798
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:804
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:810
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:828
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:845
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:868
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:872
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:876
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:881
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:885
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:891
		{
			yyLOCAL = &tree.Grant{
				Privileges:  yyDollar[2].privilegesUnion(),
				ObjType:     yyDollar[4].objectTypeUnion(),
				Level:       yyDollar[5].privilegeLevelUnion(),
				Users:       yyDollar[7].usersUnion(),
				GrantOption: yyDollar[9].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:901
		{
			yyLOCAL = &tree.Grant{
				IsGrantRole:      true,
				RolesInGrantRole: yyDollar[2].rolesUnion(),
				Users:            yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:909
		{
			yyLOCAL = &tree.Grant{
				IsProxy:     true,
				ProxyUser:   yyDollar[4].userUnion(),
				Users:       yyDollar[6].usersUnion(),
				GrantOption: yyDollar[7].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:919
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:923
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:933
		{
			yyLOCAL = &tree.Revoke{
				Privileges: yyDollar[2].privilegesUnion(),
				ObjType:    yyDollar[4].objectTypeUnion(),
				Level:      yyDollar[5].privilegeLevelUnion(),
				Users:      yyDollar[7].usersUnion(),
				Roles:      nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:943
		{
			yyLOCAL = &tree.Revoke{
				IsRevokeRole:      true,
				RolesInRevokeRole: yyDollar[2].rolesUnion(),
				Users:             yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:953
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:959
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_GLOBAL,
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:965
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
				DbName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:972
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				DbName:  yyDollar[1].str,
				TabName: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:980
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:988
		{
			yyLOCAL = tree.OBJECT_TYPE_NONE
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:992
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:996
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1000
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1006
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1010
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1016
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1023
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1032
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1036
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1042
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1046
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1050
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1054
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1058
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1062
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1066
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1070
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1074
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1078
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1082
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1086
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1090
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1094
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1098
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1102
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1106
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1110
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1114
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1118
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1122
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1126
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1130
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1134
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1138
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1142
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1146
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1150
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1154
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1158
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1162
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1166
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1170
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1182
		{
			yyLOCAL = yyDollar[3].setRoleUnion()
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1188
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1196
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL_EXCEPT, Roles: yyDollar[3].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1200
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_DEFAULT, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1204
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1208
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1212
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1218
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1222
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1226
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1232
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1238
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1242
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:1249
		{
			yyVAL.str = yyDollar[3].str
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1255
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1259
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1265
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1273
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1282
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1290
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1298
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1321
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1344
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1351
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1358
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     yyDollar[1].str,
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1366
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1373
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1380
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1389
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1393
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1397
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1403
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1407
		{
			yyVAL.str = yyDollar[1].str
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1414
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1425
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1431
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1436
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1440
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1444
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1448
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1452
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1456
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1460
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1464
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1470
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1474
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1478
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1482
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1487
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1492
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1498
		{
			yyLOCAL = &tree.Use{Name: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1502
		{
			yyLOCAL = &tree.Use{}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1509
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1516
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1527
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: yyDollar[4].tableExprsUnion(),
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1538
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1542
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1548
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1560
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1566
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1570
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1576
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1580
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1586
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1595
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1601
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1606
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1611
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1615
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1619
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1623
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1631
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1639
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1649
		{
			explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
			explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1681
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1685
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:1691
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1697
		{
			yyVAL.str = yyDollar[1].str
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1702
		{
			yyVAL.str = "true"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1703
		{
			yyVAL.str = "false"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1704
		{
			yyVAL.str = yyDollar[1].str
		}
	case 235:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1709
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1719
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: false,
				Users:      yyDollar[4].usersUnion(),
				TlsOpts:    yyDollar[5].tlsOptionsUnion(),
				ResOpts:    yyDollar[6].resourceOptionsUnion(),
				MiscOpts:   yyDollar[7].userMiscOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1730
		{
			auth := &tree.User{
				AuthString: yyDollar[9].str,
				ByAuth:     true,
			}
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: true,
				UserFunc:   auth,
			}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1743
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1747
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1752
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1756
		{
			yyLOCAL = yyDollar[1].userMiscOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1762
		{
			yyLOCAL = []tree.UserMiscOption{yyDollar[1].userMiscOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1766
		{
			yyLOCAL = append(yyDollar[1].userMiscOptionsUnion(), yyDollar[2].userMiscOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1772
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1776
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1780
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1784
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1788
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1792
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1798
		{
			yyVAL.item = nil
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1803
		{
			yyVAL.item = nil
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1825
		{
			yyLOCAL = &tree.ShowTarget{Target: yyDollar[2].str, Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1829
		{
			yyLOCAL = &tree.ShowTarget{Target: "charset", Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1835
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: *yyDollar[4].tableNameUnion(),
				Where:     yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1849
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1859
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1868
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1872
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1876
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1882
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1888
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1894
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1900
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1910
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1922
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1926
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1932
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1944
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1957
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1961
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1966
		{
			yyVAL.str = ""
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:1970
		{
			yyVAL.str = yyDollar[2].str
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1976
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1989
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1993
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1999
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2003
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2009
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2013
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2022
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2026
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2030
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].str, yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2047
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2056
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2065
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].str),
				TableName: *yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2075
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2081
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].str), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2087
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2095
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2100
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2107
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2123
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: yyDollar[7].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2136
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: yyDollar[8].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2147
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2151
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:2157
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:2162
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2169
		{
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2171
		{
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2174
		{
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2183
		{
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2187
		{
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2192
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2201
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2208
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2214
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2222
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2229
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2236
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2255
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2259
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2263
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:2269
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2278
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2282
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2288
		{
			yyVAL.str = yyDollar[1].str
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2292
		{
			yyVAL.str = yyDollar[3].str
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2298
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2302
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2308
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2313
		{
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2317
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2324
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2328
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2335
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2340
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2344
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2350
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2354
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2360
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2364
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2369
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2373
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2386
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2393
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2400
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2418
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2437
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2443
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2450
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2454
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2467
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2471
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2476
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2480
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2487
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2492
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2499
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2505
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2509
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Ep: yyDollar[3].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2513
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2517
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2521
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2525
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2531
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2538
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2547
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2551
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:2557
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].str), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2565
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2569
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2574
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2578
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2584
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2588
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2592
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2597
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2601
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2607
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2613
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2617
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:2623
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2628
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2632
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2636
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2643
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2647
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2653
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2657
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2667
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2677
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2687
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2699
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2707
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2715
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2724
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2732
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2740
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2748
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2756
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2764
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2772
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2782
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2793
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2811
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2815
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2819
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2828
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2832
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2837
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2841
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2846
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2850
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2856
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2860
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2866
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2870
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: tree.UnrestrictedIdentifier(yyDollar[2].str)}
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2874
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2878
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].str, yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2883
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2891
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2897
		{
			yyLOCAL = &tree.From{
				Tables: yyDollar[2].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2905
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2909
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2922
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2931
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2941
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2950
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2960
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2964
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2974
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2978
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2982
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2986
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2992
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2996
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3002
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3008
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3012
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3016
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3022
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3026
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3032
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3036
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3042
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3046
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:3052
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:3056
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[3].str),
					Cols:  yyDollar[4].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:3069
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3074
		{
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3075
		{
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:3079
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3091
		{
			yyVAL.str = ""
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3095
		{
			yyVAL.str = yyDollar[1].str
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3099
		{
			yyVAL.str = yyDollar[2].str
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3108
		{
			yyVAL.str = ""
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3112
		{
			yyVAL.str = yyDollar[1].str
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3116
		{
			yyVAL.str = yyDollar[2].str
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3120
		{
			yyVAL.str = yyDollar[1].str
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3124
		{
			yyVAL.str = yyDollar[2].str
		}
	case 516:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3157
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3167
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[8].tableNameUnion(),
				ColNames:    yyDollar[9].identifierListUnion(),
				AsSource:    yyDollar[11].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3178
		{
		}
	case 520:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3183
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Users:       yyDollar[4].usersUnion(),
				TlsOpts:     yyDollar[5].tlsOptionsUnion(),
				ResOpts:     yyDollar[6].resourceOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3193
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3197
		{
			yyLOCAL = yyDollar[2].resourceOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3203
		{
			yyLOCAL = []tree.ResourceOption{yyDollar[1].resourceOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3207
		{
			yyLOCAL = append(yyDollar[1].resourceOptionsUnion(), yyDollar[2].resourceOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3213
		{
			yyLOCAL = &tree.ResourceOptionMaxQueriesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3217
		{
			yyLOCAL = &tree.ResourceOptionMaxUpdatesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3221
		{
			yyLOCAL = &tree.ResourceOptionMaxConnectionPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3225
		{
			yyLOCAL = &tree.ResourceOptionMaxUserConnections{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3231
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3238
		{
			t := &tree.TlsOptionNone{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3243
		{
			t := &tree.TlsOptionSSL{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3248
		{
			t := &tree.TlsOptionX509{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3253
		{
			yyLOCAL = yyDollar[2].tlsOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3259
		{
			yyLOCAL = []tree.TlsOption{yyDollar[1].tlsOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3263
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[3].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3267
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[2].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3273
		{
			yyLOCAL = &tree.TlsOptionIssuer{Issuer: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3277
		{
			yyLOCAL = &tree.TlsOptionSubject{Subject: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3281
		{
			yyLOCAL = &tree.TlsOptionCipher{Cipher: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3285
		{
			yyLOCAL = &tree.TlsOptionSan{San: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3291
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3295
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3301
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthPlugin: yyDollar[2].authRecordUnion().AuthPlugin,
				AuthString: yyDollar[2].authRecordUnion().AuthString,
				HashString: yyDollar[2].authRecordUnion().HashString,
				ByAuth:     yyDollar[2].authRecordUnion().ByAuth,
			}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3314
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3318
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3322
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3327
		{
			yyLOCAL = &tree.AuthRecord{}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3331
		{
			yyLOCAL = &tree.AuthRecord{
				AuthString: yyDollar[3].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3338
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3344
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				AuthString: yyDollar[5].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3352
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				HashString: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3359
		{
			yyLOCAL = &tree.AuthRecord{
				HashString: yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3371
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3380
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3384
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3390
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: "%"}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3394
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3398
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3407
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3411
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3415
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3419
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3425
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].str),
				Table:       *yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3444
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3448
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3470
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3474
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3478
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3482
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3486
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3492
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3496
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3502
		{
			// Order is parsed but just ignored as MySQL did.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3507
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3512
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3516
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3520
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3524
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3528
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3534
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:   yyDollar[3].ifNotExistsUnion(),
				Name:          tree.Identifier(yyDollar[4].str),
				CreateOptions: yyDollar[5].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3548
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3552
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3557
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3561
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3567
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3571
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3577
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3581
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3585
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3590
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3594
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3600
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3612
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3616
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3621
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3625
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3635
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3639
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3648
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3652
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3658
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3662
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3668
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3677
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3687
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3691
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3697
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3701
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3707
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3714
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3723
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3727
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3732
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3736
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3741
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3745
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3755
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3759
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3770
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3778
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3786
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3794
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3805
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3815
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3825
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3829
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3834
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3838
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3843
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3847
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3853
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3857
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3861
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3867
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3871
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3875
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3879
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3883
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3887
		{
			yyLOCAL = tree.NewTableOptionComment(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3891
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3895
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3899
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3903
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3907
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3911
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3915
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3919
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3923
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3927
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3931
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3935
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3939
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3943
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3947
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3951
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3955
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3959
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3963
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3967
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3971
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].str, yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3975
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3979
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3986
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3990
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:3996
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4001
		{
			yyVAL.str = ""
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4005
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4009
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4015
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4019
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4023
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4027
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4031
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4035
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:4049
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:4053
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4062
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4067
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4073
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4080
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4084
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4090
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4094
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4100
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.Name = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4110
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4116
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4125
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4134
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invail the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4157
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4166
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4176
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4184
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4190
		{
			yyVAL.str = ""
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4194
		{
			yyVAL.str = yyDollar[1].str
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4204
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4210
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4216
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4230
		{
			yyVAL.str = ""
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:4237
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4243
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4247
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4251
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4262
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4266
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4270
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4275
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4279
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4285
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4289
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4295
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4299
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4303
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4307
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4311
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4315
		{
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4319
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4323
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4327
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4331
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4335
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4339
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4343
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4353
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4357
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4362
		{
			yyVAL.str = ""
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4366
		{
			yyVAL.str = yyDollar[1].str
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4372
		{
			yyVAL.str = ""
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4376
		{
			yyVAL.str = yyDollar[2].str
		}
	case 754:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:4382
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4393
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4403
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4410
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4417
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4424
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4433
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4439
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4445
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4449
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4453
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4457
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4461
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4466
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4473
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4477
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4481
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4486
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4490
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4495
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4499
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:4515
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4521
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4525
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4529
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4533
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4537
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4541
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4545
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4549
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4553
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4557
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4561
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4565
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4569
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4575
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4579
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4583
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4587
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4591
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4595
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4599
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4603
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4607
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4611
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4615
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4619
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4624
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4632
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4636
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4640
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4649
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4653
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4657
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4661
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4666
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4670
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4675
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4679
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4685
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4689
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:4695
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4705
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4722
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4739
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4752
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4765
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4777
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4791
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4806
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4821
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4838
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4853
		{
		}
	case 839:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4859
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4868
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4876
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4884
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4893
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4902
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4911
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[4].exprsUnion(),
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4920
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4929
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4938
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4947
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4956
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4965
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4974
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4983
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4999
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5007
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5015
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5023
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5031
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			timeUinit := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5040
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5048
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5057
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5066
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5074
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5082
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5091
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5111
		{
			yyVAL.str = yyDollar[1].str
		}
	case 903:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5147
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5159
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5173
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5181
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5188
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5195
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5207
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5215
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5226
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5235
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5244
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5252
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5262
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5270
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5278
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5288
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5292
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5298
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5302
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5321
		{
		}
	case 929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5323
		{
		}
	case 962:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5363
		{
			name := tree.SetUnresolvedName("interval")
			arg2 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5373
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5377
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5381
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:5387
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5392
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5396
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5402
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5406
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5413
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5417
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5421
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5429
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5433
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5437
		{
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5441
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5445
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5450
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5455
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5461
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5465
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5469
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5473
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5480
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5484
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5490
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5494
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5498
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5502
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5506
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5510
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5514
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5518
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5524
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5528
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5534
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5538
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5545
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5549
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5553
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5559
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5563
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5567
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5571
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5575
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5579
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5583
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5589
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5593
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5597
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5601
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5607
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5611
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5624
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5629
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5633
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5637
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5641
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_hexnum)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5655
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5659
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_bit)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5673
		{
			yyLOCAL = tree.NewParamExpr(yyp)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5679
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5690
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5695
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5701
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5713
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5725
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5737
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5750
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5763
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5776
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5789
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5802
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5815
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5828
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5841
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5854
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5867
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5882
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5905
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 53 {
				yylex.Error("For float(M), M must between 0 and 53.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5942
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 18 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5990
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6007
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6019
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6034
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6054
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6074
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6090
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6103
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6116
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6129
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6142
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6154
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6166
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6178
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6190
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6202
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6214
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6226
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6238
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6250
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6263
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6278
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6301
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6306
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6312
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6319
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6323
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6328
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6332
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6338
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6344
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6351
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6358
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6367
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 10, // this is the default precision for decimal
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6374
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6381
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6390
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6394
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6398
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6404
		{
		}
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6406
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6416
		{
			yyVAL.str = ""
		}
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6420
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
