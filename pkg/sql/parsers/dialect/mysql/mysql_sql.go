// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const SNAPSHOTS = 57437
const INTEGRAL = 57438
const HEX = 57439
const FLOAT = 57440
const HEXNUM = 57441
const BIT_LITERAL = 57442
const NULL = 57443
const TRUE = 57444
const FALSE = 57445
const LOWER_THAN_CHARSET = 57446
const CHARSET = 57447
const UNIQUE = 57448
const KEY = 57449
const OR = 57450
const PIPE_CONCAT = 57451
const XOR = 57452
const AND = 57453
const NOT = 57454
const BETWEEN = 57455
const CASE = 57456
const WHEN = 57457
const THEN = 57458
const ELSE = 57459
const END = 57460
const ELSEIF = 57461
const LOWER_THAN_EQ = 57462
const LE = 57463
const GE = 57464
const NE = 57465
const NULL_SAFE_EQUAL = 57466
const IS = 57467
const LIKE = 57468
const REGEXP = 57469
const IN = 57470
const ASSIGNMENT = 57471
const ILIKE = 57472
const SHIFT_LEFT = 57473
const SHIFT_RIGHT = 57474
const DIV = 57475
const MOD = 57476
const UNARY = 57477
const COLLATE = 57478
const BINARY = 57479
const UNDERSCORE_BINARY = 57480
const INTERVAL = 57481
const OUT = 57482
const INOUT = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const WORK = 57489
const CONSISTENT = 57490
const SNAPSHOT = 57491
const CHAIN = 57492
const NO = 57493
const RELEASE = 57494
const PRIORITY = 57495
const QUICK = 57496
const BIT = 57497
const TINYINT = 57498
const SMALLINT = 57499
const MEDIUMINT = 57500
const INT = 57501
const INTEGER = 57502
const BIGINT = 57503
const INTNUM = 57504
const REAL = 57505
const DOUBLE = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const DECIMAL_VALUE = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const UUID = 57531
const VECF32 = 57532
const VECF64 = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const INT1 = 57542
const INT2 = 57543
const INT3 = 57544
const INT4 = 57545
const INT8 = 57546
const S3OPTION = 57547
const STAGEOPTION = 57548
const SQL_SMALL_RESULT = 57549
const SQL_BIG_RESULT = 57550
const SQL_BUFFER_RESULT = 57551
const LOW_PRIORITY = 57552
const HIGH_PRIORITY = 57553
const DELAYED = 57554
const CREATE = 57555
const ALTER = 57556
const DROP = 57557
const RENAME = 57558
const ANALYZE = 57559
const ADD = 57560
const RETURNS = 57561
const SCHEMA = 57562
const TABLE = 57563
const SEQUENCE = 57564
const INDEX = 57565
const VIEW = 57566
const TO = 57567
const IGNORE = 57568
const IF = 57569
const PRIMARY = 57570
const COLUMN = 57571
const CONSTRAINT = 57572
const SPATIAL = 57573
const FULLTEXT = 57574
const FOREIGN = 57575
const KEY_BLOCK_SIZE = 57576
const SHOW = 57577
const DESCRIBE = 57578
const EXPLAIN = 57579
const DATE = 57580
const ESCAPE = 57581
const REPAIR = 57582
const OPTIMIZE = 57583
const TRUNCATE = 57584
const MAXVALUE = 57585
const PARTITION = 57586
const REORGANIZE = 57587
const LESS = 57588
const THAN = 57589
const PROCEDURE = 57590
const TRIGGER = 57591
const STATUS = 57592
const VARIABLES = 57593
const ROLE = 57594
const PROXY = 57595
const AVG_ROW_LENGTH = 57596
const STORAGE = 57597
const DISK = 57598
const MEMORY = 57599
const CHECKSUM = 57600
const COMPRESSION = 57601
const DATA = 57602
const DIRECTORY = 57603
const DELAY_KEY_WRITE = 57604
const ENCRYPTION = 57605
const ENGINE = 57606
const MAX_ROWS = 57607
const MIN_ROWS = 57608
const PACK_KEYS = 57609
const ROW_FORMAT = 57610
const STATS_AUTO_RECALC = 57611
const STATS_PERSISTENT = 57612
const STATS_SAMPLE_PAGES = 57613
const DYNAMIC = 57614
const COMPRESSED = 57615
const REDUNDANT = 57616
const COMPACT = 57617
const FIXED = 57618
const COLUMN_FORMAT = 57619
const AUTO_RANDOM = 57620
const ENGINE_ATTRIBUTE = 57621
const SECONDARY_ENGINE_ATTRIBUTE = 57622
const INSERT_METHOD = 57623
const RESTRICT = 57624
const CASCADE = 57625
const ACTION = 57626
const PARTIAL = 57627
const SIMPLE = 57628
const CHECK = 57629
const ENFORCED = 57630
const RANGE = 57631
const LIST = 57632
const ALGORITHM = 57633
const LINEAR = 57634
const PARTITIONS = 57635
const SUBPARTITION = 57636
const SUBPARTITIONS = 57637
const CLUSTER = 57638
const TYPE = 57639
const ANY = 57640
const SOME = 57641
const EXTERNAL = 57642
const LOCALFILE = 57643
const URL = 57644
const PREPARE = 57645
const DEALLOCATE = 57646
const RESET = 57647
const EXTENSION = 57648
const INCREMENT = 57649
const CYCLE = 57650
const MINVALUE = 57651
const PUBLICATION = 57652
const SUBSCRIPTIONS = 57653
const PUBLICATIONS = 57654
const PROPERTIES = 57655
const PARSER = 57656
const VISIBLE = 57657
const INVISIBLE = 57658
const BTREE = 57659
const HASH = 57660
const RTREE = 57661
const BSI = 57662
const IVFFLAT = 57663
const MASTER = 57664
const ZONEMAP = 57665
const LEADING = 57666
const BOTH = 57667
const TRAILING = 57668
const UNKNOWN = 57669
const LISTS = 57670
const OP_TYPE = 57671
const REINDEX = 57672
const EXPIRE = 57673
const ACCOUNT = 57674
const ACCOUNTS = 57675
const UNLOCK = 57676
const DAY = 57677
const NEVER = 57678
const PUMP = 57679
const MYSQL_COMPATIBILITY_MODE = 57680
const MODIFY = 57681
const CHANGE = 57682
const SECOND = 57683
const ASCII = 57684
const COALESCE = 57685
const COLLATION = 57686
const HOUR = 57687
const MICROSECOND = 57688
const MINUTE = 57689
const MONTH = 57690
const QUARTER = 57691
const REPEAT = 57692
const REVERSE = 57693
const ROW_COUNT = 57694
const WEEK = 57695
const REVOKE = 57696
const FUNCTION = 57697
const PRIVILEGES = 57698
const TABLESPACE = 57699
const EXECUTE = 57700
const SUPER = 57701
const GRANT = 57702
const OPTION = 57703
const REFERENCES = 57704
const REPLICATION = 57705
const SLAVE = 57706
const CLIENT = 57707
const USAGE = 57708
const RELOAD = 57709
const FILE = 57710
const TEMPORARY = 57711
const ROUTINE = 57712
const EVENT = 57713
const SHUTDOWN = 57714
const NULLX = 57715
const AUTO_INCREMENT = 57716
const APPROXNUM = 57717
const SIGNED = 57718
const UNSIGNED = 57719
const ZEROFILL = 57720
const ENGINES = 57721
const LOW_CARDINALITY = 57722
const AUTOEXTEND_SIZE = 57723
const ADMIN_NAME = 57724
const RANDOM = 57725
const SUSPEND = 57726
const ATTRIBUTE = 57727
const HISTORY = 57728
const REUSE = 57729
const CURRENT = 57730
const OPTIONAL = 57731
const FAILED_LOGIN_ATTEMPTS = 57732
const PASSWORD_LOCK_TIME = 57733
const UNBOUNDED = 57734
const SECONDARY = 57735
const RESTRICTED = 57736
const USER = 57737
const IDENTIFIED = 57738
const CIPHER = 57739
const ISSUER = 57740
const X509 = 57741
const SUBJECT = 57742
const SAN = 57743
const REQUIRE = 57744
const SSL = 57745
const NONE = 57746
const PASSWORD = 57747
const SHARED = 57748
const EXCLUSIVE = 57749
const MAX_QUERIES_PER_HOUR = 57750
const MAX_UPDATES_PER_HOUR = 57751
const MAX_CONNECTIONS_PER_HOUR = 57752
const MAX_USER_CONNECTIONS = 57753
const FORMAT = 57754
const VERBOSE = 57755
const CONNECTION = 57756
const TRIGGERS = 57757
const PROFILES = 57758
const LOAD = 57759
const INLINE = 57760
const INFILE = 57761
const TERMINATED = 57762
const OPTIONALLY = 57763
const ENCLOSED = 57764
const ESCAPED = 57765
const STARTING = 57766
const LINES = 57767
const ROWS = 57768
const IMPORT = 57769
const DISCARD = 57770
const JSONTYPE = 57771
const MODUMP = 57772
const OVER = 57773
const PRECEDING = 57774
const FOLLOWING = 57775
const GROUPS = 57776
const DATABASES = 57777
const TABLES = 57778
const SEQUENCES = 57779
const EXTENDED = 57780
const FULL = 57781
const PROCESSLIST = 57782
const FIELDS = 57783
const COLUMNS = 57784
const OPEN = 57785
const ERRORS = 57786
const WARNINGS = 57787
const INDEXES = 57788
const SCHEMAS = 57789
const NODE = 57790
const LOCKS = 57791
const ROLES = 57792
const TABLE_NUMBER = 57793
const COLUMN_NUMBER = 57794
const TABLE_VALUES = 57795
const TABLE_SIZE = 57796
const NAMES = 57797
const GLOBAL = 57798
const PERSIST = 57799
const SESSION = 57800
const ISOLATION = 57801
const LEVEL = 57802
const READ = 57803
const WRITE = 57804
const ONLY = 57805
const REPEATABLE = 57806
const COMMITTED = 57807
const UNCOMMITTED = 57808
const SERIALIZABLE = 57809
const LOCAL = 57810
const EVENTS = 57811
const PLUGINS = 57812
const CURRENT_TIMESTAMP = 57813
const DATABASE = 57814
const CURRENT_TIME = 57815
const LOCALTIME = 57816
const LOCALTIMESTAMP = 57817
const UTC_DATE = 57818
const UTC_TIME = 57819
const UTC_TIMESTAMP = 57820
const REPLACE = 57821
const CONVERT = 57822
const SEPARATOR = 57823
const TIMESTAMPDIFF = 57824
const CURRENT_DATE = 57825
const CURRENT_USER = 57826
const CURRENT_ROLE = 57827
const SECOND_MICROSECOND = 57828
const MINUTE_MICROSECOND = 57829
const MINUTE_SECOND = 57830
const HOUR_MICROSECOND = 57831
const HOUR_SECOND = 57832
const HOUR_MINUTE = 57833
const DAY_MICROSECOND = 57834
const DAY_SECOND = 57835
const DAY_MINUTE = 57836
const DAY_HOUR = 57837
const YEAR_MONTH = 57838
const SQL_TSI_HOUR = 57839
const SQL_TSI_DAY = 57840
const SQL_TSI_WEEK = 57841
const SQL_TSI_MONTH = 57842
const SQL_TSI_QUARTER = 57843
const SQL_TSI_YEAR = 57844
const SQL_TSI_SECOND = 57845
const SQL_TSI_MINUTE = 57846
const RECURSIVE = 57847
const CONFIG = 57848
const DRAINER = 57849
const SOURCE = 57850
const STREAM = 57851
const HEADERS = 57852
const CONNECTOR = 57853
const CONNECTORS = 57854
const DAEMON = 57855
const PAUSE = 57856
const CANCEL = 57857
const TASK = 57858
const RESUME = 57859
const MATCH = 57860
const AGAINST = 57861
const BOOLEAN = 57862
const LANGUAGE = 57863
const WITH = 57864
const QUERY = 57865
const EXPANSION = 57866
const WITHOUT = 57867
const VALIDATION = 57868
const UPGRADE = 57869
const RETRY = 57870
const ADDDATE = 57871
const BIT_AND = 57872
const BIT_OR = 57873
const BIT_XOR = 57874
const CAST = 57875
const COUNT = 57876
const APPROX_COUNT = 57877
const APPROX_COUNT_DISTINCT = 57878
const SERIAL_EXTRACT = 57879
const APPROX_PERCENTILE = 57880
const CURDATE = 57881
const CURTIME = 57882
const DATE_ADD = 57883
const DATE_SUB = 57884
const EXTRACT = 57885
const GROUP_CONCAT = 57886
const MAX = 57887
const MID = 57888
const MIN = 57889
const NOW = 57890
const POSITION = 57891
const SESSION_USER = 57892
const STD = 57893
const STDDEV = 57894
const MEDIAN = 57895
const CLUSTER_CENTERS = 57896
const KMEANS = 57897
const STDDEV_POP = 57898
const STDDEV_SAMP = 57899
const SUBDATE = 57900
const SUBSTR = 57901
const SUBSTRING = 57902
const SUM = 57903
const SYSDATE = 57904
const SYSTEM_USER = 57905
const TRANSLATE = 57906
const TRIM = 57907
const VARIANCE = 57908
const VAR_POP = 57909
const VAR_SAMP = 57910
const AVG = 57911
const RANK = 57912
const ROW_NUMBER = 57913
const DENSE_RANK = 57914
const BIT_CAST = 57915
const BITMAP_BIT_POSITION = 57916
const BITMAP_BUCKET_NUMBER = 57917
const BITMAP_COUNT = 57918
const BITMAP_CONSTRUCT_AGG = 57919
const BITMAP_OR_AGG = 57920
const NEXTVAL = 57921
const SETVAL = 57922
const CURRVAL = 57923
const LASTVAL = 57924
const ARROW = 57925
const ROW = 57926
const OUTFILE = 57927
const HEADER = 57928
const MAX_FILE_SIZE = 57929
const FORCE_QUOTE = 57930
const PARALLEL = 57931
const UNUSED = 57932
const BINDINGS = 57933
const DO = 57934
const DECLARE = 57935
const LOOP = 57936
const WHILE = 57937
const LEAVE = 57938
const ITERATE = 57939
const UNTIL = 57940
const CALL = 57941
const PREV = 57942
const SLIDING = 57943
const FILL = 57944
const SPBEGIN = 57945
const BACKEND = 57946
const SERVERS = 57947
const HANDLER = 57948
const PERCENT = 57949
const SAMPLE = 57950
const KILL = 57951
const BACKUP = 57952
const FILESYSTEM = 57953
const PARALLELISM = 57954
const QUERY_RESULT = 57955

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:11755

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 121,
	11, 719,
	22, 719,
	-2, 712,
	-1, 141,
	238, 1110,
	240, 1011,
	-2, 1058,
	-1, 166,
	43, 546,
	240, 546,
	267, 553,
	268, 553,
	463, 546,
	-2, 580,
	-1, 207,
	634, 1862,
	-2, 460,
	-1, 507,
	634, 1980,
	-2, 349,
	-1, 565,
	634, 2039,
	-2, 347,
	-1, 566,
	634, 2040,
	-2, 348,
	-1, 567,
	634, 2041,
	-2, 350,
	-1, 694,
	319, 137,
	435, 137,
	436, 137,
	-2, 1767,
	-1, 760,
	82, 1554,
	-2, 1917,
	-1, 761,
	82, 1572,
	-2, 1888,
	-1, 765,
	82, 1573,
	-2, 1916,
	-1, 798,
	82, 1481,
	-2, 2111,
	-1, 799,
	82, 1482,
	-2, 2110,
	-1, 800,
	82, 1483,
	-2, 2100,
	-1, 801,
	82, 2072,
	-2, 2093,
	-1, 802,
	82, 2073,
	-2, 2094,
	-1, 803,
	82, 2074,
	-2, 2102,
	-1, 804,
	82, 2075,
	-2, 2082,
	-1, 805,
	82, 2076,
	-2, 2091,
	-1, 806,
	82, 2077,
	-2, 2103,
	-1, 807,
	82, 2078,
	-2, 2104,
	-1, 808,
	82, 2079,
	-2, 2109,
	-1, 809,
	82, 2080,
	-2, 2114,
	-1, 810,
	82, 2081,
	-2, 2115,
	-1, 811,
	82, 1550,
	-2, 1954,
	-1, 812,
	82, 1551,
	-2, 1751,
	-1, 813,
	82, 1552,
	-2, 1963,
	-1, 814,
	82, 1553,
	-2, 1760,
	-1, 816,
	82, 1556,
	-2, 1768,
	-1, 817,
	82, 1557,
	-2, 1987,
	-1, 819,
	82, 1560,
	-2, 1787,
	-1, 821,
	82, 1562,
	-2, 1999,
	-1, 822,
	82, 1563,
	-2, 1998,
	-1, 823,
	82, 1564,
	-2, 1831,
	-1, 824,
	82, 1565,
	-2, 1912,
	-1, 827,
	82, 1568,
	-2, 2010,
	-1, 829,
	82, 1570,
	-2, 2013,
	-1, 830,
	82, 1571,
	-2, 2015,
	-1, 831,
	82, 1574,
	-2, 2023,
	-1, 832,
	82, 1575,
	-2, 1897,
	-1, 833,
	82, 1576,
	-2, 1942,
	-1, 834,
	82, 1577,
	-2, 1907,
	-1, 835,
	82, 1578,
	-2, 1932,
	-1, 846,
	82, 1459,
	-2, 2105,
	-1, 847,
	82, 1460,
	-2, 2106,
	-1, 848,
	82, 1461,
	-2, 2107,
	-1, 935,
	458, 580,
	459, 580,
	-2, 547,
	-1, 981,
	124, 1751,
	135, 1751,
	155, 1751,
	-2, 1725,
	-1, 1095,
	22, 746,
	-2, 695,
	-1, 1199,
	11, 719,
	22, 719,
	-2, 1340,
	-1, 1281,
	22, 746,
	-2, 695,
	-1, 1603,
	82, 1625,
	-2, 1914,
	-1, 1604,
	82, 1626,
	-2, 1915,
	-1, 1755,
	83, 896,
	-2, 902,
	-1, 2178,
	107, 1050,
	151, 1050,
	190, 1050,
	193, 1050,
	280, 1050,
	-2, 1043,
	-1, 2324,
	11, 719,
	22, 719,
	-2, 839,
	-1, 2356,
	83, 1711,
	156, 1711,
	-2, 1899,
	-1, 2357,
	83, 1711,
	156, 1711,
	-2, 1898,
	-1, 2358,
	83, 1687,
	156, 1687,
	-2, 1885,
	-1, 2359,
	83, 1688,
	156, 1688,
	-2, 1890,
	-1, 2360,
	83, 1689,
	156, 1689,
	-2, 1819,
	-1, 2361,
	83, 1690,
	156, 1690,
	-2, 1813,
	-1, 2362,
	83, 1691,
	156, 1691,
	-2, 1741,
	-1, 2363,
	83, 1692,
	156, 1692,
	-2, 1887,
	-1, 2364,
	83, 1693,
	156, 1693,
	-2, 1817,
	-1, 2365,
	83, 1694,
	156, 1694,
	-2, 1812,
	-1, 2366,
	83, 1695,
	156, 1695,
	-2, 1801,
	-1, 2367,
	83, 1711,
	156, 1711,
	-2, 1802,
	-1, 2368,
	83, 1711,
	156, 1711,
	-2, 1803,
	-1, 2370,
	83, 1700,
	156, 1700,
	-2, 1932,
	-1, 2371,
	83, 1678,
	156, 1678,
	-2, 1917,
	-1, 2372,
	83, 1709,
	156, 1709,
	-2, 1888,
	-1, 2373,
	83, 1709,
	156, 1709,
	-2, 1916,
	-1, 2374,
	83, 1709,
	156, 1709,
	-2, 1769,
	-1, 2375,
	83, 1707,
	156, 1707,
	-2, 1907,
	-1, 2376,
	83, 1704,
	156, 1704,
	-2, 1792,
	-1, 2377,
	82, 1659,
	83, 1659,
	156, 1659,
	393, 1659,
	394, 1659,
	395, 1659,
	-2, 1740,
	-1, 2378,
	82, 1660,
	83, 1660,
	156, 1660,
	393, 1660,
	394, 1660,
	395, 1660,
	-2, 1742,
	-1, 2379,
	82, 1661,
	83, 1661,
	156, 1661,
	393, 1661,
	394, 1661,
	395, 1661,
	-2, 1959,
	-1, 2380,
	82, 1663,
	83, 1663,
	156, 1663,
	393, 1663,
	394, 1663,
	395, 1663,
	-2, 1889,
	-1, 2381,
	82, 1665,
	83, 1665,
	156, 1665,
	393, 1665,
	394, 1665,
	395, 1665,
	-2, 1871,
	-1, 2382,
	82, 1667,
	83, 1667,
	156, 1667,
	393, 1667,
	394, 1667,
	395, 1667,
	-2, 1818,
	-1, 2383,
	82, 1669,
	83, 1669,
	156, 1669,
	393, 1669,
	394, 1669,
	395, 1669,
	-2, 1797,
	-1, 2384,
	82, 1670,
	83, 1670,
	156, 1670,
	393, 1670,
	394, 1670,
	395, 1670,
	-2, 1798,
	-1, 2385,
	82, 1672,
	83, 1672,
	156, 1672,
	393, 1672,
	394, 1672,
	395, 1672,
	-2, 1739,
	-1, 2386,
	83, 1714,
	156, 1714,
	393, 1714,
	394, 1714,
	395, 1714,
	-2, 1774,
	-1, 2387,
	83, 1714,
	156, 1714,
	393, 1714,
	394, 1714,
	395, 1714,
	-2, 1788,
	-1, 2388,
	83, 1717,
	156, 1717,
	393, 1717,
	394, 1717,
	395, 1717,
	-2, 1770,
	-1, 2389,
	83, 1717,
	156, 1717,
	393, 1717,
	394, 1717,
	395, 1717,
	-2, 1834,
	-1, 2390,
	83, 1714,
	156, 1714,
	393, 1714,
	394, 1714,
	395, 1714,
	-2, 1855,
	-1, 2586,
	107, 1050,
	151, 1050,
	190, 1050,
	193, 1050,
	280, 1050,
	-2, 1044,
	-1, 2602,
	80, 640,
	156, 640,
	-2, 1223,
	-1, 2990,
	193, 1050,
	304, 1308,
	-2, 1280,
	-1, 3146,
	107, 1050,
	151, 1050,
	190, 1050,
	193, 1050,
	-2, 1166,
	-1, 3148,
	107, 1050,
	151, 1050,
	190, 1050,
	193, 1050,
	-2, 1166,
	-1, 3160,
	80, 640,
	156, 640,
	-2, 1224,
	-1, 3181,
	193, 1050,
	304, 1308,
	-2, 1281,
	-1, 3318,
	107, 1050,
	151, 1050,
	190, 1050,
	193, 1050,
	-2, 1167,
	-1, 3344,
	83, 1128,
	156, 1128,
	-2, 1050,
	-1, 3472,
	83, 1128,
	156, 1128,
	-2, 1050,
	-1, 3618,
	83, 1132,
	156, 1132,
	-2, 1050,
	-1, 3665,
	83, 1133,
	156, 1133,
	-2, 1050,
}

const yyPrivate = 57344

const yyLast = 46580

var yyAct = [...]int{
	727, 704, 3711, 729, 3685, 2631, 196, 3704, 3622, 1839,
	1583, 3259, 3166, 3628, 3621, 3472, 3629, 2976, 3551, 713,
	3510, 3076, 3009, 3581, 3372, 3195, 3450, 2442, 3525, 2625,
	3077, 706, 3504, 3304, 1364, 3471, 3529, 1234, 3301, 3400,
	757, 599, 980, 3441, 1503, 2628, 3263, 3511, 3513, 3315,
	1370, 1096, 3133, 616, 3254, 621, 621, 1787, 3308, 2222,
	3303, 621, 638, 647, 702, 2985, 647, 3325, 2949, 37,
	3285, 2739, 1586, 3182, 1426, 58, 2912, 3074, 3149, 1579,
	2738, 1929, 2938, 3320, 2605, 3122, 2655, 2721, 1926, 2987,
	2994, 181, 3005, 3151, 2737, 2731, 658, 2037, 2800, 2352,
	2760, 1894, 3062, 2318, 1999, 2225, 2734, 1641, 652, 3042,
	2575, 2477, 2922, 2917, 2919, 2993, 2915, 2913, 696, 1304,
	2910, 2957, 2914, 2189, 1944, 1088, 120, 1419, 2302, 36,
	2587, 644, 2157, 2146, 2844, 2033, 2021, 701, 1733, 2424,
	2145, 2773, 2007, 1499, 910, 2354, 2406, 2783, 2000, 1922,
	1972, 2008, 2032, 2319, 1897, 1507, 1504, 1335, 1895, 2307,
	2559, 2657, 1818, 2636, 1829, 2634, 2223, 6, 2597, 2188,
	599, 2350, 2564, 1492, 192, 8, 191, 7, 1037, 1763,
	974, 705, 1577, 2034, 1532, 1435, 1405, 2169, 695, 2510,
	1514, 2067, 714, 1798, 1799, 1466, 196, 2044, 196, 2218,
	1028, 1029, 1634, 1617, 1373, 2006, 1109, 621, 2003, 943,
	1568, 1988, 27, 615, 1473, 1962, 1576, 973, 1404, 16,
	23, 598, 1902, 2326, 1402, 1353, 14, 1762, 1642, 909,
	630, 1458, 15, 660, 33, 1365, 633, 850, 661, 24,
	17, 10, 182, 1374, 886, 178, 1582, 1349, 1515, 989,
	172, 907, 892, 1465, 1279, 657, 646, 1235, 2041, 3435,
	2545, 1337, 1168, 1169, 1170, 1167, 2328, 2545, 930, 1168,
	1169, 1170, 1167, 2545, 643, 1025, 3163, 620, 620, 2964,
	2255, 639, 2051, 628, 1091, 3136, 2465, 1024, 641, 1026,
	1168, 1169, 1170, 1167, 642, 3069, 640, 2409, 2412, 2410,
	986, 2011, 1746, 988, 1480, 2407, 2509, 1476, 1020, 626,
	1021, 180, 2144, 1021, 703, 617, 1298, 852, 853, 2894,
	1021, 2891, 650, 2896, 2893, 3696, 1387, 1740, 2537, 2535,
	1294, 3252, 1478, 2796, 2794, 1977, 3185, 3407, 3401, 1091,
	1168, 1169, 1170, 1167, 1168, 1169, 1170, 1167, 1019, 3255,
	3075, 2018, 3515, 2002, 1229, 8, 851, 7, 2871, 3603,
	1994, 2263, 862, 179, 54, 168, 142, 697, 1131, 2539,
	1008, 2451, 3290, 2459, 3197, 2038, 179, 54, 168, 142,
	3286, 3150, 3457, 2180, 179, 1513, 179, 3188, 179, 1299,
	3425, 3562, 179, 179, 169, 179, 179, 1445, 3183, 1444,
	1443, 161, 992, 3205, 3206, 170, 1530, 990, 179, 3184,
	1522, 991, 1310, 2869, 656, 1327, 2049, 179, 54, 168,
	142, 2173, 2344, 1165, 119, 3427, 3458, 1107, 1939, 628,
	2593, 2345, 173, 1406, 119, 1408, 1527, 2767, 2768, 107,
	1519, 2816, 1009, 2808, 119, 173, 3189, 2766, 1383, 1146,
	1300, 1384, 1147, 173, 1906, 173, 2980, 1529, 697, 2425,
	1676, 1521, 173, 952, 173, 173, 1813, 179, 54, 168,
	142, 863, 841, 1361, 840, 842, 843, 2591, 844, 845,
	1149, 3276, 179, 54, 168, 142, 173, 1907, 1908, 2978,
	984, 985, 1553, 1747, 1748, 179, 54, 168, 142, 2561,
	2895, 2332, 2892, 1585, 2331, 1158, 1369, 2333, 1163, 2562,
	1368, 1371, 1372, 1003, 998, 993, 997, 1001, 3600, 1371,
	1372, 1569, 124, 125, 1573, 126, 127, 3632, 3633, 983,
	982, 1541, 3518, 3594, 3517, 3593, 173, 1386, 3516, 3592,
	3204, 1006, 2226, 1309, 3518, 996, 1104, 2133, 1572, 3517,
	3516, 173, 3653, 3596, 3689, 3690, 3502, 3078, 2560, 3583,
	1144, 3583, 3078, 2446, 173, 2801, 3586, 3193, 3505, 3506,
	3507, 3508, 2802, 3404, 2803, 2540, 1479, 1477, 1589, 1101,
	2053, 1923, 1917, 3522, 3091, 1913, 2931, 3295, 2933, 3190,
	3194, 3192, 3191, 141, 167, 177, 1004, 105, 1112, 3605,
	3606, 1662, 962, 1007, 2567, 2676, 1564, 1112, 3123, 2045,
	3130, 3429, 3601, 3602, 898, 166, 160, 159, 3275, 2296,
	621, 2168, 60, 1145, 1985, 994, 3277, 3199, 3200, 2923,
	621, 1100, 1574, 2551, 141, 691, 177, 2834, 693, 1486,
	1485, 2928, 2929, 692, 1161, 1162, 2456, 3207, 1005, 647,
	647, 1151, 621, 3598, 1152, 1571, 166, 2930, 2832, 1160,
	165, 2261, 1134, 3253, 2795, 2725, 2299, 2298, 3432, 2050,
	1359, 3292, 2549, 2303, 3207, 614, 2056, 2058, 2059, 1937,
	1938, 3631, 1154, 162, 163, 164, 3186, 2538, 995, 3222,
	2598, 2241, 3198, 1396, 1588, 1587, 1311, 2221, 2244, 1385,
	1148, 3660, 2927, 2947, 644, 644, 3008, 3462, 2550, 3006,
	3007, 2982, 989, 1207, 171, 3544, 1156, 1157, 2958, 1595,
	1598, 1599, 1297, 3373, 3374, 3375, 3379, 3377, 3378, 3376,
	1596, 3539, 3212, 2730, 115, 649, 3434, 3094, 165, 3454,
	116, 3219, 648, 1031, 2838, 2175, 958, 956, 1093, 957,
	2544, 2039, 1126, 2011, 2039, 2243, 1092, 3530, 2039, 1100,
	3546, 1092, 1150, 986, 1658, 1002, 988, 3167, 3552, 2977,
	1655, 2630, 1570, 3174, 1657, 1654, 1656, 1660, 1661, 1348,
	1106, 3223, 1659, 989, 645, 2815, 2626, 2627, 3521, 2630,
	1238, 3011, 2072, 1114, 1113, 3363, 1099, 117, 2242, 3722,
	1155, 999, 1114, 1113, 1000, 1021, 3604, 2040, 1021, 1021,
	53, 2273, 1341, 2012, 1021, 2925, 1092, 1021, 1021, 2272,
	2705, 3266, 3203, 3456, 1117, 1153, 2052, 3352, 900, 2573,
	901, 3358, 1371, 1372, 986, 963, 3553, 988, 1415, 2408,
	2293, 2294, 1090, 1481, 1414, 1124, 55, 643, 643, 655,
	3428, 1346, 1098, 1345, 639, 639, 1344, 959, 1115, 55,
	3620, 641, 641, 3476, 3463, 1371, 1372, 642, 642, 640,
	640, 1103, 1105, 851, 1122, 1307, 616, 1363, 1362, 3442,
	2986, 1089, 1095, 2536, 1168, 1169, 1170, 1167, 645, 143,
	3291, 2460, 1123, 1360, 174, 175, 3455, 176, 3202, 2934,
	2890, 1277, 143, 645, 1282, 1119, 1120, 51, 1208, 910,
	143, 1125, 143, 2566, 143, 1924, 645, 2057, 143, 143,
	961, 143, 143, 3430, 1239, 2228, 1665, 1666, 1667, 1668,
	1669, 1670, 1663, 1664, 143, 174, 175, 2983, 176, 2924,
	3707, 2347, 3152, 143, 1094, 985, 2264, 2068, 2221, 2835,
	55, 3250, 3296, 2762, 2764, 1139, 1201, 1305, 1141, 621,
	1597, 1398, 3597, 1662, 1367, 55, 656, 599, 599, 2570,
	2571, 1916, 118, 40, 1914, 2238, 599, 599, 55, 52,
	1430, 1430, 3010, 621, 2569, 2677, 1142, 2678, 2679, 122,
	123, 3081, 3475, 143, 3580, 1565, 1403, 960, 1314, 1315,
	1316, 1317, 1318, 3002, 1320, 647, 1459, 616, 143, 1131,
	1326, 1469, 1469, 1312, 2926, 2579, 2582, 2583, 2584, 2580,
	2581, 143, 196, 1203, 1204, 1205, 1206, 1250, 1251, 2452,
	2336, 599, 3006, 3007, 2259, 2042, 1437, 1319, 3619, 2231,
	3419, 3419, 3420, 3420, 2837, 1325, 1324, 1323, 1322, 651,
	3116, 904, 905, 906, 3365, 1432, 2674, 3003, 3414, 1428,
	1428, 1332, 2227, 3359, 3360, 2547, 1135, 2229, 2706, 2708,
	2709, 2710, 2707, 2054, 2055, 3354, 953, 3708, 1750, 3353,
	899, 1487, 1511, 2149, 2778, 2779, 2148, 1516, 1303, 1308,
	902, 1137, 1524, 2846, 2845, 1130, 3422, 3422, 1751, 1283,
	2696, 2697, 1749, 1140, 1143, 1424, 1425, 1281, 1012, 1017,
	1018, 2285, 2151, 2150, 1301, 1302, 865, 1551, 866, 3326,
	2763, 2230, 1342, 3723, 2171, 3730, 1658, 3421, 3421, 1136,
	1313, 1430, 1655, 1430, 1100, 953, 1657, 1654, 1656, 1660,
	1661, 953, 3590, 1166, 1659, 1566, 1531, 1410, 1412, 1355,
	1356, 1168, 1169, 1170, 1167, 1397, 1422, 1423, 1520, 955,
	1334, 1097, 954, 1528, 989, 1350, 1354, 1354, 1354, 989,
	2232, 3718, 3713, 698, 1340, 1342, 644, 869, 3039, 2945,
	1347, 1394, 2237, 1131, 2603, 2258, 2235, 1357, 1560, 1350,
	1350, 1097, 2427, 1388, 1389, 1376, 1377, 2867, 1379, 1380,
	1381, 1375, 1501, 1502, 1378, 1436, 1138, 1413, 3705, 3706,
	3035, 1482, 1490, 3119, 1493, 1494, 1640, 2316, 955, 3082,
	1460, 954, 1129, 2695, 955, 1495, 1496, 954, 868, 3093,
	1689, 1438, 871, 870, 1506, 1509, 2138, 1510, 2963, 2170,
	626, 2228, 2231, 1451, 2047, 3714, 1605, 1606, 1607, 1608,
	1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 3004, 964,
	2317, 1457, 1628, 1629, 1471, 1470, 2451, 3702, 1581, 1546,
	1547, 3015, 3013, 2102, 2160, 2900, 2101, 1643, 1644, 1645,
	1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1665, 1666,
	1667, 1668, 1669, 1670, 1663, 1664, 1100, 2161, 2162, 1584,
	1014, 1015, 1016, 1562, 2898, 1752, 1166, 2317, 2946, 1698,
	1459, 1600, 1731, 3039, 2604, 1761, 1430, 1765, 1766, 643,
	1768, 1769, 621, 2604, 2781, 1539, 639, 621, 1542, 1674,
	1430, 1559, 1534, 641, 910, 2204, 1278, 1788, 1556, 642,
	3668, 640, 2317, 1540, 1430, 1555, 2553, 3415, 3415, 1166,
	1398, 3416, 3512, 3667, 3640, 638, 2228, 2231, 1558, 1557,
	1554, 1550, 1734, 1575, 1965, 1567, 2541, 1022, 1023, 1549,
	1580, 2441, 1027, 2232, 2081, 1812, 2432, 1578, 2227, 2221,
	2226, 1688, 2224, 2229, 1819, 1819, 1619, 1398, 2347, 1398,
	1398, 2038, 1905, 621, 621, 2214, 1761, 1761, 3634, 2143,
	1430, 1891, 1892, 1904, 1168, 1169, 1170, 1167, 2137, 1760,
	1671, 1672, 3616, 1675, 3572, 1767, 2136, 599, 2109, 1430,
	2029, 1690, 1168, 1169, 1170, 1167, 3668, 3641, 1935, 1816,
	1757, 1758, 1759, 1333, 1697, 3547, 1699, 2230, 1700, 1701,
	1702, 1631, 1771, 1772, 1773, 1774, 3535, 621, 1761, 1430,
	2080, 1949, 1416, 621, 621, 621, 1954, 1955, 3715, 3163,
	2785, 1742, 2606, 1959, 1960, 1961, 1737, 3129, 2203, 1967,
	3495, 3438, 1940, 1679, 1680, 1681, 196, 2454, 1841, 196,
	196, 1703, 196, 2453, 3494, 3617, 1695, 3438, 2232, 1696,
	1886, 1887, 3489, 2227, 2221, 2226, 2445, 2224, 2229, 1168,
	1169, 1170, 1167, 1963, 1131, 1821, 1709, 1710, 2047, 2216,
	1626, 1627, 1918, 1932, 1933, 2209, 1732, 2097, 1738, 3536,
	3488, 3487, 1689, 1689, 2010, 1730, 855, 856, 857, 858,
	1689, 1689, 855, 856, 857, 858, 3486, 2023, 1910, 3466,
	1912, 1756, 1946, 3496, 1770, 2078, 1948, 1820, 2082, 1775,
	1930, 1931, 2230, 2028, 1925, 1970, 1784, 2193, 1800, 1128,
	1802, 1803, 1764, 1785, 1788, 3438, 2017, 1976, 1430, 2036,
	1979, 1980, 3465, 1982, 1809, 1957, 1780, 1951, 1952, 1953,
	1536, 1822, 1823, 1824, 1805, 1801, 1215, 3437, 1350, 3228,
	1793, 3176, 1795, 3438, 3438, 3142, 1810, 989, 3109, 3105,
	1116, 1086, 1354, 1441, 1081, 989, 3023, 1796, 1797, 3438,
	2757, 2516, 2047, 644, 1354, 1825, 1826, 3389, 2508, 3226,
	1934, 2030, 1183, 3724, 1806, 1807, 1893, 1890, 1909, 2968,
	1911, 2829, 2013, 1338, 1919, 3693, 1129, 1339, 2467, 2449,
	2437, 1678, 1677, 2256, 1817, 2047, 1764, 2407, 986, 1351,
	3067, 988, 2474, 1790, 1791, 867, 986, 1678, 1677, 988,
	3438, 2434, 2347, 3436, 3177, 1947, 2429, 2421, 3143, 1945,
	2419, 3110, 3106, 2005, 860, 1945, 1945, 1945, 3411, 3024,
	860, 2005, 1418, 2317, 1166, 3356, 1971, 1973, 2417, 2065,
	2066, 1166, 730, 740, 2415, 1578, 989, 3540, 2192, 3355,
	3341, 3297, 731, 3135, 732, 736, 739, 735, 733, 734,
	1990, 1166, 2193, 2430, 1704, 1705, 1706, 1707, 2139, 2019,
	1711, 1712, 1713, 1714, 1716, 1717, 1718, 1719, 1720, 1721,
	1722, 1723, 1724, 1725, 2435, 2116, 2016, 2115, 2014, 2430,
	2422, 3541, 2100, 2420, 2091, 2090, 2959, 986, 2089, 3327,
	988, 2027, 1715, 3040, 3033, 696, 643, 737, 621, 621,
	621, 2416, 2025, 639, 2046, 1543, 1352, 2416, 1708, 3028,
	641, 2193, 621, 621, 621, 621, 642, 2031, 640, 1382,
	2026, 1420, 1417, 872, 3155, 2190, 3153, 3025, 2940, 738,
	2727, 2138, 1421, 3328, 2060, 2196, 1398, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 1183, 2401, 1392, 1393, 1166, 1395,
	1166, 1399, 1400, 1401, 1619, 1166, 2577, 1166, 1166, 2069,
	2546, 1166, 1398, 2960, 2464, 2062, 742, 121, 3156, 2433,
	3154, 2338, 121, 1329, 1328, 1102, 2074, 2047, 1544, 2250,
	1635, 1974, 2075, 1446, 1447, 1448, 1449, 1450, 1635, 1452,
	1453, 1454, 1455, 1456, 1625, 1753, 2787, 1462, 1463, 1464,
	1186, 1187, 1188, 1189, 1190, 1183, 1474, 2961, 1974, 2061,
	1622, 1624, 1621, 1171, 1623, 3591, 2485, 1170, 1167, 1338,
	3368, 1200, 1167, 1339, 2257, 627, 3367, 2804, 121, 2666,
	1210, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1172, 2664,
	2321, 2321, 1904, 2321, 1080, 1076, 1077, 1078, 1079, 2642,
	2490, 2640, 2489, 2488, 2486, 1218, 2132, 2134, 2135, 3347,
	3698, 599, 599, 2140, 3697, 1168, 1169, 1170, 1167, 1100,
	1168, 1169, 1170, 1167, 3068, 1430, 621, 2063, 2064, 3298,
	3299, 3070, 3644, 2154, 1168, 1169, 1170, 1167, 1217, 2220,
	3721, 621, 1474, 2110, 2111, 2219, 2113, 1100, 2391, 616,
	1238, 1216, 2172, 2120, 1469, 2529, 1904, 2530, 3293, 2396,
	3127, 2398, 3615, 2717, 3614, 196, 1693, 989, 2715, 2487,
	2164, 2165, 2166, 2713, 2213, 1168, 1169, 1170, 1167, 2197,
	3542, 1694, 3491, 3479, 2181, 2182, 2183, 2184, 3469, 2334,
	987, 2335, 2702, 2325, 2323, 3459, 2327, 121, 3402, 3330,
	2200, 3329, 3720, 2848, 2342, 2206, 2210, 3168, 2207, 2339,
	2340, 3157, 121, 3126, 121, 3294, 2932, 3128, 986, 2447,
	2716, 988, 2036, 2233, 2234, 2714, 2239, 3134, 2825, 1430,
	2712, 1430, 2208, 1430, 1168, 1169, 1170, 1167, 1100, 1168,
	1169, 1170, 1167, 2799, 2798, 2411, 2466, 2700, 2476, 2701,
	1354, 1168, 1169, 1170, 1167, 2732, 2402, 2395, 2699, 2698,
	2403, 2205, 2576, 2690, 2684, 2349, 2918, 2683, 2300, 2860,
	2682, 2681, 1430, 2494, 1168, 1169, 1170, 1167, 1168, 1169,
	1170, 1167, 2329, 1475, 1239, 2542, 2423, 2142, 2501, 1993,
	1992, 1410, 1412, 1430, 1182, 1181, 1191, 1192, 1184, 1185,
	1186, 1187, 1188, 1189, 1190, 1183, 1991, 2491, 2492, 1987,
	2457, 2343, 2355, 2104, 1986, 2346, 1943, 2262, 1942, 2079,
	2265, 2266, 2267, 2268, 2269, 2270, 2271, 2093, 2859, 2274,
	2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284,
	1789, 2286, 2287, 2288, 2289, 2290, 2493, 2291, 1436, 2394,
	1100, 1428, 2505, 2506, 1100, 1168, 1169, 1170, 1167, 2503,
	1804, 1430, 2392, 1945, 2574, 1941, 1537, 2502, 1296, 3717,
	1761, 3716, 1428, 1084, 1468, 1468, 1811, 3260, 2602, 1814,
	1815, 2482, 3691, 2463, 2608, 2458, 2443, 2444, 3659, 3658,
	3655, 3524, 2439, 2092, 1168, 1169, 1170, 1167, 2472, 691,
	2618, 2448, 693, 2461, 3302, 2450, 3509, 692, 3500, 1100,
	2533, 2455, 3483, 2478, 3478, 2478, 3477, 2639, 3433, 3431,
	1168, 1169, 1170, 1167, 1100, 1100, 1100, 1819, 3403, 1083,
	1100, 3349, 2650, 2651, 2652, 2653, 1100, 2660, 3311, 2661,
	2662, 2592, 2663, 3625, 2665, 2468, 2469, 989, 3571, 2484,
	3528, 3280, 2588, 3279, 3258, 2660, 1525, 3281, 3256, 1168,
	1169, 1170, 1167, 3235, 2589, 3232, 3230, 2321, 2722, 3125,
	1168, 1169, 1170, 1167, 3269, 1578, 3124, 1168, 1169, 1170,
	1167, 2718, 2609, 3121, 1168, 1169, 1170, 1167, 1841, 599,
	3102, 1950, 3100, 3034, 1761, 1100, 1904, 1904, 1904, 1904,
	3030, 1168, 1169, 1170, 1167, 3021, 3020, 1100, 1904, 2941,
	2905, 2321, 2556, 2904, 2558, 2554, 3268, 2902, 2147, 2355,
	2637, 3559, 2599, 3216, 2637, 2555, 2633, 1430, 3555, 2839,
	1590, 1591, 1592, 1593, 1594, 2638, 2836, 2797, 621, 621,
	2572, 2644, 2771, 1168, 1169, 1170, 1167, 2601, 2620, 2607,
	1168, 1169, 1170, 1167, 2711, 2703, 8, 2693, 7, 1191,
	1192, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1183, 2622,
	2619, 1632, 2691, 2471, 2687, 1636, 1637, 1638, 1639, 2635,
	2686, 3097, 2641, 2685, 1673, 2543, 3424, 2753, 2500, 2648,
	2645, 2646, 1683, 2440, 196, 2649, 797, 796, 3423, 196,
	2600, 2656, 2863, 2617, 1996, 1989, 1745, 1764, 1168, 1169,
	1170, 1167, 2511, 2512, 1744, 1538, 2680, 1246, 2517, 1242,
	2692, 1689, 1241, 1689, 1087, 864, 2814, 3412, 3282, 1168,
	1169, 1170, 1167, 3267, 3148, 179, 2824, 168, 142, 2563,
	3147, 3146, 1430, 3118, 1735, 2831, 2723, 2862, 3114, 2610,
	3112, 121, 121, 987, 2741, 2742, 2743, 2744, 2615, 2616,
	2740, 3111, 2754, 2728, 2756, 2752, 2755, 3108, 3107, 2726,
	3101, 3099, 2740, 3083, 1168, 1169, 1170, 1167, 2772, 2769,
	3073, 1168, 1169, 1170, 1167, 2788, 3072, 3058, 3057, 2809,
	2792, 2782, 2969, 2908, 2897, 989, 2865, 2817, 2858, 2850,
	1734, 2849, 2843, 989, 173, 2813, 1792, 1501, 1502, 2765,
	1181, 1191, 1192, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1183, 1494, 2861, 2853, 1199, 2855, 2811, 2780, 2672, 2673,
	1808, 1495, 1496, 2818, 1506, 1509, 2552, 1510, 2786, 2828,
	2418, 2903, 2790, 2688, 2689, 2789, 2833, 2414, 1100, 1168,
	1169, 1170, 1167, 2413, 2921, 2121, 2114, 2807, 2108, 2107,
	2775, 2776, 2106, 2527, 2936, 2812, 2805, 2724, 2821, 621,
	2820, 2819, 2810, 2105, 2526, 2103, 2099, 2827, 2098, 2096,
	2087, 2950, 1100, 1735, 2525, 1100, 1100, 2084, 1735, 1735,
	1168, 1169, 1170, 1167, 1904, 2190, 2840, 2967, 2841, 2198,
	2199, 1168, 1169, 1170, 1167, 2847, 2083, 2077, 1995, 2201,
	2202, 1168, 1169, 1170, 1167, 2250, 2856, 2857, 1728, 1727,
	1726, 2944, 1692, 2854, 1691, 1682, 1442, 2992, 179, 2995,
	1440, 2995, 2995, 2632, 3643, 1236, 1100, 3554, 1975, 2899,
	3497, 1978, 3485, 3480, 1981, 1489, 3383, 1983, 3366, 2851,
	2852, 3362, 3340, 2953, 3569, 3016, 2956, 989, 3324, 989,
	2588, 3243, 989, 1430, 1430, 3241, 3012, 2979, 2981, 2901,
	1284, 3214, 3213, 3210, 3014, 3209, 2906, 3175, 3172, 3170,
	3137, 2975, 1168, 1169, 1170, 1167, 1500, 989, 1491, 1505,
	2907, 3567, 2524, 2937, 2085, 2965, 1508, 173, 1497, 2022,
	1336, 2719, 2952, 2643, 2595, 2954, 2955, 2943, 986, 2594,
	621, 988, 2590, 2557, 2528, 2921, 2962, 2991, 2966, 1168,
	1169, 1170, 1167, 2428, 3000, 2337, 1761, 1761, 2523, 2292,
	2220, 2974, 2522, 2191, 2163, 2141, 2219, 3017, 3018, 2521,
	1620, 173, 1428, 1428, 1956, 1755, 2996, 2997, 1741, 3673,
	2520, 1563, 2998, 3001, 2519, 1168, 1169, 1170, 1167, 1168,
	1169, 1170, 1167, 1523, 1498, 2393, 1168, 1169, 1170, 1167,
	2990, 1295, 1100, 1280, 2400, 1276, 2494, 1168, 1169, 1170,
	1167, 1168, 1169, 1170, 1167, 3071, 1275, 1168, 1169, 1170,
	1167, 2942, 1274, 1273, 1272, 2071, 1271, 1270, 1269, 2076,
	1268, 1267, 1439, 1266, 2872, 2873, 627, 1265, 1264, 1263,
	2874, 2875, 2876, 2877, 1262, 2878, 2879, 2880, 2881, 2882,
	2883, 2884, 2885, 2886, 2887, 2518, 1261, 3026, 621, 3027,
	3032, 3031, 3036, 3037, 3022, 2515, 3470, 1260, 121, 1259,
	2088, 1258, 1257, 3047, 3029, 1256, 1255, 1254, 2095, 1253,
	3051, 1252, 1168, 1169, 1170, 1167, 1249, 1248, 3054, 3055,
	3056, 1247, 1168, 1169, 1170, 1167, 1245, 1244, 1243, 2973,
	2112, 3060, 1240, 1233, 1232, 2117, 2118, 2119, 1230, 3066,
	2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131,
	1182, 1181, 1191, 1192, 1184, 1185, 1186, 1187, 1188, 1189,
	1190, 1183, 3338, 3084, 1229, 121, 1228, 1227, 1226, 3086,
	121, 3085, 2514, 3089, 1225, 1224, 3090, 2513, 1223, 1222,
	1221, 1220, 1219, 121, 1214, 1213, 1212, 1211, 1133, 1085,
	3103, 3565, 1945, 3043, 3044, 121, 3211, 2355, 3141, 1168,
	1169, 1170, 1167, 2507, 1168, 1169, 1170, 1167, 2195, 2177,
	3095, 1121, 3671, 2321, 1904, 3160, 1182, 1181, 1191, 1192,
	1184, 1185, 1186, 1187, 1188, 1189, 1190, 1183, 3630, 3117,
	1168, 1169, 1170, 1167, 3046, 989, 3120, 3178, 2578, 2348,
	1100, 1998, 989, 1132, 2478, 2749, 2747, 2470, 3245, 2992,
	2750, 2748, 2751, 1100, 2313, 2314, 3246, 3049, 3115, 3048,
	2746, 2745, 1330, 2611, 1100, 3345, 3225, 2438, 2614, 2497,
	1430, 1182, 1181, 1191, 1192, 1184, 1185, 1186, 1187, 1188,
	1189, 1190, 1183, 3132, 2473, 2431, 1761, 2939, 106, 57,
	1100, 2260, 56, 3169, 2823, 3171, 1168, 1169, 1170, 1167,
	3208, 1630, 3162, 1782, 1783, 3244, 1777, 1778, 1779, 3221,
	3092, 1168, 1169, 1170, 1167, 3159, 3158, 618, 3165, 196,
	2988, 2426, 2989, 3061, 3201, 3087, 3088, 1878, 1168, 1169,
	1170, 1167, 1100, 1483, 1735, 2462, 1735, 1533, 2304, 3215,
	3237, 3217, 1517, 3247, 3227, 2153, 3220, 623, 624, 1428,
	3224, 625, 2443, 2444, 1735, 1735, 1958, 1127, 2916, 2909,
	2621, 3238, 3229, 3231, 2596, 3234, 2212, 2186, 3233, 1786,
	1100, 1754, 3239, 622, 1159, 2309, 2312, 2313, 2314, 2310,
	3236, 2311, 2315, 3682, 2668, 3265, 3482, 1468, 1100, 1430,
	1430, 2669, 2670, 2671, 2950, 2309, 2312, 2313, 2314, 2310,
	3019, 2311, 2315, 1678, 1677, 3179, 3319, 2301, 3319, 2297,
	3251, 1889, 3261, 1391, 3262, 1291, 1292, 1390, 3218, 1289,
	1290, 1100, 3334, 1100, 1287, 1288, 3313, 3314, 3650, 2656,
	3053, 3337, 2774, 3339, 2152, 2436, 1285, 1286, 2024, 1343,
	1430, 3289, 1321, 1366, 3648, 3608, 3288, 3287, 3323, 3588,
	3587, 3585, 3531, 3498, 3397, 2740, 3396, 3335, 621, 3257,
	1100, 1100, 3312, 3307, 1100, 1100, 3316, 3104, 1428, 3309,
	3322, 3080, 989, 3079, 3064, 3138, 3139, 3140, 2245, 1903,
	2215, 3144, 3145, 3333, 1535, 3063, 2784, 3380, 1342, 3385,
	3342, 3208, 1788, 3343, 3394, 3162, 2826, 2740, 3350, 2475,
	3348, 2179, 2481, 3398, 3399, 3346, 3675, 3674, 3674, 2495,
	2496, 2086, 3284, 1118, 3675, 3201, 1430, 2498, 2499, 3309,
	3370, 3371, 3391, 3364, 3381, 3382, 3059, 855, 856, 857,
	858, 1097, 1097, 2504, 3386, 183, 3, 3390, 1358, 65,
	2, 3694, 3695, 1, 3418, 2534, 1739, 1293, 859, 3392,
	854, 1407, 121, 3305, 2330, 121, 121, 1936, 121, 1434,
	1743, 1590, 1735, 3249, 861, 3409, 2758, 3405, 2759, 3052,
	2761, 2548, 3413, 3417, 2043, 3451, 2729, 2295, 3445, 2167,
	2935, 1331, 903, 1684, 1548, 1011, 1584, 1111, 1584, 1545,
	3410, 1100, 1110, 1108, 1633, 1428, 744, 2001, 987, 2720,
	3439, 3468, 2694, 3278, 3474, 3336, 987, 3393, 3681, 3710,
	3642, 3684, 1561, 3446, 728, 3265, 3579, 3448, 3501, 3447,
	121, 3646, 3503, 3408, 2048, 3305, 3305, 2612, 2613, 3305,
	3305, 3464, 1164, 3460, 1100, 2806, 926, 3443, 785, 1430,
	755, 1231, 1526, 989, 1518, 2870, 2868, 1013, 754, 3131,
	2568, 2777, 3453, 1010, 927, 3481, 3270, 1984, 3271, 1182,
	1181, 1191, 1192, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1183, 3406, 1484, 2970, 1488, 2211, 3520, 3461, 2971, 2972,
	3369, 3550, 3344, 2984, 3514, 2629, 1512, 3545, 3173, 1100,
	3274, 3272, 3273, 662, 3490, 3499, 1915, 1199, 597, 971,
	3384, 1997, 663, 2194, 3532, 3599, 3484, 883, 2176, 884,
	876, 2586, 2585, 3492, 1601, 1173, 1618, 3527, 1428, 2888,
	2889, 1209, 3526, 700, 3523, 2073, 2565, 3196, 2770, 64,
	63, 62, 3549, 61, 1966, 3534, 1100, 204, 746, 203,
	3300, 3576, 3686, 726, 1430, 3543, 725, 3574, 3577, 724,
	723, 722, 721, 3387, 2308, 2306, 1584, 3388, 3548, 2305,
	3578, 1899, 1898, 1964, 2948, 3564, 3566, 3568, 3570, 3557,
	2659, 2654, 1830, 1828, 2647, 2240, 673, 672, 679, 669,
	2247, 1827, 3627, 3582, 1430, 3560, 3584, 3451, 676, 677,
	3561, 678, 682, 3361, 2704, 664, 3563, 3264, 1776, 3305,
	2236, 3038, 1847, 3618, 2675, 687, 3607, 1844, 1843, 3626,
	2667, 3609, 3357, 3611, 3351, 1875, 3050, 3449, 3573, 3612,
	3613, 3318, 3180, 1428, 3181, 3187, 2185, 1036, 1032, 1034,
	1035, 2791, 1033, 2793, 2483, 2217, 2911, 2159, 2158, 2156,
	3635, 2155, 3636, 1306, 3637, 3519, 3638, 3649, 3639, 3651,
	3652, 3595, 1735, 3645, 3305, 3283, 3647, 1735, 3610, 1100,
	2353, 3514, 3654, 1428, 2351, 2022, 1082, 3045, 3041, 2009,
	2020, 2822, 1900, 1896, 2178, 3426, 1781, 3663, 3474, 877,
	1662, 2174, 158, 50, 3665, 3666, 3664, 103, 156, 49,
	92, 91, 3680, 3672, 3688, 3670, 102, 3687, 3669, 154,
	2842, 3305, 48, 188, 187, 190, 189, 186, 2404, 2405,
	185, 3699, 3692, 1100, 3676, 3677, 3678, 3679, 914, 1472,
	3493, 184, 3589, 3700, 2864, 3549, 3701, 3703, 3321, 849,
	39, 38, 34, 3709, 3712, 13, 12, 35, 22, 21,
	1552, 20, 179, 54, 168, 142, 26, 32, 31, 114,
	113, 30, 112, 111, 110, 109, 108, 3719, 29, 19,
	169, 43, 42, 41, 9, 3688, 3726, 161, 3687, 3725,
	101, 170, 99, 28, 100, 3712, 3727, 3533, 2324, 97,
	98, 3731, 3537, 3538, 95, 93, 76, 912, 913, 75,
	119, 74, 89, 665, 667, 666, 88, 87, 953, 86,
	85, 84, 82, 671, 83, 107, 925, 73, 72, 71,
	70, 173, 69, 3558, 96, 675, 94, 80, 90, 81,
	79, 78, 690, 77, 3661, 68, 67, 66, 3161, 668,
	140, 139, 138, 137, 136, 134, 3164, 135, 133, 132,
	131, 130, 1903, 1658, 900, 129, 901, 128, 44, 1655,
	45, 121, 46, 1657, 1654, 1656, 1660, 1661, 47, 150,
	149, 1659, 151, 153, 155, 152, 157, 2999, 147, 145,
	148, 146, 144, 59, 11, 104, 18, 25, 1584, 4,
	0, 955, 881, 1194, 954, 1198, 0, 0, 124, 125,
	0, 126, 127, 0, 0, 0, 895, 0, 891, 0,
	0, 1195, 1197, 1193, 0, 1196, 1182, 1181, 1191, 1192,
	1184, 1185, 1186, 1187, 1188, 1189, 1190, 1183, 0, 0,
	0, 939, 0, 0, 0, 0, 0, 0, 0, 915,
	0, 3656, 3657, 0, 0, 0, 0, 0, 670, 674,
	680, 0, 681, 683, 2070, 0, 684, 685, 686, 0,
	0, 688, 689, 0, 873, 0, 917, 0, 1876, 141,
	167, 177, 0, 105, 0, 179, 0, 0, 1182, 1181,
	1191, 1192, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1183,
	0, 166, 160, 159, 0, 0, 0, 3317, 60, 0,
	0, 0, 0, 1878, 1643, 1644, 1645, 1646, 1647, 1648,
	1649, 1650, 1651, 1652, 1653, 1665, 1666, 1667, 1668, 1669,
	1670, 1663, 1664, 0, 0, 0, 0, 0, 0, 938,
	937, 3331, 3332, 0, 0, 897, 0, 890, 0, 0,
	0, 0, 0, 0, 173, 0, 894, 893, 0, 0,
	0, 936, 0, 0, 1853, 0, 0, 0, 0, 162,
	163, 164, 911, 875, 0, 0, 0, 882, 121, 0,
	0, 0, 0, 916, 948, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 889, 0, 0,
	171, 0, 0, 0, 3096, 0, 0, 944, 0, 0,
	0, 3098, 0, 0, 0, 0, 899, 0, 0, 0,
	115, 888, 0, 0, 165, 887, 116, 0, 0, 0,
	0, 874, 1869, 0, 0, 880, 0, 0, 0, 0,
	0, 0, 3113, 945, 949, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1876, 0, 878, 0, 0,
	1837, 0, 0, 933, 0, 931, 935, 952, 0, 0,
	0, 932, 929, 928, 0, 934, 919, 920, 918, 921,
	922, 923, 924, 117, 950, 0, 951, 0, 0, 0,
	1878, 1846, 0, 0, 898, 0, 53, 946, 947, 0,
	1879, 1880, 1903, 1903, 1903, 1903, 0, 0, 0, 0,
	0, 0, 1857, 0, 1903, 0, 0, 0, 0, 0,
	879, 0, 0, 1863, 0, 0, 1845, 0, 0, 0,
	0, 0, 0, 0, 942, 0, 0, 0, 0, 0,
	941, 1853, 0, 1851, 1885, 55, 0, 1852, 1854, 1856,
	0, 1858, 1859, 1860, 1864, 1865, 1866, 1868, 1871, 1872,
	1873, 0, 0, 0, 0, 0, 0, 0, 1861, 1870,
	1862, 0, 0, 1735, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 1735, 0, 0, 3240, 143, 0,
	3242, 0, 0, 51, 0, 0, 0, 896, 0, 0,
	121, 0, 1877, 0, 0, 121, 0, 3248, 0, 1869,
	1182, 1181, 1191, 1192, 1184, 1185, 1186, 1187, 1188, 1189,
	1190, 1183, 0, 0, 0, 0, 121, 0, 0, 0,
	0, 0, 940, 0, 121, 0, 885, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1874, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 40,
	0, 0, 0, 1850, 0, 52, 0, 0, 0, 5,
	1849, 0, 0, 0, 0, 122, 123, 0, 0, 0,
	1836, 1838, 1835, 0, 1832, 0, 0, 0, 0, 1857,
	0, 0, 0, 0, 1867, 0, 0, 0, 0, 0,
	1863, 0, 0, 1855, 2866, 0, 0, 0, 1848, 0,
	1831, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1851, 1885, 0, 0, 1852, 1854, 1856, 0, 1858, 1859,
	1860, 1864, 1865, 1866, 1868, 1871, 1872, 1873, 0, 0,
	0, 0, 0, 0, 0, 1861, 1870, 1862, 0, 0,
	0, 0, 0, 0, 1054, 0, 0, 1840, 1182, 1181,
	1191, 1192, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1877,
	0, 0, 0, 0, 0, 0, 0, 0, 987, 0,
	121, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	1903, 0, 0, 0, 0, 1833, 1834, 0, 0, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 1874, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1850, 0, 0, 0, 0, 0, 0, 1849, 0, 0,
	3440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1054, 0, 0, 0, 0, 0, 0, 0,
	0, 1867, 0, 0, 0, 1040, 0, 0, 0, 0,
	1855, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1882, 1881, 1062, 1066, 1068, 1070, 1072,
	1073, 1075, 0, 1080, 1076, 1077, 1078, 1079, 0, 1057,
	1058, 1059, 1060, 1038, 1039, 1063, 0, 1041, 0, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1055,
	1051, 1052, 1061, 0, 0, 0, 0, 0, 0, 0,
	1065, 1067, 1069, 1071, 1074, 0, 1842, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1218, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1056, 0,
	0, 0, 0, 1040, 0, 0, 0, 1030, 1884, 0,
	0, 1883, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1062, 1066, 1068, 1070, 1072, 1073, 1075,
	0, 1080, 1076, 1077, 1078, 1079, 0, 1057, 1058, 1059,
	1060, 1038, 1039, 1063, 3556, 1041, 0, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1053, 1055, 1051, 1052,
	1061, 0, 0, 0, 0, 0, 0, 0, 1065, 1067,
	1069, 1071, 1074, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3623, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 2479, 2480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 762, 0, 0, 0,
	0, 0, 0, 0, 0, 366, 0, 491, 524, 513,
	596, 479, 0, 0, 0, 0, 0, 0, 715, 0,
	1903, 0, 306, 0, 3623, 336, 528, 510, 520, 511,
	496, 497, 498, 505, 316, 499, 500, 501, 471, 502,
	472, 503, 504, 753, 527, 478, 397, 350, 545, 544,
	0, 0, 820, 828, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 707, 0, 0, 743, 797, 796,
	730, 740, 3623, 0, 279, 202, 473, 592, 475, 474,
	731, 0, 732, 736, 739, 735, 733, 734, 0, 812,
	0, 0, 0, 0, 0, 0, 699, 711, 0, 716,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1064, 0, 0, 708, 709, 121, 0, 0, 3729, 763,
	0, 710, 0, 0, 758, 737, 741, 0, 0, 0,
	0, 269, 402, 419, 280, 393, 432, 285, 400, 275,
	365, 389, 0, 0, 271, 417, 399, 347, 326, 327,
	270, 0, 384, 304, 318, 301, 363, 738, 761, 765,
	300, 834, 759, 427, 273, 0, 426, 362, 413, 418,
	348, 342, 272, 415, 346, 341, 330, 308, 835, 331,
	332, 322, 374, 340, 375, 323, 352, 351, 353, 0,
	0, 0, 0, 121, 455, 456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 756,
	0, 589, 0, 429, 0, 0, 818, 0, 1064, 0,
	401, 0, 0, 333, 0, 0, 0, 760, 0, 387,
	368, 831, 0, 0, 385, 338, 414, 376, 420, 403,
	428, 381, 377, 264, 404, 303, 349, 276, 278, 298,
	305, 307, 309, 310, 358, 359, 371, 392, 405, 406,
	407, 302, 286, 386, 287, 320, 288, 265, 294, 292,
	295, 394, 296, 267, 372, 411, 0, 315, 382, 345,
	268, 344, 373, 410, 409, 277, 436, 442, 443, 532,
	0, 448, 610, 611, 612, 457, 462, 463, 464, 466,
	467, 468, 469, 533, 550, 517, 487, 450, 541, 484,
	488, 489, 553, 1686, 1685, 1687, 441, 334, 335, 0,
	313, 261, 262, 606, 816, 364, 555, 588, 480, 0,
	830, 811, 813, 814, 817, 821, 822, 823, 824, 825,
	827, 829, 833, 605, 0, 534, 549, 608, 548, 602,
	370, 0, 391, 546, 493, 0, 538, 512, 0, 539,
	508, 543, 0, 482, 121, 398, 422, 434, 451, 454,
	483, 568, 569, 570, 266, 453, 572, 573, 574, 575,
	576, 577, 578, 571, 832, 515, 492, 518, 433, 495,
	494, 0, 0, 529, 764, 530, 531, 354, 355, 356,
	357, 819, 556, 284, 452, 380, 0, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 521, 522, 519, 613,
	0, 579, 580, 0, 0, 446, 447, 312, 319, 465,
	321, 283, 369, 314, 431, 328, 0, 458, 523, 459,
	582, 585, 583, 584, 361, 324, 325, 395, 329, 339,
	383, 430, 367, 388, 281, 421, 396, 343, 509, 536,
	841, 815, 840, 842, 843, 839, 844, 845, 826, 720,
	0, 771, 837, 836, 838, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 563, 562, 561,
	560, 559, 558, 557, 0, 0, 506, 408, 293, 255,
	289, 290, 297, 603, 600, 412, 604, 0, 263, 486,
	337, 0, 378, 311, 551, 552, 0, 0, 804, 778,
	779, 780, 717, 781, 775, 776, 718, 777, 805, 769,
	801, 802, 745, 772, 782, 800, 783, 803, 806, 807,
	846, 847, 789, 773, 227, 848, 786, 808, 799, 798,
	784, 770, 809, 810, 752, 747, 787, 788, 774, 792,
	793, 794, 719, 766, 767, 768, 790, 791, 748, 749,
	750, 751, 0, 0, 0, 437, 438, 439, 461, 423,
	485, 601, 0, 0, 0, 0, 0, 0, 0, 535,
	547, 581, 0, 590, 591, 593, 595, 795, 762, 607,
	476, 477, 587, 0, 712, 0, 0, 366, 0, 491,
	524, 513, 596, 479, 0, 0, 0, 0, 0, 0,
	715, 0, 0, 0, 306, 1736, 0, 336, 528, 510,
	520, 511, 496, 497, 498, 505, 316, 499, 500, 501,
	471, 502, 472, 503, 504, 753, 527, 478, 397, 350,
	545, 544, 0, 0, 820, 828, 0, 0, 0, 0,
	0, 0, 0, 1927, 0, 0, 707, 0, 0, 743,
	797, 796, 730, 740, 0, 0, 279, 202, 473, 592,
	475, 474, 731, 0, 732, 736, 739, 735, 733, 734,
	0, 812, 0, 0, 0, 0, 0, 0, 699, 711,
	0, 716, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 708, 709, 0, 0, 0,
	0, 763, 0, 710, 0, 0, 1928, 737, 741, 0,
	0, 0, 0, 269, 402, 419, 280, 393, 432, 285,
	400, 275, 365, 389, 0, 0, 271, 417, 399, 347,
	326, 327, 270, 0, 384, 304, 318, 301, 363, 738,
	761, 765, 300, 834, 759, 427, 273, 0, 426, 362,
	413, 418, 348, 342, 272, 415, 346, 341, 330, 308,
	835, 331, 332, 322, 374, 340, 375, 323, 352, 351,
	353, 0, 0, 0, 0, 0, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 756, 0, 589, 0, 429, 0, 0, 818, 0,
	0, 0, 401, 0, 0, 333, 0, 0, 0, 760,
	0, 387, 368, 831, 0, 0, 385, 338, 414, 376,
	420, 403, 428, 381, 377, 264, 404, 303, 349, 276,
	278, 298, 305, 307, 309, 310, 358, 359, 371, 392,
	405, 406, 407, 302, 286, 386, 287, 320, 288, 265,
	294, 292, 295, 394, 296, 267, 372, 411, 0, 315,
	382, 345, 268, 344, 373, 410, 409, 277, 436, 442,
	443, 532, 0, 448, 610, 611, 612, 457, 462, 463,
	464, 466, 467, 468, 469, 533, 550, 517, 487, 450,
	541, 484, 488, 489, 553, 0, 0, 0, 441, 334,
	335, 0, 313, 261, 262, 606, 816, 364, 555, 588,
	480, 0, 830, 811, 813, 814, 817, 821, 822, 823,
	824, 825, 827, 829, 833, 605, 0, 534, 549, 608,
	548, 602, 370, 0, 391, 546, 493, 0, 538, 512,
	0, 539, 508, 543, 0, 482, 0, 398, 422, 434,
	451, 454, 483, 568, 569, 570, 266, 453, 572, 573,
	574, 575, 576, 577, 578, 571, 832, 515, 492, 518,
	433, 495, 494, 0, 0, 529, 764, 530, 531, 354,
	355, 356, 357, 819, 556, 284, 452, 380, 0, 516,
	0, 0, 0, 0, 0, 0, 0, 0, 521, 522,
	519, 613, 0, 579, 580, 0, 0, 446, 447, 312,
	319, 465, 321, 283, 369, 314, 431, 328, 0, 458,
	523, 459, 582, 585, 583, 584, 361, 324, 325, 395,
	329, 339, 383, 430, 367, 388, 281, 421, 396, 343,
	509, 536, 841, 815, 840, 842, 843, 839, 844, 845,
	826, 720, 0, 771, 837, 836, 838, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 563,
	562, 561, 560, 559, 558, 557, 0, 0, 506, 408,
	293, 255, 289, 290, 297, 603, 600, 412, 604, 0,
	263, 486, 337, 0, 378, 311, 551, 552, 0, 0,
	804, 778, 779, 780, 717, 781, 775, 776, 718, 777,
	805, 769, 801, 802, 745, 772, 782, 800, 783, 803,
	806, 807, 846, 847, 789, 773, 227, 848, 786, 808,
	799, 798, 784, 770, 809, 810, 752, 747, 787, 788,
	774, 792, 793, 794, 719, 766, 767, 768, 790, 791,
	748, 749, 750, 751, 0, 0, 0, 437, 438, 439,
	461, 423, 485, 601, 0, 0, 0, 0, 0, 0,
	0, 535, 547, 581, 0, 590, 591, 593, 595, 795,
	0, 607, 476, 477, 587, 0, 712, 179, 762, 0,
	0, 0, 0, 0, 0, 0, 0, 366, 0, 491,
	524, 513, 596, 479, 0, 0, 0, 0, 0, 0,
	715, 0, 0, 0, 306, 0, 0, 336, 528, 510,
	520, 511, 496, 497, 498, 505, 316, 499, 500, 501,
	471, 502, 472, 503, 504, 1202, 527, 478, 397, 350,
	545, 544, 0, 0, 820, 828, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 707, 0, 0, 743,
	797, 796, 730, 740, 0, 0, 279, 202, 473, 592,
	475, 474, 731, 0, 732, 736, 739, 735, 733, 734,
	0, 812, 0, 0, 0, 0, 0, 0, 699, 711,
	0, 716, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 708, 709, 0, 0, 0,
	0, 763, 0, 710, 0, 0, 758, 737, 741, 0,
	0, 0, 0, 269, 402, 419, 280, 393, 432, 285,
	400, 275, 365, 389, 0, 0, 271, 417, 399, 347,
	326, 327, 270, 0, 384, 304, 318, 301, 363, 738,
	761, 765, 300, 834, 759, 427, 273, 0, 426, 362,
	413, 418, 348, 342, 272, 415, 346, 341, 330, 308,
	835, 331, 332, 322, 374, 340, 375, 323, 352, 351,
	353, 0, 0, 0, 0, 0, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 756, 0, 589, 0, 429, 0, 0, 818, 0,
	0, 0, 401, 0, 0, 333, 0, 0, 0, 760,
	0, 387, 368, 831, 0, 0, 385, 338, 414, 376,
	420, 403, 428, 381, 377, 264, 404, 303, 349, 276,
	278, 298, 305, 307, 309, 310, 358, 359, 371, 392,
	405, 406, 407, 302, 286, 386, 287, 320, 288, 265,
	294, 292, 295, 394, 296, 267, 372, 411, 0, 315,
	382, 345, 268, 344, 373, 410, 409, 277, 436, 442,
	443, 532, 0, 448, 610, 611, 612, 457, 462, 463,
	464, 466, 467, 468, 469, 533, 550, 517, 487, 450,
	541, 484, 488, 489, 553, 0, 0, 0, 441, 334,
	335, 0, 313, 261, 262, 606, 816, 364, 555, 588,
	480, 0, 830, 811, 813, 814, 817, 821, 822, 823,
	824, 825, 827, 829, 833, 605, 0, 534, 549, 608,
	548, 602, 370, 0, 391, 546, 493, 0, 538, 512,
	0, 539, 508, 543, 0, 482, 0, 398, 422, 434,
	451, 454, 483, 568, 569, 570, 266, 453, 572, 573,
	574, 575, 576, 577, 578, 571, 832, 515, 492, 518,
	433, 495, 494, 0, 0, 529, 764, 530, 531, 354,
	355, 356, 357, 819, 556, 284, 452, 380, 0, 516,
	0, 0, 0, 0, 0, 0, 0, 0, 521, 522,
	519, 613, 0, 579, 580, 0, 0, 446, 447, 312,
	319, 465, 321, 283, 369, 314, 431, 328, 0, 458,
	523, 459, 582, 585, 583, 584, 361, 324, 325, 395,
	329, 339, 383, 430, 367, 388, 281, 421, 396, 343,
	509, 536, 841, 815, 840, 842, 843, 839, 844, 845,
	826, 720, 0, 771, 837, 836, 838, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 563,
	562, 561, 560, 559, 558, 557, 0, 0, 506, 408,
	293, 255, 289, 290, 297, 603, 600, 412, 604, 0,
	263, 486, 337, 143, 378, 311, 551, 552, 0, 0,
	804, 778, 779, 780, 717, 781, 775, 776, 718, 777,
	805, 769, 801, 802, 745, 772, 782, 800, 783, 803,
	806, 807, 846, 847, 789, 773, 227, 848, 786, 808,
	799, 798, 784, 770, 809, 810, 752, 747, 787, 788,
	774, 792, 793, 794, 719, 766, 767, 768, 790, 791,
	748, 749, 750, 751, 0, 0, 0, 437, 438, 439,
	461, 423, 485, 601, 0, 0, 0, 0, 0, 0,
	0, 535, 547, 581, 0, 590, 591, 593, 595, 795,
	762, 607, 476, 477, 587, 0, 712, 0, 0, 366,
	0, 491, 524, 513, 596, 479, 0, 0, 0, 0,
	0, 0, 715, 0, 0, 0, 306, 3728, 0, 336,
	528, 510, 520, 511, 496, 497, 498, 505, 316, 499,
	500, 501, 471, 502, 472, 503, 504, 753, 527, 478,
	397, 350, 545, 544, 0, 0, 820, 828, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 707, 0,
	0, 743, 797, 796, 730, 740, 0, 0, 279, 202,
	473, 592, 475, 474, 731, 0, 732, 736, 739, 735,
	733, 734, 0, 812, 0, 0, 0, 0, 0, 0,
	699, 711, 0, 716, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 708, 709, 0,
	0, 0, 0, 763, 0, 710, 0, 0, 758, 737,
	741, 0, 0, 0, 0, 269, 402, 419, 280, 393,
	432, 285, 400, 275, 365, 389, 0, 0, 271, 417,
	399, 347, 326, 327, 270, 0, 384, 304, 318, 301,
	363, 738, 761, 765, 300, 834, 759, 427, 273, 0,
	426, 362, 413, 418, 348, 342, 272, 415, 346, 341,
	330, 308, 835, 331, 332, 322, 374, 340, 375, 323,
	352, 351, 353, 0, 0, 0, 0, 0, 455, 456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 756, 0, 589, 0, 429, 0, 0,
	818, 0, 0, 0, 401, 0, 0, 333, 0, 0,
	0, 760, 0, 387, 368, 831, 0, 0, 385, 338,
	414, 376, 420, 403, 428, 381, 377, 264, 404, 303,
	349, 276, 278, 298, 305, 307, 309, 310, 358, 359,
	371, 392, 405, 406, 407, 302, 286, 386, 287, 320,
	288, 265, 294, 292, 295, 394, 296, 267, 372, 411,
	0, 315, 382, 345, 268, 344, 373, 410, 409, 277,
	436, 442, 443, 532, 0, 448, 610, 611, 612, 457,
	462, 463, 464, 466, 467, 468, 469, 533, 550, 517,
	487, 450, 541, 484, 488, 489, 553, 0, 0, 0,
	441, 334, 335, 0, 313, 261, 262, 606, 816, 364,
	555, 588, 480, 0, 830, 811, 813, 814, 817, 821,
	822, 823, 824, 825, 827, 829, 833, 605, 0, 534,
	549, 608, 548, 602, 370, 0, 391, 546, 493, 0,
	538, 512, 0, 539, 508, 543, 0, 482, 0, 398,
	422, 434, 451, 454, 483, 568, 569, 570, 266, 453,
	572, 573, 574, 575, 576, 577, 578, 571, 832, 515,
	492, 518, 433, 495, 494, 0, 0, 529, 764, 530,
	531, 354, 355, 356, 357, 819, 556, 284, 452, 380,
	0, 516, 0, 0, 0, 0, 0, 0, 0, 0,
	521, 522, 519, 613, 0, 579, 580, 0, 0, 446,
	447, 312, 319, 465, 321, 283, 369, 314, 431, 328,
	0, 458, 523, 459, 582, 585, 583, 584, 361, 324,
	325, 395, 329, 339, 383, 430, 367, 388, 281, 421,
	396, 343, 509, 536, 841, 815, 840, 842, 843, 839,
	844, 845, 826, 720, 0, 771, 837, 836, 838, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	564, 563, 562, 561, 560, 559, 558, 557, 0, 0,
	506, 408, 293, 255, 289, 290, 297, 603, 600, 412,
	604, 0, 263, 486, 337, 0, 378, 311, 551, 552,
	0, 0, 804, 778, 779, 780, 717, 781, 775, 776,
	718, 777, 805, 769, 801, 802, 745, 772, 782, 800,
	783, 803, 806, 807, 846, 847, 789, 773, 227, 848,
	786, 808, 799, 798, 784, 770, 809, 810, 752, 747,
	787, 788, 774, 792, 793, 794, 719, 766, 767, 768,
	790, 791, 748, 749, 750, 751, 0, 0, 0, 437,
	438, 439, 461, 423, 485, 601, 0, 0, 0, 0,
	0, 0, 0, 535, 547, 581, 0, 590, 591, 593,
	595, 795, 762, 607, 476, 477, 587, 0, 712, 0,
	0, 366, 0, 491, 524, 513, 596, 479, 0, 0,
	0, 0, 0, 0, 715, 0, 0, 0, 306, 0,
	0, 336, 528, 510, 520, 511, 496, 497, 498, 505,
	316, 499, 500, 501, 471, 502, 472, 503, 504, 753,
	527, 478, 397, 350, 545, 544, 0, 0, 820, 828,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	707, 0, 0, 743, 797, 796, 730, 740, 0, 0,
	279, 202, 473, 592, 475, 474, 731, 0, 732, 736,
	739, 735, 733, 734, 0, 812, 0, 0, 0, 0,
	0, 0, 699, 711, 0, 716, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 708,
	709, 0, 0, 0, 0, 763, 0, 710, 0, 0,
	758, 737, 741, 0, 0, 0, 0, 269, 402, 419,
	280, 393, 432, 285, 400, 275, 365, 389, 0, 0,
	271, 417, 399, 347, 326, 327, 270, 0, 384, 304,
	318, 301, 363, 738, 761, 765, 300, 834, 759, 427,
	273, 0, 426, 362, 413, 418, 348, 342, 272, 415,
	346, 341, 330, 308, 835, 331, 332, 322, 374, 340,
	375, 323, 352, 351, 353, 0, 0, 0, 0, 0,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 756, 0, 589, 0, 429,
	0, 0, 818, 0, 0, 0, 401, 0, 0, 333,
	0, 0, 0, 760, 0, 387, 368, 831, 3624, 0,
	385, 338, 414, 376, 420, 403, 428, 381, 377, 264,
	404, 303, 349, 276, 278, 298, 305, 307, 309, 310,
	358, 359, 371, 392, 405, 406, 407, 302, 286, 386,
	287, 320, 288, 265, 294, 292, 295, 394, 296, 267,
	372, 411, 0, 315, 382, 345, 268, 344, 373, 410,
	409, 277, 436, 442, 443, 532, 0, 448, 610, 611,
	612, 457, 462, 463, 464, 466, 467, 468, 469, 533,
	550, 517, 487, 450, 541, 484, 488, 489, 553, 0,
	0, 0, 441, 334, 335, 0, 313, 261, 262, 606,
	816, 364, 555, 588, 480, 0, 830, 811, 813, 814,
	817, 821, 822, 823, 824, 825, 827, 829, 833, 605,
	0, 534, 549, 608, 548, 602, 370, 0, 391, 546,
	493, 0, 538, 512, 0, 539, 508, 543, 0, 482,
	0, 398, 422, 434, 451, 454, 483, 568, 569, 570,
	266, 453, 572, 573, 574, 575, 576, 577, 578, 571,
	832, 515, 492, 518, 433, 495, 494, 0, 0, 529,
	764, 530, 531, 354, 355, 356, 357, 819, 556, 284,
	452, 380, 0, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 521, 522, 519, 613, 0, 579, 580, 0,
	0, 446, 447, 312, 319, 465, 321, 283, 369, 314,
	431, 328, 0, 458, 523, 459, 582, 585, 583, 584,
	361, 324, 325, 395, 329, 339, 383, 430, 367, 388,
	281, 421, 396, 343, 509, 536, 841, 815, 840, 842,
	843, 839, 844, 845, 826, 720, 0, 771, 837, 836,
	838, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 563, 562, 561, 560, 559, 558, 557,
	0, 0, 506, 408, 293, 255, 289, 290, 297, 603,
	600, 412, 604, 0, 263, 486, 337, 0, 378, 311,
	551, 552, 0, 0, 804, 778, 779, 780, 717, 781,
	775, 776, 718, 777, 805, 769, 801, 802, 745, 772,
	782, 800, 783, 803, 806, 807, 846, 847, 789, 773,
	227, 848, 786, 808, 799, 798, 784, 770, 809, 810,
	752, 747, 787, 788, 774, 792, 793, 794, 719, 766,
	767, 768, 790, 791, 748, 749, 750, 751, 0, 0,
	0, 437, 438, 439, 461, 423, 485, 601, 0, 0,
	0, 0, 0, 0, 0, 535, 547, 581, 0, 590,
	591, 593, 595, 795, 762, 607, 476, 477, 587, 0,
	712, 0, 0, 366, 0, 491, 524, 513, 596, 479,
	0, 0, 0, 0, 0, 0, 715, 0, 0, 0,
	306, 1736, 0, 336, 528, 510, 520, 511, 496, 497,
	498, 505, 316, 499, 500, 501, 471, 502, 472, 503,
	504, 753, 527, 478, 397, 350, 545, 544, 0, 0,
	820, 828, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 707, 0, 0, 743, 797, 796, 730, 740,
	0, 0, 279, 202, 473, 592, 475, 474, 731, 0,
	732, 736, 739, 735, 733, 734, 0, 812, 0, 0,
	0, 0, 0, 0, 699, 711, 0, 716, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 708, 709, 0, 0, 0, 0, 763, 0, 710,
	0, 0, 758, 737, 741, 0, 0, 0, 0, 269,
	402, 419, 280, 393, 432, 285, 400, 275, 365, 389,
	0, 0, 271, 417, 399, 347, 326, 327, 270, 0,
	384, 304, 318, 301, 363, 738, 761, 765, 300, 834,
	759, 427, 273, 0, 426, 362, 413, 418, 348, 342,
	272, 415, 346, 341, 330, 308, 835, 331, 332, 322,
	374, 340, 375, 323, 352, 351, 353, 0, 0, 0,
	0, 0, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 756, 0, 589,
	0, 429, 0, 0, 818, 0, 0, 0, 401, 0,
	0, 333, 0, 0, 0, 760, 0, 387, 368, 831,
	0, 0, 385, 338, 414, 376, 420, 403, 428, 381,
	377, 264, 404, 303, 349, 276, 278, 298, 305, 307,
	309, 310, 358, 359, 371, 392, 405, 406, 407, 302,
	286, 386, 287, 320, 288, 265, 294, 292, 295, 394,
	296, 267, 372, 411, 0, 315, 382, 345, 268, 344,
	373, 410, 409, 277, 436, 442, 443, 532, 0, 448,
	610, 611, 612, 457, 462, 463, 464, 466, 467, 468,
	469, 533, 550, 517, 487, 450, 541, 484, 488, 489,
	553, 0, 0, 0, 441, 334, 335, 0, 313, 261,
	262, 606, 816, 364, 555, 588, 480, 0, 830, 811,
	813, 814, 817, 821, 822, 823, 824, 825, 827, 829,
	833, 605, 0, 534, 549, 608, 548, 602, 370, 0,
	391, 546, 493, 0, 538, 512, 0, 539, 508, 543,
	0, 482, 0, 398, 422, 434, 451, 454, 483, 568,
	569, 570, 266, 453, 572, 573, 574, 575, 576, 577,
	578, 571, 832, 515, 492, 518, 433, 495, 494, 0,
	0, 529, 764, 530, 531, 354, 355, 356, 357, 819,
	556, 284, 452, 380, 0, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 521, 522, 519, 613, 0, 579,
	580, 0, 0, 446, 447, 312, 319, 465, 321, 283,
	369, 314, 431, 328, 0, 458, 523, 459, 582, 585,
	583, 584, 361, 324, 325, 395, 329, 339, 383, 430,
	367, 388, 281, 421, 396, 343, 509, 536, 841, 815,
	840, 842, 843, 839, 844, 845, 826, 720, 0, 771,
	837, 836, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 563, 562, 561, 560, 559,
	558, 557, 0, 0, 506, 408, 293, 255, 289, 290,
	297, 603, 600, 412, 604, 0, 263, 486, 337, 0,
	378, 311, 551, 552, 0, 0, 804, 778, 779, 780,
	717, 781, 775, 776, 718, 777, 805, 769, 801, 802,
	745, 772, 782, 800, 783, 803, 806, 807, 846, 847,
	789, 773, 227, 848, 786, 808, 799, 798, 784, 770,
	809, 810, 752, 747, 787, 788, 774, 792, 793, 794,
	719, 766, 767, 768, 790, 791, 748, 749, 750, 751,
	0, 0, 0, 437, 438, 439, 461, 423, 485, 601,
	0, 0, 0, 0, 0, 0, 0, 535, 547, 581,
	0, 590, 591, 593, 595, 795, 762, 607, 476, 477,
	587, 0, 712, 0, 0, 366, 0, 491, 524, 513,
	596, 479, 0, 0, 0, 0, 0, 0, 715, 0,
	0, 0, 306, 0, 0, 336, 528, 510, 520, 511,
	496, 497, 498, 505, 316, 499, 500, 501, 471, 502,
	472, 503, 504, 753, 527, 478, 397, 350, 545, 544,
	0, 0, 820, 828, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 707, 0, 0, 743, 797, 796,
	730, 740, 0, 0, 279, 202, 473, 592, 475, 474,
	731, 0, 732, 736, 739, 735, 733, 734, 0, 812,
	0, 0, 0, 0, 0, 0, 699, 711, 0, 716,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 708, 709, 1467, 0, 0, 0, 763,
	0, 710, 0, 0, 758, 737, 741, 0, 0, 0,
	0, 269, 402, 419, 280, 393, 432, 285, 400, 275,
	365, 389, 0, 0, 271, 417, 399, 347, 326, 327,
	270, 0, 384, 304, 318, 301, 363, 738, 761, 765,
	300, 834, 759, 427, 273, 0, 426, 362, 413, 418,
	348, 342, 272, 415, 346, 341, 330, 308, 835, 331,
	332, 322, 374, 340, 375, 323, 352, 351, 353, 0,
	0, 0, 0, 0, 455, 456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 756,
	0, 589, 0, 429, 0, 0, 818, 0, 0, 0,
	401, 0, 0, 333, 0, 0, 0, 760, 0, 387,
	368, 831, 0, 0, 385, 338, 414, 376, 420, 403,
	428, 381, 377, 264, 404, 303, 349, 276, 278, 298,
	305, 307, 309, 310, 358, 359, 371, 392, 405, 406,
	407, 302, 286, 386, 287, 320, 288, 265, 294, 292,
	295, 394, 296, 267, 372, 411, 0, 315, 382, 345,
	268, 344, 373, 410, 409, 277, 436, 442, 443, 532,
	0, 448, 610, 611, 612, 457, 462, 463, 464, 466,
	467, 468, 469, 533, 550, 517, 487, 450, 541, 484,
	488, 489, 553, 0, 0, 0, 441, 334, 335, 0,
	313, 261, 262, 606, 816, 364, 555, 588, 480, 0,
	830, 811, 813, 814, 817, 821, 822, 823, 824, 825,
	827, 829, 833, 605, 0, 534, 549, 608, 548, 602,
	370, 0, 391, 546, 493, 0, 538, 512, 0, 539,
	508, 543, 0, 482, 0, 398, 422, 434, 451, 454,
	483, 568, 569, 570, 266, 453, 572, 573, 574, 575,
	576, 577, 578, 571, 832, 515, 492, 518, 433, 495,
	494, 0, 0, 529, 764, 530, 531, 354, 355, 356,
	357, 819, 556, 284, 452, 380, 0, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 521, 522, 519, 613,
	0, 579, 580, 0, 0, 446, 447, 312, 319, 465,
	321, 283, 369, 314, 431, 328, 0, 458, 523, 459,
	582, 585, 583, 584, 361, 324, 325, 395, 329, 339,
	383, 430, 367, 388, 281, 421, 396, 343, 509, 536,
	841, 815, 840, 842, 843, 839, 844, 845, 826, 720,
	0, 771, 837, 836, 838, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 563, 562, 561,
	560, 559, 558, 557, 0, 0, 506, 408, 293, 255,
	289, 290, 297, 603, 600, 412, 604, 0, 263, 486,
	337, 0, 378, 311, 551, 552, 0, 0, 804, 778,
	779, 780, 717, 781, 775, 776, 718, 777, 805, 769,
	801, 802, 745, 772, 782, 800, 783, 803, 806, 807,
	846, 847, 789, 773, 227, 848, 786, 808, 799, 798,
	784, 770, 809, 810, 752, 747, 787, 788, 774, 792,
	793, 794, 719, 766, 767, 768, 790, 791, 748, 749,
	750, 751, 0, 0, 0, 437, 438, 439, 461, 423,
	485, 601, 0, 0, 0, 0, 0, 0, 0, 535,
	547, 581, 0, 590, 591, 593, 595, 795, 0, 607,
	476, 477, 587, 762, 712, 0, 2094, 0, 0, 0,
	0, 0, 366, 0, 491, 524, 513, 596, 479, 0,
	0, 0, 0, 0, 0, 715, 0, 0, 0, 306,
	0, 0, 336, 528, 510, 520, 511, 496, 497, 498,
	505, 316, 499, 500, 501, 471, 502, 472, 503, 504,
	753, 527, 478, 397, 350, 545, 544, 0, 0, 820,
	828, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 707, 0, 0, 743, 797, 796, 730, 740, 0,
	0, 279, 202, 473, 592, 475, 474, 731, 0, 732,
	736, 739, 735, 733, 734, 0, 812, 0, 0, 0,
	0, 0, 0, 699, 711, 0, 716, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	708, 709, 0, 0, 0, 0, 763, 0, 710, 0,
	0, 758, 737, 741, 0, 0, 0, 0, 269, 402,
	419, 280, 393, 432, 285, 400, 275, 365, 389, 0,
	0, 271, 417, 399, 347, 326, 327, 270, 0, 384,
	304, 318, 301, 363, 738, 761, 765, 300, 834, 759,
	427, 273, 0, 426, 362, 413, 418, 348, 342, 272,
	415, 346, 341, 330, 308, 835, 331, 332, 322, 374,
	340, 375, 323, 352, 351, 353, 0, 0, 0, 0,
	0, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 586, 756, 0, 589, 0,
	429, 0, 0, 818, 0, 0, 0, 401, 0, 0,
	333, 0, 0, 0, 760, 0, 387, 368, 831, 0,
	0, 385, 338, 414, 376, 420, 403, 428, 381, 377,
	264, 404, 303, 349, 276, 278, 298, 305, 307, 309,
	310, 358, 359, 371, 392, 405, 406, 407, 302, 286,
	386, 287, 320, 288, 265, 294, 292, 295, 394, 296,
	267, 372, 411, 0, 315, 382, 345, 268, 344, 373,
	410, 409, 277, 436, 442, 443, 532, 0, 448, 610,
	611, 612, 457, 462, 463, 464, 466, 467, 468, 469,
	533, 550, 517, 487, 450, 541, 484, 488, 489, 553,
	0, 0, 0, 441, 334, 335, 0, 313, 261, 262,
	606, 816, 364, 555, 588, 480, 0, 830, 811, 813,
	814, 817, 821, 822, 823, 824, 825, 827, 829, 833,
	605, 0, 534, 549, 608, 548, 602, 370, 0, 391,
	546, 493, 0, 538, 512, 0, 539, 508, 543, 0,
	482, 0, 398, 422, 434, 451, 454, 483, 568, 569,
	570, 266, 453, 572, 573, 574, 575, 576, 577, 578,
	571, 832, 515, 492, 518, 433, 495, 494, 0, 0,
	529, 764, 530, 531, 354, 355, 356, 357, 819, 556,
	284, 452, 380, 0, 516, 0, 0, 0, 0, 0,
	0, 0, 0, 521, 522, 519, 613, 0, 579, 580,
	0, 0, 446, 447, 312, 319, 465, 321, 283, 369,
	314, 431, 328, 0, 458, 523, 459, 582, 585, 583,
	584, 361, 324, 325, 395, 329, 339, 383, 430, 367,
	388, 281, 421, 396, 343, 509, 536, 841, 815, 840,
	842, 843, 839, 844, 845, 826, 720, 0, 771, 837,
	836, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 563, 562, 561, 560, 559, 558,
	557, 0, 0, 506, 408, 293, 255, 289, 290, 297,
	603, 600, 412, 604, 0, 263, 486, 337, 0, 378,
	311, 551, 552, 0, 0, 804, 778, 779, 780, 717,
	781, 775, 776, 718, 777, 805, 769, 801, 802, 745,
	772, 782, 800, 783, 803, 806, 807, 846, 847, 789,
	773, 227, 848, 786, 808, 799, 798, 784, 770, 809,
	810, 752, 747, 787, 788, 774, 792, 793, 794, 719,
	766, 767, 768, 790, 791, 748, 749, 750, 751, 0,
	0, 0, 437, 438, 439, 461, 423, 485, 601, 0,
	0, 0, 0, 0, 0, 0, 535, 547, 581, 0,
	590, 591, 593, 595, 795, 762, 607, 476, 477, 587,
	0, 712, 0, 0, 366, 0, 491, 524, 513, 596,
	479, 0, 0, 0, 0, 0, 0, 715, 0, 0,
	0, 306, 0, 0, 336, 528, 510, 520, 511, 496,
	497, 498, 505, 316, 499, 500, 501, 471, 502, 472,
	503, 504, 753, 527, 478, 397, 350, 545, 544, 0,
	0, 820, 828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 707, 0, 0, 743, 797, 796, 730,
	740, 0, 0, 279, 202, 473, 592, 475, 474, 731,
	0, 732, 736, 739, 735, 733, 734, 0, 812, 0,
	0, 0, 0, 0, 0, 699, 711, 0, 716, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 708, 709, 1729, 0, 0, 0, 763, 0,
	710, 0, 0, 758, 737, 741, 0, 0, 0, 0,
	269, 402, 419, 280, 393, 432, 285, 400, 275, 365,
	389, 0, 0, 271, 417, 399, 347, 326, 327, 270,
	0, 384, 304, 318, 301, 363, 738, 761, 765, 300,
	834, 759, 427, 273, 0, 426, 362, 413, 418, 348,
	342, 272, 415, 346, 341, 330, 308, 835, 331, 332,
	322, 374, 340, 375, 323, 352, 351, 353, 0, 0,
	0, 0, 0, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 586, 756, 0,
	589, 0, 429, 0, 0, 818, 0, 0, 0, 401,
	0, 0, 333, 0, 0, 0, 760, 0, 387, 368,
	831, 0, 0, 385, 338, 414, 376, 420, 403, 428,
	381, 377, 264, 404, 303, 349, 276, 278, 298, 305,
	307, 309, 310, 358, 359, 371, 392, 405, 406, 407,
	302, 286, 386, 287, 320, 288, 265, 294, 292, 295,
	394, 296, 267, 372, 411, 0, 315, 382, 345, 268,
	344, 373, 410, 409, 277, 436, 442, 443, 532, 0,
	448, 610, 611, 612, 457, 462, 463, 464, 466, 467,
	468, 469, 533, 550, 517, 487, 450, 541, 484, 488,
	489, 553, 0, 0, 0, 441, 334, 335, 0, 313,
	261, 262, 606, 816, 364, 555, 588, 480, 0, 830,
	811, 813, 814, 817, 821, 822, 823, 824, 825, 827,
	829, 833, 605, 0, 534, 549, 608, 548, 602, 370,
	0, 391, 546, 493, 0, 538, 512, 0, 539, 508,
	543, 0, 482, 0, 398, 422, 434, 451, 454, 483,
	568, 569, 570, 266, 453, 572, 573, 574, 575, 576,
	577, 578, 571, 832, 515, 492, 518, 433, 495, 494,
	0, 0, 529, 764, 530, 531, 354, 355, 356, 357,
	819, 556, 284, 452, 380, 0, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 521, 522, 519, 613, 0,
	579, 580, 0, 0, 446, 447, 312, 319, 465, 321,
	283, 369, 314, 431, 328, 0, 458, 523, 459, 582,
	585, 583, 584, 361, 324, 325, 395, 329, 339, 383,
	430, 367, 388, 281, 421, 396, 343, 509, 536, 841,
	815, 840, 842, 843, 839, 844, 845, 826, 720, 0,
	771, 837, 836, 838, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 563, 562, 561, 560,
	559, 558, 557, 0, 0, 506, 408, 293, 255, 289,
	290, 297, 603, 600, 412, 604, 0, 263, 486, 337,
	0, 378, 311, 551, 552, 0, 0, 804, 778, 779,
	780, 717, 781, 775, 776, 718, 777, 805, 769, 801,
	802, 745, 772, 782, 800, 783, 803, 806, 807, 846,
	847, 789, 773, 227, 848, 786, 808, 799, 798, 784,
	770, 809, 810, 752, 747, 787, 788, 774, 792, 793,
	794, 719, 766, 767, 768, 790, 791, 748, 749, 750,
	751, 0, 0, 0, 437, 438, 439, 461, 423, 485,
	601, 0, 0, 0, 0, 0, 0, 0, 535, 547,
	581, 0, 590, 591, 593, 595, 795, 762, 607, 476,
	477, 587, 0, 712, 0, 0, 366, 0, 491, 524,
	513, 596, 479, 0, 0, 0, 0, 0, 0, 715,
	0, 0, 0, 306, 0, 0, 336, 528, 510, 520,
	511, 496, 497, 498, 505, 316, 499, 500, 501, 471,
	502, 472, 503, 504, 753, 527, 478, 397, 350, 545,
	544, 0, 0, 820, 828, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 707, 0, 0, 743, 797,
	796, 730, 740, 0, 0, 279, 202, 473, 592, 475,
	474, 731, 0, 732, 736, 739, 735, 733, 734, 0,
	812, 0, 0, 0, 0, 0, 0, 699, 711, 0,
	716, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 708, 709, 0, 0, 0, 0,
	763, 0, 710, 0, 0, 758, 737, 741, 0, 0,
	0, 0, 269, 402, 419, 280, 393, 432, 285, 400,
	275, 365, 389, 0, 0, 271, 417, 399, 347, 326,
	327, 270, 0, 384, 304, 318, 301, 363, 738, 761,
	765, 300, 834, 759, 427, 273, 0, 426, 362, 413,
	418, 348, 342, 272, 415, 346, 341, 330, 308, 835,
	331, 332, 322, 374, 340, 375, 323, 352, 351, 353,
	0, 0, 0, 0, 0, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 586,
	756, 0, 589, 0, 429, 0, 0, 818, 0, 0,
	0, 401, 0, 0, 333, 0, 0, 0, 760, 0,
	387, 368, 831, 0, 0, 385, 338, 414, 376, 420,
	403, 428, 381, 377, 264, 404, 303, 349, 276, 278,
	298, 305, 307, 309, 310, 358, 359, 371, 392, 405,
	406, 407, 302, 286, 386, 287, 320, 288, 265, 294,
	292, 295, 394, 296, 267, 372, 411, 0, 315, 382,
	345, 268, 344, 373, 410, 409, 277, 436, 442, 443,
	532, 0, 448, 610, 611, 612, 457, 462, 463, 464,
	466, 467, 468, 469, 533, 550, 517, 487, 450, 541,
	484, 488, 489, 553, 0, 0, 0, 441, 334, 335,
	0, 313, 261, 262, 606, 816, 364, 555, 588, 480,
	0, 830, 811, 813, 814, 817, 821, 822, 823, 824,
	825, 827, 829, 833, 605, 0, 534, 549, 608, 548,
	602, 370, 0, 391, 546, 493, 0, 538, 512, 0,
	539, 508, 543, 0, 482, 0, 398, 422, 434, 451,
	454, 483, 568, 569, 570, 266, 453, 572, 573, 574,
	575, 576, 577, 578, 571, 832, 515, 492, 518, 433,
	495, 494, 0, 0, 529, 764, 530, 531, 354, 355,
	356, 357, 819, 556, 284, 452, 380, 0, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 521, 522, 519,
	613, 0, 579, 580, 0, 0, 446, 447, 312, 319,
	465, 321, 283, 369, 314, 431, 328, 0, 458, 523,
	459, 582, 585, 583, 584, 361, 324, 325, 395, 329,
	339, 383, 430, 367, 388, 281, 421, 396, 343, 509,
	536, 841, 815, 840, 842, 843, 839, 844, 845, 826,
	720, 0, 771, 837, 836, 838, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 563, 562,
	561, 560, 559, 558, 557, 0, 0, 506, 408, 293,
	255, 289, 290, 297, 603, 600, 412, 604, 0, 263,
	486, 337, 0, 378, 311, 551, 552, 0, 0, 804,
	778, 779, 780, 717, 781, 775, 776, 718, 777, 805,
	769, 801, 802, 745, 772, 782, 800, 783, 803, 806,
	807, 846, 847, 789, 773, 227, 848, 786, 808, 799,
	798, 784, 770, 809, 810, 752, 747, 787, 788, 774,
	792, 793, 794, 719, 766, 767, 768, 790, 791, 748,
	749, 750, 751, 0, 0, 0, 437, 438, 439, 461,
	423, 485, 601, 0, 0, 0, 0, 0, 0, 0,
	535, 547, 581, 0, 590, 591, 593, 595, 795, 762,
	607, 476, 477, 587, 0, 712, 0, 0, 366, 0,
	491, 524, 513, 596, 479, 0, 0, 0, 0, 0,
	0, 715, 0, 0, 0, 306, 0, 0, 336, 528,
	510, 520, 511, 496, 497, 498, 505, 316, 499, 500,
	501, 471, 502, 472, 503, 504, 753, 527, 478, 397,
	350, 545, 544, 0, 0, 820, 828, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 707, 0, 0,
	743, 797, 796, 730, 740, 0, 0, 279, 202, 473,
	592, 475, 474, 2531, 0, 2532, 736, 739, 735, 733,
	734, 0, 812, 0, 0, 0, 0, 0, 0, 699,
	711, 0, 716, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 708, 709, 0, 0,
	0, 0, 763, 0, 710, 0, 0, 758, 737, 741,
	0, 0, 0, 0, 269, 402, 419, 280, 393, 432,
	285, 400, 275, 365, 389, 0, 0, 271, 417, 399,
	347, 326, 327, 270, 0, 384, 304, 318, 301, 363,
	738, 761, 765, 300, 834, 759, 427, 273, 0, 426,
	362, 413, 418, 348, 342, 272, 415, 346, 341, 330,
	308, 835, 331, 332, 322, 374, 340, 375, 323, 352,
	351, 353, 0, 0, 0, 0, 0, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 586, 756, 0, 589, 0, 429, 0, 0, 818,
	0, 0, 0, 401, 0, 0, 333, 0, 0, 0,
	760, 0, 387, 368, 831, 0, 0, 385, 338, 414,
	376, 420, 403, 428, 381, 377, 264, 404, 303, 349,
	276, 278, 298, 305, 307, 309, 310, 358, 359, 371,
	392, 405, 406, 407, 302, 286, 386, 287, 320, 288,
	265, 294, 292, 295, 394, 296, 267, 372, 411, 0,
	315, 382, 345, 268, 344, 373, 410, 409, 277, 436,
	442, 443, 532, 0, 448, 610, 611, 612, 457, 462,
	463, 464, 466, 467, 468, 469, 533, 550, 517, 487,
	450, 541, 484, 488, 489, 553, 0, 0, 0, 441,
	334, 335, 0, 313, 261, 262, 606, 816, 364, 555,
	588, 480, 0, 830, 811, 813, 814, 817, 821, 822,
	823, 824, 825, 827, 829, 833, 605, 0, 534, 549,
	608, 548, 602, 370, 0, 391, 546, 493, 0, 538,
	512, 0, 539, 508, 543, 0, 482, 0, 398, 422,
	434, 451, 454, 483, 568, 569, 570, 266, 453, 572,
	573, 574, 575, 576, 577, 578, 571, 832, 515, 492,
	518, 433, 495, 494, 0, 0, 529, 764, 530, 531,
	354, 355, 356, 357, 819, 556, 284, 452, 380, 0,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 521,
	522, 519, 613, 0, 579, 580, 0, 0, 446, 447,
	312, 319, 465, 321, 283, 369, 314, 431, 328, 0,
	458, 523, 459, 582, 585, 583, 584, 361, 324, 325,
	395, 329, 339, 383, 430, 367, 388, 281, 421, 396,
	343, 509, 536, 841, 815, 840, 842, 843, 839, 844,
	845, 826, 720, 0, 771, 837, 836, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	563, 562, 561, 560, 559, 558, 557, 0, 0, 506,
	408, 293, 255, 289, 290, 297, 603, 600, 412, 604,
	0, 263, 486, 337, 0, 378, 311, 551, 552, 0,
	0, 804, 778, 779, 780, 717, 781, 775, 776, 718,
	777, 805, 769, 801, 802, 745, 772, 782, 800, 783,
	803, 806, 807, 846, 847, 789, 773, 227, 848, 786,
	808, 799, 798, 784, 770, 809, 810, 752, 747, 787,
	788, 774, 792, 793, 794, 719, 766, 767, 768, 790,
	791, 748, 749, 750, 751, 0, 0, 0, 437, 438,
	439, 461, 423, 485, 601, 0, 0, 0, 0, 0,
	0, 0, 535, 547, 581, 0, 590, 591, 593, 595,
	795, 762, 607, 476, 477, 587, 0, 712, 0, 0,
	366, 0, 491, 524, 513, 596, 479, 0, 0, 1602,
	0, 0, 0, 715, 0, 0, 0, 306, 0, 0,
	336, 528, 510, 520, 511, 496, 497, 498, 505, 316,
	499, 500, 501, 471, 502, 472, 503, 504, 753, 527,
	478, 397, 350, 545, 544, 0, 0, 820, 828, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 707,
	0, 0, 743, 797, 796, 730, 740, 0, 0, 279,
	202, 473, 592, 475, 474, 731, 0, 732, 736, 739,
	735, 733, 734, 0, 812, 0, 0, 0, 0, 0,
	0, 0, 711, 0, 716, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 708, 709,
	0, 0, 0, 0, 763, 0, 710, 0, 0, 758,
	737, 741, 0, 0, 0, 0, 269, 402, 419, 280,
	393, 432, 285, 400, 275, 365, 389, 0, 0, 271,
	417, 399, 347, 326, 327, 270, 0, 384, 304, 318,
	301, 363, 738, 761, 765, 300, 834, 759, 427, 273,
	0, 426, 362, 413, 418, 348, 342, 272, 415, 346,
	341, 330, 308, 835, 331, 332, 322, 374, 340, 375,
	323, 352, 351, 353, 0, 0, 0, 0, 0, 455,
	456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 586, 756, 0, 589, 0, 429, 0,
	0, 818, 0, 0, 0, 401, 0, 0, 333, 0,
	0, 0, 760, 0, 387, 368, 831, 0, 0, 385,
	338, 414, 376, 420, 403, 428, 381, 377, 264, 404,
	303, 349, 276, 278, 298, 305, 307, 309, 310, 358,
	359, 371, 392, 405, 406, 407, 302, 286, 386, 287,
	320, 288, 265, 294, 292, 295, 394, 296, 267, 372,
	411, 0, 315, 382, 345, 268, 344, 373, 410, 409,
	277, 436, 1603, 1604, 532, 0, 448, 610, 611, 612,
	457, 462, 463, 464, 466, 467, 468, 469, 533, 550,
	517, 487, 450, 541, 484, 488, 489, 553, 0, 0,
	0, 441, 334, 335, 0, 313, 261, 262, 606, 816,
	364, 555, 588, 480, 0, 830, 811, 813, 814, 817,
	821, 822, 823, 824, 825, 827, 829, 833, 605, 0,
	534, 549, 608, 548, 602, 370, 0, 391, 546, 493,
	0, 538, 512, 0, 539, 508, 543, 0, 482, 0,
	398, 422, 434, 451, 454, 483, 568, 569, 570, 266,
	453, 572, 573, 574, 575, 576, 577, 578, 571, 832,
	515, 492, 518, 433, 495, 494, 0, 0, 529, 764,
	530, 531, 354, 355, 356, 357, 819, 556, 284, 452,
	380, 0, 516, 0, 0, 0, 0, 0, 0, 0,
	0, 521, 522, 519, 613, 0, 579, 580, 0, 0,
	446, 447, 312, 319, 465, 321, 283, 369, 314, 431,
	328, 0, 458, 523, 459, 582, 585, 583, 584, 361,
	324, 325, 395, 329, 339, 383, 430, 367, 388, 281,
	421, 396, 343, 509, 536, 841, 815, 840, 842, 843,
	839, 844, 845, 826, 720, 0, 771, 837, 836, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 563, 562, 561, 560, 559, 558, 557, 0,
	0, 506, 408, 293, 255, 289, 290, 297, 603, 600,
	412, 604, 0, 263, 486, 337, 0, 378, 311, 551,
	552, 0, 0, 804, 778, 779, 780, 717, 781, 775,
	776, 718, 777, 805, 769, 801, 802, 745, 772, 782,
	800, 783, 803, 806, 807, 846, 847, 789, 773, 227,
	848, 786, 808, 799, 798, 784, 770, 809, 810, 752,
	747, 787, 788, 774, 792, 793, 794, 719, 766, 767,
	768, 790, 791, 748, 749, 750, 751, 0, 0, 0,
	437, 438, 439, 461, 423, 485, 601, 0, 0, 0,
	0, 0, 0, 0, 535, 547, 581, 0, 590, 591,
	593, 595, 795, 762, 607, 476, 477, 587, 0, 712,
	0, 0, 366, 0, 491, 524, 513, 596, 479, 0,
	0, 0, 0, 0, 0, 715, 0, 0, 0, 306,
	0, 0, 336, 528, 510, 520, 511, 496, 497, 498,
	505, 316, 499, 500, 501, 471, 502, 472, 503, 504,
	753, 527, 478, 397, 350, 545, 544, 0, 0, 820,
	828, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 707, 0, 0, 743, 797, 796, 730, 740, 0,
	0, 279, 202, 473, 592, 475, 474, 731, 0, 732,
	736, 739, 735, 733, 734, 0, 812, 0, 0, 0,
	0, 0, 0, 0, 711, 0, 716, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	708, 709, 0, 0, 0, 0, 763, 0, 710, 0,
	0, 758, 737, 741, 0, 0, 0, 0, 269, 402,
	419, 280, 393, 432, 285, 400, 275, 365, 389, 0,
	0, 271, 417, 399, 347, 326, 327, 270, 0, 384,
	304, 318, 301, 363, 738, 761, 765, 300, 834, 759,
	427, 273, 0, 426, 362, 413, 418, 348, 342, 272,
	415, 346, 341, 330, 308, 835, 331, 332, 322, 374,
	340, 375, 323, 352, 351, 353, 0, 0, 0, 0,
	0, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 586, 756, 0, 589, 0,
	429, 0, 0, 818, 0, 0, 0, 401, 0, 0,
	333, 0, 0, 0, 760, 0, 387, 368, 831, 0,
	0, 385, 338, 414, 376, 420, 403, 428, 381, 377,
	264, 404, 303, 349, 276, 278, 298, 305, 307, 309,
	310, 358, 359, 371, 392, 405, 406, 407, 302, 286,
	386, 287, 320, 288, 265, 294, 292, 295, 394, 296,
	267, 372, 411, 0, 315, 382, 345, 268, 344, 373,
	410, 409, 277, 436, 442, 443, 532, 0, 448, 610,
	611, 612, 457, 462, 463, 464, 466, 467, 468, 469,
	533, 550, 517, 487, 450, 541, 484, 488, 489, 553,
	0, 0, 0, 441, 334, 335, 0, 313, 261, 262,
	606, 816, 364, 555, 588, 480, 0, 830, 811, 813,
	814, 817, 821, 822, 823, 824, 825, 827, 829, 833,
	605, 0, 534, 549, 608, 548, 602, 370, 0, 391,
	546, 493, 0, 538, 512, 0, 539, 508, 543, 0,
	482, 0, 398, 422, 434, 451, 454, 483, 568, 569,
	570, 266, 453, 572, 573, 574, 575, 576, 577, 578,
	571, 832, 515, 492, 518, 433, 495, 494, 0, 0,
	529, 764, 530, 531, 354, 355, 356, 357, 819, 556,
	284, 452, 380, 0, 516, 0, 0, 0, 0, 0,
	0, 0, 0, 521, 522, 519, 613, 0, 579, 580,
	0, 0, 446, 447, 312, 319, 465, 321, 283, 369,
	314, 431, 328, 0, 458, 523, 459, 582, 585, 583,
	584, 361, 324, 325, 395, 329, 339, 383, 430, 367,
	388, 281, 421, 396, 343, 509, 536, 841, 815, 840,
	842, 843, 839, 844, 845, 826, 720, 0, 771, 837,
	836, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 563, 562, 561, 560, 559, 558,
	557, 0, 0, 506, 408, 293, 255, 289, 290, 297,
	603, 600, 412, 604, 0, 263, 486, 337, 0, 378,
	311, 551, 552, 0, 0, 804, 778, 779, 780, 717,
	781, 775, 776, 718, 777, 805, 769, 801, 802, 745,
	772, 782, 800, 783, 803, 806, 807, 846, 847, 789,
	773, 227, 848, 786, 808, 799, 798, 784, 770, 809,
	810, 752, 747, 787, 788, 774, 792, 793, 794, 719,
	766, 767, 768, 790, 791, 748, 749, 750, 751, 0,
	0, 0, 437, 438, 439, 461, 423, 485, 601, 0,
	0, 0, 0, 0, 0, 0, 535, 547, 581, 0,
	590, 591, 593, 595, 795, 762, 607, 476, 477, 587,
	0, 712, 0, 0, 366, 0, 491, 524, 513, 596,
	479, 0, 0, 0, 0, 0, 0, 715, 0, 0,
	0, 306, 0, 0, 336, 528, 510, 520, 511, 496,
	497, 498, 505, 316, 499, 500, 501, 471, 502, 472,
	503, 504, 753, 527, 478, 397, 350, 545, 544, 0,
	0, 820, 828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 743, 797, 796, 730,
	740, 0, 0, 279, 202, 473, 592, 475, 474, 731,
	0, 732, 736, 739, 735, 733, 734, 0, 812, 0,
	0, 0, 0, 0, 0, 699, 711, 0, 716, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 708, 709, 0, 0, 0, 0, 763, 0,
	710, 0, 0, 758, 737, 741, 0, 0, 0, 0,
	269, 402, 419, 280, 393, 432, 285, 400, 275, 365,
	389, 0, 0, 271, 417, 399, 347, 326, 327, 270,
	0, 384, 304, 318, 301, 363, 738, 761, 765, 300,
	834, 759, 427, 273, 0, 426, 362, 413, 418, 348,
	342, 272, 415, 346, 341, 330, 308, 835, 331, 332,
	322, 374, 340, 375, 323, 352, 351, 353, 0, 0,
	0, 0, 0, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 586, 756, 0,
	589, 0, 429, 0, 0, 818, 0, 0, 0, 401,
	0, 0, 333, 0, 0, 0, 760, 0, 387, 368,
	831, 0, 0, 385, 338, 414, 376, 420, 403, 428,
	381, 377, 264, 404, 303, 349, 276, 278, 298, 305,
	307, 309, 310, 358, 359, 371, 392, 405, 406, 407,
	302, 286, 386, 287, 320, 288, 265, 294, 292, 295,
	394, 296, 267, 372, 411, 0, 315, 382, 345, 268,
	344, 373, 410, 409, 277, 436, 442, 443, 532, 0,
	448, 610, 611, 612, 457, 462, 463, 464, 466, 467,
	468, 469, 533, 550, 517, 487, 450, 541, 484, 488,
	489, 553, 0, 0, 0, 441, 334, 335, 0, 313,
	261, 262, 606, 816, 364, 555, 588, 480, 0, 830,
	811, 813, 814, 817, 821, 822, 823, 824, 825, 827,
	829, 833, 605, 0, 534, 549, 608, 548, 602, 370,
	0, 391, 546, 493, 0, 538, 512, 0, 539, 508,
	543, 0, 482, 0, 398, 422, 434, 451, 454, 483,
	568, 569, 570, 266, 453, 572, 573, 574, 575, 576,
	577, 578, 571, 832, 515, 492, 518, 433, 495, 494,
	0, 0, 529, 764, 530, 531, 354, 355, 356, 357,
	819, 556, 284, 452, 380, 0, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 521, 522, 519, 613, 0,
	579, 580, 0, 0, 446, 447, 312, 319, 465, 321,
	283, 369, 314, 431, 328, 0, 458, 523, 459, 582,
	585, 583, 584, 361, 324, 325, 395, 329, 339, 383,
	430, 367, 388, 281, 421, 396, 343, 509, 536, 841,
	815, 840, 842, 843, 839, 844, 845, 826, 720, 0,
	771, 837, 836, 838, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 563, 562, 561, 560,
	559, 558, 557, 0, 0, 506, 408, 293, 255, 289,
	290, 297, 603, 600, 412, 604, 0, 263, 486, 337,
	0, 378, 311, 551, 552, 0, 0, 804, 778, 779,
	780, 717, 781, 775, 776, 718, 777, 805, 769, 801,
	802, 745, 772, 782, 800, 783, 803, 806, 807, 846,
	847, 789, 773, 227, 848, 786, 808, 799, 798, 784,
	770, 809, 810, 752, 747, 787, 788, 774, 792, 793,
	794, 719, 766, 767, 768, 790, 791, 748, 749, 750,
	751, 0, 0, 0, 437, 438, 439, 461, 423, 485,
	601, 0, 0, 0, 0, 0, 0, 0, 535, 547,
	581, 0, 590, 591, 593, 595, 795, 0, 607, 476,
	477, 587, 0, 712, 179, 54, 168, 142, 0, 0,
	0, 0, 0, 0, 366, 0, 491, 524, 513, 596,
	479, 0, 169, 0, 0, 0, 0, 0, 0, 161,
	0, 306, 0, 170, 336, 528, 510, 520, 511, 496,
	497, 498, 505, 316, 499, 500, 501, 471, 502, 472,
	503, 504, 119, 527, 478, 397, 350, 545, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 173, 0, 0, 201, 0, 0, 0,
	0, 0, 0, 279, 202, 473, 592, 475, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 402, 419, 280, 393, 432, 285, 400, 275, 365,
	389, 0, 0, 271, 417, 399, 347, 326, 327, 270,
	0, 384, 304, 318, 301, 363, 0, 416, 444, 300,
	435, 0, 427, 273, 0, 426, 362, 413, 418, 348,
	342, 272, 415, 346, 341, 330, 308, 460, 331, 332,
	322, 374, 340, 375, 323, 352, 351, 353, 0, 0,
	0, 0, 0, 455, 456, 0, 0, 0, 0, 0,
	0, 141, 167, 177, 0, 105, 0, 586, 0, 0,
	589, 0, 429, 0, 0, 194, 0, 0, 0, 401,
	0, 0, 333, 166, 160, 159, 445, 0, 387, 368,
	206, 0, 0, 385, 338, 414, 376, 420, 403, 428,
	381, 377, 264, 404, 303, 349, 276, 278, 298, 305,
	307, 309, 310, 358, 359, 371, 392, 405, 406, 407,
	302, 286, 386, 287, 320, 288, 265, 294, 292, 295,
	394, 296, 267, 372, 411, 0, 315, 382, 345, 268,
	344, 373, 410, 409, 277, 436, 442, 443, 532, 0,
	448, 565, 566, 567, 457, 462, 463, 464, 466, 467,
	468, 469, 533, 550, 517, 487, 450, 541, 484, 488,
	489, 553, 0, 0, 0, 441, 334, 335, 0, 313,
	261, 262, 424, 299, 364, 555, 588, 480, 0, 542,
	481, 490, 291, 514, 526, 525, 360, 440, 197, 537,
	540, 470, 207, 0, 534, 549, 507, 548, 208, 370,
	0, 391, 546, 493, 0, 538, 512, 0, 539, 508,
	543, 0, 482, 0, 398, 422, 434, 451, 454, 483,
	568, 569, 570, 266, 453, 572, 573, 574, 575, 576,
	577, 578, 571, 425, 515, 492, 518, 433, 495, 494,
	0, 0, 529, 449, 530, 531, 354, 355, 356, 357,
	317, 556, 284, 452, 380, 117, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 521, 522, 519, 205, 0,
	579, 580, 0, 0, 446, 447, 312, 319, 465, 321,
	283, 369, 314, 431, 328, 0, 458, 523, 459, 582,
	585, 583, 584, 361, 324, 325, 395, 329, 339, 383,
	430, 367, 388, 281, 421, 396, 343, 509, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 563, 562, 561, 560,
	559, 558, 557, 0, 0, 506, 408, 293, 255, 289,
	290, 297, 379, 274, 412, 390, 0, 263, 486, 337,
	143, 378, 311, 551, 552, 51, 0, 211, 212, 213,
	214, 215, 216, 217, 218, 256, 219, 220, 221, 222,
	223, 224, 225, 228, 229, 230, 231, 232, 233, 234,
	235, 554, 226, 227, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 0, 0,
	0, 257, 258, 259, 260, 0, 0, 251, 252, 253,
	254, 0, 0, 0, 437, 438, 439, 461, 423, 485,
	209, 40, 195, 198, 200, 199, 0, 52, 535, 547,
	581, 5, 590, 591, 593, 595, 594, 122, 210, 476,
	477, 587, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 366, 0, 491, 524, 513, 596, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 336, 528, 510, 520, 511, 496, 497, 498,
	505, 316, 499, 500, 501, 471, 502, 472, 503, 504,
	119, 527, 478, 397, 350, 545, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 173, 0, 0, 201, 0, 0, 0, 0, 0,
	0, 279, 202, 473, 592, 475, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 2228, 2231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 402,
	419, 280, 393, 432, 285, 400, 275, 365, 389, 0,
	0, 271, 417, 399, 347, 326, 327, 270, 0, 384,
	304, 318, 301, 363, 0, 416, 444, 300, 435, 0,
	427, 273, 0, 426, 362, 413, 418, 348, 342, 272,
	415, 346, 341, 330, 308, 460, 331, 332, 322, 374,
	340, 375, 323, 352, 351, 353, 0, 0, 0, 0,
	0, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 586, 0, 0, 589, 2232,
	429, 0, 0, 0, 2227, 0, 2226, 401, 2224, 2229,
	333, 0, 0, 0, 445, 0, 387, 368, 609, 0,
	0, 385, 338, 414, 376, 420, 403, 428, 381, 377,
	264, 404, 303, 349, 276, 278, 298, 305, 307, 309,
	310, 358, 359, 371, 392, 405, 406, 407, 302, 286,
	386, 287, 320, 288, 265, 294, 292, 295, 394, 296,
	267, 372, 411, 2230, 315, 382, 345, 268, 344, 373,
	410, 409, 277, 436, 442, 443, 532, 0, 448, 610,
	611, 612, 457, 462, 463, 464, 466, 467, 468, 469,
	533, 550, 517, 487, 450, 541, 484, 488, 489, 553,
	0, 0, 0, 441, 334, 335, 0, 313, 261, 262,
	606, 299, 364, 555, 588, 480, 0, 542, 481, 490,
	291, 514, 526, 525, 360, 440, 0, 537, 540, 470,
	605, 0, 534, 549, 608, 548, 602, 370, 0, 391,
	546, 493, 0, 538, 512, 0, 539, 508, 543, 0,
	482, 0, 398, 422, 434, 451, 454, 483, 568, 569,
	570, 266, 453, 572, 573, 574, 575, 576, 577, 578,
	571, 425, 515, 492, 518, 433, 495, 494, 0, 0,
	529, 449, 530, 531, 354, 355, 356, 357, 317, 556,
	284, 452, 380, 0, 516, 0, 0, 0, 0, 0,
	0, 0, 0, 521, 522, 519, 613, 0, 579, 580,
	0, 0, 446, 447, 312, 319, 465, 321, 283, 369,
	314, 431, 328, 0, 458, 523, 459, 582, 585, 583,
	584, 361, 324, 325, 395, 329, 339, 383, 430, 367,
	388, 281, 421, 396, 343, 509, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 563, 562, 561, 560, 559, 558,
	557, 0, 0, 506, 408, 293, 255, 289, 290, 297,
	603, 600, 412, 604, 0, 263, 486, 337, 143, 378,
	311, 551, 552, 0, 0, 211, 212, 213, 214, 215,
	216, 217, 218, 256, 219, 220, 221, 222, 223, 224,
	225, 228, 229, 230, 231, 232, 233, 234, 235, 554,
	226, 227, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 0, 0, 0, 257,
	258, 259, 260, 0, 0, 251, 252, 253, 254, 0,
	0, 0, 437, 438, 439, 461, 423, 485, 601, 0,
	0, 0, 0, 0, 0, 0, 535, 547, 581, 0,
	590, 591, 593, 595, 594, 0, 607, 476, 477, 587,
	366, 0, 491, 524, 513, 596, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	336, 528, 510, 520, 511, 496, 497, 498, 505, 316,
	499, 500, 501, 471, 502, 472, 503, 504, 0, 527,
	478, 397, 350, 545, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1237,
	0, 0, 201, 0, 0, 730, 740, 0, 0, 279,
	202, 473, 592, 475, 474, 731, 0, 732, 736, 739,
	735, 733, 734, 0, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	737, 0, 0, 0, 0, 0, 269, 402, 419, 280,
	393, 432, 285, 400, 275, 365, 389, 0, 0, 271,
	417, 399, 347, 326, 327, 270, 0, 384, 304, 318,
	301, 363, 738, 416, 444, 300, 435, 0, 427, 273,
	0, 426, 362, 413, 418, 348, 342, 272, 415, 346,
	341, 330, 308, 460, 331, 332, 322, 374, 340, 375,
	323, 352, 351, 353, 0, 0, 0, 0, 0, 455,
	456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 586, 0, 0, 589, 0, 429, 0,
	0, 0, 0, 0, 0, 401, 0, 0, 333, 0,
	0, 0, 445, 0, 387, 368, 609, 0, 0, 385,
	338, 414, 376, 420, 403, 428, 381, 377, 264, 404,
	303, 349, 276, 278, 298, 305, 307, 309, 310, 358,
	359, 371, 392, 405, 406, 407, 302, 286, 386, 287,
	320, 288, 265, 294, 292, 295, 394, 296, 267, 372,
	411, 0, 315, 382, 345, 268, 344, 373, 410, 409,
	277, 436, 442, 443, 532, 0, 448, 610, 611, 612,
	457, 462, 463, 464, 466, 467, 468, 469, 533, 550,
	517, 487, 450, 541, 484, 488, 489, 553, 0, 0,
	0, 441, 334, 335, 0, 313, 261, 262, 606, 299,
	364, 555, 588, 480, 0, 542, 481, 490, 291, 514,
	526, 525, 360, 440, 0, 537, 540, 470, 605, 0,
	534, 549, 608, 548, 602, 370, 0, 391, 546, 493,
	0, 538, 512, 0, 539, 508, 543, 0, 482, 0,
	398, 422, 434, 451, 454, 483, 568, 569, 570, 266,
	453, 572, 573, 574, 575, 576, 577, 578, 571, 425,
	515, 492, 518, 433, 495, 494, 0, 0, 529, 449,
	530, 531, 354, 355, 356, 357, 317, 556, 284, 452,
	380, 0, 516, 0, 0, 0, 0, 0, 0, 0,
	0, 521, 522, 519, 613, 0, 579, 580, 0, 0,
	446, 447, 312, 319, 465, 321, 283, 369, 314, 431,
	328, 0, 458, 523, 459, 582, 585, 583, 584, 361,
	324, 325, 395, 329, 339, 383, 430, 367, 388, 281,
	421, 396, 343, 509, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 563, 562, 561, 560, 559, 558, 557, 0,
	0, 506, 408, 293, 255, 289, 290, 297, 603, 600,
	412, 604, 0, 263, 486, 337, 0, 378, 311, 551,
	552, 0, 0, 211, 212, 213, 214, 215, 216, 217,
	218, 256, 219, 220, 221, 222, 223, 224, 225, 228,
	229, 230, 231, 232, 233, 234, 235, 554, 226, 227,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 0, 0, 0, 257, 258, 259,
	260, 0, 0, 251, 252, 253, 254, 0, 0, 0,
	437, 438, 439, 461, 423, 485, 601, 0, 0, 0,
	0, 0, 0, 0, 535, 547, 581, 0, 590, 591,
	593, 595, 594, 0, 607, 476, 477, 587, 179, 54,
	168, 142, 0, 0, 0, 0, 0, 0, 366, 631,
	491, 524, 513, 596, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 336, 528,
	510, 520, 511, 496, 497, 498, 505, 316, 499, 500,
	501, 471, 502, 472, 503, 504, 0, 527, 478, 397,
	350, 545, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 637, 0, 0, 0, 0, 636, 0, 0,
	201, 0, 0, 0, 0, 0, 0, 279, 202, 473,
	592, 475, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 402, 419, 280, 393, 432,
	285, 400, 275, 365, 389, 0, 0, 271, 417, 399,
	347, 326, 327, 270, 0, 384, 304, 318, 301, 363,
	0, 416, 444, 300, 435, 0, 427, 273, 0, 426,
	362, 413, 418, 348, 342, 272, 415, 346, 341, 330,
	308, 460, 331, 332, 322, 374, 340, 375, 323, 352,
	351, 353, 0, 0, 0, 0, 0, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 635,
	0, 586, 0, 0, 589, 0, 429, 0, 0, 0,
	0, 0, 0, 401, 0, 0, 333, 0, 0, 0,
	445, 0, 387, 368, 609, 0, 0, 385, 338, 414,
	376, 420, 403, 428, 381, 377, 264, 404, 303, 349,
	276, 278, 298, 305, 307, 309, 310, 358, 359, 371,
	392, 405, 406, 407, 302, 286, 386, 287, 320, 288,
	265, 294, 292, 295, 394, 296, 267, 372, 411, 0,
	315, 382, 345, 268, 344, 373, 410, 409, 277, 436,
	442, 443, 532, 0, 448, 610, 611, 612, 457, 462,
	463, 464, 466, 467, 468, 469, 533, 550, 517, 487,
	450, 541, 484, 488, 489, 553, 0, 0, 0, 441,
	334, 335, 0, 313, 261, 262, 606, 299, 364, 555,
	588, 480, 0, 542, 481, 490, 291, 514, 526, 525,
	360, 440, 0, 537, 540, 470, 605, 0, 534, 549,
	608, 548, 602, 370, 0, 391, 546, 493, 0, 538,
	512, 0, 539, 508, 543, 0, 482, 0, 398, 422,
	434, 451, 454, 483, 568, 569, 570, 266, 453, 572,
	573, 574, 575, 576, 577, 578, 571, 425, 515, 492,
	518, 433, 495, 494, 0, 0, 529, 449, 530, 531,
	354, 355, 356, 357, 632, 634, 284, 452, 380, 645,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 521,
	522, 519, 613, 0, 579, 580, 0, 0, 446, 447,
	312, 319, 465, 321, 283, 369, 314, 431, 328, 0,
	458, 523, 459, 582, 585, 583, 584, 361, 324, 325,
	395, 329, 339, 383, 430, 367, 388, 281, 421, 396,
	343, 509, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	563, 562, 561, 560, 559, 558, 557, 0, 0, 506,
	408, 293, 255, 289, 290, 297, 603, 600, 412, 604,
	0, 263, 486, 337, 143, 378, 311, 551, 552, 0,
	0, 211, 212, 213, 214, 215, 216, 217, 218, 256,
	219, 220, 221, 222, 223, 224, 225, 228, 229, 230,
	231, 232, 233, 234, 235, 554, 226, 227, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 0, 0, 0, 257, 258, 259, 260, 0,
	0, 251, 252, 253, 254, 0, 0, 0, 437, 438,
	439, 461, 423, 485, 601, 0, 0, 0, 0, 0,
	0, 0, 535, 547, 581, 0, 590, 591, 593, 595,
	594, 0, 607, 476, 477, 587, 366, 0, 491, 524,
	513, 596, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 336, 528, 510, 520,
	511, 496, 497, 498, 505, 316, 499, 500, 501, 471,
	502, 472, 503, 504, 0, 527, 478, 397, 350, 545,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 201, 0,
	0, 0, 0, 0, 0, 279, 202, 473, 592, 475,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 2228, 2231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 402, 419, 280, 393, 432, 285, 400,
	275, 365, 389, 0, 0, 271, 417, 399, 347, 326,
	327, 270, 0, 384, 304, 318, 301, 363, 0, 416,
	444, 300, 435, 0, 427, 273, 0, 426, 362, 413,
	418, 348, 342, 272, 415, 346, 341, 330, 308, 460,
	331, 332, 322, 374, 340, 375, 323, 352, 351, 353,
	0, 0, 0, 0, 0, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 586,
	0, 0, 589, 2232, 429, 0, 0, 0, 2227, 0,
	2226, 401, 2224, 2229, 333, 0, 0, 0, 445, 0,
	387, 368, 609, 0, 0, 385, 338, 414, 376, 420,
	403, 428, 381, 377, 264, 404, 303, 349, 276, 278,
	298, 305, 307, 309, 310, 358, 359, 371, 392, 405,
	406, 407, 302, 286, 386, 287, 320, 288, 265, 294,
	292, 295, 394, 296, 267, 372, 411, 2230, 315, 382,
	345, 268, 344, 373, 410, 409, 277, 436, 442, 443,
	532, 0, 448, 610, 611, 612, 457, 462, 463, 464,
	466, 467, 468, 469, 533, 550, 517, 487, 450, 541,
	484, 488, 489, 553, 0, 0, 0, 441, 334, 335,
	0, 313, 261, 262, 606, 299, 364, 555, 588, 480,
	0, 542, 481, 490, 291, 514, 526, 525, 360, 440,
	0, 537, 540, 470, 605, 0, 534, 549, 608, 548,
	602, 370, 0, 391, 546, 493, 0, 538, 512, 0,
	539, 508, 543, 0, 482, 0, 398, 422, 434, 451,
	454, 483, 568, 569, 570, 266, 453, 572, 573, 574,
	575, 576, 577, 578, 571, 425, 515, 492, 518, 433,
	495, 494, 0, 0, 529, 449, 530, 531, 354, 355,
	356, 357, 317, 556, 284, 452, 380, 0, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 521, 522, 519,
	613, 0, 579, 580, 0, 0, 446, 447, 312, 319,
	465, 321, 283, 369, 314, 431, 328, 0, 458, 523,
	459, 582, 585, 583, 584, 361, 324, 325, 395, 329,
	339, 383, 430, 367, 388, 281, 421, 396, 343, 509,
	536, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 563, 562,
	561, 560, 559, 558, 557, 0, 0, 506, 408, 293,
	255, 289, 290, 297, 603, 600, 412, 604, 0, 263,
	486, 337, 0, 378, 311, 551, 552, 0, 0, 211,
	212, 213, 214, 215, 216, 217, 218, 256, 219, 220,
	221, 222, 223, 224, 225, 228, 229, 230, 231, 232,
	233, 234, 235, 554, 226, 227, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	0, 0, 0, 257, 258, 259, 260, 0, 0, 251,
	252, 253, 254, 0, 0, 0, 437, 438, 439, 461,
	423, 485, 601, 0, 0, 0, 0, 0, 0, 0,
	535, 547, 581, 0, 590, 591, 593, 595, 594, 0,
	607, 476, 477, 587, 366, 0, 491, 524, 513, 596,
	479, 0, 1054, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 336, 528, 510, 520, 511, 496,
	497, 498, 505, 316, 499, 500, 501, 471, 502, 472,
	503, 504, 0, 527, 478, 397, 350, 545, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 201, 0, 0, 0,
	0, 0, 0, 279, 202, 473, 592, 475, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1040, 0, 0, 0, 0, 0, 0,
	269, 402, 419, 280, 393, 432, 285, 400, 275, 365,
	389, 0, 0, 2377, 2380, 2381, 2382, 2383, 2384, 2385,
	0, 2390, 2386, 2387, 2388, 2389, 0, 2372, 2373, 2374,
	2375, 1038, 2356, 2378, 0, 2357, 362, 2358, 2359, 2360,
	2361, 2362, 2363, 2364, 2365, 2366, 2369, 2370, 2367, 2368,
	2376, 374, 340, 375, 323, 352, 351, 353, 1065, 1067,
	1069, 1071, 1074, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 586, 0, 0,
	589, 0, 429, 0, 0, 0, 0, 0, 0, 401,
	0, 0, 333, 0, 0, 0, 2371, 0, 387, 368,
	609, 0, 0, 385, 338, 414, 376, 420, 403, 428,
	381, 377, 264, 404, 303, 349, 276, 278, 298, 305,
	307, 309, 310, 358, 359, 371, 392, 405, 406, 407,
	302, 286, 386, 287, 320, 288, 265, 294, 292, 295,
	394, 296, 267, 372, 411, 0, 315, 382, 345, 268,
	344, 373, 410, 409, 277, 436, 442, 443, 532, 0,
	448, 610, 611, 612, 457, 462, 463, 464, 466, 467,
	468, 469, 533, 550, 517, 487, 450, 541, 484, 488,
	489, 553, 0, 0, 0, 441, 334, 335, 0, 313,
	261, 262, 606, 299, 364, 555, 588, 480, 0, 542,
	481, 490, 291, 514, 526, 525, 360, 440, 0, 537,
	540, 470, 605, 0, 534, 549, 608, 548, 602, 370,
	0, 391, 546, 493, 0, 538, 512, 0, 539, 508,
	543, 0, 482, 0, 398, 422, 434, 451, 454, 483,
	568, 569, 570, 266, 453, 572, 573, 574, 575, 576,
	577, 578, 571, 425, 515, 492, 518, 433, 495, 494,
	0, 0, 529, 449, 530, 531, 354, 355, 356, 357,
	317, 556, 284, 452, 380, 0, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 521, 522, 519, 613, 0,
	579, 580, 0, 0, 446, 447, 312, 319, 465, 321,
	283, 369, 314, 431, 328, 0, 458, 523, 459, 582,
	585, 583, 584, 361, 324, 325, 395, 329, 339, 383,
	430, 367, 388, 281, 421, 396, 343, 509, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 563, 562, 561, 560,
	559, 558, 557, 0, 0, 506, 408, 293, 255, 289,
	290, 297, 603, 600, 412, 604, 0, 263, 2379, 337,
	0, 378, 311, 551, 552, 0, 0, 211, 212, 213,
	214, 215, 216, 217, 218, 256, 219, 220, 221, 222,
	223, 224, 225, 228, 229, 230, 231, 232, 233, 234,
	235, 554, 226, 227, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 0, 0,
	0, 257, 258, 259, 260, 0, 0, 251, 252, 253,
	254, 0, 0, 0, 437, 438, 439, 461, 423, 485,
	601, 0, 0, 0, 0, 0, 0, 0, 535, 547,
	581, 0, 590, 591, 593, 595, 594, 0, 607, 476,
	477, 587, 366, 0, 491, 524, 513, 596, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 336, 528, 510, 520, 511, 496, 497, 498,
	505, 316, 499, 500, 501, 471, 502, 472, 503, 504,
	0, 527, 478, 397, 350, 545, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 201, 0, 0, 0, 0, 0,
	0, 279, 202, 473, 592, 475, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 2249, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 402,
	419, 280, 393, 432, 285, 400, 275, 365, 389, 0,
	0, 271, 417, 399, 347, 326, 327, 270, 0, 384,
	304, 318, 301, 363, 0, 416, 444, 300, 435, 0,
	427, 273, 0, 426, 362, 413, 418, 348, 342, 272,
	415, 346, 341, 330, 308, 460, 331, 332, 322, 374,
	340, 375, 323, 352, 351, 353, 0, 0, 0, 0,
	0, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 586, 0, 0, 589, 2248,
	429, 0, 0, 0, 2254, 2251, 2253, 401, 0, 2252,
	333, 0, 0, 0, 445, 0, 387, 368, 609, 0,
	2246, 385, 338, 414, 376, 420, 403, 428, 381, 377,
	264, 404, 303, 349, 276, 278, 298, 305, 307, 309,
	310, 358, 359, 371, 392, 405, 406, 407, 302, 286,
	386, 287, 320, 288, 265, 294, 292, 295, 394, 296,
	267, 372, 411, 0, 315, 382, 345, 268, 344, 373,
	410, 409, 277, 436, 442, 443, 532, 0, 448, 610,
	611, 612, 457, 462, 463, 464, 466, 467, 468, 469,
	533, 550, 517, 487, 450, 541, 484, 488, 489, 553,
	0, 0, 0, 441, 334, 335, 0, 313, 261, 262,
	606, 299, 364, 555, 588, 480, 0, 542, 481, 490,
	291, 514, 526, 525, 360, 440, 0, 537, 540, 470,
	605, 0, 534, 549, 608, 548, 602, 370, 0, 391,
	546, 493, 0, 538, 512, 0, 539, 508, 543, 0,
	482, 0, 398, 422, 434, 451, 454, 483, 568, 569,
	570, 266, 453, 572, 573, 574, 575, 576, 577, 578,
	571, 425, 515, 492, 518, 433, 495, 494, 0, 0,
	529, 449, 530, 531, 354, 355, 356, 357, 317, 556,
	284, 452, 380, 0, 516, 0, 0, 0, 0, 0,
	0, 0, 0, 521, 522, 519, 613, 0, 579, 580,
	0, 0, 446, 447, 312, 319, 465, 321, 283, 369,
	314, 431, 328, 0, 458, 523, 459, 582, 585, 583,
	584, 361, 324, 325, 395, 329, 339, 383, 430, 367,
	388, 281, 421, 396, 343, 509, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 563, 562, 561, 560, 559, 558,
	557, 0, 0, 506, 408, 293, 255, 289, 290, 297,
	603, 600, 412, 604, 0, 263, 486, 337, 0, 378,
	311, 551, 552, 0, 0, 211, 212, 213, 214, 215,
	216, 217, 218, 256, 219, 220, 221, 222, 223, 224,
	225, 228, 229, 230, 231, 232, 233, 234, 235, 554,
	226, 227, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 0, 0, 0, 257,
	258, 259, 260, 0, 0, 251, 252, 253, 254, 0,
	0, 0, 437, 438, 439, 461, 423, 485, 601, 0,
	0, 0, 0, 0, 0, 0, 535, 547, 581, 0,
	590, 591, 593, 595, 594, 0, 607, 476, 477, 587,
	366, 0, 491, 524, 513, 596, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	336, 528, 510, 520, 511, 496, 497, 498, 505, 316,
	499, 500, 501, 471, 502, 472, 503, 504, 0, 527,
	478, 397, 350, 545, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 0, 0, 0, 0, 0, 279,
	202, 473, 592, 475, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 2249, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 402, 419, 280,
	393, 432, 285, 400, 275, 365, 389, 0, 0, 271,
	417, 399, 347, 326, 327, 270, 0, 384, 304, 318,
	301, 363, 0, 416, 444, 300, 435, 0, 427, 273,
	0, 426, 362, 413, 418, 348, 342, 272, 415, 346,
	341, 330, 308, 460, 331, 332, 322, 374, 340, 375,
	323, 352, 351, 353, 0, 0, 0, 0, 0, 455,
	456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 586, 0, 0, 589, 2248, 429, 0,
	0, 0, 2254, 2251, 2253, 401, 0, 2252, 333, 0,
	0, 0, 445, 0, 387, 368, 609, 0, 0, 385,
	338, 414, 376, 420, 403, 428, 381, 377, 264, 404,
	303, 349, 276, 278, 298, 305, 307, 309, 310, 358,
	359, 371, 392, 405, 406, 407, 302, 286, 386, 287,
	320, 288, 265, 294, 292, 295, 394, 296, 267, 372,
	411, 0, 315, 382, 345, 268, 344, 373, 410, 409,
	277, 436, 442, 443, 532, 0, 448, 610, 611, 612,
	457, 462, 463, 464, 466, 467, 468, 469, 533, 550,
	517, 487, 450, 541, 484, 488, 489, 553, 0, 0,
	0, 441, 334, 335, 0, 313, 261, 262, 606, 299,
	364, 555, 588, 480, 0, 542, 481, 490, 291, 514,
	526, 525, 360, 440, 0, 537, 540, 470, 605, 0,
	534, 549, 608, 548, 602, 370, 0, 391, 546, 493,
	0, 538, 512, 0, 539, 508, 543, 0, 482, 0,
	398, 422, 434, 451, 454, 483, 568, 569, 570, 266,
	453, 572, 573, 574, 575, 576, 577, 578, 571, 425,
	515, 492, 518, 433, 495, 494, 0, 0, 529, 449,
	530, 531, 354, 355, 356, 357, 317, 556, 284, 452,
	380, 0, 516, 0, 0, 0, 0, 0, 0, 0,
	0, 521, 522, 519, 613, 0, 579, 580, 0, 0,
	446, 447, 312, 319, 465, 321, 283, 369, 314, 431,
	328, 0, 458, 523, 459, 582, 585, 583, 584, 361,
	324, 325, 395, 329, 339, 383, 430, 367, 388, 281,
	421, 396, 343, 509, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 563, 562, 561, 560, 559, 558, 557, 0,
	0, 506, 408, 293, 255, 289, 290, 297, 603, 600,
	412, 604, 0, 263, 486, 337, 0, 378, 311, 551,
	552, 0, 0, 211, 212, 213, 214, 215, 216, 217,
	218, 256, 219, 220, 221, 222, 223, 224, 225, 228,
	229, 230, 231, 232, 233, 234, 235, 554, 226, 227,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 0, 0, 0, 257, 258, 259,
	260, 0, 0, 251, 252, 253, 254, 0, 0, 0,
	437, 438, 439, 461, 423, 485, 601, 0, 0, 0,
	0, 0, 0, 0, 535, 547, 581, 0, 590, 591,
	593, 595, 594, 0, 607, 476, 477, 587, 366, 0,
	491, 524, 513, 596, 479, 0, 0, 0, 0, 0,
	1968, 0, 0, 0, 0, 306, 0, 0, 336, 528,
	510, 520, 511, 496, 497, 498, 505, 316, 499, 500,
	501, 471, 502, 472, 503, 504, 0, 527, 478, 397,
	350, 545, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	201, 0, 0, 1969, 0, 0, 0, 279, 202, 473,
	592, 475, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 1168, 1169, 1170, 1167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 402, 419, 280, 393, 432,
	285, 400, 275, 365, 389, 0, 0, 271, 417, 399,
	347, 326, 327, 270, 0, 384, 304, 318, 301, 363,
	0, 416, 444, 300, 435, 0, 427, 273, 0, 426,
	362, 413, 418, 348, 342, 272, 415, 346, 341, 330,
	308, 460, 331, 332, 322, 374, 340, 375, 323, 352,
	351, 353, 0, 0, 0, 0, 0, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 586, 0, 0, 589, 0, 429, 0, 0, 0,
	0, 0, 0, 401, 0, 0, 333, 0, 0, 0,
	445, 0, 387, 368, 609, 0, 0, 385, 338, 414,
	376, 420, 403, 428, 381, 377, 264, 404, 303, 349,
	276, 278, 298, 305, 307, 309, 310, 358, 359, 371,
	392, 405, 406, 407, 302, 286, 386, 287, 320, 288,
	265, 294, 292, 295, 394, 296, 267, 372, 411, 0,
	315, 382, 345, 268, 344, 373, 410, 409, 277, 436,
	442, 443, 532, 0, 448, 610, 611, 612, 457, 462,
	463, 464, 466, 467, 468, 469, 533, 550, 517, 487,
	450, 541, 484, 488, 489, 553, 0, 0, 0, 441,
	334, 335, 0, 313, 261, 262, 606, 299, 364, 555,
	588, 480, 0, 542, 481, 490, 291, 514, 526, 525,
	360, 440, 0, 537, 540, 470, 605, 0, 534, 549,
	608, 548, 602, 370, 0, 391, 546, 493, 0, 538,
	512, 0, 539, 508, 543, 0, 482, 0, 398, 422,
	434, 451, 454, 483, 568, 569, 570, 266, 453, 572,
	573, 574, 575, 576, 577, 578, 571, 425, 515, 492,
	518, 433, 495, 494, 0, 0, 529, 449, 530, 531,
	354, 355, 356, 357, 317, 556, 284, 452, 380, 0,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 521,
	522, 519, 613, 0, 579, 580, 0, 0, 446, 447,
	312, 319, 465, 321, 283, 369, 314, 431, 328, 0,
	458, 523, 459, 582, 585, 583, 584, 361, 324, 325,
	395, 329, 339, 383, 430, 367, 388, 281, 421, 396,
	343, 509, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	563, 562, 561, 560, 559, 558, 557, 0, 0, 506,
	408, 293, 255, 289, 290, 297, 603, 600, 412, 604,
	0, 263, 486, 337, 0, 378, 311, 551, 552, 0,
	0, 211, 212, 213, 214, 215, 216, 217, 218, 256,
	219, 220, 221, 222, 223, 224, 225, 228, 229, 230,
	231, 232, 233, 234, 235, 554, 226, 227, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 0, 0, 0, 257, 258, 259, 260, 0,
	0, 251, 252, 253, 254, 0, 0, 0, 437, 438,
	439, 461, 423, 485, 601, 0, 0, 0, 0, 0,
	0, 0, 535, 547, 581, 0, 590, 591, 593, 595,
	594, 179, 607, 476, 477, 587, 0, 0, 0, 0,
	0, 366, 0, 491, 524, 513, 596, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 336, 528, 510, 520, 511, 496, 497, 498, 505,
	316, 499, 500, 501, 471, 502, 472, 503, 504, 119,
	527, 478, 397, 350, 545, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	173, 2015, 0, 201, 0, 0, 0, 0, 0, 0,
	279, 202, 473, 592, 475, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 402, 419,
	280, 393, 432, 285, 400, 275, 365, 389, 0, 0,
	271, 417, 399, 347, 326, 327, 270, 0, 384, 304,
	318, 301, 363, 0, 416, 444, 300, 435, 0, 427,
	273, 0, 426, 362, 413, 418, 348, 342, 272, 415,
	346, 341, 330, 308, 460, 331, 332, 322, 374, 340,
	375, 323, 352, 351, 353, 0, 0, 0, 0, 0,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 0, 0, 589, 0, 429,
	0, 0, 0, 0, 0, 0, 401, 0, 0, 333,
	0, 0, 0, 445, 0, 387, 368, 609, 0, 0,
	385, 338, 414, 376, 420, 403, 428, 381, 377, 264,
	404, 303, 349, 276, 278, 298, 305, 307, 309, 310,
	358, 359, 371, 392, 405, 406, 407, 302, 286, 386,
	287, 320, 288, 265, 294, 292, 295, 394, 296, 267,
	372, 411, 0, 315, 382, 345, 268, 344, 373, 410,
	409, 277, 436, 442, 443, 532, 0, 448, 610, 611,
	612, 457, 462, 463, 464, 466, 467, 468, 469, 533,
	550, 517, 487, 450, 541, 484, 488, 489, 553, 0,
	0, 0, 441, 334, 335, 0, 313, 261, 262, 606,
	299, 364, 555, 588, 480, 0, 542, 481, 490, 291,
	514, 526, 525, 360, 440, 0, 537, 540, 470, 605,
	0, 534, 549, 608, 548, 602, 370, 0, 391, 546,
	493, 0, 538, 512, 0, 539, 508, 543, 0, 482,
	0, 398, 422, 434, 451, 454, 483, 568, 569, 570,
	266, 453, 572, 573, 574, 575, 576, 577, 578, 571,
	425, 515, 492, 518, 433, 495, 494, 0, 0, 529,
	449, 530, 531, 354, 355, 356, 357, 317, 556, 284,
	452, 380, 0, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 521, 522, 519, 613, 0, 579, 580, 0,
	0, 446, 447, 312, 319, 465, 321, 283, 369, 314,
	431, 328, 0, 458, 523, 459, 582, 585, 583, 584,
	361, 324, 325, 395, 329, 339, 383, 430, 367, 388,
	281, 421, 396, 343, 509, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 563, 562, 561, 560, 559, 558, 557,
	0, 0, 506, 408, 293, 255, 289, 290, 297, 603,
	600, 412, 604, 0, 263, 486, 337, 143, 378, 311,
	551, 552, 0, 0, 211, 212, 213, 214, 215, 216,
	217, 218, 256, 219, 220, 221, 222, 223, 224, 225,
	228, 229, 230, 231, 232, 233, 234, 235, 554, 226,
	227, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 0, 0, 0, 257, 258,
	259, 260, 0, 0, 251, 252, 253, 254, 0, 0,
	0, 437, 438, 439, 461, 423, 485, 601, 0, 0,
	0, 0, 0, 0, 0, 535, 547, 581, 0, 590,
	591, 593, 595, 594, 179, 607, 476, 477, 587, 0,
	0, 0, 0, 0, 366, 0, 491, 524, 513, 596,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 336, 528, 510, 520, 511, 496,
	497, 498, 505, 316, 499, 500, 501, 471, 502, 472,
	503, 504, 119, 527, 478, 397, 350, 545, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 173, 2004, 0, 201, 0, 0, 0,
	0, 0, 0, 279, 202, 473, 592, 475, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 402, 419, 280, 393, 432, 285, 400, 275, 365,
	389, 0, 0, 271, 417, 399, 347, 326, 327, 270,
	0, 384, 304, 318, 301, 363, 0, 416, 444, 300,
	435, 0, 427, 273, 0, 426, 362, 413, 418, 348,
	342, 272, 415, 346, 341, 330, 308, 460, 331, 332,
	322, 374, 340, 375, 323, 352, 351, 353, 0, 0,
	0, 0, 0, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 586, 0, 0,
	589, 0, 429, 0, 0, 0, 0, 0, 0, 401,
	0, 0, 333, 0, 0, 0, 445, 0, 387, 368,
	609, 0, 0, 385, 338, 414, 376, 420, 403, 428,
	381, 377, 264, 404, 303, 349, 276, 278, 298, 305,
	307, 309, 310, 358, 359, 371, 392, 405, 406, 407,
	302, 286, 386, 287, 320, 288, 265, 294, 292, 295,
	394, 296, 267, 372, 411, 0, 315, 382, 345, 268,
	344, 373, 410, 409, 277, 436, 442, 443, 532, 0,
	448, 610, 611, 612, 457, 462, 463, 464, 466, 467,
	468, 469, 533, 550, 517, 487, 450, 541, 484, 488,
	489, 553, 0, 0, 0, 441, 334, 335, 0, 313,
	261, 262, 606, 299, 364, 555, 588, 480, 0, 542,
	481, 490, 291, 514, 526, 525, 360, 440, 0, 537,
	540, 470, 605, 0, 534, 549, 608, 548, 602, 370,
	0, 391, 546, 493, 0, 538, 512, 0, 539, 508,
	543, 0, 482, 0, 398, 422, 434, 451, 454, 483,
	568, 569, 570, 266, 453, 572, 573, 574, 575, 576,
	577, 578, 571, 425, 515, 492, 518, 433, 495, 494,
	0, 0, 529, 449, 530, 531, 354, 355, 356, 357,
	317, 556, 284, 452, 380, 0, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 521, 522, 519, 613, 0,
	579, 580, 0, 0, 446, 447, 312, 319, 465, 321,
	283, 369, 314, 431, 328, 0, 458, 523, 459, 582,
	585, 583, 584, 361, 324, 325, 395, 329, 339, 383,
	430, 367, 388, 281, 421, 396, 343, 509, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 563, 562, 561, 560,
	559, 558, 557, 0, 0, 506, 408, 293, 255, 289,
	290, 297, 603, 600, 412, 604, 0, 263, 486, 337,
	143, 378, 311, 551, 552, 0, 0, 211, 212, 213,
	214, 215, 216, 217, 218, 256, 219, 220, 221, 222,
	223, 224, 225, 228, 229, 230, 231, 232, 233, 234,
	235, 554, 226, 227, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 0, 0,
	0, 257, 258, 259, 260, 0, 0, 251, 252, 253,
	254, 0, 0, 0, 437, 438, 439, 461, 423, 485,
	601, 0, 0, 0, 0, 0, 0, 0, 535, 547,
	581, 0, 590, 591, 593, 595, 594, 0, 607, 476,
	477, 587, 366, 0, 491, 524, 513, 596, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	970, 0, 336, 528, 510, 520, 511, 496, 497, 498,
	505, 316, 499, 500, 501, 471, 502, 472, 503, 504,
	0, 527, 478, 397, 350, 545, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 201, 977, 978, 0, 0, 0,
	0, 279, 202, 473, 592, 475, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 981, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 402,
	965, 280, 393, 432, 285, 400, 275, 365, 389, 0,
	0, 271, 417, 399, 347, 326, 327, 270, 0, 384,
	304, 318, 301, 363, 0, 416, 444, 300, 435, 955,
	427, 273, 954, 426, 362, 413, 418, 348, 342, 272,
	415, 346, 341, 330, 308, 460, 331, 332, 322, 374,
	340, 375, 323, 352, 351, 353, 0, 0, 0, 0,
	0, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 586, 0, 0, 589, 0,
	429, 0, 0, 0, 0, 0, 0, 401, 0, 0,
	333, 0, 0, 0, 445, 0, 387, 368, 609, 0,
	0, 385, 338, 414, 376, 420, 403, 428, 968, 377,
	264, 404, 303, 349, 276, 278, 298, 305, 307, 309,
	310, 358, 359, 371, 392, 405, 406, 407, 302, 286,
	386, 287, 320, 288, 265, 294, 292, 295, 394, 296,
	267, 372, 411, 0, 315, 382, 345, 268, 344, 373,
	410, 409, 277, 436, 442, 443, 532, 0, 448, 610,
	611, 612, 457, 462, 463, 464, 466, 467, 468, 469,
	533, 550, 517, 487, 450, 541, 484, 488, 489, 553,
	0, 0, 0, 441, 334, 335, 0, 313, 261, 262,
	606, 299, 364, 555, 588, 480, 0, 542, 481, 490,
	291, 514, 526, 525, 360, 440, 0, 537, 540, 470,
	605, 0, 534, 549, 608, 548, 602, 370, 0, 391,
	546, 493, 0, 538, 512, 0, 539, 508, 543, 0,
	482, 0, 398, 422, 434, 451, 454, 483, 568, 569,
	570, 266, 453, 572, 573, 574, 575, 576, 577, 969,
	571, 425, 515, 492, 518, 433, 495, 494, 0, 0,
	529, 972, 530, 531, 354, 355, 356, 357, 317, 556,
	284, 452, 380, 0, 516, 0, 0, 0, 0, 0,
	0, 0, 0, 521, 522, 519, 613, 0, 579, 580,
	0, 0, 446, 447, 312, 319, 465, 321, 283, 369,
	314, 431, 328, 0, 458, 523, 459, 582, 585, 583,
	584, 979, 966, 975, 967, 329, 339, 383, 430, 367,
	388, 281, 421, 396, 976, 509, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 563, 562, 561, 560, 559, 558,
	557, 0, 0, 506, 408, 293, 255, 289, 290, 297,
	603, 600, 412, 604, 0, 263, 486, 337, 0, 378,
	311, 551, 552, 0, 0, 211, 212, 213, 214, 215,
	216, 217, 218, 256, 219, 220, 221, 222, 223, 224,
	225, 228, 229, 230, 231, 232, 233, 234, 235, 554,
	226, 227, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 0, 0, 0, 257,
	258, 259, 260, 0, 0, 251, 252, 253, 254, 0,
	0, 0, 437, 438, 439, 461, 423, 485, 601, 0,
	0, 0, 0, 0, 0, 0, 535, 547, 581, 0,
	590, 591, 593, 595, 594, 179, 607, 476, 477, 587,
	0, 0, 0, 0, 0, 366, 0, 491, 524, 513,
	596, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 336, 528, 510, 520, 511,
	496, 497, 498, 505, 316, 499, 500, 501, 471, 502,
	472, 503, 504, 119, 527, 478, 397, 350, 545, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1901, 0, 0, 201, 0, 0,
	0, 0, 0, 0, 279, 202, 473, 592, 475, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 402, 419, 280, 393, 432, 285, 400, 275,
	365, 389, 0, 0, 271, 417, 399, 347, 326, 327,
	270, 0, 384, 304, 318, 301, 363, 0, 416, 444,
	300, 435, 0, 427, 273, 0, 426, 362, 413, 418,
	348, 342, 272, 415, 346, 341, 330, 308, 460, 331,
	332, 322, 374, 340, 375, 323, 352, 351, 353, 0,
	0, 0, 0, 0, 455, 456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 0,
	0, 589, 0, 429, 0, 0, 0, 0, 0, 0,
	401, 0, 0, 333, 0, 0, 0, 445, 0, 387,
	368, 609, 0, 0, 385, 338, 414, 376, 420, 403,
	428, 381, 377, 264, 404, 303, 349, 276, 278, 298,
	305, 307, 309, 310, 358, 359, 371, 392, 405, 406,
	407, 302, 286, 386, 287, 320, 288, 265, 294, 292,
	295, 394, 296, 267, 372, 411, 0, 315, 382, 345,
	268, 344, 373, 410, 409, 277, 436, 442, 443, 532,
	0, 448, 610, 611, 612, 457, 462, 463, 464, 466,
	467, 468, 469, 533, 550, 517, 487, 450, 541, 484,
	488, 489, 553, 0, 0, 0, 441, 334, 335, 0,
	313, 261, 262, 606, 299, 364, 555, 588, 480, 0,
	542, 481, 490, 291, 514, 526, 525, 360, 440, 0,
	537, 540, 470, 605, 0, 534, 549, 608, 548, 602,
	370, 0, 391, 546, 493, 0, 538, 512, 0, 539,
	508, 543, 0, 482, 0, 398, 422, 434, 451, 454,
	483, 568, 569, 570, 266, 453, 572, 573, 574, 575,
	576, 577, 578, 571, 425, 515, 492, 518, 433, 495,
	494, 0, 0, 529, 449, 530, 531, 354, 355, 356,
	357, 317, 556, 284, 452, 380, 0, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 521, 522, 519, 613,
	0, 579, 580, 0, 0, 446, 447, 312, 319, 465,
	321, 283, 369, 314, 431, 328, 0, 458, 523, 459,
	582, 585, 583, 584, 361, 324, 325, 395, 329, 339,
	383, 430, 367, 388, 281, 421, 396, 343, 509, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 563, 562, 561,
	560, 559, 558, 557, 0, 0, 506, 408, 293, 255,
	289, 290, 297, 603, 600, 412, 604, 0, 263, 486,
	337, 143, 378, 311, 551, 552, 0, 0, 211, 212,
	213, 214, 215, 216, 217, 218, 256, 219, 220, 221,
	222, 223, 224, 225, 228, 229, 230, 231, 232, 233,
	234, 235, 554, 226, 227, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 0,
	0, 0, 257, 258, 259, 260, 0, 0, 251, 252,
	253, 254, 0, 0, 0, 437, 438, 439, 461, 423,
	485, 601, 0, 0, 0, 0, 0, 0, 0, 535,
	547, 581, 0, 590, 591, 593, 595, 594, 0, 607,
	476, 477, 587, 366, 0, 491, 524, 513, 596, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 336, 528, 510, 520, 511, 496, 497,
	498, 505, 316, 499, 500, 501, 471, 502, 472, 503,
	504, 0, 527, 478, 397, 350, 545, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 201, 977, 978, 0, 0,
	0, 0, 279, 202, 473, 592, 475, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 981, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	402, 419, 280, 393, 432, 285, 400, 275, 365, 389,
	0, 0, 271, 417, 399, 347, 326, 327, 270, 0,
	384, 304, 318, 301, 363, 0, 416, 444, 300, 435,
	955, 427, 273, 954, 426, 362, 413, 418, 348, 342,
	272, 415, 346, 341, 330, 308, 460, 331, 332, 322,
	374, 340, 375, 323, 352, 351, 353, 0, 0, 0,
	0, 0, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 0, 0, 589,
	0, 429, 0, 0, 0, 0, 0, 0, 401, 0,
	0, 333, 0, 0, 0, 445, 0, 387, 368, 609,
	0, 0, 385, 338, 414, 376, 420, 403, 428, 381,
	377, 264, 404, 303, 349, 276, 278, 298, 305, 307,
	309, 310, 358, 359, 371, 392, 405, 406, 407, 302,
	286, 386, 287, 320, 288, 265, 294, 292, 295, 394,
	296, 267, 372, 411, 0, 315, 382, 345, 268, 344,
	373, 410, 409, 277, 436, 442, 443, 532, 0, 448,
	610, 611, 612, 457, 462, 463, 464, 466, 467, 468,
	469, 533, 550, 517, 487, 450, 541, 484, 488, 489,
	553, 0, 0, 0, 441, 334, 335, 0, 313, 261,
	262, 606, 299, 364, 555, 588, 480, 0, 542, 481,
	490, 291, 514, 526, 525, 360, 440, 0, 537, 540,
	470, 605, 0, 534, 549, 608, 548, 602, 370, 0,
	391, 546, 493, 0, 538, 512, 0, 539, 508, 543,
	0, 482, 0, 398, 422, 434, 451, 454, 483, 568,
	569, 570, 266, 453, 572, 573, 574, 575, 576, 577,
	578, 571, 425, 515, 492, 518, 433, 495, 494, 0,
	0, 529, 449, 530, 531, 354, 355, 356, 357, 317,
	556, 284, 452, 380, 0, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 521, 522, 519, 613, 0, 579,
	580, 0, 0, 446, 447, 312, 319, 465, 321, 283,
	369, 314, 431, 328, 0, 458, 523, 459, 582, 585,
	583, 584, 979, 1920, 975, 1921, 329, 339, 383, 430,
	367, 388, 281, 421, 396, 976, 509, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 563, 562, 561, 560, 559,
	558, 557, 0, 0, 506, 408, 293, 255, 289, 290,
	297, 603, 600, 412, 604, 0, 263, 486, 337, 0,
	378, 311, 551, 552, 0, 0, 211, 212, 213, 214,
	215, 216, 217, 218, 256, 219, 220, 221, 222, 223,
	224, 225, 228, 229, 230, 231, 232, 233, 234, 235,
	554, 226, 227, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 0, 0, 0,
	257, 258, 259, 260, 0, 0, 251, 252, 253, 254,
	0, 0, 0, 437, 438, 439, 461, 423, 485, 601,
	0, 0, 0, 0, 0, 0, 0, 535, 547, 581,
	0, 590, 591, 593, 595, 594, 0, 607, 476, 477,
	587, 366, 0, 491, 524, 513, 596, 479, 0, 0,
	2733, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 336, 528, 510, 520, 511, 496, 497, 498, 505,
	316, 499, 500, 501, 471, 502, 472, 503, 504, 0,
	527, 478, 397, 350, 545, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 0, 0, 0,
	279, 202, 473, 592, 475, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 402, 419,
	280, 393, 432, 285, 400, 275, 365, 389, 0, 0,
	271, 417, 399, 347, 326, 327, 270, 0, 384, 304,
	318, 301, 363, 0, 416, 444, 300, 435, 0, 427,
	273, 0, 426, 362, 413, 418, 348, 342, 272, 415,
	346, 341, 330, 308, 460, 331, 332, 322, 374, 340,
	375, 323, 352, 351, 353, 0, 0, 0, 0, 0,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	2736, 0, 0, 2735, 586, 0, 0, 589, 0, 429,
	0, 0, 0, 0, 0, 0, 401, 0, 0, 333,
	0, 0, 0, 445, 0, 387, 368, 609, 0, 0,
	385, 338, 414, 376, 420, 403, 428, 381, 377, 264,
	404, 303, 349, 276, 278, 298, 305, 307, 309, 310,
	358, 359, 371, 392, 405, 406, 407, 302, 286, 386,
	287, 320, 288, 265, 294, 292, 295, 394, 296, 267,
	372, 411, 0, 315, 382, 345, 268, 344, 373, 410,
	409, 277, 436, 442, 443, 532, 0, 448, 610, 611,
	612, 457, 462, 463, 464, 466, 467, 468, 469, 533,
	550, 517, 487, 450, 541, 484, 488, 489, 553, 0,
	0, 0, 441, 334, 335, 0, 313, 261, 262, 606,
	299, 364, 555, 588, 480, 0, 542, 481, 490, 291,
	514, 526, 525, 360, 440, 0, 537, 540, 470, 605,
	0, 534, 549, 608, 548, 602, 370, 0, 391, 546,
	493, 0, 538, 512, 0, 539, 508, 543, 0, 482,
	0, 398, 422, 434, 451, 454, 483, 568, 569, 570,
	266, 453, 572, 573, 574, 575, 576, 577, 578, 571,
	425, 515, 492, 518, 433, 495, 494, 0, 0, 529,
	449, 530, 531, 354, 355, 356, 357, 317, 556, 284,
	452, 380, 0, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 521, 522, 519, 613, 0, 579, 580, 0,
	0, 446, 447, 312, 319, 465, 321, 283, 369, 314,
	431, 328, 0, 458, 523, 459, 582, 585, 583, 584,
	361, 324, 325, 395, 329, 339, 383, 430, 367, 388,
	281, 421, 396, 343, 509, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 563, 562, 561, 560, 559, 558, 557,
	0, 0, 506, 408, 293, 255, 289, 290, 297, 603,
	600, 412, 604, 0, 263, 486, 337, 0, 378, 311,
	551, 552, 0, 0, 211, 212, 213, 214, 215, 216,
	217, 218, 256, 219, 220, 221, 222, 223, 224, 225,
	228, 229, 230, 231, 232, 233, 234, 235, 554, 226,
	227, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 0, 0, 0, 257, 258,
	259, 260, 0, 0, 251, 252, 253, 254, 0, 0,
	0, 437, 438, 439, 461, 423, 485, 601, 0, 0,
	0, 0, 0, 0, 0, 535, 547, 581, 0, 590,
	591, 593, 595, 594, 0, 607, 476, 477, 587, 366,
	0, 491, 524, 513, 596, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 1433, 0, 336,
	528, 510, 520, 511, 496, 497, 498, 505, 316, 499,
	500, 501, 471, 502, 472, 503, 504, 0, 527, 478,
	397, 350, 545, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 0, 1431, 0, 0, 0, 279, 202,
	473, 592, 475, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1429, 0,
	0, 0, 0, 0, 0, 269, 402, 419, 280, 393,
	432, 285, 400, 275, 365, 389, 0, 0, 271, 417,
	399, 347, 326, 327, 270, 0, 384, 304, 318, 301,
	363, 0, 416, 444, 300, 435, 0, 427, 273, 0,
	426, 362, 413, 418, 348, 342, 272, 415, 346, 341,
	330, 308, 460, 331, 332, 322, 374, 340, 375, 323,
	352, 351, 353, 0, 0, 0, 0, 0, 455, 456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 0, 0, 589, 0, 429, 0, 0,
	0, 0, 0, 0, 401, 0, 0, 333, 0, 0,
	0, 445, 0, 387, 368, 609, 0, 0, 385, 338,
	414, 376, 420, 403, 428, 381, 377, 264, 404, 303,
	349, 276, 278, 298, 305, 307, 309, 310, 358, 359,
	371, 392, 405, 406, 407, 302, 286, 386, 287, 320,
	288, 265, 294, 292, 295, 394, 296, 267, 372, 411,
	0, 315, 382, 345, 268, 344, 373, 410, 409, 277,
	436, 442, 443, 532, 0, 448, 610, 611, 612, 457,
	462, 463, 464, 466, 467, 468, 469, 533, 550, 517,
	487, 450, 541, 484, 488, 489, 553, 0, 0, 0,
	441, 334, 335, 0, 313, 261, 262, 606, 299, 364,
	555, 588, 480, 0, 542, 481, 490, 291, 514, 526,
	525, 360, 440, 0, 537, 540, 470, 605, 0, 534,
	549, 608, 548, 602, 370, 0, 391, 546, 493, 0,
	538, 512, 0, 539, 508, 543, 0, 482, 0, 398,
	422, 434, 451, 454, 483, 568, 569, 570, 266, 453,
	572, 573, 574, 575, 576, 577, 578, 571, 425, 515,
	492, 518, 433, 495, 494, 0, 0, 529, 449, 530,
	531, 354, 355, 356, 357, 317, 556, 284, 452, 380,
	0, 516, 0, 0, 0, 0, 0, 0, 0, 0,
	521, 522, 519, 613, 0, 579, 580, 0, 0, 446,
	447, 312, 319, 465, 321, 283, 369, 314, 431, 328,
	0, 458, 523, 459, 582, 585, 583, 584, 361, 324,
	325, 395, 329, 339, 383, 430, 367, 388, 281, 421,
	396, 343, 509, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	564, 563, 562, 561, 560, 559, 558, 557, 0, 0,
	506, 408, 293, 255, 289, 290, 297, 603, 600, 412,
	604, 0, 263, 486, 337, 0, 378, 311, 551, 552,
	0, 0, 211, 212, 213, 214, 215, 216, 217, 218,
	256, 219, 220, 221, 222, 223, 224, 225, 228, 229,
	230, 231, 232, 233, 234, 235, 554, 226, 227, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 0, 0, 0, 257, 258, 259, 260,
	0, 0, 251, 252, 253, 254, 0, 0, 0, 437,
	438, 439, 461, 423, 485, 601, 0, 0, 0, 0,
	0, 0, 0, 535, 547, 581, 0, 590, 591, 593,
	595, 594, 0, 607, 476, 477, 587, 366, 0, 491,
	524, 513, 596, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 1427, 0, 336, 528, 510,
	520, 511, 496, 497, 498, 505, 316, 499, 500, 501,
	471, 502, 472, 503, 504, 0, 527, 478, 397, 350,
	545, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 201,
	0, 0, 1431, 0, 0, 0, 279, 202, 473, 592,
	475, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1429, 0, 0, 0,
	0, 0, 0, 269, 402, 419, 280, 393, 432, 285,
	400, 275, 365, 389, 0, 0, 271, 417, 399, 347,
	326, 327, 270, 0, 384, 304, 318, 301, 363, 0,
	416, 444, 300, 435, 0, 427, 273, 0, 426, 362,
	413, 418, 348, 342, 272, 415, 346, 341, 330, 308,
	460, 331, 332, 322, 374, 340, 375, 323, 352, 351,
	353, 0, 0, 0, 0, 0, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 0, 0, 589, 0, 429, 0, 0, 0, 0,
	0, 0, 401, 0, 0, 333, 0, 0, 0, 445,
	0, 387, 368, 609, 0, 0, 385, 338, 414, 376,
	420, 403, 428, 381, 377, 264, 404, 303, 349, 276,
	278, 298, 305, 307, 309, 310, 358, 359, 371, 392,
	405, 406, 407, 302, 286, 386, 287, 320, 288, 265,
	294, 292, 295, 394, 296, 267, 372, 411, 0, 315,
	382, 345, 268, 344, 373, 410, 409, 277, 436, 442,
	443, 532, 0, 448, 610, 611, 612, 457, 462, 463,
	464, 466, 467, 468, 469, 533, 550, 517, 487, 450,
	541, 484, 488, 489, 553, 0, 0, 0, 441, 334,
	335, 0, 313, 261, 262, 606, 299, 364, 555, 588,
	480, 0, 542, 481, 490, 291, 514, 526, 525, 360,
	440, 0, 537, 540, 470, 605, 0, 534, 549, 608,
	548, 602, 370, 0, 391, 546, 493, 0, 538, 512,
	0, 539, 508, 543, 0, 482, 0, 398, 422, 434,
	451, 454, 483, 568, 569, 570, 266, 453, 572, 573,
	574, 575, 576, 577, 578, 571, 425, 515, 492, 518,
	433, 495, 494, 0, 0, 529, 449, 530, 531, 354,
	355, 356, 357, 317, 556, 284, 452, 380, 0, 516,
	0, 0, 0, 0, 0, 0, 0, 0, 521, 522,
	519, 613, 0, 579, 580, 0, 0, 446, 447, 312,
	319, 465, 321, 283, 369, 314, 431, 328, 0, 458,
	523, 459, 582, 585, 583, 584, 361, 324, 325, 395,
	329, 339, 383, 430, 367, 388, 281, 421, 396, 343,
	509, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 563,
	562, 561, 560, 559, 558, 557, 0, 0, 506, 408,
	293, 255, 289, 290, 297, 603, 600, 412, 604, 0,
	263, 486, 337, 0, 378, 311, 551, 552, 0, 0,
	211, 212, 213, 214, 215, 216, 217, 218, 256, 219,
	220, 221, 222, 223, 224, 225, 228, 229, 230, 231,
	232, 233, 234, 235, 554, 226, 227, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 0, 0, 0, 257, 258, 259, 260, 0, 0,
	251, 252, 253, 254, 0, 0, 0, 437, 438, 439,
	461, 423, 485, 601, 0, 0, 0, 0, 0, 0,
	0, 535, 547, 581, 0, 590, 591, 593, 595, 594,
	0, 607, 476, 477, 587, 366, 0, 491, 524, 513,
	596, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 336, 528, 510, 520, 511,
	496, 497, 498, 505, 316, 499, 500, 501, 471, 502,
	472, 503, 504, 0, 527, 478, 397, 350, 545, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3683, 0, 201, 797, 0,
	0, 0, 0, 0, 279, 202, 473, 592, 475, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 402, 419, 280, 393, 432, 285, 400, 275,
	365, 389, 0, 0, 271, 417, 399, 347, 326, 327,
	270, 0, 384, 304, 318, 301, 363, 0, 416, 444,
	300, 435, 0, 427, 273, 0, 426, 362, 413, 418,
	348, 342, 272, 415, 346, 341, 330, 308, 460, 331,
	332, 322, 374, 340, 375, 323, 352, 351, 353, 0,
	0, 0, 0, 0, 455, 456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 0,
	0, 589, 0, 429, 0, 0, 0, 0, 0, 0,
	401, 0, 0, 333, 0, 0, 0, 445, 0, 387,
	368, 609, 0, 0, 385, 338, 414, 376, 420, 403,
	428, 381, 377, 264, 404, 303, 349, 276, 278, 298,
	305, 307, 309, 310, 358, 359, 371, 392, 405, 406,
	407, 302, 286, 386, 287, 320, 288, 265, 294, 292,
	295, 394, 296, 267, 372, 411, 0, 315, 382, 345,
	268, 344, 373, 410, 409, 277, 436, 442, 443, 532,
	0, 448, 610, 611, 612, 457, 462, 463, 464, 466,
	467, 468, 469, 533, 550, 517, 487, 450, 541, 484,
	488, 489, 553, 0, 0, 0, 441, 334, 335, 0,
	313, 261, 262, 606, 299, 364, 555, 588, 480, 0,
	542, 481, 490, 291, 514, 526, 525, 360, 440, 0,
	537, 540, 470, 605, 0, 534, 549, 608, 548, 602,
	370, 0, 391, 546, 493, 0, 538, 512, 0, 539,
	508, 543, 0, 482, 0, 398, 422, 434, 451, 454,
	483, 568, 569, 570, 266, 453, 572, 573, 574, 575,
	576, 577, 578, 571, 425, 515, 492, 518, 433, 495,
	494, 0, 0, 529, 449, 530, 531, 354, 355, 356,
	357, 317, 556, 284, 452, 380, 0, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 521, 522, 519, 613,
	0, 579, 580, 0, 0, 446, 447, 312, 319, 465,
	321, 283, 369, 314, 431, 328, 0, 458, 523, 459,
	582, 585, 583, 584, 361, 324, 325, 395, 329, 339,
	383, 430, 367, 388, 281, 421, 396, 343, 509, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 563, 562, 561,
	560, 559, 558, 557, 0, 0, 506, 408, 293, 255,
	289, 290, 297, 603, 600, 412, 604, 0, 263, 486,
	337, 0, 378, 311, 551, 552, 0, 0, 211, 212,
	213, 214, 215, 216, 217, 218, 256, 219, 220, 221,
	222, 223, 224, 225, 228, 229, 230, 231, 232, 233,
	234, 235, 554, 226, 227, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 0,
	0, 0, 257, 258, 259, 260, 0, 0, 251, 252,
	253, 254, 0, 0, 0, 437, 438, 439, 461, 423,
	485, 601, 0, 0, 0, 0, 0, 0, 0, 535,
	547, 581, 0, 590, 591, 593, 595, 594, 0, 607,
	476, 477, 587, 366, 0, 491, 524, 513, 596, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 336, 528, 510, 520, 511, 496, 497,
	498, 505, 316, 499, 500, 501, 471, 502, 472, 503,
	504, 0, 527, 478, 397, 350, 545, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 0, 1431, 0,
	0, 0, 279, 202, 473, 592, 475, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1429, 0, 0, 0, 0, 0, 0, 269,
	402, 419, 280, 393, 432, 285, 400, 275, 365, 389,
	0, 0, 271, 417, 399, 347, 326, 327, 270, 0,
	384, 304, 318, 301, 363, 0, 416, 444, 300, 435,
	0, 427, 273, 0, 426, 362, 413, 418, 348, 342,
	272, 415, 346, 341, 330, 308, 460, 331, 332, 322,
	374, 340, 375, 323, 352, 351, 353, 0, 0, 0,
	0, 0, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 0, 0, 589,
	0, 429, 0, 0, 0, 0, 0, 0, 401, 0,
	0, 333, 0, 0, 0, 445, 0, 387, 368, 609,
	0, 0, 385, 338, 414, 376, 420, 403, 428, 381,
	377, 264, 404, 303, 349, 276, 278, 298, 305, 307,
	309, 310, 358, 359, 371, 392, 405, 406, 407, 302,
	286, 386, 287, 320, 288, 265, 294, 292, 295, 394,
	296, 267, 372, 411, 0, 315, 382, 345, 268, 344,
	373, 410, 409, 277, 436, 442, 443, 532, 0, 448,
	610, 611, 612, 457, 462, 463, 464, 466, 467, 468,
	469, 533, 550, 517, 487, 450, 541, 484, 488, 489,
	553, 0, 0, 0, 441, 334, 335, 0, 313, 261,
	262, 606, 299, 364, 555, 588, 480, 0, 542, 481,
	490, 291, 514, 526, 525, 360, 440, 0, 537, 540,
	470, 605, 0, 534, 549, 608, 548, 602, 370, 0,
	391, 546, 493, 0, 538, 512, 0, 539, 508, 543,
	0, 482, 0, 398, 422, 434, 451, 454, 483, 568,
	569, 570, 266, 453, 572, 573, 574, 575, 576, 577,
	578, 571, 425, 515, 492, 518, 433, 495, 494, 0,
	0, 529, 449, 530, 531, 354, 355, 356, 357, 317,
	556, 284, 452, 380, 0, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 521, 522, 519, 613, 0, 579,
	580, 0, 0, 446, 447, 312, 319, 465, 321, 283,
	369, 314, 431, 328, 0, 458, 523, 459, 582, 585,
	583, 584, 361, 324, 325, 395, 329, 339, 383, 430,
	367, 388, 281, 421, 396, 343, 509, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 563, 562, 561, 560, 559,
	558, 557, 0, 0, 506, 408, 293, 255, 289, 290,
	297, 603, 600, 412, 604, 0, 263, 486, 337, 0,
	378, 311, 551, 552, 0, 0, 211, 212, 213, 214,
	215, 216, 217, 218, 256, 219, 220, 221, 222, 223,
	224, 225, 228, 229, 230, 231, 232, 233, 234, 235,
	554, 226, 227, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 0, 0, 0,
	257, 258, 259, 260, 0, 0, 251, 252, 253, 254,
	0, 0, 0, 437, 438, 439, 461, 423, 485, 601,
	0, 0, 0, 0, 0, 0, 0, 535, 547, 581,
	0, 590, 591, 593, 595, 594, 0, 607, 476, 477,
	587, 366, 0, 491, 524, 513, 596, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 336, 528, 510, 520, 511, 496, 497, 498, 505,
	316, 499, 500, 501, 471, 502, 472, 503, 504, 0,
	527, 478, 397, 350, 545, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 1431, 0, 0, 0,
	279, 202, 473, 592, 475, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3310, 0, 0, 0, 0, 0, 0, 269, 402, 419,
	280, 393, 432, 285, 400, 275, 365, 389, 0, 0,
	271, 417, 399, 347, 326, 327, 270, 0, 384, 304,
	318, 301, 363, 0, 416, 444, 300, 435, 0, 427,
	273, 0, 426, 362, 413, 418, 348, 342, 272, 415,
	346, 341, 330, 308, 460, 331, 332, 322, 374, 340,
	375, 323, 352, 351, 353, 0, 0, 0, 0, 0,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 0, 0, 589, 0, 429,
	0, 0, 0, 0, 0, 0, 401, 0, 0, 333,
	0, 0, 0, 445, 0, 387, 368, 609, 0, 0,
	385, 338, 414, 376, 420, 403, 428, 381, 377, 264,
	404, 303, 349, 276, 278, 298, 305, 307, 309, 310,
	358, 359, 371, 392, 405, 406, 407, 302, 286, 386,
	287, 320, 288, 265, 294, 292, 295, 394, 296, 267,
	372, 411, 0, 315, 382, 345, 268, 344, 373, 410,
	409, 277, 436, 442, 443, 532, 0, 448, 610, 611,
	612, 457, 462, 463, 464, 466, 467, 468, 469, 533,
	550, 517, 487, 450, 541, 484, 488, 489, 553, 0,
	0, 0, 441, 334, 335, 0, 313, 261, 262, 606,
	299, 364, 555, 588, 480, 0, 542, 481, 490, 291,
	514, 526, 525, 360, 440, 0, 537, 540, 470, 605,
	0, 534, 549, 608, 548, 602, 370, 0, 391, 546,
	493, 0, 538, 512, 0, 539, 508, 543, 0, 482,
	0, 398, 422, 434, 451, 454, 483, 568, 569, 570,
	266, 453, 572, 573, 574, 575, 576, 577, 578, 571,
	425, 515, 492, 518, 433, 495, 494, 0, 0, 529,
	449, 530, 531, 354, 355, 356, 357, 317, 556, 284,
	452, 380, 0, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 521, 522, 519, 613, 0, 579, 580, 0,
	0, 446, 447, 312, 319, 465, 321, 283, 369, 314,
	431, 328, 0, 458, 523, 459, 582, 585, 583, 584,
	361, 324, 325, 395, 329, 339, 383, 430, 367, 388,
	281, 421, 396, 343, 509, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 563, 562, 561, 560, 559, 558, 557,
	0, 0, 506, 408, 293, 255, 289, 290, 297, 603,
	600, 412, 604, 0, 263, 486, 337, 0, 378, 311,
	551, 552, 0, 0, 211, 212, 213, 214, 215, 216,
	217, 218, 256, 219, 220, 221, 222, 223, 224, 225,
	228, 229, 230, 231, 232, 233, 234, 235, 554, 226,
	227, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 0, 0, 0, 257, 258,
	259, 260, 0, 0, 251, 252, 253, 254, 0, 0,
	0, 437, 438, 439, 461, 423, 485, 601, 0, 0,
	0, 0, 0, 0, 0, 535, 547, 581, 0, 590,
	591, 593, 595, 594, 0, 607, 476, 477, 587, 366,
	0, 491, 524, 513, 596, 479, 0, 0, 0, 0,
	0, 2320, 0, 0, 0, 0, 306, 0, 0, 336,
	528, 510, 520, 511, 496, 497, 498, 505, 316, 499,
	500, 501, 471, 502, 472, 503, 504, 0, 527, 478,
	397, 350, 545, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 0, 2322, 0, 0, 0, 279, 202,
	473, 592, 475, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 402, 419, 280, 393,
	432, 285, 400, 275, 365, 389, 0, 0, 271, 417,
	399, 347, 326, 327, 270, 0, 384, 304, 318, 301,
	363, 0, 416, 444, 300, 435, 0, 427, 273, 0,
	426, 362, 413, 418, 348, 342, 272, 415, 346, 341,
	330, 308, 460, 331, 332, 322, 374, 340, 375, 323,
	352, 351, 353, 0, 0, 0, 0, 0, 455, 456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 0, 0, 589, 0, 429, 0, 0,
	0, 0, 0, 0, 401, 0, 0, 333, 0, 0,
	0, 445, 0, 387, 368, 609, 0, 0, 385, 338,
	414, 376, 420, 403, 428, 381, 377, 264, 404, 303,
	349, 276, 278, 298, 305, 307, 309, 310, 358, 359,
	371, 392, 405, 406, 407, 302, 286, 386, 287, 320,
	288, 265, 294, 292, 295, 394, 296, 267, 372, 411,
	0, 315, 382, 345, 268, 344, 373, 410, 409, 277,
	436, 442, 443, 532, 0, 448, 610, 611, 612, 457,
	462, 463, 464, 466, 467, 468, 469, 533, 550, 517,
	487, 450, 541, 484, 488, 489, 553, 0, 0, 0,
	441, 334, 335, 0, 313, 261, 262, 606, 299, 364,
	555, 588, 480, 0, 542, 481, 490, 291, 514, 526,
	525, 360, 440, 0, 537, 540, 470, 605, 0, 534,
	549, 608, 548, 602, 370, 0, 391, 546, 493, 0,
	538, 512, 0, 539, 508, 543, 0, 482, 0, 398,
	422, 434, 451, 454, 483, 568, 569, 570, 266, 453,
	572, 573, 574, 575, 576, 577, 578, 571, 425, 515,
	492, 518, 433, 495, 494, 0, 0, 529, 449, 530,
	531, 354, 355, 356, 357, 317, 556, 284, 452, 380,
	0, 516, 0, 0, 0, 0, 0, 0, 0, 0,
	521, 522, 519, 613, 0, 579, 580, 0, 0, 446,
	447, 312, 319, 465, 321, 283, 369, 314, 431, 328,
	0, 458, 523, 459, 582, 585, 583, 584, 361, 324,
	325, 395, 329, 339, 383, 430, 367, 388, 281, 421,
	396, 343, 509, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	564, 563, 562, 561, 560, 559, 558, 557, 0, 0,
	506, 408, 293, 255, 289, 290, 297, 603, 600, 412,
	604, 0, 263, 486, 337, 0, 378, 311, 551, 552,
	0, 0, 211, 212, 213, 214, 215, 216, 217, 218,
	256, 219, 220, 221, 222, 223, 224, 225, 228, 229,
	230, 231, 232, 233, 234, 235, 554, 226, 227, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 0, 0, 0, 257, 258, 259, 260,
	0, 0, 251, 252, 253, 254, 0, 0, 0, 437,
	438, 439, 461, 423, 485, 601, 0, 0, 0, 0,
	0, 0, 0, 535, 547, 581, 0, 590, 591, 593,
	595, 594, 0, 607, 476, 477, 587, 366, 0, 491,
	524, 513, 596, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 2341, 0, 336, 528, 510,
	520, 511, 496, 497, 498, 505, 316, 499, 500, 501,
	471, 502, 472, 503, 504, 0, 527, 478, 397, 350,
	545, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 201,
	0, 0, 1431, 0, 0, 0, 279, 202, 473, 592,
	475, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 402, 419, 280, 393, 432, 285,
	400, 275, 365, 389, 0, 0, 271, 417, 399, 347,
	326, 327, 270, 0, 384, 304, 318, 301, 363, 0,
	416, 444, 300, 435, 0, 427, 273, 0, 426, 362,
	413, 418, 348, 342, 272, 415, 346, 341, 330, 308,
	460, 331, 332, 322, 374, 340, 375, 323, 352, 351,
	353, 0, 0, 0, 0, 0, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 0, 0, 589, 0, 429, 0, 0, 0, 0,
	0, 0, 401, 0, 0, 333, 0, 0, 0, 445,
	0, 387, 368, 609, 0, 0, 385, 338, 414, 376,
	420, 403, 428, 381, 377, 264, 404, 303, 349, 276,
	278, 298, 305, 307, 309, 310, 358, 359, 371, 392,
	405, 406, 407, 302, 286, 386, 287, 320, 288, 265,
	294, 292, 295, 394, 296, 267, 372, 411, 0, 315,
	382, 345, 268, 344, 373, 410, 409, 277, 436, 442,
	443, 532, 0, 448, 610, 611, 612, 457, 462, 463,
	464, 466, 467, 468, 469, 533, 550, 517, 487, 450,
	541, 484, 488, 489, 553, 0, 0, 0, 441, 334,
	335, 0, 313, 261, 262, 606, 299, 364, 555, 588,
	480, 0, 542, 481, 490, 291, 514, 526, 525, 360,
	440, 0, 537, 540, 470, 605, 0, 534, 549, 608,
	548, 602, 370, 0, 391, 546, 493, 0, 538, 512,
	0, 539, 508, 543, 0, 482, 0, 398, 422, 434,
	451, 454, 483, 568, 569, 570, 266, 453, 572, 573,
	574, 575, 576, 577, 578, 571, 425, 515, 492, 518,
	433, 495, 494, 0, 0, 529, 449, 530, 531, 354,
	355, 356, 357, 317, 556, 284, 452, 380, 0, 516,
	0, 0, 0, 0, 0, 0, 0, 0, 521, 522,
	519, 613, 0, 579, 580, 0, 0, 446, 447, 312,
	319, 465, 321, 283, 369, 314, 431, 328, 0, 458,
	523, 459, 582, 585, 583, 584, 361, 324, 325, 395,
	329, 339, 383, 430, 367, 388, 281, 421, 396, 343,
	509, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 563,
	562, 561, 560, 559, 558, 557, 0, 0, 506, 408,
	293, 255, 289, 290, 297, 603, 600, 412, 604, 0,
	263, 486, 337, 0, 378, 311, 551, 552, 0, 0,
	211, 212, 213, 214, 215, 216, 217, 218, 256, 219,
	220, 221, 222, 223, 224, 225, 228, 229, 230, 231,
	232, 233, 234, 235, 554, 226, 227, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 0, 0, 0, 257, 258, 259, 260, 0, 0,
	251, 252, 253, 254, 0, 0, 0, 437, 438, 439,
	461, 423, 485, 601, 0, 0, 0, 0, 0, 0,
	0, 535, 547, 581, 0, 590, 591, 593, 595, 594,
	0, 607, 476, 477, 587, 366, 0, 491, 524, 513,
	596, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 336, 528, 510, 520, 511,
	496, 497, 498, 505, 316, 499, 500, 501, 471, 502,
	472, 503, 504, 0, 527, 478, 397, 350, 545, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 797, 0,
	0, 0, 0, 0, 279, 202, 473, 592, 475, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 402, 419, 280, 393, 432, 285, 400, 275,
	365, 389, 0, 0, 271, 417, 399, 347, 326, 327,
	270, 0, 384, 304, 318, 301, 363, 0, 416, 444,
	300, 435, 0, 427, 273, 0, 426, 362, 413, 418,
	348, 342, 272, 415, 346, 341, 330, 308, 460, 331,
	332, 322, 374, 340, 375, 323, 352, 351, 353, 0,
	0, 0, 0, 0, 455, 456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 0,
	0, 589, 0, 429, 0, 0, 0, 0, 0, 0,
	401, 0, 0, 333, 0, 0, 0, 445, 0, 387,
	368, 609, 0, 0, 385, 338, 414, 376, 420, 403,
	428, 381, 377, 264, 404, 303, 349, 276, 278, 298,
	305, 307, 309, 310, 358, 359, 371, 392, 405, 406,
	407, 302, 286, 386, 287, 320, 288, 265, 294, 292,
	295, 394, 296, 267, 372, 411, 0, 315, 382, 345,
	268, 344, 373, 410, 409, 277, 436, 442, 443, 532,
	0, 448, 610, 611, 612, 457, 462, 463, 464, 466,
	467, 468, 469, 533, 550, 517, 487, 450, 541, 484,
	488, 489, 553, 0, 0, 0, 441, 334, 335, 0,
	313, 261, 262, 606, 299, 364, 555, 588, 480, 0,
	542, 481, 490, 291, 514, 526, 525, 360, 440, 0,
	537, 540, 470, 605, 0, 534, 549, 608, 548, 602,
	370, 0, 391, 546, 493, 0, 538, 512, 0, 539,
	508, 543, 0, 482, 0, 398, 422, 434, 451, 454,
	483, 568, 569, 570, 266, 453, 572, 573, 574, 575,
	576, 577, 578, 571, 425, 515, 492, 518, 433, 495,
	494, 0, 0, 529, 449, 530, 531, 354, 355, 356,
	357, 317, 556, 284, 452, 380, 0, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 521, 522, 519, 613,
	0, 579, 580, 0, 0, 446, 447, 312, 319, 465,
	321, 283, 369, 314, 431, 328, 0, 458, 523, 459,
	582, 585, 583, 584, 361, 324, 325, 395, 329, 339,
	383, 430, 367, 388, 281, 421, 396, 343, 509, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 563, 562, 561,
	560, 559, 558, 557, 0, 0, 506, 408, 293, 255,
	289, 290, 297, 603, 600, 412, 604, 0, 263, 486,
	337, 0, 378, 311, 551, 552, 0, 0, 211, 212,
	213, 214, 215, 216, 217, 218, 256, 219, 220, 221,
	222, 223, 224, 225, 228, 229, 230, 231, 232, 233,
	234, 235, 554, 226, 227, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 0,
	0, 0, 257, 258, 259, 260, 0, 0, 251, 252,
	253, 254, 0, 0, 0, 437, 438, 439, 461, 423,
	485, 601, 0, 0, 0, 0, 0, 0, 0, 535,
	547, 581, 0, 590, 591, 593, 595, 594, 0, 607,
	476, 477, 587, 366, 0, 491, 524, 513, 596, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 336, 528, 510, 520, 511, 496, 497,
	498, 505, 316, 499, 500, 501, 471, 502, 472, 503,
	504, 0, 527, 478, 397, 350, 545, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3662, 0, 0, 201, 0, 0, 0, 0,
	0, 0, 279, 202, 473, 592, 475, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	402, 419, 280, 393, 432, 285, 400, 275, 365, 389,
	0, 0, 271, 417, 399, 347, 326, 327, 270, 0,
	384, 304, 318, 301, 363, 0, 416, 444, 300, 435,
	0, 427, 273, 0, 426, 362, 413, 418, 348, 342,
	272, 415, 346, 341, 330, 308, 460, 331, 332, 322,
	374, 340, 375, 323, 352, 351, 353, 0, 0, 0,
	0, 0, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 0, 0, 589,
	0, 429, 0, 0, 0, 0, 0, 0, 401, 0,
	0, 333, 0, 0, 0, 445, 0, 387, 368, 609,
	0, 0, 385, 338, 414, 376, 420, 403, 428, 381,
	377, 264, 404, 303, 349, 276, 278, 298, 305, 307,
	309, 310, 358, 359, 371, 392, 405, 406, 407, 302,
	286, 386, 287, 320, 288, 265, 294, 292, 295, 394,
	296, 267, 372, 411, 0, 315, 382, 345, 268, 344,
	373, 410, 409, 277, 436, 442, 443, 532, 0, 448,
	610, 611, 612, 457, 462, 463, 464, 466, 467, 468,
	469, 533, 550, 517, 487, 450, 541, 484, 488, 489,
	553, 0, 0, 0, 441, 334, 335, 0, 313, 261,
	262, 606, 299, 364, 555, 588, 480, 0, 542, 481,
	490, 291, 514, 526, 525, 360, 440, 0, 537, 540,
	470, 605, 0, 534, 549, 608, 548, 602, 370, 0,
	391, 546, 493, 0, 538, 512, 0, 539, 508, 543,
	0, 482, 0, 398, 422, 434, 451, 454, 483, 568,
	569, 570, 266, 453, 572, 573, 574, 575, 576, 577,
	578, 571, 425, 515, 492, 518, 433, 495, 494, 0,
	0, 529, 449, 530, 531, 354, 355, 356, 357, 317,
	556, 284, 452, 380, 0, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 521, 522, 519, 613, 0, 579,
	580, 0, 0, 446, 447, 312, 319, 465, 321, 283,
	369, 314, 431, 328, 0, 458, 523, 459, 582, 585,
	583, 584, 361, 324, 325, 395, 329, 339, 383, 430,
	367, 388, 281, 421, 396, 343, 509, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 563, 562, 561, 560, 559,
	558, 557, 0, 0, 506, 408, 293, 255, 289, 290,
	297, 603, 600, 412, 604, 0, 263, 486, 337, 0,
	378, 311, 551, 552, 0, 0, 211, 212, 213, 214,
	215, 216, 217, 218, 256, 219, 220, 221, 222, 223,
	224, 225, 228, 229, 230, 231, 232, 233, 234, 235,
	554, 226, 227, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 0, 0, 0,
	257, 258, 259, 260, 0, 0, 251, 252, 253, 254,
	0, 0, 0, 437, 438, 439, 461, 423, 485, 601,
	0, 0, 0, 0, 0, 0, 0, 535, 547, 581,
	0, 590, 591, 593, 595, 594, 0, 607, 476, 477,
	587, 366, 0, 491, 524, 513, 596, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 336, 528, 510, 520, 511, 496, 497, 498, 505,
	316, 499, 500, 501, 471, 502, 472, 503, 504, 0,
	527, 478, 397, 350, 545, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 3452, 0, 0, 0,
	279, 202, 473, 592, 475, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 402, 419,
	280, 393, 432, 285, 400, 275, 365, 389, 0, 0,
	271, 417, 399, 347, 326, 327, 270, 0, 384, 304,
	318, 301, 363, 0, 416, 444, 300, 435, 0, 427,
	273, 0, 426, 362, 413, 418, 348, 342, 272, 415,
	346, 341, 330, 308, 460, 331, 332, 322, 374, 340,
	375, 323, 352, 351, 353, 0, 0, 0, 0, 0,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 0, 0, 589, 0, 429,
	0, 0, 0, 0, 0, 0, 401, 0, 0, 333,
	0, 0, 0, 445, 0, 387, 368, 609, 0, 0,
	385, 338, 414, 376, 420, 403, 428, 381, 377, 264,
	404, 303, 349, 276, 278, 298, 305, 307, 309, 310,
	358, 359, 371, 392, 405, 406, 407, 302, 286, 386,
	287, 320, 288, 265, 294, 292, 295, 394, 296, 267,
	372, 411, 0, 315, 382, 345, 268, 344, 373, 410,
	409, 277, 436, 442, 443, 532, 0, 448, 610, 611,
	612, 457, 462, 463, 464, 466, 467, 468, 469, 533,
	550, 517, 487, 450, 541, 484, 488, 489, 553, 0,
	0, 0, 441, 334, 335, 0, 313, 261, 262, 606,
	299, 364, 555, 588, 480, 0, 542, 481, 490, 291,
	514, 526, 525, 360, 440, 0, 537, 540, 470, 605,
	0, 534, 549, 608, 548, 602, 370, 0, 391, 546,
	493, 0, 538, 512, 0, 539, 508, 543, 0, 482,
	0, 398, 422, 434, 451, 454, 483, 568, 569, 570,
	266, 453, 572, 573, 574, 575, 576, 577, 578, 571,
	425, 515, 492, 518, 433, 495, 494, 0, 0, 529,
	449, 530, 531, 354, 355, 356, 357, 317, 556, 284,
	452, 380, 0, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 521, 522, 519, 613, 0, 579, 580, 0,
	0, 446, 447, 312, 319, 465, 321, 283, 369, 314,
	431, 328, 0, 458, 523, 459, 582, 585, 583, 584,
	361, 324, 325, 395, 329, 339, 383, 430, 367, 388,
	281, 421, 396, 343, 509, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 563, 562, 561, 560, 559, 558, 557,
	0, 0, 506, 408, 293, 255, 289, 290, 297, 603,
	600, 412, 604, 0, 263, 486, 337, 0, 378, 311,
	551, 552, 0, 0, 211, 212, 213, 214, 215, 216,
	217, 218, 256, 219, 220, 221, 222, 223, 224, 225,
	228, 229, 230, 231, 232, 233, 234, 235, 554, 226,
	227, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 0, 0, 0, 257, 258,
	259, 260, 0, 0, 251, 252, 253, 254, 0, 0,
	0, 437, 438, 439, 461, 423, 485, 601, 0, 0,
	0, 0, 0, 0, 0, 535, 547, 581, 0, 590,
	591, 593, 595, 594, 0, 607, 476, 477, 587, 366,
	0, 491, 524, 513, 596, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 336,
	528, 510, 520, 511, 496, 497, 498, 505, 316, 499,
	500, 501, 471, 502, 472, 503, 504, 0, 527, 478,
	397, 350, 545, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 0, 0, 0, 0, 0, 279, 202,
	473, 592, 475, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 402, 419, 280, 393,
	432, 285, 400, 275, 365, 389, 0, 0, 271, 417,
	399, 347, 326, 327, 270, 0, 384, 304, 318, 301,
	363, 0, 416, 444, 300, 435, 0, 427, 273, 0,
	426, 362, 413, 418, 348, 342, 272, 415, 346, 341,
	330, 308, 460, 331, 332, 322, 374, 340, 375, 323,
	352, 351, 353, 0, 0, 0, 0, 0, 455, 456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 0, 0, 589, 0, 429, 0, 0,
	0, 3575, 0, 0, 401, 0, 0, 333, 0, 0,
	0, 445, 0, 387, 368, 609, 0, 0, 385, 338,
	414, 376, 420, 403, 428, 381, 377, 264, 404, 303,
	349, 276, 278, 298, 305, 307, 309, 310, 358, 359,
	371, 392, 405, 406, 407, 302, 286, 386, 287, 320,
	288, 265, 294, 292, 295, 394, 296, 267, 372, 411,
	0, 315, 382, 345, 268, 344, 373, 410, 409, 277,
	436, 442, 443, 532, 0, 448, 610, 611, 612, 457,
	462, 463, 464, 466, 467, 468, 469, 533, 550, 517,
	487, 450, 541, 484, 488, 489, 553, 0, 0, 0,
	441, 334, 335, 0, 313, 261, 262, 606, 299, 364,
	555, 588, 480, 0, 542, 481, 490, 291, 514, 526,
	525, 360, 440, 0, 537, 540, 470, 605, 0, 534,
	549, 608, 548, 602, 370, 0, 391, 546, 493, 0,
	538, 512, 0, 539, 508, 543, 0, 482, 0, 398,
	422, 434, 451, 454, 483, 568, 569, 570, 266, 453,
	572, 573, 574, 575, 576, 577, 578, 571, 425, 515,
	492, 518, 433, 495, 494, 0, 0, 529, 449, 530,
	531, 354, 355, 356, 357, 317, 556, 284, 452, 380,
	0, 516, 0, 0, 0, 0, 0, 0, 0, 0,
	521, 522, 519, 613, 0, 579, 580, 0, 0, 446,
	447, 312, 319, 465, 321, 283, 369, 314, 431, 328,
	0, 458, 523, 459, 582, 585, 583, 584, 361, 324,
	325, 395, 329, 339, 383, 430, 367, 388, 281, 421,
	396, 343, 509, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	564, 563, 562, 561, 560, 559, 558, 557, 0, 0,
	506, 408, 293, 255, 289, 290, 297, 603, 600, 412,
	604, 0, 263, 486, 337, 0, 378, 311, 551, 552,
	0, 0, 211, 212, 213, 214, 215, 216, 217, 218,
	256, 219, 220, 221, 222, 223, 224, 225, 228, 229,
	230, 231, 232, 233, 234, 235, 554, 226, 227, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 0, 0, 0, 257, 258, 259, 260,
	0, 0, 251, 252, 253, 254, 0, 0, 0, 437,
	438, 439, 461, 423, 485, 601, 0, 0, 0, 0,
	0, 0, 0, 535, 547, 581, 0, 590, 591, 593,
	595, 594, 0, 607, 476, 477, 587, 366, 0, 491,
	524, 513, 596, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 336, 528, 510,
	520, 511, 496, 497, 498, 505, 316, 499, 500, 501,
	471, 502, 472, 503, 504, 0, 527, 478, 397, 350,
	545, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3306, 0, 0, 201,
	0, 0, 0, 0, 0, 0, 279, 202, 473, 592,
	475, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 402, 419, 280, 393, 432, 285,
	400, 275, 365, 389, 0, 0, 271, 417, 399, 347,
	326, 327, 270, 0, 384, 304, 318, 301, 363, 0,
	416, 444, 300, 435, 0, 427, 273, 0, 426, 362,
	413, 418, 348, 342, 272, 415, 346, 341, 330, 308,
	460, 331, 332, 322, 374, 340, 375, 323, 352, 351,
	353, 0, 0, 0, 0, 0, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 0, 0, 589, 0, 429, 0, 0, 0, 0,
	0, 0, 401, 0, 0, 333, 0, 0, 0, 445,
	0, 387, 368, 609, 0, 0, 385, 338, 414, 376,
	420, 403, 428, 381, 377, 264, 404, 303, 349, 276,
	278, 298, 305, 307, 309, 310, 358, 359, 371, 392,
	405, 406, 407, 302, 286, 386, 287, 320, 288, 265,
	294, 292, 295, 394, 296, 267, 372, 411, 0, 315,
	382, 345, 268, 344, 373, 410, 409, 277, 436, 442,
	443, 532, 0, 448, 610, 611, 612, 457, 462, 463,
	464, 466, 467, 468, 469, 533, 550, 517, 487, 450,
	541, 484, 488, 489, 553, 0, 0, 0, 441, 334,
	335, 0, 313, 261, 262, 606, 299, 364, 555, 588,
	480, 0, 542, 481, 490, 291, 514, 526, 525, 360,
	440, 0, 537, 540, 470, 605, 0, 534, 549, 608,
	548, 602, 370, 0, 391, 546, 493, 0, 538, 512,
	0, 539, 508, 543, 0, 482, 0, 398, 422, 434,
	451, 454, 483, 568, 569, 570, 266, 453, 572, 573,
	574, 575, 576, 577, 578, 571, 425, 515, 492, 518,
	433, 495, 494, 0, 0, 529, 449, 530, 531, 354,
	355, 356, 357, 317, 556, 284, 452, 380, 0, 516,
	0, 0, 0, 0, 0, 0, 0, 0, 521, 522,
	519, 613, 0, 579, 580, 0, 0, 446, 447, 312,
	319, 465, 321, 283, 369, 314, 431, 328, 0, 458,
	523, 459, 582, 585, 583, 584, 361, 324, 325, 395,
	329, 339, 383, 430, 367, 388, 281, 421, 396, 343,
	509, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 563,
	562, 561, 560, 559, 558, 557, 0, 0, 506, 408,
	293, 255, 289, 290, 297, 603, 600, 412, 604, 0,
	263, 486, 337, 0, 378, 311, 551, 552, 0, 0,
	211, 212, 213, 214, 215, 216, 217, 218, 256, 219,
	220, 221, 222, 223, 224, 225, 228, 229, 230, 231,
	232, 233, 234, 235, 554, 226, 227, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 0, 0, 0, 257, 258, 259, 260, 0, 0,
	251, 252, 253, 254, 0, 0, 0, 437, 438, 439,
	461, 423, 485, 601, 0, 0, 0, 0, 0, 0,
	0, 535, 547, 581, 0, 590, 591, 593, 595, 594,
	0, 607, 476, 477, 587, 366, 0, 491, 524, 513,
	596, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 336, 528, 510, 520, 511,
	496, 497, 498, 505, 316, 499, 500, 501, 471, 502,
	472, 503, 504, 0, 527, 478, 397, 350, 545, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3467, 0, 201, 0, 0,
	0, 0, 0, 0, 279, 202, 473, 592, 475, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 402, 419, 280, 393, 432, 285, 400, 275,
	365, 389, 0, 0, 271, 417, 399, 347, 326, 327,
	270, 0, 384, 304, 318, 301, 363, 0, 416, 444,
	300, 435, 0, 427, 273, 0, 426, 362, 413, 418,
	348, 342, 272, 415, 346, 341, 330, 308, 460, 331,
	332, 322, 374, 340, 375, 323, 352, 351, 353, 0,
	0, 0, 0, 0, 455, 456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 0,
	0, 589, 0, 429, 0, 0, 0, 0, 0, 0,
	401, 0, 0, 333, 0, 0, 0, 445, 0, 387,
	368, 609, 0, 0, 385, 338, 414, 376, 420, 403,
	428, 381, 377, 264, 404, 303, 349, 276, 278, 298,
	305, 307, 309, 310, 358, 359, 371, 392, 405, 406,
	407, 302, 286, 386, 287, 320, 288, 265, 294, 292,
	295, 394, 296, 267, 372, 411, 0, 315, 382, 345,
	268, 344, 373, 410, 409, 277, 436, 442, 443, 532,
	0, 448, 610, 611, 612, 457, 462, 463, 464, 466,
	467, 468, 469, 533, 550, 517, 487, 450, 541, 484,
	488, 489, 553, 0, 0, 0, 441, 334, 335, 0,
	313, 261, 262, 606, 299, 364, 555, 588, 480, 0,
	542, 481, 490, 291, 514, 526, 525, 360, 440, 0,
	537, 540, 470, 605, 0, 534, 549, 608, 548, 602,
	370, 0, 391, 546, 493, 0, 538, 512, 0, 539,
	508, 543, 0, 482, 0, 398, 422, 434, 451, 454,
	483, 568, 569, 570, 266, 453, 572, 573, 574, 575,
	576, 577, 578, 571, 425, 515, 492, 518, 433, 495,
	494, 0, 0, 529, 449, 530, 531, 354, 355, 356,
	357, 317, 556, 284, 452, 380, 0, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 521, 522, 519, 613,
	0, 579, 580, 0, 0, 446, 447, 312, 319, 465,
	321, 283, 369, 314, 431, 328, 0, 458, 523, 459,
	582, 585, 583, 584, 361, 324, 325, 395, 329, 339,
	383, 430, 367, 388, 281, 421, 396, 343, 509, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 563, 562, 561,
	560, 559, 558, 557, 0, 0, 506, 408, 293, 255,
	289, 290, 297, 603, 600, 412, 604, 0, 263, 486,
	337, 0, 378, 311, 551, 552, 0, 0, 211, 212,
	213, 214, 215, 216, 217, 218, 256, 219, 220, 221,
	222, 223, 224, 225, 228, 229, 230, 231, 232, 233,
	234, 235, 554, 226, 227, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 0,
	0, 0, 257, 258, 259, 260, 0, 0, 251, 252,
	253, 254, 0, 0, 0, 437, 438, 439, 461, 423,
	485, 601, 0, 0, 0, 0, 0, 0, 0, 535,
	547, 581, 0, 590, 591, 593, 595, 594, 0, 607,
	476, 477, 587, 366, 0, 491, 524, 513, 596, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 336, 528, 510, 520, 511, 496, 497,
	498, 505, 316, 499, 500, 501, 471, 502, 472, 503,
	504, 0, 527, 478, 397, 350, 545, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 0, 0, 0,
	0, 0, 279, 202, 473, 592, 475, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	402, 419, 280, 393, 432, 285, 400, 275, 365, 389,
	0, 0, 271, 417, 399, 347, 326, 327, 270, 0,
	384, 304, 318, 301, 363, 0, 416, 444, 300, 435,
	0, 427, 273, 0, 426, 362, 413, 418, 348, 342,
	272, 415, 346, 341, 330, 308, 460, 331, 332, 322,
	374, 340, 375, 323, 352, 351, 353, 0, 0, 0,
	0, 0, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 0, 0, 589,
	0, 429, 0, 0, 0, 3395, 0, 0, 401, 0,
	0, 333, 0, 0, 0, 445, 0, 387, 368, 609,
	0, 0, 385, 338, 414, 376, 420, 403, 428, 381,
	377, 264, 404, 303, 349, 276, 278, 298, 305, 307,
	309, 310, 358, 359, 371, 392, 405, 406, 407, 302,
	286, 386, 287, 320, 288, 265, 294, 292, 295, 394,
	296, 267, 372, 411, 0, 315, 382, 345, 268, 344,
	373, 410, 409, 277, 436, 442, 443, 532, 0, 448,
	610, 611, 612, 457, 462, 463, 464, 466, 467, 468,
	469, 533, 550, 517, 487, 450, 541, 484, 488, 489,
	553, 0, 0, 0, 441, 334, 335, 0, 313, 261,
	262, 606, 299, 364, 555, 588, 480, 0, 542, 481,
	490, 291, 514, 526, 525, 360, 440, 0, 537, 540,
	470, 605, 0, 534, 549, 608, 548, 602, 370, 0,
	391, 546, 493, 0, 538, 512, 0, 539, 508, 543,
	0, 482, 0, 398, 422, 434, 451, 454, 483, 568,
	569, 570, 266, 453, 572, 573, 574, 575, 576, 577,
	578, 571, 425, 515, 492, 518, 433, 495, 494, 0,
	0, 529, 449, 530, 531, 354, 355, 356, 357, 317,
	556, 284, 452, 380, 0, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 521, 522, 519, 613, 0, 579,
	580, 0, 0, 446, 447, 312, 319, 465, 321, 283,
	369, 314, 431, 328, 0, 458, 523, 459, 582, 585,
	583, 584, 361, 324, 325, 395, 329, 339, 383, 430,
	367, 388, 281, 421, 396, 343, 509, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 563, 562, 561, 560, 559,
	558, 557, 0, 0, 506, 408, 293, 255, 289, 290,
	297, 603, 600, 412, 604, 0, 263, 486, 337, 0,
	378, 311, 551, 552, 0, 0, 211, 212, 213, 214,
	215, 216, 217, 218, 256, 219, 220, 221, 222, 223,
	224, 225, 228, 229, 230, 231, 232, 233, 234, 235,
	554, 226, 227, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 0, 0, 0,
	257, 258, 259, 260, 0, 0, 251, 252, 253, 254,
	0, 0, 0, 437, 438, 439, 461, 423, 485, 601,
	0, 0, 0, 0, 0, 0, 0, 535, 547, 581,
	0, 590, 591, 593, 595, 594, 0, 607, 476, 477,
	587, 366, 0, 491, 524, 513, 596, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 336, 528, 510, 520, 511, 496, 497, 498, 505,
	316, 499, 500, 501, 471, 502, 472, 503, 504, 0,
	527, 478, 397, 350, 545, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 2951, 0, 0, 0,
	279, 202, 473, 592, 475, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 402, 419,
	280, 393, 432, 285, 400, 275, 365, 389, 0, 0,
	271, 417, 399, 347, 326, 327, 270, 0, 384, 304,
	318, 301, 363, 0, 416, 444, 300, 435, 0, 427,
	273, 0, 426, 362, 413, 418, 348, 342, 272, 415,
	346, 341, 330, 308, 460, 331, 332, 322, 374, 340,
	375, 323, 352, 351, 353, 0, 0, 0, 0, 0,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 0, 0, 589, 0, 429,
	0, 0, 0, 0, 0, 0, 401, 0, 0, 333,
	0, 0, 0, 445, 0, 387, 368, 609, 0, 0,
	385, 338, 414, 376, 420, 403, 428, 381, 377, 264,
	404, 303, 349, 276, 278, 298, 305, 307, 309, 310,
	358, 359, 371, 392, 405, 406, 407, 302, 286, 386,
	287, 320, 288, 265, 294, 292, 295, 394, 296, 267,
	372, 411, 0, 315, 382, 345, 268, 344, 373, 410,
	409, 277, 436, 442, 443, 532, 0, 448, 610, 611,
	612, 457, 462, 463, 464, 466, 467, 468, 469, 533,
	550, 517, 487, 450, 541, 484, 488, 489, 553, 0,
	0, 0, 441, 334, 335, 0, 313, 261, 262, 606,
	299, 364, 555, 588, 480, 0, 542, 481, 490, 291,
	514, 526, 525, 360, 440, 0, 537, 540, 470, 605,
	0, 534, 549, 608, 548, 602, 370, 0, 391, 546,
	493, 0, 538, 512, 0, 539, 508, 543, 0, 482,
	0, 398, 422, 434, 451, 454, 483, 568, 569, 570,
	266, 453, 572, 573, 574, 575, 576, 577, 578, 571,
	425, 515, 492, 518, 433, 495, 494, 0, 0, 529,
	449, 530, 531, 354, 355, 356, 357, 317, 556, 284,
	452, 380, 0, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 521, 522, 519, 613, 0, 579, 580, 0,
	0, 446, 447, 312, 319, 465, 321, 283, 369, 314,
	431, 328, 0, 458, 523, 459, 582, 585, 583, 584,
	361, 324, 325, 395, 329, 339, 383, 430, 367, 388,
	281, 421, 396, 343, 509, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 563, 562, 561, 560, 559, 558, 557,
	0, 0, 506, 408, 293, 255, 289, 290, 297, 603,
	600, 412, 604, 0, 263, 486, 337, 0, 378, 311,
	551, 552, 0, 0, 211, 212, 213, 214, 215, 216,
	217, 218, 256, 219, 220, 221, 222, 223, 224, 225,
	228, 229, 230, 231, 232, 233, 234, 235, 554, 226,
	227, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 0, 0, 0, 257, 258,
	259, 260, 0, 0, 251, 252, 253, 254, 0, 0,
	0, 437, 438, 439, 461, 423, 485, 601, 0, 0,
	0, 0, 0, 0, 0, 535, 547, 581, 0, 590,
	591, 593, 595, 594, 0, 607, 476, 477, 587, 366,
	0, 491, 524, 513, 596, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 336,
	528, 510, 520, 511, 496, 497, 498, 505, 316, 499,
	500, 501, 471, 502, 472, 503, 504, 0, 527, 478,
	397, 350, 545, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 0, 0, 0, 0, 0, 279, 202,
	473, 592, 475, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 402, 419, 280, 393,
	432, 285, 400, 275, 365, 389, 0, 0, 271, 417,
	399, 347, 326, 327, 270, 0, 384, 304, 318, 301,
	363, 0, 416, 444, 300, 435, 0, 427, 273, 0,
	426, 362, 413, 418, 348, 342, 272, 415, 346, 341,
	330, 308, 460, 331, 332, 322, 374, 340, 375, 323,
	352, 351, 353, 0, 0, 0, 0, 0, 455, 456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 0, 0, 589, 0, 429, 0, 0,
	0, 0, 0, 0, 401, 0, 0, 333, 0, 0,
	0, 445, 0, 387, 368, 609, 0, 0, 385, 338,
	414, 376, 420, 403, 428, 381, 377, 264, 404, 303,
	349, 276, 278, 298, 305, 307, 309, 310, 358, 359,
	371, 392, 405, 406, 407, 302, 286, 386, 287, 320,
	288, 265, 294, 292, 295, 394, 296, 267, 372, 411,
	0, 315, 382, 345, 268, 344, 373, 410, 409, 277,
	436, 442, 443, 532, 0, 448, 610, 611, 612, 457,
	462, 463, 464, 466, 467, 468, 469, 533, 550, 517,
	487, 450, 541, 484, 488, 489, 553, 0, 0, 0,
	441, 334, 335, 0, 313, 261, 262, 606, 299, 364,
	555, 588, 480, 0, 542, 481, 490, 291, 514, 526,
	525, 360, 440, 0, 537, 540, 470, 605, 0, 534,
	549, 608, 548, 602, 370, 0, 391, 546, 493, 0,
	538, 512, 0, 539, 508, 543, 0, 482, 0, 398,
	422, 434, 451, 454, 483, 568, 569, 570, 266, 453,
	572, 573, 574, 575, 576, 577, 578, 571, 425, 515,
	492, 518, 433, 495, 494, 0, 0, 529, 449, 530,
	531, 354, 355, 356, 357, 317, 556, 284, 452, 380,
	0, 516, 0, 0, 0, 0, 0, 0, 0, 0,
	521, 522, 519, 613, 0, 579, 580, 0, 0, 446,
	447, 312, 319, 465, 321, 283, 369, 314, 431, 328,
	0, 458, 523, 459, 582, 585, 583, 584, 361, 324,
	325, 395, 329, 339, 383, 430, 367, 388, 281, 421,
	396, 343, 509, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	564, 563, 562, 561, 560, 559, 558, 557, 0, 0,
	506, 408, 293, 255, 289, 290, 297, 603, 600, 412,
	604, 0, 263, 486, 337, 0, 378, 311, 551, 552,
	0, 0, 211, 212, 213, 214, 215, 216, 217, 218,
	256, 219, 220, 221, 222, 223, 224, 225, 228, 229,
	230, 231, 232, 233, 234, 235, 554, 226, 227, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 0, 0, 0, 257, 258, 259, 260,
	0, 0, 251, 252, 253, 254, 0, 0, 0, 437,
	438, 439, 461, 423, 485, 601, 0, 0, 0, 0,
	0, 0, 0, 535, 547, 581, 0, 590, 591, 593,
	595, 594, 0, 607, 476, 477, 587, 366, 0, 491,
	524, 513, 596, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 336, 528, 510,
	520, 511, 496, 497, 498, 505, 316, 499, 500, 501,
	471, 502, 472, 503, 504, 0, 527, 478, 397, 350,
	545, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1901, 0, 0, 201,
	0, 0, 0, 0, 0, 0, 279, 202, 473, 592,
	475, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 402, 419, 280, 393, 432, 285,
	400, 275, 365, 389, 0, 0, 271, 417, 399, 347,
	326, 327, 270, 0, 384, 304, 318, 301, 363, 0,
	416, 444, 300, 435, 0, 427, 273, 0, 426, 362,
	413, 418, 348, 342, 272, 415, 346, 341, 330, 308,
	460, 331, 332, 322, 374, 340, 375, 323, 352, 351,
	353, 0, 0, 0, 0, 0, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 0, 0, 589, 0, 429, 0, 0, 0, 0,
	0, 0, 401, 0, 0, 333, 0, 0, 0, 445,
	0, 387, 368, 609, 0, 0, 385, 338, 414, 376,
	420, 403, 428, 381, 377, 264, 404, 303, 349, 276,
	278, 298, 305, 307, 309, 310, 358, 359, 371, 392,
	405, 406, 407, 302, 286, 386, 287, 320, 288, 265,
	294, 292, 295, 394, 296, 267, 372, 411, 0, 315,
	382, 345, 268, 344, 373, 410, 409, 277, 436, 442,
	443, 532, 0, 448, 610, 611, 612, 457, 462, 463,
	464, 466, 467, 468, 469, 533, 550, 517, 487, 450,
	541, 484, 488, 489, 553, 0, 0, 0, 441, 334,
	335, 0, 313, 261, 262, 606, 299, 364, 555, 588,
	480, 0, 542, 481, 490, 291, 514, 526, 525, 360,
	440, 0, 537, 540, 470, 605, 0, 534, 549, 608,
	548, 602, 370, 0, 391, 546, 493, 0, 538, 512,
	0, 539, 508, 543, 0, 482, 0, 398, 422, 434,
	451, 454, 483, 568, 569, 570, 266, 453, 572, 573,
	574, 575, 576, 577, 578, 571, 425, 515, 492, 518,
	433, 495, 494, 0, 0, 529, 449, 530, 531, 354,
	355, 356, 357, 317, 556, 284, 452, 380, 0, 516,
	0, 0, 0, 0, 0, 0, 0, 0, 521, 522,
	519, 613, 0, 579, 580, 0, 0, 446, 447, 312,
	319, 465, 321, 283, 369, 314, 431, 328, 0, 458,
	523, 459, 582, 585, 583, 584, 361, 324, 325, 395,
	329, 339, 383, 430, 367, 388, 281, 421, 396, 343,
	509, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 563,
	562, 561, 560, 559, 558, 557, 0, 0, 506, 408,
	293, 255, 289, 290, 297, 603, 600, 412, 604, 0,
	263, 486, 337, 0, 378, 311, 551, 552, 0, 0,
	211, 212, 213, 214, 215, 216, 217, 218, 256, 219,
	220, 221, 222, 223, 224, 225, 228, 229, 230, 231,
	232, 233, 234, 235, 554, 226, 227, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 0, 0, 0, 257, 258, 259, 260, 0, 0,
	251, 252, 253, 254, 0, 0, 0, 437, 438, 439,
	461, 423, 485, 601, 0, 0, 0, 0, 0, 0,
	0, 535, 547, 581, 0, 590, 591, 593, 595, 594,
	0, 607, 476, 477, 587, 366, 0, 491, 524, 513,
	596, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 336, 528, 510, 520, 511,
	496, 497, 498, 505, 316, 499, 500, 501, 471, 502,
	472, 503, 504, 0, 527, 478, 397, 350, 545, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 0, 0,
	0, 0, 0, 0, 279, 202, 473, 592, 475, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 402, 419, 280, 393, 432, 285, 400, 275,
	365, 389, 0, 0, 271, 417, 399, 347, 326, 327,
	270, 0, 384, 304, 318, 301, 363, 0, 416, 444,
	300, 435, 0, 427, 273, 0, 426, 362, 413, 418,
	348, 342, 272, 415, 346, 341, 330, 308, 460, 331,
	332, 322, 374, 340, 375, 323, 352, 351, 353, 0,
	0, 0, 0, 0, 455, 456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 0,
	0, 589, 0, 429, 0, 0, 0, 0, 0, 0,
	401, 0, 0, 333, 0, 0, 0, 445, 0, 387,
	368, 609, 0, 0, 385, 338, 414, 376, 420, 403,
	428, 381, 377, 264, 404, 303, 349, 276, 278, 298,
	305, 307, 309, 310, 358, 359, 371, 392, 405, 406,
	407, 302, 286, 386, 287, 320, 288, 265, 294, 292,
	295, 394, 296, 267, 372, 411, 0, 315, 382, 345,
	268, 344, 373, 410, 409, 277, 436, 442, 443, 532,
	0, 448, 610, 611, 612, 457, 462, 463, 464, 466,
	467, 468, 469, 533, 550, 517, 487, 450, 541, 484,
	488, 489, 553, 0, 0, 0, 441, 334, 335, 0,
	313, 261, 262, 606, 299, 364, 555, 588, 480, 0,
	542, 481, 490, 291, 514, 526, 525, 360, 440, 0,
	537, 540, 470, 605, 0, 534, 549, 608, 548, 602,
	370, 0, 391, 546, 493, 0, 538, 512, 0, 539,
	508, 543, 0, 482, 0, 398, 422, 434, 451, 454,
	483, 568, 569, 570, 266, 453, 572, 573, 574, 575,
	576, 577, 578, 571, 425, 515, 492, 518, 433, 495,
	494, 0, 0, 529, 449, 530, 531, 354, 355, 356,
	357, 317, 556, 284, 452, 380, 0, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 521, 522, 519, 613,
	0, 579, 580, 0, 0, 446, 447, 312, 319, 465,
	321, 283, 369, 314, 431, 328, 0, 458, 523, 459,
	582, 585, 583, 584, 361, 324, 325, 395, 329, 339,
	383, 430, 367, 388, 281, 421, 396, 343, 509, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 563, 562, 561,
	560, 559, 558, 557, 0, 0, 506, 408, 293, 255,
	289, 290, 297, 603, 600, 412, 604, 0, 263, 486,
	337, 0, 378, 311, 551, 552, 0, 0, 211, 212,
	213, 214, 215, 216, 217, 218, 256, 219, 220, 221,
	222, 223, 224, 225, 228, 229, 230, 231, 232, 233,
	234, 235, 554, 226, 227, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 0,
	0, 0, 257, 258, 259, 260, 0, 0, 251, 252,
	253, 254, 0, 0, 0, 437, 438, 439, 461, 423,
	485, 601, 0, 0, 0, 0, 0, 0, 0, 535,
	547, 581, 0, 590, 591, 593, 595, 594, 0, 607,
	476, 477, 587, 366, 0, 491, 524, 513, 596, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 336, 528, 510, 520, 511, 496, 497,
	498, 505, 316, 499, 500, 501, 471, 502, 472, 503,
	504, 0, 527, 478, 397, 350, 545, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 0, 2920, 0,
	0, 0, 279, 202, 473, 592, 475, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	402, 419, 280, 393, 432, 285, 400, 275, 365, 389,
	0, 0, 271, 417, 399, 347, 326, 327, 270, 0,
	384, 304, 318, 301, 363, 0, 416, 444, 300, 435,
	0, 427, 273, 0, 426, 362, 413, 418, 348, 342,
	272, 415, 346, 341, 330, 308, 460, 331, 332, 322,
	374, 340, 375, 323, 352, 351, 353, 0, 0, 0,
	0, 0, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 0, 0, 589,
	0, 429, 0, 0, 0, 0, 0, 0, 401, 0,
	0, 333, 0, 0, 0, 445, 0, 387, 368, 609,
	0, 0, 385, 338, 414, 376, 420, 403, 428, 381,
	377, 264, 404, 303, 349, 276, 278, 298, 305, 307,
	309, 310, 358, 359, 371, 392, 405, 406, 407, 302,
	286, 386, 287, 320, 288, 265, 294, 292, 295, 394,
	296, 267, 372, 411, 0, 315, 382, 345, 268, 344,
	373, 410, 409, 277, 436, 442, 443, 532, 0, 448,
	610, 611, 612, 457, 462, 463, 464, 466, 467, 468,
	469, 533, 550, 517, 487, 450, 541, 484, 488, 489,
	553, 0, 0, 0, 441, 334, 335, 0, 313, 261,
	262, 606, 299, 364, 555, 588, 480, 0, 542, 481,
	490, 291, 514, 526, 525, 360, 440, 0, 537, 540,
	470, 605, 0, 534, 549, 608, 548, 602, 370, 0,
	391, 546, 493, 0, 538, 512, 0, 539, 508, 543,
	0, 482, 0, 398, 422, 434, 451, 454, 483, 568,
	569, 570, 266, 453, 572, 573, 574, 575, 576, 577,
	578, 571, 425, 515, 492, 518, 433, 495, 494, 0,
	0, 529, 449, 530, 531, 354, 355, 356, 357, 317,
	556, 284, 452, 380, 0, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 521, 522, 519, 613, 0, 579,
	580, 0, 0, 446, 447, 312, 319, 465, 321, 283,
	369, 314, 431, 328, 0, 458, 523, 459, 582, 585,
	583, 584, 361, 324, 325, 395, 329, 339, 383, 430,
	367, 388, 281, 421, 396, 343, 509, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 563, 562, 561, 560, 559,
	558, 557, 0, 0, 506, 408, 293, 255, 289, 290,
	297, 603, 600, 412, 604, 0, 263, 486, 337, 0,
	378, 311, 551, 552, 0, 0, 211, 212, 213, 214,
	215, 216, 217, 218, 256, 219, 220, 221, 222, 223,
	224, 225, 228, 229, 230, 231, 232, 233, 234, 235,
	554, 226, 227, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 0, 0, 0,
	257, 258, 259, 260, 0, 0, 251, 252, 253, 254,
	0, 0, 0, 437, 438, 439, 461, 423, 485, 601,
	0, 0, 0, 0, 0, 0, 0, 535, 547, 581,
	0, 590, 591, 593, 595, 594, 0, 607, 476, 477,
	587, 366, 0, 491, 524, 513, 596, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 336, 528, 510, 520, 511, 496, 497, 498, 505,
	316, 499, 500, 501, 471, 502, 472, 503, 504, 0,
	527, 478, 397, 350, 545, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 0, 0, 0,
	279, 202, 473, 592, 475, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2830, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 402, 419,
	280, 393, 432, 285, 400, 275, 365, 389, 0, 0,
	271, 417, 399, 347, 326, 327, 270, 0, 384, 304,
	318, 301, 363, 0, 416, 444, 300, 435, 0, 427,
	273, 0, 426, 362, 413, 418, 348, 342, 272, 415,
	346, 341, 330, 308, 460, 331, 332, 322, 374, 340,
	375, 323, 352, 351, 353, 0, 0, 0, 0, 0,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 0, 0, 589, 0, 429,
	0, 0, 0, 0, 0, 0, 401, 0, 0, 333,
	0, 0, 0, 445, 0, 387, 368, 609, 0, 0,
	385, 338, 414, 376, 420, 403, 428, 381, 377, 264,
	404, 303, 349, 276, 278, 298, 305, 307, 309, 310,
	358, 359, 371, 392, 405, 406, 407, 302, 286, 386,
	287, 320, 288, 265, 294, 292, 295, 394, 296, 267,
	372, 411, 0, 315, 382, 345, 268, 344, 373, 410,
	409, 277, 436, 442, 443, 532, 0, 448, 610, 611,
	612, 457, 462, 463, 464, 466, 467, 468, 469, 533,
	550, 517, 487, 450, 541, 484, 488, 489, 553, 0,
	0, 0, 441, 334, 335, 0, 313, 261, 262, 606,
	299, 364, 555, 588, 480, 0, 542, 481, 490, 291,
	514, 526, 525, 360, 440, 0, 537, 540, 470, 605,
	0, 534, 549, 608, 548, 602, 370, 0, 391, 546,
	493, 0, 538, 512, 0, 539, 508, 543, 0, 482,
	0, 398, 422, 434, 451, 454, 483, 568, 569, 570,
	266, 453, 572, 573, 574, 575, 576, 577, 578, 571,
	425, 515, 492, 518, 433, 495, 494, 0, 0, 529,
	449, 530, 531, 354, 355, 356, 357, 317, 556, 284,
	452, 380, 0, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 521, 522, 519, 613, 0, 579, 580, 0,
	0, 446, 447, 312, 319, 465, 321, 283, 369, 314,
	431, 328, 0, 458, 523, 459, 582, 585, 583, 584,
	361, 324, 325, 395, 329, 339, 383, 430, 367, 388,
	281, 421, 396, 343, 509, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 563, 562, 561, 560, 559, 558, 557,
	0, 0, 506, 408, 293, 255, 289, 290, 297, 603,
	600, 412, 604, 0, 263, 486, 337, 0, 378, 311,
	551, 552, 0, 0, 211, 212, 213, 214, 215, 216,
	217, 218, 256, 219, 220, 221, 222, 223, 224, 225,
	228, 229, 230, 231, 232, 233, 234, 235, 554, 226,
	227, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 0, 0, 0, 257, 258,
	259, 260, 0, 0, 251, 252, 253, 254, 0, 0,
	0, 437, 438, 439, 461, 423, 485, 601, 0, 0,
	0, 0, 0, 0, 0, 535, 547, 581, 0, 590,
	591, 593, 595, 594, 0, 607, 476, 477, 587, 366,
	0, 491, 524, 513, 596, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 336,
	528, 510, 520, 511, 496, 497, 498, 505, 316, 499,
	500, 501, 471, 502, 472, 503, 504, 0, 527, 478,
	397, 350, 545, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 0, 1431, 0, 0, 0, 279, 202,
	473, 592, 475, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 402, 419, 280, 393,
	432, 285, 400, 275, 365, 389, 0, 0, 271, 417,
	399, 347, 326, 327, 270, 0, 384, 304, 318, 301,
	363, 0, 416, 444, 300, 435, 0, 427, 273, 0,
	426, 362, 413, 418, 348, 342, 272, 415, 346, 341,
	330, 308, 460, 331, 332, 322, 374, 340, 375, 323,
	352, 351, 353, 0, 0, 0, 0, 0, 455, 456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 0, 0, 589, 0, 429, 0, 0,
	0, 0, 0, 0, 401, 0, 0, 333, 0, 0,
	0, 445, 0, 387, 368, 609, 0, 0, 385, 338,
	414, 376, 420, 403, 428, 381, 377, 264, 404, 303,
	349, 276, 278, 298, 305, 307, 309, 310, 358, 359,
	371, 392, 405, 406, 407, 302, 286, 386, 287, 320,
	288, 265, 294, 292, 295, 394, 296, 267, 372, 411,
	0, 315, 382, 345, 268, 344, 373, 410, 409, 277,
	436, 442, 443, 532, 0, 448, 610, 611, 612, 457,
	462, 463, 464, 466, 467, 468, 469, 533, 550, 517,
	487, 450, 541, 484, 488, 489, 553, 0, 0, 0,
	441, 334, 335, 0, 313, 261, 262, 606, 299, 364,
	555, 588, 480, 0, 542, 481, 490, 291, 514, 526,
	525, 360, 440, 0, 537, 540, 470, 605, 0, 534,
	549, 608, 548, 602, 370, 0, 391, 546, 493, 0,
	538, 512, 0, 539, 508, 543, 0, 482, 0, 398,
	422, 434, 451, 454, 483, 568, 569, 570, 266, 453,
	572, 573, 574, 575, 576, 577, 578, 571, 425, 515,
	492, 518, 433, 495, 494, 0, 0, 529, 449, 530,
	531, 354, 355, 356, 357, 317, 556, 284, 452, 380,
	0, 516, 0, 0, 0, 0, 0, 0, 0, 0,
	521, 522, 519, 613, 0, 579, 580, 0, 0, 446,
	447, 312, 319, 465, 321, 283, 369, 314, 431, 328,
	0, 458, 523, 459, 582, 585, 583, 584, 361, 324,
	325, 395, 329, 339, 383, 430, 367, 388, 281, 421,
	396, 343, 509, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	564, 563, 562, 561, 560, 559, 558, 557, 0, 0,
	506, 408, 293, 255, 289, 290, 297, 603, 600, 412,
	604, 0, 263, 486, 337, 0, 378, 311, 551, 552,
	0, 0, 211, 212, 213, 214, 215, 216, 217, 218,
	256, 219, 220, 221, 222, 223, 224, 225, 228, 229,
	230, 231, 232, 233, 234, 235, 554, 226, 227, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 0, 0, 0, 257, 258, 259, 260,
	0, 0, 251, 252, 253, 254, 0, 0, 0, 437,
	438, 439, 461, 423, 485, 601, 0, 0, 0, 0,
	0, 0, 0, 535, 547, 581, 0, 590, 591, 593,
	595, 594, 0, 607, 476, 477, 587, 366, 0, 491,
	524, 513, 596, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 336, 528, 510,
	520, 511, 496, 497, 498, 505, 316, 499, 500, 501,
	471, 502, 472, 503, 504, 0, 527, 478, 397, 350,
	545, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 201,
	0, 0, 2322, 0, 0, 0, 279, 202, 473, 592,
	475, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 402, 419, 280, 393, 432, 285,
	400, 275, 365, 389, 0, 0, 271, 417, 399, 347,
	326, 327, 270, 0, 384, 304, 318, 301, 363, 0,
	416, 444, 300, 435, 0, 427, 273, 0, 426, 362,
	413, 418, 348, 342, 272, 415, 346, 341, 330, 308,
	460, 331, 332, 322, 374, 340, 375, 323, 352, 351,
	353, 0, 0, 0, 0, 0, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 0, 0, 589, 0, 429, 0, 0, 0, 0,
	0, 0, 401, 0, 0, 333, 0, 0, 0, 445,
	0, 387, 368, 609, 0, 0, 385, 338, 414, 376,
	420, 403, 428, 381, 377, 264, 404, 303, 349, 276,
	278, 298, 305, 307, 309, 310, 358, 359, 371, 392,
	405, 406, 407, 302, 286, 386, 287, 320, 288, 265,
	294, 292, 295, 394, 296, 267, 372, 411, 0, 315,
	382, 345, 268, 344, 373, 410, 409, 277, 436, 442,
	443, 532, 0, 448, 610, 611, 612, 457, 462, 463,
	464, 466, 467, 468, 469, 533, 550, 517, 487, 450,
	541, 484, 488, 489, 553, 0, 0, 0, 441, 334,
	335, 0, 313, 261, 262, 606, 299, 364, 555, 588,
	480, 0, 542, 481, 490, 291, 514, 526, 525, 360,
	440, 0, 537, 540, 470, 605, 0, 534, 549, 608,
	548, 602, 370, 0, 391, 546, 493, 0, 538, 512,
	0, 539, 508, 543, 0, 482, 0, 398, 422, 434,
	451, 454, 483, 568, 569, 570, 266, 453, 572, 573,
	574, 575, 576, 577, 578, 571, 425, 515, 492, 518,
	433, 495, 494, 0, 0, 529, 449, 530, 531, 354,
	355, 356, 357, 317, 556, 284, 452, 380, 0, 516,
	0, 0, 0, 0, 0, 0, 0, 0, 521, 522,
	519, 613, 0, 579, 580, 0, 0, 446, 447, 312,
	319, 465, 321, 283, 369, 314, 431, 328, 0, 458,
	523, 459, 582, 585, 583, 584, 361, 324, 325, 395,
	329, 339, 383, 430, 367, 388, 281, 421, 396, 343,
	509, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 563,
	562, 561, 560, 559, 558, 557, 0, 0, 506, 408,
	293, 255, 289, 290, 297, 603, 600, 412, 604, 0,
	263, 486, 337, 0, 378, 311, 551, 552, 0, 0,
	211, 212, 213, 214, 215, 216, 217, 218, 256, 219,
	220, 221, 222, 223, 224, 225, 228, 229, 230, 231,
	232, 233, 234, 235, 554, 226, 227, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 0, 0, 0, 257, 258, 259, 260, 0, 0,
	251, 252, 253, 254, 0, 0, 0, 437, 438, 439,
	461, 423, 485, 601, 0, 0, 0, 0, 0, 0,
	0, 535, 547, 581, 0, 590, 591, 593, 595, 594,
	0, 607, 476, 477, 587, 366, 0, 491, 524, 513,
	596, 479, 0, 0, 2658, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 336, 528, 510, 520, 511,
	496, 497, 498, 505, 316, 499, 500, 501, 471, 502,
	472, 503, 504, 0, 527, 478, 397, 350, 545, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 0, 0,
	0, 0, 0, 0, 279, 202, 473, 592, 475, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 402, 419, 280, 393, 432, 285, 400, 275,
	365, 389, 0, 0, 271, 417, 399, 347, 326, 327,
	270, 0, 384, 304, 318, 301, 363, 0, 416, 444,
	300, 435, 0, 427, 273, 0, 426, 362, 413, 418,
	348, 342, 272, 415, 346, 341, 330, 308, 460, 331,
	332, 322, 374, 340, 375, 323, 352, 351, 353, 0,
	0, 0, 0, 0, 455, 456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 0,
	0, 589, 0, 429, 0, 0, 0, 0, 0, 0,
	401, 0, 0, 333, 0, 0, 0, 445, 0, 387,
	368, 609, 0, 0, 385, 338, 414, 376, 420, 403,
	428, 381, 377, 264, 404, 303, 349, 276, 278, 298,
	305, 307, 309, 310, 358, 359, 371, 392, 405, 406,
	407, 302, 286, 386, 287, 320, 288, 265, 294, 292,
	295, 394, 296, 267, 372, 411, 0, 315, 382, 345,
	268, 344, 373, 410, 409, 277, 436, 442, 443, 532,
	0, 448, 610, 611, 612, 457, 462, 463, 464, 466,
	467, 468, 469, 533, 550, 517, 487, 450, 541, 484,
	488, 489, 553, 0, 0, 0, 441, 334, 335, 0,
	313, 261, 262, 606, 299, 364, 555, 588, 480, 0,
	542, 481, 490, 291, 514, 526, 525, 360, 440, 0,
	537, 540, 470, 605, 0, 534, 549, 608, 548, 602,
	370, 0, 391, 546, 493, 0, 538, 512, 0, 539,
	508, 543, 0, 482, 0, 398, 422, 434, 451, 454,
	483, 568, 569, 570, 266, 453, 572, 573, 574, 575,
	576, 577, 578, 571, 425, 515, 492, 518, 433, 495,
	494, 0, 0, 529, 449, 530, 531, 354, 355, 356,
	357, 317, 556, 284, 452, 380, 0, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 521, 522, 519, 613,
	0, 579, 580, 0, 0, 446, 447, 312, 319, 465,
	321, 283, 369, 314, 431, 328, 0, 458, 523, 459,
	582, 585, 583, 584, 361, 324, 325, 395, 329, 339,
	383, 430, 367, 388, 281, 421, 396, 343, 509, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 563, 562, 561,
	560, 559, 558, 557, 0, 0, 506, 408, 293, 255,
	289, 290, 297, 603, 600, 412, 604, 0, 263, 486,
	337, 0, 378, 311, 551, 552, 0, 0, 211, 212,
	213, 214, 215, 216, 217, 218, 256, 219, 220, 221,
	222, 223, 224, 225, 228, 229, 230, 231, 232, 233,
	234, 235, 554, 226, 227, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 0,
	0, 0, 257, 258, 259, 260, 0, 0, 251, 252,
	253, 254, 0, 0, 0, 437, 438, 439, 461, 423,
	485, 601, 0, 0, 0, 0, 0, 0, 0, 535,
	547, 581, 0, 590, 591, 593, 595, 594, 0, 607,
	476, 477, 587, 366, 0, 491, 524, 513, 596, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 336, 528, 510, 520, 511, 496, 497,
	498, 505, 316, 499, 500, 501, 471, 502, 472, 503,
	504, 0, 527, 478, 397, 350, 545, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 0, 0, 0,
	0, 0, 279, 202, 473, 592, 475, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2035, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	402, 419, 280, 393, 432, 285, 400, 275, 365, 389,
	0, 0, 271, 417, 399, 347, 326, 327, 270, 0,
	384, 304, 318, 301, 363, 0, 416, 444, 300, 435,
	0, 427, 273, 0, 426, 362, 413, 418, 348, 342,
	272, 415, 346, 341, 330, 308, 460, 331, 332, 322,
	374, 340, 375, 323, 352, 351, 353, 0, 0, 0,
	0, 0, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 0, 0, 589,
	0, 429, 0, 0, 0, 0, 0, 0, 401, 0,
	0, 333, 0, 0, 0, 445, 0, 387, 368, 609,
	0, 0, 385, 338, 414, 376, 420, 403, 428, 381,
	377, 264, 404, 303, 349, 276, 278, 298, 305, 307,
	309, 310, 358, 359, 371, 392, 405, 406, 407, 302,
	286, 386, 287, 320, 288, 265, 294, 292, 295, 394,
	296, 267, 372, 411, 0, 315, 382, 345, 268, 344,
	373, 410, 409, 277, 436, 442, 443, 532, 0, 448,
	610, 611, 612, 457, 462, 463, 464, 466, 467, 468,
	469, 533, 550, 517, 487, 450, 541, 484, 488, 489,
	553, 0, 0, 0, 441, 334, 335, 0, 313, 261,
	262, 606, 299, 364, 555, 588, 480, 0, 542, 481,
	490, 291, 514, 526, 525, 360, 440, 0, 537, 540,
	470, 605, 0, 534, 549, 608, 548, 602, 370, 0,
	391, 546, 493, 0, 538, 512, 0, 539, 508, 543,
	0, 482, 0, 398, 422, 434, 451, 454, 483, 568,
	569, 570, 266, 453, 572, 573, 574, 575, 576, 577,
	578, 571, 425, 515, 492, 518, 433, 495, 494, 0,
	0, 529, 449, 530, 531, 354, 355, 356, 357, 317,
	556, 284, 452, 380, 0, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 521, 522, 519, 613, 0, 579,
	580, 0, 0, 446, 447, 312, 319, 465, 321, 283,
	369, 314, 431, 328, 0, 458, 523, 459, 582, 585,
	583, 584, 361, 324, 325, 395, 329, 339, 383, 430,
	367, 388, 281, 421, 396, 343, 509, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 563, 562, 561, 560, 559,
	558, 557, 0, 0, 506, 408, 293, 255, 289, 290,
	297, 603, 600, 412, 604, 0, 263, 486, 337, 0,
	378, 311, 551, 552, 0, 0, 211, 212, 213, 214,
	215, 216, 217, 218, 256, 219, 220, 221, 222, 223,
	224, 225, 228, 229, 230, 231, 232, 233, 234, 235,
	554, 226, 227, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 0, 0, 0,
	257, 258, 259, 260, 0, 0, 251, 252, 253, 254,
	0, 0, 0, 437, 438, 439, 461, 423, 485, 601,
	0, 0, 0, 0, 0, 0, 0, 535, 547, 581,
	0, 590, 591, 593, 595, 594, 0, 607, 476, 477,
	587, 366, 0, 491, 524, 513, 596, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 336, 528, 510, 520, 511, 496, 497, 498, 505,
	316, 499, 500, 501, 471, 502, 472, 503, 504, 0,
	527, 478, 397, 350, 545, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 0, 0, 0,
	279, 202, 473, 592, 475, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2399, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 402, 419,
	280, 393, 432, 285, 400, 275, 365, 389, 0, 0,
	271, 417, 399, 347, 326, 327, 270, 0, 384, 304,
	318, 301, 363, 0, 416, 444, 300, 435, 0, 427,
	273, 0, 426, 362, 413, 418, 348, 342, 272, 415,
	346, 341, 330, 308, 460, 331, 332, 322, 374, 340,
	375, 323, 352, 351, 353, 0, 0, 0, 0, 0,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 0, 0, 589, 0, 429,
	0, 0, 0, 0, 0, 0, 401, 0, 0, 333,
	0, 0, 0, 445, 0, 387, 368, 609, 0, 0,
	385, 338, 414, 376, 420, 403, 428, 381, 377, 264,
	404, 303, 349, 276, 278, 298, 305, 307, 309, 310,
	358, 359, 371, 392, 405, 406, 407, 302, 286, 386,
	287, 320, 288, 265, 294, 292, 295, 394, 296, 267,
	372, 411, 0, 315, 382, 345, 268, 344, 373, 410,
	409, 277, 436, 442, 443, 532, 0, 448, 610, 611,
	612, 457, 462, 463, 464, 466, 467, 468, 469, 533,
	550, 517, 487, 450, 541, 484, 488, 489, 553, 0,
	0, 0, 441, 334, 335, 0, 313, 261, 262, 606,
	299, 364, 555, 588, 480, 0, 542, 481, 490, 291,
	514, 526, 525, 360, 440, 0, 537, 540, 470, 605,
	0, 534, 549, 608, 548, 602, 370, 0, 391, 546,
	493, 0, 538, 512, 0, 539, 508, 543, 0, 482,
	0, 398, 422, 434, 451, 454, 483, 568, 569, 570,
	266, 453, 572, 573, 574, 575, 576, 577, 578, 571,
	425, 515, 492, 518, 433, 495, 494, 0, 0, 529,
	449, 530, 531, 354, 355, 356, 357, 317, 556, 284,
	452, 380, 0, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 521, 522, 519, 613, 0, 579, 580, 0,
	0, 446, 447, 312, 319, 465, 321, 283, 369, 314,
	431, 328, 0, 458, 523, 459, 582, 585, 583, 584,
	361, 324, 325, 395, 329, 339, 383, 430, 367, 388,
	281, 421, 396, 343, 509, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 563, 562, 561, 560, 559, 558, 557,
	0, 0, 506, 408, 293, 255, 289, 290, 297, 603,
	600, 412, 604, 0, 263, 486, 337, 0, 378, 311,
	551, 552, 0, 0, 211, 212, 213, 214, 215, 216,
	217, 218, 256, 219, 220, 221, 222, 223, 224, 225,
	228, 229, 230, 231, 232, 233, 234, 235, 554, 226,
	227, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 0, 0, 0, 257, 258,
	259, 260, 0, 0, 251, 252, 253, 254, 0, 0,
	0, 437, 438, 439, 461, 423, 485, 601, 0, 0,
	0, 0, 0, 0, 0, 535, 547, 581, 0, 590,
	591, 593, 595, 594, 0, 607, 476, 477, 587, 366,
	0, 491, 524, 513, 596, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 336,
	528, 510, 520, 511, 496, 497, 498, 505, 316, 499,
	500, 501, 471, 502, 472, 503, 504, 0, 527, 478,
	397, 350, 545, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 0, 2397, 0, 0, 0, 279, 202,
	473, 592, 475, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 402, 419, 280, 393,
	432, 285, 400, 275, 365, 389, 0, 0, 271, 417,
	399, 347, 326, 327, 270, 0, 384, 304, 318, 301,
	363, 0, 416, 444, 300, 435, 0, 427, 273, 0,
	426, 362, 413, 418, 348, 342, 272, 415, 346, 341,
	330, 308, 460, 331, 332, 322, 374, 340, 375, 323,
	352, 351, 353, 0, 0, 0, 0, 0, 455, 456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 0, 0, 589, 0, 429, 0, 0,
	0, 0, 0, 0, 401, 0, 0, 333, 0, 0,
	0, 445, 0, 387, 368, 609, 0, 0, 385, 338,
	414, 376, 420, 403, 428, 381, 377, 264, 404, 303,
	349, 276, 278, 298, 305, 307, 309, 310, 358, 359,
	371, 392, 405, 406, 407, 302, 286, 386, 287, 320,
	288, 265, 294, 292, 295, 394, 296, 267, 372, 411,
	0, 315, 382, 345, 268, 344, 373, 410, 409, 277,
	436, 442, 443, 532, 0, 448, 610, 611, 612, 457,
	462, 463, 464, 466, 467, 468, 469, 533, 550, 517,
	487, 450, 541, 484, 488, 489, 553, 0, 0, 0,
	441, 334, 335, 0, 313, 261, 262, 606, 299, 364,
	555, 588, 480, 0, 542, 481, 490, 291, 514, 526,
	525, 360, 440, 0, 537, 540, 470, 605, 0, 534,
	549, 608, 548, 602, 370, 0, 391, 546, 493, 0,
	538, 512, 0, 539, 508, 543, 0, 482, 0, 398,
	422, 434, 451, 454, 483, 568, 569, 570, 266, 453,
	572, 573, 574, 575, 576, 577, 578, 571, 425, 515,
	492, 518, 433, 495, 494, 0, 0, 529, 449, 530,
	531, 354, 355, 356, 357, 317, 556, 284, 452, 380,
	0, 516, 0, 0, 0, 0, 0, 0, 0, 0,
	521, 522, 519, 613, 0, 579, 580, 0, 0, 446,
	447, 312, 319, 465, 321, 283, 369, 314, 431, 328,
	0, 458, 523, 459, 582, 585, 583, 584, 361, 324,
	325, 395, 329, 339, 383, 430, 367, 388, 281, 421,
	396, 343, 509, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	564, 563, 562, 561, 560, 559, 558, 557, 0, 0,
	506, 408, 293, 255, 289, 290, 297, 603, 600, 412,
	604, 0, 263, 486, 337, 0, 378, 311, 551, 552,
	0, 0, 211, 212, 213, 214, 215, 216, 217, 218,
	256, 219, 220, 221, 222, 223, 224, 225, 228, 229,
	230, 231, 232, 233, 234, 235, 554, 226, 227, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 0, 0, 0, 257, 258, 259, 260,
	0, 0, 251, 252, 253, 254, 0, 0, 0, 437,
	438, 439, 461, 423, 485, 601, 0, 0, 0, 0,
	0, 0, 0, 535, 547, 581, 0, 590, 591, 593,
	595, 594, 2187, 607, 476, 477, 587, 0, 366, 0,
	491, 524, 513, 596, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 336, 528,
	510, 520, 511, 496, 497, 498, 505, 316, 499, 500,
	501, 471, 502, 472, 503, 504, 0, 527, 478, 397,
	350, 545, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	201, 0, 0, 0, 0, 0, 0, 279, 202, 473,
	592, 475, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 402, 419, 280, 393, 432,
	285, 400, 275, 365, 389, 0, 0, 271, 417, 399,
	347, 326, 327, 270, 0, 384, 304, 318, 301, 363,
	0, 416, 444, 300, 435, 0, 427, 273, 0, 426,
	362, 413, 418, 348, 342, 272, 415, 346, 341, 330,
	308, 460, 331, 332, 322, 374, 340, 375, 323, 352,
	351, 353, 0, 0, 0, 0, 0, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 586, 0, 0, 589, 0, 429, 0, 0, 0,
	0, 0, 0, 401, 0, 0, 333, 0, 0, 0,
	445, 0, 387, 368, 609, 0, 0, 385, 338, 414,
	376, 420, 403, 428, 381, 377, 264, 404, 303, 349,
	276, 278, 298, 305, 307, 309, 310, 358, 359, 371,
	392, 405, 406, 407, 302, 286, 386, 287, 320, 288,
	265, 294, 292, 295, 394, 296, 267, 372, 411, 0,
	315, 382, 345, 268, 344, 373, 410, 409, 277, 436,
	442, 443, 532, 0, 448, 610, 611, 612, 457, 462,
	463, 464, 466, 467, 468, 469, 533, 550, 517, 487,
	450, 541, 484, 488, 489, 553, 0, 0, 0, 441,
	334, 335, 0, 313, 261, 262, 606, 299, 364, 555,
	588, 480, 0, 542, 481, 490, 291, 514, 526, 525,
	360, 440, 0, 537, 540, 470, 605, 0, 534, 549,
	608, 548, 602, 370, 0, 391, 546, 493, 0, 538,
	512, 0, 539, 508, 543, 0, 482, 0, 398, 422,
	434, 451, 454, 483, 568, 569, 570, 266, 453, 572,
	573, 574, 575, 576, 577, 578, 571, 425, 515, 492,
	518, 433, 495, 494, 0, 0, 529, 449, 530, 531,
	354, 355, 356, 357, 317, 556, 284, 452, 380, 0,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 521,
	522, 519, 613, 0, 579, 580, 0, 0, 446, 447,
	312, 319, 465, 321, 283, 369, 314, 431, 328, 0,
	458, 523, 459, 582, 585, 583, 584, 361, 324, 325,
	395, 329, 339, 383, 430, 367, 388, 281, 421, 396,
	343, 509, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	563, 562, 561, 560, 559, 558, 557, 0, 0, 506,
	408, 293, 255, 289, 290, 297, 603, 600, 412, 604,
	0, 263, 486, 337, 0, 378, 311, 551, 552, 0,
	0, 211, 212, 213, 214, 215, 216, 217, 218, 256,
	219, 220, 221, 222, 223, 224, 225, 228, 229, 230,
	231, 232, 233, 234, 235, 554, 226, 227, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 0, 0, 0, 257, 258, 259, 260, 0,
	0, 251, 252, 253, 254, 0, 0, 0, 437, 438,
	439, 461, 423, 485, 601, 0, 0, 0, 0, 0,
	0, 0, 535, 547, 581, 0, 590, 591, 593, 595,
	594, 0, 607, 476, 477, 587, 366, 0, 491, 524,
	513, 596, 479, 0, 1888, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 336, 528, 510, 520,
	511, 496, 497, 498, 505, 316, 499, 500, 501, 471,
	502, 472, 503, 504, 0, 527, 478, 397, 350, 545,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 201, 0,
	0, 0, 0, 0, 0, 279, 202, 473, 592, 475,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 402, 419, 280, 393, 432, 285, 400,
	275, 365, 389, 0, 0, 271, 417, 399, 347, 326,
	327, 270, 0, 384, 304, 318, 301, 363, 0, 416,
	444, 300, 435, 0, 427, 273, 0, 426, 362, 413,
	418, 348, 342, 272, 415, 346, 341, 330, 308, 460,
	331, 332, 322, 374, 340, 375, 323, 352, 351, 353,
	0, 0, 0, 0, 0, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 586,
	0, 0, 589, 0, 429, 0, 0, 0, 0, 0,
	0, 401, 0, 0, 333, 0, 0, 0, 445, 0,
	387, 368, 609, 0, 0, 385, 338, 414, 376, 420,
	403, 428, 381, 377, 264, 404, 303, 349, 276, 278,
	298, 305, 307, 309, 310, 358, 359, 371, 392, 405,
	406, 407, 302, 286, 386, 287, 320, 288, 265, 294,
	292, 295, 394, 296, 267, 372, 411, 0, 315, 382,
	345, 268, 344, 373, 410, 409, 277, 436, 442, 443,
	532, 0, 448, 610, 611, 612, 457, 462, 463, 464,
	466, 467, 468, 469, 533, 550, 517, 487, 450, 541,
	484, 488, 489, 553, 0, 0, 0, 441, 334, 335,
	0, 313, 261, 262, 606, 299, 364, 555, 588, 480,
	0, 542, 481, 490, 291, 514, 526, 525, 360, 440,
	0, 537, 540, 470, 605, 0, 534, 549, 608, 548,
	602, 370, 0, 391, 546, 493, 0, 538, 512, 0,
	539, 508, 543, 0, 482, 0, 398, 422, 434, 451,
	454, 483, 568, 569, 570, 266, 453, 572, 573, 574,
	575, 576, 577, 578, 571, 425, 515, 492, 518, 433,
	495, 494, 0, 0, 529, 449, 530, 531, 354, 355,
	356, 357, 317, 556, 284, 452, 380, 0, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 521, 522, 519,
	613, 0, 579, 580, 0, 0, 446, 447, 312, 319,
	465, 321, 283, 369, 314, 431, 328, 0, 458, 523,
	459, 582, 585, 583, 584, 361, 324, 325, 395, 329,
	339, 383, 430, 367, 388, 281, 421, 396, 343, 509,
	536, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 563, 562,
	561, 560, 559, 558, 557, 0, 0, 506, 408, 293,
	255, 289, 290, 297, 603, 600, 412, 604, 0, 263,
	486, 337, 0, 378, 311, 551, 552, 0, 0, 211,
	212, 213, 214, 215, 216, 217, 218, 256, 219, 220,
	221, 222, 223, 224, 225, 228, 229, 230, 231, 232,
	233, 234, 235, 554, 226, 227, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	0, 0, 0, 257, 258, 259, 260, 0, 0, 251,
	252, 253, 254, 0, 0, 0, 437, 438, 439, 461,
	423, 485, 601, 0, 0, 0, 0, 0, 0, 0,
	535, 547, 581, 0, 590, 591, 593, 595, 594, 0,
	607, 476, 477, 587, 366, 0, 491, 524, 513, 596,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 336, 528, 510, 520, 511, 496,
	497, 498, 505, 316, 499, 500, 501, 471, 502, 472,
	503, 504, 0, 527, 478, 397, 350, 545, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 201, 0, 0, 1431,
	0, 0, 0, 279, 202, 473, 592, 475, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 402, 419, 280, 393, 432, 285, 400, 275, 365,
	389, 0, 0, 271, 417, 399, 347, 326, 327, 270,
	0, 384, 304, 318, 301, 363, 0, 416, 444, 300,
	435, 0, 427, 273, 0, 426, 362, 413, 418, 348,
	342, 272, 415, 346, 341, 330, 308, 460, 331, 332,
	322, 374, 340, 375, 323, 352, 351, 353, 0, 0,
	0, 0, 0, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 586, 0, 0,
	589, 0, 429, 0, 0, 0, 0, 0, 0, 401,
	0, 0, 333, 0, 0, 0, 445, 0, 387, 368,
	609, 0, 0, 385, 338, 414, 376, 420, 403, 428,
	1794, 377, 264, 404, 303, 349, 276, 278, 298, 305,
	307, 309, 310, 358, 359, 371, 392, 405, 406, 407,
	302, 286, 386, 287, 320, 288, 265, 294, 292, 295,
	394, 296, 267, 372, 411, 0, 315, 382, 345, 268,
	344, 373, 410, 409, 277, 436, 442, 443, 532, 0,
	448, 610, 611, 612, 457, 462, 463, 464, 466, 467,
	468, 469, 533, 550, 517, 487, 450, 541, 484, 488,
	489, 553, 0, 0, 0, 441, 334, 335, 0, 313,
	261, 262, 606, 299, 364, 555, 588, 480, 0, 542,
	481, 490, 291, 514, 526, 525, 360, 440, 0, 537,
	540, 470, 605, 0, 534, 549, 608, 548, 602, 370,
	0, 391, 546, 493, 0, 538, 512, 0, 539, 508,
	543, 0, 482, 0, 398, 422, 434, 451, 454, 483,
	568, 569, 570, 266, 453, 572, 573, 574, 575, 576,
	577, 578, 571, 425, 515, 492, 518, 433, 495, 494,
	0, 0, 529, 449, 530, 531, 354, 355, 356, 357,
	317, 556, 284, 452, 380, 0, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 521, 522, 519, 613, 0,
	579, 580, 0, 0, 446, 447, 312, 319, 465, 321,
	283, 369, 314, 431, 328, 0, 458, 523, 459, 582,
	585, 583, 584, 361, 324, 325, 395, 329, 339, 383,
	430, 367, 388, 281, 421, 396, 343, 509, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 563, 562, 561, 560,
	559, 558, 557, 0, 0, 506, 408, 293, 255, 289,
	290, 297, 603, 600, 412, 604, 0, 263, 486, 337,
	0, 378, 311, 551, 552, 0, 0, 211, 212, 213,
	214, 215, 216, 217, 218, 256, 219, 220, 221, 222,
	223, 224, 225, 228, 229, 230, 231, 232, 233, 234,
	235, 554, 226, 227, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 0, 0,
	0, 257, 258, 259, 260, 0, 0, 251, 252, 253,
	254, 0, 0, 0, 437, 438, 439, 461, 423, 485,
	601, 0, 0, 0, 0, 0, 0, 0, 535, 547,
	581, 0, 590, 591, 593, 595, 594, 0, 607, 476,
	477, 587, 366, 0, 491, 524, 513, 596, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 336, 528, 510, 520, 511, 496, 497, 498,
	505, 316, 499, 500, 501, 471, 502, 472, 503, 504,
	0, 527, 478, 397, 350, 545, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 201, 0, 0, 0, 0, 0,
	0, 279, 202, 473, 592, 475, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 402,
	419, 280, 393, 432, 285, 400, 275, 365, 389, 0,
	0, 271, 417, 399, 347, 326, 327, 270, 0, 384,
	304, 318, 301, 363, 0, 416, 444, 300, 435, 0,
	427, 273, 0, 426, 362, 413, 418, 348, 342, 272,
	415, 346, 341, 330, 308, 460, 331, 332, 322, 374,
	340, 375, 323, 352, 351, 353, 0, 0, 0, 0,
	0, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 586, 0, 0, 589, 0,
	429, 0, 0, 1461, 0, 0, 0, 401, 0, 0,
	333, 0, 0, 0, 445, 0, 387, 368, 609, 0,
	0, 385, 338, 414, 376, 420, 403, 428, 381, 377,
	264, 404, 303, 349, 276, 278, 298, 305, 307, 309,
	310, 358, 359, 371, 392, 405, 406, 407, 302, 286,
	386, 287, 320, 288, 265, 294, 292, 295, 394, 296,
	267, 372, 411, 0, 315, 382, 345, 268, 344, 373,
	410, 409, 277, 436, 442, 443, 532, 0, 448, 610,
	611, 612, 457, 462, 463, 464, 466, 467, 468, 469,
	533, 550, 517, 487, 450, 541, 484, 488, 489, 553,
	0, 0, 0, 441, 334, 335, 0, 313, 261, 262,
	606, 299, 364, 555, 588, 480, 0, 542, 481, 490,
	291, 514, 526, 525, 360, 440, 0, 537, 540, 470,
	605, 0, 534, 549, 608, 548, 602, 370, 0, 391,
	546, 493, 0, 538, 512, 0, 539, 508, 543, 0,
	482, 0, 398, 422, 434, 451, 454, 483, 568, 569,
	570, 266, 453, 572, 573, 574, 575, 576, 577, 578,
	571, 425, 515, 492, 518, 433, 495, 494, 0, 0,
	529, 449, 530, 531, 354, 355, 356, 357, 317, 556,
	284, 452, 380, 0, 516, 0, 0, 0, 0, 0,
	0, 0, 0, 521, 522, 519, 613, 0, 579, 580,
	0, 0, 446, 447, 312, 319, 465, 321, 283, 369,
	314, 431, 328, 0, 458, 523, 459, 582, 585, 583,
	584, 361, 324, 325, 395, 329, 339, 383, 430, 367,
	388, 281, 421, 396, 343, 509, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 563, 562, 561, 560, 559, 558,
	557, 0, 0, 506, 408, 293, 255, 289, 290, 297,
	603, 600, 412, 604, 0, 263, 486, 337, 0, 378,
	311, 551, 552, 0, 0, 211, 212, 213, 214, 215,
	216, 217, 218, 256, 219, 220, 221, 222, 223, 224,
	225, 228, 229, 230, 231, 232, 233, 234, 235, 554,
	226, 227, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 0, 0, 0, 257,
	258, 259, 260, 0, 0, 251, 252, 253, 254, 0,
	0, 0, 437, 438, 439, 461, 423, 485, 601, 0,
	0, 0, 0, 0, 0, 0, 535, 547, 581, 0,
	590, 591, 593, 595, 594, 0, 607, 476, 477, 587,
	366, 0, 491, 524, 513, 596, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	336, 528, 510, 520, 511, 496, 497, 498, 505, 316,
	499, 500, 501, 471, 502, 472, 503, 504, 0, 527,
	478, 397, 350, 545, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 0, 0, 0, 0, 0, 279,
	202, 473, 592, 475, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 402, 419, 280,
	393, 432, 285, 400, 275, 365, 389, 0, 0, 271,
	417, 399, 347, 326, 327, 270, 0, 384, 304, 318,
	301, 363, 0, 416, 444, 300, 435, 0, 427, 273,
	0, 426, 362, 413, 418, 348, 342, 272, 415, 346,
	341, 330, 308, 460, 331, 332, 322, 374, 340, 375,
	323, 352, 351, 353, 0, 0, 0, 0, 0, 455,
	456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 586, 0, 629, 589, 0, 429, 0,
	0, 0, 0, 0, 0, 401, 0, 0, 333, 0,
	0, 0, 445, 0, 387, 368, 609, 0, 0, 385,
	338, 414, 376, 420, 403, 428, 381, 377, 264, 404,
	303, 349, 276, 278, 298, 305, 307, 309, 310, 358,
	359, 371, 392, 405, 406, 407, 302, 286, 386, 287,
	320, 288, 265, 294, 292, 295, 394, 296, 267, 372,
	411, 0, 315, 382, 345, 268, 344, 373, 410, 409,
	277, 436, 442, 443, 532, 0, 448, 610, 611, 612,
	457, 462, 463, 464, 466, 467, 468, 469, 533, 550,
	517, 487, 450, 541, 484, 488, 489, 553, 0, 0,
	0, 441, 334, 335, 0, 313, 261, 262, 606, 299,
	364, 555, 588, 480, 0, 542, 481, 490, 291, 514,
	526, 525, 360, 440, 0, 537, 540, 470, 605, 0,
	534, 549, 608, 548, 602, 370, 0, 391, 546, 493,
	0, 538, 512, 0, 539, 508, 543, 0, 482, 0,
	398, 422, 434, 451, 454, 483, 568, 569, 570, 266,
	453, 572, 573, 574, 575, 576, 577, 578, 571, 425,
	515, 492, 518, 433, 495, 494, 0, 0, 529, 449,
	530, 531, 354, 355, 356, 357, 317, 556, 284, 452,
	380, 0, 516, 0, 0, 0, 0, 0, 0, 0,
	0, 521, 522, 519, 613, 0, 579, 580, 0, 0,
	446, 447, 312, 319, 465, 321, 283, 369, 314, 431,
	328, 0, 458, 523, 459, 582, 585, 583, 584, 361,
	324, 325, 395, 329, 339, 383, 430, 367, 388, 281,
	421, 396, 343, 509, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 563, 562, 561, 560, 559, 558, 557, 0,
	0, 506, 408, 293, 255, 289, 290, 297, 603, 600,
	412, 604, 0, 263, 486, 337, 0, 378, 311, 551,
	552, 0, 0, 211, 212, 213, 214, 215, 216, 217,
	218, 256, 219, 220, 221, 222, 223, 224, 225, 228,
	229, 230, 231, 232, 233, 234, 235, 554, 226, 227,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 0, 0, 0, 257, 258, 259,
	260, 0, 0, 251, 252, 253, 254, 0, 0, 0,
	437, 438, 439, 461, 423, 485, 601, 0, 0, 0,
	0, 0, 0, 0, 535, 547, 581, 0, 590, 591,
	593, 595, 594, 0, 607, 476, 477, 587, 366, 0,
	491, 524, 513, 596, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 336, 528,
	510, 520, 511, 496, 497, 498, 505, 316, 499, 500,
	501, 471, 502, 472, 503, 504, 0, 527, 478, 397,
	350, 545, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	201, 0, 0, 0, 0, 0, 0, 279, 202, 473,
	592, 475, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 402, 419, 280, 393, 432,
	285, 400, 275, 365, 389, 0, 0, 271, 417, 399,
	347, 326, 327, 270, 0, 384, 304, 318, 301, 363,
	0, 416, 444, 300, 435, 0, 427, 273, 0, 426,
	362, 413, 418, 348, 342, 272, 415, 346, 341, 330,
	308, 460, 331, 332, 322, 374, 340, 375, 323, 352,
	351, 353, 0, 0, 0, 0, 0, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 586, 0, 0, 589, 0, 429, 0, 0, 0,
	0, 0, 0, 401, 0, 0, 333, 0, 0, 0,
	445, 0, 387, 368, 609, 0, 0, 385, 338, 414,
	376, 420, 403, 428, 381, 377, 264, 404, 303, 349,
	276, 278, 298, 305, 307, 309, 310, 358, 359, 371,
	392, 405, 406, 407, 302, 286, 386, 287, 320, 288,
	265, 294, 292, 295, 394, 296, 267, 372, 411, 0,
	315, 382, 345, 268, 344, 373, 410, 409, 277, 436,
	442, 443, 532, 0, 448, 610, 611, 612, 457, 462,
	463, 464, 466, 467, 468, 469, 533, 550, 517, 487,
	450, 541, 484, 488, 489, 553, 0, 0, 0, 441,
	334, 335, 0, 313, 261, 262, 606, 299, 364, 555,
	588, 480, 0, 542, 481, 490, 291, 514, 526, 525,
	360, 440, 0, 537, 540, 470, 605, 0, 534, 549,
	608, 548, 602, 370, 0, 391, 546, 493, 0, 538,
	512, 0, 539, 508, 543, 0, 482, 0, 398, 422,
	434, 451, 454, 483, 568, 569, 570, 266, 453, 572,
	573, 574, 575, 576, 577, 578, 571, 425, 515, 492,
	518, 433, 495, 494, 0, 0, 529, 449, 530, 531,
	354, 355, 356, 357, 317, 556, 284, 452, 380, 0,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 521,
	522, 519, 613, 0, 579, 580, 0, 0, 446, 447,
	312, 319, 465, 321, 283, 369, 314, 431, 328, 0,
	458, 523, 459, 582, 585, 583, 584, 361, 324, 325,
	395, 329, 339, 383, 430, 367, 388, 281, 421, 396,
	343, 509, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	563, 562, 561, 560, 559, 558, 557, 908, 0, 506,
	408, 293, 255, 289, 290, 297, 603, 600, 412, 604,
	0, 263, 486, 337, 0, 378, 311, 551, 552, 0,
	0, 211, 212, 213, 214, 215, 216, 217, 218, 256,
	219, 220, 221, 222, 223, 224, 225, 228, 229, 230,
	231, 232, 233, 234, 235, 554, 226, 227, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 0, 0, 0, 257, 258, 259, 260, 0,
	0, 251, 252, 253, 254, 0, 0, 0, 437, 438,
	439, 461, 423, 485, 601, 0, 0, 0, 0, 0,
	0, 0, 535, 547, 581, 0, 590, 591, 593, 595,
	594, 0, 607, 476, 477, 587, 366, 0, 491, 524,
	513, 596, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 619, 306, 0, 0, 336, 528, 510, 520,
	511, 496, 497, 498, 505, 316, 499, 500, 501, 471,
	502, 472, 503, 504, 0, 527, 478, 397, 350, 545,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 201, 0,
	0, 0, 0, 0, 0, 279, 202, 473, 592, 475,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 402, 419, 280, 393, 432, 285, 400,
	275, 365, 389, 0, 0, 271, 417, 399, 347, 326,
	327, 270, 0, 384, 304, 318, 301, 363, 0, 416,
	444, 300, 435, 0, 427, 273, 0, 426, 362, 413,
	418, 348, 342, 272, 415, 346, 341, 330, 308, 460,
	331, 332, 322, 374, 340, 375, 323, 352, 351, 353,
	0, 0, 0, 0, 0, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 586,
	0, 0, 589, 0, 429, 0, 0, 0, 0, 0,
	0, 401, 0, 0, 333, 0, 0, 0, 445, 0,
	387, 368, 609, 0, 0, 385, 338, 414, 376, 420,
	403, 428, 381, 377, 264, 404, 303, 349, 276, 278,
	298, 305, 307, 309, 310, 358, 359, 371, 392, 405,
	406, 407, 302, 286, 386, 287, 320, 288, 265, 294,
	292, 295, 394, 296, 267, 372, 411, 0, 315, 382,
	345, 268, 344, 373, 410, 409, 277, 436, 442, 443,
	532, 0, 448, 610, 611, 612, 457, 462, 463, 464,
	466, 467, 468, 469, 533, 550, 517, 487, 450, 541,
	484, 488, 489, 553, 0, 0, 0, 441, 334, 335,
	0, 313, 261, 262, 606, 299, 364, 555, 588, 480,
	0, 542, 481, 490, 291, 514, 526, 525, 360, 440,
	0, 537, 540, 470, 605, 0, 534, 549, 608, 548,
	602, 370, 0, 391, 546, 493, 0, 538, 512, 0,
	539, 508, 543, 0, 482, 0, 398, 422, 434, 451,
	454, 483, 568, 569, 570, 266, 453, 572, 573, 574,
	575, 576, 577, 578, 571, 425, 515, 492, 518, 433,
	495, 494, 0, 0, 529, 449, 530, 531, 354, 355,
	356, 357, 317, 556, 284, 452, 380, 0, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 521, 522, 519,
	613, 0, 579, 580, 0, 0, 446, 447, 312, 319,
	465, 321, 283, 369, 314, 431, 328, 0, 458, 523,
	459, 582, 585, 583, 584, 361, 324, 325, 395, 329,
	339, 383, 430, 367, 388, 281, 421, 396, 343, 509,
	536, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 563, 562,
	561, 560, 559, 558, 557, 0, 0, 506, 408, 293,
	255, 289, 290, 297, 603, 600, 412, 604, 0, 263,
	486, 337, 0, 378, 311, 551, 552, 0, 0, 211,
	212, 213, 214, 215, 216, 217, 218, 256, 219, 220,
	221, 222, 223, 224, 225, 228, 229, 230, 231, 232,
	233, 234, 235, 554, 226, 227, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	0, 0, 0, 257, 258, 259, 260, 0, 0, 251,
	252, 253, 254, 0, 0, 0, 437, 438, 439, 461,
	423, 485, 601, 0, 0, 0, 0, 0, 0, 0,
	535, 547, 581, 0, 590, 591, 593, 595, 594, 0,
	607, 476, 477, 587, 366, 0, 491, 524, 513, 596,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 336, 528, 510, 520, 511, 496,
	497, 498, 505, 316, 499, 500, 501, 471, 502, 472,
	503, 504, 0, 527, 478, 397, 350, 545, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 201, 0, 0, 0,
	0, 0, 0, 279, 202, 473, 592, 475, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 402, 419, 280, 393, 432, 285, 400, 275, 365,
	389, 0, 0, 271, 417, 399, 347, 326, 327, 270,
	0, 384, 304, 318, 301, 363, 0, 416, 444, 300,
	435, 0, 427, 273, 0, 426, 362, 413, 418, 348,
	342, 272, 415, 346, 341, 330, 308, 460, 331, 332,
	322, 374, 340, 375, 323, 352, 351, 353, 0, 0,
	0, 0, 0, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 586, 0, 0,
	589, 0, 429, 0, 0, 0, 0, 0, 0, 401,
	0, 0, 333, 0, 0, 0, 445, 0, 387, 368,
	609, 0, 0, 385, 338, 414, 376, 420, 403, 428,
	381, 377, 264, 404, 303, 349, 276, 278, 298, 305,
	307, 309, 310, 358, 359, 371, 392, 405, 406, 407,
	302, 286, 386, 287, 320, 288, 265, 294, 292, 295,
	394, 296, 267, 372, 411, 0, 315, 382, 345, 268,
	344, 373, 410, 409, 277, 436, 442, 443, 532, 0,
	448, 610, 611, 612, 457, 462, 463, 464, 466, 467,
	468, 469, 533, 550, 517, 487, 450, 541, 484, 488,
	489, 553, 0, 0, 0, 441, 334, 335, 0, 313,
	261, 262, 606, 299, 364, 555, 588, 480, 0, 542,
	481, 490, 291, 514, 526, 525, 360, 440, 0, 537,
	540, 470, 605, 0, 534, 549, 608, 548, 602, 370,
	0, 391, 546, 493, 0, 538, 512, 0, 539, 508,
	543, 0, 482, 0, 398, 422, 434, 451, 454, 483,
	568, 569, 570, 266, 453, 572, 573, 574, 575, 576,
	577, 578, 571, 425, 515, 492, 518, 433, 495, 494,
	0, 0, 529, 449, 530, 531, 354, 355, 356, 357,
	317, 556, 284, 452, 380, 0, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 521, 522, 519, 613, 0,
	579, 580, 0, 0, 446, 447, 312, 319, 465, 321,
	283, 369, 314, 431, 328, 0, 458, 523, 459, 582,
	585, 583, 584, 361, 324, 325, 395, 329, 339, 383,
	430, 367, 388, 281, 421, 396, 343, 509, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 563, 562, 561, 560,
	559, 558, 557, 0, 0, 506, 408, 293, 255, 289,
	290, 297, 603, 600, 412, 604, 0, 263, 486, 337,
	0, 378, 311, 551, 552, 0, 0, 211, 212, 213,
	214, 215, 216, 217, 218, 256, 219, 220, 221, 222,
	223, 224, 225, 228, 229, 230, 231, 232, 233, 234,
	235, 554, 226, 227, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 0, 0,
	0, 257, 258, 259, 260, 0, 0, 251, 252, 253,
	254, 0, 0, 0, 437, 438, 439, 461, 423, 485,
	601, 0, 0, 0, 0, 0, 0, 0, 535, 547,
	581, 0, 590, 591, 593, 595, 594, 0, 607, 476,
	477, 587, 366, 0, 491, 524, 513, 596, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 336, 528, 510, 520, 511, 496, 497, 498,
	505, 316, 499, 500, 501, 471, 502, 472, 503, 504,
	0, 527, 478, 397, 350, 545, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 201, 0, 0, 0, 0, 0,
	0, 279, 202, 473, 592, 475, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 402,
	1411, 280, 393, 432, 285, 400, 275, 365, 389, 0,
	0, 271, 417, 399, 347, 326, 327, 270, 0, 384,
	304, 318, 301, 363, 0, 416, 444, 300, 435, 0,
	427, 273, 0, 426, 362, 413, 418, 348, 342, 272,
	415, 346, 341, 330, 308, 460, 331, 332, 322, 374,
	340, 375, 323, 352, 351, 353, 0, 0, 0, 0,
	0, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 586, 0, 0, 589, 0,
	429, 0, 0, 0, 0, 0, 0, 401, 0, 0,
	333, 0, 0, 0, 445, 0, 387, 368, 609, 0,
	0, 385, 338, 414, 376, 420, 403, 428, 381, 377,
	264, 404, 303, 349, 276, 278, 298, 305, 307, 309,
	310, 358, 359, 371, 392, 405, 406, 407, 302, 286,
	386, 287, 320, 288, 265, 294, 292, 295, 394, 296,
	267, 372, 411, 0, 315, 382, 345, 268, 344, 373,
	410, 409, 277, 436, 442, 443, 532, 0, 448, 610,
	611, 612, 457, 462, 463, 464, 466, 467, 468, 469,
	533, 550, 517, 487, 450, 541, 484, 488, 489, 553,
	0, 0, 0, 441, 334, 335, 0, 313, 261, 262,
	606, 299, 364, 555, 588, 480, 0, 542, 481, 490,
	291, 514, 526, 525, 360, 440, 0, 537, 540, 470,
	605, 0, 534, 549, 608, 548, 602, 370, 0, 391,
	546, 493, 0, 538, 512, 0, 539, 508, 543, 0,
	482, 0, 398, 422, 434, 451, 454, 483, 568, 569,
	570, 266, 453, 572, 573, 574, 575, 576, 577, 578,
	571, 425, 515, 492, 518, 433, 495, 494, 0, 0,
	529, 449, 530, 531, 354, 355, 356, 357, 317, 556,
	284, 452, 380, 0, 516, 0, 0, 0, 0, 0,
	0, 0, 0, 521, 522, 519, 613, 0, 579, 580,
	0, 0, 446, 447, 312, 319, 465, 321, 283, 369,
	314, 431, 328, 0, 458, 523, 459, 582, 585, 583,
	584, 361, 324, 325, 395, 329, 339, 383, 430, 367,
	388, 281, 421, 396, 343, 509, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 563, 562, 561, 560, 559, 558,
	557, 0, 0, 506, 408, 293, 255, 289, 290, 297,
	603, 600, 412, 604, 0, 263, 486, 337, 0, 378,
	311, 551, 552, 0, 0, 211, 212, 213, 214, 215,
	216, 217, 218, 256, 219, 220, 221, 222, 223, 224,
	225, 228, 229, 230, 231, 232, 233, 234, 235, 554,
	226, 227, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 0, 0, 0, 257,
	258, 259, 260, 0, 0, 251, 252, 253, 254, 0,
	0, 0, 437, 438, 439, 461, 423, 485, 601, 0,
	0, 0, 0, 0, 0, 0, 535, 547, 581, 0,
	590, 591, 593, 595, 594, 0, 607, 476, 477, 587,
	366, 0, 491, 524, 513, 596, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	336, 528, 510, 520, 511, 496, 497, 498, 505, 316,
	499, 500, 501, 471, 502, 472, 503, 504, 0, 527,
	478, 397, 350, 545, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 0, 0, 0, 0, 0, 279,
	202, 473, 592, 475, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 402, 1409, 280,
	393, 432, 285, 400, 275, 365, 389, 0, 0, 271,
	417, 399, 347, 326, 327, 270, 0, 384, 304, 318,
	301, 363, 0, 416, 444, 300, 435, 0, 427, 273,
	0, 426, 362, 413, 418, 348, 342, 272, 415, 346,
	341, 330, 308, 460, 331, 332, 322, 374, 340, 375,
	323, 352, 351, 353, 0, 0, 0, 0, 0, 455,
	456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 586, 0, 0, 589, 0, 429, 0,
	0, 0, 0, 0, 0, 401, 0, 0, 333, 0,
	0, 0, 445, 0, 387, 368, 609, 0, 0, 385,
	338, 414, 376, 420, 403, 428, 381, 377, 264, 404,
	303, 349, 276, 278, 298, 305, 307, 309, 310, 358,
	359, 371, 392, 405, 406, 407, 302, 286, 386, 287,
	320, 288, 265, 294, 292, 295, 394, 296, 267, 372,
	411, 0, 315, 382, 345, 268, 344, 373, 410, 409,
	277, 436, 442, 443, 532, 0, 448, 610, 611, 612,
	457, 462, 463, 464, 466, 467, 468, 469, 533, 550,
	517, 487, 450, 541, 484, 488, 489, 553, 0, 0,
	0, 441, 334, 335, 0, 313, 261, 262, 606, 299,
	364, 555, 588, 480, 0, 542, 481, 490, 291, 514,
	526, 525, 360, 440, 0, 537, 540, 470, 605, 0,
	534, 549, 608, 548, 602, 370, 0, 391, 546, 493,
	0, 538, 512, 0, 539, 508, 543, 0, 482, 0,
	398, 422, 434, 451, 454, 483, 568, 569, 570, 266,
	453, 572, 573, 574, 575, 576, 577, 578, 571, 425,
	515, 492, 518, 433, 495, 494, 0, 0, 529, 449,
	530, 531, 354, 355, 356, 357, 317, 556, 284, 452,
	380, 0, 516, 0, 0, 0, 0, 0, 0, 0,
	0, 521, 522, 519, 613, 0, 579, 580, 0, 0,
	446, 447, 312, 319, 465, 321, 283, 369, 314, 431,
	328, 0, 458, 523, 459, 582, 585, 583, 584, 361,
	324, 325, 395, 329, 339, 383, 430, 367, 388, 281,
	421, 396, 343, 509, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 563, 562, 561, 560, 559, 558, 557, 0,
	0, 506, 408, 293, 255, 289, 290, 297, 603, 600,
	412, 604, 0, 263, 486, 337, 0, 378, 311, 551,
	552, 0, 0, 211, 212, 213, 214, 215, 216, 217,
	218, 256, 219, 220, 221, 222, 223, 224, 225, 228,
	229, 230, 231, 232, 233, 234, 235, 554, 226, 227,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 0, 0, 0, 257, 258, 259,
	260, 0, 0, 251, 252, 253, 254, 0, 0, 0,
	437, 438, 439, 461, 423, 485, 601, 0, 0, 0,
	0, 0, 0, 0, 535, 547, 581, 0, 590, 591,
	593, 595, 594, 0, 607, 476, 477, 587, 366, 0,
	491, 524, 513, 596, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 336, 528,
	510, 520, 511, 496, 497, 498, 505, 316, 499, 500,
	501, 471, 502, 472, 503, 504, 0, 527, 478, 397,
	350, 545, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	201, 0, 0, 0, 0, 0, 0, 279, 202, 473,
	592, 475, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 402, 419, 280, 393, 432,
	285, 400, 275, 365, 389, 0, 0, 271, 417, 399,
	347, 326, 327, 270, 0, 384, 304, 318, 301, 363,
	0, 416, 444, 300, 435, 0, 427, 273, 0, 426,
	362, 413, 418, 348, 342, 272, 415, 346, 341, 330,
	308, 460, 331, 332, 322, 374, 340, 375, 323, 352,
	351, 353, 0, 0, 0, 0, 0, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 586, 0, 0, 589, 0, 429, 0, 0, 0,
	0, 0, 0, 401, 0, 0, 333, 0, 0, 0,
	445, 0, 387, 368, 609, 0, 0, 385, 338, 414,
	376, 420, 403, 428, 381, 377, 264, 404, 303, 349,
	276, 278, 694, 305, 307, 309, 310, 358, 359, 371,
	392, 405, 406, 407, 302, 286, 386, 287, 320, 288,
	265, 294, 292, 295, 394, 296, 267, 372, 411, 0,
	315, 382, 345, 268, 344, 373, 410, 409, 277, 436,
	442, 443, 532, 0, 448, 610, 611, 612, 457, 462,
	463, 464, 466, 467, 468, 469, 533, 550, 517, 487,
	450, 541, 484, 488, 489, 553, 0, 0, 0, 441,
	334, 335, 0, 313, 261, 262, 606, 299, 364, 555,
	588, 480, 0, 542, 481, 490, 291, 514, 526, 525,
	360, 440, 0, 537, 540, 470, 605, 0, 534, 549,
	608, 548, 602, 370, 0, 391, 546, 493, 0, 538,
	512, 0, 539, 508, 543, 0, 482, 0, 398, 422,
	434, 451, 454, 483, 568, 569, 570, 266, 453, 572,
	573, 574, 575, 576, 577, 578, 571, 425, 515, 492,
	518, 433, 495, 494, 0, 0, 529, 449, 530, 531,
	354, 355, 356, 357, 317, 556, 284, 452, 380, 0,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 521,
	522, 519, 613, 0, 579, 580, 0, 0, 446, 447,
	312, 319, 465, 321, 283, 369, 314, 431, 328, 0,
	458, 523, 459, 582, 585, 583, 584, 361, 324, 325,
	395, 329, 339, 383, 430, 367, 388, 281, 421, 396,
	343, 509, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	563, 562, 561, 560, 559, 558, 557, 0, 0, 506,
	408, 293, 255, 289, 290, 297, 603, 600, 412, 604,
	0, 263, 486, 337, 0, 378, 311, 551, 552, 0,
	0, 211, 212, 213, 214, 215, 216, 217, 218, 256,
	219, 220, 221, 222, 223, 224, 225, 228, 229, 230,
	231, 232, 233, 234, 235, 554, 226, 227, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 0, 0, 0, 257, 258, 259, 260, 0,
	0, 251, 252, 253, 254, 0, 0, 0, 437, 438,
	439, 461, 423, 485, 601, 0, 0, 0, 0, 0,
	0, 0, 535, 547, 581, 0, 590, 591, 593, 595,
	594, 0, 607, 476, 477, 587, 366, 0, 491, 524,
	513, 596, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 336, 528, 510, 520,
	511, 496, 497, 498, 505, 316, 499, 500, 501, 471,
	502, 472, 503, 504, 0, 527, 478, 397, 350, 545,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 201, 0,
	0, 0, 0, 0, 0, 279, 202, 473, 592, 475,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 402, 419, 280, 393, 432, 285, 400,
	275, 365, 389, 0, 0, 271, 417, 399, 347, 326,
	327, 270, 0, 384, 304, 318, 301, 363, 0, 416,
	444, 300, 435, 0, 427, 273, 0, 426, 362, 413,
	418, 348, 342, 272, 415, 346, 341, 330, 308, 460,
	331, 332, 322, 374, 340, 375, 323, 352, 351, 353,
	0, 0, 0, 0, 0, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 586,
	0, 0, 589, 0, 429, 0, 0, 0, 0, 0,
	0, 401, 0, 0, 333, 0, 0, 0, 445, 0,
	387, 368, 609, 0, 0, 385, 338, 414, 376, 420,
	403, 428, 653, 377, 264, 404, 303, 349, 276, 278,
	298, 305, 307, 309, 310, 358, 359, 371, 392, 405,
	406, 407, 302, 286, 386, 287, 320, 288, 265, 294,
	292, 295, 394, 296, 267, 372, 411, 0, 315, 382,
	345, 268, 344, 373, 410, 409, 277, 436, 442, 443,
	532, 0, 448, 610, 611, 612, 457, 462, 463, 464,
	466, 467, 468, 469, 533, 550, 517, 487, 450, 541,
	484, 488, 489, 553, 0, 0, 0, 441, 334, 335,
	0, 313, 261, 262, 606, 299, 364, 555, 588, 480,
	0, 542, 481, 490, 291, 514, 526, 525, 360, 440,
	0, 537, 540, 470, 605, 0, 534, 549, 608, 548,
	602, 370, 0, 391, 546, 493, 0, 538, 512, 0,
	539, 508, 543, 0, 482, 0, 398, 422, 434, 451,
	454, 483, 568, 569, 570, 266, 453, 572, 573, 574,
	575, 576, 577, 654, 571, 425, 515, 492, 518, 433,
	495, 494, 0, 0, 529, 449, 530, 531, 354, 355,
	356, 357, 317, 556, 284, 452, 380, 0, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 521, 522, 519,
	613, 0, 579, 580, 0, 0, 446, 447, 312, 319,
	465, 321, 283, 369, 314, 431, 328, 0, 458, 523,
	459, 582, 585, 583, 584, 361, 324, 325, 395, 329,
	339, 383, 430, 367, 388, 281, 421, 396, 343, 509,
	536, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 563, 562,
	561, 560, 559, 558, 557, 0, 0, 506, 408, 293,
	255, 289, 290, 297, 603, 600, 412, 604, 0, 263,
	486, 337, 0, 378, 311, 551, 552, 0, 0, 211,
	212, 213, 214, 215, 216, 217, 218, 256, 219, 220,
	221, 222, 223, 224, 225, 228, 229, 230, 231, 232,
	233, 234, 235, 554, 226, 227, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	0, 0, 0, 257, 258, 259, 260, 0, 0, 251,
	252, 253, 254, 1054, 0, 0, 437, 438, 439, 461,
	423, 485, 601, 1876, 0, 0, 0, 0, 1837, 0,
	535, 547, 581, 0, 590, 591, 593, 595, 594, 0,
	607, 476, 477, 587, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1878, 1846,
	0, 1876, 0, 0, 0, 0, 0, 0, 1879, 1880,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1845, 0, 1878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1040, 0, 0, 3473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1853, 0, 0,
	0, 0, 0, 0, 1062, 1066, 1068, 1070, 1072, 1073,
	1075, 0, 1080, 1076, 1077, 1078, 1079, 0, 1057, 1058,
	1059, 1060, 1038, 1039, 1063, 0, 1041, 1869, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1055, 1051,
	1052, 1061, 0, 0, 0, 0, 0, 0, 0, 1065,
	1067, 1069, 1071, 1074, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1876, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1056, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1836, 2624,
	1835, 0, 2623, 0, 0, 0, 0, 1857, 0, 0,
	1878, 0, 0, 0, 0, 0, 0, 0, 1863, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1851, 1885,
	0, 0, 1852, 1854, 1856, 1857, 1858, 1859, 1860, 1864,
	1865, 1866, 1868, 1871, 1872, 1873, 1863, 0, 0, 1876,
	0, 1853, 0, 1861, 1870, 1862, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1840, 1851, 1885, 0, 0,
	1852, 1854, 1856, 0, 1858, 1859, 1860, 1864, 1865, 1866,
	1868, 1871, 1872, 1873, 1878, 0, 0, 1877, 0, 0,
	0, 1861, 1870, 1862, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1833, 1834, 3444, 0, 0, 0, 1869,
	0, 0, 0, 0, 0, 1877, 0, 0, 0, 0,
	0, 1874, 0, 0, 0, 1853, 0, 0, 0, 0,
	0, 673, 672, 679, 669, 0, 0, 0, 1850, 0,
	0, 0, 0, 676, 677, 1849, 678, 682, 0, 0,
	664, 0, 0, 0, 0, 0, 0, 0, 0, 1874,
	687, 0, 0, 0, 0, 0, 0, 0, 0, 1867,
	0, 0, 0, 0, 0, 0, 1850, 0, 1855, 0,
	0, 0, 0, 1849, 0, 0, 0, 0, 0, 1857,
	0, 1882, 1881, 1869, 0, 0, 0, 0, 0, 0,
	1863, 0, 0, 691, 0, 0, 693, 1867, 0, 0,
	0, 692, 0, 0, 0, 0, 1855, 0, 0, 0,
	1851, 1885, 0, 0, 1852, 1854, 1856, 0, 1858, 1859,
	1860, 1864, 1865, 1866, 1868, 1871, 1872, 1873, 0, 0,
	0, 0, 0, 0, 1842, 1861, 1870, 1862, 0, 1064,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1857, 0, 0, 0, 0, 0, 1877,
	0, 0, 0, 0, 1863, 0, 1884, 0, 0, 1883,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1851, 1885, 0, 0, 1852, 1854,
	1856, 0, 1858, 1859, 1860, 1864, 1865, 1866, 1868, 1871,
	1872, 1873, 0, 1874, 0, 0, 0, 0, 0, 1861,
	1870, 1862, 0, 0, 0, 0, 0, 0, 0, 0,
	1850, 0, 0, 0, 0, 0, 0, 1849, 665, 667,
	666, 0, 0, 673, 672, 679, 669, 0, 671, 0,
	0, 0, 0, 1877, 0, 676, 677, 0, 678, 682,
	675, 1867, 664, 0, 0, 0, 0, 690, 0, 0,
	1855, 0, 687, 0, 668, 0, 0, 0, 659, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1874, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1850, 691, 0, 0, 693, 0,
	0, 1849, 0, 692, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1867, 0, 0, 0, 0,
	0, 0, 0, 0, 1855, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 670, 674, 680, 0, 681, 683, 0,
	0, 684, 685, 686, 0, 0, 688, 689, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	665, 667, 666, 0, 0, 0, 0, 0, 0, 0,
	671, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 675, 0, 0, 0, 0, 0, 0, 690,
	0, 0, 0, 0, 0, 0, 668, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 670, 674, 680, 0, 681,
	683, 0, 0, 684, 685, 686, 0, 0, 688, 689,
}

var yyPact = [...]int{
	3679, -1000, -1000, -1000, -320, 13341, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	42561, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 326, 42561, -315, 41953, 41953, -1000, -1000, 2432, -1000,
	40737, 15185, 42561, 422, 415, 42561, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 811, -1000, 44993, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 722, 45968, 44385, 10273, -245,
	-1000, 1526, -69, 2347, 952, 957, 1064, 1064, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3738, 824, 41345, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3641, 508, 824, 20059,
	77, 76, 1526, 383, -123, -119, -128, 276, -1000, 1076,
	363, 187, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 10273, 10273, 13341, -359, 13341, 10273, 42561,
	42561, -1000, -1000, -1000, -1000, -315, 40737, 722, 45968, 10273,
	2347, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -119, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -123,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-128, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 76, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 4461, -1000, 1449,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2151, 2857, 1446, 2346, 620, 42561,
	-1000, 129, 620, -1000, -1000, -1000, 1526, 3271, -1000, 42561,
	42561, 148, 1711, -1000, 469, 350, 373, 285, 1445, -1000,
	-1000, -1000, -1000, -1000, -1000, 547, 3246, -1000, 42561, 42561,
	2881, 42561, -1000, 2124, 576, 46190, 3071, 1480, 853, 2914,
	-1000, -1000, 2856, -1000, 289, 717, 211, 413, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 264, -1000, 3097, -1000, -1000,
	281, -1000, -1000, 263, -1000, -1000, -1000, 55, -1000, -1000,
	-1000, -1000, -1000, -1000, -62, -1000, -1000, 987, 1875, 10273,
	1767, -1000, 3719, -1000, -1000, -1000, -1000, 5984, 12109, 12109,
	12109, 12109, 42561, -1000, -1000, 2669, 10273, 2855, 2854, 2853,
	2852, -1000, -1000, -1000, -1000, -1000, -1000, 1431, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1860, -1000, -1000,
	-1000, 12721, -1000, 2850, 2849, 2848, 2847, 2846, 2843, 2842,
	2836, 2835, 2834, 2832, 2806, 2802, 2801, 2563, 14567, 2800,
	2344, 2341, 2796, 2795, 2794, 2339, 2789, 2785, 2784, 2563,
	2563, 2779, 2777, 2775, 2774, 2773, 2770, 2769, 2767, 2765,
	2754, 2742, 2737, 2736, 2735, 2731, 2729, 2728, 2726, 2725,
	2724, 2722, 2721, 2720, 2714, 2703, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1180,
	-1000, 2701, 3270, 2625, -1000, 3154, 3142, 3137, 3133, -288,
	2699, 2080, -1000, -1000, 94, -1000, -89, -1000, -1000, 947,
	-1000, 919, -1000, 713, 42561, 42561, 171, 772, 713, 713,
	713, 713, 713, 797, 713, 3168, 810, 809, 808, 807,
	713, -81, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1710,
	1709, 2953, 890, -1000, -1000, -1000, -1000, 1277, 42561, -1000,
	2628, 1501, 1501, 3220, 3165, 589, 586, 584, 1501, 472,
	-1000, 1632, 1632, 1632, 1632, 1501, 430, 610, 3171, 3171,
	53, 1632, 7, 1501, 1501, 7, 1501, 1501, 1747, 210,
	-296, -1000, -1000, -1000, -1000, 1632, 1632, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3136, 3132, 722, 722, 42561, 170,
	42561, 722, 722, 722, 753, -43, 43777, 43169, 2124, 575,
	569, 1296, 1658, -1000, 1657, 42561, 42561, 1657, 1657, 23104,
	22496, -1000, 42561, -1000, 3270, 2625, 2557, 1520, 2553, 2625,
	-133, -134, -136, 722, 722, 722, 722, 722, 228, 722,
	722, 722, 722, 722, 42561, 42561, 40129, 722, 722, 722,
	8432, 8432, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 13341, 1834, 1974, 186, -35, -311, 234, -1000, -1000,
	42561, 3042, 246, -1000, -1000, -1000, 2573, -1000, 2616, 2616,
	2616, 2616, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2616, 2616, 2626, 2692, -1000, -1000, 2614, 2614, 2614,
	2573, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2617, 2617, 2624, 2624,
	2617, 42561, -154, -1000, -1000, 10273, 42561, 3053, 379, 2691,
	-1000, 42561, 10273, 375, 3270, 3048, 3171, 3213, -1000, -1000,
	1425, 2078, 2337, -1000, 285, -1000, 454, 285, 1682, -1000,
	1165, -1000, -1000, -1000, -1000, -1000, 42561, -62, 404, -1000,
	-1000, 2320, 2679, -1000, 574, 1066, 1348, -1000, 283, 3513,
	34656, 2124, 34656, 42561, -1000, -1000, -1000, -1000, -1000, -1000,
	50, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 259, -1000, 10273, 10273, 10273, 10273,
	10273, -1000, 616, 11497, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 12109, 12109, 12109, 12109, 12109, 12109, 12109, 12109, 12109,
	12109, 12109, 12109, 2668, 1738, 12109, 12109, 12109, 12109, 1520,
	2968, 1285, 272, -1000, -1000, -1000, -1000, 10273, -1000, 1730,
	1875, 10273, 10273, 10273, 10273, 42561, -1000, -1000, 774, 10273,
	10273, 3441, 10273, 3121, 10273, 10273, 10273, 2552, 4752, 42561,
	10273, -1000, 2551, 2549, -1000, -1000, 1893, 10273, -1000, -1000,
	10273, -1000, -1000, 10273, 12109, 10273, -1000, 10273, 10273, 10273,
	-1000, -1000, 412, 3121, 3121, 3121, 1625, 10273, 10273, 3121,
	3121, 3121, 1609, 3121, 3121, 3121, 3121, 3121, 3121, 3121,
	3121, 3121, 3121, 2547, 2546, 2545, 9661, 3171, -245, -1000,
	7820, 3048, 3171, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -292, 2676, 42561, 2336, 2328, -330, 14,
	937, 910, 931, -1000, 42561, 1741, 3086, -1000, 2673, 42561,
	713, 713, 713, -1000, 42561, 34656, 42561, 42561, 2124, 42561,
	42561, 42561, 713, 713, 713, 713, 42561, -1000, 3003, 34656,
	2997, 753, -1000, 42561, 1277, 3084, 42561, 3220, 12109, 12109,
	-1000, -1000, 10273, 39521, 1632, 1501, 1501, -1000, -1000, 42561,
	-1000, -1000, -1000, 1632, 42561, 1632, 1632, 3220, 1632, -1000,
	-1000, -1000, 1501, 1501, -1000, -1000, 10273, -1000, -1000, 1632,
	1632, -1000, -1000, 3220, 42561, 13, 3220, 3220, 61, -1000,
	-1000, -1000, 1501, 42561, 42561, 713, 42561, -1000, 42561, 42561,
	-1000, -1000, 42561, 42561, 4079, 42561, 38913, 3130, -1000, 34656,
	42561, 42561, 32224, -1000, 1236, -1000, -23, -1000, 8, -43,
	1657, -43, 1657, -1000, 553, 550, 21280, 493, 34656, 5364,
	-1000, -1000, 1657, 1657, 5364, 5364, 1469, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1272, -1000, 201, 3171, -1000, -1000,
	-1000, -1000, -1000, 2077, 2030, 2028, 42561, 42561, 34656, 2124,
	42561, 722, 42561, 42561, 42561, 42561, 42561, -1000, 2672, 1420,
	-1000, 3070, 42561, 42561, 42561, 1347, -1000, -1000, 18225, 1400,
	1347, -1000, 1748, -1000, 10273, 13341, -276, 10273, 13341, 13341,
	10273, 13341, -1000, 10273, 229, -1000, -1000, -1000, -1000, 2026,
	-1000, 2021, -1000, -1000, -1000, -1000, -1000, 2327, 2327, -1000,
	2018, -1000, -1000, -1000, -1000, 2002, -1000, -1000, 2001, -1000,
	-1000, -1000, -1000, -185, 2535, 987, -1000, 2326, 2912, -248,
	-1000, 19451, 42561, 42561, -331, 180, -1000, -248, -1000, 18838,
	42561, 3171, -1000, -251, 3048, 10273, 42561, -1000, 3164, -1000,
	-1000, 285, -1000, 482, 364, -1000, -1000, -1000, -1000, -1000,
	-1000, 1398, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1264, -1000, 42561, -1000, -1000, 283, 34656, 36480, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 219, -1000, -1000, 172,
	-1000, 793, 196, 1681, -1000, -1000, 173, 194, 151, 851,
	1875, -1000, 1765, 1765, 1769, -1000, 573, -1000, -1000, -1000,
	-1000, 2669, -1000, -1000, -1000, 2230, 2382, -1000, 1717, 1717,
	1474, 1474, 1474, 1474, 1474, 1656, 1656, -1000, -1000, -1000,
	5984, 2668, 12109, 12109, 12109, 12109, 691, 691, 4103, 3781,
	-1000, 10273, 159, 1722, -1000, 10273, 2582, 1389, 2094, 1294,
	1393, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2533, 2514, 2687, 3244, 2507, 10273, -1000, -1000, 1665,
	1662, 1661, -1000, 2120, 9049, -1000, -1000, -1000, 2506, 1362,
	2505, -1000, -1000, -1000, 2503, 1659, 1193, 2502, 1967, 2500,
	2489, 2486, 2485, 1262, 10273, 10273, 10273, 10273, 2483, 1654,
	1652, 10273, 10273, 10273, 10273, 2482, 10273, 10273, 10273, 10273,
	10273, 10273, 10273, 10273, 10273, 10273, 99, 99, 99, 1260,
	1252, -1000, -1000, 1635, -1000, 1875, -1000, -1000, 3048, -1000,
	2663, 1999, 1243, -1000, -1000, -317, 2240, -1000, -1000, 920,
	914, 944, 3160, 3059, 42561, 1140, 2662, 42561, 42561, 42561,
	222, -1000, 1083, -1000, 196, -68, 426, 1027, 2879, 3234,
	-156, 42561, 42561, 42561, 42561, 3082, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 38305, -1000, 2661, 1615, -1000, -1000,
	-1000, -1000, 1875, 2878, 42561, 42561, 3220, 3220, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1632, 3220, 3220, 1312, 1501,
	1632, -1000, -1000, 1632, -1000, -1000, 1632, -1000, -1000, 1360,
	-1000, 42561, -1000, -1000, -1000, 3081, 2628, 1239, -1000, -1000,
	-1000, 3209, 1248, 702, 702, 940, 451, 3207, 17009, -1000,
	1519, 1034, 792, 2998, 287, -1000, 1519, -182, 685, 1519,
	1519, 1519, 1519, 1519, 1519, 1519, 541, 533, 1519, 1519,
	1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 950,
	1519, 1519, 1519, 1519, 1519, -1000, 1519, 2657, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 567, 220, 3128, 312, 311,
	1083, 3126, 324, 3057, 1186, -1000, -1000, -1000, -1000, 25536,
	25536, 20672, 25536, -1000, 184, -43, 23, -1000, -1000, 1236,
	5364, 1236, 5364, -1000, -1000, 788, -1000, -1000, 1027, -1000,
	42561, 42561, -1000, -1000, 2653, 1707, -1000, -1000, 14567, -1000,
	5364, 5364, -1000, -1000, 26144, 42561, -1000, -63, -1000, -48,
	3048, -1000, -1000, -1000, 1232, -1000, -1000, 1235, 1027, 2910,
	42561, 1232, 1232, 1232, -1000, -1000, 16401, 42561, 42561, -1000,
	-1000, -1000, 3220, 8432, -1000, 32224, -1000, -1000, 37696, -1000,
	37088, 3220, 1684, -1000, 13341, 1951, 183, -1000, 230, -318,
	178, 1934, 177, 1875, -1000, -1000, 2480, 2474, 1611, -1000,
	1605, 2467, 1587, 1584, 1998, -1000, 1, -1000, 3031, 1036,
	-1000, 2651, -1000, 1583, 2974, -1000, 1220, -1000, 1705, 1578,
	-1000, 10273, -1000, 1036, 1557, 2956, 1220, 3048, 2315, -1000,
	1215, -1000, 2159, 1341, 132, -1000, -1000, -1000, 42561, 2320,
	1556, 36480, 1110, -1000, 787, 1328, 1322, -1000, 34656, 269,
	34656, -1000, 34656, -1000, -1000, 352, -1000, 42561, 3046, -1000,
	-1000, -1000, 2240, 1700, -346, 42561, -1000, -1000, -1000, -1000,
	-1000, 1555, -1000, 691, 691, 4103, 2884, -1000, 12109, -1000,
	12109, 2951, -1000, 1531, -1000, 10273, 1939, 4353, 10273, 4353,
	1724, 24320, 42561, -1000, -1000, 10273, 10273, -1000, 2936, -1000,
	-1000, -1000, -1000, 10273, 10273, 2381, -1000, 42561, -1000, -1000,
	-1000, -1000, 24320, -1000, 12109, -1000, -1000, -1000, -1000, 10273,
	1150, 1150, 2870, 1535, 99, 99, 99, 2844, 2839, 2762,
	1528, 99, 2752, 2681, 2677, 2666, 2659, 2655, 2619, 2511,
	2501, 2490, -1000, 2642, -1000, -1000, 1867, 10885, 7820, -1000,
	-1000, 266, 1210, 1997, 2307, 117, -1000, 1696, -1000, -1000,
	-1000, 896, 359, -1000, 248, 2463, 1190, -1000, -1000, 42561,
	-1000, -1000, -1000, 16401, 2628, 2641, 2628, 98, 1519, 562,
	34656, 560, -1000, 42561, 1977, 1692, 2909, 681, 3036, 42561,
	2640, 395, 2637, 2632, 3079, 366, 45562, 42561, 1167, -1000,
	1307, 363, -1000, 42561, -1000, 2124, -1000, 1501, -1000, -1000,
	3220, -1000, -1000, 10273, 10273, 3220, 1501, 1501, 1632, 42561,
	-1000, 366, 45562, 3075, 45597, 480, 2561, -1000, 42561, -1000,
	-1000, -1000, 817, -1000, 930, 713, 42561, 1802, 930, 1800,
	2631, -1000, -1000, 42561, 42561, 42561, 42561, -1000, -1000, 42561,
	-1000, 42561, 42561, 42561, 42561, 42561, 35872, -1000, 42561, 42561,
	-1000, 42561, 1790, 42561, 1780, 3093, -1000, 1519, 1519, 863,
	-1000, -1000, 564, -1000, 35872, 1983, 1982, 1979, 1976, 2305,
	2302, 2296, 1519, 1519, 1975, 2294, 35264, 2279, 1055, 1971,
	1970, 1959, 1961, 2277, 779, -1000, 2276, 1942, 1937, 1932,
	42561, 2629, 2190, -1000, -1000, 98, 1519, 310, 42561, 1666,
	562, 414, 1973, 21888, 42561, 32224, 32224, 32224, 32224, -1000,
	2943, 2942, -1000, 2928, 2927, 2934, 42561, 32224, 2628, -1000,
	35264, -1000, -1000, -1000, 1520, 1527, 3077, 877, 10273, -1000,
	-1000, -31, -45, -1000, -1000, -1000, 34656, 2264, 493, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3158, 42561, 42561, 785,
	2454, 1168, -1000, -1000, -1000, 45562, 2616, 2616, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2616, 2616, 2626,
	-1000, -1000, 2614, 2614, 2614, 2573, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2617, 2617, 2624, 2624,
	2617, -1000, -1000, 3217, -1000, 1151, -1000, -1000, 1305, -1000,
	3217, 1739, -321, 13341, 1721, 1525, -1000, 10273, 13341, 10273,
	-277, 297, -279, -1000, -1000, -1000, 2259, -1000, -1000, -1000,
	1956, -1000, 1955, -1000, 123, 135, 1778, -248, 7820, 382,
	42561, -248, 42561, 7820, -1000, 42561, 152, 380, -248, 3158,
	1, 10273, 3000, -1000, -1000, 42561, 1940, -1000, -1000, -1000,
	3229, 34656, 2124, 1488, 34048, -1000, 280, -1000, 215, 549,
	2258, -1000, 806, 111, 2251, 2240, -1000, -1000, -1000, -1000,
	12109, -1000, -1000, -1000, -1000, 1875, 10273, 2429, -1000, 917,
	917, 1978, 2428, 2426, -1000, 2616, 2616, -1000, 2573, 2614,
	2573, 917, 917, 2425, -1000, 2055, 2449, -1000, 2374, 2329,
	10273, -1000, 2423, 4251, 1041, -85, -214, 99, 99, -1000,
	-1000, -1000, -1000, 99, 99, 99, 99, -1000, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 639, -122,
	-300, -124, -301, -1000, 2421, 1148, -1000, -1000, -1000, -1000,
	-1000, 3441, 1119, -1000, -1000, 2240, 2239, -1000, -1000, -1000,
	42561, 2235, 2232, 1140, 45562, 2420, 3074, 15793, 3073, 1984,
	-1000, -1000, -1000, 33440, 537, -1000, -1000, -1000, 661, 238,
	1928, 490, -1000, 42561, 324, 2985, 1664, 2231, 42561, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3036, -1000, 1028, 376,
	31008, 13959, -1000, 371, 15793, 15793, 371, 392, 1725, -1000,
	620, 1158, 124, 32224, 42561, -1000, 31616, 2419, -1000, 1027,
	3220, -1000, 1875, 1875, -1000, 3220, 3220, 1501, -1000, 392,
	-1000, 371, -1000, 1133, 17617, 459, 407, 374, -1000, 602,
	-1000, -1000, 619, 3025, 45562, -1000, 42561, -1000, 42561, -1000,
	42561, 42561, 713, 10273, 3025, 42561, 761, -1000, -1000, 1026,
	377, 368, 677, 677, 1116, -1000, 3065, -1000, -1000, 1115,
	-1000, -1000, -1000, -1000, 42561, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 24320, 24320, 3119, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2228, 2227,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42561,
	1523, -1000, 1663, 1984, 33440, 1645, 1657, 2222, 537, 1977,
	1630, -1000, 2215, -1000, 1054, 42561, 42561, -1000, 1157, -1000,
	1629, 2864, 2905, 2864, -1000, -1000, -1000, -1000, 2941, -1000,
	2939, -1000, -1000, 1157, -1000, -1000, -1000, -1000, -1000, 877,
	-1000, 3156, 930, 930, 930, 2415, -1000, -1000, -1000, 1110,
	2414, -1000, -1000, -1000, 3261, -1000, -1000, -1000, -1000, -1000,
	-1000, 16401, 3032, 3215, 3203, 32832, 3215, -1000, -321, 1529,
	-1000, 1815, 174, 1820, 42561, -1000, -1000, -1000, 2413, 2407,
	-253, 125, 3202, 3200, 976, -1000, 2400, 1080, -248, -1000,
	-1000, 1036, -1000, -1000, -1000, -1000, -248, -1000, 1036, -1000,
	123, -1000, -1000, 3030, -1000, -1000, 2124, -1000, 212, -1000,
	-1000, -1000, -1000, -1000, -1000, 162, -1000, 42561, -1000, 1073,
	104, -1000, 1875, -1000, -1000, -1000, -1000, -1000, 4353, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10273, -1000, -1000, -1000, 2308, -1000, -1000, 10273, 2398, 2214,
	2397, 2212, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3270, -1000,
	3196, 1516, 2395, 2394, 1515, 2388, 2377, -1000, 10273, 2375,
	3441, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 814, 371,
	2370, 1057, -1000, -1000, -1000, -1000, 371, -1000, 2205, 195,
	-1000, -1000, -1000, 2198, 2191, 1925, -1000, -1000, 1929, 1313,
	205, -1000, -1000, -1000, -1000, -1000, -1000, 1973, 1945, 1579,
	-347, -1000, 2608, -1000, 1519, 1519, 1519, 42561, 1512, -1000,
	1519, 1519, 2368, -1000, 2367, 2361, -158, 682, 1688, 1686,
	-1000, 1923, 25536, 32224, 31616, 1104, -1000, 1304, -1000, -1000,
	-1000, -1000, -1000, 3220, 682, -1000, 456, 1919, 12109, 2607,
	12109, 2606, 465, 2605, 1508, -1000, 42561, -1000, -1000, 42561,
	295, 2603, -1000, 2601, 2866, 418, 2600, 2599, 42561, 2250,
	-1000, 3025, 42561, 700, 3018, -1000, -1000, -1000, 344, -1000,
	-1000, 476, -1000, 42561, -1000, 42561, -1000, 1468, -1000, 24320,
	-1000, -1000, 1506, -1000, 2190, 2188, -1000, 195, 2187, 5364,
	-1000, -1000, 2985, 2185, -1000, 42561, 1054, 1054, 3270, 42561,
	7820, -1000, -1000, 10273, 2593, -1000, 10273, -1000, -1000, -1000,
	-1000, -1000, 2589, 2987, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1604, -1000, 10273, 10273, -1000, -1000, 707, 13341, -281,
	296, -1000, -1000, -1000, -255, 2180, -1000, -1000, 3188, 2176,
	2099, 42561, -1000, -1000, 1036, 1036, -253, -1000, -1000, 1027,
	-1000, -1000, 969, 544, -1000, 2360, 2243, -1000, 2201, 99,
	-1000, 99, -1000, 175, 10273, -1000, 2175, -1000, -1000, -1000,
	2173, -1000, -1000, 2184, -1000, 2355, 45562, -159, -158, 15793,
	-159, -1000, -1000, 351, -1000, -1000, 319, -1000, -1000, 1927,
	546, -1000, -1000, -1000, 1577, 1835, 2126, 29184, 24320, 24928,
	2160, -1000, -1000, 31008, 1604, 1604, 3902, 259, 45883, -1000,
	2586, 959, 1651, -1000, 1913, -1000, 1911, -1000, 3220, 1104,
	121, -1000, -1000, 1486, -1000, 959, 2561, 3186, -1000, 3272,
	42561, 2829, 42561, 2580, 1576, 12109, -1000, 619, 2954, -1000,
	-1000, 295, -1000, -1000, 1816, 12109, -1000, -1000, 2153, 24928,
	786, 1575, 1561, 790, 2579, -1000, 491, 3258, -1000, -1000,
	-1000, 861, 2576, -1000, 1777, 1771, -1000, 42561, -1000, 29184,
	29184, 389, 389, 29184, 29184, 2574, 677, -1000, -1000, 12109,
	-1000, -1000, 1519, -1000, -1000, -1000, 1519, 1466, -1000, -1000,
	-1000, -1000, -1000, -1000, 1945, -1000, -1000, 3171, -1000, -1000,
	1875, 42561, 1875, 30400, -1000, 3185, 3183, -1000, 1875, 987,
	-1000, -321, 42561, 42561, -267, 1910, -1000, 2150, 134, -1000,
	-1000, 1022, -255, -269, 61, 24320, 1554, -1000, -1000, -1000,
	-1000, -1000, 2354, -1000, 942, -1000, -1000, -1000, 987, 2325,
	2313, -1000, -1000, -148, -1000, -1000, 365, -1000, -1000, -1000,
	523, 2141, -1000, -1000, 316, -1000, -1000, 2140, -1000, -1000,
	103, -1000, 1539, 1504, -1000, 2573, 10273, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 618, -1000, 371, 45799, -1000,
	1034, -1000, 969, 618, 27968, 571, 284, -1000, 1907, -1000,
	-1000, 3270, -1000, 539, -1000, 462, -1000, 1489, -1000, 1456,
	29792, 1900, 2763, -1000, 45635, 729, -1000, -1000, 4103, -1000,
	-1000, -1000, -1000, -1000, -1000, 2138, 2136, -1000, -1000, -1000,
	-1000, -1000, 1895, 2571, -16, 3105, 2134, -1000, -1000, 2570,
	1453, 1438, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1437, 1409, 29184, -1000, -1000, 4103, 1894, 24320, 1519,
	-1000, -1000, 1401, 1387, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2568, -1000, -1000, 3182, -267, -1000, 2130, 114, 131,
	-1000, 2128, -1000, -1000, 943, -249, 101, 100, 95, -1000,
	-1000, -1000, 10273, -1000, -1000, 42561, 484, -1000, -1000, -1000,
	161, -1000, -1000, -1000, -1000, 2126, 2113, -1000, 29184, 3065,
	2177, 444, 3181, -1000, 45883, -1000, 1519, -1000, 444, 1363,
	-1000, 1519, 1519, -1000, 406, -1000, 1599, -1000, 1892, -1000,
	3171, -1000, 390, -1000, 448, -1000, -1000, -1000, 1352, -1000,
	-1000, -1000, 45635, 457, -1000, 572, 2565, -1000, -1000, 2255,
	10273, 2563, 1519, 2248, -144, 29184, 2861, 2621, 2584, 2178,
	1331, -1000, -1000, 24320, -1000, -1000, 28576, 42561, 2099, -1000,
	-1000, 751, 120, 131, -1000, 3180, 127, 3179, 3178, 986,
	1762, -1000, 89, 85, 83, -1000, -1000, -1000, -1000, 518,
	-1000, 275, -1000, -1000, -1000, 267, -1000, -1000, 3065, -1000,
	3174, 480, -1000, 24320, -1000, -1000, 27968, 1604, 1604, -1000,
	-1000, 1876, -1000, -1000, -1000, -1000, 1874, -1000, -1000, -1000,
	1329, -1000, 42561, 778, 7208, -1000, 2170, -1000, 42561, -1000,
	2899, -1000, 225, 1315, 267, 389, 267, 389, 267, 389,
	267, 389, 268, -1000, -1000, -1000, 1271, -1000, -1000, 2562,
	1844, 125, 118, 3173, -1000, 2099, 3157, 2099, 2099, -1000,
	106, 943, -1000, -1000, -1000, 2112, -1000, -1000, -1000, -1000,
	1519, 1519, 2111, 2110, 370, -1000, -1000, -1000, 27360, 459,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 457, 45883, -1000,
	7208, 1270, -1000, 1875, -1000, 677, -1000, -1000, 2883, 2680,
	3241, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 42561, 3102, 23712, 112, -1000, -1000, -1000, 2104, -1000,
	2099, -1000, -1000, 1511, -1000, -298, 1826, 1822, -1000, -1000,
	42561, -1000, 42561, 456, -1000, 45883, 1184, -1000, 7208, -1000,
	-1000, 3249, -1000, 3242, 909, 909, 267, 267, 267, 267,
	-1000, -1000, 42561, -1000, 1089, -1000, -1000, -1000, 1303, -1000,
	-1000, -1000, -1000, 2093, -1000, -1000, 2091, -1000, -1000, -1000,
	1088, 2561, -1000, -1000, -1000, -1000, -1000, 1909, 498, -1000,
	967, -1000, 1499, -1000, 26752, 42561, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 42561, 6596, -1000, 970, -1000, -1000, 1875,
	42561, -1000,
}

var yyPgo = [...]int{
	0, 167, 3285, 242, 176, 3829, 91, 241, 226, 219,
	240, 3827, 3826, 3825, 3824, 3042, 3039, 3823, 3822, 3821,
	3820, 3819, 3818, 3816, 3815, 3814, 3813, 3812, 3810, 3809,
	3808, 3802, 3800, 3798, 3797, 3795, 3791, 3790, 3789, 3788,
	3787, 3785, 3784, 3783, 3782, 3781, 3780, 239, 3777, 3776,
	3775, 3773, 3771, 3770, 3769, 3768, 3767, 3766, 3764, 3762,
	3760, 3759, 3758, 3757, 3756, 3754, 3752, 3751, 3750, 3749,
	3747, 3746, 3742, 3741, 3739, 3736, 3735, 3734, 3730, 3729,
	3724, 212, 3723, 3038, 3722, 3720, 3714, 3713, 3712, 3711,
	3709, 236, 3708, 3706, 3705, 3704, 3703, 3702, 3701, 3700,
	3699, 3698, 3697, 234, 3696, 3691, 3690, 3689, 220, 3688,
	232, 3687, 174, 129, 3686, 3685, 3682, 3681, 3680, 3679,
	237, 184, 72, 3678, 46, 3672, 3671, 214, 3669, 150,
	3660, 146, 3659, 3658, 3657, 3656, 3655, 3654, 3653, 3652,
	3649, 3646, 3641, 3640, 3639, 3638, 3637, 3633, 3632, 3631,
	95, 3629, 252, 3626, 70, 3625, 3624, 128, 69, 126,
	250, 1826, 245, 253, 195, 169, 101, 3623, 3067, 3622,
	158, 223, 154, 27, 3621, 136, 3620, 254, 51, 34,
	235, 151, 57, 157, 125, 3619, 208, 106, 109, 3618,
	3617, 141, 3616, 231, 171, 3614, 99, 3610, 3605, 3601,
	3595, 3593, 188, 213, 3591, 3589, 132, 3588, 3587, 120,
	3586, 76, 122, 166, 116, 3585, 222, 123, 124, 117,
	111, 3584, 145, 3582, 3580, 3579, 3578, 178, 3577, 3576,
	134, 73, 3575, 3574, 3572, 49, 3571, 78, 3567, 74,
	3565, 58, 3564, 3562, 3560, 3558, 3557, 3554, 3552, 3550,
	3548, 3547, 3544, 3543, 54, 3540, 3535, 7, 13, 16,
	3532, 25, 3531, 164, 3530, 3525, 3524, 3523, 3522, 89,
	86, 3521, 92, 161, 3520, 9, 26, 68, 3514, 3513,
	215, 812, 102, 147, 3512, 318, 3511, 3509, 3505, 159,
	3504, 460, 3502, 3501, 3500, 3499, 3496, 3493, 165, 3492,
	211, 39, 3491, 133, 140, 3490, 38, 42, 194, 193,
	3489, 3488, 3487, 280, 199, 103, 79, 0, 3484, 153,
	3483, 3481, 3480, 256, 3479, 230, 225, 162, 261, 268,
	204, 3478, 3477, 59, 3476, 172, 31, 48, 137, 64,
	19, 314, 3475, 1173, 8, 191, 3473, 203, 3471, 190,
	14, 248, 148, 3470, 3469, 37, 257, 3466, 3465, 3464,
	130, 3462, 3461, 119, 83, 3460, 3459, 3458, 3457, 60,
	3456, 33, 28, 3455, 96, 3453, 238, 3452, 246, 135,
	182, 179, 152, 216, 227, 71, 80, 3451, 1655, 149,
	97, 22, 3450, 217, 3449, 180, 127, 3448, 88, 3446,
	233, 255, 210, 3443, 183, 10, 43, 36, 29, 45,
	12, 306, 189, 3442, 3441, 20, 47, 3440, 50, 3438,
	17, 3437, 3436, 3435, 65, 5, 3433, 3432, 15, 18,
	3431, 35, 192, 168, 121, 93, 67, 3427, 3425, 44,
	173, 3424, 143, 156, 155, 3422, 77, 3421, 3407, 3404,
	849, 3403, 244, 3402, 3401, 3400, 3399, 3398, 3397, 3396,
	3395, 3394, 3392, 104, 40, 3391, 3390, 3388, 3386, 81,
	138, 3385, 3382, 3374, 3373, 32, 139, 3372, 11, 3371,
	21, 23, 30, 3368, 98, 3366, 3, 181, 3364, 3362,
	4, 3361, 3360, 1, 2, 3359, 3358, 115, 3357, 90,
	24, 163, 105, 3352, 3349, 87, 205, 142, 3347, 3346,
	107, 228, 202, 3344, 75, 229, 251, 3343, 206, 3342,
	3339, 3337, 3335, 3334, 3333, 1090, 3332, 3331, 224, 84,
	94, 114, 3330, 3329, 3327, 85, 160, 113, 112, 52,
	82, 3326, 110, 197, 3324, 187, 3321, 3320, 3319, 100,
	3318, 3316, 3314, 3310, 185, 3309, 3307, 186, 218, 3304,
	3301, 317, 3300, 3298, 3297, 3296, 3295, 3293, 3292, 3291,
	3290, 3289, 247, 243, 3288,
}

//line mysql_sql.y:11755
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObejectInfo {
	v, _ := st.union.(tree.ObejectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 567, 570, 570, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 118, 118, 147, 546, 546, 117,
	552, 552, 552, 553, 553, 114, 136, 135, 138, 138,
	137, 137, 134, 134, 130, 133, 133, 132, 132, 131,
	126, 128, 128, 127, 129, 129, 115, 103, 116, 496,
	496, 495, 495, 494, 494, 447, 447, 493, 493, 493,
	492, 492, 492, 491, 491, 490, 490, 489, 489, 487,
	487, 488, 486, 485, 485, 485, 483, 483, 483, 479,
	479, 481, 480, 480, 482, 474, 474, 477, 477, 475,
	475, 475, 475, 478, 473, 473, 473, 472, 472, 102,
	102, 102, 390, 390, 101, 101, 404, 404, 404, 404,
	404, 402, 402, 402, 402, 402, 402, 401, 401, 400,
	400, 405, 405, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 92, 92, 92, 92, 92, 97, 97,
	97, 558, 558, 557, 557, 559, 559, 559, 559, 560,
	560, 95, 95, 95, 96, 399, 399, 399, 93, 94,
	94, 389, 389, 394, 394, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 398, 398,
	398, 396, 396, 395, 395, 397, 397, 86, 86, 86,
	89, 88, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 87, 87, 87, 87, 87, 87, 82, 82, 82,
	82, 82, 81, 81, 83, 83, 386, 386, 385, 98,
	98, 99, 555, 555, 554, 556, 556, 556, 556, 100,
	106, 106, 106, 106, 106, 106, 106, 105, 105, 108,
	108, 107, 109, 91, 91, 91, 91, 91, 91, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 521, 521, 521, 523, 523, 321, 322, 571,
	324, 320, 320, 320, 517, 517, 518, 519, 520, 520,
	520, 104, 14, 192, 192, 422, 422, 11, 11, 11,
	11, 11, 11, 11, 11, 13, 80, 85, 85, 262,
	262, 267, 267, 268, 268, 268, 273, 273, 274, 274,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 249, 249, 249, 244, 244, 244, 244, 245,
	245, 246, 246, 247, 247, 247, 247, 248, 248, 314,
	314, 269, 269, 269, 271, 271, 270, 266, 264, 264,
	264, 264, 264, 264, 264, 265, 265, 265, 265, 272,
	272, 78, 84, 84, 84, 534, 534, 79, 545, 545,
	450, 450, 335, 335, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	455, 456, 331, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 54, 57, 58, 53, 53, 53,
	375, 375, 52, 572, 572, 309, 309, 66, 65, 56,
	67, 68, 69, 70, 71, 72, 51, 64, 64, 64,
	64, 64, 64, 64, 64, 75, 468, 468, 574, 574,
	574, 73, 74, 449, 449, 449, 63, 62, 61, 60,
	59, 59, 50, 50, 49, 49, 55, 142, 143, 143,
	328, 328, 328, 330, 330, 326, 573, 573, 418, 418,
	329, 329, 48, 48, 48, 48, 76, 327, 327, 308,
	325, 325, 325, 12, 12, 10, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 26, 27, 29, 383, 383, 380, 28, 20, 19,
	19, 23, 22, 18, 18, 21, 24, 25, 25, 9,
	9, 9, 9, 15, 15, 16, 165, 165, 217, 217,
	529, 529, 525, 525, 526, 526, 526, 527, 527, 528,
	528, 110, 462, 462, 462, 462, 462, 462, 8, 187,
	187, 461, 461, 461, 461, 461, 461, 387, 387, 387,
	506, 506, 506, 507, 186, 186, 181, 181, 463, 463,
	352, 508, 508, 471, 471, 470, 470, 469, 469, 184,
	184, 185, 185, 168, 168, 121, 121, 476, 476, 476,
	476, 484, 484, 446, 446, 254, 254, 301, 301, 302,
	302, 158, 158, 159, 159, 159, 159, 159, 159, 561,
	561, 562, 563, 564, 564, 565, 565, 565, 566, 566,
	566, 566, 566, 514, 514, 516, 516, 515, 183, 183,
	179, 179, 180, 180, 180, 178, 178, 177, 176, 176,
	175, 173, 173, 173, 174, 174, 174, 191, 191, 161,
	161, 161, 160, 160, 160, 160, 160, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 162,
	162, 522, 522, 522, 451, 451, 451, 458, 458, 282,
	282, 283, 283, 281, 281, 163, 163, 164, 164, 164,
	164, 280, 280, 279, 166, 166, 172, 171, 171, 167,
	167, 167, 167, 290, 290, 289, 289, 289, 289, 113,
	119, 119, 120, 190, 190, 288, 287, 287, 287, 189,
	189, 188, 188, 182, 182, 170, 170, 170, 170, 286,
	169, 284, 551, 551, 550, 550, 549, 547, 547, 547,
	548, 548, 548, 548, 498, 498, 498, 498, 498, 315,
	315, 315, 319, 319, 318, 318, 318, 318, 318, 323,
	7, 7, 7, 7, 7, 7, 7, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	39, 201, 202, 40, 203, 203, 204, 204, 205, 205,
	206, 207, 208, 208, 208, 208, 38, 193, 193, 194,
	194, 195, 195, 196, 197, 197, 197, 200, 198, 199,
	199, 569, 569, 568, 37, 37, 30, 151, 151, 152,
	152, 152, 154, 154, 250, 250, 250, 153, 153, 155,
	155, 155, 530, 533, 531, 531, 535, 535, 535, 536,
	536, 536, 536, 537, 537, 31, 139, 144, 540, 540,
	540, 539, 539, 541, 541, 542, 542, 305, 305, 306,
	306, 149, 150, 150, 146, 141, 157, 157, 157, 157,
	157, 140, 145, 148, 532, 538, 538, 538, 384, 384,
	381, 382, 382, 379, 378, 378, 378, 544, 544, 543,
	543, 543, 316, 316, 32, 374, 374, 376, 377, 377,
	377, 368, 368, 368, 368, 36, 372, 372, 373, 373,
	373, 373, 373, 373, 373, 369, 369, 371, 371, 367,
	367, 367, 367, 367, 367, 367, 35, 156, 156, 366,
	366, 363, 363, 361, 361, 362, 362, 360, 360, 360,
	364, 364, 43, 77, 44, 45, 46, 42, 365, 365,
	34, 34, 34, 34, 34, 34, 34, 34, 123, 122,
	122, 122, 122, 122, 125, 125, 304, 304, 303, 303,
	124, 251, 251, 41, 229, 229, 438, 438, 433, 433,
	433, 433, 433, 453, 453, 453, 434, 434, 434, 435,
	435, 435, 437, 437, 437, 436, 436, 436, 436, 436,
	452, 452, 454, 454, 454, 406, 406, 407, 407, 407,
	410, 410, 425, 425, 426, 426, 424, 424, 431, 431,
	430, 430, 429, 429, 428, 428, 427, 427, 427, 427,
	421, 421, 420, 420, 408, 408, 408, 408, 408, 409,
	409, 409, 419, 419, 423, 423, 278, 278, 277, 277,
	237, 237, 238, 238, 276, 276, 235, 235, 236, 236,
	236, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 504, 504, 505, 240,
	240, 252, 252, 252, 252, 252, 252, 239, 239, 241,
	241, 218, 218, 216, 216, 216, 216, 209, 209, 210,
	210, 211, 211, 211, 215, 215, 214, 214, 214, 214,
	212, 212, 213, 213, 213, 213, 213, 213, 392, 392,
	501, 501, 502, 502, 497, 497, 497, 500, 500, 500,
	500, 500, 500, 500, 503, 503, 503, 499, 499, 219,
	299, 299, 299, 317, 317, 317, 317, 298, 298, 298,
	234, 234, 233, 233, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 391, 391, 332, 332,
	333, 333, 261, 260, 260, 260, 260, 260, 258, 259,
	257, 257, 257, 257, 257, 256, 256, 255, 255, 255,
	370, 370, 253, 253, 243, 243, 243, 242, 242, 242,
	432, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 296,
	296, 296, 297, 297, 297, 297, 297, 297, 297, 297,
	342, 342, 348, 348, 513, 513, 512, 220, 220, 220,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 230,
	230, 230, 415, 415, 415, 415, 416, 416, 416, 416,
	417, 417, 417, 413, 413, 414, 414, 353, 354, 354,
	459, 459, 460, 460, 411, 411, 412, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 467,
	467, 467, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 524, 524,
	524, 509, 509, 509, 510, 510, 510, 510, 510, 510,
	510, 510, 510, 510, 510, 510, 511, 511, 511, 511,
	511, 511, 511, 511, 511, 511, 511, 511, 511, 511,
	511, 511, 511, 294, 294, 294, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 355, 355, 356, 356, 464, 464,
	464, 464, 464, 464, 465, 465, 466, 466, 466, 466,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 457,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 457,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 340,
	291, 291, 291, 357, 349, 349, 350, 350, 351, 351,
	343, 343, 343, 343, 343, 343, 344, 344, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	345, 345, 347, 347, 359, 359, 359, 358, 358, 358,
	358, 358, 358, 358, 232, 232, 232, 232, 337, 337,
	337, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 222, 222, 222, 222, 226, 226, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 227, 227, 227, 227, 227, 225, 225,
	225, 225, 225, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 111, 112, 112, 224, 300, 300, 439, 439, 442,
	442, 440, 440, 441, 443, 443, 443, 444, 444, 444,
	445, 445, 445, 448, 448, 307, 307, 307, 313, 313,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 6, 1, 2, 4,
	0, 1, 1, 0, 1, 5, 2, 2, 6, 9,
	6, 9, 4, 7, 8, 0, 1, 1, 2, 4,
	6, 1, 2, 4, 0, 2, 10, 10, 2, 0,
	2, 1, 3, 3, 3, 0, 2, 1, 3, 5,
	0, 2, 3, 1, 3, 1, 1, 1, 3, 1,
	1, 1, 1, 0, 3, 3, 0, 3, 3, 0,
	1, 3, 0, 1, 3, 0, 2, 1, 2, 3,
	4, 3, 3, 1, 0, 1, 1, 0, 1, 8,
	5, 7, 0, 3, 8, 5, 1, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	4, 1, 3, 1, 2, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 4,
	4, 1, 3, 3, 1, 2, 2, 2, 1, 2,
	2, 3, 4, 4, 6, 1, 1, 1, 2, 4,
	6, 1, 4, 1, 3, 3, 4, 4, 4, 4,
	3, 3, 2, 4, 4, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	2, 2, 0, 1, 4, 2, 4, 1, 5, 3,
	2, 1, 2, 2, 4, 4, 5, 2, 1, 3,
	4, 4, 1, 2, 9, 7, 1, 3, 3, 1,
	1, 3, 1, 3, 2, 1, 2, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 4, 4, 2,
	4, 3, 3, 1, 1, 1, 1, 1, 1, 2,
	3, 4, 7, 2, 3, 3, 4, 5, 3, 4,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 1, 1, 1,
	1, 6, 4, 1, 1, 0, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 10, 7, 4, 4, 1,
	3, 1, 6, 3, 3, 3, 1, 1, 1, 3,
	2, 4, 5, 5, 6, 5, 5, 3, 2, 2,
	1, 3, 4, 3, 7, 5, 8, 2, 2, 1,
	3, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 2, 1, 3, 2, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 6, 3, 3, 1,
	1, 7, 7, 8, 8, 0, 4, 7, 0, 3,
	0, 2, 0, 1, 1, 1, 1, 4, 2, 2,
	3, 3, 4, 5, 3, 4, 4, 2, 2, 2,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 3, 2, 5, 5,
	0, 2, 7, 0, 1, 0, 1, 5, 5, 3,
	3, 2, 4, 4, 4, 4, 4, 1, 1, 1,
	3, 3, 1, 1, 1, 6, 0, 1, 1, 1,
	1, 5, 5, 0, 1, 1, 3, 3, 3, 4,
	6, 7, 4, 4, 7, 8, 3, 3, 3, 4,
	0, 2, 2, 0, 2, 2, 1, 1, 1, 1,
	0, 1, 4, 4, 5, 4, 3, 1, 3, 1,
	1, 3, 5, 2, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 4, 4, 1, 3, 1, 4, 6, 6,
	4, 4, 4, 4, 4, 3, 6, 3, 5, 1,
	1, 2, 2, 11, 8, 9, 1, 3, 2, 4,
	0, 2, 0, 1, 1, 1, 1, 0, 1, 0,
	1, 4, 2, 1, 5, 4, 4, 2, 5, 1,
	3, 2, 1, 5, 4, 4, 2, 0, 5, 4,
	0, 1, 3, 3, 1, 3, 1, 3, 1, 3,
	4, 0, 1, 0, 1, 1, 3, 1, 1, 0,
	4, 1, 3, 2, 1, 0, 8, 0, 4, 7,
	4, 0, 2, 0, 2, 0, 2, 0, 4, 1,
	3, 1, 1, 6, 4, 5, 7, 4, 5, 0,
	1, 3, 8, 0, 6, 0, 4, 6, 1, 1,
	1, 1, 1, 2, 3, 1, 3, 6, 0, 3,
	0, 1, 2, 4, 4, 0, 1, 3, 1, 3,
	3, 0, 1, 1, 0, 2, 2, 0, 2, 3,
	3, 3, 1, 3, 3, 3, 3, 1, 2, 2,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 7,
	7, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 2, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 3, 1, 1, 1, 4,
	4, 4, 3, 2, 2, 2, 3, 2, 3, 4,
	1, 3, 4, 0, 2, 1, 1, 2, 2, 0,
	1, 2, 4, 1, 3, 1, 3, 2, 3, 1,
	4, 3, 0, 1, 1, 2, 5, 2, 2, 2,
	0, 2, 3, 3, 0, 1, 3, 1, 3, 0,
	1, 2, 1, 1, 0, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 1, 7, 1, 3, 0, 1, 1, 3,
	1, 3, 0, 1, 1, 1, 14, 1, 3, 0,
	1, 1, 3, 1, 1, 2, 4, 1, 1, 1,
	1, 0, 1, 2, 9, 9, 7, 1, 2, 3,
	3, 3, 0, 4, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 4, 1, 1, 3, 4, 3, 0,
	1, 1, 1, 0, 2, 7, 8, 8, 0, 3,
	3, 0, 3, 0, 3, 0, 5, 1, 3, 0,
	3, 3, 0, 2, 9, 6, 0, 2, 2, 3,
	3, 4, 4, 4, 1, 0, 2, 2, 1, 3,
	2, 1, 3, 2, 1, 3, 2, 0, 1, 3,
	4, 3, 1, 1, 4, 1, 3, 1, 1, 1,
	1, 0, 1, 1, 1, 11, 0, 2, 3, 3,
	2, 2, 3, 1, 1, 1, 3, 3, 4, 0,
	2, 2, 2, 2, 2, 2, 6, 0, 4, 1,
	1, 0, 3, 0, 1, 1, 2, 4, 4, 4,
	0, 1, 8, 2, 4, 4, 4, 9, 0, 2,
	11, 9, 11, 8, 6, 9, 7, 10, 2, 2,
	9, 4, 5, 3, 0, 4, 1, 3, 0, 3,
	6, 0, 2, 10, 0, 2, 0, 2, 0, 3,
	2, 4, 3, 0, 2, 1, 0, 2, 3, 0,
	2, 3, 0, 2, 1, 0, 3, 2, 4, 3,
	0, 1, 0, 1, 1, 0, 6, 0, 3, 5,
	0, 4, 0, 3, 1, 3, 4, 5, 0, 3,
	1, 3, 2, 3, 1, 2, 0, 4, 6, 5,
	0, 2, 0, 2, 4, 5, 4, 5, 1, 5,
	6, 5, 0, 3, 0, 1, 1, 3, 3, 3,
	0, 4, 1, 3, 3, 3, 0, 1, 1, 3,
	2, 3, 3, 3, 4, 4, 3, 3, 3, 3,
	4, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 5, 4, 1, 3, 3, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 4, 6, 0, 1, 1,
	3, 1, 1, 1, 1, 1, 7, 9, 7, 9,
	2, 1, 7, 9, 7, 9, 8, 5, 0, 1,
	0, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 3,
	1, 3, 5, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 2, 1, 2, 2, 1, 1, 2,
	2, 2, 3, 3, 2, 2, 1, 5, 6, 4,
	1, 1, 1, 5, 4, 1, 1, 2, 0, 1,
	1, 2, 5, 0, 1, 1, 2, 2, 3, 3,
	1, 1, 2, 2, 2, 0, 1, 2, 2, 2,
	0, 3, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 3, 5, 2,
	2, 2, 2, 4, 1, 1, 2, 5, 6, 8,
	6, 6, 6, 1, 1, 1, 1, 1, 1, 4,
	4, 4, 7, 9, 7, 7, 7, 9, 7, 7,
	0, 2, 0, 1, 1, 2, 4, 1, 2, 2,
	1, 2, 2, 1, 2, 2, 2, 2, 2, 0,
	1, 1, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 5, 0, 1, 3, 0, 1,
	0, 2, 0, 2, 0, 1, 6, 8, 8, 6,
	6, 5, 5, 5, 6, 6, 6, 6, 5, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 1,
	1, 1, 4, 4, 6, 8, 6, 4, 5, 4,
	4, 4, 3, 4, 6, 6, 7, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 8, 4, 2, 3, 2,
	4, 2, 2, 4, 6, 2, 2, 4, 6, 4,
	2, 4, 4, 4, 0, 1, 2, 3, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 1, 1, 3, 0, 1, 1, 3, 1, 3,
	3, 3, 3, 3, 2, 1, 1, 1, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 1, 3,
	4, 4, 5, 4, 5, 3, 4, 5, 6, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 2, 3, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 4,
	1, 2, 3, 5, 1, 1, 3, 0, 1, 0,
	3, 0, 3, 3, 0, 3, 5, 0, 3, 5,
	0, 1, 1, 0, 1, 1, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int{
	-1000, -567, -570, -2, -5, 620, -1, -4, -112, -86,
	-7, -14, -114, -115, -8, -110, -9, -10, -12, -90,
	-105, -107, -109, -108, -47, -11, -104, -81, -82, -92,
	-98, -101, -102, -103, -116, -111, -113, -158, -117, -118,
	610, -87, -88, -89, -33, -32, -31, -30, -139, -144,
	-147, 544, 616, 447, 14, 496, -15, -16, -514, -17,
	259, -320, -321, -322, -324, -571, -48, -49, -50, -59,
	-60, -61, -62, -63, -73, -74, -75, -51, -52, -53,
	-56, -54, -66, -65, -67, -68, -69, -70, -71, -72,
	-55, -142, -143, -76, -57, -77, -58, -79, -78, -84,
	-80, -85, -141, -146, -13, 234, -83, 76, -93, -94,
	-95, -96, -97, -99, -100, 371, 377, 434, 609, 61,
	-159, -161, 626, 627, 159, 160, 162, 163, -34, -35,
	-36, -37, -38, -39, -41, -40, -42, -43, -44, -45,
	-46, 230, 16, 539, -18, -21, -19, -22, -20, -28,
	-29, -27, -24, -26, -140, -25, -145, -23, -148, 254,
	253, 38, 320, 321, 322, 375, 252, 231, 15, 31,
	42, 351, -160, 82, 531, 532, 534, 232, -162, 13,
	631, -6, -3, -2, -126, -130, -134, -137, -138, -135,
	-136, -4, -112, 117, 244, 611, -317, 367, 612, 614,
	613, 85, 93, -310, -312, 447, 259, 371, 377, 609,
	627, 546, 547, 548, 549, 550, 551, 552, 553, 555,
	556, 557, 558, 559, 560, 561, 571, 572, 562, 563,
	564, 565, 566, 567, 568, 569, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 585, 586,
	499, 596, 597, 598, 599, 527, 554, 590, 591, 592,
	593, 349, 350, 536, 271, 295, 402, 301, 308, 159,
	178, 172, 200, 192, 532, 167, 275, 313, 276, 92,
	162, 482, 107, 459, 431, 165, 290, 292, 294, 528,
	529, 361, 297, 526, 296, 298, 300, 530, 277, 352,
	188, 183, 289, 273, 181, 278, 40, 279, 205, 280,
	281, 541, 455, 348, 461, 305, 52, 429, 182, 456,
	293, 458, 209, 213, 473, 474, 176, 177, 463, 476,
	204, 207, 208, 251, 345, 346, 43, 538, 263, 477,
	211, 203, 199, 485, 309, 307, 202, 175, 198, 274,
	65, 215, 214, 216, 425, 426, 427, 428, 282, 283,
	365, 472, 195, 184, 353, 168, 23, 480, 258, 460,
	378, 284, 302, 310, 210, 212, 265, 270, 540, 531,
	433, 269, 306, 478, 180, 262, 291, 257, 481, 169,
	534, 380, 285, 163, 299, 475, 484, 64, 393, 174,
	166, 248, 160, 267, 272, 286, 287, 288, 525, 312,
	311, 303, 533, 196, 264, 201, 186, 173, 197, 161,
	266, 483, 394, 607, 351, 412, 194, 191, 268, 241,
	479, 462, 164, 416, 395, 189, 314, 603, 604, 605,
	366, 344, 315, 316, 187, 255, 453, 454, 319, 422,
	335, 396, 432, 403, 397, 222, 223, 323, 465, 467,
	206, 606, 324, 325, 326, 457, 327, 328, 329, 330,
	370, 56, 58, 94, 97, 96, 628, 629, 63, 29,
	356, 359, 391, 398, 337, 608, 537, 334, 338, 339,
	360, 25, 414, 382, 418, 417, 48, 49, 50, 53,
	54, 55, 57, 59, 60, 51, 524, 375, 388, 486,
	45, 47, 385, 27, 362, 413, 435, 333, 415, 446,
	46, 444, 445, 466, 26, 364, 363, 62, 44, 421,
	423, 424, 317, 331, 373, 617, 487, 368, 384, 387,
	369, 336, 358, 389, 67, 66, 381, 618, 376, 374,
	332, 542, 543, 340, 570, 354, 430, 521, 520, 519,
	518, 517, 516, 515, 514, 320, 321, 322, 399, 400,
	401, 411, 404, 405, 406, 407, 408, 409, 410, 449,
	450, 619, 468, 470, 471, 469, 236, 630, 355, 239,
	621, 622, 95, 623, 625, 624, 28, -397, -395, -317,
	532, 609, 377, 531, 534, 371, 351, 627, 375, 259,
	320, 321, 322, 447, 349, -203, -317, 630, -168, 39,
	-216, -317, -168, -83, -16, -15, -160, -161, -216, 238,
	-325, 24, 429, -91, 430, 234, 82, 77, -317, -9,
	-103, -8, -110, -81, -158, 434, -323, -317, 320, 320,
	-323, 238, -317, 269, 410, -450, 244, -401, -374, 270,
	-400, -376, -403, -377, 32, 230, 232, 231, 266, 16,
	375, 240, 14, 13, 376, 252, 25, 26, 28, 15,
	377, 379, 29, 380, 383, 384, 385, 42, 388, 389,
	259, 85, 93, 88, 277, -202, -317, -351, -343, 114,
	-346, -338, -339, -341, -493, -487, -336, 82, 141, 142,
	149, 115, 632, -340, -432, 36, 117, 550, 554, 590,
	497, -292, -293, -294, -295, -296, -297, -317, -488, -486,
	88, 98, 100, 104, 105, 103, 101, 153, 185, 102,
	89, 154, -161, 85, -509, 560, -311, 583, 596, 597,
	598, 599, 582, 61, -457, -466, 237, -464, 152, 190,
	255, 186, 14, 147, 422, 187, 591, 592, 593, 557,
	579, 499, 561, 571, 586, 552, 553, 555, 547, 548,
	549, 551, 562, 564, 578, -467, 574, 584, 585, 570,
	594, 595, 587, 588, 589, 625, 87, 86, 577, 576,
	563, 558, 559, 565, 546, 556, 566, 567, 575, 580,
	581, 359, 107, 360, 361, 489, 352, 362, 244, 429,
	70, 363, 364, 365, 366, 367, 496, 368, 71, 369,
	358, 259, 412, 370, 189, 206, 501, 500, 502, 493,
	490, 488, 491, 492, 494, 495, 568, 569, 573, -119,
	-120, 601, -561, -285, -562, 6, 7, 8, 9, -563,
	154, -552, 431, 540, 88, 164, 161, -388, 164, 113,
	169, 168, -388, 166, 323, 265, -365, -151, 349, 412,
	327, 94, 269, -368, -366, 528, -452, 317, 313, 289,
	239, 110, -152, 249, 248, 108, 489, 237, 386, 308,
	56, 58, -525, -526, 227, 228, 229, -516, 522, -515,
	-317, 361, 96, 97, 27, 238, 372, 265, 467, 465,
	466, 468, 469, 470, 471, -64, -468, -449, 462, 461,
	-329, 454, 460, 452, 464, 455, 350, 329, 328, 230,
	621, 529, 523, -307, 396, 432, 486, 487, 373, 433,
	473, 475, 456, 107, 193, 190, 239, 241, 238, 349,
	489, 412, 94, 327, -525, 161, 473, 475, 269, 410,
	41, -394, 422, -393, -395, 474, 485, 86, 87, 472,
	-307, 107, 453, 453, -561, -285, -159, -161, -113, -514,
	530, 530, 530, 239, 349, 412, 269, 240, 238, 525,
	528, 241, 489, 237, 320, 372, 265, 327, 94, 166,
	-451, -522, 32, -458, 224, 225, 226, 33, 34, -1,
	121, 631, -343, -343, -6, 634, -6, -343, -317, -317,
	156, -222, -226, -223, -225, -224, -228, -227, 190, 191,
	152, 194, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 207, 208, 205, 31, 206, 255, 186, 187, 188,
	189, 209, 172, 192, 537, 217, 173, 218, 174, 219,
	175, 220, 176, 177, 221, 178, 181, 182, 183, 184,
	180, 155, -192, 88, 32, 82, 155, 88, -184, 261,
	-216, 155, 632, -184, -561, -177, -178, 11, -216, -298,
	-317, 431, 124, -91, 77, -91, 430, 77, -517, -518,
	-519, -521, 234, 430, 429, -108, 155, 277, 17, -323,
	-323, 80, -216, -376, 269, -401, -374, 36, 79, 156,
	242, 156, 79, 82, 373, 349, 412, 374, 489, 238,
	386, 241, 269, 387, 349, 412, 238, 241, 489, 269,
	349, 238, 241, 412, 269, 387, 452, 453, 241, 27,
	378, 381, 382, 453, -472, 485, 156, 113, 110, 111,
	112, -343, 131, -358, 124, 125, 126, 127, 128, 129,
	130, 138, 137, 148, 141, 142, 143, 144, 145, 146,
	147, 139, 140, 134, 114, 132, 136, 133, 116, -161,
	-343, -351, 61, -341, -341, -341, -341, -317, -432, -348,
	-343, 82, 82, 82, 82, 155, 101, 88, -343, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, -465, 82, 82, -355, -356, 82, 82, -336, -298,
	82, 88, 88, 82, 82, 82, 88, 82, 82, 82,
	-356, -356, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, -178, 156, -177,
	82, -177, -178, -162, -161, 32, 33, 32, 33, 32,
	33, 32, 33, -564, 618, 82, 98, 628, 222, 478,
	539, 167, 168, 169, -363, 244, -201, -317, -203, 372,
	241, 525, 241, -152, -363, -363, -363, -363, -363, 240,
	-363, 24, 238, 238, 238, 238, -363, 496, 124, 124,
	59, -527, 171, 156, -516, -183, 82, -328, 132, 136,
	-328, -281, 18, 24, 267, 267, 267, -328, 307, -572,
	-573, 17, 134, -326, -573, -326, -326, -328, -574, 240,
	463, 43, 268, 267, -179, -180, 22, -179, 457, 453,
	-418, 458, 459, -330, -573, -329, -328, -328, -329, -328,
	-328, -328, 32, 238, 241, 489, 327, 622, -572, -572,
	31, 31, -450, -450, -216, -450, 523, -308, -317, -450,
	-450, -450, -528, 243, -558, -557, 476, -560, 478, 161,
	-395, 161, -395, -376, 269, 269, 156, 124, 24, -396,
	124, 135, -395, -395, -396, -396, -239, 41, -316, 152,
	-317, 88, -239, 41, -555, -554, -216, -178, -162, -161,
	83, 83, 83, 533, 533, 533, -450, -450, -450, -450,
	-450, -452, -450, -450, -450, -450, -450, -323, -193, -317,
	-203, 244, -450, -450, -450, -163, -164, 143, -343, -317,
	-163, -3, -128, -127, 118, 119, 121, 612, 367, 611,
	615, 609, -395, 41, -445, 394, 393, -439, -441, 82,
	-440, 82, -440, -440, -440, -440, -440, 82, 82, -442,
	82, -442, -442, -439, -443, 82, -443, -444, 82, -444,
	-443, -317, -422, 539, -349, -351, -317, 39, -461, 61,
	-158, 82, 31, 82, -317, -343, -462, 61, -158, 82,
	31, -178, -121, 39, -180, 21, 155, 98, 88, -108,
	-91, 77, -108, 83, 156, -520, 104, 105, -523, 204,
	196, -317, -106, 88, -7, -8, -9, -10, -47, -81,
	-158, -489, -487, 82, 32, 421, 79, 17, -402, 238,
	489, 372, 265, 241, 349, -400, -383, -380, -378, -316,
	-376, -379, -378, -405, -298, 453, -122, 436, 435, 319,
	-343, -343, -343, -343, -343, 103, 114, 344, 104, 105,
	-338, -359, 32, 315, 316, -339, -339, -339, -339, -339,
	-339, -339, -339, -339, -339, -339, -339, -347, -357, -432,
	82, 134, 132, 136, 133, 116, -341, -341, -339, -339,
	83, 156, -343, -513, -512, 118, -343, -343, -343, -343,
	-317, -510, -511, 503, 504, 505, 506, 507, 508, 509,
	510, 511, 512, 513, 363, 358, 364, 362, 352, 370,
	365, 366, 189, 520, 521, 514, 515, 516, 517, 518,
	519, -349, -349, -343, -510, -349, -291, 33, 32, -351,
	-351, -351, 83, -343, -524, 342, 341, 343, -181, -317,
	-349, 83, 83, 83, 98, -351, -351, -349, -339, -349,
	-349, -349, -349, -511, -291, -291, -291, -291, 143, -351,
	-351, -291, -291, -291, -291, 143, -291, -291, -291, -291,
	-291, -291, -291, -291, -291, -291, 83, 83, 83, 143,
	-351, -179, -120, -470, -469, -343, 41, -121, -180, -565,
	619, 82, -298, -553, 88, 88, 632, 479, 480, 165,
	168, 167, -317, 114, 35, 82, -193, -363, -363, -363,
	-530, -317, -384, -381, -378, -317, -317, -374, -317, -317,
	-216, -363, -363, -363, -363, -216, -250, 53, 54, 55,
	-378, -153, 56, 57, -528, -515, 35, -182, -317, -281,
	-341, -341, -343, -378, 269, -572, -328, -328, -309, -308,
	-330, -325, -330, -330, -281, -326, -328, -328, -343, -330,
	-326, -281, -317, 453, -281, -281, -418, -328, -327, -317,
	-327, -363, -308, -309, -309, -216, -216, -262, -267, -263,
	-268, 261, 235, 356, 357, 233, 231, 11, 232, -275,
	308, -364, 497, -245, -246, 77, 42, -248, 259, 398,
	391, 271, 275, 92, 276, 431, 277, 240, 279, 280,
	281, 296, 298, 251, 282, 283, 284, 422, 285, 160,
	297, 286, 287, 288, 374, -240, 6, 330, 41, 51,
	52, 445, 444, 542, 539, 272, -530, -530, 31, 31,
	-384, -317, -317, -171, -166, -170, -167, -172, -284, -286,
	-169, 82, -216, -161, -317, 156, 477, 479, 480, -558,
	-396, -558, -396, 32, 421, -399, 421, 32, -374, -393,
	473, 475, -389, 88, 422, -379, -398, 79, 152, -469,
	-396, -396, -398, -398, 151, 156, -556, 478, 479, 227,
	-179, 98, 98, 98, -218, -216, -530, -383, -374, -317,
	-450, -218, -218, -218, -317, -317, 82, 155, 36, -317,
	-317, -317, -280, 156, -279, 17, -318, -317, 35, 88,
	155, -280, -129, -127, 120, -343, -6, 611, -343, -6,
	-6, -343, -6, -343, -448, 395, 98, 98, -300, 88,
	-300, 98, 98, 98, 545, 83, 88, -387, 79, -463,
	-352, -508, 601, -186, 83, -181, -506, -507, -181, -185,
	-317, 632, 633, -463, -186, 83, -506, -179, 602, -121,
	-176, -175, -343, -317, 24, -108, -91, -518, 155, 156,
	-182, -402, -382, -379, -404, 143, -317, -390, 156, 539,
	635, 86, 242, -544, -543, 413, 83, 156, -473, 243,
	496, 88, 632, 429, 222, 223, 103, 344, 104, 105,
	-432, -351, -347, -341, -341, -339, -339, -345, 256, -345,
	113, -343, 633, -342, -512, 120, -343, 35, 156, 35,
	156, 80, 155, 83, 83, 17, 17, 83, -343, 83,
	83, 83, 83, 17, 17, -343, 83, 155, 83, 83,
	83, 83, 80, 83, 156, 83, 83, 83, 83, 156,
	-351, -351, -343, -351, 83, 83, 83, -343, -343, -343,
	-351, 83, -343, -343, -343, -343, -343, -343, -343, -343,
	-343, -343, -412, 448, -412, -412, 156, 156, 156, 83,
	-121, 82, 98, 156, 629, -304, -303, 88, 166, 169,
	169, 168, 24, 36, -202, -204, -205, -206, -207, -208,
	134, 157, 158, 82, -216, -216, -216, -533, 399, -545,
	156, 41, -543, 489, -149, 319, -367, 80, -156, 17,
	539, -216, -216, -216, -216, -229, 35, 17, -165, -217,
	-317, 82, 83, 156, -375, 80, -317, -309, -281, -281,
	-330, -281, -281, 156, 23, -328, -330, -330, -326, 155,
	-308, -438, 35, -183, 156, 21, 261, -215, -314, -212,
	-214, 246, -333, -213, 249, -502, 247, 245, 108, 250,
	304, 109, 240, -314, -314, 246, -249, 242, 35, -314,
	-265, 240, 347, 304, 247, 21, 261, -264, 240, 109,
	-317, 246, 250, 247, 245, -313, 124, -307, 151, 242,
	43, 374, -313, 543, 261, -313, -313, -313, -313, -313,
	-313, -313, 278, 278, -313, -313, -313, -313, -313, -313,
	-313, -313, -313, -313, -313, 161, -313, -313, -313, -313,
	-313, -313, 82, 273, 274, -534, 399, 31, 355, 355,
	-545, 31, -157, 349, 31, -287, -288, -289, -290, 68,
	72, 74, 69, 70, 71, 75, 31, 156, -315, -319,
	35, -317, 88, -315, -161, -166, -171, -315, 82, -557,
	-559, 481, 478, 484, -398, -398, 242, 82, 124, -398,
	-398, 41, -316, -554, 485, 479, -121, 156, 79, -218,
	-194, -195, -196, -197, -222, -298, 191, 194, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 207, 208, 205,
	206, 255, 186, 187, 188, 189, 209, 172, 192, 537,
	173, 174, 175, 176, 177, 178, 181, 182, 183, 184,
	180, -317, -203, -281, -164, -166, -317, 88, -317, 143,
	-281, 121, -6, 119, -133, -132, -131, 122, 609, 615,
	121, 121, 121, 83, 83, 83, 156, 83, 83, 83,
	156, 83, 156, 98, -476, 458, 40, 156, 82, 83,
	156, 61, 156, 124, 83, 156, -343, 83, 61, -121,
	88, 156, -173, 37, 38, 155, 431, -317, -487, 83,
	-404, 156, 242, 155, 155, -380, 377, -316, -382, 21,
	539, -298, 39, -304, 124, 632, -317, 83, -345, -345,
	113, -341, -338, 83, 121, -343, 119, -220, -222, 393,
	394, -343, -220, -221, -227, 152, 190, 255, 189, 188,
	186, 393, 394, -239, -317, -343, -343, 83, -343, -343,
	17, -317, -239, -339, -343, -178, -178, 83, 83, -411,
	-412, -411, -411, 83, 83, 83, 83, -411, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 82, 98,
	100, 98, 100, -469, -566, 63, 617, 62, 421, 103,
	309, 156, 98, 88, 633, 156, 124, 169, -546, 313,
	349, 385, 83, 156, -298, -194, -183, 82, -183, -536,
	460, 401, 411, -313, -335, -334, 351, 42, -455, 422,
	407, 408, -381, 269, -317, -542, 95, 124, 79, 334,
	338, 339, 335, 336, 337, -361, -362, -360, -364, -530,
	82, 82, -158, 35, 82, 82, 35, -433, 324, -222,
	-216, -165, -317, 17, 156, -529, 155, -1, -317, -374,
	-328, -281, -343, -343, -281, -328, -328, -330, -317, -433,
	-222, 35, -263, 235, 232, -408, 306, 307, -409, -423,
	309, -425, 82, -219, -298, -213, -501, -502, -363, -317,
	109, -501, 109, 82, -219, -298, -298, -266, -327, -298,
	-317, -317, -317, -317, -271, -270, -298, -273, 32, -274,
	-317, -317, -317, -317, 109, -317, 109, -244, 41, 48,
	49, 50, -313, -313, 193, -247, 41, 421, 423, 424,
	-273, 98, 98, 98, 98, 88, 88, 88, -313, -313,
	98, 88, -319, 88, -503, 168, 45, 46, 98, 98,
	98, 98, 41, 88, -252, 41, 289, 293, 290, 291,
	292, 88, 98, 41, 98, 41, 98, 41, -317, 82,
	-504, -505, 88, -536, -313, 355, -395, 124, -335, -541,
	319, -150, 92, 32, -187, 235, 232, -530, -386, -385,
	-298, -170, -170, -170, -170, 68, 68, 68, 73, 68,
	73, 68, -289, -386, -172, -183, -319, 83, -551, -550,
	-549, -547, 76, 243, 77, -349, 478, 482, 483, -382,
	-331, 88, -389, -191, 24, -216, -216, -454, 299, 300,
	83, 156, -222, -283, 19, 155, -283, 117, -6, -129,
	-131, -343, -6, -343, 611, 367, 612, 88, 98, 98,
	-484, 442, 437, 439, 109, -352, -471, -470, 61, -158,
	-181, -463, -507, -469, -317, 633, 61, -158, -463, -191,
	-476, -175, -174, 44, -317, 98, 17, -379, -374, 143,
	143, -317, 378, -390, 88, 400, 88, 238, 633, 88,
	-304, -338, -343, 83, -230, 177, 176, -230, 35, 83,
	83, -440, -440, -439, -442, -439, -230, -230, 83, 83,
	24, 83, 83, 83, -343, 83, 83, 156, -459, 498,
	-460, 572, -411, -411, -411, -411, -411, -411, -411, -411,
	-411, -411, -411, -411, -411, -411, -411, -411, -354, -353,
	261, 443, 624, 624, 443, 624, 624, 83, 156, -510,
	156, -303, 88, -317, 88, 88, -206, -222, 83, 35,
	-209, -210, -211, -219, -212, -214, 35, -537, 92, -531,
	88, -317, -538, 92, 402, 154, 353, 41, 403, 404,
	419, 348, 98, 98, 409, -532, -317, -157, -540, 52,
	124, 88, -216, -360, -307, 151, 280, 327, -278, -277,
	-317, 88, -209, -158, -209, -209, -158, -434, 326, 21,
	98, 142, -184, 80, 155, -166, -217, -317, 143, 83,
	-281, -281, -281, -328, -434, -158, -420, 310, 82, -418,
	82, -418, 109, 335, -426, -424, 261, -269, 45, 47,
	-222, -499, -317, -497, -499, -317, -497, -497, -363, -343,
	-269, -219, 242, 31, 232, -272, 332, 333, 338, -391,
	305, 114, -391, 156, -173, 156, -317, -239, -239, 31,
	88, 88, -218, 83, 156, 124, -537, -531, 124, -396,
	88, -538, -542, 124, 88, 156, -187, -187, -281, 156,
	124, -189, -188, 79, 80, -190, 79, -188, 68, 68,
	-281, -549, -548, 24, -502, -502, -502, 83, 83, 15,
	-196, 41, -282, 20, 21, 143, -282, 121, 119, 121,
	121, -317, 83, 83, -446, 603, -480, -482, 437, 21,
	21, 15, 243, 83, -463, -463, -484, 45, 46, -374,
	-390, 422, -216, 156, 633, -220, -343, 83, -343, 83,
	88, 83, 88, -178, 21, 83, 156, 83, 83, 83,
	156, 83, 83, -343, 83, -510, 236, -158, 83, 156,
	-158, 88, -535, 413, 88, 88, 98, 41, 98, 154,
	405, -456, -150, -539, 92, 124, 632, 82, -313, -313,
	-313, -317, 83, 156, -313, -313, 83, 83, 83, -237,
	539, -435, 260, 98, 142, 98, 142, 98, -315, -166,
	-317, -281, -529, 155, -281, -435, -410, 311, 98, -339,
	82, -339, 82, -419, 308, 82, 83, 156, -317, -298,
	-234, -233, -231, 103, 114, 41, 391, -232, 92, 151,
	294, 297, 296, 272, 295, -261, -332, 79, 397, 332,
	333, -364, 603, 527, 245, 108, 109, 379, -333, 82,
	82, 80, 314, 82, 82, -499, 83, -269, -298, 41,
	-272, 41, 345, 305, -270, -317, 151, -239, 83, -505,
	88, -535, 88, -398, -540, 88, -530, -178, -385, -469,
	-343, 82, -343, 82, 68, 11, 19, -336, -343, -351,
	244, -6, 612, 367, -254, 604, 88, 21, 88, -478,
	88, -386, -446, -124, -251, -307, 277, 83, 83, 83,
	-411, -411, -414, -413, -417, 443, 306, 451, -351, 88,
	88, 83, 83, -198, -222, -154, 539, -237, -211, -154,
	21, 539, 352, 41, 98, 41, 406, 124, 104, 105,
	-305, -306, 88, -369, -371, -298, 82, -239, -241, -316,
	152, 88, -277, -336, -336, -235, -158, 35, -236, -275,
	-364, -123, -122, -235, 82, -436, 160, 98, 142, 98,
	98, -281, -281, -436, -425, 21, 83, -405, 83, -405,
	82, 124, -339, -424, -427, 61, -231, 103, -339, 88,
	-241, -242, 41, 293, 289, 124, 124, -243, 41, 273,
	274, -253, 82, 304, 15, 193, 82, 109, 109, -216,
	-369, -369, -500, 334, 335, 336, 340, 338, 339, 337,
	-500, -369, -369, 82, -392, -391, -339, -313, -313, 151,
	-539, -179, -182, -498, -317, 245, 21, 21, -317, -317,
	-301, 605, 98, 88, 439, -254, -447, 606, -474, -418,
	-239, 124, 83, -416, 116, 405, 409, -337, -340, 98,
	100, 185, 154, 83, 83, 538, -155, 60, 485, 88,
	400, 88, 352, 88, 633, 156, 124, 83, 156, -439,
	-343, -406, 261, -158, 156, -275, -307, -124, -406, -238,
	-276, -317, 88, -453, 168, 325, 539, 98, 142, 98,
	-178, -437, 168, 325, -409, 83, 83, 83, -405, 98,
	83, -431, -428, 82, -275, 263, 134, 88, 88, 98,
	82, -464, 31, 88, -370, 82, 83, 83, 83, 83,
	-369, 98, -239, -313, 83, 83, 156, 82, 21, -301,
	88, -483, 442, -477, -475, 437, 438, 439, 440, 88,
	-415, -416, 409, -337, -340, 601, 449, 449, 449, -200,
	-317, 304, 422, -306, 88, -372, -371, -173, 83, -407,
	313, 21, -275, -313, -407, 83, 156, -313, -313, 325,
	98, 142, 98, -179, 325, -421, 312, 83, -431, -275,
	-430, -429, 311, 264, 82, 83, -343, -355, -313, 83,
	-256, -255, 535, -369, -372, 80, -372, 80, -372, 80,
	-372, 80, 83, -239, -317, 245, -302, -317, -478, -485,
	243, -481, -482, 441, -475, 21, 439, 21, 21, -125,
	156, 113, 450, 450, 450, -199, 35, 444, 378, -373,
	251, 345, 346, 92, 539, 332, 333, -173, 21, -408,
	-239, -276, -336, -336, 98, 98, 83, 156, -317, 260,
	82, -350, -344, -343, 260, 83, -317, -260, -258, -259,
	79, 456, 302, 303, 83, -500, -500, -500, -500, -261,
	83, 156, -492, 82, 98, -480, -479, -481, 21, -478,
	21, -478, -478, 446, -415, 88, -313, -313, 88, 88,
	331, -298, 82, -420, -429, -428, -350, 83, 156, -391,
	-259, 79, -258, 79, 16, 15, -372, -372, -372, -372,
	-317, -496, 31, 83, -491, -490, -299, -486, -317, 442,
	443, 88, -478, 124, -569, -568, 623, 98, 98, -317,
	-405, -410, 83, -344, -257, 299, 300, 31, 168, -257,
	-495, -494, -493, 83, 156, 155, 88, 88, 83, -425,
	103, 41, 301, 156, 124, -490, -317, -494, 41, -343,
	155, -317,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	0, 267, 268, 269, 870, 871, 872, 873, 874, 875,
	876, 0, 0, 0, 0, 0, 629, 630, 0, 595,
	0, 0, 0, 0, 0, 0, 483, 484, 485, 486,
	487, 488, 489, 490, 491, 492, 493, 494, 495, 496,
	497, 498, 499, 500, 501, 502, 503, 504, 505, 506,
	507, 508, 509, 510, 511, 512, 513, 367, 368, 369,
	370, 371, 372, 373, 374, 0, 292, 288, 213, 214,
	215, 216, 217, 299, 300, 460, 0, 0, 0, 0,
	711, -2, 60, 0, 281, 0, 272, 272, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, -2, 642, 0, 596, 597, 598, 599, 600, 601,
	602, 603, 604, 605, 606, 607, 608, 609, 610, 351,
	352, 353, 347, 348, 350, 349, -2, 0, 642, 0,
	0, 0, 719, 0, 0, 0, 0, 0, 762, 784,
	23, 0, 7, 9, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 0, 0, 19, 0, 19, 0, 0,
	0, 1273, 1274, 1275, 1276, 2053, 2023, -2, 1796, 1773,
	1948, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090,
	2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100,
	2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110,
	2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120,
	2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130,
	2131, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738,
	1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748,
	1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758,
	1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768,
	1769, 1770, 1771, 1772, 1774, 1775, 1776, 1777, 1778, 1779,
	1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
	1790, 1791, 1792, 1793, 1794, 1795, 1797, 1798, 1799, 1800,
	1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
	1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
	1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
	1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
	1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
	1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
	1861, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871,
	1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881,
	1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891,
	1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
	1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
	1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
	1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931,
	1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941,
	1942, 1943, 1944, 1945, 1946, 1947, 1949, 1950, 1951, 1952,
	1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962,
	1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972,
	1973, 1974, 1975, 1976, 1977, 1978, 1979, -2, 1981, 1982,
	1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992,
	1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
	2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
	2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022,
	2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033,
	2034, 2035, 2036, 2037, 2038, -2, -2, -2, 2042, 2043,
	2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2054,
	2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064,
	2065, 2066, 2067, 2068, 2069, 2070, 2071, 0, 265, 263,
	1743, 1773, 1796, 1850, 1861, 1862, 1896, 1948, 1980, 2023,
	2039, 2040, 2041, 2053, 0, 0, 894, 0, 689, 0,
	694, 1223, 689, 293, 631, 632, 719, 745, 593, 0,
	329, 0, 1787, 333, 2030, 0, 0, 0, 590, 323,
	324, 325, 326, 327, 328, 0, 0, 869, 0, 0,
	319, 0, 287, 1852, 2052, 0, 0, 0, 0, 0,
	157, 1005, 159, 1007, 163, 170, 0, 0, 175, 176,
	179, 180, 181, 182, 183, 0, 187, 0, 189, 192,
	0, 194, 195, 0, 198, 199, 200, 0, 210, 211,
	212, 1008, 1009, 1010, -2, 88, 892, 1701, 1588, 0,
	1595, 1608, 1619, 1353, 1354, 1355, 1356, 0, 0, 0,
	0, 0, 0, 1364, 1365, 0, 1392, 2086, 2127, 2128,
	0, 1373, 1374, 1375, 1376, 1377, 1378, 97, 109, 110,
	1641, 1642, 1643, 1644, 1645, 1646, 1647, 0, 1649, 1650,
	1651, 1559, 1340, 1273, 0, 2095, 0, 2117, 2122, 2123,
	2124, 2125, 2116, 0, 0, 1544, 0, 1534, 0, 0,
	-2, -2, 0, 0, 1921, -2, 2129, 2130, 2131, 2092,
	2113, 2121, 2096, 2097, 2120, 2088, 2089, 2090, 2083, 2084,
	2085, 2087, 2099, 2101, 2112, 0, 2108, 2118, 2119, 2028,
	0, 0, 0, 0, 0, 2069, 111, 112, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1555, -2, -2, 1558, -2,
	1561, -2, -2, -2, -2, 1566, 1567, -2, 1569, -2,
	-2, -2, -2, -2, -2, -2, 1546, 1547, 1548, 1549,
	1538, 1539, 1540, 1541, 1542, 1543, -2, -2, -2, 745,
	820, 0, 745, 0, 720, 767, 770, 773, 776, 723,
	0, 0, 61, 62, 0, 282, 283, 271, 273, 0,
	277, 0, 270, 1041, 0, 0, 0, 0, 1041, 1041,
	1041, 1041, 1041, 0, 1041, 0, 0, 0, 0, 0,
	1041, 0, 927, 1012, 1013, 1014, 1039, 1040, 1111, 0,
	0, 0, 647, 643, 644, 645, 646, 733, 0, 735,
	738, 570, 570, 793, 517, 0, 0, 0, 570, 0,
	531, 523, 0, 0, 0, 570, 0, 0, 740, 740,
	0, 573, 580, 570, 570, -2, 570, 570, 570, 0,
	0, 1053, 537, 538, 539, 523, 523, 542, 543, 544,
	554, 555, 581, 1725, 0, 0, 460, 460, 0, 460,
	0, 460, 460, 460, 649, 1891, 1794, 1867, 1852, 2052,
	0, 238, 1921, 243, 0, 1795, 1814, 0, 0, 1832,
	0, -2, 0, 309, 745, 0, 0, 719, 0, 0,
	0, 0, 0, 460, 460, 460, 460, 460, 1110, 460,
	460, 460, 460, 460, 0, 0, 0, 460, 460, 460,
	0, 0, 785, 786, 781, 782, 783, 787, 788, 5,
	6, 19, 0, 0, 0, 0, 0, 0, 67, 66,
	0, 1702, 1720, 1654, 1655, 1656, 1707, 1658, 1711, 1711,
	1711, 1711, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694,
	1695, 1711, 1711, 0, 0, 1700, 1678, 1709, 1709, 1709,
	1707, 1704, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666,
	1667, 1668, 1669, 1670, 1671, 1672, 1714, 1714, 1717, 1717,
	1714, 0, 365, 363, 364, 1584, 0, 0, 0, 0,
	693, 0, 0, 0, 745, -2, 0, 0, 594, 330,
	1277, 0, 0, 334, 0, 335, 0, 0, 0, 354,
	0, 357, 342, 343, 344, 338, 0, 137, 0, 321,
	322, 0, 0, 289, 0, 0, 0, 461, 0, 0,
	0, 0, 0, 0, 167, 164, 171, 174, 184, 191,
	0, 203, 205, 208, 165, 172, 177, 178, 185, 206,
	166, 168, 169, 173, 207, 209, 186, 190, 204, 188,
	193, 196, 197, 202, 0, 138, 0, 0, 0, 0,
	0, 1594, 0, 0, 1627, 1628, 1629, 1630, 1631, 1632,
	1633, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	1588, 0, 0, 1359, 1360, 1361, 1362, 0, 1366, 0,
	1393, 0, 0, 0, 0, 0, 1648, 1652, 0, 1584,
	1584, 0, 1584, 1580, 0, 0, 0, 0, 0, 0,
	1584, 1517, 0, 0, 1519, 1535, 0, 0, 1521, 1522,
	0, 1525, 1526, 1584, 0, 1584, 1530, 1584, 1584, 1584,
	1513, 1514, 0, 1580, 1580, 1580, 1580, 0, 0, 1580,
	1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
	1580, 1580, 1580, 0, 0, 0, 0, 740, 0, 746,
	0, -2, 0, 764, 766, 768, 769, 771, 772, 774,
	775, 777, 778, 725, 0, 0, 63, 0, 0, 0,
	0, 275, 0, 280, 0, 0, 0, 891, 0, 0,
	1041, 1041, 1041, 928, 0, 0, 0, 0, 0, 0,
	0, 0, 1041, 1041, 1041, 1041, 0, 1059, 0, 0,
	0, 649, 648, 0, 734, 0, 0, 793, 0, 0,
	515, 516, 0, 0, 523, 570, 570, 529, 530, 525,
	524, 576, 577, 573, 0, 573, 573, 793, 0, 548,
	549, 550, 570, 570, 556, 741, 0, 557, 558, 573,
	0, 578, 579, 793, 0, 0, 793, 793, 0, 566,
	567, 568, 570, 0, 0, 1041, 0, 586, 525, 525,
	1726, 1727, 0, 0, 1050, 0, 0, 0, 589, 0,
	0, 0, 0, 650, 218, 221, 0, 224, 0, 1891,
	0, 1891, 0, 231, 0, 0, 0, 0, 0, 0,
	261, 262, 0, 0, 0, 0, 252, 255, 1217, 1218,
	1002, 1003, 256, 257, 301, 302, 0, 740, 763, 765,
	759, 760, 761, 0, 0, 0, 0, 0, 0, 0,
	0, 460, 0, 0, 0, 0, 0, 625, 0, 907,
	627, 0, 0, 0, 0, 801, 795, 797, 864, 97,
	801, 8, 84, 81, 0, 19, 0, 0, 19, 19,
	0, 19, 266, 0, 1723, 1721, 1722, 1657, 1708, 0,
	1683, 0, 1684, 1685, 1686, 1696, 1697, 0, 0, 1679,
	0, 1680, 1681, 1682, 1673, 0, 1674, 1675, 0, 1676,
	1677, 264, 362, 0, 0, 1585, 895, 0, 667, 681,
	662, 0, 670, 0, 1224, 0, 651, 681, 653, 0,
	670, 740, 717, 0, 695, 0, 0, 331, 0, 339,
	336, 0, 340, 0, 0, 356, 358, 359, 360, 345,
	346, 591, 317, 318, 310, 311, 312, 313, 314, 315,
	316, 320, 107, 0, 290, 291, 0, 0, 0, 151,
	152, 153, 154, 155, 156, 158, 142, 614, 616, 994,
	1006, 0, 997, 0, 161, 201, 134, 0, 0, 0,
	1589, 1590, 1591, 1592, 1593, 1598, 0, 1600, 1602, 1604,
	1606, 0, 1624, -2, -2, 1341, 1342, 1343, 1344, 1345,
	1346, 1347, 1348, 1349, 1350, 1351, 1352, 1609, 1622, 1623,
	0, 0, 0, 0, 0, 0, 1620, 1620, 1615, 0,
	1357, 0, 0, 1390, 1394, 0, 0, 0, 0, 0,
	98, 1579, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491,
	1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501,
	1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511,
	1512, 0, 0, 1588, 0, 0, 0, 1581, 1582, 0,
	0, 0, 1472, 0, 0, 1478, 1479, 1480, 0, 676,
	0, 1545, 1518, 1536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 819, 821, 0, 685, 687, 688, 714, 695, 721,
	0, 0, 0, 59, 64, 0, 1078, 284, 285, 0,
	0, 279, 0, 0, 0, -2, 0, 0, 0, 0,
	0, 942, 458, 988, 0, 0, 0, 1004, 1029, 1037,
	0, 0, 0, 0, 0, 1084, 929, 934, 935, 936,
	930, 931, 937, 938, 0, 736, 0, 0, 833, 514,
	571, 572, 794, 520, 1852, 525, 793, 793, 532, 526,
	533, 575, 534, 535, 536, 573, 793, 793, 742, 570,
	573, 559, 574, 573, 562, 563, 0, 569, 582, 587,
	583, 0, 585, 540, 541, 1086, 738, 377, 378, 379,
	381, 0, 429, 429, 429, 412, 429, 0, 0, 400,
	1728, 0, 0, 0, 0, 409, 1728, 0, 0, 1728,
	1728, 1728, 1728, 1728, 1728, 1728, 0, 0, 1728, 1728,
	1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 0,
	1728, 1728, 1728, 1728, 1728, 1203, 1728, 0, 1051, 419,
	420, 421, 422, 427, 428, 0, 455, 0, 0, 0,
	458, 0, 976, 806, 0, 807, 808, 804, 835, 859,
	859, 0, 859, 839, 1223, 0, 0, 229, 230, 219,
	0, 220, 0, 232, 233, 0, 235, 236, 237, 244,
	1794, 1867, 239, 241, 0, 0, 245, 258, 259, 260,
	0, 0, 250, 251, 0, 0, 304, 305, 307, 0,
	695, 1054, 1055, 1056, 611, 1221, 612, 613, 617, 0,
	0, 620, 621, 622, 623, 624, 909, 0, 0, 981,
	982, 983, 793, 0, 802, 0, 798, 865, 0, 867,
	0, 793, 0, 82, 19, 0, 75, 72, 0, 0,
	0, 0, 0, 1703, 1653, 1724, 0, 0, 0, 1705,
	0, 0, 0, 0, 0, 65, 697, 658, 0, 661,
	678, 0, 682, 0, 0, 674, 666, 671, 0, 0,
	691, 0, 1225, 652, 0, 0, 657, 695, 0, 718,
	747, 748, 751, 1278, 0, 341, 337, 355, 0, 0,
	0, 0, 145, 991, 0, 146, 150, 140, 0, 0,
	0, 996, 0, 993, 998, 0, 160, 0, 0, 135,
	136, 1069, 1078, 0, 0, 0, 1599, 1601, 1603, 1605,
	1607, 0, 1610, 1620, 1620, 1616, 0, 1611, 0, 1613,
	0, 1589, 1363, 0, 1395, 0, 0, 0, 0, 0,
	0, 0, 0, 1462, 1463, 0, 0, 1467, 0, 1469,
	1470, 1471, 1473, 0, 0, 0, 1477, 0, 1516, 1537,
	1520, 1523, 0, 1527, 0, 1529, 1531, 1532, 1533, 0,
	745, 745, 0, 0, 1434, 1434, 1434, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1379, 0, 1380, 1381, 0, 0, 0, 822,
	715, 0, 0, 0, 0, 0, 1076, 0, 286, 274,
	276, 0, 0, 1042, 0, 0, 897, 898, 900, 0,
	903, 904, 905, 909, 738, 0, 738, 949, 1728, 462,
	0, 0, 990, 0, 965, 0, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 636,
	640, 23, 739, 0, 518, 0, 519, 570, 527, 528,
	793, 551, 552, 0, 0, 793, 570, 570, 573, 0,
	584, 1088, 0, 0, 1050, 1154, 1122, 390, 0, 1234,
	1235, 430, 0, 1241, 1250, 1041, 1310, 0, 1250, 0,
	0, 1252, 1253, 0, 0, 0, 0, 413, 414, 0,
	399, 0, 0, 0, 0, 0, 0, 398, 0, 0,
	440, 0, 0, 0, 0, 0, 1729, 1728, 1728, 0,
	407, 408, 0, 411, 0, 0, 0, 0, 0, 0,
	0, 0, 1728, 1728, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1194, 0, 0, 0, 0,
	0, 0, 0, 1209, 1210, 949, 1728, 0, 0, 0,
	462, 963, 972, 0, 0, 0, 0, 0, 0, 826,
	0, 0, 825, 0, 0, 0, 0, 0, 738, 860,
	0, 862, 863, 837, -2, 0, 806, 842, 1584, 222,
	223, 0, 0, 228, 246, 248, 0, 0, 0, 247,
	249, 253, 254, 303, 306, 308, 757, 0, 0, 1112,
	0, 910, 911, 913, 914, 0, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1778,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 908, 628, 791, 796, 803, 866, 868, 98, 799,
	791, 0, 85, 19, 84, 76, 77, 0, 19, 0,
	0, 0, 0, 1713, 1712, 1698, 0, 1699, 1710, 1715,
	0, 1718, 0, 366, 701, 0, 0, 681, 683, 0,
	0, 681, 0, 0, 690, 0, 0, 0, 681, 757,
	697, 0, 754, 752, 753, 0, 0, 592, 108, 361,
	0, 0, 0, 0, 0, 615, 0, 995, 142, 0,
	0, 162, 0, 0, 0, 1078, 1073, 1583, 1612, 1614,
	0, 1621, 1617, 1358, 1367, 1391, 0, 0, 1397, 1409,
	1409, 0, 0, 0, 1400, 1711, 1711, 1403, 1707, 1709,
	1707, 1409, 1409, 0, 99, 0, 0, 1468, 0, 0,
	0, 677, 0, 0, 0, 1430, 1432, 1434, 1434, 1441,
	1435, 1442, 1443, 1434, 1434, 1434, 1434, 1448, 1434, 1434,
	1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1428, 0,
	0, 1642, 1643, 686, 0, 0, 728, 729, 730, 731,
	732, 0, 0, 54, 55, 1078, 0, 278, 56, 57,
	0, 0, 0, 902, 0, 0, 0, 1227, 0, 953,
	950, 951, 952, 0, 985, 463, 464, 465, 466, 0,
	0, 0, 989, 0, 976, 958, 0, 0, 0, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, -2, 1045, 0, 0,
	0, 1227, 1064, 0, 1227, 1227, 0, 1096, 0, 1085,
	689, 0, -2, 0, 0, 638, 0, 0, 834, 521,
	793, 545, 743, 744, 560, 793, 793, 570, 588, 1096,
	1087, 0, 380, 429, 0, 1142, 0, 0, 1148, 0,
	1155, 383, 0, 431, 0, 1240, 1267, 1251, 1267, 1311,
	1267, 1267, 1041, 0, 431, 0, 0, 401, 437, 0,
	0, 0, 0, 0, 397, 434, 751, 384, 386, 387,
	388, 438, 439, 441, 0, 443, 444, 403, 415, 416,
	417, 418, 0, 0, 0, 410, 423, 424, 425, 426,
	385, 1171, 1172, 1173, 1176, 1177, 1178, 1179, 0, 0,
	1182, 1183, 1184, 1185, 1186, 1264, 1265, 1266, 1187, 1188,
	1189, 1190, 1191, 1192, 1193, 1211, 1212, 1213, 1214, 1215,
	1216, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 0,
	0, 1206, 0, 953, 0, 0, 0, 0, 985, 965,
	0, 975, 0, 977, 978, 0, 0, 659, 793, 296,
	0, 829, 823, 0, 812, 827, 828, 815, 0, 817,
	0, 813, 814, 793, 805, 836, 861, 838, 841, 843,
	844, 850, 0, 0, 0, 0, 225, 226, 227, 234,
	0, 482, 240, 713, 0, 1222, 618, 619, 1113, 1114,
	626, 0, 915, 789, 0, 0, 789, 80, 83, 0,
	78, 0, 0, 0, 0, 70, 68, 1706, 0, 0,
	703, 122, 0, 0, 0, 679, 0, 684, 681, 665,
	675, 664, 672, 673, 692, 1226, 681, 656, 655, 716,
	701, 749, 750, 0, 1279, 332, 0, 992, 142, 147,
	148, 149, 143, 141, 999, 0, 1001, 0, 1071, 0,
	0, 1618, 1396, 1368, 1398, 1410, 1411, 1399, 0, 1370,
	1371, 1401, 1402, 1404, 1405, 1406, 1407, 1408, 1372, 1464,
	0, 1466, 1474, 1475, 0, 1524, 1528, 0, 0, 0,
	0, 0, 1439, 1440, 1444, 1445, 1446, 1447, 1449, 1450,
	1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 745, 1429,
	0, 0, 0, 0, 0, 0, 0, 726, 0, 0,
	0, 1077, 1079, 58, 890, 893, 899, 901, 0, 0,
	0, 1228, 1229, 1231, 1232, 1233, 0, 926, 0, 0,
	944, 945, 955, 0, 0, 0, 468, 469, 0, 0,
	0, 481, 477, 478, 479, 459, 984, 972, 961, 0,
	0, 971, 0, 1046, 1728, 1728, 1728, 0, 0, 1156,
	1728, 1728, 0, 1066, 0, 0, 1160, 1099, 0, 0,
	1090, 0, 859, 0, 0, 793, 637, 640, 641, 737,
	522, 564, 561, 793, 1099, 376, 1120, 0, 0, 0,
	0, 0, 1152, 0, 0, 1124, 0, 402, 432, 0,
	-2, 0, 1268, 0, 1254, 1268, 0, 0, 1267, 0,
	391, 431, 0, 0, 0, 445, 449, 450, 0, 447,
	1306, 0, 448, 0, 436, 0, 442, 1174, 1175, 0,
	1180, 1181, 0, 1205, 0, 0, 451, 0, 0, 0,
	452, 457, 958, 0, 973, 0, 979, 980, 745, 0,
	0, 809, 830, 0, 0, 810, 0, 811, 816, 818,
	295, 845, 0, 0, 847, 848, 849, 840, 242, 758,
	912, 0, 779, 0, 0, 800, 780, 0, 19, 0,
	0, 73, 1716, 1719, 705, 0, 702, 123, 0, 0,
	0, 0, 669, 680, 663, 654, 703, 755, 756, 144,
	139, 1000, 1081, 0, 1072, 0, 0, 1476, 0, 1434,
	1431, 1434, 1433, 1425, 0, 1382, 0, 1384, 1385, 1386,
	0, 1388, 1389, 0, 724, 0, 0, 932, 1160, 0,
	932, 954, 943, 0, 986, 987, 0, 470, 471, 0,
	474, 480, 956, 957, 0, 0, 969, 0, 0, 0,
	0, 1038, 1052, 0, 0, 0, -2, 0, -2, 1063,
	0, 1105, 0, 1097, 0, 1089, 0, 1092, 793, 793,
	-2, 634, 639, 0, 565, 1105, 1122, 0, 1143, 0,
	0, 0, 0, 0, 0, 0, 1123, 0, 1136, 433,
	1269, -2, 1282, 1284, 0, 1051, 1287, 1288, 0, 0,
	0, 0, 0, 0, 1332, 1296, 0, 0, 1300, 1301,
	1302, 0, 0, 1305, 0, 1636, 1637, 0, 1309, 0,
	0, 0, 0, 0, 0, 0, 1248, 392, 393, 0,
	395, 396, 1728, 1307, 435, 389, 1728, 405, 1204, 1207,
	1208, 456, 453, 454, 961, 964, 660, 740, 297, 298,
	831, 0, 824, 854, 851, 0, 0, 916, 790, 792,
	74, 79, 0, 0, 707, 0, 704, 0, 698, 700,
	133, 668, 705, 95, 125, 0, 0, 1369, 1465, 1515,
	1437, 1438, 0, 1426, 0, 1420, 1421, 1422, 1427, 0,
	0, 727, 722, 0, 918, 925, 939, 1057, 1230, 924,
	0, 0, 467, 472, 0, 475, 476, 0, 959, 960,
	0, 967, 0, 0, 1025, 1707, 0, 1047, 1048, 1219,
	1220, 1049, 1157, 1158, 1159, 1115, 1065, 0, -2, 1168,
	0, 1061, 1081, 1115, 0, 1093, 0, 1100, 0, 1098,
	1091, 745, 635, 1102, 382, 1154, 1144, 0, 1146, 0,
	0, 0, 0, 1125, -2, 0, 1283, 1285, 1286, 1289,
	1290, 1291, 1337, 1338, 1339, 0, 0, 1294, 1334, 1335,
	1336, 1295, 0, 0, 0, 0, 0, 1634, 1635, 1330,
	0, 0, 1255, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
	1256, 0, 0, 0, 1247, 1249, 394, 0, 0, 1728,
	974, 294, 0, 0, 855, 857, 852, 853, 69, 71,
	86, 0, 706, 124, 0, 707, 87, 0, 116, 0,
	1082, 0, 1436, 1423, 0, 0, 0, 0, 0, 1638,
	1639, 1640, 0, 1383, 1387, 0, 0, 940, 941, 946,
	0, 948, 473, 962, 966, 969, 0, 1016, 0, 751,
	0, 1117, 0, 1067, 1050, 1170, 1728, 1068, 1117, 0,
	1162, 1728, 1728, 1083, 0, 1095, 0, 1107, 0, 1101,
	740, 375, 0, 1104, 1140, 1145, 1147, 1149, 0, 1153,
	1151, 1126, -2, 0, 1134, 0, 0, 1292, 1293, 0,
	0, 1534, 1728, 0, 1325, 0, 1016, 1016, 1016, 1016,
	0, 446, 404, 0, 832, 846, 0, 0, 0, 696,
	96, 113, 0, 126, 127, 0, 0, 0, 0, 1074,
	0, 1412, 0, 0, 0, 1416, 1417, 1418, 1419, 0,
	917, 0, 947, 968, 970, 1015, 1026, 1027, 751, 1060,
	0, 1154, 1169, 0, 1062, 1161, 0, 0, 0, 1094,
	1106, 0, 1109, 633, 1103, 1121, 0, 1150, 1127, 1135,
	0, 1130, 0, 0, 0, 1333, 0, 1299, 0, 1304,
	1313, 1326, 0, 0, 1236, 0, 1238, 0, 1242, 0,
	1244, 0, 0, 406, 856, 858, 0, 709, 699, 100,
	0, 122, 119, 0, 128, 0, 0, 0, 0, 1070,
	0, 0, 1413, 1414, 1415, 0, 919, 920, 933, 1017,
	1728, 1728, 0, 0, 0, 1023, 1024, 1028, 0, 1142,
	1174, 1163, 1164, 1165, 1108, 1141, 1129, 0, -2, 1137,
	0, 0, 1586, 1596, 1597, 1297, 1303, 1312, 1314, 1315,
	0, 1327, 1328, 1329, 1331, 1016, 1016, 1016, 1016, 1246,
	708, 0, 89, 0, 0, 117, 118, 120, 0, 129,
	0, 131, 132, 0, 1424, 921, 0, 0, 1020, 1021,
	0, 1118, 0, 1120, 1131, -2, 0, 1139, 0, 1298,
	1316, 0, 1317, 0, 0, 0, 1237, 1239, 1243, 1245,
	710, 1080, 0, 101, 0, 103, 105, 106, 1270, 114,
	115, 121, 130, 0, 906, 922, 0, 1018, 1019, 1022,
	0, 1122, 1138, 1587, 1318, 1320, 1321, 0, 0, 1319,
	90, 91, 0, 102, 0, 0, 1075, 923, 1119, 1116,
	1322, 1324, 1323, 0, 0, 104, 1271, 92, 93, 94,
	0, 1272,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 115, 3, 3, 3, 146, 138, 3,
	82, 83, 143, 141, 156, 142, 155, 144, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 634, 631,
	125, 124, 126, 3, 635, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 148, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 632, 137, 633, 149,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 116, 117, 118, 119, 120, 121, 122, 123, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 139,
	140, 145, 147, 150, 151, 152, 153, 154, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:807
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:814
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:820
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:828
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:834
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:838
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:853
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:857
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:863
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:872
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:905
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:914
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option)
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:923
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option)
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:934
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Obeject:     yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:944
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:954
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:967
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:987
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:993
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1000
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1008
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1014
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1023
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1033
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1041
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1049
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1057
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1067
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1075
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1085
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1092
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1101
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1111
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1115
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1121
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1125
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1131
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1140
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1150
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1154
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1160
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1169
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1173
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1179
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1200
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1213
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1220
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1224
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1230
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1234
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1240
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1247
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1255
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1259
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1273
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1277
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1281
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1286
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1290
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1294
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1300
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1309
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1320
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1324
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1330
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1334
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1340
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1344
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1350
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1374
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1393
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1397
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1401
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1406
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1410
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1419
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1429
		{
			yyVAL.str = ""
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1436
		{
			yyVAL.str = yyDollar[3].str
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1441
		{
			yyVAL.str = "\n"
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1448
		{
			yyVAL.str = yyDollar[3].str
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1453
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1457
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1485
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1489
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1495
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1503
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1523
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1542
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1567
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1571
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1575
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1580
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1584
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1590
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1603
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1614
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1627
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1631
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1641
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1654
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1667
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1673
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1679
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1686
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1694
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1703
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1707
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1711
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1715
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1719
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1723
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1730
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1734
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1740
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1747
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1756
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1760
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1766
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1770
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1774
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1778
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1782
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1786
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1790
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1794
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1798
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1802
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1806
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1810
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1814
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1818
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1822
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1826
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1830
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1834
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1838
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1842
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1846
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1850
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1854
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1858
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1862
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1866
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1870
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1874
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1878
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1882
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1886
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1890
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1894
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1898
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1902
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1906
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1910
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1914
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1918
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1922
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1926
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1930
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1934
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1938
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1942
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1946
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1950
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1954
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1958
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1962
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1975
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1982
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1989
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1999
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2003
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2009
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2016
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2024
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2028
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2032
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2036
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2042
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2046
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2052
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2059
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2066
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2075
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2105
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2109
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2113
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2119
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2125
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2129
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2136
		{
			yyVAL.str = yyDollar[3].str
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2142
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2146
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2152
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2160
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2169
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2178
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2186
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2194
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2217
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2240
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2247
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2254
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2262
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2269
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2276
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2285
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2289
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2293
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2299
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2303
		{
			yyVAL.str = yyDollar[1].str
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2309
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2313
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2319
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2323
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2334
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2340
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2345
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2349
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2353
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2357
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2361
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2365
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2369
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2373
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2377
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2383
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2387
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2391
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2395
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2400
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2405
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2411
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2424
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2437
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2450
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2463
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2479
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2486
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2497
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2508
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2512
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2518
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2528
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2534
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2538
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2544
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2550
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2554
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2558
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2562
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2568
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2580
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2586
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2590
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2596
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2600
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2606
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2612
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2623
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2629
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2633
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2637
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2641
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2645
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2649
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2657
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2665
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2675
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2687
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2691
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2699
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2707
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2746
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2750
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2756
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2762
		{
			yyVAL.str = yyDollar[1].str
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2767
		{
			yyVAL.str = "true"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2768
		{
			yyVAL.str = "false"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2769
		{
			yyVAL.str = yyDollar[1].str
		}
	case 361:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2774
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2780
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2789
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2796
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2804
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2808
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2831
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2854
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2864
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2871
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2880
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2884
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2890
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2894
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2918
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2928
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2944
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2962
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2966
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2972
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2976
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2982
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2988
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2996
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3006
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3014
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3024
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3034
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3044
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3051
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3055
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3059
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3063
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3067
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3074
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3080
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3084
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3088
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3092
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3096
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3100
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3104
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3108
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3113
		{
			yyVAL.str = ""
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3144
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3148
		{
			yyVAL.str = string("COLUMN")
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3153
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3159
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3165
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3173
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3177
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3183
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3191
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3198
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3204
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3210
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3216
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3222
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3229
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3236
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3244
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3250
		{
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = int64(yyDollar[6].item.(int64))
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3257
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3263
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3271
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3275
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3282
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3300
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3314
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3328
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3341
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3347
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3358
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3371
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3375
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3383
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3387
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3392
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3396
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3412
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3416
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3420
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3424
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3431
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3435
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3439
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3443
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3450
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3454
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3461
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3465
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3469
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3473
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3480
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3487
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3493
		{
			yyVAL.item = nil
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3498
		{
			yyVAL.item = nil
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3540
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3549
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3557
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3565
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3569
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3573
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				&tree.Role{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3584
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3588
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3594
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3599
		{
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3603
		{
		}
	case 527:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3608
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3618
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3628
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3636
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3642
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3648
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3654
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3660
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3666
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3672
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3681
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3685
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3689
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3693
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3697
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3701
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3705
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3709
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3715
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3724
		{
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3726
		{
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3735
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3745
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3754
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3758
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3762
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3768
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3774
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3780
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3786
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3795
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3805
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3817
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3821
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3827
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3839
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3853
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3859
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3866
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3870
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3875
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3879
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3883
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3888
		{
			yyVAL.str = ""
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3892
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3898
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3911
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3915
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3921
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3926
		{
			yyLOCAL = &tree.ShowCreateView{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3930
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3934
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3940
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3946
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3950
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3956
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3962
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3966
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3970
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3976
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3980
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4006
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4014
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4022
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4030
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4034
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4040
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4053
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4061
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4070
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4076
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4084
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4092
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4100
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4106
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4114
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4120
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4128
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4134
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4144
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4149
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4156
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4172
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4185
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4196
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4200
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4206
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4211
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4218
		{
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4220
		{
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4223
		{
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4232
		{
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4236
		{
		}
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4241
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4250
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4257
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4263
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4271
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4278
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4285
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4305
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4315
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4319
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4325
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4332
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4338
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4346
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4353
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4360
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4379
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4383
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4387
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4392
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4396
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4400
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4406
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4415
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4419
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4425
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4429
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4435
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4439
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4445
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4450
		{
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4454
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4461
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4465
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4472
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4477
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4481
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4487
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4491
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4497
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4501
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4506
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4510
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4523
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4534
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4545
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4567
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4590
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4598
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4607
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4611
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4624
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4628
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4633
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4637
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4644
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4649
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4656
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4662
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4666
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4670
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4674
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4678
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4682
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4687
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4691
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4697
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4707
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4722
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4726
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4740
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4744
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4750
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4759
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4763
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4767
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4771
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4775
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4781
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4788
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4797
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4801
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4807
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4815
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4819
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4824
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4828
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4834
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4838
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4842
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4847
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4851
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4857
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4863
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4867
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:4873
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4878
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4882
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4886
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4891
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4895
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4899
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4904
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4908
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4916
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4920
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4924
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4938
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4942
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4952
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4962
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4972
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4984
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4992
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5000
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5009
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5017
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5025
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5033
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5041
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5049
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5057
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5065
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5073
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5083
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5094
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5108
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5112
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5116
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5121
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5125
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5129
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5138
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5142
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5147
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5151
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5156
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5160
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5166
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5170
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5176
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5180
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5185
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5189
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5194
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5202
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5208
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5216
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5224
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5234
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5240
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5249
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5258
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5267
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5277
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5281
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5291
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5295
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5299
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5303
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 819:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5309
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5319
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5323
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5329
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5335
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5339
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5345
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5351
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5355
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5359
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 829:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5365
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5369
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5375
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5379
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5385
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5389
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5395
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5399
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5409
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5422
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5428
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5434
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:  tree.FuncName2ResolvableFunctionReference(name),
					Exprs: yyDollar[3].exprsUnion(),
					Type:  tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5447
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5458
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5465
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5469
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5475
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5485
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5489
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5493
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5498
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5502
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5506
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5510
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5515
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5519
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5523
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5527
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5531
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5536
		{
			yyVAL.str = ""
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5540
		{
			yyVAL.str = yyDollar[1].str
		}
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5544
		{
			yyVAL.str = yyDollar[2].str
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5550
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 864:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5556
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5560
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5564
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5568
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5572
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5578
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 890:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5618
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5631
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5637
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 893:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5643
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5656
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5661
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5667
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5674
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5678
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5684
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5690
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5695
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5699
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5703
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5707
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5714
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5747
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5752
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5758
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5765
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5769
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5775
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5781
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5785
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5789
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5795
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5801
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5807
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5811
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5817
		{
			yyVAL.str = ""
		}
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5824
		{
			yyVAL.str = yyDollar[2].str
		}
	case 924:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5830
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5845
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5862
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].str
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5879
		{
			yyVAL.str = yyDollar[1].str
		}
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5883
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 929:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5889
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 930:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5893
		{
			yyVAL.str = "DEFINER = "
		}
	case 931:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5897
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 932:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5902
		{
			yyVAL.str = ""
		}
	case 933:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:5906
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 939:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5920
		{
			yyVAL.str = ""
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5928
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 943:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:5934
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].str
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5947
		{
			yyVAL.str = yyDollar[1].str
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5951
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 946:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5957
		{
			var Typ = tree.AccountIdentifiedByPassword
			var Str = yyDollar[3].str
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5966
		{
			var Typ = tree.AccountIdentifiedByRandomPassword
			var Str string
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5975
		{
			var Typ = tree.AccountIdentifiedWithSSL
			var Str = yyDollar[3].str
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5985
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5991
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5998
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6005
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6013
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6019
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6028
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6045
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6062
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6080
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6086
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6093
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6101
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6107
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6115
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6121
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6129
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6135
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6144
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6148
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6153
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6157
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6164
		{
			yyVAL.str = yyDollar[3].str
		}
	case 972:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6169
		{
			yyVAL.str = ""
		}
	case 973:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6173
		{
			yyVAL.str = yyDollar[2].str
		}
	case 974:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6179
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6192
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var comment = yyDollar[6].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, comment)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6201
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6205
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6211
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6217
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6223
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6232
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6240
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6248
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6256
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 985:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6261
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6273
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6284
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6393
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6397
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6403
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6416
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6420
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6426
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6439
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6443
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6447
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6452
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6456
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6462
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6469
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6475
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6484
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1004:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6491
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6502
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6506
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6512
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6521
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6525
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6529
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6534
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6538
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6542
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6546
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6552
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6583
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6587
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6613
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6619
		{
			io := tree.NewIndexOption()
			io.AlgoParamList = int64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6625
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6631
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6637
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6643
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6649
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6657
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6661
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6667
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6681
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6695
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6699
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6703
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6707
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6711
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6715
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6719
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6725
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6740
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6744
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6755
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6759
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6764
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6768
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6774
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6778
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6784
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6793
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6802
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6808
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6812
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6818
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6829
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6835
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6853
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6871
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6889
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6905
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6909
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6918
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6930
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6939
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6951
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6961
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6971
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6982
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6992
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7005
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7012
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7022
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7035
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7043
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7052
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7061
		{
			yyVAL.str = ""
		}
	case 1075:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7065
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7071
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7075
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7080
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7084
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7091
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7103
		{
			yyVAL.str = ""
		}
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7107
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1083:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7113
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7134
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7148
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7152
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7156
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7162
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7166
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7173
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7180
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7187
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7194
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7198
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7202
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7206
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7210
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7217
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7224
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7228
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7235
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7242
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7246
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7252
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7258
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7262
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7269
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7276
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7283
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7290
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7294
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7299
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7303
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7307
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7312
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7316
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7329
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7333
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7341
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7349
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7353
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7365
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7369
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7375
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7379
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7385
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7398
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7412
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7416
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7422
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7426
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7432
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7441
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7452
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7456
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7461
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7465
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7471
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7476
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7484
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7488
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7498
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7502
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7513
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7521
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7529
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7537
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7548
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7557
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7567
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7577
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7581
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7586
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7590
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7596
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7600
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7606
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7615
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7625
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7629
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7635
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7639
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7645
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7654
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7664
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7668
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7674
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7678
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7682
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7688
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7692
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7696
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7700
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7704
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7708
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7712
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7717
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7721
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7725
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7729
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7733
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7737
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7741
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7745
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7749
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7753
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7757
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7761
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7765
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7771
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7777
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7781
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7785
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7789
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7793
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7799
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7805
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7811
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7817
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7823
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7829
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7833
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7837
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7841
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7848
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7852
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:7858
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7869
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7873
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7879
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7883
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7887
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7891
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7895
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7899
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7913
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7917
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7926
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7931
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7936
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			atTs := &tree.AtTimeStamp{
				Expr: yyDollar[3].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7944
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			atTs := &tree.AtTimeStamp{
				Expr: yyDollar[5].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7953
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7960
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7964
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7970
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7974
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7978
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7984
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7988
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7994
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8007
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8020
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8059
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8099
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8113
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8119
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8132
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8145
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8158
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8171
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8186
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8196
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8202
		{
			yyVAL.str = ""
		}
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8206
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8216
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8222
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8228
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8249
		{
			yyVAL.str = ""
		}
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8253
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8259
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8265
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8269
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8273
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8279
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8283
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8287
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8291
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8297
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8301
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8305
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8310
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8314
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8320
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8324
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8330
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8334
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8338
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8342
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8346
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8350
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8355
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8359
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8363
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8367
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8371
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8375
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8379
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8383
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8387
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8391
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8404
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8408
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8412
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8416
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8420
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8424
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8430
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8434
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8439
		{
			yyVAL.str = ""
		}
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8443
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8449
		{
			yyVAL.str = ""
		}
	case 1311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8453
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1312:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8459
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8476
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8483
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8490
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8497
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8504
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8513
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8519
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8525
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8529
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8533
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8537
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8541
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8546
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8553
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8557
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8561
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8566
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8570
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8575
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8579
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8595
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8601
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8605
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8609
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8613
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8617
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8621
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8625
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8629
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8633
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8637
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8641
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8645
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8649
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8655
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8659
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8663
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8667
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8671
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8675
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8679
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8683
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8687
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8691
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8733
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8737
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8741
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8746
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8754
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8758
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8762
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8766
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8770
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8779
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8783
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8787
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8791
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8795
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8799
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8805
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8813
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8821
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8831
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8841
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8851
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8860
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8870
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8880
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8890
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8899
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8909
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8913
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8918
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8922
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8928
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8932
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:8938
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8947
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8959
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8976
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8993
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9006
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9019
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9031
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9045
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9060
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9075
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9092
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9107
		{
		}
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9114
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9118
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9122
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9128
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9132
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9136
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9140
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9146
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9150
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9154
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9160
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9168
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9178
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9182
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9189
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9194
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9198
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9203
		{
			yyVAL.str = ","
		}
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9207
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9212
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9216
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1434:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9221
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9228
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9254
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9265
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9276
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9286
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9296
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9306
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9315
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9324
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9334
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9344
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9354
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9364
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9374
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9384
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9394
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9404
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9414
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9424
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9434
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9444
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9454
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9464
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9481
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9489
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9497
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9505
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9513
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9523
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9531
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9540
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9548
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9556
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9564
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9572
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9583
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9593
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9605
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9616
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9638
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9674
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9686
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9698
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9709
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9717
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9724
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9731
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9743
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9751
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9761
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9771
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9779
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9790
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9799
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9808
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9816
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9826
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9834
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9843
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9851
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9859
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9868
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9872
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9878
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9882
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9901
		{
		}
	case 1545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9903
		{
		}
	case 1579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9944
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9955
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9959
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9963
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:9969
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9974
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9978
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9984
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9988
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9994
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9998
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10005
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10009
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10013
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10021
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10025
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10029
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10034
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10038
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10044
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10048
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10052
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10056
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10060
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10064
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10068
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10072
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10076
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10080
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10088
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10092
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10096
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10100
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10104
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10108
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10112
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10116
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10120
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10124
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10130
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10134
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10140
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10144
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10151
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10155
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10159
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10165
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10169
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10173
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10177
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10181
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10185
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10189
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10195
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10199
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10203
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10207
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10213
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10226
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10231
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10237
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10241
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10254
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10259
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10263
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10267
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10271
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10275
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10282
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10286
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10290
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10294
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10301
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10312
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10317
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10323
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10335
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10347
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10359
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10372
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10385
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10398
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10411
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10424
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10437
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10450
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10463
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10476
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10489
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10504
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10531
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10573
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10609
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10645
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10662
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10674
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10694
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10714
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10734
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10750
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10763
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10776
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10789
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10802
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10814
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10826
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10838
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10850
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10862
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10874
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10886
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10898
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10910
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10923
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10936
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10949
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10962
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10977
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10985
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10994
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11004
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11027
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11032
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11038
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11045
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11049
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11054
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11058
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11064
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11070
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11077
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11084
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11093
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11100
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11107
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11116
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11120
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11124
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11130
		{
		}
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11132
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11142
		{
			yyVAL.str = ""
		}
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11146
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
