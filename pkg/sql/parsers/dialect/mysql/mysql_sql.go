// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const INTEGRAL = 57437
const HEX = 57438
const FLOAT = 57439
const HEXNUM = 57440
const BIT_LITERAL = 57441
const NULL = 57442
const TRUE = 57443
const FALSE = 57444
const LOWER_THAN_CHARSET = 57445
const CHARSET = 57446
const UNIQUE = 57447
const KEY = 57448
const OR = 57449
const PIPE_CONCAT = 57450
const XOR = 57451
const AND = 57452
const NOT = 57453
const BETWEEN = 57454
const CASE = 57455
const WHEN = 57456
const THEN = 57457
const ELSE = 57458
const END = 57459
const ELSEIF = 57460
const LOWER_THAN_EQ = 57461
const LE = 57462
const GE = 57463
const NE = 57464
const NULL_SAFE_EQUAL = 57465
const IS = 57466
const LIKE = 57467
const REGEXP = 57468
const IN = 57469
const ASSIGNMENT = 57470
const ILIKE = 57471
const SHIFT_LEFT = 57472
const SHIFT_RIGHT = 57473
const DIV = 57474
const MOD = 57475
const UNARY = 57476
const COLLATE = 57477
const BINARY = 57478
const UNDERSCORE_BINARY = 57479
const INTERVAL = 57480
const OUT = 57481
const INOUT = 57482
const BEGIN = 57483
const START = 57484
const TRANSACTION = 57485
const COMMIT = 57486
const ROLLBACK = 57487
const WORK = 57488
const CONSISTENT = 57489
const SNAPSHOT = 57490
const CHAIN = 57491
const NO = 57492
const RELEASE = 57493
const PRIORITY = 57494
const QUICK = 57495
const BIT = 57496
const TINYINT = 57497
const SMALLINT = 57498
const MEDIUMINT = 57499
const INT = 57500
const INTEGER = 57501
const BIGINT = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const FLOAT_TYPE = 57506
const DECIMAL = 57507
const NUMERIC = 57508
const DECIMAL_VALUE = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const BOOL = 57516
const CHARACTER = 57517
const VARBINARY = 57518
const NCHAR = 57519
const TEXT = 57520
const TINYTEXT = 57521
const MEDIUMTEXT = 57522
const LONGTEXT = 57523
const BLOB = 57524
const TINYBLOB = 57525
const MEDIUMBLOB = 57526
const LONGBLOB = 57527
const JSON = 57528
const ENUM = 57529
const UUID = 57530
const VECF32 = 57531
const VECF64 = 57532
const GEOMETRY = 57533
const POINT = 57534
const LINESTRING = 57535
const POLYGON = 57536
const GEOMETRYCOLLECTION = 57537
const MULTIPOINT = 57538
const MULTILINESTRING = 57539
const MULTIPOLYGON = 57540
const INT1 = 57541
const INT2 = 57542
const INT3 = 57543
const INT4 = 57544
const INT8 = 57545
const S3OPTION = 57546
const STAGEOPTION = 57547
const SQL_SMALL_RESULT = 57548
const SQL_BIG_RESULT = 57549
const SQL_BUFFER_RESULT = 57550
const LOW_PRIORITY = 57551
const HIGH_PRIORITY = 57552
const DELAYED = 57553
const CREATE = 57554
const ALTER = 57555
const DROP = 57556
const RENAME = 57557
const ANALYZE = 57558
const ADD = 57559
const RETURNS = 57560
const SCHEMA = 57561
const TABLE = 57562
const SEQUENCE = 57563
const INDEX = 57564
const VIEW = 57565
const TO = 57566
const IGNORE = 57567
const IF = 57568
const PRIMARY = 57569
const COLUMN = 57570
const CONSTRAINT = 57571
const SPATIAL = 57572
const FULLTEXT = 57573
const FOREIGN = 57574
const KEY_BLOCK_SIZE = 57575
const SHOW = 57576
const DESCRIBE = 57577
const EXPLAIN = 57578
const DATE = 57579
const ESCAPE = 57580
const REPAIR = 57581
const OPTIMIZE = 57582
const TRUNCATE = 57583
const MAXVALUE = 57584
const PARTITION = 57585
const REORGANIZE = 57586
const LESS = 57587
const THAN = 57588
const PROCEDURE = 57589
const TRIGGER = 57590
const STATUS = 57591
const VARIABLES = 57592
const ROLE = 57593
const PROXY = 57594
const AVG_ROW_LENGTH = 57595
const STORAGE = 57596
const DISK = 57597
const MEMORY = 57598
const CHECKSUM = 57599
const COMPRESSION = 57600
const DATA = 57601
const DIRECTORY = 57602
const DELAY_KEY_WRITE = 57603
const ENCRYPTION = 57604
const ENGINE = 57605
const MAX_ROWS = 57606
const MIN_ROWS = 57607
const PACK_KEYS = 57608
const ROW_FORMAT = 57609
const STATS_AUTO_RECALC = 57610
const STATS_PERSISTENT = 57611
const STATS_SAMPLE_PAGES = 57612
const DYNAMIC = 57613
const COMPRESSED = 57614
const REDUNDANT = 57615
const COMPACT = 57616
const FIXED = 57617
const COLUMN_FORMAT = 57618
const AUTO_RANDOM = 57619
const ENGINE_ATTRIBUTE = 57620
const SECONDARY_ENGINE_ATTRIBUTE = 57621
const INSERT_METHOD = 57622
const RESTRICT = 57623
const CASCADE = 57624
const ACTION = 57625
const PARTIAL = 57626
const SIMPLE = 57627
const CHECK = 57628
const ENFORCED = 57629
const RANGE = 57630
const LIST = 57631
const ALGORITHM = 57632
const LINEAR = 57633
const PARTITIONS = 57634
const SUBPARTITION = 57635
const SUBPARTITIONS = 57636
const CLUSTER = 57637
const TYPE = 57638
const ANY = 57639
const SOME = 57640
const EXTERNAL = 57641
const LOCALFILE = 57642
const URL = 57643
const PREPARE = 57644
const DEALLOCATE = 57645
const RESET = 57646
const EXTENSION = 57647
const INCREMENT = 57648
const CYCLE = 57649
const MINVALUE = 57650
const PUBLICATION = 57651
const SUBSCRIPTIONS = 57652
const PUBLICATIONS = 57653
const PROPERTIES = 57654
const PARSER = 57655
const VISIBLE = 57656
const INVISIBLE = 57657
const BTREE = 57658
const HASH = 57659
const RTREE = 57660
const BSI = 57661
const IVFFLAT = 57662
const ZONEMAP = 57663
const LEADING = 57664
const BOTH = 57665
const TRAILING = 57666
const UNKNOWN = 57667
const LISTS = 57668
const OP_TYPE = 57669
const REINDEX = 57670
const EXPIRE = 57671
const ACCOUNT = 57672
const ACCOUNTS = 57673
const UNLOCK = 57674
const DAY = 57675
const NEVER = 57676
const PUMP = 57677
const MYSQL_COMPATIBILITY_MODE = 57678
const MODIFY = 57679
const CHANGE = 57680
const SECOND = 57681
const ASCII = 57682
const COALESCE = 57683
const COLLATION = 57684
const HOUR = 57685
const MICROSECOND = 57686
const MINUTE = 57687
const MONTH = 57688
const QUARTER = 57689
const REPEAT = 57690
const REVERSE = 57691
const ROW_COUNT = 57692
const WEEK = 57693
const REVOKE = 57694
const FUNCTION = 57695
const PRIVILEGES = 57696
const TABLESPACE = 57697
const EXECUTE = 57698
const SUPER = 57699
const GRANT = 57700
const OPTION = 57701
const REFERENCES = 57702
const REPLICATION = 57703
const SLAVE = 57704
const CLIENT = 57705
const USAGE = 57706
const RELOAD = 57707
const FILE = 57708
const TEMPORARY = 57709
const ROUTINE = 57710
const EVENT = 57711
const SHUTDOWN = 57712
const NULLX = 57713
const AUTO_INCREMENT = 57714
const APPROXNUM = 57715
const SIGNED = 57716
const UNSIGNED = 57717
const ZEROFILL = 57718
const ENGINES = 57719
const LOW_CARDINALITY = 57720
const AUTOEXTEND_SIZE = 57721
const ADMIN_NAME = 57722
const RANDOM = 57723
const SUSPEND = 57724
const ATTRIBUTE = 57725
const HISTORY = 57726
const REUSE = 57727
const CURRENT = 57728
const OPTIONAL = 57729
const FAILED_LOGIN_ATTEMPTS = 57730
const PASSWORD_LOCK_TIME = 57731
const UNBOUNDED = 57732
const SECONDARY = 57733
const RESTRICTED = 57734
const USER = 57735
const IDENTIFIED = 57736
const CIPHER = 57737
const ISSUER = 57738
const X509 = 57739
const SUBJECT = 57740
const SAN = 57741
const REQUIRE = 57742
const SSL = 57743
const NONE = 57744
const PASSWORD = 57745
const SHARED = 57746
const EXCLUSIVE = 57747
const MAX_QUERIES_PER_HOUR = 57748
const MAX_UPDATES_PER_HOUR = 57749
const MAX_CONNECTIONS_PER_HOUR = 57750
const MAX_USER_CONNECTIONS = 57751
const FORMAT = 57752
const VERBOSE = 57753
const CONNECTION = 57754
const TRIGGERS = 57755
const PROFILES = 57756
const LOAD = 57757
const INLINE = 57758
const INFILE = 57759
const TERMINATED = 57760
const OPTIONALLY = 57761
const ENCLOSED = 57762
const ESCAPED = 57763
const STARTING = 57764
const LINES = 57765
const ROWS = 57766
const IMPORT = 57767
const DISCARD = 57768
const JSONTYPE = 57769
const MODUMP = 57770
const OVER = 57771
const PRECEDING = 57772
const FOLLOWING = 57773
const GROUPS = 57774
const DATABASES = 57775
const TABLES = 57776
const SEQUENCES = 57777
const EXTENDED = 57778
const FULL = 57779
const PROCESSLIST = 57780
const FIELDS = 57781
const COLUMNS = 57782
const OPEN = 57783
const ERRORS = 57784
const WARNINGS = 57785
const INDEXES = 57786
const SCHEMAS = 57787
const NODE = 57788
const LOCKS = 57789
const ROLES = 57790
const TABLE_NUMBER = 57791
const COLUMN_NUMBER = 57792
const TABLE_VALUES = 57793
const TABLE_SIZE = 57794
const NAMES = 57795
const GLOBAL = 57796
const PERSIST = 57797
const SESSION = 57798
const ISOLATION = 57799
const LEVEL = 57800
const READ = 57801
const WRITE = 57802
const ONLY = 57803
const REPEATABLE = 57804
const COMMITTED = 57805
const UNCOMMITTED = 57806
const SERIALIZABLE = 57807
const LOCAL = 57808
const EVENTS = 57809
const PLUGINS = 57810
const CURRENT_TIMESTAMP = 57811
const DATABASE = 57812
const CURRENT_TIME = 57813
const LOCALTIME = 57814
const LOCALTIMESTAMP = 57815
const UTC_DATE = 57816
const UTC_TIME = 57817
const UTC_TIMESTAMP = 57818
const REPLACE = 57819
const CONVERT = 57820
const SEPARATOR = 57821
const TIMESTAMPDIFF = 57822
const CURRENT_DATE = 57823
const CURRENT_USER = 57824
const CURRENT_ROLE = 57825
const SECOND_MICROSECOND = 57826
const MINUTE_MICROSECOND = 57827
const MINUTE_SECOND = 57828
const HOUR_MICROSECOND = 57829
const HOUR_SECOND = 57830
const HOUR_MINUTE = 57831
const DAY_MICROSECOND = 57832
const DAY_SECOND = 57833
const DAY_MINUTE = 57834
const DAY_HOUR = 57835
const YEAR_MONTH = 57836
const SQL_TSI_HOUR = 57837
const SQL_TSI_DAY = 57838
const SQL_TSI_WEEK = 57839
const SQL_TSI_MONTH = 57840
const SQL_TSI_QUARTER = 57841
const SQL_TSI_YEAR = 57842
const SQL_TSI_SECOND = 57843
const SQL_TSI_MINUTE = 57844
const RECURSIVE = 57845
const CONFIG = 57846
const DRAINER = 57847
const SOURCE = 57848
const STREAM = 57849
const HEADERS = 57850
const CONNECTOR = 57851
const CONNECTORS = 57852
const DAEMON = 57853
const PAUSE = 57854
const CANCEL = 57855
const TASK = 57856
const RESUME = 57857
const MATCH = 57858
const AGAINST = 57859
const BOOLEAN = 57860
const LANGUAGE = 57861
const WITH = 57862
const QUERY = 57863
const EXPANSION = 57864
const WITHOUT = 57865
const VALIDATION = 57866
const ADDDATE = 57867
const BIT_AND = 57868
const BIT_OR = 57869
const BIT_XOR = 57870
const CAST = 57871
const COUNT = 57872
const APPROX_COUNT = 57873
const APPROX_COUNT_DISTINCT = 57874
const SERIAL_EXTRACT = 57875
const APPROX_PERCENTILE = 57876
const CURDATE = 57877
const CURTIME = 57878
const DATE_ADD = 57879
const DATE_SUB = 57880
const EXTRACT = 57881
const GROUP_CONCAT = 57882
const MAX = 57883
const MID = 57884
const MIN = 57885
const NOW = 57886
const POSITION = 57887
const SESSION_USER = 57888
const STD = 57889
const STDDEV = 57890
const MEDIAN = 57891
const CLUSTER_CENTERS = 57892
const KMEANS = 57893
const STDDEV_POP = 57894
const STDDEV_SAMP = 57895
const SUBDATE = 57896
const SUBSTR = 57897
const SUBSTRING = 57898
const SUM = 57899
const SYSDATE = 57900
const SYSTEM_USER = 57901
const TRANSLATE = 57902
const TRIM = 57903
const VARIANCE = 57904
const VAR_POP = 57905
const VAR_SAMP = 57906
const AVG = 57907
const RANK = 57908
const ROW_NUMBER = 57909
const DENSE_RANK = 57910
const BIT_CAST = 57911
const NEXTVAL = 57912
const SETVAL = 57913
const CURRVAL = 57914
const LASTVAL = 57915
const ARROW = 57916
const ROW = 57917
const OUTFILE = 57918
const HEADER = 57919
const MAX_FILE_SIZE = 57920
const FORCE_QUOTE = 57921
const PARALLEL = 57922
const UNUSED = 57923
const BINDINGS = 57924
const DO = 57925
const DECLARE = 57926
const LOOP = 57927
const WHILE = 57928
const LEAVE = 57929
const ITERATE = 57930
const UNTIL = 57931
const CALL = 57932
const PREV = 57933
const SLIDING = 57934
const FILL = 57935
const SPBEGIN = 57936
const BACKEND = 57937
const SERVERS = 57938
const HANDLER = 57939
const PERCENT = 57940
const SAMPLE = 57941
const KILL = 57942
const BACKUP = 57943
const FILESYSTEM = 57944
const QUERY_RESULT = 57945

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:11050

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 117,
	11, 702,
	22, 702,
	-2, 695,
	-1, 137,
	237, 1084,
	239, 992,
	-2, 1038,
	-1, 161,
	43, 530,
	239, 530,
	266, 537,
	267, 537,
	461, 530,
	-2, 564,
	-1, 202,
	624, 1827,
	-2, 446,
	-1, 496,
	624, 1942,
	-2, 341,
	-1, 554,
	624, 2001,
	-2, 339,
	-1, 555,
	624, 2002,
	-2, 340,
	-1, 556,
	624, 2003,
	-2, 342,
	-1, 681,
	318, 133,
	433, 133,
	434, 133,
	-2, 1732,
	-1, 746,
	82, 1519,
	-2, 1882,
	-1, 747,
	82, 1537,
	-2, 1853,
	-1, 751,
	82, 1538,
	-2, 1881,
	-1, 779,
	82, 1449,
	-2, 2073,
	-1, 780,
	82, 1450,
	-2, 2072,
	-1, 781,
	82, 1451,
	-2, 2062,
	-1, 782,
	82, 2034,
	-2, 2055,
	-1, 783,
	82, 2035,
	-2, 2056,
	-1, 784,
	82, 2036,
	-2, 2064,
	-1, 785,
	82, 2037,
	-2, 2044,
	-1, 786,
	82, 2038,
	-2, 2053,
	-1, 787,
	82, 2039,
	-2, 2065,
	-1, 788,
	82, 2040,
	-2, 2066,
	-1, 789,
	82, 2041,
	-2, 2071,
	-1, 790,
	82, 2042,
	-2, 2076,
	-1, 791,
	82, 2043,
	-2, 2077,
	-1, 792,
	82, 1515,
	-2, 1917,
	-1, 793,
	82, 1516,
	-2, 1716,
	-1, 794,
	82, 1517,
	-2, 1925,
	-1, 795,
	82, 1518,
	-2, 1725,
	-1, 797,
	82, 1521,
	-2, 1733,
	-1, 798,
	82, 1522,
	-2, 1949,
	-1, 800,
	82, 1525,
	-2, 1752,
	-1, 802,
	82, 1527,
	-2, 1961,
	-1, 803,
	82, 1528,
	-2, 1960,
	-1, 804,
	82, 1529,
	-2, 1796,
	-1, 805,
	82, 1530,
	-2, 1877,
	-1, 808,
	82, 1533,
	-2, 1972,
	-1, 810,
	82, 1535,
	-2, 1975,
	-1, 811,
	82, 1536,
	-2, 1977,
	-1, 812,
	82, 1539,
	-2, 1985,
	-1, 813,
	82, 1540,
	-2, 1862,
	-1, 814,
	82, 1541,
	-2, 1907,
	-1, 815,
	82, 1542,
	-2, 1872,
	-1, 816,
	82, 1543,
	-2, 1897,
	-1, 827,
	82, 1427,
	-2, 2067,
	-1, 828,
	82, 1428,
	-2, 2068,
	-1, 829,
	82, 1429,
	-2, 2069,
	-1, 914,
	456, 564,
	457, 564,
	-2, 531,
	-1, 960,
	123, 1716,
	134, 1716,
	154, 1716,
	-2, 1690,
	-1, 1069,
	22, 729,
	-2, 678,
	-1, 1170,
	11, 702,
	22, 702,
	-2, 1311,
	-1, 1246,
	22, 729,
	-2, 678,
	-1, 1558,
	82, 1590,
	-2, 1879,
	-1, 1559,
	82, 1591,
	-2, 1880,
	-1, 1702,
	83, 878,
	-2, 884,
	-1, 2113,
	106, 1030,
	150, 1030,
	189, 1030,
	192, 1030,
	279, 1030,
	-2, 1023,
	-1, 2259,
	11, 702,
	22, 702,
	-2, 822,
	-1, 2291,
	83, 1676,
	155, 1676,
	-2, 1864,
	-1, 2292,
	83, 1676,
	155, 1676,
	-2, 1863,
	-1, 2293,
	83, 1652,
	155, 1652,
	-2, 1850,
	-1, 2294,
	83, 1653,
	155, 1653,
	-2, 1855,
	-1, 2295,
	83, 1654,
	155, 1654,
	-2, 1784,
	-1, 2296,
	83, 1655,
	155, 1655,
	-2, 1778,
	-1, 2297,
	83, 1656,
	155, 1656,
	-2, 1706,
	-1, 2298,
	83, 1657,
	155, 1657,
	-2, 1852,
	-1, 2299,
	83, 1658,
	155, 1658,
	-2, 1782,
	-1, 2300,
	83, 1659,
	155, 1659,
	-2, 1777,
	-1, 2301,
	83, 1660,
	155, 1660,
	-2, 1766,
	-1, 2302,
	83, 1676,
	155, 1676,
	-2, 1767,
	-1, 2303,
	83, 1676,
	155, 1676,
	-2, 1768,
	-1, 2305,
	83, 1665,
	155, 1665,
	-2, 1897,
	-1, 2306,
	83, 1643,
	155, 1643,
	-2, 1882,
	-1, 2307,
	83, 1674,
	155, 1674,
	-2, 1853,
	-1, 2308,
	83, 1674,
	155, 1674,
	-2, 1881,
	-1, 2309,
	83, 1674,
	155, 1674,
	-2, 1734,
	-1, 2310,
	83, 1672,
	155, 1672,
	-2, 1872,
	-1, 2311,
	83, 1669,
	155, 1669,
	-2, 1757,
	-1, 2312,
	82, 1624,
	83, 1624,
	155, 1624,
	391, 1624,
	392, 1624,
	393, 1624,
	-2, 1705,
	-1, 2313,
	82, 1625,
	83, 1625,
	155, 1625,
	391, 1625,
	392, 1625,
	393, 1625,
	-2, 1707,
	-1, 2314,
	82, 1626,
	83, 1626,
	155, 1626,
	391, 1626,
	392, 1626,
	393, 1626,
	-2, 1922,
	-1, 2315,
	82, 1628,
	83, 1628,
	155, 1628,
	391, 1628,
	392, 1628,
	393, 1628,
	-2, 1854,
	-1, 2316,
	82, 1630,
	83, 1630,
	155, 1630,
	391, 1630,
	392, 1630,
	393, 1630,
	-2, 1836,
	-1, 2317,
	82, 1632,
	83, 1632,
	155, 1632,
	391, 1632,
	392, 1632,
	393, 1632,
	-2, 1783,
	-1, 2318,
	82, 1634,
	83, 1634,
	155, 1634,
	391, 1634,
	392, 1634,
	393, 1634,
	-2, 1762,
	-1, 2319,
	82, 1635,
	83, 1635,
	155, 1635,
	391, 1635,
	392, 1635,
	393, 1635,
	-2, 1763,
	-1, 2320,
	82, 1637,
	83, 1637,
	155, 1637,
	391, 1637,
	392, 1637,
	393, 1637,
	-2, 1704,
	-1, 2321,
	83, 1679,
	155, 1679,
	391, 1679,
	392, 1679,
	393, 1679,
	-2, 1739,
	-1, 2322,
	83, 1679,
	155, 1679,
	391, 1679,
	392, 1679,
	393, 1679,
	-2, 1753,
	-1, 2323,
	83, 1682,
	155, 1682,
	391, 1682,
	392, 1682,
	393, 1682,
	-2, 1735,
	-1, 2324,
	83, 1682,
	155, 1682,
	391, 1682,
	392, 1682,
	393, 1682,
	-2, 1799,
	-1, 2325,
	83, 1679,
	155, 1679,
	391, 1679,
	392, 1679,
	393, 1679,
	-2, 1820,
	-1, 2512,
	106, 1030,
	150, 1030,
	189, 1030,
	192, 1030,
	279, 1030,
	-2, 1024,
	-1, 2526,
	80, 623,
	155, 623,
	-2, 1197,
	-1, 2908,
	192, 1030,
	303, 1279,
	-2, 1251,
	-1, 3062,
	106, 1030,
	150, 1030,
	189, 1030,
	192, 1030,
	-2, 1140,
	-1, 3064,
	106, 1030,
	150, 1030,
	189, 1030,
	192, 1030,
	-2, 1140,
	-1, 3076,
	80, 623,
	155, 623,
	-2, 1198,
	-1, 3097,
	192, 1030,
	303, 1279,
	-2, 1252,
	-1, 3232,
	106, 1030,
	150, 1030,
	189, 1030,
	192, 1030,
	-2, 1141,
	-1, 3258,
	83, 1102,
	155, 1102,
	-2, 1030,
	-1, 3389,
	83, 1102,
	155, 1102,
	-2, 1030,
	-1, 3538,
	83, 1106,
	155, 1106,
	-2, 1030,
	-1, 3586,
	83, 1107,
	155, 1107,
	-2, 1030,
}

const yyPrivate = 57344

const yyLast = 45010

var yyAct = [...]int{
	713, 691, 3603, 2555, 715, 3566, 191, 3619, 1787, 3542,
	3548, 3082, 3444, 2927, 1538, 3549, 3541, 3389, 2894, 699,
	3470, 3429, 3286, 3111, 3367, 3420, 2549, 3175, 2994, 1204,
	3388, 2375, 1326, 693, 3448, 1388, 3219, 3220, 3217, 3324,
	588, 2995, 3313, 743, 2552, 3359, 1464, 959, 3179, 1070,
	604, 3430, 609, 609, 3432, 3170, 1735, 2158, 609, 625,
	634, 3049, 3224, 634, 2529, 1534, 3239, 3098, 3231, 2868,
	1541, 3201, 689, 2831, 2992, 3065, 2661, 2662, 2903, 3234,
	1877, 1874, 2857, 2644, 3038, 2579, 2923, 2905, 176, 3067,
	2654, 2660, 2410, 2558, 2912, 2253, 2723, 1850, 1595, 1945,
	2980, 1842, 2287, 2683, 639, 1980, 645, 2960, 2657, 2161,
	2502, 2838, 1381, 2841, 683, 2911, 1277, 36, 1892, 1474,
	3181, 2875, 2836, 55, 1063, 2832, 2513, 2834, 2833, 2124,
	2091, 2237, 1965, 2766, 2082, 1453, 2081, 1460, 688, 1976,
	890, 2358, 1953, 2696, 1919, 2289, 2706, 1682, 2829, 608,
	608, 1946, 2341, 1465, 1975, 616, 1870, 1954, 1468, 1299,
	2486, 2581, 1766, 2254, 2491, 588, 2560, 2442, 1845, 1777,
	2159, 2242, 6, 2521, 187, 8, 631, 186, 7, 2123,
	1711, 2285, 2010, 1977, 1015, 1473, 1532, 1397, 1490, 1367,
	1427, 191, 2104, 191, 2154, 1006, 1007, 603, 116, 1987,
	682, 35, 609, 2443, 690, 1588, 1315, 1572, 1746, 922,
	1523, 1843, 1737, 1747, 1081, 700, 1949, 26, 1935, 15,
	1952, 1434, 1909, 952, 1710, 692, 1335, 1366, 14, 1301,
	1531, 2261, 618, 1311, 684, 831, 1336, 1420, 889, 13,
	1596, 32, 1327, 621, 23, 1364, 16, 648, 10, 177,
	1426, 167, 647, 872, 633, 953, 173, 909, 1244, 866,
	887, 1205, 893, 644, 1984, 3353, 2475, 1003, 1994, 2475,
	2475, 3052, 2987, 2398, 2347, 2345, 630, 2342, 626, 1002,
	1695, 1004, 2344, 1437, 998, 999, 1441, 629, 175, 605,
	833, 3611, 968, 1263, 834, 587, 2814, 999, 628, 616,
	627, 999, 2811, 2816, 2813, 1349, 1689, 614, 1259, 1439,
	3168, 2468, 2466, 1139, 1140, 1141, 1138, 637, 1537, 2719,
	174, 51, 163, 138, 684, 3101, 1139, 1140, 1141, 1138,
	2717, 892, 1924, 3320, 3314, 3171, 2993, 1962, 164, 1199,
	3434, 932, 1948, 832, 2793, 156, 3523, 2198, 997, 165,
	8, 2470, 174, 7, 843, 3374, 3206, 174, 3202, 2392,
	1102, 2384, 1981, 3113, 1264, 3066, 2115, 965, 115, 3343,
	967, 174, 3481, 1407, 174, 174, 3104, 1406, 1405, 971,
	174, 969, 970, 103, 1273, 643, 3099, 2791, 174, 168,
	1291, 3121, 3122, 1488, 2108, 1992, 3345, 3100, 1481, 3375,
	115, 2279, 1136, 1887, 174, 51, 163, 138, 1117, 2690,
	2691, 1118, 2280, 174, 51, 163, 138, 1855, 1856, 2738,
	1854, 168, 2731, 1485, 934, 1265, 168, 933, 1478, 174,
	51, 163, 138, 2689, 3105, 1630, 115, 1696, 1697, 1120,
	168, 2898, 1323, 168, 1487, 1368, 2896, 1370, 822, 1480,
	821, 823, 824, 2267, 825, 826, 2266, 168, 963, 2268,
	2359, 2488, 964, 844, 918, 120, 121, 931, 122, 123,
	2815, 2489, 894, 168, 1333, 1334, 2812, 1110, 1524, 1508,
	1112, 1528, 168, 1331, 1761, 1540, 1134, 1330, 1333, 1334,
	3552, 3553, 962, 961, 3437, 3514, 3192, 3437, 168, 896,
	1345, 3436, 3513, 1346, 3520, 1527, 1129, 3436, 1113, 3516,
	3435, 3512, 3435, 2070, 1272, 3574, 3570, 3571, 1115, 3342,
	2487, 3325, 3326, 3327, 3328, 3341, 3422, 2996, 3120, 3322,
	2162, 3422, 2725, 2724, 2726, 3425, 137, 162, 172, 3317,
	101, 2996, 2379, 3441, 1544, 1075, 1440, 1438, 1996, 2599,
	1871, 3009, 1084, 3046, 3039, 3109, 1861, 2471, 161, 155,
	154, 1519, 917, 916, 2231, 57, 2102, 1932, 1988, 2852,
	1447, 1446, 1084, 3211, 878, 2850, 3347, 3106, 3110, 3108,
	3107, 1116, 2478, 915, 2842, 3525, 3526, 1106, 1529, 1348,
	1132, 1133, 3123, 2389, 891, 2190, 3518, 3521, 3522, 2754,
	1131, 3169, 2196, 1105, 2494, 895, 927, 2718, 609, 2756,
	3138, 1526, 1108, 2648, 2234, 3115, 3116, 2233, 609, 1074,
	137, 3350, 172, 3208, 1111, 1114, 157, 158, 159, 923,
	2847, 2848, 3191, 2238, 2926, 2900, 634, 634, 1321, 609,
	3193, 2846, 161, 3551, 2924, 2925, 2849, 1993, 3581, 2866,
	1107, 2876, 642, 1885, 1886, 3463, 166, 1865, 1119, 1543,
	1542, 3123, 636, 1358, 3458, 924, 928, 1274, 2469, 2522,
	635, 2653, 3379, 3102, 3135, 2110, 111, 3371, 3128, 3114,
	160, 941, 112, 3449, 3465, 912, 3083, 910, 914, 931,
	3471, 1262, 2895, 911, 908, 907, 2554, 913, 898, 899,
	897, 900, 901, 902, 903, 1065, 929, 1310, 930, 3090,
	678, 3139, 1073, 680, 3440, 1072, 1127, 1128, 679, 925,
	926, 3277, 3635, 3337, 2177, 3338, 2282, 1109, 1525, 2208,
	2157, 2180, 1009, 3352, 3012, 1067, 1093, 2760, 2474, 113,
	631, 631, 1982, 1982, 1982, 1074, 1086, 1085, 968, 1097,
	1347, 2929, 50, 2844, 2550, 2551, 921, 2554, 1550, 1553,
	1554, 2207, 920, 3182, 2500, 1088, 1086, 1085, 880, 1551,
	881, 3266, 1377, 999, 1376, 999, 999, 999, 1208, 3340,
	1999, 2001, 2002, 1095, 999, 999, 2228, 2229, 2179, 1308,
	3337, 3524, 3338, 3472, 1307, 3373, 2506, 2508, 2509, 2510,
	2507, 52, 1995, 1983, 2343, 1325, 1324, 1306, 3332, 3119,
	3339, 3272, 3360, 3622, 1172, 1333, 1334, 1442, 968, 3346,
	1333, 1334, 3540, 965, 937, 935, 967, 936, 1079, 3380,
	2178, 3068, 632, 2904, 3372, 2628, 169, 170, 1209, 171,
	630, 630, 626, 626, 139, 1064, 3340, 919, 632, 832,
	2810, 629, 629, 2199, 2164, 1270, 604, 2467, 2011, 3393,
	1322, 2901, 628, 628, 627, 627, 1077, 1078, 2157, 2701,
	2702, 3166, 3207, 1278, 1069, 2393, 139, 3339, 3118, 2853,
	1242, 139, 1872, 1247, 1122, 2999, 3348, 1123, 1094, 890,
	1090, 1091, 2843, 965, 52, 139, 967, 2174, 139, 139,
	1174, 1175, 1176, 1177, 139, 1068, 1096, 114, 39, 964,
	52, 2493, 139, 942, 49, 1125, 3517, 1178, 5, 2757,
	169, 170, 643, 171, 118, 119, 3419, 2600, 139, 2601,
	2602, 2685, 2687, 1365, 938, 1102, 3212, 139, 609, 2920,
	1360, 1329, 2928, 1862, 2167, 2385, 588, 588, 1520, 3623,
	2271, 2845, 1275, 139, 2194, 588, 588, 1985, 1283, 1392,
	1392, 2759, 609, 932, 2924, 2925, 1289, 2497, 2498, 1288,
	1287, 1286, 638, 3032, 2418, 3279, 1279, 1280, 1281, 1282,
	2921, 1284, 2496, 2597, 634, 1421, 604, 1290, 3392, 1430,
	1430, 2163, 1997, 1998, 1121, 1394, 2165, 940, 1552, 3539,
	191, 1296, 1058, 1054, 1055, 1056, 1057, 2864, 2423, 588,
	2422, 2421, 2419, 1399, 1217, 1218, 1501, 1502, 3268, 879,
	2000, 1101, 3267, 1699, 1390, 1390, 990, 995, 996, 3333,
	1332, 2477, 1126, 3431, 932, 1356, 3287, 3288, 3289, 3292,
	3291, 3290, 3273, 3274, 1864, 2085, 934, 2768, 2767, 933,
	2166, 2619, 2620, 1271, 884, 885, 886, 1124, 1268, 1398,
	1472, 1448, 1475, 685, 2087, 2086, 1700, 1483, 850, 1386,
	1387, 1266, 1267, 2084, 939, 2168, 1698, 2420, 2193, 846,
	3620, 3621, 2629, 2631, 2632, 2633, 2630, 882, 1506, 2220,
	2140, 1248, 1246, 847, 3240, 2044, 3333, 2686, 2043, 3631,
	3334, 1071, 1392, 2173, 1392, 1074, 2527, 2171, 1505, 1317,
	1318, 1276, 3000, 2881, 3625, 3510, 1504, 934, 1489, 849,
	933, 3617, 1304, 852, 851, 1137, 2957, 1309, 2164, 2167,
	1521, 3605, 3588, 2094, 1319, 1738, 2865, 1312, 1316, 1316,
	1316, 3560, 1338, 1339, 2106, 1341, 1342, 1343, 1071, 1298,
	2251, 3554, 1451, 1359, 1454, 1455, 2095, 2096, 1350, 1351,
	1102, 1312, 1312, 1738, 2361, 1456, 1457, 3536, 2953, 1337,
	1137, 1990, 1340, 2618, 1462, 1463, 1139, 1140, 1141, 1138,
	2922, 1479, 3491, 1422, 3466, 1486, 1594, 968, 2528, 3035,
	3454, 968, 3011, 3589, 1912, 1375, 3412, 631, 1539, 3411,
	1643, 1372, 1374, 3606, 3589, 3406, 1100, 1515, 2075, 1467,
	1384, 1385, 1471, 3561, 2424, 2425, 1470, 992, 993, 994,
	614, 1400, 2139, 3356, 3405, 1560, 1561, 1562, 1563, 1564,
	1565, 1566, 1567, 1568, 1569, 1570, 1571, 1413, 1419, 3537,
	1431, 1583, 1584, 1536, 2528, 1137, 2384, 2933, 3404, 1432,
	3403, 943, 1000, 1001, 3356, 2931, 1990, 1005, 2105, 3383,
	2168, 1074, 3455, 3382, 1443, 2163, 2157, 2162, 3413, 2160,
	2165, 2128, 2252, 1421, 2252, 1680, 2820, 3356, 1708, 2818,
	1392, 1713, 1714, 1555, 1716, 1717, 609, 1652, 3355, 2252,
	1628, 609, 1243, 2704, 1392, 3144, 3356, 630, 890, 626,
	2957, 1736, 1139, 1140, 1141, 1138, 1392, 1514, 629, 1511,
	2023, 2480, 1360, 1492, 1633, 1634, 1635, 625, 1517, 628,
	3356, 627, 3356, 1497, 2166, 3092, 1683, 1649, 3058, 1510,
	1650, 1990, 1910, 2472, 1513, 1990, 1512, 1760, 1509, 1139,
	1140, 1141, 1138, 2374, 1660, 1661, 1767, 1767, 2789, 1360,
	1535, 1360, 1360, 1530, 1691, 609, 609, 1642, 1708, 1708,
	3356, 1679, 1392, 1839, 1840, 1852, 2941, 2282, 2366, 1707,
	2680, 1581, 1582, 2449, 2441, 1625, 1626, 1522, 1629, 588,
	1574, 1392, 2400, 1718, 2382, 2022, 1644, 2370, 1723, 1715,
	1704, 1705, 1706, 1139, 1140, 1141, 1138, 3093, 2282, 1651,
	3059, 1653, 2368, 1719, 1720, 1721, 1722, 1981, 2363, 609,
	1708, 1392, 1853, 1897, 2356, 609, 609, 609, 1902, 1903,
	1533, 836, 837, 838, 839, 1907, 1908, 2354, 2352, 2150,
	1914, 2350, 1888, 2127, 2080, 1686, 1789, 191, 2942, 2020,
	191, 191, 2252, 191, 2076, 1137, 1137, 2074, 2073, 1834,
	1835, 2048, 1773, 1774, 1137, 1972, 2128, 1883, 2055, 2364,
	1654, 1764, 1297, 1586, 1769, 1378, 3639, 3607, 1880, 1881,
	836, 837, 838, 839, 2369, 3079, 2882, 1099, 2054, 1681,
	2364, 1643, 1643, 1956, 1866, 1858, 2357, 1860, 1643, 1643,
	1687, 2042, 2033, 2032, 2031, 1967, 2708, 1878, 1879, 2355,
	2351, 1894, 3045, 2351, 1989, 2128, 1893, 1739, 1740, 1768,
	1703, 1498, 1893, 1893, 1893, 1102, 2075, 2530, 1896, 1736,
	1873, 2387, 1961, 1392, 1979, 1923, 2386, 1753, 1926, 1927,
	1137, 1929, 1752, 1899, 1900, 1901, 1733, 1744, 1745, 1758,
	1743, 1732, 1748, 1312, 1750, 1751, 2378, 1403, 1759, 1749,
	1137, 1762, 1763, 1100, 1754, 1755, 2145, 1316, 1757, 1771,
	1772, 2039, 1770, 1137, 1137, 1137, 1137, 2024, 841, 1316,
	2263, 1971, 1917, 1905, 1765, 1973, 1990, 1494, 1185, 1087,
	1066, 1061, 3302, 1499, 1059, 1957, 1838, 3142, 1354, 1355,
	1882, 1357, 1154, 1361, 1362, 1363, 1841, 2886, 1712, 1857,
	3459, 1859, 1867, 3241, 968, 1157, 1158, 1159, 1160, 1161,
	1154, 968, 1728, 2751, 2164, 2167, 631, 841, 1632, 1631,
	1632, 1631, 3626, 848, 1741, 1408, 1409, 1410, 1411, 1412,
	3071, 1414, 1415, 1416, 1417, 1418, 1344, 1380, 1951, 1424,
	1425, 1895, 1066, 3069, 3460, 1951, 1302, 3242, 2877, 1382,
	1303, 3608, 2008, 2009, 1918, 1920, 1655, 1656, 1657, 1658,
	1383, 2191, 1662, 1663, 1664, 1665, 1667, 1668, 1669, 1670,
	1671, 1672, 1673, 1674, 3072, 3354, 1580, 3329, 1937, 965,
	1712, 1963, 967, 3270, 2342, 3269, 965, 3070, 3255, 967,
	1313, 3213, 1577, 1579, 1576, 2004, 1578, 3051, 2958, 968,
	2951, 2946, 683, 2943, 1958, 609, 609, 609, 2859, 1960,
	2650, 2985, 2504, 2476, 1970, 2397, 630, 2367, 626, 2273,
	609, 609, 609, 609, 2878, 1293, 1292, 629, 1666, 1533,
	1659, 1076, 1974, 2125, 2407, 1302, 1379, 2336, 628, 1303,
	627, 1921, 1969, 2132, 1360, 1589, 2168, 853, 716, 726,
	1142, 2163, 2157, 2162, 2710, 2160, 2165, 717, 1171, 718,
	722, 725, 721, 719, 720, 2012, 1180, 2152, 2879, 1589,
	1360, 2017, 2003, 3511, 965, 2049, 2050, 967, 2052, 1435,
	1709, 1921, 2006, 2007, 2005, 2059, 1138, 2186, 1141, 1138,
	3282, 1188, 1574, 2016, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1154, 2098, 2099, 2100, 3281, 1314, 2727, 2589, 2588,
	2166, 2566, 723, 1139, 1140, 1141, 1138, 2116, 2117, 2118,
	2119, 1153, 1152, 1162, 1163, 1155, 1156, 1157, 1158, 1159,
	1160, 1161, 1154, 3387, 1165, 2564, 1169, 2192, 3214, 3215,
	2046, 3261, 3634, 1187, 724, 2460, 3613, 2461, 2256, 2256,
	1852, 2256, 1166, 1168, 1164, 1186, 1167, 1153, 1152, 1162,
	1163, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1154, 588,
	588, 1139, 1140, 1141, 1138, 3612, 2077, 1074, 3535, 2069,
	2071, 2072, 2988, 1392, 609, 3534, 1153, 1152, 1162, 1163,
	1155, 1156, 1157, 1158, 1159, 1160, 1161, 1154, 2503, 609,
	1647, 3500, 2088, 3633, 3461, 1074, 2326, 604, 2156, 2155,
	1208, 1430, 2107, 1852, 1648, 3408, 2331, 3396, 2333, 3386,
	3376, 3315, 191, 1152, 1162, 1163, 1155, 1156, 1157, 1158,
	1159, 1160, 1161, 1154, 2149, 3244, 1139, 1140, 1141, 1138,
	2269, 3209, 2270, 3243, 2258, 3084, 2262, 2346, 2277, 3073,
	3042, 2260, 2133, 1139, 1140, 1141, 1138, 2134, 2135, 3043,
	2274, 2275, 2986, 2851, 2376, 2377, 2640, 2137, 2138, 2747,
	1209, 2144, 2380, 968, 2638, 1979, 2169, 2170, 2722, 2175,
	2136, 1398, 1392, 2146, 1392, 2142, 1392, 2141, 2143, 2721,
	2636, 1074, 1139, 1140, 1141, 1138, 1893, 3210, 2290, 2399,
	1435, 1316, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1143,
	2337, 2770, 2625, 2623, 2330, 3044, 2622, 2284, 1139, 1140,
	1141, 1138, 2639, 2621, 1392, 2427, 2613, 2409, 2607, 2606,
	2637, 2235, 1139, 1140, 1141, 1138, 1139, 1140, 1141, 1138,
	2434, 2338, 2035, 2264, 2605, 1392, 2635, 2604, 965, 2390,
	2473, 967, 1429, 1429, 1139, 1140, 1141, 1138, 2079, 2426,
	1940, 1939, 1938, 1436, 3545, 1934, 1898, 1933, 2624, 1891,
	1890, 2278, 1889, 3630, 2782, 1495, 1261, 2281, 3050, 2655,
	2435, 2837, 3629, 3580, 2394, 1139, 1140, 1141, 1138, 1390,
	1139, 1140, 1141, 1138, 1074, 3579, 3576, 3176, 1074, 2438,
	2439, 2329, 2433, 3572, 2327, 3443, 1392, 3218, 2034, 2501,
	1390, 3428, 3417, 2556, 2415, 1708, 3447, 3400, 3395, 2436,
	3394, 3490, 2328, 2526, 1372, 1374, 3351, 3349, 3316, 2532,
	3263, 2335, 2396, 2781, 1139, 1140, 1141, 1138, 3478, 3227,
	2391, 3174, 1139, 1140, 1141, 1138, 2542, 3172, 3151, 3148,
	2372, 3146, 2405, 2645, 3041, 1074, 2464, 3040, 2383, 1139,
	1140, 1141, 1138, 2563, 3037, 2411, 678, 2411, 2388, 680,
	1074, 1074, 1074, 1767, 679, 3020, 1074, 3018, 2574, 2575,
	2576, 2577, 1074, 2584, 2952, 2585, 2586, 2481, 2587, 2401,
	2402, 2290, 2948, 2514, 1139, 1140, 1141, 1138, 2381, 2939,
	2584, 1545, 1546, 1547, 1548, 1549, 2515, 2417, 2938, 2860,
	2824, 2823, 2256, 2027, 2822, 2083, 2404, 2761, 2758, 2720,
	2524, 2694, 2444, 2445, 2634, 2626, 2641, 2616, 2450, 2614,
	1789, 2610, 2609, 2608, 588, 778, 777, 3474, 2533, 1708,
	1074, 1852, 1852, 1852, 1852, 1590, 1591, 1592, 1593, 2373,
	1942, 1936, 1074, 1852, 1627, 1694, 2256, 1693, 2483, 1496,
	2485, 3197, 1637, 1216, 2569, 2570, 2021, 2523, 1212, 2573,
	2561, 1211, 1392, 1062, 2561, 2580, 2019, 845, 2562, 2482,
	2557, 3330, 3198, 609, 609, 3183, 2499, 1139, 1140, 1141,
	1138, 3064, 3063, 3062, 2544, 2568, 3185, 3034, 3030, 2531,
	1533, 8, 2525, 3028, 7, 1139, 1140, 1141, 1138, 1684,
	1162, 1163, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1154,
	2546, 2543, 1139, 1140, 1141, 1138, 3027, 3026, 2676, 2559,
	3184, 2565, 3025, 2663, 3024, 2572, 3023, 3019, 3017, 191,
	1139, 1140, 1141, 1138, 191, 2663, 3001, 2991, 2990, 2535,
	1139, 1140, 1141, 1138, 2538, 2976, 1139, 1140, 1141, 1138,
	2975, 2603, 2887, 2534, 2827, 1643, 2817, 1643, 2787, 2780,
	2737, 2541, 2539, 2540, 2772, 2615, 2771, 2765, 2703, 2746,
	2698, 2699, 2479, 2353, 2349, 1392, 2348, 2060, 2753, 2053,
	2197, 2646, 1756, 2200, 2201, 2202, 2203, 2204, 2205, 2206,
	2651, 2047, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216,
	2217, 2218, 2219, 2678, 2221, 2222, 2223, 2224, 2225, 2679,
	2226, 2677, 2675, 2045, 1712, 2041, 2692, 2711, 1455, 2040,
	2695, 3132, 2715, 2038, 2029, 3015, 2705, 2026, 1456, 1457,
	2025, 1941, 1677, 1683, 1676, 1684, 1462, 1463, 2736, 2688,
	1684, 1684, 2664, 2665, 2666, 2667, 1675, 1139, 1140, 1141,
	1138, 1139, 1140, 1141, 1138, 2734, 1646, 1645, 2775, 1636,
	2777, 2740, 174, 1404, 163, 138, 1467, 174, 1402, 1471,
	3499, 2732, 2709, 1470, 2712, 1074, 1206, 968, 2739, 2649,
	3473, 2840, 2750, 2713, 968, 3414, 3402, 2755, 3397, 1922,
	1450, 2855, 1925, 3296, 3280, 1928, 609, 2743, 1930, 2735,
	2730, 2785, 3276, 2728, 3254, 2742, 2741, 2869, 1074, 1074,
	1074, 3252, 2733, 3238, 2749, 3159, 3157, 3130, 1852, 2125,
	3129, 2885, 3126, 3125, 3091, 2762, 3088, 1139, 1140, 1141,
	1138, 168, 2763, 3086, 3053, 1461, 168, 2769, 1452, 2186,
	1466, 1469, 1458, 1300, 2773, 2774, 2642, 1966, 2778, 2779,
	2776, 2910, 2863, 2913, 2567, 2913, 2913, 2519, 2518, 2517,
	1074, 2819, 2784, 2516, 1153, 1152, 1162, 1163, 1155, 1156,
	1157, 1158, 1159, 1160, 1161, 1154, 2484, 2459, 2362, 2934,
	2272, 2930, 2514, 2227, 2126, 2097, 1392, 1392, 1139, 1140,
	1141, 1138, 2078, 2861, 1575, 168, 1904, 1702, 2794, 2795,
	2821, 2825, 2932, 1690, 2796, 2797, 2798, 2799, 1518, 2800,
	2801, 2802, 2803, 2804, 2805, 2806, 2807, 2826, 1482, 2883,
	1459, 2935, 2936, 2856, 1260, 1245, 1241, 1240, 2874, 2862,
	1239, 1238, 1237, 609, 968, 1236, 1235, 1234, 2840, 2880,
	2014, 1233, 1232, 2018, 1231, 2909, 2918, 1230, 2884, 1708,
	1708, 1390, 1390, 2893, 1229, 2892, 2871, 2872, 2873, 968,
	1228, 2897, 2899, 1227, 1226, 2156, 2155, 1225, 1224, 1223,
	2914, 2915, 1222, 2916, 2783, 728, 117, 1294, 2458, 1221,
	1220, 117, 1219, 1215, 2030, 2919, 2457, 1214, 2490, 1213,
	1210, 1203, 2037, 1202, 2908, 1074, 1200, 1199, 1198, 2427,
	1139, 1140, 1141, 1138, 1139, 1140, 1141, 1138, 2989, 1197,
	1196, 2051, 1139, 1140, 1141, 1138, 2056, 2057, 2058, 1195,
	1194, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 1193,
	1893, 615, 1192, 1191, 117, 1190, 1189, 2888, 2967, 2456,
	1184, 1183, 2889, 2890, 2455, 1182, 1181, 3488, 3250, 2945,
	609, 2940, 2947, 2950, 2454, 2949, 1104, 2954, 2955, 2944,
	1060, 2891, 2961, 2962, 2965, 1139, 1140, 1141, 1138, 3486,
	1139, 1140, 1141, 1138, 2966, 3484, 2969, 2788, 2595, 2596,
	1139, 1140, 1141, 1138, 3127, 2972, 2973, 2974, 2290, 2131,
	2112, 1092, 2129, 2611, 2612, 3594, 2453, 2978, 3592, 3550,
	2984, 1153, 1152, 1162, 1163, 1155, 1156, 1157, 1158, 1159,
	1160, 1161, 1154, 2964, 2505, 2283, 1944, 2647, 1103, 2669,
	2668, 3002, 1139, 1140, 1141, 1138, 3259, 2858, 3003, 3004,
	1153, 1152, 1162, 1163, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1154, 2371, 102, 966, 3007, 3008, 3010, 3021, 2452,
	2672, 117, 54, 3013, 2670, 2673, 2403, 3057, 2674, 2671,
	2248, 2249, 2365, 2906, 2956, 2907, 117, 53, 117, 1730,
	1731, 2256, 1852, 3076, 2451, 1139, 1140, 1141, 1138, 2968,
	1153, 1152, 1162, 1163, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1154, 2448, 3005, 3006, 3094, 2745, 606, 1074, 611,
	1139, 1140, 1141, 1138, 2195, 3161, 2411, 2910, 612, 3031,
	3137, 1074, 1684, 3162, 1684, 1725, 1726, 1727, 1139, 1140,
	1141, 1138, 1074, 613, 3141, 2447, 2979, 1826, 1392, 1444,
	2360, 2395, 1684, 1684, 1491, 1476, 3033, 3048, 2591, 2103,
	3078, 2446, 968, 3036, 1708, 2592, 2593, 2594, 1074, 968,
	610, 1139, 1140, 1141, 1138, 2440, 3124, 2376, 2377, 3085,
	2430, 3087, 3160, 3143, 1429, 1906, 3074, 1139, 1140, 1141,
	1138, 1098, 3081, 3075, 2835, 2828, 2545, 191, 3117, 2520,
	2148, 1139, 1140, 1141, 1138, 2406, 1139, 1140, 1141, 1138,
	1074, 3095, 2121, 1390, 1734, 1701, 3153, 3133, 3136, 1632,
	1631, 3131, 3563, 3163, 3134, 1585, 3399, 3140, 1256, 1257,
	2937, 1139, 1140, 1141, 1138, 2580, 3145, 1254, 1255, 3149,
	3147, 1252, 1253, 3150, 2236, 3154, 1074, 1250, 1251, 3155,
	2232, 1139, 1140, 1141, 1138, 3152, 1837, 1353, 1352, 1130,
	2971, 2663, 987, 2697, 1074, 1392, 1392, 1968, 1305, 1285,
	2869, 2244, 2247, 2248, 2249, 2245, 1328, 2246, 2250, 3528,
	3506, 3233, 3504, 3233, 3450, 3167, 3177, 3427, 3426, 3178,
	3424, 2408, 3415, 3310, 2414, 3309, 3248, 1074, 3249, 1074,
	3223, 2428, 2429, 2663, 3229, 3230, 3077, 3173, 3022, 2431,
	2432, 3251, 3165, 3253, 3080, 2998, 1392, 2997, 3205, 3204,
	3203, 2982, 2437, 2181, 2151, 1493, 2981, 2707, 1738, 2748,
	1390, 3225, 3596, 3595, 609, 2114, 1074, 1074, 2028, 3228,
	1074, 1074, 1089, 3237, 3236, 3595, 3596, 3278, 1545, 1684,
	2977, 3078, 3194, 1071, 178, 3, 3298, 3221, 3247, 1320,
	62, 3293, 2, 3609, 3610, 3124, 1, 2465, 1736, 1688,
	3307, 1258, 3284, 3285, 3256, 3260, 3294, 3295, 3264, 3311,
	3312, 3225, 3257, 840, 3262, 835, 1369, 3117, 3200, 2265,
	1539, 1884, 1539, 1396, 1692, 3186, 3304, 3187, 836, 837,
	838, 839, 2239, 1071, 982, 977, 972, 976, 980, 842,
	2681, 2682, 2970, 2536, 2537, 2684, 1986, 2652, 3299, 2230,
	3336, 2101, 3303, 2854, 3305, 1295, 883, 1638, 1503, 3221,
	3221, 3283, 985, 3221, 3221, 989, 975, 1083, 1500, 2244,
	2247, 2248, 2249, 2245, 3318, 2246, 2250, 1082, 1080, 3368,
	1587, 3362, 3331, 730, 1947, 3335, 2643, 2617, 3306, 3562,
	3602, 3498, 3565, 1516, 714, 1074, 3418, 3321, 3502, 3323,
	3180, 1991, 1135, 2729, 905, 768, 741, 3391, 3357, 3385,
	1201, 1484, 1477, 2792, 2790, 991, 740, 983, 3047, 2495,
	2700, 3370, 3363, 3365, 986, 3364, 988, 3245, 3246, 906,
	1931, 3319, 1445, 1449, 3381, 3377, 2147, 1074, 3378, 3469,
	3258, 2902, 1392, 2553, 3464, 973, 3089, 3190, 117, 117,
	966, 3188, 3189, 649, 1863, 586, 950, 3297, 1943, 650,
	2130, 3519, 3398, 3401, 863, 2111, 864, 856, 984, 2512,
	2511, 1556, 1144, 3407, 1573, 2808, 2809, 3409, 1179, 687,
	2015, 2492, 3112, 2693, 3439, 61, 60, 59, 1539, 58,
	1913, 199, 3433, 732, 198, 3216, 3495, 1074, 3567, 712,
	711, 3416, 710, 3423, 3421, 709, 708, 1390, 974, 707,
	3451, 2243, 2241, 2240, 1847, 1846, 1911, 2867, 2583, 2578,
	1170, 1778, 1776, 2571, 2176, 2183, 1775, 3547, 3479, 3446,
	3221, 3480, 3442, 3275, 3445, 2627, 1724, 2172, 3468, 1795,
	3453, 2598, 1792, 1074, 1791, 2590, 2714, 3271, 2716, 3265,
	3462, 1392, 1823, 3366, 3493, 3496, 3483, 3485, 3487, 3489,
	3467, 3232, 3096, 3097, 3103, 2120, 1684, 1014, 3476, 1010,
	1012, 1684, 1013, 1011, 2416, 2153, 2830, 2093, 1966, 3482,
	2092, 2090, 2089, 3497, 1269, 981, 3492, 3503, 3438, 3501,
	3221, 3515, 3505, 1392, 3507, 3508, 3368, 3199, 2288, 3054,
	3055, 3056, 2286, 2963, 2959, 3060, 3061, 1955, 1964, 2744,
	1848, 1844, 3538, 2764, 2113, 3344, 1390, 3529, 3546, 3527,
	3531, 978, 1729, 857, 979, 2109, 99, 152, 3530, 48,
	3532, 3533, 89, 88, 98, 150, 3221, 2786, 47, 183,
	3569, 182, 185, 184, 3568, 181, 2339, 3555, 2340, 3556,
	180, 3557, 1433, 3558, 179, 3559, 3509, 3235, 1390, 830,
	1249, 38, 37, 33, 12, 11, 34, 21, 22, 1074,
	20, 3433, 1507, 3575, 3573, 19, 880, 25, 881, 31,
	30, 110, 109, 29, 108, 107, 106, 3391, 3584, 105,
	104, 28, 18, 42, 41, 40, 3586, 3587, 3585, 3590,
	3593, 9, 3601, 97, 3591, 3604, 95, 27, 3597, 3598,
	3599, 3600, 96, 93, 861, 94, 92, 90, 73, 72,
	71, 86, 3614, 85, 1074, 84, 83, 875, 82, 871,
	81, 79, 80, 904, 70, 3468, 3616, 69, 3615, 3618,
	68, 67, 66, 91, 3624, 77, 87, 3569, 3628, 78,
	76, 3568, 3627, 75, 74, 65, 64, 63, 136, 135,
	3632, 134, 3582, 133, 132, 130, 131, 3604, 3636, 129,
	128, 2917, 127, 126, 174, 51, 163, 138, 125, 124,
	3640, 2013, 43, 44, 45, 46, 146, 145, 1616, 147,
	1401, 149, 164, 151, 615, 148, 153, 143, 141, 156,
	144, 142, 140, 165, 56, 1153, 1152, 1162, 1163, 1155,
	1156, 1157, 1158, 1159, 1160, 1161, 1154, 1539, 100, 17,
	24, 4, 115, 0, 0, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 168, 1153, 1152, 1162, 1163, 1155, 1156,
	1157, 1158, 1159, 1160, 1161, 1154, 877, 0, 870, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 873, 0,
	0, 0, 0, 0, 3300, 0, 0, 0, 3301, 0,
	0, 0, 0, 0, 855, 0, 0, 0, 862, 117,
	0, 0, 0, 117, 0, 0, 0, 0, 0, 0,
	1032, 0, 0, 0, 0, 117, 0, 0, 869, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 0, 120,
	121, 0, 122, 123, 0, 0, 0, 879, 0, 0,
	0, 0, 868, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 854, 0, 0, 0, 860, 0, 0, 0,
	1612, 0, 0, 1824, 0, 0, 1609, 0, 1785, 0,
	1611, 1608, 1610, 1614, 1615, 0, 0, 858, 1613, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3014, 0, 1826, 1794,
	137, 162, 172, 3016, 101, 0, 0, 0, 1827, 1828,
	0, 0, 0, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 161, 155, 154, 0, 0, 0, 0, 57,
	1018, 0, 3029, 0, 1793, 0, 0, 0, 0, 0,
	859, 0, 0, 0, 0, 0, 0, 0, 3410, 1801,
	1040, 1044, 1046, 1048, 1050, 1051, 1053, 0, 1058, 1054,
	1055, 1056, 1057, 0, 1035, 1036, 1037, 1038, 1016, 1017,
	1041, 0, 1019, 0, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1031, 1033, 1029, 1030, 1039, 0, 0,
	157, 158, 159, 0, 0, 1043, 1045, 1047, 1049, 1052,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3452,
	0, 0, 0, 0, 3456, 3457, 1817, 876, 0, 0,
	166, 0, 1619, 1620, 1621, 1622, 1623, 1624, 1617, 1618,
	0, 0, 0, 1034, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 160, 3477, 112, 0, 0, 0,
	0, 0, 1616, 0, 0, 0, 865, 0, 0, 0,
	0, 1684, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1684, 0, 0, 3156, 0, 0, 3158, 0,
	0, 0, 0, 0, 0, 0, 0, 1784, 1786, 1783,
	0, 1780, 0, 0, 0, 3164, 1805, 0, 0, 0,
	1851, 0, 0, 113, 0, 0, 0, 1811, 0, 0,
	0, 0, 0, 0, 0, 1796, 50, 1779, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1799, 1833, 0,
	0, 1800, 1802, 1804, 0, 1806, 1807, 1808, 1812, 1813,
	1814, 1816, 1819, 1820, 1821, 0, 0, 0, 0, 0,
	0, 0, 1809, 1818, 1810, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1788, 52, 3577, 3578, 0, 0,
	2412, 2413, 117, 0, 0, 117, 117, 0, 117, 0,
	0, 0, 0, 0, 0, 0, 1825, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 170, 0, 171, 0, 1824, 0, 0, 139, 0,
	1785, 1781, 1782, 0, 1612, 0, 966, 0, 0, 0,
	1609, 0, 0, 966, 1611, 1608, 1610, 1614, 1615, 1822,
	0, 0, 1613, 0, 117, 0, 0, 0, 0, 0,
	1826, 1794, 0, 0, 0, 0, 1798, 0, 0, 0,
	1827, 1828, 0, 1797, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1824, 114, 39, 0, 0, 0, 1793, 1815, 49, 0,
	0, 0, 0, 0, 0, 0, 1803, 0, 118, 119,
	0, 1801, 0, 0, 0, 0, 0, 0, 0, 1830,
	1829, 0, 0, 0, 0, 1826, 0, 0, 0, 0,
	0, 1170, 0, 0, 1042, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3358, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3390, 0, 0, 0,
	0, 0, 1790, 0, 0, 0, 1801, 0, 1817, 0,
	0, 0, 0, 0, 0, 1597, 1598, 1599, 1600, 1601,
	1602, 1603, 1604, 1605, 1606, 1607, 1619, 1620, 1621, 1622,
	1623, 1624, 1617, 1618, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1832, 0, 0, 1831, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1139, 1140,
	1141, 1138, 0, 1817, 0, 0, 0, 0, 0, 1784,
	2548, 1783, 0, 2547, 0, 0, 0, 0, 1805, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1811,
	0, 0, 0, 0, 1188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1799,
	1833, 0, 0, 1800, 1802, 1804, 0, 1806, 1807, 1808,
	1812, 1813, 1814, 1816, 1819, 1820, 1821, 0, 0, 0,
	0, 0, 0, 0, 1809, 1818, 1810, 1616, 0, 0,
	0, 0, 0, 1805, 0, 0, 1788, 0, 0, 0,
	0, 3475, 0, 0, 1811, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1825, 0,
	0, 0, 0, 0, 1799, 1833, 0, 0, 1800, 1802,
	1804, 0, 1806, 1807, 1808, 1812, 1813, 1814, 1816, 1819,
	1820, 1821, 0, 1781, 1782, 0, 1032, 0, 0, 1809,
	1818, 1810, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1822, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2259, 0, 3543, 1798, 0,
	0, 0, 0, 1825, 0, 1797, 0, 0, 0, 1824,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1032, 1815,
	0, 0, 0, 0, 0, 0, 0, 0, 1803, 0,
	0, 0, 0, 0, 1826, 0, 1822, 0, 0, 0,
	0, 1830, 1829, 0, 0, 0, 0, 0, 1851, 0,
	0, 0, 0, 1798, 3543, 0, 0, 117, 0, 1612,
	1797, 0, 0, 0, 0, 1609, 0, 0, 0, 1611,
	1608, 1610, 1614, 1615, 0, 0, 1018, 1613, 0, 0,
	1008, 0, 0, 0, 1815, 1801, 0, 0, 0, 0,
	0, 0, 0, 1803, 1790, 0, 1040, 1044, 1046, 1048,
	1050, 1051, 1053, 3543, 1058, 1054, 1055, 1056, 1057, 0,
	1035, 1036, 1037, 1038, 1016, 1017, 1041, 0, 1019, 0,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1031,
	1033, 1029, 1030, 1039, 0, 0, 1832, 0, 1018, 1831,
	3638, 1043, 1045, 1047, 1049, 1052, 0, 0, 3361, 0,
	0, 0, 1817, 0, 0, 0, 0, 0, 1040, 1044,
	1046, 1048, 1050, 1051, 1053, 1824, 1058, 1054, 1055, 1056,
	1057, 0, 1035, 1036, 1037, 1038, 1016, 1017, 1041, 1034,
	1019, 0, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1031, 1033, 1029, 1030, 1039, 0, 0, 0, 0,
	1826, 0, 0, 1043, 1045, 1047, 1049, 1052, 0, 0,
	1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606,
	1607, 1619, 1620, 1621, 1622, 1623, 1624, 1617, 1618, 0,
	0, 0, 1805, 0, 0, 0, 0, 0, 0, 0,
	0, 1034, 0, 1811, 0, 0, 0, 0, 0, 0,
	0, 1801, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 117, 1799, 1833, 0, 0, 1800, 1802, 1804,
	0, 1806, 1807, 1808, 1812, 1813, 1814, 1816, 1819, 1820,
	1821, 0, 0, 0, 0, 0, 0, 0, 1809, 1818,
	1810, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	660, 659, 666, 656, 0, 0, 0, 0, 0, 0,
	0, 0, 663, 664, 0, 665, 669, 0, 1817, 651,
	0, 0, 1825, 0, 660, 659, 666, 656, 0, 674,
	0, 0, 0, 0, 0, 0, 663, 664, 0, 665,
	669, 0, 0, 651, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 674, 660, 659, 666, 656, 0, 0,
	0, 0, 0, 0, 0, 1822, 663, 664, 0, 665,
	669, 0, 678, 651, 0, 680, 1851, 1851, 1851, 1851,
	679, 0, 1798, 674, 0, 0, 0, 0, 1851, 1797,
	0, 0, 0, 0, 0, 0, 678, 0, 1805, 680,
	0, 0, 0, 0, 679, 0, 0, 0, 0, 1811,
	0, 0, 0, 1815, 0, 0, 0, 0, 0, 0,
	0, 0, 1803, 0, 0, 0, 0, 0, 0, 1799,
	1833, 0, 0, 1800, 1802, 1804, 0, 1806, 1807, 1808,
	1812, 1813, 1814, 1816, 1819, 1820, 1821, 0, 0, 0,
	0, 0, 0, 0, 1809, 1818, 1810, 0, 0, 0,
	1042, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 0, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 1825, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 652, 654, 653, 0,
	0, 0, 1042, 0, 0, 0, 658, 0, 0, 0,
	0, 1822, 0, 0, 0, 0, 0, 0, 662, 0,
	652, 654, 653, 0, 0, 677, 0, 0, 1798, 0,
	658, 0, 655, 0, 0, 1797, 646, 0, 0, 0,
	0, 0, 662, 0, 0, 0, 0, 0, 0, 677,
	652, 654, 653, 0, 0, 0, 655, 0, 0, 1815,
	658, 0, 0, 0, 0, 0, 0, 0, 1803, 0,
	0, 0, 662, 0, 0, 0, 0, 0, 0, 677,
	0, 0, 0, 0, 0, 0, 655, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 0,
	657, 661, 667, 1851, 668, 670, 0, 0, 671, 672,
	673, 0, 0, 675, 676, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 657, 661, 667, 0, 668, 670,
	0, 0, 671, 672, 673, 0, 0, 675, 676, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 657, 661, 667, 0, 668, 670,
	0, 0, 671, 672, 673, 0, 0, 675, 676, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 748, 0, 0,
	0, 0, 0, 0, 0, 0, 358, 0, 480, 513,
	502, 585, 469, 0, 0, 0, 0, 0, 0, 701,
	0, 0, 0, 298, 0, 0, 328, 517, 499, 509,
	500, 485, 486, 487, 494, 308, 488, 489, 490, 463,
	491, 464, 492, 493, 739, 516, 468, 389, 342, 534,
	533, 0, 0, 801, 809, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 694, 0, 0, 729, 778,
	777, 716, 726, 0, 117, 271, 197, 465, 581, 466,
	717, 117, 718, 722, 725, 721, 719, 720, 0, 793,
	0, 0, 0, 0, 0, 0, 686, 698, 0, 702,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 695, 696, 0, 0, 1851, 0, 749,
	0, 697, 0, 0, 744, 723, 727, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 724, 747, 751,
	292, 815, 745, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 816, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 575, 742,
	0, 578, 0, 421, 0, 0, 799, 0, 0, 0,
	393, 0, 117, 325, 0, 0, 0, 746, 0, 379,
	360, 812, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 521,
	0, 440, 599, 600, 601, 449, 454, 455, 456, 458,
	459, 460, 461, 522, 539, 506, 477, 442, 530, 474,
	478, 542, 1640, 1639, 1641, 433, 326, 327, 0, 305,
	253, 254, 595, 797, 356, 544, 577, 470, 0, 811,
	792, 794, 795, 798, 802, 803, 804, 805, 806, 808,
	810, 814, 594, 0, 523, 538, 597, 537, 591, 362,
	0, 383, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 472, 0, 390, 414, 426, 443, 446, 473,
	557, 558, 559, 258, 445, 561, 562, 563, 564, 565,
	566, 567, 560, 813, 504, 481, 507, 425, 484, 483,
	0, 0, 518, 750, 519, 520, 346, 347, 348, 349,
	800, 545, 276, 444, 372, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 512, 451, 571,
	574, 572, 573, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 498, 525, 822,
	796, 821, 823, 824, 820, 825, 826, 807, 706, 0,
	754, 818, 817, 819, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 400, 285, 250, 281,
	282, 289, 592, 589, 404, 593, 0, 255, 476, 329,
	0, 370, 303, 540, 541, 785, 761, 762, 763, 703,
	764, 758, 759, 704, 760, 786, 752, 782, 783, 731,
	755, 765, 781, 766, 784, 787, 788, 827, 828, 772,
	756, 222, 829, 769, 789, 780, 779, 767, 753, 790,
	791, 738, 733, 770, 771, 757, 773, 774, 775, 705,
	734, 735, 736, 737, 0, 0, 0, 429, 430, 431,
	453, 415, 475, 590, 0, 0, 0, 0, 0, 0,
	0, 524, 536, 570, 0, 579, 580, 582, 584, 776,
	748, 596, 467, 576, 0, 0, 0, 0, 0, 358,
	0, 480, 513, 502, 585, 469, 0, 0, 0, 0,
	0, 0, 701, 0, 0, 0, 298, 1685, 0, 328,
	517, 499, 509, 500, 485, 486, 487, 494, 308, 488,
	489, 490, 463, 491, 464, 492, 493, 739, 516, 468,
	389, 342, 534, 533, 0, 0, 801, 809, 0, 0,
	0, 0, 0, 0, 0, 1875, 0, 0, 694, 0,
	0, 729, 778, 777, 716, 726, 0, 0, 271, 197,
	465, 581, 466, 717, 0, 718, 722, 725, 721, 719,
	720, 0, 793, 0, 0, 0, 0, 0, 0, 686,
	698, 0, 702, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 695, 696, 0, 0,
	0, 0, 749, 0, 697, 0, 0, 1876, 723, 727,
	0, 0, 0, 0, 261, 394, 411, 272, 385, 424,
	277, 392, 267, 357, 381, 0, 0, 263, 409, 391,
	339, 318, 319, 262, 0, 376, 296, 310, 293, 355,
	724, 747, 751, 292, 815, 745, 419, 265, 0, 418,
	354, 405, 410, 340, 334, 264, 407, 338, 333, 322,
	300, 816, 323, 324, 314, 366, 332, 367, 315, 344,
	343, 345, 0, 0, 0, 0, 0, 447, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 575, 742, 0, 578, 0, 421, 0, 0, 799,
	0, 0, 0, 393, 0, 0, 325, 0, 0, 0,
	746, 0, 379, 360, 812, 0, 0, 377, 330, 406,
	368, 412, 395, 420, 373, 369, 256, 396, 295, 341,
	268, 270, 290, 297, 299, 301, 302, 350, 351, 363,
	384, 397, 398, 399, 294, 278, 378, 279, 312, 280,
	257, 286, 284, 287, 386, 288, 259, 364, 403, 0,
	307, 374, 337, 260, 336, 365, 402, 401, 269, 428,
	434, 435, 521, 0, 440, 599, 600, 601, 449, 454,
	455, 456, 458, 459, 460, 461, 522, 539, 506, 477,
	442, 530, 474, 478, 542, 0, 0, 0, 433, 326,
	327, 0, 305, 253, 254, 595, 797, 356, 544, 577,
	470, 0, 811, 792, 794, 795, 798, 802, 803, 804,
	805, 806, 808, 810, 814, 594, 0, 523, 538, 597,
	537, 591, 362, 0, 383, 535, 482, 0, 527, 501,
	0, 528, 497, 532, 0, 472, 0, 390, 414, 426,
	443, 446, 473, 557, 558, 559, 258, 445, 561, 562,
	563, 564, 565, 566, 567, 560, 813, 504, 481, 507,
	425, 484, 483, 0, 0, 518, 750, 519, 520, 346,
	347, 348, 349, 800, 545, 276, 444, 372, 0, 505,
	0, 0, 0, 0, 0, 0, 0, 0, 510, 511,
	508, 602, 0, 568, 569, 0, 0, 438, 439, 304,
	311, 457, 313, 275, 361, 306, 423, 320, 0, 450,
	512, 451, 571, 574, 572, 573, 353, 316, 317, 387,
	321, 331, 375, 422, 359, 380, 273, 413, 388, 335,
	498, 525, 822, 796, 821, 823, 824, 820, 825, 826,
	807, 706, 0, 754, 818, 817, 819, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 553, 552,
	551, 550, 549, 548, 547, 546, 0, 0, 495, 400,
	285, 250, 281, 282, 289, 592, 589, 404, 593, 0,
	255, 476, 329, 0, 370, 303, 540, 541, 785, 761,
	762, 763, 703, 764, 758, 759, 704, 760, 786, 752,
	782, 783, 731, 755, 765, 781, 766, 784, 787, 788,
	827, 828, 772, 756, 222, 829, 769, 789, 780, 779,
	767, 753, 790, 791, 738, 733, 770, 771, 757, 773,
	774, 775, 705, 734, 735, 736, 737, 0, 0, 0,
	429, 430, 431, 453, 415, 475, 590, 0, 0, 0,
	0, 0, 0, 0, 524, 536, 570, 0, 579, 580,
	582, 584, 776, 0, 596, 467, 576, 174, 748, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 480,
	513, 502, 585, 469, 0, 0, 0, 0, 0, 0,
	701, 0, 0, 0, 298, 0, 0, 328, 517, 499,
	509, 500, 485, 486, 487, 494, 308, 488, 489, 490,
	463, 491, 464, 492, 493, 1173, 516, 468, 389, 342,
	534, 533, 0, 0, 801, 809, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 694, 0, 0, 729,
	778, 777, 716, 726, 0, 0, 271, 197, 465, 581,
	466, 717, 0, 718, 722, 725, 721, 719, 720, 0,
	793, 0, 0, 0, 0, 0, 0, 686, 698, 0,
	702, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 695, 696, 0, 0, 0, 0,
	749, 0, 697, 0, 0, 744, 723, 727, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 724, 747,
	751, 292, 815, 745, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 816,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 575,
	742, 0, 578, 0, 421, 0, 0, 799, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 746, 0,
	379, 360, 812, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	521, 0, 440, 599, 600, 601, 449, 454, 455, 456,
	458, 459, 460, 461, 522, 539, 506, 477, 442, 530,
	474, 478, 542, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 595, 797, 356, 544, 577, 470, 0,
	811, 792, 794, 795, 798, 802, 803, 804, 805, 806,
	808, 810, 814, 594, 0, 523, 538, 597, 537, 591,
	362, 0, 383, 535, 482, 0, 527, 501, 0, 528,
	497, 532, 0, 472, 0, 390, 414, 426, 443, 446,
	473, 557, 558, 559, 258, 445, 561, 562, 563, 564,
	565, 566, 567, 560, 813, 504, 481, 507, 425, 484,
	483, 0, 0, 518, 750, 519, 520, 346, 347, 348,
	349, 800, 545, 276, 444, 372, 0, 505, 0, 0,
	0, 0, 0, 0, 0, 0, 510, 511, 508, 602,
	0, 568, 569, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 512, 451,
	571, 574, 572, 573, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 498, 525,
	822, 796, 821, 823, 824, 820, 825, 826, 807, 706,
	0, 754, 818, 817, 819, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 553, 552, 551, 550,
	549, 548, 547, 546, 0, 0, 495, 400, 285, 250,
	281, 282, 289, 592, 589, 404, 593, 0, 255, 476,
	329, 139, 370, 303, 540, 541, 785, 761, 762, 763,
	703, 764, 758, 759, 704, 760, 786, 752, 782, 783,
	731, 755, 765, 781, 766, 784, 787, 788, 827, 828,
	772, 756, 222, 829, 769, 789, 780, 779, 767, 753,
	790, 791, 738, 733, 770, 771, 757, 773, 774, 775,
	705, 734, 735, 736, 737, 0, 0, 0, 429, 430,
	431, 453, 415, 475, 590, 0, 0, 0, 0, 0,
	0, 0, 524, 536, 570, 0, 579, 580, 582, 584,
	776, 748, 596, 467, 576, 0, 0, 0, 0, 0,
	358, 0, 480, 513, 502, 585, 469, 0, 0, 0,
	0, 0, 0, 701, 0, 0, 0, 298, 3637, 0,
	328, 517, 499, 509, 500, 485, 486, 487, 494, 308,
	488, 489, 490, 463, 491, 464, 492, 493, 739, 516,
	468, 389, 342, 534, 533, 0, 0, 801, 809, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 694,
	0, 0, 729, 778, 777, 716, 726, 0, 0, 271,
	197, 465, 581, 466, 717, 0, 718, 722, 725, 721,
	719, 720, 0, 793, 0, 0, 0, 0, 0, 0,
	686, 698, 0, 702, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 695, 696, 0,
	0, 0, 0, 749, 0, 697, 0, 0, 744, 723,
	727, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 724, 747, 751, 292, 815, 745, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 816, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 742, 0, 578, 0, 421, 0, 0,
	799, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 746, 0, 379, 360, 812, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 521, 0, 440, 599, 600, 601, 449,
	454, 455, 456, 458, 459, 460, 461, 522, 539, 506,
	477, 442, 530, 474, 478, 542, 0, 0, 0, 433,
	326, 327, 0, 305, 253, 254, 595, 797, 356, 544,
	577, 470, 0, 811, 792, 794, 795, 798, 802, 803,
	804, 805, 806, 808, 810, 814, 594, 0, 523, 538,
	597, 537, 591, 362, 0, 383, 535, 482, 0, 527,
	501, 0, 528, 497, 532, 0, 472, 0, 390, 414,
	426, 443, 446, 473, 557, 558, 559, 258, 445, 561,
	562, 563, 564, 565, 566, 567, 560, 813, 504, 481,
	507, 425, 484, 483, 0, 0, 518, 750, 519, 520,
	346, 347, 348, 349, 800, 545, 276, 444, 372, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	511, 508, 602, 0, 568, 569, 0, 0, 438, 439,
	304, 311, 457, 313, 275, 361, 306, 423, 320, 0,
	450, 512, 451, 571, 574, 572, 573, 353, 316, 317,
	387, 321, 331, 375, 422, 359, 380, 273, 413, 388,
	335, 498, 525, 822, 796, 821, 823, 824, 820, 825,
	826, 807, 706, 0, 754, 818, 817, 819, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	552, 551, 550, 549, 548, 547, 546, 0, 0, 495,
	400, 285, 250, 281, 282, 289, 592, 589, 404, 593,
	0, 255, 476, 329, 0, 370, 303, 540, 541, 785,
	761, 762, 763, 703, 764, 758, 759, 704, 760, 786,
	752, 782, 783, 731, 755, 765, 781, 766, 784, 787,
	788, 827, 828, 772, 756, 222, 829, 769, 789, 780,
	779, 767, 753, 790, 791, 738, 733, 770, 771, 757,
	773, 774, 775, 705, 734, 735, 736, 737, 0, 0,
	0, 429, 430, 431, 453, 415, 475, 590, 0, 0,
	0, 0, 0, 0, 0, 524, 536, 570, 0, 579,
	580, 582, 584, 776, 748, 596, 467, 576, 0, 0,
	0, 0, 0, 358, 0, 480, 513, 502, 585, 469,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 0,
	298, 0, 0, 328, 517, 499, 509, 500, 485, 486,
	487, 494, 308, 488, 489, 490, 463, 491, 464, 492,
	493, 739, 516, 468, 389, 342, 534, 533, 0, 0,
	801, 809, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 694, 0, 0, 729, 778, 777, 716, 726,
	0, 0, 271, 197, 465, 581, 466, 717, 0, 718,
	722, 725, 721, 719, 720, 0, 793, 0, 0, 0,
	0, 0, 0, 686, 698, 0, 702, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	695, 696, 0, 0, 0, 0, 749, 0, 697, 0,
	0, 744, 723, 727, 0, 0, 0, 0, 261, 394,
	411, 272, 385, 424, 277, 392, 267, 357, 381, 0,
	0, 263, 409, 391, 339, 318, 319, 262, 0, 376,
	296, 310, 293, 355, 724, 747, 751, 292, 815, 745,
	419, 265, 0, 418, 354, 405, 410, 340, 334, 264,
	407, 338, 333, 322, 300, 816, 323, 324, 314, 366,
	332, 367, 315, 344, 343, 345, 0, 0, 0, 0,
	0, 447, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 575, 742, 0, 578, 0,
	421, 0, 0, 799, 0, 0, 0, 393, 0, 0,
	325, 0, 0, 0, 746, 0, 379, 360, 812, 3544,
	0, 377, 330, 406, 368, 412, 395, 420, 373, 369,
	256, 396, 295, 341, 268, 270, 290, 297, 299, 301,
	302, 350, 351, 363, 384, 397, 398, 399, 294, 278,
	378, 279, 312, 280, 257, 286, 284, 287, 386, 288,
	259, 364, 403, 0, 307, 374, 337, 260, 336, 365,
	402, 401, 269, 428, 434, 435, 521, 0, 440, 599,
	600, 601, 449, 454, 455, 456, 458, 459, 460, 461,
	522, 539, 506, 477, 442, 530, 474, 478, 542, 0,
	0, 0, 433, 326, 327, 0, 305, 253, 254, 595,
	797, 356, 544, 577, 470, 0, 811, 792, 794, 795,
	798, 802, 803, 804, 805, 806, 808, 810, 814, 594,
	0, 523, 538, 597, 537, 591, 362, 0, 383, 535,
	482, 0, 527, 501, 0, 528, 497, 532, 0, 472,
	0, 390, 414, 426, 443, 446, 473, 557, 558, 559,
	258, 445, 561, 562, 563, 564, 565, 566, 567, 560,
	813, 504, 481, 507, 425, 484, 483, 0, 0, 518,
	750, 519, 520, 346, 347, 348, 349, 800, 545, 276,
	444, 372, 0, 505, 0, 0, 0, 0, 0, 0,
	0, 0, 510, 511, 508, 602, 0, 568, 569, 0,
	0, 438, 439, 304, 311, 457, 313, 275, 361, 306,
	423, 320, 0, 450, 512, 451, 571, 574, 572, 573,
	353, 316, 317, 387, 321, 331, 375, 422, 359, 380,
	273, 413, 388, 335, 498, 525, 822, 796, 821, 823,
	824, 820, 825, 826, 807, 706, 0, 754, 818, 817,
	819, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 553, 552, 551, 550, 549, 548, 547, 546,
	0, 0, 495, 400, 285, 250, 281, 282, 289, 592,
	589, 404, 593, 0, 255, 476, 329, 0, 370, 303,
	540, 541, 785, 761, 762, 763, 703, 764, 758, 759,
	704, 760, 786, 752, 782, 783, 731, 755, 765, 781,
	766, 784, 787, 788, 827, 828, 772, 756, 222, 829,
	769, 789, 780, 779, 767, 753, 790, 791, 738, 733,
	770, 771, 757, 773, 774, 775, 705, 734, 735, 736,
	737, 0, 0, 0, 429, 430, 431, 453, 415, 475,
	590, 0, 0, 0, 0, 0, 0, 0, 524, 536,
	570, 0, 579, 580, 582, 584, 776, 748, 596, 467,
	576, 0, 0, 0, 0, 0, 358, 0, 480, 513,
	502, 585, 469, 0, 0, 0, 0, 0, 0, 701,
	0, 0, 0, 298, 1685, 0, 328, 517, 499, 509,
	500, 485, 486, 487, 494, 308, 488, 489, 490, 463,
	491, 464, 492, 493, 739, 516, 468, 389, 342, 534,
	533, 0, 0, 801, 809, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 694, 0, 0, 729, 778,
	777, 716, 726, 0, 0, 271, 197, 465, 581, 466,
	717, 0, 718, 722, 725, 721, 719, 720, 0, 793,
	0, 0, 0, 0, 0, 0, 686, 698, 0, 702,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 695, 696, 0, 0, 0, 0, 749,
	0, 697, 0, 0, 744, 723, 727, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 724, 747, 751,
	292, 815, 745, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 816, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 575, 742,
	0, 578, 0, 421, 0, 0, 799, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 746, 0, 379,
	360, 812, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 521,
	0, 440, 599, 600, 601, 449, 454, 455, 456, 458,
	459, 460, 461, 522, 539, 506, 477, 442, 530, 474,
	478, 542, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 595, 797, 356, 544, 577, 470, 0, 811,
	792, 794, 795, 798, 802, 803, 804, 805, 806, 808,
	810, 814, 594, 0, 523, 538, 597, 537, 591, 362,
	0, 383, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 472, 0, 390, 414, 426, 443, 446, 473,
	557, 558, 559, 258, 445, 561, 562, 563, 564, 565,
	566, 567, 560, 813, 504, 481, 507, 425, 484, 483,
	0, 0, 518, 750, 519, 520, 346, 347, 348, 349,
	800, 545, 276, 444, 372, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 512, 451, 571,
	574, 572, 573, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 498, 525, 822,
	796, 821, 823, 824, 820, 825, 826, 807, 706, 0,
	754, 818, 817, 819, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 400, 285, 250, 281,
	282, 289, 592, 589, 404, 593, 0, 255, 476, 329,
	0, 370, 303, 540, 541, 785, 761, 762, 763, 703,
	764, 758, 759, 704, 760, 786, 752, 782, 783, 731,
	755, 765, 781, 766, 784, 787, 788, 827, 828, 772,
	756, 222, 829, 769, 789, 780, 779, 767, 753, 790,
	791, 738, 733, 770, 771, 757, 773, 774, 775, 705,
	734, 735, 736, 737, 0, 0, 0, 429, 430, 431,
	453, 415, 475, 590, 0, 0, 0, 0, 0, 0,
	0, 524, 536, 570, 0, 579, 580, 582, 584, 776,
	748, 596, 467, 576, 0, 0, 0, 0, 0, 358,
	0, 480, 513, 502, 585, 469, 0, 0, 0, 0,
	0, 0, 701, 0, 0, 0, 298, 0, 0, 328,
	517, 499, 509, 500, 485, 486, 487, 494, 308, 488,
	489, 490, 463, 491, 464, 492, 493, 739, 516, 468,
	389, 342, 534, 533, 0, 0, 801, 809, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 694, 0,
	0, 729, 778, 777, 716, 726, 0, 0, 271, 197,
	465, 581, 466, 717, 0, 718, 722, 725, 721, 719,
	720, 0, 793, 0, 0, 0, 0, 0, 0, 686,
	698, 0, 702, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 695, 696, 1428, 0,
	0, 0, 749, 0, 697, 0, 0, 744, 723, 727,
	0, 0, 0, 0, 261, 394, 411, 272, 385, 424,
	277, 392, 267, 357, 381, 0, 0, 263, 409, 391,
	339, 318, 319, 262, 0, 376, 296, 310, 293, 355,
	724, 747, 751, 292, 815, 745, 419, 265, 0, 418,
	354, 405, 410, 340, 334, 264, 407, 338, 333, 322,
	300, 816, 323, 324, 314, 366, 332, 367, 315, 344,
	343, 345, 0, 0, 0, 0, 0, 447, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 575, 742, 0, 578, 0, 421, 0, 0, 799,
	0, 0, 0, 393, 0, 0, 325, 0, 0, 0,
	746, 0, 379, 360, 812, 0, 0, 377, 330, 406,
	368, 412, 395, 420, 373, 369, 256, 396, 295, 341,
	268, 270, 290, 297, 299, 301, 302, 350, 351, 363,
	384, 397, 398, 399, 294, 278, 378, 279, 312, 280,
	257, 286, 284, 287, 386, 288, 259, 364, 403, 0,
	307, 374, 337, 260, 336, 365, 402, 401, 269, 428,
	434, 435, 521, 0, 440, 599, 600, 601, 449, 454,
	455, 456, 458, 459, 460, 461, 522, 539, 506, 477,
	442, 530, 474, 478, 542, 0, 0, 0, 433, 326,
	327, 0, 305, 253, 254, 595, 797, 356, 544, 577,
	470, 0, 811, 792, 794, 795, 798, 802, 803, 804,
	805, 806, 808, 810, 814, 594, 0, 523, 538, 597,
	537, 591, 362, 0, 383, 535, 482, 0, 527, 501,
	0, 528, 497, 532, 0, 472, 0, 390, 414, 426,
	443, 446, 473, 557, 558, 559, 258, 445, 561, 562,
	563, 564, 565, 566, 567, 560, 813, 504, 481, 507,
	425, 484, 483, 0, 0, 518, 750, 519, 520, 346,
	347, 348, 349, 800, 545, 276, 444, 372, 0, 505,
	0, 0, 0, 0, 0, 0, 0, 0, 510, 511,
	508, 602, 0, 568, 569, 0, 0, 438, 439, 304,
	311, 457, 313, 275, 361, 306, 423, 320, 0, 450,
	512, 451, 571, 574, 572, 573, 353, 316, 317, 387,
	321, 331, 375, 422, 359, 380, 273, 413, 388, 335,
	498, 525, 822, 796, 821, 823, 824, 820, 825, 826,
	807, 706, 0, 754, 818, 817, 819, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 553, 552,
	551, 550, 549, 548, 547, 546, 0, 0, 495, 400,
	285, 250, 281, 282, 289, 592, 589, 404, 593, 0,
	255, 476, 329, 0, 370, 303, 540, 541, 785, 761,
	762, 763, 703, 764, 758, 759, 704, 760, 786, 752,
	782, 783, 731, 755, 765, 781, 766, 784, 787, 788,
	827, 828, 772, 756, 222, 829, 769, 789, 780, 779,
	767, 753, 790, 791, 738, 733, 770, 771, 757, 773,
	774, 775, 705, 734, 735, 736, 737, 0, 0, 0,
	429, 430, 431, 453, 415, 475, 590, 0, 0, 0,
	0, 0, 0, 0, 524, 536, 570, 0, 579, 580,
	582, 584, 776, 0, 596, 467, 576, 748, 0, 0,
	2036, 0, 0, 0, 0, 0, 358, 0, 480, 513,
	502, 585, 469, 0, 0, 0, 0, 0, 0, 701,
	0, 0, 0, 298, 0, 0, 328, 517, 499, 509,
	500, 485, 486, 487, 494, 308, 488, 489, 490, 463,
	491, 464, 492, 493, 739, 516, 468, 389, 342, 534,
	533, 0, 0, 801, 809, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 694, 0, 0, 729, 778,
	777, 716, 726, 0, 0, 271, 197, 465, 581, 466,
	717, 0, 718, 722, 725, 721, 719, 720, 0, 793,
	0, 0, 0, 0, 0, 0, 686, 698, 0, 702,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 695, 696, 0, 0, 0, 0, 749,
	0, 697, 0, 0, 744, 723, 727, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 724, 747, 751,
	292, 815, 745, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 816, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 575, 742,
	0, 578, 0, 421, 0, 0, 799, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 746, 0, 379,
	360, 812, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 521,
	0, 440, 599, 600, 601, 449, 454, 455, 456, 458,
	459, 460, 461, 522, 539, 506, 477, 442, 530, 474,
	478, 542, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 595, 797, 356, 544, 577, 470, 0, 811,
	792, 794, 795, 798, 802, 803, 804, 805, 806, 808,
	810, 814, 594, 0, 523, 538, 597, 537, 591, 362,
	0, 383, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 472, 0, 390, 414, 426, 443, 446, 473,
	557, 558, 559, 258, 445, 561, 562, 563, 564, 565,
	566, 567, 560, 813, 504, 481, 507, 425, 484, 483,
	0, 0, 518, 750, 519, 520, 346, 347, 348, 349,
	800, 545, 276, 444, 372, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 512, 451, 571,
	574, 572, 573, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 498, 525, 822,
	796, 821, 823, 824, 820, 825, 826, 807, 706, 0,
	754, 818, 817, 819, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 400, 285, 250, 281,
	282, 289, 592, 589, 404, 593, 0, 255, 476, 329,
	0, 370, 303, 540, 541, 785, 761, 762, 763, 703,
	764, 758, 759, 704, 760, 786, 752, 782, 783, 731,
	755, 765, 781, 766, 784, 787, 788, 827, 828, 772,
	756, 222, 829, 769, 789, 780, 779, 767, 753, 790,
	791, 738, 733, 770, 771, 757, 773, 774, 775, 705,
	734, 735, 736, 737, 0, 0, 0, 429, 430, 431,
	453, 415, 475, 590, 0, 0, 0, 0, 0, 0,
	0, 524, 536, 570, 0, 579, 580, 582, 584, 776,
	748, 596, 467, 576, 0, 0, 0, 0, 0, 358,
	0, 480, 513, 502, 585, 469, 0, 0, 0, 0,
	0, 0, 701, 0, 0, 0, 298, 0, 0, 328,
	517, 499, 509, 500, 485, 486, 487, 494, 308, 488,
	489, 490, 463, 491, 464, 492, 493, 739, 516, 468,
	389, 342, 534, 533, 0, 0, 801, 809, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 694, 0,
	0, 729, 778, 777, 716, 726, 0, 0, 271, 197,
	465, 581, 466, 717, 0, 718, 722, 725, 721, 719,
	720, 0, 793, 0, 0, 0, 0, 0, 0, 686,
	698, 0, 702, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 695, 696, 1678, 0,
	0, 0, 749, 0, 697, 0, 0, 744, 723, 727,
	0, 0, 0, 0, 261, 394, 411, 272, 385, 424,
	277, 392, 267, 357, 381, 0, 0, 263, 409, 391,
	339, 318, 319, 262, 0, 376, 296, 310, 293, 355,
	724, 747, 751, 292, 815, 745, 419, 265, 0, 418,
	354, 405, 410, 340, 334, 264, 407, 338, 333, 322,
	300, 816, 323, 324, 314, 366, 332, 367, 315, 344,
	343, 345, 0, 0, 0, 0, 0, 447, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 575, 742, 0, 578, 0, 421, 0, 0, 799,
	0, 0, 0, 393, 0, 0, 325, 0, 0, 0,
	746, 0, 379, 360, 812, 0, 0, 377, 330, 406,
	368, 412, 395, 420, 373, 369, 256, 396, 295, 341,
	268, 270, 290, 297, 299, 301, 302, 350, 351, 363,
	384, 397, 398, 399, 294, 278, 378, 279, 312, 280,
	257, 286, 284, 287, 386, 288, 259, 364, 403, 0,
	307, 374, 337, 260, 336, 365, 402, 401, 269, 428,
	434, 435, 521, 0, 440, 599, 600, 601, 449, 454,
	455, 456, 458, 459, 460, 461, 522, 539, 506, 477,
	442, 530, 474, 478, 542, 0, 0, 0, 433, 326,
	327, 0, 305, 253, 254, 595, 797, 356, 544, 577,
	470, 0, 811, 792, 794, 795, 798, 802, 803, 804,
	805, 806, 808, 810, 814, 594, 0, 523, 538, 597,
	537, 591, 362, 0, 383, 535, 482, 0, 527, 501,
	0, 528, 497, 532, 0, 472, 0, 390, 414, 426,
	443, 446, 473, 557, 558, 559, 258, 445, 561, 562,
	563, 564, 565, 566, 567, 560, 813, 504, 481, 507,
	425, 484, 483, 0, 0, 518, 750, 519, 520, 346,
	347, 348, 349, 800, 545, 276, 444, 372, 0, 505,
	0, 0, 0, 0, 0, 0, 0, 0, 510, 511,
	508, 602, 0, 568, 569, 0, 0, 438, 439, 304,
	311, 457, 313, 275, 361, 306, 423, 320, 0, 450,
	512, 451, 571, 574, 572, 573, 353, 316, 317, 387,
	321, 331, 375, 422, 359, 380, 273, 413, 388, 335,
	498, 525, 822, 796, 821, 823, 824, 820, 825, 826,
	807, 706, 0, 754, 818, 817, 819, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 553, 552,
	551, 550, 549, 548, 547, 546, 0, 0, 495, 400,
	285, 250, 281, 282, 289, 592, 589, 404, 593, 0,
	255, 476, 329, 0, 370, 303, 540, 541, 785, 761,
	762, 763, 703, 764, 758, 759, 704, 760, 786, 752,
	782, 783, 731, 755, 765, 781, 766, 784, 787, 788,
	827, 828, 772, 756, 222, 829, 769, 789, 780, 779,
	767, 753, 790, 791, 738, 733, 770, 771, 757, 773,
	774, 775, 705, 734, 735, 736, 737, 0, 0, 0,
	429, 430, 431, 453, 415, 475, 590, 0, 0, 0,
	0, 0, 0, 0, 524, 536, 570, 0, 579, 580,
	582, 584, 776, 748, 596, 467, 576, 0, 0, 0,
	0, 0, 358, 0, 480, 513, 502, 585, 469, 0,
	0, 0, 0, 0, 0, 701, 0, 0, 0, 298,
	0, 0, 328, 517, 499, 509, 500, 485, 486, 487,
	494, 308, 488, 489, 490, 463, 491, 464, 492, 493,
	739, 516, 468, 389, 342, 534, 533, 0, 0, 801,
	809, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 694, 0, 0, 729, 778, 777, 716, 726, 0,
	0, 271, 197, 465, 581, 466, 717, 0, 718, 722,
	725, 721, 719, 720, 0, 793, 0, 0, 0, 0,
	0, 0, 686, 698, 0, 702, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 695,
	696, 0, 0, 0, 0, 749, 0, 697, 0, 0,
	744, 723, 727, 0, 0, 0, 0, 261, 394, 411,
	272, 385, 424, 277, 392, 267, 357, 381, 0, 0,
	263, 409, 391, 339, 318, 319, 262, 0, 376, 296,
	310, 293, 355, 724, 747, 751, 292, 815, 745, 419,
	265, 0, 418, 354, 405, 410, 340, 334, 264, 407,
	338, 333, 322, 300, 816, 323, 324, 314, 366, 332,
	367, 315, 344, 343, 345, 0, 0, 0, 0, 0,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 742, 0, 578, 0, 421,
	0, 0, 799, 0, 0, 0, 393, 0, 0, 325,
	0, 0, 0, 746, 0, 379, 360, 812, 0, 0,
	377, 330, 406, 368, 412, 395, 420, 373, 369, 256,
	396, 295, 341, 268, 270, 290, 297, 299, 301, 302,
	350, 351, 363, 384, 397, 398, 399, 294, 278, 378,
	279, 312, 280, 257, 286, 284, 287, 386, 288, 259,
	364, 403, 0, 307, 374, 337, 260, 336, 365, 402,
	401, 269, 428, 434, 435, 521, 0, 440, 599, 600,
	601, 449, 454, 455, 456, 458, 459, 460, 461, 522,
	539, 506, 477, 442, 530, 474, 478, 542, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 595, 797,
	356, 544, 577, 470, 0, 811, 792, 794, 795, 798,
	802, 803, 804, 805, 806, 808, 810, 814, 594, 0,
	523, 538, 597, 537, 591, 362, 0, 383, 535, 482,
	0, 527, 501, 0, 528, 497, 532, 0, 472, 0,
	390, 414, 426, 443, 446, 473, 557, 558, 559, 258,
	445, 561, 562, 563, 564, 565, 566, 567, 560, 813,
	504, 481, 507, 425, 484, 483, 0, 0, 518, 750,
	519, 520, 346, 347, 348, 349, 800, 545, 276, 444,
	372, 0, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 511, 508, 602, 0, 568, 569, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 512, 451, 571, 574, 572, 573, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 498, 525, 822, 796, 821, 823, 824,
	820, 825, 826, 807, 706, 0, 754, 818, 817, 819,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 552, 551, 550, 549, 548, 547, 546, 0,
	0, 495, 400, 285, 250, 281, 282, 289, 592, 589,
	404, 593, 0, 255, 476, 329, 0, 370, 303, 540,
	541, 785, 761, 762, 763, 703, 764, 758, 759, 704,
	760, 786, 752, 782, 783, 731, 755, 765, 781, 766,
	784, 787, 788, 827, 828, 772, 756, 222, 829, 769,
	789, 780, 779, 767, 753, 790, 791, 738, 733, 770,
	771, 757, 773, 774, 775, 705, 734, 735, 736, 737,
	0, 0, 0, 429, 430, 431, 453, 415, 475, 590,
	0, 0, 0, 0, 0, 0, 0, 524, 536, 570,
	0, 579, 580, 582, 584, 776, 748, 596, 467, 576,
	0, 0, 0, 0, 0, 358, 0, 480, 513, 502,
	585, 469, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 0, 298, 0, 0, 328, 517, 499, 509, 500,
	485, 486, 487, 494, 308, 488, 489, 490, 463, 491,
	464, 492, 493, 739, 516, 468, 389, 342, 534, 533,
	0, 0, 801, 809, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 694, 0, 0, 729, 778, 777,
	716, 726, 0, 0, 271, 197, 465, 581, 466, 2462,
	0, 2463, 722, 725, 721, 719, 720, 0, 793, 0,
	0, 0, 0, 0, 0, 686, 698, 0, 702, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 695, 696, 0, 0, 0, 0, 749, 0,
	697, 0, 0, 744, 723, 727, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 724, 747, 751, 292,
	815, 745, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 816, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 575, 742, 0,
	578, 0, 421, 0, 0, 799, 0, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 746, 0, 379, 360,
	812, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 521, 0,
	440, 599, 600, 601, 449, 454, 455, 456, 458, 459,
	460, 461, 522, 539, 506, 477, 442, 530, 474, 478,
	542, 0, 0, 0, 433, 326, 327, 0, 305, 253,
	254, 595, 797, 356, 544, 577, 470, 0, 811, 792,
	794, 795, 798, 802, 803, 804, 805, 806, 808, 810,
	814, 594, 0, 523, 538, 597, 537, 591, 362, 0,
	383, 535, 482, 0, 527, 501, 0, 528, 497, 532,
	0, 472, 0, 390, 414, 426, 443, 446, 473, 557,
	558, 559, 258, 445, 561, 562, 563, 564, 565, 566,
	567, 560, 813, 504, 481, 507, 425, 484, 483, 0,
	0, 518, 750, 519, 520, 346, 347, 348, 349, 800,
	545, 276, 444, 372, 0, 505, 0, 0, 0, 0,
	0, 0, 0, 0, 510, 511, 508, 602, 0, 568,
	569, 0, 0, 438, 439, 304, 311, 457, 313, 275,
	361, 306, 423, 320, 0, 450, 512, 451, 571, 574,
	572, 573, 353, 316, 317, 387, 321, 331, 375, 422,
	359, 380, 273, 413, 388, 335, 498, 525, 822, 796,
	821, 823, 824, 820, 825, 826, 807, 706, 0, 754,
	818, 817, 819, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 553, 552, 551, 550, 549, 548,
	547, 546, 0, 0, 495, 400, 285, 250, 281, 282,
	289, 592, 589, 404, 593, 0, 255, 476, 329, 0,
	370, 303, 540, 541, 785, 761, 762, 763, 703, 764,
	758, 759, 704, 760, 786, 752, 782, 783, 731, 755,
	765, 781, 766, 784, 787, 788, 827, 828, 772, 756,
	222, 829, 769, 789, 780, 779, 767, 753, 790, 791,
	738, 733, 770, 771, 757, 773, 774, 775, 705, 734,
	735, 736, 737, 0, 0, 0, 429, 430, 431, 453,
	415, 475, 590, 0, 0, 0, 0, 0, 0, 0,
	524, 536, 570, 0, 579, 580, 582, 584, 776, 748,
	596, 467, 576, 0, 0, 0, 0, 0, 358, 0,
	480, 513, 502, 585, 469, 0, 0, 1557, 0, 0,
	0, 701, 0, 0, 0, 298, 0, 0, 328, 517,
	499, 509, 500, 485, 486, 487, 494, 308, 488, 489,
	490, 463, 491, 464, 492, 493, 739, 516, 468, 389,
	342, 534, 533, 0, 0, 801, 809, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 694, 0, 0,
	729, 778, 777, 716, 726, 0, 0, 271, 197, 465,
	581, 466, 717, 0, 718, 722, 725, 721, 719, 720,
	0, 793, 0, 0, 0, 0, 0, 0, 0, 698,
	0, 702, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 695, 696, 0, 0, 0,
	0, 749, 0, 697, 0, 0, 744, 723, 727, 0,
	0, 0, 0, 261, 394, 411, 272, 385, 424, 277,
	392, 267, 357, 381, 0, 0, 263, 409, 391, 339,
	318, 319, 262, 0, 376, 296, 310, 293, 355, 724,
	747, 751, 292, 815, 745, 419, 265, 0, 418, 354,
	405, 410, 340, 334, 264, 407, 338, 333, 322, 300,
	816, 323, 324, 314, 366, 332, 367, 315, 344, 343,
	345, 0, 0, 0, 0, 0, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 742, 0, 578, 0, 421, 0, 0, 799, 0,
	0, 0, 393, 0, 0, 325, 0, 0, 0, 746,
	0, 379, 360, 812, 0, 0, 377, 330, 406, 368,
	412, 395, 420, 373, 369, 256, 396, 295, 341, 268,
	270, 290, 297, 299, 301, 302, 350, 351, 363, 384,
	397, 398, 399, 294, 278, 378, 279, 312, 280, 257,
	286, 284, 287, 386, 288, 259, 364, 403, 0, 307,
	374, 337, 260, 336, 365, 402, 401, 269, 428, 1558,
	1559, 521, 0, 440, 599, 600, 601, 449, 454, 455,
	456, 458, 459, 460, 461, 522, 539, 506, 477, 442,
	530, 474, 478, 542, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 595, 797, 356, 544, 577, 470,
	0, 811, 792, 794, 795, 798, 802, 803, 804, 805,
	806, 808, 810, 814, 594, 0, 523, 538, 597, 537,
	591, 362, 0, 383, 535, 482, 0, 527, 501, 0,
	528, 497, 532, 0, 472, 0, 390, 414, 426, 443,
	446, 473, 557, 558, 559, 258, 445, 561, 562, 563,
	564, 565, 566, 567, 560, 813, 504, 481, 507, 425,
	484, 483, 0, 0, 518, 750, 519, 520, 346, 347,
	348, 349, 800, 545, 276, 444, 372, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 511, 508,
	602, 0, 568, 569, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 512,
	451, 571, 574, 572, 573, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 498,
	525, 822, 796, 821, 823, 824, 820, 825, 826, 807,
	706, 0, 754, 818, 817, 819, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 552, 551,
	550, 549, 548, 547, 546, 0, 0, 495, 400, 285,
	250, 281, 282, 289, 592, 589, 404, 593, 0, 255,
	476, 329, 0, 370, 303, 540, 541, 785, 761, 762,
	763, 703, 764, 758, 759, 704, 760, 786, 752, 782,
	783, 731, 755, 765, 781, 766, 784, 787, 788, 827,
	828, 772, 756, 222, 829, 769, 789, 780, 779, 767,
	753, 790, 791, 738, 733, 770, 771, 757, 773, 774,
	775, 705, 734, 735, 736, 737, 0, 0, 0, 429,
	430, 431, 453, 415, 475, 590, 0, 0, 0, 0,
	0, 0, 0, 524, 536, 570, 0, 579, 580, 582,
	584, 776, 748, 596, 467, 576, 0, 0, 0, 0,
	0, 358, 0, 480, 513, 502, 585, 469, 0, 0,
	0, 0, 0, 0, 701, 0, 0, 0, 298, 0,
	0, 328, 517, 499, 509, 500, 485, 486, 487, 494,
	308, 488, 489, 490, 463, 491, 464, 492, 493, 739,
	516, 468, 389, 342, 534, 533, 0, 0, 801, 809,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	694, 0, 0, 729, 778, 777, 716, 726, 0, 0,
	271, 197, 465, 581, 466, 717, 0, 718, 722, 725,
	721, 719, 720, 0, 793, 0, 0, 0, 0, 0,
	0, 0, 698, 0, 702, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 695, 696,
	0, 0, 0, 0, 749, 0, 697, 0, 0, 744,
	723, 727, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 724, 747, 751, 292, 815, 745, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 816, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 575, 742, 0, 578, 0, 421, 0,
	0, 799, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 746, 0, 379, 360, 812, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 521, 0, 440, 599, 600, 601,
	449, 454, 455, 456, 458, 459, 460, 461, 522, 539,
	506, 477, 442, 530, 474, 478, 542, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 595, 797, 356,
	544, 577, 470, 0, 811, 792, 794, 795, 798, 802,
	803, 804, 805, 806, 808, 810, 814, 594, 0, 523,
	538, 597, 537, 591, 362, 0, 383, 535, 482, 0,
	527, 501, 0, 528, 497, 532, 0, 472, 0, 390,
	414, 426, 443, 446, 473, 557, 558, 559, 258, 445,
	561, 562, 563, 564, 565, 566, 567, 560, 813, 504,
	481, 507, 425, 484, 483, 0, 0, 518, 750, 519,
	520, 346, 347, 348, 349, 800, 545, 276, 444, 372,
	0, 505, 0, 0, 0, 0, 0, 0, 0, 0,
	510, 511, 508, 602, 0, 568, 569, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 512, 451, 571, 574, 572, 573, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 498, 525, 822, 796, 821, 823, 824, 820,
	825, 826, 807, 706, 0, 754, 818, 817, 819, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	553, 552, 551, 550, 549, 548, 547, 546, 0, 0,
	495, 400, 285, 250, 281, 282, 289, 592, 589, 404,
	593, 0, 255, 476, 329, 0, 370, 303, 540, 541,
	785, 761, 762, 763, 703, 764, 758, 759, 704, 760,
	786, 752, 782, 783, 731, 755, 765, 781, 766, 784,
	787, 788, 827, 828, 772, 756, 222, 829, 769, 789,
	780, 779, 767, 753, 790, 791, 738, 733, 770, 771,
	757, 773, 774, 775, 705, 734, 735, 736, 737, 0,
	0, 0, 429, 430, 431, 453, 415, 475, 590, 0,
	0, 0, 0, 0, 0, 0, 524, 536, 570, 0,
	579, 580, 582, 584, 776, 748, 596, 467, 576, 0,
	0, 0, 0, 0, 358, 0, 480, 513, 502, 585,
	469, 0, 0, 0, 0, 0, 0, 701, 0, 0,
	0, 298, 0, 0, 328, 517, 499, 509, 500, 485,
	486, 487, 494, 308, 488, 489, 490, 463, 491, 464,
	492, 493, 739, 516, 468, 389, 342, 534, 533, 0,
	0, 801, 809, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 729, 778, 777, 716,
	726, 0, 0, 271, 197, 465, 581, 466, 717, 0,
	718, 722, 725, 721, 719, 720, 0, 793, 0, 0,
	0, 0, 0, 0, 686, 698, 0, 702, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 695, 696, 0, 0, 0, 0, 749, 0, 697,
	0, 0, 744, 723, 727, 0, 0, 0, 0, 261,
	394, 411, 272, 385, 424, 277, 392, 267, 357, 381,
	0, 0, 263, 409, 391, 339, 318, 319, 262, 0,
	376, 296, 310, 293, 355, 724, 747, 751, 292, 815,
	745, 419, 265, 0, 418, 354, 405, 410, 340, 334,
	264, 407, 338, 333, 322, 300, 816, 323, 324, 314,
	366, 332, 367, 315, 344, 343, 345, 0, 0, 0,
	0, 0, 447, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 742, 0, 578,
	0, 421, 0, 0, 799, 0, 0, 0, 393, 0,
	0, 325, 0, 0, 0, 746, 0, 379, 360, 812,
	0, 0, 377, 330, 406, 368, 412, 395, 420, 373,
	369, 256, 396, 295, 341, 268, 270, 290, 297, 299,
	301, 302, 350, 351, 363, 384, 397, 398, 399, 294,
	278, 378, 279, 312, 280, 257, 286, 284, 287, 386,
	288, 259, 364, 403, 0, 307, 374, 337, 260, 336,
	365, 402, 401, 269, 428, 434, 435, 521, 0, 440,
	599, 600, 601, 449, 454, 455, 456, 458, 459, 460,
	461, 522, 539, 506, 477, 442, 530, 474, 478, 542,
	0, 0, 0, 433, 326, 327, 0, 305, 253, 254,
	595, 797, 356, 544, 577, 470, 0, 811, 792, 794,
	795, 798, 802, 803, 804, 805, 806, 808, 810, 814,
	594, 0, 523, 538, 597, 537, 591, 362, 0, 383,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	472, 0, 390, 414, 426, 443, 446, 473, 557, 558,
	559, 258, 445, 561, 562, 563, 564, 565, 566, 567,
	560, 813, 504, 481, 507, 425, 484, 483, 0, 0,
	518, 750, 519, 520, 346, 347, 348, 349, 800, 545,
	276, 444, 372, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 438, 439, 304, 311, 457, 313, 275, 361,
	306, 423, 320, 0, 450, 512, 451, 571, 574, 572,
	573, 353, 316, 317, 387, 321, 331, 375, 422, 359,
	380, 273, 413, 388, 335, 498, 525, 822, 796, 821,
	823, 824, 820, 825, 826, 807, 706, 0, 754, 818,
	817, 819, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 0, 0, 495, 400, 285, 250, 281, 282, 289,
	592, 589, 404, 593, 0, 255, 476, 329, 0, 370,
	303, 540, 541, 785, 761, 762, 763, 703, 764, 758,
	759, 704, 760, 786, 752, 782, 783, 731, 755, 765,
	781, 766, 784, 787, 788, 827, 828, 772, 756, 222,
	829, 769, 789, 780, 779, 767, 753, 790, 791, 738,
	733, 770, 771, 757, 773, 774, 775, 705, 734, 735,
	736, 737, 0, 0, 0, 429, 430, 431, 453, 415,
	475, 590, 0, 0, 0, 0, 0, 0, 0, 524,
	536, 570, 0, 579, 580, 582, 584, 776, 0, 596,
	467, 576, 174, 51, 163, 138, 0, 0, 0, 0,
	0, 0, 358, 0, 480, 513, 502, 585, 469, 0,
	164, 0, 0, 0, 0, 0, 0, 156, 0, 298,
	0, 165, 328, 517, 499, 509, 500, 485, 486, 487,
	494, 308, 488, 489, 490, 463, 491, 464, 492, 493,
	115, 516, 468, 389, 342, 534, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 168, 0, 0, 196, 0, 0, 0, 0, 0,
	0, 271, 197, 465, 581, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 394, 411,
	272, 385, 424, 277, 392, 267, 357, 381, 0, 0,
	263, 409, 391, 339, 318, 319, 262, 0, 376, 296,
	310, 293, 355, 0, 408, 436, 292, 427, 0, 419,
	265, 0, 418, 354, 405, 410, 340, 334, 264, 407,
	338, 333, 322, 300, 452, 323, 324, 314, 366, 332,
	367, 315, 344, 343, 345, 0, 0, 0, 0, 0,
	447, 448, 0, 0, 0, 0, 0, 0, 137, 162,
	172, 0, 101, 0, 575, 0, 0, 578, 0, 421,
	0, 0, 189, 0, 0, 0, 393, 0, 0, 325,
	161, 155, 154, 437, 0, 379, 360, 201, 0, 0,
	377, 330, 406, 368, 412, 395, 420, 373, 369, 256,
	396, 295, 341, 268, 270, 290, 297, 299, 301, 302,
	350, 351, 363, 384, 397, 398, 399, 294, 278, 378,
	279, 312, 280, 257, 286, 284, 287, 386, 288, 259,
	364, 403, 0, 307, 374, 337, 260, 336, 365, 402,
	401, 269, 428, 434, 435, 521, 0, 440, 554, 555,
	556, 449, 454, 455, 456, 458, 459, 460, 461, 522,
	539, 506, 477, 442, 530, 474, 478, 542, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 416, 291,
	356, 544, 577, 470, 0, 531, 471, 479, 283, 503,
	515, 514, 352, 432, 192, 526, 529, 462, 202, 0,
	523, 538, 496, 537, 203, 362, 0, 383, 535, 482,
	0, 527, 501, 0, 528, 497, 532, 0, 472, 0,
	390, 414, 426, 443, 446, 473, 557, 558, 559, 258,
	445, 561, 562, 563, 564, 565, 566, 567, 560, 417,
	504, 481, 507, 425, 484, 483, 0, 0, 518, 441,
	519, 520, 346, 347, 348, 349, 309, 545, 276, 444,
	372, 113, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 511, 508, 200, 0, 568, 569, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 512, 451, 571, 574, 572, 573, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 498, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 52, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 552, 551, 550, 549, 548, 547, 546, 0,
	0, 495, 400, 285, 250, 281, 282, 289, 371, 266,
	404, 382, 0, 255, 476, 329, 139, 370, 303, 540,
	541, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 543, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 475, 204,
	39, 190, 193, 195, 194, 0, 49, 524, 536, 570,
	5, 579, 580, 582, 584, 583, 118, 205, 467, 576,
	358, 0, 480, 513, 502, 585, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 517, 499, 509, 500, 485, 486, 487, 494, 308,
	488, 489, 490, 463, 491, 464, 492, 493, 0, 516,
	468, 389, 342, 534, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1207,
	0, 0, 196, 0, 0, 716, 726, 0, 0, 271,
	197, 465, 581, 466, 717, 0, 718, 722, 725, 721,
	719, 720, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 723,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 724, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 578, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 598, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 521, 0, 440, 599, 600, 601, 449,
	454, 455, 456, 458, 459, 460, 461, 522, 539, 506,
	477, 442, 530, 474, 478, 542, 0, 0, 0, 433,
	326, 327, 0, 305, 253, 254, 595, 291, 356, 544,
	577, 470, 0, 531, 471, 479, 283, 503, 515, 514,
	352, 432, 0, 526, 529, 462, 594, 0, 523, 538,
	597, 537, 591, 362, 0, 383, 535, 482, 0, 527,
	501, 0, 528, 497, 532, 0, 472, 0, 390, 414,
	426, 443, 446, 473, 557, 558, 559, 258, 445, 561,
	562, 563, 564, 565, 566, 567, 560, 417, 504, 481,
	507, 425, 484, 483, 0, 0, 518, 441, 519, 520,
	346, 347, 348, 349, 309, 545, 276, 444, 372, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	511, 508, 602, 0, 568, 569, 0, 0, 438, 439,
	304, 311, 457, 313, 275, 361, 306, 423, 320, 0,
	450, 512, 451, 571, 574, 572, 573, 353, 316, 317,
	387, 321, 331, 375, 422, 359, 380, 273, 413, 388,
	335, 498, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	552, 551, 550, 549, 548, 547, 546, 0, 0, 495,
	400, 285, 250, 281, 282, 289, 592, 589, 404, 593,
	0, 255, 476, 329, 0, 370, 303, 540, 541, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 543, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 246, 247, 248, 249, 0, 0,
	0, 429, 430, 431, 453, 415, 475, 590, 0, 0,
	0, 0, 0, 0, 0, 524, 536, 570, 0, 579,
	580, 582, 584, 583, 0, 596, 467, 576, 174, 51,
	163, 138, 0, 0, 0, 0, 0, 0, 358, 619,
	480, 513, 502, 585, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 0, 0, 328, 517,
	499, 509, 500, 485, 486, 487, 494, 308, 488, 489,
	490, 463, 491, 464, 492, 493, 0, 516, 468, 389,
	342, 534, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 624, 0, 0,
	196, 0, 0, 0, 0, 0, 0, 271, 197, 465,
	581, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 261, 394, 411, 272, 385, 424, 277,
	392, 267, 357, 381, 0, 0, 263, 409, 391, 339,
	318, 319, 262, 0, 376, 296, 310, 293, 355, 0,
	408, 436, 292, 427, 0, 419, 265, 0, 418, 354,
	405, 410, 340, 334, 264, 407, 338, 333, 322, 300,
	452, 323, 324, 314, 366, 332, 367, 315, 344, 343,
	345, 0, 0, 0, 0, 0, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 623, 0,
	575, 0, 0, 578, 0, 421, 0, 0, 0, 0,
	0, 0, 393, 0, 0, 325, 0, 0, 0, 437,
	0, 379, 360, 598, 0, 0, 377, 330, 406, 368,
	412, 395, 420, 373, 369, 256, 396, 295, 341, 268,
	270, 290, 297, 299, 301, 302, 350, 351, 363, 384,
	397, 398, 399, 294, 278, 378, 279, 312, 280, 257,
	286, 284, 287, 386, 288, 259, 364, 403, 0, 307,
	374, 337, 260, 336, 365, 402, 401, 269, 428, 434,
	435, 521, 0, 440, 599, 600, 601, 449, 454, 455,
	456, 458, 459, 460, 461, 522, 539, 506, 477, 442,
	530, 474, 478, 542, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 595, 291, 356, 544, 577, 470,
	0, 531, 471, 479, 283, 503, 515, 514, 352, 432,
	0, 526, 529, 462, 594, 0, 523, 538, 597, 537,
	591, 362, 0, 383, 535, 482, 0, 527, 501, 0,
	528, 497, 532, 0, 472, 0, 390, 414, 426, 443,
	446, 473, 557, 558, 559, 258, 445, 561, 562, 563,
	564, 565, 566, 567, 560, 417, 504, 481, 507, 425,
	484, 483, 0, 0, 518, 441, 519, 520, 346, 347,
	348, 349, 620, 622, 276, 444, 372, 632, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 511, 508,
	602, 0, 568, 569, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 512,
	451, 571, 574, 572, 573, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 498,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 52,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 552, 551,
	550, 549, 548, 547, 546, 0, 0, 495, 400, 285,
	250, 281, 282, 289, 592, 589, 404, 593, 0, 255,
	476, 329, 139, 370, 303, 540, 541, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 543, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 475, 590, 0, 0, 0, 0,
	0, 0, 0, 524, 536, 570, 0, 579, 580, 582,
	584, 583, 0, 596, 467, 576, 358, 0, 480, 513,
	502, 585, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 517, 499, 509,
	500, 485, 486, 487, 494, 308, 488, 489, 490, 463,
	491, 464, 492, 493, 0, 516, 468, 389, 342, 534,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 581, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	2164, 2167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 575, 0,
	0, 578, 2168, 421, 0, 0, 0, 2163, 0, 2162,
	393, 2160, 2165, 325, 0, 0, 0, 437, 0, 379,
	360, 598, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 2166, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 521,
	0, 440, 599, 600, 601, 449, 454, 455, 456, 458,
	459, 460, 461, 522, 539, 506, 477, 442, 530, 474,
	478, 542, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 595, 291, 356, 544, 577, 470, 0, 531,
	471, 479, 283, 503, 515, 514, 352, 432, 0, 526,
	529, 462, 594, 0, 523, 538, 597, 537, 591, 362,
	0, 383, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 472, 0, 390, 414, 426, 443, 446, 473,
	557, 558, 559, 258, 445, 561, 562, 563, 564, 565,
	566, 567, 560, 417, 504, 481, 507, 425, 484, 483,
	0, 0, 518, 441, 519, 520, 346, 347, 348, 349,
	309, 545, 276, 444, 372, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 512, 451, 571,
	574, 572, 573, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 498, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 400, 285, 250, 281,
	282, 289, 592, 589, 404, 593, 0, 255, 476, 329,
	0, 370, 303, 540, 541, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 543,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 475, 590, 0, 0, 0, 0, 0, 0,
	0, 524, 536, 570, 0, 579, 580, 582, 584, 583,
	0, 596, 467, 576, 358, 0, 480, 513, 502, 585,
	469, 0, 1032, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 0, 0, 328, 517, 499, 509, 500, 485,
	486, 487, 494, 308, 488, 489, 490, 463, 491, 464,
	492, 493, 0, 516, 468, 389, 342, 534, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 271, 197, 465, 581, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1018, 0, 0, 0, 0, 0, 0, 261,
	394, 411, 272, 385, 424, 277, 392, 267, 357, 381,
	0, 0, 2312, 2315, 2316, 2317, 2318, 2319, 2320, 0,
	2325, 2321, 2322, 2323, 2324, 0, 2307, 2308, 2309, 2310,
	1016, 2291, 2313, 0, 2292, 354, 2293, 2294, 2295, 2296,
	2297, 2298, 2299, 2300, 2301, 2304, 2305, 2302, 2303, 2311,
	366, 332, 367, 315, 344, 343, 345, 1043, 1045, 1047,
	1049, 1052, 447, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 578,
	0, 421, 0, 0, 0, 0, 0, 0, 393, 0,
	0, 325, 0, 0, 0, 2306, 0, 379, 360, 598,
	0, 0, 377, 330, 406, 368, 412, 395, 420, 373,
	369, 256, 396, 295, 341, 268, 270, 290, 297, 299,
	301, 302, 350, 351, 363, 384, 397, 398, 399, 294,
	278, 378, 279, 312, 280, 257, 286, 284, 287, 386,
	288, 259, 364, 403, 0, 307, 374, 337, 260, 336,
	365, 402, 401, 269, 428, 434, 435, 521, 0, 440,
	599, 600, 601, 449, 454, 455, 456, 458, 459, 460,
	461, 522, 539, 506, 477, 442, 530, 474, 478, 542,
	0, 0, 0, 433, 326, 327, 0, 305, 253, 254,
	595, 291, 356, 544, 577, 470, 0, 531, 471, 479,
	283, 503, 515, 514, 352, 432, 0, 526, 529, 462,
	594, 0, 523, 538, 597, 537, 591, 362, 0, 383,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	472, 0, 390, 414, 426, 443, 446, 473, 557, 558,
	559, 258, 445, 561, 562, 563, 564, 565, 566, 567,
	560, 417, 504, 481, 507, 425, 484, 483, 0, 0,
	518, 441, 519, 520, 346, 347, 348, 349, 309, 545,
	276, 444, 372, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 438, 439, 304, 311, 457, 313, 275, 361,
	306, 423, 320, 0, 450, 512, 451, 571, 574, 572,
	573, 353, 316, 317, 387, 321, 331, 375, 422, 359,
	380, 273, 413, 388, 335, 498, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 0, 0, 495, 400, 285, 250, 281, 282, 289,
	592, 589, 404, 593, 0, 255, 2314, 329, 0, 370,
	303, 540, 541, 206, 207, 208, 209, 210, 211, 212,
	213, 251, 214, 215, 216, 217, 218, 219, 220, 223,
	224, 225, 226, 227, 228, 229, 230, 543, 221, 222,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 0, 0, 0, 252, 246, 247,
	248, 249, 0, 0, 0, 429, 430, 431, 453, 415,
	475, 590, 0, 0, 0, 0, 0, 0, 0, 524,
	536, 570, 0, 579, 580, 582, 584, 583, 0, 596,
	467, 576, 358, 0, 480, 513, 502, 585, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	0, 0, 328, 517, 499, 509, 500, 485, 486, 487,
	494, 308, 488, 489, 490, 463, 491, 464, 492, 493,
	0, 516, 468, 389, 342, 534, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 0, 0, 0, 0, 0,
	0, 271, 197, 465, 581, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 2185, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 394, 411,
	272, 385, 424, 277, 392, 267, 357, 381, 0, 0,
	263, 409, 391, 339, 318, 319, 262, 0, 376, 296,
	310, 293, 355, 0, 408, 436, 292, 427, 0, 419,
	265, 0, 418, 354, 405, 410, 340, 334, 264, 407,
	338, 333, 322, 300, 452, 323, 324, 314, 366, 332,
	367, 315, 344, 343, 345, 0, 0, 0, 0, 0,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 0, 0, 578, 2184, 421,
	0, 0, 0, 2189, 2187, 0, 393, 0, 2188, 325,
	0, 0, 0, 437, 0, 379, 360, 598, 0, 2182,
	377, 330, 406, 368, 412, 395, 420, 373, 369, 256,
	396, 295, 341, 268, 270, 290, 297, 299, 301, 302,
	350, 351, 363, 384, 397, 398, 399, 294, 278, 378,
	279, 312, 280, 257, 286, 284, 287, 386, 288, 259,
	364, 403, 0, 307, 374, 337, 260, 336, 365, 402,
	401, 269, 428, 434, 435, 521, 0, 440, 599, 600,
	601, 449, 454, 455, 456, 458, 459, 460, 461, 522,
	539, 506, 477, 442, 530, 474, 478, 542, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 595, 291,
	356, 544, 577, 470, 0, 531, 471, 479, 283, 503,
	515, 514, 352, 432, 0, 526, 529, 462, 594, 0,
	523, 538, 597, 537, 591, 362, 0, 383, 535, 482,
	0, 527, 501, 0, 528, 497, 532, 0, 472, 0,
	390, 414, 426, 443, 446, 473, 557, 558, 559, 258,
	445, 561, 562, 563, 564, 565, 566, 567, 560, 417,
	504, 481, 507, 425, 484, 483, 0, 0, 518, 441,
	519, 520, 346, 347, 348, 349, 309, 545, 276, 444,
	372, 0, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 511, 508, 602, 0, 568, 569, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 512, 451, 571, 574, 572, 573, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 498, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 552, 551, 550, 549, 548, 547, 546, 0,
	0, 495, 400, 285, 250, 281, 282, 289, 592, 589,
	404, 593, 0, 255, 476, 329, 0, 370, 303, 540,
	541, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 543, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 475, 590,
	0, 0, 0, 0, 0, 0, 0, 524, 536, 570,
	0, 579, 580, 582, 584, 583, 0, 596, 467, 576,
	358, 0, 480, 513, 502, 585, 469, 0, 0, 0,
	0, 0, 1915, 0, 0, 0, 0, 298, 0, 0,
	328, 517, 499, 509, 500, 485, 486, 487, 494, 308,
	488, 489, 490, 463, 491, 464, 492, 493, 0, 516,
	468, 389, 342, 534, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 1916, 0, 0, 0, 271,
	197, 465, 581, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 1139, 1140, 1141, 1138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 578, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 598, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 521, 0, 440, 599, 600, 601, 449,
	454, 455, 456, 458, 459, 460, 461, 522, 539, 506,
	477, 442, 530, 474, 478, 542, 0, 0, 0, 433,
	326, 327, 0, 305, 253, 254, 595, 291, 356, 544,
	577, 470, 0, 531, 471, 479, 283, 503, 515, 514,
	352, 432, 0, 526, 529, 462, 594, 0, 523, 538,
	597, 537, 591, 362, 0, 383, 535, 482, 0, 527,
	501, 0, 528, 497, 532, 0, 472, 0, 390, 414,
	426, 443, 446, 473, 557, 558, 559, 258, 445, 561,
	562, 563, 564, 565, 566, 567, 560, 417, 504, 481,
	507, 425, 484, 483, 0, 0, 518, 441, 519, 520,
	346, 347, 348, 349, 309, 545, 276, 444, 372, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	511, 508, 602, 0, 568, 569, 0, 0, 438, 439,
	304, 311, 457, 313, 275, 361, 306, 423, 320, 0,
	450, 512, 451, 571, 574, 572, 573, 353, 316, 317,
	387, 321, 331, 375, 422, 359, 380, 273, 413, 388,
	335, 498, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	552, 551, 550, 549, 548, 547, 546, 0, 0, 495,
	400, 285, 250, 281, 282, 289, 592, 589, 404, 593,
	0, 255, 476, 329, 0, 370, 303, 540, 541, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 543, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 246, 247, 248, 249, 0, 0,
	0, 429, 430, 431, 453, 415, 475, 590, 0, 0,
	0, 0, 0, 0, 0, 524, 536, 570, 0, 579,
	580, 582, 584, 583, 0, 596, 467, 576, 358, 0,
	480, 513, 502, 585, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 0, 0, 328, 517,
	499, 509, 500, 485, 486, 487, 494, 308, 488, 489,
	490, 463, 491, 464, 492, 493, 0, 516, 468, 389,
	342, 534, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 0, 0, 0, 0, 271, 197, 465,
	581, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 2185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 261, 394, 411, 272, 385, 424, 277,
	392, 267, 357, 381, 0, 0, 263, 409, 391, 339,
	318, 319, 262, 0, 376, 296, 310, 293, 355, 0,
	408, 436, 292, 427, 0, 419, 265, 0, 418, 354,
	405, 410, 340, 334, 264, 407, 338, 333, 322, 300,
	452, 323, 324, 314, 366, 332, 367, 315, 344, 343,
	345, 0, 0, 0, 0, 0, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 0, 0, 578, 2184, 421, 0, 0, 0, 2189,
	2187, 0, 393, 0, 2188, 325, 0, 0, 0, 437,
	0, 379, 360, 598, 0, 0, 377, 330, 406, 368,
	412, 395, 420, 373, 369, 256, 396, 295, 341, 268,
	270, 290, 297, 299, 301, 302, 350, 351, 363, 384,
	397, 398, 399, 294, 278, 378, 279, 312, 280, 257,
	286, 284, 287, 386, 288, 259, 364, 403, 0, 307,
	374, 337, 260, 336, 365, 402, 401, 269, 428, 434,
	435, 521, 0, 440, 599, 600, 601, 449, 454, 455,
	456, 458, 459, 460, 461, 522, 539, 506, 477, 442,
	530, 474, 478, 542, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 595, 291, 356, 544, 577, 470,
	0, 531, 471, 479, 283, 503, 515, 514, 352, 432,
	0, 526, 529, 462, 594, 0, 523, 538, 597, 537,
	591, 362, 0, 383, 535, 482, 0, 527, 501, 0,
	528, 497, 532, 0, 472, 0, 390, 414, 426, 443,
	446, 473, 557, 558, 559, 258, 445, 561, 562, 563,
	564, 565, 566, 567, 560, 417, 504, 481, 507, 425,
	484, 483, 0, 0, 518, 441, 519, 520, 346, 347,
	348, 349, 309, 545, 276, 444, 372, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 511, 508,
	602, 0, 568, 569, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 512,
	451, 571, 574, 572, 573, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 498,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 552, 551,
	550, 549, 548, 547, 546, 0, 0, 495, 400, 285,
	250, 281, 282, 289, 592, 589, 404, 593, 0, 255,
	476, 329, 0, 370, 303, 540, 541, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 543, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 475, 590, 0, 0, 0, 0,
	0, 0, 0, 524, 536, 570, 174, 579, 580, 582,
	584, 583, 0, 596, 467, 576, 358, 0, 480, 513,
	502, 585, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 517, 499, 509,
	500, 485, 486, 487, 494, 308, 488, 489, 490, 463,
	491, 464, 492, 493, 115, 516, 468, 389, 342, 534,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 168, 1959, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 581, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 575, 0,
	0, 578, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 598, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 521,
	0, 440, 599, 600, 601, 449, 454, 455, 456, 458,
	459, 460, 461, 522, 539, 506, 477, 442, 530, 474,
	478, 542, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 595, 291, 356, 544, 577, 470, 0, 531,
	471, 479, 283, 503, 515, 514, 352, 432, 0, 526,
	529, 462, 594, 0, 523, 538, 597, 537, 591, 362,
	0, 383, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 472, 0, 390, 414, 426, 443, 446, 473,
	557, 558, 559, 258, 445, 561, 562, 563, 564, 565,
	566, 567, 560, 417, 504, 481, 507, 425, 484, 483,
	0, 0, 518, 441, 519, 520, 346, 347, 348, 349,
	309, 545, 276, 444, 372, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 512, 451, 571,
	574, 572, 573, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 498, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 400, 285, 250, 281,
	282, 289, 592, 589, 404, 593, 0, 255, 476, 329,
	139, 370, 303, 540, 541, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 543,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 475, 590, 0, 0, 0, 0, 0, 0,
	0, 524, 536, 570, 174, 579, 580, 582, 584, 583,
	0, 596, 467, 576, 358, 0, 480, 513, 502, 585,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 0, 0, 328, 517, 499, 509, 500, 485,
	486, 487, 494, 308, 488, 489, 490, 463, 491, 464,
	492, 493, 115, 516, 468, 389, 342, 534, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 168, 1950, 0, 196, 0, 0, 0,
	0, 0, 0, 271, 197, 465, 581, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 261,
	394, 411, 272, 385, 424, 277, 392, 267, 357, 381,
	0, 0, 263, 409, 391, 339, 318, 319, 262, 0,
	376, 296, 310, 293, 355, 0, 408, 436, 292, 427,
	0, 419, 265, 0, 418, 354, 405, 410, 340, 334,
	264, 407, 338, 333, 322, 300, 452, 323, 324, 314,
	366, 332, 367, 315, 344, 343, 345, 0, 0, 0,
	0, 0, 447, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 578,
	0, 421, 0, 0, 0, 0, 0, 0, 393, 0,
	0, 325, 0, 0, 0, 437, 0, 379, 360, 598,
	0, 0, 377, 330, 406, 368, 412, 395, 420, 373,
	369, 256, 396, 295, 341, 268, 270, 290, 297, 299,
	301, 302, 350, 351, 363, 384, 397, 398, 399, 294,
	278, 378, 279, 312, 280, 257, 286, 284, 287, 386,
	288, 259, 364, 403, 0, 307, 374, 337, 260, 336,
	365, 402, 401, 269, 428, 434, 435, 521, 0, 440,
	599, 600, 601, 449, 454, 455, 456, 458, 459, 460,
	461, 522, 539, 506, 477, 442, 530, 474, 478, 542,
	0, 0, 0, 433, 326, 327, 0, 305, 253, 254,
	595, 291, 356, 544, 577, 470, 0, 531, 471, 479,
	283, 503, 515, 514, 352, 432, 0, 526, 529, 462,
	594, 0, 523, 538, 597, 537, 591, 362, 0, 383,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	472, 0, 390, 414, 426, 443, 446, 473, 557, 558,
	559, 258, 445, 561, 562, 563, 564, 565, 566, 567,
	560, 417, 504, 481, 507, 425, 484, 483, 0, 0,
	518, 441, 519, 520, 346, 347, 348, 349, 309, 545,
	276, 444, 372, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 438, 439, 304, 311, 457, 313, 275, 361,
	306, 423, 320, 0, 450, 512, 451, 571, 574, 572,
	573, 353, 316, 317, 387, 321, 331, 375, 422, 359,
	380, 273, 413, 388, 335, 498, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 0, 0, 495, 400, 285, 250, 281, 282, 289,
	592, 589, 404, 593, 0, 255, 476, 329, 139, 370,
	303, 540, 541, 206, 207, 208, 209, 210, 211, 212,
	213, 251, 214, 215, 216, 217, 218, 219, 220, 223,
	224, 225, 226, 227, 228, 229, 230, 543, 221, 222,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 0, 0, 0, 252, 246, 247,
	248, 249, 0, 0, 0, 429, 430, 431, 453, 415,
	475, 590, 0, 0, 0, 0, 0, 0, 0, 524,
	536, 570, 0, 579, 580, 582, 584, 583, 0, 596,
	467, 576, 358, 0, 480, 513, 502, 585, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	949, 0, 328, 517, 499, 509, 500, 485, 486, 487,
	494, 308, 488, 489, 490, 463, 491, 464, 492, 493,
	0, 516, 468, 389, 342, 534, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 956, 957, 0, 0, 0,
	0, 271, 197, 465, 581, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 960, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 394, 944,
	272, 385, 424, 277, 392, 267, 357, 381, 0, 0,
	263, 409, 391, 339, 318, 319, 262, 0, 376, 296,
	310, 293, 355, 0, 408, 436, 292, 427, 934, 419,
	265, 933, 418, 354, 405, 410, 340, 334, 264, 407,
	338, 333, 322, 300, 452, 323, 324, 314, 366, 332,
	367, 315, 344, 343, 345, 0, 0, 0, 0, 0,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 0, 0, 578, 0, 421,
	0, 0, 0, 0, 0, 0, 393, 0, 0, 325,
	0, 0, 0, 437, 0, 379, 360, 598, 0, 0,
	377, 330, 406, 368, 412, 395, 420, 947, 369, 256,
	396, 295, 341, 268, 270, 290, 297, 299, 301, 302,
	350, 351, 363, 384, 397, 398, 399, 294, 278, 378,
	279, 312, 280, 257, 286, 284, 287, 386, 288, 259,
	364, 403, 0, 307, 374, 337, 260, 336, 365, 402,
	401, 269, 428, 434, 435, 521, 0, 440, 599, 600,
	601, 449, 454, 455, 456, 458, 459, 460, 461, 522,
	539, 506, 477, 442, 530, 474, 478, 542, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 595, 291,
	356, 544, 577, 470, 0, 531, 471, 479, 283, 503,
	515, 514, 352, 432, 0, 526, 529, 462, 594, 0,
	523, 538, 597, 537, 591, 362, 0, 383, 535, 482,
	0, 527, 501, 0, 528, 497, 532, 0, 472, 0,
	390, 414, 426, 443, 446, 473, 557, 558, 559, 258,
	445, 561, 562, 563, 564, 565, 566, 948, 560, 417,
	504, 481, 507, 425, 484, 483, 0, 0, 518, 951,
	519, 520, 346, 347, 348, 349, 309, 545, 276, 444,
	372, 0, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 511, 508, 602, 0, 568, 569, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 512, 451, 571, 574, 572, 573, 958,
	945, 954, 946, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 955, 498, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 552, 551, 550, 549, 548, 547, 546, 0,
	0, 495, 400, 285, 250, 281, 282, 289, 592, 589,
	404, 593, 0, 255, 476, 329, 0, 370, 303, 540,
	541, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 543, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 475, 590,
	0, 0, 0, 0, 0, 0, 0, 524, 536, 570,
	174, 579, 580, 582, 584, 583, 0, 596, 467, 576,
	358, 0, 480, 513, 502, 585, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 517, 499, 509, 500, 485, 486, 487, 494, 308,
	488, 489, 490, 463, 491, 464, 492, 493, 115, 516,
	468, 389, 342, 534, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1849,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 581, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 578, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 598, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 521, 0, 440, 599, 600, 601, 449,
	454, 455, 456, 458, 459, 460, 461, 522, 539, 506,
	477, 442, 530, 474, 478, 542, 0, 0, 0, 433,
	326, 327, 0, 305, 253, 254, 595, 291, 356, 544,
	577, 470, 0, 531, 471, 479, 283, 503, 515, 514,
	352, 432, 0, 526, 529, 462, 594, 0, 523, 538,
	597, 537, 591, 362, 0, 383, 535, 482, 0, 527,
	501, 0, 528, 497, 532, 0, 472, 0, 390, 414,
	426, 443, 446, 473, 557, 558, 559, 258, 445, 561,
	562, 563, 564, 565, 566, 567, 560, 417, 504, 481,
	507, 425, 484, 483, 0, 0, 518, 441, 519, 520,
	346, 347, 348, 349, 309, 545, 276, 444, 372, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	511, 508, 602, 0, 568, 569, 0, 0, 438, 439,
	304, 311, 457, 313, 275, 361, 306, 423, 320, 0,
	450, 512, 451, 571, 574, 572, 573, 353, 316, 317,
	387, 321, 331, 375, 422, 359, 380, 273, 413, 388,
	335, 498, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	552, 551, 550, 549, 548, 547, 546, 0, 0, 495,
	400, 285, 250, 281, 282, 289, 592, 589, 404, 593,
	0, 255, 476, 329, 139, 370, 303, 540, 541, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 543, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 246, 247, 248, 249, 0, 0,
	0, 429, 430, 431, 453, 415, 475, 590, 0, 0,
	0, 0, 0, 0, 0, 524, 536, 570, 0, 579,
	580, 582, 584, 583, 0, 596, 467, 576, 358, 0,
	480, 513, 502, 585, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 0, 0, 328, 517,
	499, 509, 500, 485, 486, 487, 494, 308, 488, 489,
	490, 463, 491, 464, 492, 493, 0, 516, 468, 389,
	342, 534, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 956, 957, 0, 0, 0, 0, 271, 197, 465,
	581, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 960, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 261, 394, 411, 272, 385, 424, 277,
	392, 267, 357, 381, 0, 0, 263, 409, 391, 339,
	318, 319, 262, 0, 376, 296, 310, 293, 355, 0,
	408, 436, 292, 427, 934, 419, 265, 933, 418, 354,
	405, 410, 340, 334, 264, 407, 338, 333, 322, 300,
	452, 323, 324, 314, 366, 332, 367, 315, 344, 343,
	345, 0, 0, 0, 0, 0, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 0, 0, 578, 0, 421, 0, 0, 0, 0,
	0, 0, 393, 0, 0, 325, 0, 0, 0, 437,
	0, 379, 360, 598, 0, 0, 377, 330, 406, 368,
	412, 395, 420, 373, 369, 256, 396, 295, 341, 268,
	270, 290, 297, 299, 301, 302, 350, 351, 363, 384,
	397, 398, 399, 294, 278, 378, 279, 312, 280, 257,
	286, 284, 287, 386, 288, 259, 364, 403, 0, 307,
	374, 337, 260, 336, 365, 402, 401, 269, 428, 434,
	435, 521, 0, 440, 599, 600, 601, 449, 454, 455,
	456, 458, 459, 460, 461, 522, 539, 506, 477, 442,
	530, 474, 478, 542, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 595, 291, 356, 544, 577, 470,
	0, 531, 471, 479, 283, 503, 515, 514, 352, 432,
	0, 526, 529, 462, 594, 0, 523, 538, 597, 537,
	591, 362, 0, 383, 535, 482, 0, 527, 501, 0,
	528, 497, 532, 0, 472, 0, 390, 414, 426, 443,
	446, 473, 557, 558, 559, 258, 445, 561, 562, 563,
	564, 565, 566, 567, 560, 417, 504, 481, 507, 425,
	484, 483, 0, 0, 518, 441, 519, 520, 346, 347,
	348, 349, 309, 545, 276, 444, 372, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 511, 508,
	602, 0, 568, 569, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 512,
	451, 571, 574, 572, 573, 958, 1868, 954, 1869, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 955, 498,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 552, 551,
	550, 549, 548, 547, 546, 0, 0, 495, 400, 285,
	250, 281, 282, 289, 592, 589, 404, 593, 0, 255,
	476, 329, 0, 370, 303, 540, 541, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 543, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 475, 590, 0, 0, 0, 0,
	0, 0, 0, 524, 536, 570, 0, 579, 580, 582,
	584, 583, 0, 596, 467, 576, 358, 0, 480, 513,
	502, 585, 469, 0, 0, 2656, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 517, 499, 509,
	500, 485, 486, 487, 494, 308, 488, 489, 490, 463,
	491, 464, 492, 493, 0, 516, 468, 389, 342, 534,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 581, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 2659, 0, 0, 2658, 575, 0,
	0, 578, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 598, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 521,
	0, 440, 599, 600, 601, 449, 454, 455, 456, 458,
	459, 460, 461, 522, 539, 506, 477, 442, 530, 474,
	478, 542, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 595, 291, 356, 544, 577, 470, 0, 531,
	471, 479, 283, 503, 515, 514, 352, 432, 0, 526,
	529, 462, 594, 0, 523, 538, 597, 537, 591, 362,
	0, 383, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 472, 0, 390, 414, 426, 443, 446, 473,
	557, 558, 559, 258, 445, 561, 562, 563, 564, 565,
	566, 567, 560, 417, 504, 481, 507, 425, 484, 483,
	0, 0, 518, 441, 519, 520, 346, 347, 348, 349,
	309, 545, 276, 444, 372, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 512, 451, 571,
	574, 572, 573, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 498, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 400, 285, 250, 281,
	282, 289, 592, 589, 404, 593, 0, 255, 476, 329,
	0, 370, 303, 540, 541, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 543,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 475, 590, 0, 0, 0, 0, 0, 0,
	0, 524, 536, 570, 0, 579, 580, 582, 584, 583,
	0, 596, 467, 576, 358, 0, 480, 513, 502, 585,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 1395, 0, 328, 517, 499, 509, 500, 485,
	486, 487, 494, 308, 488, 489, 490, 463, 491, 464,
	492, 493, 0, 516, 468, 389, 342, 534, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 1393,
	0, 0, 0, 271, 197, 465, 581, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1391, 0, 0, 0, 0, 0, 0, 261,
	394, 411, 272, 385, 424, 277, 392, 267, 357, 381,
	0, 0, 263, 409, 391, 339, 318, 319, 262, 0,
	376, 296, 310, 293, 355, 0, 408, 436, 292, 427,
	0, 419, 265, 0, 418, 354, 405, 410, 340, 334,
	264, 407, 338, 333, 322, 300, 452, 323, 324, 314,
	366, 332, 367, 315, 344, 343, 345, 0, 0, 0,
	0, 0, 447, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 578,
	0, 421, 0, 0, 0, 0, 0, 0, 393, 0,
	0, 325, 0, 0, 0, 437, 0, 379, 360, 598,
	0, 0, 377, 330, 406, 368, 412, 395, 420, 373,
	369, 256, 396, 295, 341, 268, 270, 290, 297, 299,
	301, 302, 350, 351, 363, 384, 397, 398, 399, 294,
	278, 378, 279, 312, 280, 257, 286, 284, 287, 386,
	288, 259, 364, 403, 0, 307, 374, 337, 260, 336,
	365, 402, 401, 269, 428, 434, 435, 521, 0, 440,
	599, 600, 601, 449, 454, 455, 456, 458, 459, 460,
	461, 522, 539, 506, 477, 442, 530, 474, 478, 542,
	0, 0, 0, 433, 326, 327, 0, 305, 253, 254,
	595, 291, 356, 544, 577, 470, 0, 531, 471, 479,
	283, 503, 515, 514, 352, 432, 0, 526, 529, 462,
	594, 0, 523, 538, 597, 537, 591, 362, 0, 383,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	472, 0, 390, 414, 426, 443, 446, 473, 557, 558,
	559, 258, 445, 561, 562, 563, 564, 565, 566, 567,
	560, 417, 504, 481, 507, 425, 484, 483, 0, 0,
	518, 441, 519, 520, 346, 347, 348, 349, 309, 545,
	276, 444, 372, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 438, 439, 304, 311, 457, 313, 275, 361,
	306, 423, 320, 0, 450, 512, 451, 571, 574, 572,
	573, 353, 316, 317, 387, 321, 331, 375, 422, 359,
	380, 273, 413, 388, 335, 498, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 0, 0, 495, 400, 285, 250, 281, 282, 289,
	592, 589, 404, 593, 0, 255, 476, 329, 0, 370,
	303, 540, 541, 206, 207, 208, 209, 210, 211, 212,
	213, 251, 214, 215, 216, 217, 218, 219, 220, 223,
	224, 225, 226, 227, 228, 229, 230, 543, 221, 222,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 0, 0, 0, 252, 246, 247,
	248, 249, 0, 0, 0, 429, 430, 431, 453, 415,
	475, 590, 0, 0, 0, 0, 0, 0, 0, 524,
	536, 570, 0, 579, 580, 582, 584, 583, 0, 596,
	467, 576, 358, 0, 480, 513, 502, 585, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	1389, 0, 328, 517, 499, 509, 500, 485, 486, 487,
	494, 308, 488, 489, 490, 463, 491, 464, 492, 493,
	0, 516, 468, 389, 342, 534, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 0, 0, 1393, 0, 0,
	0, 271, 197, 465, 581, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1391, 0, 0, 0, 0, 0, 0, 261, 394, 411,
	272, 385, 424, 277, 392, 267, 357, 381, 0, 0,
	263, 409, 391, 339, 318, 319, 262, 0, 376, 296,
	310, 293, 355, 0, 408, 436, 292, 427, 0, 419,
	265, 0, 418, 354, 405, 410, 340, 334, 264, 407,
	338, 333, 322, 300, 452, 323, 324, 314, 366, 332,
	367, 315, 344, 343, 345, 0, 0, 0, 0, 0,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 0, 0, 578, 0, 421,
	0, 0, 0, 0, 0, 0, 393, 0, 0, 325,
	0, 0, 0, 437, 0, 379, 360, 598, 0, 0,
	377, 330, 406, 368, 412, 395, 420, 373, 369, 256,
	396, 295, 341, 268, 270, 290, 297, 299, 301, 302,
	350, 351, 363, 384, 397, 398, 399, 294, 278, 378,
	279, 312, 280, 257, 286, 284, 287, 386, 288, 259,
	364, 403, 0, 307, 374, 337, 260, 336, 365, 402,
	401, 269, 428, 434, 435, 521, 0, 440, 599, 600,
	601, 449, 454, 455, 456, 458, 459, 460, 461, 522,
	539, 506, 477, 442, 530, 474, 478, 542, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 595, 291,
	356, 544, 577, 470, 0, 531, 471, 479, 283, 503,
	515, 514, 352, 432, 0, 526, 529, 462, 594, 0,
	523, 538, 597, 537, 591, 362, 0, 383, 535, 482,
	0, 527, 501, 0, 528, 497, 532, 0, 472, 0,
	390, 414, 426, 443, 446, 473, 557, 558, 559, 258,
	445, 561, 562, 563, 564, 565, 566, 567, 560, 417,
	504, 481, 507, 425, 484, 483, 0, 0, 518, 441,
	519, 520, 346, 347, 348, 349, 309, 545, 276, 444,
	372, 0, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 511, 508, 602, 0, 568, 569, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 512, 451, 571, 574, 572, 573, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 498, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 552, 551, 550, 549, 548, 547, 546, 0,
	0, 495, 400, 285, 250, 281, 282, 289, 592, 589,
	404, 593, 0, 255, 476, 329, 0, 370, 303, 540,
	541, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 543, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 475, 590,
	0, 0, 0, 0, 0, 0, 0, 524, 536, 570,
	0, 579, 580, 582, 584, 583, 0, 596, 467, 576,
	358, 0, 480, 513, 502, 585, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 517, 499, 509, 500, 485, 486, 487, 494, 308,
	488, 489, 490, 463, 491, 464, 492, 493, 0, 516,
	468, 389, 342, 534, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3564, 0, 196, 778, 0, 0, 0, 0, 0, 271,
	197, 465, 581, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 578, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 598, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 521, 0, 440, 599, 600, 601, 449,
	454, 455, 456, 458, 459, 460, 461, 522, 539, 506,
	477, 442, 530, 474, 478, 542, 0, 0, 0, 433,
	326, 327, 0, 305, 253, 254, 595, 291, 356, 544,
	577, 470, 0, 531, 471, 479, 283, 503, 515, 514,
	352, 432, 0, 526, 529, 462, 594, 0, 523, 538,
	597, 537, 591, 362, 0, 383, 535, 482, 0, 527,
	501, 0, 528, 497, 532, 0, 472, 0, 390, 414,
	426, 443, 446, 473, 557, 558, 559, 258, 445, 561,
	562, 563, 564, 565, 566, 567, 560, 417, 504, 481,
	507, 425, 484, 483, 0, 0, 518, 441, 519, 520,
	346, 347, 348, 349, 309, 545, 276, 444, 372, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	511, 508, 602, 0, 568, 569, 0, 0, 438, 439,
	304, 311, 457, 313, 275, 361, 306, 423, 320, 0,
	450, 512, 451, 571, 574, 572, 573, 353, 316, 317,
	387, 321, 331, 375, 422, 359, 380, 273, 413, 388,
	335, 498, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	552, 551, 550, 549, 548, 547, 546, 0, 0, 495,
	400, 285, 250, 281, 282, 289, 592, 589, 404, 593,
	0, 255, 476, 329, 0, 370, 303, 540, 541, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 543, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 246, 247, 248, 249, 0, 0,
	0, 429, 430, 431, 453, 415, 475, 590, 0, 0,
	0, 0, 0, 0, 0, 524, 536, 570, 0, 579,
	580, 582, 584, 583, 0, 596, 467, 576, 358, 0,
	480, 513, 502, 585, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 0, 0, 328, 517,
	499, 509, 500, 485, 486, 487, 494, 308, 488, 489,
	490, 463, 491, 464, 492, 493, 0, 516, 468, 389,
	342, 534, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 1393, 0, 0, 0, 271, 197, 465,
	581, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1391, 0, 0, 0,
	0, 0, 0, 261, 394, 411, 272, 385, 424, 277,
	392, 267, 357, 381, 0, 0, 263, 409, 391, 339,
	318, 319, 262, 0, 376, 296, 310, 293, 355, 0,
	408, 436, 292, 427, 0, 419, 265, 0, 418, 354,
	405, 410, 340, 334, 264, 407, 338, 333, 322, 300,
	452, 323, 324, 314, 366, 332, 367, 315, 344, 343,
	345, 0, 0, 0, 0, 0, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 0, 0, 578, 0, 421, 0, 0, 0, 0,
	0, 0, 393, 0, 0, 325, 0, 0, 0, 437,
	0, 379, 360, 598, 0, 0, 377, 330, 406, 368,
	412, 395, 420, 373, 369, 256, 396, 295, 341, 268,
	270, 290, 297, 299, 301, 302, 350, 351, 363, 384,
	397, 398, 399, 294, 278, 378, 279, 312, 280, 257,
	286, 284, 287, 386, 288, 259, 364, 403, 0, 307,
	374, 337, 260, 336, 365, 402, 401, 269, 428, 434,
	435, 521, 0, 440, 599, 600, 601, 449, 454, 455,
	456, 458, 459, 460, 461, 522, 539, 506, 477, 442,
	530, 474, 478, 542, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 595, 291, 356, 544, 577, 470,
	0, 531, 471, 479, 283, 503, 515, 514, 352, 432,
	0, 526, 529, 462, 594, 0, 523, 538, 597, 537,
	591, 362, 0, 383, 535, 482, 0, 527, 501, 0,
	528, 497, 532, 0, 472, 0, 390, 414, 426, 443,
	446, 473, 557, 558, 559, 258, 445, 561, 562, 563,
	564, 565, 566, 567, 560, 417, 504, 481, 507, 425,
	484, 483, 0, 0, 518, 441, 519, 520, 346, 347,
	348, 349, 309, 545, 276, 444, 372, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 511, 508,
	602, 0, 568, 569, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 512,
	451, 571, 574, 572, 573, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 498,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 552, 551,
	550, 549, 548, 547, 546, 0, 0, 495, 400, 285,
	250, 281, 282, 289, 592, 589, 404, 593, 0, 255,
	476, 329, 0, 370, 303, 540, 541, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 543, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 475, 590, 0, 0, 0, 0,
	0, 0, 0, 524, 536, 570, 0, 579, 580, 582,
	584, 583, 0, 596, 467, 576, 358, 0, 480, 513,
	502, 585, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 517, 499, 509,
	500, 485, 486, 487, 494, 308, 488, 489, 490, 463,
	491, 464, 492, 493, 0, 516, 468, 389, 342, 534,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 1393, 0, 0, 0, 271, 197, 465, 581, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3226, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 575, 0,
	0, 578, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 598, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 521,
	0, 440, 599, 600, 601, 449, 454, 455, 456, 458,
	459, 460, 461, 522, 539, 506, 477, 442, 530, 474,
	478, 542, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 595, 291, 356, 544, 577, 470, 0, 531,
	471, 479, 283, 503, 515, 514, 352, 432, 0, 526,
	529, 462, 594, 0, 523, 538, 597, 537, 591, 362,
	0, 383, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 472, 0, 390, 414, 426, 443, 446, 473,
	557, 558, 559, 258, 445, 561, 562, 563, 564, 565,
	566, 567, 560, 417, 504, 481, 507, 425, 484, 483,
	0, 0, 518, 441, 519, 520, 346, 347, 348, 349,
	309, 545, 276, 444, 372, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 512, 451, 571,
	574, 572, 573, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 498, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 400, 285, 250, 281,
	282, 289, 592, 589, 404, 593, 0, 255, 476, 329,
	0, 370, 303, 540, 541, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 543,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 475, 590, 0, 0, 0, 0, 0, 0,
	0, 524, 536, 570, 0, 579, 580, 582, 584, 583,
	0, 596, 467, 576, 358, 0, 480, 513, 502, 585,
	469, 0, 0, 0, 0, 0, 2255, 0, 0, 0,
	0, 298, 0, 0, 328, 517, 499, 509, 500, 485,
	486, 487, 494, 308, 488, 489, 490, 463, 491, 464,
	492, 493, 0, 516, 468, 389, 342, 534, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 2257,
	0, 0, 0, 271, 197, 465, 581, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 261,
	394, 411, 272, 385, 424, 277, 392, 267, 357, 381,
	0, 0, 263, 409, 391, 339, 318, 319, 262, 0,
	376, 296, 310, 293, 355, 0, 408, 436, 292, 427,
	0, 419, 265, 0, 418, 354, 405, 410, 340, 334,
	264, 407, 338, 333, 322, 300, 452, 323, 324, 314,
	366, 332, 367, 315, 344, 343, 345, 0, 0, 0,
	0, 0, 447, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 578,
	0, 421, 0, 0, 0, 0, 0, 0, 393, 0,
	0, 325, 0, 0, 0, 437, 0, 379, 360, 598,
	0, 0, 377, 330, 406, 368, 412, 395, 420, 373,
	369, 256, 396, 295, 341, 268, 270, 290, 297, 299,
	301, 302, 350, 351, 363, 384, 397, 398, 399, 294,
	278, 378, 279, 312, 280, 257, 286, 284, 287, 386,
	288, 259, 364, 403, 0, 307, 374, 337, 260, 336,
	365, 402, 401, 269, 428, 434, 435, 521, 0, 440,
	599, 600, 601, 449, 454, 455, 456, 458, 459, 460,
	461, 522, 539, 506, 477, 442, 530, 474, 478, 542,
	0, 0, 0, 433, 326, 327, 0, 305, 253, 254,
	595, 291, 356, 544, 577, 470, 0, 531, 471, 479,
	283, 503, 515, 514, 352, 432, 0, 526, 529, 462,
	594, 0, 523, 538, 597, 537, 591, 362, 0, 383,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	472, 0, 390, 414, 426, 443, 446, 473, 557, 558,
	559, 258, 445, 561, 562, 563, 564, 565, 566, 567,
	560, 417, 504, 481, 507, 425, 484, 483, 0, 0,
	518, 441, 519, 520, 346, 347, 348, 349, 309, 545,
	276, 444, 372, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 438, 439, 304, 311, 457, 313, 275, 361,
	306, 423, 320, 0, 450, 512, 451, 571, 574, 572,
	573, 353, 316, 317, 387, 321, 331, 375, 422, 359,
	380, 273, 413, 388, 335, 498, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 0, 0, 495, 400, 285, 250, 281, 282, 289,
	592, 589, 404, 593, 0, 255, 476, 329, 0, 370,
	303, 540, 541, 206, 207, 208, 209, 210, 211, 212,
	213, 251, 214, 215, 216, 217, 218, 219, 220, 223,
	224, 225, 226, 227, 228, 229, 230, 543, 221, 222,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 0, 0, 0, 252, 246, 247,
	248, 249, 0, 0, 0, 429, 430, 431, 453, 415,
	475, 590, 0, 0, 0, 0, 0, 0, 0, 524,
	536, 570, 0, 579, 580, 582, 584, 583, 0, 596,
	467, 576, 358, 0, 480, 513, 502, 585, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	2276, 0, 328, 517, 499, 509, 500, 485, 486, 487,
	494, 308, 488, 489, 490, 463, 491, 464, 492, 493,
	0, 516, 468, 389, 342, 534, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 0, 0, 1393, 0, 0,
	0, 271, 197, 465, 581, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 394, 411,
	272, 385, 424, 277, 392, 267, 357, 381, 0, 0,
	263, 409, 391, 339, 318, 319, 262, 0, 376, 296,
	310, 293, 355, 0, 408, 436, 292, 427, 0, 419,
	265, 0, 418, 354, 405, 410, 340, 334, 264, 407,
	338, 333, 322, 300, 452, 323, 324, 314, 366, 332,
	367, 315, 344, 343, 345, 0, 0, 0, 0, 0,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 0, 0, 578, 0, 421,
	0, 0, 0, 0, 0, 0, 393, 0, 0, 325,
	0, 0, 0, 437, 0, 379, 360, 598, 0, 0,
	377, 330, 406, 368, 412, 395, 420, 373, 369, 256,
	396, 295, 341, 268, 270, 290, 297, 299, 301, 302,
	350, 351, 363, 384, 397, 398, 399, 294, 278, 378,
	279, 312, 280, 257, 286, 284, 287, 386, 288, 259,
	364, 403, 0, 307, 374, 337, 260, 336, 365, 402,
	401, 269, 428, 434, 435, 521, 0, 440, 599, 600,
	601, 449, 454, 455, 456, 458, 459, 460, 461, 522,
	539, 506, 477, 442, 530, 474, 478, 542, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 595, 291,
	356, 544, 577, 470, 0, 531, 471, 479, 283, 503,
	515, 514, 352, 432, 0, 526, 529, 462, 594, 0,
	523, 538, 597, 537, 591, 362, 0, 383, 535, 482,
	0, 527, 501, 0, 528, 497, 532, 0, 472, 0,
	390, 414, 426, 443, 446, 473, 557, 558, 559, 258,
	445, 561, 562, 563, 564, 565, 566, 567, 560, 417,
	504, 481, 507, 425, 484, 483, 0, 0, 518, 441,
	519, 520, 346, 347, 348, 349, 309, 545, 276, 444,
	372, 0, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 511, 508, 602, 0, 568, 569, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 512, 451, 571, 574, 572, 573, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 498, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 552, 551, 550, 549, 548, 547, 546, 0,
	0, 495, 400, 285, 250, 281, 282, 289, 592, 589,
	404, 593, 0, 255, 476, 329, 0, 370, 303, 540,
	541, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 543, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 475, 590,
	0, 0, 0, 0, 0, 0, 0, 524, 536, 570,
	0, 579, 580, 582, 584, 583, 0, 596, 467, 576,
	358, 0, 480, 513, 502, 585, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 517, 499, 509, 500, 485, 486, 487, 494, 308,
	488, 489, 490, 463, 491, 464, 492, 493, 0, 516,
	468, 389, 342, 534, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 778, 0, 0, 0, 0, 0, 271,
	197, 465, 581, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 578, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 598, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 521, 0, 440, 599, 600, 601, 449,
	454, 455, 456, 458, 459, 460, 461, 522, 539, 506,
	477, 442, 530, 474, 478, 542, 0, 0, 0, 433,
	326, 327, 0, 305, 253, 254, 595, 291, 356, 544,
	577, 470, 0, 531, 471, 479, 283, 503, 515, 514,
	352, 432, 0, 526, 529, 462, 594, 0, 523, 538,
	597, 537, 591, 362, 0, 383, 535, 482, 0, 527,
	501, 0, 528, 497, 532, 0, 472, 0, 390, 414,
	426, 443, 446, 473, 557, 558, 559, 258, 445, 561,
	562, 563, 564, 565, 566, 567, 560, 417, 504, 481,
	507, 425, 484, 483, 0, 0, 518, 441, 519, 520,
	346, 347, 348, 349, 309, 545, 276, 444, 372, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	511, 508, 602, 0, 568, 569, 0, 0, 438, 439,
	304, 311, 457, 313, 275, 361, 306, 423, 320, 0,
	450, 512, 451, 571, 574, 572, 573, 353, 316, 317,
	387, 321, 331, 375, 422, 359, 380, 273, 413, 388,
	335, 498, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	552, 551, 550, 549, 548, 547, 546, 0, 0, 495,
	400, 285, 250, 281, 282, 289, 592, 589, 404, 593,
	0, 255, 476, 329, 0, 370, 303, 540, 541, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 543, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 246, 247, 248, 249, 0, 0,
	0, 429, 430, 431, 453, 415, 475, 590, 0, 0,
	0, 0, 0, 0, 0, 524, 536, 570, 0, 579,
	580, 582, 584, 583, 0, 596, 467, 576, 358, 0,
	480, 513, 502, 585, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 0, 0, 328, 517,
	499, 509, 500, 485, 486, 487, 494, 308, 488, 489,
	490, 463, 491, 464, 492, 493, 0, 516, 468, 389,
	342, 534, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3583, 0, 0,
	196, 0, 0, 0, 0, 0, 0, 271, 197, 465,
	581, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 261, 394, 411, 272, 385, 424, 277,
	392, 267, 357, 381, 0, 0, 263, 409, 391, 339,
	318, 319, 262, 0, 376, 296, 310, 293, 355, 0,
	408, 436, 292, 427, 0, 419, 265, 0, 418, 354,
	405, 410, 340, 334, 264, 407, 338, 333, 322, 300,
	452, 323, 324, 314, 366, 332, 367, 315, 344, 343,
	345, 0, 0, 0, 0, 0, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 0, 0, 578, 0, 421, 0, 0, 0, 0,
	0, 0, 393, 0, 0, 325, 0, 0, 0, 437,
	0, 379, 360, 598, 0, 0, 377, 330, 406, 368,
	412, 395, 420, 373, 369, 256, 396, 295, 341, 268,
	270, 290, 297, 299, 301, 302, 350, 351, 363, 384,
	397, 398, 399, 294, 278, 378, 279, 312, 280, 257,
	286, 284, 287, 386, 288, 259, 364, 403, 0, 307,
	374, 337, 260, 336, 365, 402, 401, 269, 428, 434,
	435, 521, 0, 440, 599, 600, 601, 449, 454, 455,
	456, 458, 459, 460, 461, 522, 539, 506, 477, 442,
	530, 474, 478, 542, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 595, 291, 356, 544, 577, 470,
	0, 531, 471, 479, 283, 503, 515, 514, 352, 432,
	0, 526, 529, 462, 594, 0, 523, 538, 597, 537,
	591, 362, 0, 383, 535, 482, 0, 527, 501, 0,
	528, 497, 532, 0, 472, 0, 390, 414, 426, 443,
	446, 473, 557, 558, 559, 258, 445, 561, 562, 563,
	564, 565, 566, 567, 560, 417, 504, 481, 507, 425,
	484, 483, 0, 0, 518, 441, 519, 520, 346, 347,
	348, 349, 309, 545, 276, 444, 372, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 511, 508,
	602, 0, 568, 569, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 512,
	451, 571, 574, 572, 573, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 498,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 552, 551,
	550, 549, 548, 547, 546, 0, 0, 495, 400, 285,
	250, 281, 282, 289, 592, 589, 404, 593, 0, 255,
	476, 329, 0, 370, 303, 540, 541, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 543, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 475, 590, 0, 0, 0, 0,
	0, 0, 0, 524, 536, 570, 0, 579, 580, 582,
	584, 583, 0, 596, 467, 576, 358, 0, 480, 513,
	502, 585, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 517, 499, 509,
	500, 485, 486, 487, 494, 308, 488, 489, 490, 463,
	491, 464, 492, 493, 0, 516, 468, 389, 342, 534,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 3369, 0, 0, 0, 271, 197, 465, 581, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 575, 0,
	0, 578, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 598, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 521,
	0, 440, 599, 600, 601, 449, 454, 455, 456, 458,
	459, 460, 461, 522, 539, 506, 477, 442, 530, 474,
	478, 542, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 595, 291, 356, 544, 577, 470, 0, 531,
	471, 479, 283, 503, 515, 514, 352, 432, 0, 526,
	529, 462, 594, 0, 523, 538, 597, 537, 591, 362,
	0, 383, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 472, 0, 390, 414, 426, 443, 446, 473,
	557, 558, 559, 258, 445, 561, 562, 563, 564, 565,
	566, 567, 560, 417, 504, 481, 507, 425, 484, 483,
	0, 0, 518, 441, 519, 520, 346, 347, 348, 349,
	309, 545, 276, 444, 372, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 512, 451, 571,
	574, 572, 573, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 498, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 400, 285, 250, 281,
	282, 289, 592, 589, 404, 593, 0, 255, 476, 329,
	0, 370, 303, 540, 541, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 543,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 475, 590, 0, 0, 0, 0, 0, 0,
	0, 524, 536, 570, 0, 579, 580, 582, 584, 583,
	0, 596, 467, 576, 358, 0, 480, 513, 502, 585,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 0, 0, 328, 517, 499, 509, 500, 485,
	486, 487, 494, 308, 488, 489, 490, 463, 491, 464,
	492, 493, 0, 516, 468, 389, 342, 534, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 271, 197, 465, 581, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 261,
	394, 411, 272, 385, 424, 277, 392, 267, 357, 381,
	0, 0, 263, 409, 391, 339, 318, 319, 262, 0,
	376, 296, 310, 293, 355, 0, 408, 436, 292, 427,
	0, 419, 265, 0, 418, 354, 405, 410, 340, 334,
	264, 407, 338, 333, 322, 300, 452, 323, 324, 314,
	366, 332, 367, 315, 344, 343, 345, 0, 0, 0,
	0, 0, 447, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 578,
	0, 421, 0, 0, 0, 3494, 0, 0, 393, 0,
	0, 325, 0, 0, 0, 437, 0, 379, 360, 598,
	0, 0, 377, 330, 406, 368, 412, 395, 420, 373,
	369, 256, 396, 295, 341, 268, 270, 290, 297, 299,
	301, 302, 350, 351, 363, 384, 397, 398, 399, 294,
	278, 378, 279, 312, 280, 257, 286, 284, 287, 386,
	288, 259, 364, 403, 0, 307, 374, 337, 260, 336,
	365, 402, 401, 269, 428, 434, 435, 521, 0, 440,
	599, 600, 601, 449, 454, 455, 456, 458, 459, 460,
	461, 522, 539, 506, 477, 442, 530, 474, 478, 542,
	0, 0, 0, 433, 326, 327, 0, 305, 253, 254,
	595, 291, 356, 544, 577, 470, 0, 531, 471, 479,
	283, 503, 515, 514, 352, 432, 0, 526, 529, 462,
	594, 0, 523, 538, 597, 537, 591, 362, 0, 383,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	472, 0, 390, 414, 426, 443, 446, 473, 557, 558,
	559, 258, 445, 561, 562, 563, 564, 565, 566, 567,
	560, 417, 504, 481, 507, 425, 484, 483, 0, 0,
	518, 441, 519, 520, 346, 347, 348, 349, 309, 545,
	276, 444, 372, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 438, 439, 304, 311, 457, 313, 275, 361,
	306, 423, 320, 0, 450, 512, 451, 571, 574, 572,
	573, 353, 316, 317, 387, 321, 331, 375, 422, 359,
	380, 273, 413, 388, 335, 498, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 0, 0, 495, 400, 285, 250, 281, 282, 289,
	592, 589, 404, 593, 0, 255, 476, 329, 0, 370,
	303, 540, 541, 206, 207, 208, 209, 210, 211, 212,
	213, 251, 214, 215, 216, 217, 218, 219, 220, 223,
	224, 225, 226, 227, 228, 229, 230, 543, 221, 222,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 0, 0, 0, 252, 246, 247,
	248, 249, 0, 0, 0, 429, 430, 431, 453, 415,
	475, 590, 0, 0, 0, 0, 0, 0, 0, 524,
	536, 570, 0, 579, 580, 582, 584, 583, 0, 596,
	467, 576, 358, 0, 480, 513, 502, 585, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	0, 0, 328, 517, 499, 509, 500, 485, 486, 487,
	494, 308, 488, 489, 490, 463, 491, 464, 492, 493,
	0, 516, 468, 389, 342, 534, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3222, 0, 0, 196, 0, 0, 0, 0, 0,
	0, 271, 197, 465, 581, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 394, 411,
	272, 385, 424, 277, 392, 267, 357, 381, 0, 0,
	263, 409, 391, 339, 318, 319, 262, 0, 376, 296,
	310, 293, 355, 0, 408, 436, 292, 427, 0, 419,
	265, 0, 418, 354, 405, 410, 340, 334, 264, 407,
	338, 333, 322, 300, 452, 323, 324, 314, 366, 332,
	367, 315, 344, 343, 345, 0, 0, 0, 0, 0,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 0, 0, 578, 0, 421,
	0, 0, 0, 0, 0, 0, 393, 0, 0, 325,
	0, 0, 0, 437, 0, 379, 360, 598, 0, 0,
	377, 330, 406, 368, 412, 395, 420, 373, 369, 256,
	396, 295, 341, 268, 270, 290, 297, 299, 301, 302,
	350, 351, 363, 384, 397, 398, 399, 294, 278, 378,
	279, 312, 280, 257, 286, 284, 287, 386, 288, 259,
	364, 403, 0, 307, 374, 337, 260, 336, 365, 402,
	401, 269, 428, 434, 435, 521, 0, 440, 599, 600,
	601, 449, 454, 455, 456, 458, 459, 460, 461, 522,
	539, 506, 477, 442, 530, 474, 478, 542, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 595, 291,
	356, 544, 577, 470, 0, 531, 471, 479, 283, 503,
	515, 514, 352, 432, 0, 526, 529, 462, 594, 0,
	523, 538, 597, 537, 591, 362, 0, 383, 535, 482,
	0, 527, 501, 0, 528, 497, 532, 0, 472, 0,
	390, 414, 426, 443, 446, 473, 557, 558, 559, 258,
	445, 561, 562, 563, 564, 565, 566, 567, 560, 417,
	504, 481, 507, 425, 484, 483, 0, 0, 518, 441,
	519, 520, 346, 347, 348, 349, 309, 545, 276, 444,
	372, 0, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 511, 508, 602, 0, 568, 569, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 512, 451, 571, 574, 572, 573, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 498, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 552, 551, 550, 549, 548, 547, 546, 0,
	0, 495, 400, 285, 250, 281, 282, 289, 592, 589,
	404, 593, 0, 255, 476, 329, 0, 370, 303, 540,
	541, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 543, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 475, 590,
	0, 0, 0, 0, 0, 0, 0, 524, 536, 570,
	0, 579, 580, 582, 584, 583, 0, 596, 467, 576,
	358, 0, 480, 513, 502, 585, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 517, 499, 509, 500, 485, 486, 487, 494, 308,
	488, 489, 490, 463, 491, 464, 492, 493, 0, 516,
	468, 389, 342, 534, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3384, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 581, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 578, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 598, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 521, 0, 440, 599, 600, 601, 449,
	454, 455, 456, 458, 459, 460, 461, 522, 539, 506,
	477, 442, 530, 474, 478, 542, 0, 0, 0, 433,
	326, 327, 0, 305, 253, 254, 595, 291, 356, 544,
	577, 470, 0, 531, 471, 479, 283, 503, 515, 514,
	352, 432, 0, 526, 529, 462, 594, 0, 523, 538,
	597, 537, 591, 362, 0, 383, 535, 482, 0, 527,
	501, 0, 528, 497, 532, 0, 472, 0, 390, 414,
	426, 443, 446, 473, 557, 558, 559, 258, 445, 561,
	562, 563, 564, 565, 566, 567, 560, 417, 504, 481,
	507, 425, 484, 483, 0, 0, 518, 441, 519, 520,
	346, 347, 348, 349, 309, 545, 276, 444, 372, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	511, 508, 602, 0, 568, 569, 0, 0, 438, 439,
	304, 311, 457, 313, 275, 361, 306, 423, 320, 0,
	450, 512, 451, 571, 574, 572, 573, 353, 316, 317,
	387, 321, 331, 375, 422, 359, 380, 273, 413, 388,
	335, 498, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	552, 551, 550, 549, 548, 547, 546, 0, 0, 495,
	400, 285, 250, 281, 282, 289, 592, 589, 404, 593,
	0, 255, 476, 329, 0, 370, 303, 540, 541, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 543, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 246, 247, 248, 249, 0, 0,
	0, 429, 430, 431, 453, 415, 475, 590, 0, 0,
	0, 0, 0, 0, 0, 524, 536, 570, 0, 579,
	580, 582, 584, 583, 0, 596, 467, 576, 358, 0,
	480, 513, 502, 585, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 0, 0, 328, 517,
	499, 509, 500, 485, 486, 487, 494, 308, 488, 489,
	490, 463, 491, 464, 492, 493, 0, 516, 468, 389,
	342, 534, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 0, 0, 0, 0, 271, 197, 465,
	581, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 261, 394, 411, 272, 385, 424, 277,
	392, 267, 357, 381, 0, 0, 263, 409, 391, 339,
	318, 319, 262, 0, 376, 296, 310, 293, 355, 0,
	408, 436, 292, 427, 0, 419, 265, 0, 418, 354,
	405, 410, 340, 334, 264, 407, 338, 333, 322, 300,
	452, 323, 324, 314, 366, 332, 367, 315, 344, 343,
	345, 0, 0, 0, 0, 0, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 0, 0, 578, 0, 421, 0, 0, 0, 3308,
	0, 0, 393, 0, 0, 325, 0, 0, 0, 437,
	0, 379, 360, 598, 0, 0, 377, 330, 406, 368,
	412, 395, 420, 373, 369, 256, 396, 295, 341, 268,
	270, 290, 297, 299, 301, 302, 350, 351, 363, 384,
	397, 398, 399, 294, 278, 378, 279, 312, 280, 257,
	286, 284, 287, 386, 288, 259, 364, 403, 0, 307,
	374, 337, 260, 336, 365, 402, 401, 269, 428, 434,
	435, 521, 0, 440, 599, 600, 601, 449, 454, 455,
	456, 458, 459, 460, 461, 522, 539, 506, 477, 442,
	530, 474, 478, 542, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 595, 291, 356, 544, 577, 470,
	0, 531, 471, 479, 283, 503, 515, 514, 352, 432,
	0, 526, 529, 462, 594, 0, 523, 538, 597, 537,
	591, 362, 0, 383, 535, 482, 0, 527, 501, 0,
	528, 497, 532, 0, 472, 0, 390, 414, 426, 443,
	446, 473, 557, 558, 559, 258, 445, 561, 562, 563,
	564, 565, 566, 567, 560, 417, 504, 481, 507, 425,
	484, 483, 0, 0, 518, 441, 519, 520, 346, 347,
	348, 349, 309, 545, 276, 444, 372, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 511, 508,
	602, 0, 568, 569, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 512,
	451, 571, 574, 572, 573, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 498,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 552, 551,
	550, 549, 548, 547, 546, 0, 0, 495, 400, 285,
	250, 281, 282, 289, 592, 589, 404, 593, 0, 255,
	476, 329, 0, 370, 303, 540, 541, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 543, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 475, 590, 0, 0, 0, 0,
	0, 0, 0, 524, 536, 570, 0, 579, 580, 582,
	584, 583, 0, 596, 467, 576, 358, 0, 480, 513,
	502, 585, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 517, 499, 509,
	500, 485, 486, 487, 494, 308, 488, 489, 490, 463,
	491, 464, 492, 493, 0, 516, 468, 389, 342, 534,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 2870, 0, 0, 0, 271, 197, 465, 581, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 575, 0,
	0, 578, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 598, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 521,
	0, 440, 599, 600, 601, 449, 454, 455, 456, 458,
	459, 460, 461, 522, 539, 506, 477, 442, 530, 474,
	478, 542, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 595, 291, 356, 544, 577, 470, 0, 531,
	471, 479, 283, 503, 515, 514, 352, 432, 0, 526,
	529, 462, 594, 0, 523, 538, 597, 537, 591, 362,
	0, 383, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 472, 0, 390, 414, 426, 443, 446, 473,
	557, 558, 559, 258, 445, 561, 562, 563, 564, 565,
	566, 567, 560, 417, 504, 481, 507, 425, 484, 483,
	0, 0, 518, 441, 519, 520, 346, 347, 348, 349,
	309, 545, 276, 444, 372, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 512, 451, 571,
	574, 572, 573, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 498, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 400, 285, 250, 281,
	282, 289, 592, 589, 404, 593, 0, 255, 476, 329,
	0, 370, 303, 540, 541, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 543,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 475, 590, 0, 0, 0, 0, 0, 0,
	0, 524, 536, 570, 0, 579, 580, 582, 584, 583,
	0, 596, 467, 576, 358, 0, 480, 513, 502, 585,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 0, 0, 328, 517, 499, 509, 500, 485,
	486, 487, 494, 308, 488, 489, 490, 463, 491, 464,
	492, 493, 0, 516, 468, 389, 342, 534, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 271, 197, 465, 581, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2886, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 261,
	394, 411, 272, 385, 424, 277, 392, 267, 357, 381,
	0, 0, 263, 409, 391, 339, 318, 319, 262, 0,
	376, 296, 310, 293, 355, 0, 408, 436, 292, 427,
	0, 419, 265, 0, 418, 354, 405, 410, 340, 334,
	264, 407, 338, 333, 322, 300, 452, 323, 324, 314,
	366, 332, 367, 315, 344, 343, 345, 0, 0, 0,
	0, 0, 447, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 578,
	0, 421, 0, 0, 0, 0, 0, 0, 393, 0,
	0, 325, 0, 0, 0, 437, 0, 379, 360, 598,
	0, 0, 377, 330, 406, 368, 412, 395, 420, 373,
	369, 256, 396, 295, 341, 268, 270, 290, 297, 299,
	301, 302, 350, 351, 363, 384, 397, 398, 399, 294,
	278, 378, 279, 312, 280, 257, 286, 284, 287, 386,
	288, 259, 364, 403, 0, 307, 374, 337, 260, 336,
	365, 402, 401, 269, 428, 434, 435, 521, 0, 440,
	599, 600, 601, 449, 454, 455, 456, 458, 459, 460,
	461, 522, 539, 506, 477, 442, 530, 474, 478, 542,
	0, 0, 0, 433, 326, 327, 0, 305, 253, 254,
	595, 291, 356, 544, 577, 470, 0, 531, 471, 479,
	283, 503, 515, 514, 352, 432, 0, 526, 529, 462,
	594, 0, 523, 538, 597, 537, 591, 362, 0, 383,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	472, 0, 390, 414, 426, 443, 446, 473, 557, 558,
	559, 258, 445, 561, 562, 563, 564, 565, 566, 567,
	560, 417, 504, 481, 507, 425, 484, 483, 0, 0,
	518, 441, 519, 520, 346, 347, 348, 349, 309, 545,
	276, 444, 372, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 438, 439, 304, 311, 457, 313, 275, 361,
	306, 423, 320, 0, 450, 512, 451, 571, 574, 572,
	573, 353, 316, 317, 387, 321, 331, 375, 422, 359,
	380, 273, 413, 388, 335, 498, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 0, 0, 495, 400, 285, 250, 281, 282, 289,
	592, 589, 404, 593, 0, 255, 476, 329, 0, 370,
	303, 540, 541, 206, 207, 208, 209, 210, 211, 212,
	213, 251, 214, 215, 216, 217, 218, 219, 220, 223,
	224, 225, 226, 227, 228, 229, 230, 543, 221, 222,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 0, 0, 0, 252, 246, 247,
	248, 249, 0, 0, 0, 429, 430, 431, 453, 415,
	475, 590, 0, 0, 0, 0, 0, 0, 0, 524,
	536, 570, 0, 579, 580, 582, 584, 583, 0, 596,
	467, 576, 358, 0, 480, 513, 502, 585, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	0, 0, 328, 517, 499, 509, 500, 485, 486, 487,
	494, 308, 488, 489, 490, 463, 491, 464, 492, 493,
	0, 516, 468, 389, 342, 534, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1849, 0, 0, 196, 0, 0, 0, 0, 0,
	0, 271, 197, 465, 581, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 394, 411,
	272, 385, 424, 277, 392, 267, 357, 381, 0, 0,
	263, 409, 391, 339, 318, 319, 262, 0, 376, 296,
	310, 293, 355, 0, 408, 436, 292, 427, 0, 419,
	265, 0, 418, 354, 405, 410, 340, 334, 264, 407,
	338, 333, 322, 300, 452, 323, 324, 314, 366, 332,
	367, 315, 344, 343, 345, 0, 0, 0, 0, 0,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 0, 0, 578, 0, 421,
	0, 0, 0, 0, 0, 0, 393, 0, 0, 325,
	0, 0, 0, 437, 0, 379, 360, 598, 0, 0,
	377, 330, 406, 368, 412, 395, 420, 373, 369, 256,
	396, 295, 341, 268, 270, 290, 297, 299, 301, 302,
	350, 351, 363, 384, 397, 398, 399, 294, 278, 378,
	279, 312, 280, 257, 286, 284, 287, 386, 288, 259,
	364, 403, 0, 307, 374, 337, 260, 336, 365, 402,
	401, 269, 428, 434, 435, 521, 0, 440, 599, 600,
	601, 449, 454, 455, 456, 458, 459, 460, 461, 522,
	539, 506, 477, 442, 530, 474, 478, 542, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 595, 291,
	356, 544, 577, 470, 0, 531, 471, 479, 283, 503,
	515, 514, 352, 432, 0, 526, 529, 462, 594, 0,
	523, 538, 597, 537, 591, 362, 0, 383, 535, 482,
	0, 527, 501, 0, 528, 497, 532, 0, 472, 0,
	390, 414, 426, 443, 446, 473, 557, 558, 559, 258,
	445, 561, 562, 563, 564, 565, 566, 567, 560, 417,
	504, 481, 507, 425, 484, 483, 0, 0, 518, 441,
	519, 520, 346, 347, 348, 349, 309, 545, 276, 444,
	372, 0, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 511, 508, 602, 0, 568, 569, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 512, 451, 571, 574, 572, 573, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 498, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 552, 551, 550, 549, 548, 547, 546, 0,
	0, 495, 400, 285, 250, 281, 282, 289, 592, 589,
	404, 593, 0, 255, 476, 329, 0, 370, 303, 540,
	541, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 543, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 475, 590,
	0, 0, 0, 0, 0, 0, 0, 524, 536, 570,
	0, 579, 580, 582, 584, 583, 0, 596, 467, 576,
	358, 0, 480, 513, 502, 585, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 517, 499, 509, 500, 485, 486, 487, 494, 308,
	488, 489, 490, 463, 491, 464, 492, 493, 0, 516,
	468, 389, 342, 534, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 581, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2983,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 578, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 598, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 521, 0, 440, 599, 600, 601, 449,
	454, 455, 456, 458, 459, 460, 461, 522, 539, 506,
	477, 442, 530, 474, 478, 542, 0, 0, 0, 433,
	326, 327, 0, 305, 253, 254, 595, 291, 356, 544,
	577, 470, 0, 531, 471, 479, 283, 503, 515, 514,
	352, 432, 0, 526, 529, 462, 594, 0, 523, 538,
	597, 537, 591, 362, 0, 383, 535, 482, 0, 527,
	501, 0, 528, 497, 532, 0, 472, 0, 390, 414,
	426, 443, 446, 473, 557, 558, 559, 258, 445, 561,
	562, 563, 564, 565, 566, 567, 560, 417, 504, 481,
	507, 425, 484, 483, 0, 0, 518, 441, 519, 520,
	346, 347, 348, 349, 309, 545, 276, 444, 372, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	511, 508, 602, 0, 568, 569, 0, 0, 438, 439,
	304, 311, 457, 313, 275, 361, 306, 423, 320, 0,
	450, 512, 451, 571, 574, 572, 573, 353, 316, 317,
	387, 321, 331, 375, 422, 359, 380, 273, 413, 388,
	335, 498, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	552, 551, 550, 549, 548, 547, 546, 0, 0, 495,
	400, 285, 250, 281, 282, 289, 592, 589, 404, 593,
	0, 255, 476, 329, 0, 370, 303, 540, 541, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 543, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 246, 247, 248, 249, 0, 0,
	0, 429, 430, 431, 453, 415, 475, 590, 0, 0,
	0, 0, 0, 0, 0, 524, 536, 570, 0, 579,
	580, 582, 584, 583, 0, 596, 467, 576, 358, 0,
	480, 513, 502, 585, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 0, 0, 328, 517,
	499, 509, 500, 485, 486, 487, 494, 308, 488, 489,
	490, 463, 491, 464, 492, 493, 0, 516, 468, 389,
	342, 534, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 2839, 0, 0, 0, 271, 197, 465,
	581, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 261, 394, 411, 272, 385, 424, 277,
	392, 267, 357, 381, 0, 0, 263, 409, 391, 339,
	318, 319, 262, 0, 376, 296, 310, 293, 355, 0,
	408, 436, 292, 427, 0, 419, 265, 0, 418, 354,
	405, 410, 340, 334, 264, 407, 338, 333, 322, 300,
	452, 323, 324, 314, 366, 332, 367, 315, 344, 343,
	345, 0, 0, 0, 0, 0, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 0, 0, 578, 0, 421, 0, 0, 0, 0,
	0, 0, 393, 0, 0, 325, 0, 0, 0, 437,
	0, 379, 360, 598, 0, 0, 377, 330, 406, 368,
	412, 395, 420, 373, 369, 256, 396, 295, 341, 268,
	270, 290, 297, 299, 301, 302, 350, 351, 363, 384,
	397, 398, 399, 294, 278, 378, 279, 312, 280, 257,
	286, 284, 287, 386, 288, 259, 364, 403, 0, 307,
	374, 337, 260, 336, 365, 402, 401, 269, 428, 434,
	435, 521, 0, 440, 599, 600, 601, 449, 454, 455,
	456, 458, 459, 460, 461, 522, 539, 506, 477, 442,
	530, 474, 478, 542, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 595, 291, 356, 544, 577, 470,
	0, 531, 471, 479, 283, 503, 515, 514, 352, 432,
	0, 526, 529, 462, 594, 0, 523, 538, 597, 537,
	591, 362, 0, 383, 535, 482, 0, 527, 501, 0,
	528, 497, 532, 0, 472, 0, 390, 414, 426, 443,
	446, 473, 557, 558, 559, 258, 445, 561, 562, 563,
	564, 565, 566, 567, 560, 417, 504, 481, 507, 425,
	484, 483, 0, 0, 518, 441, 519, 520, 346, 347,
	348, 349, 309, 545, 276, 444, 372, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 511, 508,
	602, 0, 568, 569, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 512,
	451, 571, 574, 572, 573, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 498,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 552, 551,
	550, 549, 548, 547, 546, 0, 0, 495, 400, 285,
	250, 281, 282, 289, 592, 589, 404, 593, 0, 255,
	476, 329, 0, 370, 303, 540, 541, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 543, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 475, 590, 0, 0, 0, 0,
	0, 0, 0, 524, 536, 570, 0, 579, 580, 582,
	584, 583, 0, 596, 467, 576, 358, 0, 480, 513,
	502, 585, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 517, 499, 509,
	500, 485, 486, 487, 494, 308, 488, 489, 490, 463,
	491, 464, 492, 493, 0, 516, 468, 389, 342, 534,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 581, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2752, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 575, 0,
	0, 578, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 598, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 521,
	0, 440, 599, 600, 601, 449, 454, 455, 456, 458,
	459, 460, 461, 522, 539, 506, 477, 442, 530, 474,
	478, 542, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 595, 291, 356, 544, 577, 470, 0, 531,
	471, 479, 283, 503, 515, 514, 352, 432, 0, 526,
	529, 462, 594, 0, 523, 538, 597, 537, 591, 362,
	0, 383, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 472, 0, 390, 414, 426, 443, 446, 473,
	557, 558, 559, 258, 445, 561, 562, 563, 564, 565,
	566, 567, 560, 417, 504, 481, 507, 425, 484, 483,
	0, 0, 518, 441, 519, 520, 346, 347, 348, 349,
	309, 545, 276, 444, 372, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 512, 451, 571,
	574, 572, 573, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 498, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 400, 285, 250, 281,
	282, 289, 592, 589, 404, 593, 0, 255, 476, 329,
	0, 370, 303, 540, 541, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 543,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 475, 590, 0, 0, 0, 0, 0, 0,
	0, 524, 536, 570, 0, 579, 580, 582, 584, 583,
	0, 596, 467, 576, 358, 0, 480, 513, 502, 585,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 0, 0, 328, 517, 499, 509, 500, 485,
	486, 487, 494, 308, 488, 489, 490, 463, 491, 464,
	492, 493, 0, 516, 468, 389, 342, 534, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 1393,
	0, 0, 0, 271, 197, 465, 581, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 261,
	394, 411, 272, 385, 424, 277, 392, 267, 357, 381,
	0, 0, 263, 409, 391, 339, 318, 319, 262, 0,
	376, 296, 310, 293, 355, 0, 408, 436, 292, 427,
	0, 419, 265, 0, 418, 354, 405, 410, 340, 334,
	264, 407, 338, 333, 322, 300, 452, 323, 324, 314,
	366, 332, 367, 315, 344, 343, 345, 0, 0, 0,
	0, 0, 447, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 578,
	0, 421, 0, 0, 0, 0, 0, 0, 393, 0,
	0, 325, 0, 0, 0, 437, 0, 379, 360, 598,
	0, 0, 377, 330, 406, 368, 412, 395, 420, 373,
	369, 256, 396, 295, 341, 268, 270, 290, 297, 299,
	301, 302, 350, 351, 363, 384, 397, 398, 399, 294,
	278, 378, 279, 312, 280, 257, 286, 284, 287, 386,
	288, 259, 364, 403, 0, 307, 374, 337, 260, 336,
	365, 402, 401, 269, 428, 434, 435, 521, 0, 440,
	599, 600, 601, 449, 454, 455, 456, 458, 459, 460,
	461, 522, 539, 506, 477, 442, 530, 474, 478, 542,
	0, 0, 0, 433, 326, 327, 0, 305, 253, 254,
	595, 291, 356, 544, 577, 470, 0, 531, 471, 479,
	283, 503, 515, 514, 352, 432, 0, 526, 529, 462,
	594, 0, 523, 538, 597, 537, 591, 362, 0, 383,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	472, 0, 390, 414, 426, 443, 446, 473, 557, 558,
	559, 258, 445, 561, 562, 563, 564, 565, 566, 567,
	560, 417, 504, 481, 507, 425, 484, 483, 0, 0,
	518, 441, 519, 520, 346, 347, 348, 349, 309, 545,
	276, 444, 372, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 438, 439, 304, 311, 457, 313, 275, 361,
	306, 423, 320, 0, 450, 512, 451, 571, 574, 572,
	573, 353, 316, 317, 387, 321, 331, 375, 422, 359,
	380, 273, 413, 388, 335, 498, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 0, 0, 495, 400, 285, 250, 281, 282, 289,
	592, 589, 404, 593, 0, 255, 476, 329, 0, 370,
	303, 540, 541, 206, 207, 208, 209, 210, 211, 212,
	213, 251, 214, 215, 216, 217, 218, 219, 220, 223,
	224, 225, 226, 227, 228, 229, 230, 543, 221, 222,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 0, 0, 0, 252, 246, 247,
	248, 249, 0, 0, 0, 429, 430, 431, 453, 415,
	475, 590, 0, 0, 0, 0, 0, 0, 0, 524,
	536, 570, 0, 579, 580, 582, 584, 583, 0, 596,
	467, 576, 358, 0, 480, 513, 502, 585, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	0, 0, 328, 517, 499, 509, 500, 485, 486, 487,
	494, 308, 488, 489, 490, 463, 491, 464, 492, 493,
	0, 516, 468, 389, 342, 534, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 0, 0, 2257, 0, 0,
	0, 271, 197, 465, 581, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 394, 411,
	272, 385, 424, 277, 392, 267, 357, 381, 0, 0,
	263, 409, 391, 339, 318, 319, 262, 0, 376, 296,
	310, 293, 355, 0, 408, 436, 292, 427, 0, 419,
	265, 0, 418, 354, 405, 410, 340, 334, 264, 407,
	338, 333, 322, 300, 452, 323, 324, 314, 366, 332,
	367, 315, 344, 343, 345, 0, 0, 0, 0, 0,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 0, 0, 578, 0, 421,
	0, 0, 0, 0, 0, 0, 393, 0, 0, 325,
	0, 0, 0, 437, 0, 379, 360, 598, 0, 0,
	377, 330, 406, 368, 412, 395, 420, 373, 369, 256,
	396, 295, 341, 268, 270, 290, 297, 299, 301, 302,
	350, 351, 363, 384, 397, 398, 399, 294, 278, 378,
	279, 312, 280, 257, 286, 284, 287, 386, 288, 259,
	364, 403, 0, 307, 374, 337, 260, 336, 365, 402,
	401, 269, 428, 434, 435, 521, 0, 440, 599, 600,
	601, 449, 454, 455, 456, 458, 459, 460, 461, 522,
	539, 506, 477, 442, 530, 474, 478, 542, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 595, 291,
	356, 544, 577, 470, 0, 531, 471, 479, 283, 503,
	515, 514, 352, 432, 0, 526, 529, 462, 594, 0,
	523, 538, 597, 537, 591, 362, 0, 383, 535, 482,
	0, 527, 501, 0, 528, 497, 532, 0, 472, 0,
	390, 414, 426, 443, 446, 473, 557, 558, 559, 258,
	445, 561, 562, 563, 564, 565, 566, 567, 560, 417,
	504, 481, 507, 425, 484, 483, 0, 0, 518, 441,
	519, 520, 346, 347, 348, 349, 309, 545, 276, 444,
	372, 0, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 511, 508, 602, 0, 568, 569, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 512, 451, 571, 574, 572, 573, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 498, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 552, 551, 550, 549, 548, 547, 546, 0,
	0, 495, 400, 285, 250, 281, 282, 289, 592, 589,
	404, 593, 0, 255, 476, 329, 0, 370, 303, 540,
	541, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 543, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 475, 590,
	0, 0, 0, 0, 0, 0, 0, 524, 536, 570,
	0, 579, 580, 582, 584, 583, 0, 596, 467, 576,
	358, 0, 480, 513, 502, 585, 469, 0, 0, 2582,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 517, 499, 509, 500, 485, 486, 487, 494, 308,
	488, 489, 490, 463, 491, 464, 492, 493, 0, 516,
	468, 389, 342, 534, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 581, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 578, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 598, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 521, 0, 440, 599, 600, 601, 449,
	454, 455, 456, 458, 459, 460, 461, 522, 539, 506,
	477, 442, 530, 474, 478, 542, 0, 0, 0, 433,
	326, 327, 0, 305, 253, 254, 595, 291, 356, 544,
	577, 470, 0, 531, 471, 479, 283, 503, 515, 514,
	352, 432, 0, 526, 529, 462, 594, 0, 523, 538,
	597, 537, 591, 362, 0, 383, 535, 482, 0, 527,
	501, 0, 528, 497, 532, 0, 472, 0, 390, 414,
	426, 443, 446, 473, 557, 558, 559, 258, 445, 561,
	562, 563, 564, 565, 566, 567, 560, 417, 504, 481,
	507, 425, 484, 483, 0, 0, 518, 441, 519, 520,
	346, 347, 348, 349, 309, 545, 276, 444, 372, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	511, 508, 602, 0, 568, 569, 0, 0, 438, 439,
	304, 311, 457, 313, 275, 361, 306, 423, 320, 0,
	450, 512, 451, 571, 574, 572, 573, 353, 316, 317,
	387, 321, 331, 375, 422, 359, 380, 273, 413, 388,
	335, 498, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	552, 551, 550, 549, 548, 547, 546, 0, 0, 495,
	400, 285, 250, 281, 282, 289, 592, 589, 404, 593,
	0, 255, 476, 329, 0, 370, 303, 540, 541, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 543, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 246, 247, 248, 249, 0, 0,
	0, 429, 430, 431, 453, 415, 475, 590, 0, 0,
	0, 0, 0, 0, 0, 524, 536, 570, 0, 579,
	580, 582, 584, 583, 0, 596, 467, 576, 358, 0,
	480, 513, 502, 585, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 0, 0, 328, 517,
	499, 509, 500, 485, 486, 487, 494, 308, 488, 489,
	490, 463, 491, 464, 492, 493, 0, 516, 468, 389,
	342, 534, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 0, 0, 0, 0, 271, 197, 465,
	581, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1978, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 261, 394, 411, 272, 385, 424, 277,
	392, 267, 357, 381, 0, 0, 263, 409, 391, 339,
	318, 319, 262, 0, 376, 296, 310, 293, 355, 0,
	408, 436, 292, 427, 0, 419, 265, 0, 418, 354,
	405, 410, 340, 334, 264, 407, 338, 333, 322, 300,
	452, 323, 324, 314, 366, 332, 367, 315, 344, 343,
	345, 0, 0, 0, 0, 0, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 0, 0, 578, 0, 421, 0, 0, 0, 0,
	0, 0, 393, 0, 0, 325, 0, 0, 0, 437,
	0, 379, 360, 598, 0, 0, 377, 330, 406, 368,
	412, 395, 420, 373, 369, 256, 396, 295, 341, 268,
	270, 290, 297, 299, 301, 302, 350, 351, 363, 384,
	397, 398, 399, 294, 278, 378, 279, 312, 280, 257,
	286, 284, 287, 386, 288, 259, 364, 403, 0, 307,
	374, 337, 260, 336, 365, 402, 401, 269, 428, 434,
	435, 521, 0, 440, 599, 600, 601, 449, 454, 455,
	456, 458, 459, 460, 461, 522, 539, 506, 477, 442,
	530, 474, 478, 542, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 595, 291, 356, 544, 577, 470,
	0, 531, 471, 479, 283, 503, 515, 514, 352, 432,
	0, 526, 529, 462, 594, 0, 523, 538, 597, 537,
	591, 362, 0, 383, 535, 482, 0, 527, 501, 0,
	528, 497, 532, 0, 472, 0, 390, 414, 426, 443,
	446, 473, 557, 558, 559, 258, 445, 561, 562, 563,
	564, 565, 566, 567, 560, 417, 504, 481, 507, 425,
	484, 483, 0, 0, 518, 441, 519, 520, 346, 347,
	348, 349, 309, 545, 276, 444, 372, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 511, 508,
	602, 0, 568, 569, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 512,
	451, 571, 574, 572, 573, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 498,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 552, 551,
	550, 549, 548, 547, 546, 0, 0, 495, 400, 285,
	250, 281, 282, 289, 592, 589, 404, 593, 0, 255,
	476, 329, 0, 370, 303, 540, 541, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 543, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 475, 590, 0, 0, 0, 0,
	0, 0, 0, 524, 536, 570, 0, 579, 580, 582,
	584, 583, 0, 596, 467, 576, 358, 0, 480, 513,
	502, 585, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 517, 499, 509,
	500, 485, 486, 487, 494, 308, 488, 489, 490, 463,
	491, 464, 492, 493, 0, 516, 468, 389, 342, 534,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 581, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2334, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 575, 0,
	0, 578, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 598, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 521,
	0, 440, 599, 600, 601, 449, 454, 455, 456, 458,
	459, 460, 461, 522, 539, 506, 477, 442, 530, 474,
	478, 542, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 595, 291, 356, 544, 577, 470, 0, 531,
	471, 479, 283, 503, 515, 514, 352, 432, 0, 526,
	529, 462, 594, 0, 523, 538, 597, 537, 591, 362,
	0, 383, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 472, 0, 390, 414, 426, 443, 446, 473,
	557, 558, 559, 258, 445, 561, 562, 563, 564, 565,
	566, 567, 560, 417, 504, 481, 507, 425, 484, 483,
	0, 0, 518, 441, 519, 520, 346, 347, 348, 349,
	309, 545, 276, 444, 372, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 512, 451, 571,
	574, 572, 573, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 498, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 400, 285, 250, 281,
	282, 289, 592, 589, 404, 593, 0, 255, 476, 329,
	0, 370, 303, 540, 541, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 543,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 475, 590, 0, 0, 0, 0, 0, 0,
	0, 524, 536, 570, 0, 579, 580, 582, 584, 583,
	0, 596, 467, 576, 358, 0, 480, 513, 502, 585,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 0, 0, 328, 517, 499, 509, 500, 485,
	486, 487, 494, 308, 488, 489, 490, 463, 491, 464,
	492, 493, 0, 516, 468, 389, 342, 534, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 2332,
	0, 0, 0, 271, 197, 465, 581, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 261,
	394, 411, 272, 385, 424, 277, 392, 267, 357, 381,
	0, 0, 263, 409, 391, 339, 318, 319, 262, 0,
	376, 296, 310, 293, 355, 0, 408, 436, 292, 427,
	0, 419, 265, 0, 418, 354, 405, 410, 340, 334,
	264, 407, 338, 333, 322, 300, 452, 323, 324, 314,
	366, 332, 367, 315, 344, 343, 345, 0, 0, 0,
	0, 0, 447, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 578,
	0, 421, 0, 0, 0, 0, 0, 0, 393, 0,
	0, 325, 0, 0, 0, 437, 0, 379, 360, 598,
	0, 0, 377, 330, 406, 368, 412, 395, 420, 373,
	369, 256, 396, 295, 341, 268, 270, 290, 297, 299,
	301, 302, 350, 351, 363, 384, 397, 398, 399, 294,
	278, 378, 279, 312, 280, 257, 286, 284, 287, 386,
	288, 259, 364, 403, 0, 307, 374, 337, 260, 336,
	365, 402, 401, 269, 428, 434, 435, 521, 0, 440,
	599, 600, 601, 449, 454, 455, 456, 458, 459, 460,
	461, 522, 539, 506, 477, 442, 530, 474, 478, 542,
	0, 0, 0, 433, 326, 327, 0, 305, 253, 254,
	595, 291, 356, 544, 577, 470, 0, 531, 471, 479,
	283, 503, 515, 514, 352, 432, 0, 526, 529, 462,
	594, 0, 523, 538, 597, 537, 591, 362, 0, 383,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	472, 0, 390, 414, 426, 443, 446, 473, 557, 558,
	559, 258, 445, 561, 562, 563, 564, 565, 566, 567,
	560, 417, 504, 481, 507, 425, 484, 483, 0, 0,
	518, 441, 519, 520, 346, 347, 348, 349, 309, 545,
	276, 444, 372, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 438, 439, 304, 311, 457, 313, 275, 361,
	306, 423, 320, 0, 450, 512, 451, 571, 574, 572,
	573, 353, 316, 317, 387, 321, 331, 375, 422, 359,
	380, 273, 413, 388, 335, 498, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 0, 0, 495, 400, 285, 250, 281, 282, 289,
	592, 589, 404, 593, 0, 255, 476, 329, 0, 370,
	303, 540, 541, 206, 207, 208, 209, 210, 211, 212,
	213, 251, 214, 215, 216, 217, 218, 219, 220, 223,
	224, 225, 226, 227, 228, 229, 230, 543, 221, 222,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 0, 0, 0, 252, 246, 247,
	248, 249, 0, 0, 0, 429, 430, 431, 453, 415,
	475, 590, 0, 0, 0, 0, 0, 0, 0, 524,
	536, 570, 0, 579, 580, 582, 584, 583, 2122, 596,
	467, 576, 0, 0, 358, 0, 480, 513, 502, 585,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 0, 0, 328, 517, 499, 509, 500, 485,
	486, 487, 494, 308, 488, 489, 490, 463, 491, 464,
	492, 493, 0, 516, 468, 389, 342, 534, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 271, 197, 465, 581, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 261,
	394, 411, 272, 385, 424, 277, 392, 267, 357, 381,
	0, 0, 263, 409, 391, 339, 318, 319, 262, 0,
	376, 296, 310, 293, 355, 0, 408, 436, 292, 427,
	0, 419, 265, 0, 418, 354, 405, 410, 340, 334,
	264, 407, 338, 333, 322, 300, 452, 323, 324, 314,
	366, 332, 367, 315, 344, 343, 345, 0, 0, 0,
	0, 0, 447, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 578,
	0, 421, 0, 0, 0, 0, 0, 0, 393, 0,
	0, 325, 0, 0, 0, 437, 0, 379, 360, 598,
	0, 0, 377, 330, 406, 368, 412, 395, 420, 373,
	369, 256, 396, 295, 341, 268, 270, 290, 297, 299,
	301, 302, 350, 351, 363, 384, 397, 398, 399, 294,
	278, 378, 279, 312, 280, 257, 286, 284, 287, 386,
	288, 259, 364, 403, 0, 307, 374, 337, 260, 336,
	365, 402, 401, 269, 428, 434, 435, 521, 0, 440,
	599, 600, 601, 449, 454, 455, 456, 458, 459, 460,
	461, 522, 539, 506, 477, 442, 530, 474, 478, 542,
	0, 0, 0, 433, 326, 327, 0, 305, 253, 254,
	595, 291, 356, 544, 577, 470, 0, 531, 471, 479,
	283, 503, 515, 514, 352, 432, 0, 526, 529, 462,
	594, 0, 523, 538, 597, 537, 591, 362, 0, 383,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	472, 0, 390, 414, 426, 443, 446, 473, 557, 558,
	559, 258, 445, 561, 562, 563, 564, 565, 566, 567,
	560, 417, 504, 481, 507, 425, 484, 483, 0, 0,
	518, 441, 519, 520, 346, 347, 348, 349, 309, 545,
	276, 444, 372, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 438, 439, 304, 311, 457, 313, 275, 361,
	306, 423, 320, 0, 450, 512, 451, 571, 574, 572,
	573, 353, 316, 317, 387, 321, 331, 375, 422, 359,
	380, 273, 413, 388, 335, 498, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 0, 0, 495, 400, 285, 250, 281, 282, 289,
	592, 589, 404, 593, 0, 255, 476, 329, 0, 370,
	303, 540, 541, 206, 207, 208, 209, 210, 211, 212,
	213, 251, 214, 215, 216, 217, 218, 219, 220, 223,
	224, 225, 226, 227, 228, 229, 230, 543, 221, 222,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 0, 0, 0, 252, 246, 247,
	248, 249, 0, 0, 0, 429, 430, 431, 453, 415,
	475, 590, 0, 0, 0, 0, 0, 0, 0, 524,
	536, 570, 0, 579, 580, 582, 584, 583, 0, 596,
	467, 576, 358, 0, 480, 513, 502, 585, 469, 0,
	1836, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	0, 0, 328, 517, 499, 509, 500, 485, 486, 487,
	494, 308, 488, 489, 490, 463, 491, 464, 492, 493,
	0, 516, 468, 389, 342, 534, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 0, 0, 0, 0, 0,
	0, 271, 197, 465, 581, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 394, 411,
	272, 385, 424, 277, 392, 267, 357, 381, 0, 0,
	263, 409, 391, 339, 318, 319, 262, 0, 376, 296,
	310, 293, 355, 0, 408, 436, 292, 427, 0, 419,
	265, 0, 418, 354, 405, 410, 340, 334, 264, 407,
	338, 333, 322, 300, 452, 323, 324, 314, 366, 332,
	367, 315, 344, 343, 345, 0, 0, 0, 0, 0,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 0, 0, 578, 0, 421,
	0, 0, 0, 0, 0, 0, 393, 0, 0, 325,
	0, 0, 0, 437, 0, 379, 360, 598, 0, 0,
	377, 330, 406, 368, 412, 395, 420, 373, 369, 256,
	396, 295, 341, 268, 270, 290, 297, 299, 301, 302,
	350, 351, 363, 384, 397, 398, 399, 294, 278, 378,
	279, 312, 280, 257, 286, 284, 287, 386, 288, 259,
	364, 403, 0, 307, 374, 337, 260, 336, 365, 402,
	401, 269, 428, 434, 435, 521, 0, 440, 599, 600,
	601, 449, 454, 455, 456, 458, 459, 460, 461, 522,
	539, 506, 477, 442, 530, 474, 478, 542, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 595, 291,
	356, 544, 577, 470, 0, 531, 471, 479, 283, 503,
	515, 514, 352, 432, 0, 526, 529, 462, 594, 0,
	523, 538, 597, 537, 591, 362, 0, 383, 535, 482,
	0, 527, 501, 0, 528, 497, 532, 0, 472, 0,
	390, 414, 426, 443, 446, 473, 557, 558, 559, 258,
	445, 561, 562, 563, 564, 565, 566, 567, 560, 417,
	504, 481, 507, 425, 484, 483, 0, 0, 518, 441,
	519, 520, 346, 347, 348, 349, 309, 545, 276, 444,
	372, 0, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 511, 508, 602, 0, 568, 569, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 512, 451, 571, 574, 572, 573, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 498, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 552, 551, 550, 549, 548, 547, 546, 0,
	0, 495, 400, 285, 250, 281, 282, 289, 592, 589,
	404, 593, 0, 255, 476, 329, 0, 370, 303, 540,
	541, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 543, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 475, 590,
	0, 0, 0, 0, 0, 0, 0, 524, 536, 570,
	0, 579, 580, 582, 584, 583, 0, 596, 467, 576,
	358, 0, 480, 513, 502, 585, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 517, 499, 509, 500, 485, 486, 487, 494, 308,
	488, 489, 490, 463, 491, 464, 492, 493, 0, 516,
	468, 389, 342, 534, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 1393, 0, 0, 0, 271,
	197, 465, 581, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 578, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 598, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 1742, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 521, 0, 440, 599, 600, 601, 449,
	454, 455, 456, 458, 459, 460, 461, 522, 539, 506,
	477, 442, 530, 474, 478, 542, 0, 0, 0, 433,
	326, 327, 0, 305, 253, 254, 595, 291, 356, 544,
	577, 470, 0, 531, 471, 479, 283, 503, 515, 514,
	352, 432, 0, 526, 529, 462, 594, 0, 523, 538,
	597, 537, 591, 362, 0, 383, 535, 482, 0, 527,
	501, 0, 528, 497, 532, 0, 472, 0, 390, 414,
	426, 443, 446, 473, 557, 558, 559, 258, 445, 561,
	562, 563, 564, 565, 566, 567, 560, 417, 504, 481,
	507, 425, 484, 483, 0, 0, 518, 441, 519, 520,
	346, 347, 348, 349, 309, 545, 276, 444, 372, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	511, 508, 602, 0, 568, 569, 0, 0, 438, 439,
	304, 311, 457, 313, 275, 361, 306, 423, 320, 0,
	450, 512, 451, 571, 574, 572, 573, 353, 316, 317,
	387, 321, 331, 375, 422, 359, 380, 273, 413, 388,
	335, 498, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	552, 551, 550, 549, 548, 547, 546, 0, 0, 495,
	400, 285, 250, 281, 282, 289, 592, 589, 404, 593,
	0, 255, 476, 329, 0, 370, 303, 540, 541, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 543, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 246, 247, 248, 249, 0, 0,
	0, 429, 430, 431, 453, 415, 475, 590, 0, 0,
	0, 0, 0, 0, 0, 524, 536, 570, 0, 579,
	580, 582, 584, 583, 0, 596, 467, 576, 358, 0,
	480, 513, 502, 585, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 0, 0, 328, 517,
	499, 509, 500, 485, 486, 487, 494, 308, 488, 489,
	490, 463, 491, 464, 492, 493, 0, 516, 468, 389,
	342, 534, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 0, 0, 0, 0, 271, 197, 465,
	581, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 261, 394, 411, 272, 385, 424, 277,
	392, 267, 357, 381, 0, 0, 263, 409, 391, 339,
	318, 319, 262, 0, 376, 296, 310, 293, 355, 0,
	408, 436, 292, 427, 0, 419, 265, 0, 418, 354,
	405, 410, 340, 334, 264, 407, 338, 333, 322, 300,
	452, 323, 324, 314, 366, 332, 367, 315, 344, 343,
	345, 0, 0, 0, 0, 0, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 0, 0, 578, 0, 421, 0, 0, 1423, 0,
	0, 0, 393, 0, 0, 325, 0, 0, 0, 437,
	0, 379, 360, 598, 0, 0, 377, 330, 406, 368,
	412, 395, 420, 373, 369, 256, 396, 295, 341, 268,
	270, 290, 297, 299, 301, 302, 350, 351, 363, 384,
	397, 398, 399, 294, 278, 378, 279, 312, 280, 257,
	286, 284, 287, 386, 288, 259, 364, 403, 0, 307,
	374, 337, 260, 336, 365, 402, 401, 269, 428, 434,
	435, 521, 0, 440, 599, 600, 601, 449, 454, 455,
	456, 458, 459, 460, 461, 522, 539, 506, 477, 442,
	530, 474, 478, 542, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 595, 291, 356, 544, 577, 470,
	0, 531, 471, 479, 283, 503, 515, 514, 352, 432,
	0, 526, 529, 462, 594, 0, 523, 538, 597, 537,
	591, 362, 0, 383, 535, 482, 0, 527, 501, 0,
	528, 497, 532, 0, 472, 0, 390, 414, 426, 443,
	446, 473, 557, 558, 559, 258, 445, 561, 562, 563,
	564, 565, 566, 567, 560, 417, 504, 481, 507, 425,
	484, 483, 0, 0, 518, 441, 519, 520, 346, 347,
	348, 349, 309, 545, 276, 444, 372, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 511, 508,
	602, 0, 568, 569, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 512,
	451, 571, 574, 572, 573, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 498,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 552, 551,
	550, 549, 548, 547, 546, 0, 0, 495, 400, 285,
	250, 281, 282, 289, 592, 589, 404, 593, 0, 255,
	476, 329, 0, 370, 303, 540, 541, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 543, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 475, 590, 0, 0, 0, 0,
	0, 0, 0, 524, 536, 570, 0, 579, 580, 582,
	584, 583, 0, 596, 467, 576, 358, 0, 480, 513,
	502, 585, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 517, 499, 509,
	500, 485, 486, 487, 494, 308, 488, 489, 490, 463,
	491, 464, 492, 493, 0, 516, 468, 389, 342, 534,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 581, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 575, 0,
	617, 578, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 598, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 521,
	0, 440, 599, 600, 601, 449, 454, 455, 456, 458,
	459, 460, 461, 522, 539, 506, 477, 442, 530, 474,
	478, 542, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 595, 291, 356, 544, 577, 470, 0, 531,
	471, 479, 283, 503, 515, 514, 352, 432, 0, 526,
	529, 462, 594, 0, 523, 538, 597, 537, 591, 362,
	0, 383, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 472, 0, 390, 414, 426, 443, 446, 473,
	557, 558, 559, 258, 445, 561, 562, 563, 564, 565,
	566, 567, 560, 417, 504, 481, 507, 425, 484, 483,
	0, 0, 518, 441, 519, 520, 346, 347, 348, 349,
	309, 545, 276, 444, 372, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 512, 451, 571,
	574, 572, 573, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 498, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 400, 285, 250, 281,
	282, 289, 592, 589, 404, 593, 0, 255, 476, 329,
	0, 370, 303, 540, 541, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 543,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 475, 590, 0, 0, 0, 0, 0, 0,
	0, 524, 536, 570, 0, 579, 580, 582, 584, 583,
	0, 596, 467, 576, 358, 0, 480, 513, 502, 585,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 0, 0, 328, 517, 499, 509, 500, 485,
	486, 487, 494, 308, 488, 489, 490, 463, 491, 464,
	492, 493, 0, 516, 468, 389, 342, 534, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 271, 197, 465, 581, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 261,
	394, 411, 272, 385, 424, 277, 392, 267, 357, 381,
	0, 0, 263, 409, 391, 339, 318, 319, 262, 0,
	376, 296, 310, 293, 355, 0, 408, 436, 292, 427,
	0, 419, 265, 0, 418, 354, 405, 410, 340, 334,
	264, 407, 338, 333, 322, 300, 452, 323, 324, 314,
	366, 332, 367, 315, 344, 343, 345, 0, 0, 0,
	0, 0, 447, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 578,
	0, 421, 0, 0, 0, 0, 0, 0, 393, 0,
	0, 325, 0, 0, 0, 437, 0, 379, 360, 598,
	0, 0, 377, 330, 406, 368, 412, 395, 420, 373,
	369, 256, 396, 295, 341, 268, 270, 290, 297, 299,
	301, 302, 350, 351, 363, 384, 397, 398, 399, 294,
	278, 378, 279, 312, 280, 257, 286, 284, 287, 386,
	288, 259, 364, 403, 0, 307, 374, 337, 260, 336,
	365, 402, 401, 269, 428, 434, 435, 521, 0, 440,
	599, 600, 601, 449, 454, 455, 456, 458, 459, 460,
	461, 522, 539, 506, 477, 442, 530, 474, 478, 542,
	0, 0, 0, 433, 326, 327, 0, 305, 253, 254,
	595, 291, 356, 544, 577, 470, 0, 531, 471, 479,
	283, 503, 515, 514, 352, 432, 0, 526, 529, 462,
	594, 0, 523, 538, 597, 537, 591, 362, 0, 383,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	472, 0, 390, 414, 426, 443, 446, 473, 557, 558,
	559, 258, 445, 561, 562, 563, 564, 565, 566, 567,
	560, 417, 504, 481, 507, 425, 484, 483, 0, 0,
	518, 441, 519, 520, 346, 347, 348, 349, 309, 545,
	276, 444, 372, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 438, 439, 304, 311, 457, 313, 275, 361,
	306, 423, 320, 0, 450, 512, 451, 571, 574, 572,
	573, 353, 316, 317, 387, 321, 331, 375, 422, 359,
	380, 273, 413, 388, 335, 498, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 888, 0, 495, 400, 285, 250, 281, 282, 289,
	592, 589, 404, 593, 0, 255, 476, 329, 0, 370,
	303, 540, 541, 206, 207, 208, 209, 210, 211, 212,
	213, 251, 214, 215, 216, 217, 218, 219, 220, 223,
	224, 225, 226, 227, 228, 229, 230, 543, 221, 222,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 0, 0, 0, 252, 246, 247,
	248, 249, 0, 0, 0, 429, 430, 431, 453, 415,
	475, 590, 0, 0, 0, 0, 0, 0, 0, 524,
	536, 570, 0, 579, 580, 582, 584, 583, 0, 596,
	467, 576, 358, 0, 480, 513, 502, 585, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 607, 298,
	0, 0, 328, 517, 499, 509, 500, 485, 486, 487,
	494, 308, 488, 489, 490, 463, 491, 464, 492, 493,
	0, 516, 468, 389, 342, 534, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 0, 0, 0, 0, 0,
	0, 271, 197, 465, 581, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 394, 411,
	272, 385, 424, 277, 392, 267, 357, 381, 0, 0,
	263, 409, 391, 339, 318, 319, 262, 0, 376, 296,
	310, 293, 355, 0, 408, 436, 292, 427, 0, 419,
	265, 0, 418, 354, 405, 410, 340, 334, 264, 407,
	338, 333, 322, 300, 452, 323, 324, 314, 366, 332,
	367, 315, 344, 343, 345, 0, 0, 0, 0, 0,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 0, 0, 578, 0, 421,
	0, 0, 0, 0, 0, 0, 393, 0, 0, 325,
	0, 0, 0, 437, 0, 379, 360, 598, 0, 0,
	377, 330, 406, 368, 412, 395, 420, 373, 369, 256,
	396, 295, 341, 268, 270, 290, 297, 299, 301, 302,
	350, 351, 363, 384, 397, 398, 399, 294, 278, 378,
	279, 312, 280, 257, 286, 284, 287, 386, 288, 259,
	364, 403, 0, 307, 374, 337, 260, 336, 365, 402,
	401, 269, 428, 434, 435, 521, 0, 440, 599, 600,
	601, 449, 454, 455, 456, 458, 459, 460, 461, 522,
	539, 506, 477, 442, 530, 474, 478, 542, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 595, 291,
	356, 544, 577, 470, 0, 531, 471, 479, 283, 503,
	515, 514, 352, 432, 0, 526, 529, 462, 594, 0,
	523, 538, 597, 537, 591, 362, 0, 383, 535, 482,
	0, 527, 501, 0, 528, 497, 532, 0, 472, 0,
	390, 414, 426, 443, 446, 473, 557, 558, 559, 258,
	445, 561, 562, 563, 564, 565, 566, 567, 560, 417,
	504, 481, 507, 425, 484, 483, 0, 0, 518, 441,
	519, 520, 346, 347, 348, 349, 309, 545, 276, 444,
	372, 0, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 511, 508, 602, 0, 568, 569, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 512, 451, 571, 574, 572, 573, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 498, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 552, 551, 550, 549, 548, 547, 546, 0,
	0, 495, 400, 285, 250, 281, 282, 289, 592, 589,
	404, 593, 0, 255, 476, 329, 0, 370, 303, 540,
	541, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 543, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 475, 590,
	0, 0, 0, 0, 0, 0, 0, 524, 536, 570,
	0, 579, 580, 582, 584, 583, 0, 596, 467, 576,
	358, 0, 480, 513, 502, 585, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	328, 517, 499, 509, 500, 485, 486, 487, 494, 308,
	488, 489, 490, 463, 491, 464, 492, 493, 0, 516,
	468, 389, 342, 534, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 271,
	197, 465, 581, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 0, 408, 436, 292, 427, 0, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 452, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 578, 0, 421, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 437, 0, 379, 360, 598, 0, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 521, 0, 440, 599, 600, 601, 449,
	454, 455, 456, 458, 459, 460, 461, 522, 539, 506,
	477, 442, 530, 474, 478, 542, 0, 0, 0, 433,
	326, 327, 0, 305, 253, 254, 595, 291, 356, 544,
	577, 470, 0, 531, 471, 479, 283, 503, 515, 514,
	352, 432, 0, 526, 529, 462, 594, 0, 523, 538,
	597, 537, 591, 362, 0, 383, 535, 482, 0, 527,
	501, 0, 528, 497, 532, 0, 472, 0, 390, 414,
	426, 443, 446, 473, 557, 558, 559, 258, 445, 561,
	562, 563, 564, 565, 566, 567, 560, 417, 504, 481,
	507, 425, 484, 483, 0, 0, 518, 441, 519, 520,
	346, 347, 348, 349, 309, 545, 276, 444, 372, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	511, 508, 602, 0, 568, 569, 0, 0, 438, 439,
	304, 311, 457, 313, 275, 361, 306, 423, 320, 0,
	450, 512, 451, 571, 574, 572, 573, 353, 316, 317,
	387, 321, 331, 375, 422, 359, 380, 273, 413, 388,
	335, 498, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	552, 551, 550, 549, 548, 547, 546, 0, 0, 495,
	400, 285, 250, 281, 282, 289, 592, 589, 404, 593,
	0, 255, 476, 329, 0, 370, 303, 540, 541, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 543, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 246, 247, 248, 249, 0, 0,
	0, 429, 430, 431, 453, 415, 475, 590, 0, 0,
	0, 0, 0, 0, 0, 524, 536, 570, 0, 579,
	580, 582, 584, 583, 0, 596, 467, 576, 358, 0,
	480, 513, 502, 585, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 0, 0, 328, 517,
	499, 509, 500, 485, 486, 487, 494, 308, 488, 489,
	490, 463, 491, 464, 492, 493, 0, 516, 468, 389,
	342, 534, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 0, 0, 0, 0, 271, 197, 465,
	581, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 261, 394, 1373, 272, 385, 424, 277,
	392, 267, 357, 381, 0, 0, 263, 409, 391, 339,
	318, 319, 262, 0, 376, 296, 310, 293, 355, 0,
	408, 436, 292, 427, 0, 419, 265, 0, 418, 354,
	405, 410, 340, 334, 264, 407, 338, 333, 322, 300,
	452, 323, 324, 314, 366, 332, 367, 315, 344, 343,
	345, 0, 0, 0, 0, 0, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 0, 0, 578, 0, 421, 0, 0, 0, 0,
	0, 0, 393, 0, 0, 325, 0, 0, 0, 437,
	0, 379, 360, 598, 0, 0, 377, 330, 406, 368,
	412, 395, 420, 373, 369, 256, 396, 295, 341, 268,
	270, 290, 297, 299, 301, 302, 350, 351, 363, 384,
	397, 398, 399, 294, 278, 378, 279, 312, 280, 257,
	286, 284, 287, 386, 288, 259, 364, 403, 0, 307,
	374, 337, 260, 336, 365, 402, 401, 269, 428, 434,
	435, 521, 0, 440, 599, 600, 601, 449, 454, 455,
	456, 458, 459, 460, 461, 522, 539, 506, 477, 442,
	530, 474, 478, 542, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 595, 291, 356, 544, 577, 470,
	0, 531, 471, 479, 283, 503, 515, 514, 352, 432,
	0, 526, 529, 462, 594, 0, 523, 538, 597, 537,
	591, 362, 0, 383, 535, 482, 0, 527, 501, 0,
	528, 497, 532, 0, 472, 0, 390, 414, 426, 443,
	446, 473, 557, 558, 559, 258, 445, 561, 562, 563,
	564, 565, 566, 567, 560, 417, 504, 481, 507, 425,
	484, 483, 0, 0, 518, 441, 519, 520, 346, 347,
	348, 349, 309, 545, 276, 444, 372, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 511, 508,
	602, 0, 568, 569, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 512,
	451, 571, 574, 572, 573, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 498,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 552, 551,
	550, 549, 548, 547, 546, 0, 0, 495, 400, 285,
	250, 281, 282, 289, 592, 589, 404, 593, 0, 255,
	476, 329, 0, 370, 303, 540, 541, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 543, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 475, 590, 0, 0, 0, 0,
	0, 0, 0, 524, 536, 570, 0, 579, 580, 582,
	584, 583, 0, 596, 467, 576, 358, 0, 480, 513,
	502, 585, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 517, 499, 509,
	500, 485, 486, 487, 494, 308, 488, 489, 490, 463,
	491, 464, 492, 493, 0, 516, 468, 389, 342, 534,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 581, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 1371, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 575, 0,
	0, 578, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 598, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 521,
	0, 440, 599, 600, 601, 449, 454, 455, 456, 458,
	459, 460, 461, 522, 539, 506, 477, 442, 530, 474,
	478, 542, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 595, 291, 356, 544, 577, 470, 0, 531,
	471, 479, 283, 503, 515, 514, 352, 432, 0, 526,
	529, 462, 594, 0, 523, 538, 597, 537, 591, 362,
	0, 383, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 472, 0, 390, 414, 426, 443, 446, 473,
	557, 558, 559, 258, 445, 561, 562, 563, 564, 565,
	566, 567, 560, 417, 504, 481, 507, 425, 484, 483,
	0, 0, 518, 441, 519, 520, 346, 347, 348, 349,
	309, 545, 276, 444, 372, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 512, 451, 571,
	574, 572, 573, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 498, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 400, 285, 250, 281,
	282, 289, 592, 589, 404, 593, 0, 255, 476, 329,
	0, 370, 303, 540, 541, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 543,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	246, 247, 248, 249, 0, 0, 0, 429, 430, 431,
	453, 415, 475, 590, 0, 0, 0, 0, 0, 0,
	0, 524, 536, 570, 0, 579, 580, 582, 584, 583,
	0, 596, 467, 576, 358, 0, 480, 513, 502, 585,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 0, 0, 328, 517, 499, 509, 500, 485,
	486, 487, 494, 308, 488, 489, 490, 463, 491, 464,
	492, 493, 0, 516, 468, 389, 342, 534, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 271, 197, 465, 581, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 261,
	394, 411, 272, 385, 424, 277, 392, 267, 357, 381,
	0, 0, 263, 409, 391, 339, 318, 319, 262, 0,
	376, 296, 310, 293, 355, 0, 408, 436, 292, 427,
	0, 419, 265, 0, 418, 354, 405, 410, 340, 334,
	264, 407, 338, 333, 322, 300, 452, 323, 324, 314,
	366, 332, 367, 315, 344, 343, 345, 0, 0, 0,
	0, 0, 447, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 578,
	0, 421, 0, 0, 0, 0, 0, 0, 393, 0,
	0, 325, 0, 0, 0, 437, 0, 379, 360, 598,
	0, 0, 377, 330, 406, 368, 412, 395, 420, 373,
	369, 256, 396, 295, 341, 268, 270, 681, 297, 299,
	301, 302, 350, 351, 363, 384, 397, 398, 399, 294,
	278, 378, 279, 312, 280, 257, 286, 284, 287, 386,
	288, 259, 364, 403, 0, 307, 374, 337, 260, 336,
	365, 402, 401, 269, 428, 434, 435, 521, 0, 440,
	599, 600, 601, 449, 454, 455, 456, 458, 459, 460,
	461, 522, 539, 506, 477, 442, 530, 474, 478, 542,
	0, 0, 0, 433, 326, 327, 0, 305, 253, 254,
	595, 291, 356, 544, 577, 470, 0, 531, 471, 479,
	283, 503, 515, 514, 352, 432, 0, 526, 529, 462,
	594, 0, 523, 538, 597, 537, 591, 362, 0, 383,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	472, 0, 390, 414, 426, 443, 446, 473, 557, 558,
	559, 258, 445, 561, 562, 563, 564, 565, 566, 567,
	560, 417, 504, 481, 507, 425, 484, 483, 0, 0,
	518, 441, 519, 520, 346, 347, 348, 349, 309, 545,
	276, 444, 372, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 438, 439, 304, 311, 457, 313, 275, 361,
	306, 423, 320, 0, 450, 512, 451, 571, 574, 572,
	573, 353, 316, 317, 387, 321, 331, 375, 422, 359,
	380, 273, 413, 388, 335, 498, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 0, 0, 495, 400, 285, 250, 281, 282, 289,
	592, 589, 404, 593, 0, 255, 476, 329, 0, 370,
	303, 540, 541, 206, 207, 208, 209, 210, 211, 212,
	213, 251, 214, 215, 216, 217, 218, 219, 220, 223,
	224, 225, 226, 227, 228, 229, 230, 543, 221, 222,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 0, 0, 0, 252, 246, 247,
	248, 249, 0, 0, 0, 429, 430, 431, 453, 415,
	475, 590, 0, 0, 0, 0, 0, 0, 0, 524,
	536, 570, 0, 579, 580, 582, 584, 583, 0, 596,
	467, 576, 358, 0, 480, 513, 502, 585, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	0, 0, 328, 517, 499, 509, 500, 485, 486, 487,
	494, 308, 488, 489, 490, 463, 491, 464, 492, 493,
	0, 516, 468, 389, 342, 534, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 0, 0, 0, 0, 0,
	0, 271, 197, 465, 581, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 394, 411,
	272, 385, 424, 277, 392, 267, 357, 381, 0, 0,
	263, 409, 391, 339, 318, 319, 262, 0, 376, 296,
	310, 293, 355, 0, 408, 436, 292, 427, 0, 419,
	265, 0, 418, 354, 405, 410, 340, 334, 264, 407,
	338, 333, 322, 300, 452, 323, 324, 314, 366, 332,
	367, 315, 344, 343, 345, 0, 0, 0, 0, 0,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 0, 0, 578, 0, 421,
	0, 0, 0, 0, 0, 0, 393, 0, 0, 325,
	0, 0, 0, 437, 0, 379, 360, 598, 0, 0,
	377, 330, 406, 368, 412, 395, 420, 640, 369, 256,
	396, 295, 341, 268, 270, 290, 297, 299, 301, 302,
	350, 351, 363, 384, 397, 398, 399, 294, 278, 378,
	279, 312, 280, 257, 286, 284, 287, 386, 288, 259,
	364, 403, 0, 307, 374, 337, 260, 336, 365, 402,
	401, 269, 428, 434, 435, 521, 0, 440, 599, 600,
	601, 449, 454, 455, 456, 458, 459, 460, 461, 522,
	539, 506, 477, 442, 530, 474, 478, 542, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 595, 291,
	356, 544, 577, 470, 0, 531, 471, 479, 283, 503,
	515, 514, 352, 432, 0, 526, 529, 462, 594, 0,
	523, 538, 597, 537, 591, 362, 0, 383, 535, 482,
	0, 527, 501, 0, 528, 497, 532, 0, 472, 0,
	390, 414, 426, 443, 446, 473, 557, 558, 559, 258,
	445, 561, 562, 563, 564, 565, 566, 641, 560, 417,
	504, 481, 507, 425, 484, 483, 0, 0, 518, 441,
	519, 520, 346, 347, 348, 349, 309, 545, 276, 444,
	372, 0, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 511, 508, 602, 0, 568, 569, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 512, 451, 571, 574, 572, 573, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 498, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 552, 551, 550, 549, 548, 547, 546, 0,
	0, 495, 400, 285, 250, 281, 282, 289, 592, 589,
	404, 593, 0, 255, 476, 329, 0, 370, 303, 540,
	541, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 543, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 475, 590,
	0, 0, 0, 0, 0, 0, 0, 524, 536, 570,
	0, 579, 580, 582, 584, 583, 0, 596, 467, 576,
}

var yyPact = [...]int{
	307, -1000, -1000, -1000, -333, 13879, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 41997,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 41997,
	-331, 41399, 41399, -1000, -1000, 2459, -1000, 40203, 15085, 41997,
	351, 343, 41997, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 735, -1000, 44389, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 679, 4837, 43791, 10859, -249, -1000, 1415, -75, 2189,
	916, 933, 956, 956, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3480, 828, 40801,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 235, 587, 828, 19869, 42, 41, 1415, 375, -147,
	-146, -149, 2958, -1000, 994, 3621, 164, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10859, 10859,
	13879, -357, 13879, 10859, 41997, 41997, -1000, -1000, -1000, -1000,
	-331, 40203, 679, 4837, 10859, 2189, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -146, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -147, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -149, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 41, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4475, -1000, 1430, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2688, 1427, 2185, 585, 41997, -1000, 1426,
	585, -1000, -1000, -1000, 1415, 3182, -1000, 41997, 41997, 116,
	1608, -1000, 416, 400, 339, 1425, -1000, -1000, -1000, -1000,
	-1000, -1000, 489, 3115, -1000, 41997, 41997, 2721, 41997, -1000,
	2081, 515, 4861, 2945, 1398, 780, 2749, -1000, -1000, 2684,
	-1000, 232, 240, 171, 647, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 266, -1000, 3022, -1000, -1000, 224, -1000, -1000,
	211, -1000, -1000, -1000, 35, -1000, -1000, -1000, -1000, -1000,
	-1000, -81, -1000, -1000, 970, 1704, 10859, 1879, -1000, 1721,
	-1000, -1000, -1000, -1000, 6634, 12668, 12668, 12668, 12668, -1000,
	-1000, 2523, 10859, 2674, 2673, 2669, 2668, -1000, -1000, -1000,
	-1000, -1000, -1000, 1424, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1755, -1000, -1000, -1000, 13271, -1000, 2664,
	2663, 2661, 2660, 2657, 2648, 2647, 2638, 2637, 2626, 2625,
	2624, 2621, 2619, 2404, 14477, 2618, 2183, 2180, 2617, 2615,
	2611, 2175, 2404, 2404, 2610, 2608, 2607, 2600, 2597, 2596,
	2595, 2592, 2591, 2588, 2582, 2575, 2572, 2570, 2569, 2565,
	2564, 2563, 2560, 2559, 2558, 2555, 2554, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1137, -1000, 2553, 3132, 2464, -1000, 3005, 2999, 2995, 2986,
	-301, 2552, 1979, -1000, -1000, 72, -1000, -112, -1000, -1000,
	905, -1000, 890, -1000, 41997, 41997, 144, 712, 630, 630,
	630, 630, 630, 719, 630, 3035, 734, 733, 732, 729,
	630, -104, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1603,
	1602, 2628, 831, -1000, -1000, -1000, -1000, 1307, 41997, -1000,
	2471, 1515, 1515, 3034, 541, 528, 523, 1515, 401, -1000,
	1673, 1673, 1673, 1673, 1515, 399, 539, 3044, 3044, 32,
	1673, 13, 1515, 1515, 13, 1515, 1515, 1604, 263, -308,
	-1000, -1000, -1000, -1000, 1673, 1673, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3017, 3016, 679, 679, 41997, 142, 41997,
	679, 679, 679, 691, -29, 43193, 42595, 2081, 506, 504,
	1310, 1613, -1000, 1526, 41997, 41997, 1526, 1526, 22859, 22261,
	-1000, 41997, -1000, 3132, 2464, 2395, 1464, 2390, 2464, -153,
	-154, -158, 679, 679, 679, 679, 679, 190, 679, 679,
	679, 679, 679, 41997, 41997, 39605, 679, 679, 9046, 9046,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13879,
	1883, 1945, 163, -56, -320, 217, -1000, -1000, 41997, 2898,
	179, -1000, -1000, -1000, 2418, -1000, 2466, 2466, 2466, 2466,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2466,
	2466, 2470, 2548, -1000, -1000, 2463, 2463, 2463, 2418, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2468, 2468, 2469, 2469, 2468, 41997,
	10859, 41997, 2906, 367, 2546, -1000, 41997, 362, 3132, 2905,
	3044, 3094, -1000, -1000, 1423, 1978, 2171, -1000, -1000, 416,
	1428, -1000, 913, -1000, -1000, -1000, -1000, 41997, -81, 391,
	-1000, -1000, 2149, 2536, -1000, 529, 1051, 1360, -1000, 241,
	4891, 34221, 2081, 34221, 41997, -1000, -1000, -1000, -1000, -1000,
	-1000, 34, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 226, -1000, 10859, 10859, 10859,
	10859, 10859, -1000, 656, 12065, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 12668, 12668, 12668, 12668, 12668, 12668, 12668, 12668,
	12668, 12668, 12668, 12668, 2522, 1561, 12668, 12668, 12668, 12668,
	1464, 2932, 1308, 257, -1000, -1000, -1000, -1000, -1000, 1628,
	1704, 10859, 10859, 10859, 10859, 41997, -1000, -1000, 4259, 10859,
	10859, 3814, 10859, 2977, 10859, 10859, 10859, 2386, 5423, 41997,
	10859, -1000, 2384, 2383, -1000, -1000, 1817, 10859, -1000, -1000,
	10859, -1000, -1000, 10859, 12668, 10859, -1000, -1000, -1000, 3460,
	2977, 2977, 2977, 1588, 10859, 10859, 2977, 2977, 2977, 1586,
	2977, 2977, 2977, 2977, 2977, 2977, 2977, 2977, 2373, 2361,
	2359, 10256, 3044, -249, -1000, 8443, 2905, 3044, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -304, 2531,
	41997, 2169, 2167, -342, -40, 912, 856, 900, -1000, 2970,
	-1000, 2525, 41997, 630, 630, 630, -1000, 41997, 1667, 34221,
	41997, 41997, 2081, 41997, 41997, 41997, 630, 630, 630, 630,
	41997, -1000, 2872, 34221, 2823, 691, -1000, 41997, 1307, 2969,
	41997, 3100, 12668, 12668, -1000, 39007, 1673, 1515, 1515, -1000,
	-1000, 41997, -1000, -1000, -1000, 1673, 41997, 1673, 1673, 3100,
	1673, -1000, -1000, -1000, 1515, 1515, -1000, -1000, 10859, -1000,
	-1000, 1673, 1673, -1000, -1000, 3100, 41997, 33, 3100, 3100,
	18, -1000, -1000, -1000, 1515, 41997, 41997, 630, 41997, -1000,
	41997, 41997, -1000, -1000, 41997, 41997, 3807, 41997, 38409, 3015,
	-1000, 34221, 41997, 41997, 31829, -1000, 1257, -1000, -55, -1000,
	-60, -29, 1526, -29, 1526, -1000, 524, 625, 21065, 462,
	34221, 6026, -1000, -1000, 1526, 1526, 6026, 6026, 1440, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1302, -1000, 177, 3044,
	-1000, -1000, -1000, -1000, -1000, 1975, 1973, 1972, 41997, 41997,
	34221, 2081, 41997, 679, 41997, 41997, 41997, 41997, 41997, -1000,
	2524, 1419, -1000, 2939, 41997, 41997, 1177, -1000, -1000, 17477,
	1418, 1177, -1000, 1662, -1000, 10859, 13879, -270, 10859, 13879,
	13879, 10859, 13879, -1000, 10859, 174, -1000, -1000, -1000, -1000,
	1970, -1000, 1968, -1000, -1000, -1000, -1000, -1000, 2163, 2163,
	-1000, 1965, -1000, -1000, -1000, -1000, 1964, -1000, -1000, 1963,
	-1000, -1000, -1000, 2358, 970, -1000, 2162, 2747, -250, -1000,
	19271, 41997, 41997, -1000, -1000, -250, -1000, 18673, 41997, 3044,
	-1000, -256, 2905, 10859, 41997, -1000, 3033, -1000, 416, 319,
	-1000, -1000, -1000, -1000, -1000, -1000, 1417, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1300, -1000, 41997, -1000,
	-1000, 241, 34221, 36015, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 207, -1000, -1000, 178, -1000, 716, 157, 1421, -1000,
	-1000, 153, 180, 121, 771, 1704, -1000, 1677, 1677, 1674,
	-1000, 678, -1000, -1000, -1000, -1000, 2523, -1000, -1000, -1000,
	2172, 1786, -1000, 1463, 1463, 1445, 1445, 1445, 1445, 1445,
	1654, 1654, -1000, -1000, -1000, 6634, 2522, 12668, 12668, 12668,
	12668, 603, 603, 3568, 3529, -1000, 10859, 1652, -1000, 10859,
	2241, 1284, 2231, 1230, 1413, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2357, 2354, 2196, 3111, 2351,
	10859, -1000, -1000, 1411, 1410, 1409, -1000, 2025, 9653, -1000,
	-1000, -1000, 2350, 1407, 2346, -1000, -1000, -1000, 2342, 1408,
	1015, 2340, 1685, 2318, 1296, 10859, 10859, 10859, 10859, 2306,
	1395, 1375, 10859, 10859, 10859, 10859, 2304, 10859, 10859, 10859,
	10859, 10859, 10859, 10859, 10859, 67, 67, 67, 1293, 1292,
	-1000, -1000, 1361, -1000, 1704, -1000, -1000, 2905, -1000, 2520,
	1961, 1279, -1000, -1000, -1000, 2127, -1000, -1000, 908, 877,
	897, 41997, 1000, 2513, 41997, 41997, 41997, 169, -1000, 2913,
	1103, -1000, 157, -93, 357, 1005, 2720, 3108, -171, 41997,
	41997, 41997, 41997, 2967, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 37811, -1000, 2512, 1350, -1000, -1000, 10859, -1000,
	-1000, 2719, 41997, 41997, 3100, 3100, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1673, 3100, 3100, 1067, 1515, 1673, -1000,
	-1000, 1673, -1000, -1000, 1673, -1000, -1000, 1402, -1000, 41997,
	-1000, -1000, -1000, 2955, 2471, 1274, -1000, -1000, -1000, 3093,
	1507, 623, 623, 862, 485, 3092, 16879, -1000, 1538, 928,
	713, 2871, 230, -1000, 1538, -194, 593, 1538, 1538, 1538,
	1538, 1538, 1538, 1538, 484, 452, 1538, 1538, 1538, 1538,
	1538, 1538, 1538, 1538, 1538, 1538, 1538, 929, 1538, 1538,
	1538, 1538, 1538, -1000, 1538, 2511, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 514, 167, 3009, 264, 261, 1103, 3003,
	286, 3161, 1119, -1000, -1000, -1000, -1000, 25251, 25251, 20467,
	25251, -1000, 1488, -29, -23, -1000, -1000, 1257, 6026, 1257,
	6026, -1000, -1000, 709, -1000, -1000, 1005, -1000, 41997, 41997,
	-1000, -1000, 2508, 1596, -1000, -1000, 14477, -1000, 6026, 6026,
	-1000, -1000, 25849, 41997, -1000, -82, -1000, -65, 2905, -1000,
	-1000, -1000, 1243, -1000, -1000, 1252, 1005, 2746, 41997, 1243,
	1243, 1243, -1000, -1000, 16281, 41997, 41997, -1000, -1000, 3100,
	9046, -1000, 31829, -1000, -1000, 37211, -1000, 36613, 3100, 1617,
	-1000, 13879, 1923, 156, -1000, 204, -324, 155, 1827, 154,
	1704, -1000, -1000, 2303, 2301, 1348, -1000, 1345, 2300, 1344,
	1331, -1000, 4, -1000, 2900, 1009, -1000, 2506, -1000, 1325,
	2811, -1000, 1213, -1000, 1594, 1319, -1000, 1009, 1304, 2791,
	1213, 2905, 2161, -1000, 1188, -1000, 1927, 1392, 113, -1000,
	-1000, 41997, 2149, 1301, 36015, 1091, -1000, 704, 1372, 1367,
	-1000, 34221, 218, 34221, -1000, 34221, -1000, -1000, 338, -1000,
	41997, 2902, -1000, -1000, -1000, 2127, 1592, -349, 41997, -1000,
	-1000, -1000, -1000, -1000, 1299, -1000, 603, 603, 3568, 2754,
	-1000, 12668, -1000, 12668, 2912, 1614, -1000, 10859, 1909, 3729,
	10859, 3729, 823, 24055, 41997, -1000, -1000, 10859, 10859, -1000,
	2887, -1000, -1000, -1000, -1000, 10859, 10859, 2085, -1000, 41997,
	-1000, -1000, -1000, -1000, 24055, -1000, 12668, -1000, 10859, 1090,
	1090, 2882, 1291, 67, 67, 67, 2868, 2852, 2819, 1290,
	67, 2801, 2776, 2723, 2681, 2671, 2666, 2613, 2605, -1000,
	2505, -1000, -1000, 1748, 11462, 8443, -1000, -1000, 249, 1178,
	1953, 115, -1000, 1590, -1000, -1000, -1000, 863, 199, 2299,
	1156, -1000, -1000, 41997, -1000, -1000, -1000, 16281, 2471, 2504,
	2471, 62, 1538, -1000, 562, 34221, 496, -1000, 41997, 1803,
	1589, 2745, 463, 2896, 41997, 2491, 2487, 2486, 2485, 2954,
	346, 4537, 41997, 1089, -1000, 1363, 3621, -1000, 41997, 1704,
	-1000, 2081, -1000, 1515, -1000, -1000, 3100, -1000, -1000, 10859,
	10859, 3100, 1515, 1515, 1673, 41997, -1000, 346, 4537, 2951,
	4149, 449, 2031, -1000, 41997, -1000, -1000, -1000, 747, -1000,
	836, 630, 41997, 1727, 836, 1703, 2482, -1000, -1000, 41997,
	41997, 41997, 41997, -1000, -1000, 41997, -1000, 41997, 41997, 41997,
	41997, 41997, 35417, -1000, 41997, 41997, -1000, 41997, 1701, 1700,
	2907, -1000, 1538, 1538, 791, -1000, -1000, 508, -1000, 35417,
	1950, 1947, 1932, 1931, 2145, 2144, 2143, 1538, 1538, 1929,
	2141, 34819, 2139, 1006, 1926, 1919, 1916, 1971, 2137, 794,
	-1000, 2136, 1949, 1933, 1925, 41997, 2474, 2065, -1000, -1000,
	62, 1538, 260, 41997, 1587, 562, 353, 1987, 21663, 41997,
	31829, 31829, 31829, 31829, -1000, 2762, 2761, -1000, 2796, 2792,
	2800, 41997, 31829, 2471, -1000, 34819, -1000, -1000, -1000, 1464,
	1287, 2993, 855, 10859, -1000, -1000, -43, -71, -1000, -1000,
	-1000, 34221, 2133, 462, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3029, 41997, 41997, 571, 2295, 1138, -1000, -1000, -1000,
	4537, 2466, 2466, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2466, 2466, 2470, -1000, -1000, 2463, 2463, 2463,
	2418, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2468, 2468, 2469, 2469, 2468, -1000, -1000, 3098, -1000,
	1134, -1000, -1000, 1342, -1000, 3098, 1638, -336, 13879, 1622,
	1563, -1000, 10859, 13879, 10859, -272, 242, -284, -1000, -1000,
	-1000, 2131, -1000, -1000, -1000, 1892, -1000, 1881, 93, 97,
	1699, -250, 8443, 361, 41997, -250, 41997, 8443, -1000, 41997,
	358, -250, 3029, 4, 10859, 2862, -1000, -1000, 41997, 1872,
	-1000, -1000, -1000, 3102, 34221, 2081, 1471, 33623, -1000, 223,
	-1000, 206, 521, 2130, -1000, 724, 114, 2129, 2127, -1000,
	-1000, -1000, -1000, 12668, -1000, -1000, -1000, -1000, 1704, 10859,
	2294, -1000, 872, 872, 1976, 2293, 2291, -1000, 2466, 2466,
	-1000, 2418, 2463, 2418, 872, 872, 2286, -1000, 2050, 2601,
	-1000, 2489, 2428, 10859, -1000, 2285, 2704, 1193, -109, -224,
	67, 67, -1000, -1000, -1000, -1000, 67, 67, 67, 67,
	-1000, 67, 67, 67, 67, 67, 67, 67, 67, 590,
	-139, -311, -145, -312, -1000, 2283, 1124, -1000, -1000, -1000,
	-1000, -1000, 3814, 1121, -1000, 2127, 2126, -1000, 2123, 2122,
	1000, 4537, 2281, 2950, 15683, 2949, 1989, -1000, -1000, -1000,
	33025, 492, -1000, -1000, -1000, 600, 229, 1866, 472, -1000,
	41997, 286, 2785, 1585, 2121, 41997, -1000, -1000, -1000, -1000,
	-1000, -1000, 2896, -1000, 857, 323, 30633, 15683, 15683, 15683,
	344, 326, 1627, -1000, 585, 1033, 1322, 31829, 41997, -1000,
	31231, 2279, -1000, 1005, 3100, -1000, 1704, 1704, -1000, 3100,
	3100, 1515, -1000, 326, -1000, 344, -1000, 1021, 18075, 383,
	364, 359, -1000, 527, -1000, -1000, 573, 2828, 4537, -1000,
	41997, -1000, 41997, -1000, 41997, 41997, 630, 10859, 2828, 41997,
	698, -1000, -1000, 949, 313, 297, 638, 638, 1100, -1000,
	2930, -1000, -1000, 1092, -1000, -1000, -1000, -1000, 41997, -1000,
	-1000, -1000, -1000, -1000, -1000, 24055, 24055, 2989, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2120, 2111, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 41997, 1283, -1000, 1580, 1989, 33025, 1578, 1526,
	2104, 492, 1803, 1577, -1000, 2096, -1000, 1013, 41997, 41997,
	-1000, 1145, -1000, 1575, 2693, 2744, 2693, -1000, -1000, -1000,
	-1000, 2716, -1000, 2680, -1000, -1000, 1145, -1000, -1000, -1000,
	-1000, -1000, 855, -1000, 3026, 836, 836, 836, 2277, -1000,
	-1000, -1000, 1091, 2272, -1000, -1000, -1000, 3125, -1000, -1000,
	-1000, -1000, -1000, -1000, 16281, 2895, 3096, 3090, 32427, 3096,
	-1000, -336, 1591, -1000, 1844, 152, 1762, 41997, -1000, -1000,
	-1000, 2265, 2264, -258, 106, 3086, 3084, 870, -1000, 2263,
	1053, -250, -1000, -1000, 1009, -1000, -1000, -1000, -250, -1000,
	1009, -1000, 93, -1000, -1000, 2858, -1000, -1000, 2081, -1000,
	205, -1000, -1000, -1000, -1000, -1000, -1000, 131, -1000, 41997,
	-1000, 1037, 111, -1000, 1704, -1000, -1000, -1000, -1000, -1000,
	3729, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10859, -1000, -1000, -1000, 2352, -1000, -1000, 10859,
	2255, 2089, 2254, 2087, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3132, -1000,
	3077, 2253, 2251, 2249, 2244, 2243, 2220, -1000, 10859, 2215,
	3814, -1000, -1000, -1000, -1000, -1000, -1000, 738, 344, 2214,
	1034, -1000, -1000, -1000, -1000, 344, -1000, 2076, 143, -1000,
	-1000, -1000, 2069, 2066, 1853, -1000, -1000, 1918, 1349, 150,
	-1000, -1000, -1000, -1000, -1000, -1000, 1987, 1986, 1574, -351,
	-1000, 2462, -1000, 1538, 1538, 1538, 41997, 1245, -1000, 1538,
	1538, 2210, 2209, 2208, -172, 572, 1546, 1533, -1000, 1852,
	25251, 31829, 31231, 1117, -1000, 1321, -1000, -1000, -1000, -1000,
	-1000, 3100, 572, -1000, 376, 1848, 12668, 2461, 12668, 2454,
	402, 2452, 1242, -1000, 41997, -1000, -1000, 41997, 284, 2451,
	-1000, 2450, 2714, 365, 2448, 2445, 41997, 2348, -1000, 2828,
	41997, 633, 2879, -1000, -1000, -1000, 267, -1000, -1000, 407,
	-1000, 41997, -1000, 41997, -1000, 1437, -1000, 24055, -1000, -1000,
	1212, -1000, 2065, 2063, -1000, 143, 2061, 6026, -1000, -1000,
	2785, 2060, -1000, 41997, 1013, 1013, 3132, 41997, 8443, -1000,
	-1000, 10859, 2444, -1000, 10859, -1000, -1000, -1000, -1000, -1000,
	2443, 2904, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1660,
	-1000, 10859, 10859, -1000, -1000, 628, 13879, -293, 236, -1000,
	-1000, -1000, -260, 2059, -1000, -1000, 3076, 2053, 2009, 41997,
	-1000, -1000, 1009, 1009, -258, -1000, -1000, 1005, -1000, -1000,
	18, 487, -1000, 2202, 2247, -1000, 2213, 67, -1000, 67,
	-1000, 191, 10859, -1000, -1000, -1000, -1000, -1000, -1000, 2178,
	-1000, 2199, 4537, -179, -172, 15683, -179, -1000, -1000, 335,
	-1000, -1000, 273, -1000, -1000, 1900, 532, -1000, -1000, -1000,
	1568, 1735, 2019, 28839, 24055, 24653, 2051, -1000, -1000, 30633,
	1660, 1660, 4709, 226, 4709, -1000, 2441, 935, 1506, -1000,
	1846, -1000, 1838, -1000, 3100, 1117, 1321, -1000, -1000, 1455,
	-1000, 935, 2031, 3067, -1000, 2675, 41997, 2438, 41997, 2432,
	1565, 12668, -1000, 573, 2775, -1000, -1000, 284, -1000, -1000,
	1739, 12668, -1000, -1000, 2042, 24653, 730, 1562, 1560, 770,
	2430, -1000, 418, 3122, -1000, -1000, -1000, 783, 2422, -1000,
	1697, 1682, -1000, 41997, -1000, 28839, 28839, 703, 703, 28839,
	28839, 2421, 638, -1000, -1000, 12668, -1000, -1000, 1538, -1000,
	-1000, -1000, 1538, 1432, -1000, -1000, -1000, -1000, -1000, -1000,
	1986, -1000, -1000, 3044, -1000, -1000, 1704, 41997, 1704, 30035,
	-1000, 3064, 3062, -1000, 1704, 970, -1000, -336, 41997, 41997,
	-262, 1824, -1000, 2040, 102, -1000, -1000, 971, -260, -264,
	89, 86, 1554, -1000, -1000, -1000, -1000, -1000, 2198, -1000,
	693, -1000, -1000, -1000, 970, 84, 78, -1000, -1000, -167,
	-1000, -1000, 336, -1000, -1000, -1000, 488, 2039, -1000, -1000,
	271, -1000, -1000, 2038, -1000, -1000, 110, -1000, 1552, 1205,
	-1000, 2418, 10859, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 552, 4543, -1000, 928, -1000, 18, 552, 27643, 510,
	258, -1000, 1823, -1000, -1000, 3132, -1000, 505, -1000, 388,
	-1000, 1180, -1000, 1176, 29437, 1822, 1750, -1000, 4214, 726,
	-1000, -1000, 3568, -1000, -1000, -1000, -1000, -1000, -1000, 2032,
	2030, -1000, -1000, -1000, -1000, -1000, 1820, 2416, -38, 2985,
	2029, -1000, -1000, 2414, 1167, 1165, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1141, 1122, 28839, -1000, -1000, 3568,
	1818, 24055, 1538, -1000, -1000, 1116, 1113, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2413, -1000, -1000, 3061, -262, -1000,
	2024, 684, 92, 86, -1000, 3059, 98, 3057, 3056, 2023,
	-1000, -1000, 626, -252, 65, 60, 50, -1000, -1000, -1000,
	10859, -1000, -1000, 41997, 411, -1000, -1000, -1000, 123, -1000,
	-1000, -1000, -1000, 2019, 2017, -1000, 28839, 2930, 2033, 371,
	3053, 4709, -1000, 1538, -1000, 371, 1107, -1000, 1538, 1538,
	-1000, 340, -1000, 1503, -1000, 1807, -1000, 3044, -1000, 331,
	-1000, 373, -1000, -1000, -1000, 1101, -1000, -1000, -1000, 4214,
	380, -1000, 530, 2408, -1000, -1000, 2154, 10859, 2404, 1538,
	2055, -161, 28839, 2705, 2699, 2677, 2041, 1099, -1000, -1000,
	24055, -1000, -1000, 28241, 41997, 2009, -1000, -1000, 2398, 1804,
	106, 87, 3051, -1000, 2009, 3049, 2009, 2009, 960, 1661,
	-1000, 63, 54, 47, -1000, -1000, -1000, -1000, 474, -1000,
	220, -1000, -1000, -1000, 254, -1000, -1000, 2930, -1000, 3048,
	449, -1000, 24055, -1000, -1000, 27643, 1660, 1660, -1000, -1000,
	1788, -1000, -1000, -1000, -1000, 1781, -1000, -1000, -1000, 1084,
	-1000, 41997, 740, 7840, -1000, 1981, -1000, 41997, -1000, 2730,
	-1000, 189, 1068, 254, 703, 254, 703, 254, 703, 254,
	703, 215, -1000, -1000, -1000, 1058, -1000, -1000, 2981, 23457,
	76, -1000, -1000, -1000, 2015, -1000, 2009, -1000, -1000, -1000,
	71, 626, -1000, -1000, -1000, 2008, -1000, -1000, -1000, -1000,
	1538, 1538, 2007, 1995, 318, -1000, -1000, -1000, 27045, 383,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 380, 4709, -1000,
	7840, 1049, -1000, 1704, -1000, 638, -1000, -1000, 2729, 2726,
	3107, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 41997, -1000, 41997, -1000, 1048, -1000, -1000, -1000, 1313,
	-1000, -1000, -1000, -1000, 1528, -1000, -323, 1778, 1749, -1000,
	-1000, 41997, -1000, 41997, 376, -1000, 4709, 1038, -1000, 7840,
	-1000, -1000, 3121, -1000, 3119, 782, 782, 254, 254, 254,
	254, -1000, 959, -1000, 1499, -1000, 26447, 41997, 1994, -1000,
	-1000, 1985, -1000, -1000, -1000, 1016, 2031, -1000, -1000, -1000,
	-1000, -1000, 1801, 422, -1000, 41997, 7237, -1000, 1312, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1704, 41997,
	-1000,
}

var yyPgo = [...]int{
	0, 172, 3144, 249, 177, 3681, 88, 248, 239, 219,
	246, 3680, 3679, 3678, 2877, 2862, 3664, 3662, 3661, 3660,
	3658, 3657, 3656, 3655, 3653, 3651, 3649, 3647, 3646, 3645,
	3644, 3643, 3642, 3639, 3638, 3633, 3632, 3630, 3629, 3626,
	3625, 3624, 3623, 3621, 3619, 3618, 244, 3617, 3616, 3615,
	3614, 3613, 3610, 3609, 3606, 3605, 3603, 3602, 3601, 3600,
	3597, 3594, 3593, 3592, 3591, 3590, 3588, 3586, 3585, 3583,
	3581, 3580, 3579, 3578, 3577, 3576, 3575, 3573, 3572, 217,
	3567, 2853, 3566, 3563, 3561, 3555, 3554, 3553, 3552, 243,
	3551, 3550, 3549, 3546, 3545, 3544, 3543, 3542, 3541, 3540,
	3539, 241, 3537, 3535, 3532, 3530, 3528, 3527, 228, 3526,
	174, 201, 3525, 3524, 3523, 3522, 3521, 3519, 235, 188,
	70, 3517, 48, 3516, 3514, 221, 3512, 144, 3510, 152,
	3508, 3506, 3505, 3503, 3502, 3501, 3499, 3498, 3495, 3494,
	3493, 3492, 3489, 3487, 3486, 3485, 90, 3483, 253, 3482,
	71, 3475, 3474, 131, 117, 198, 251, 2685, 256, 250,
	190, 179, 101, 3471, 2907, 3470, 211, 231, 168, 31,
	3469, 132, 3468, 258, 49, 32, 242, 157, 56, 159,
	124, 3467, 216, 108, 107, 3464, 3463, 143, 237, 181,
	3462, 102, 3458, 3457, 3451, 3448, 3444, 200, 197, 3442,
	3441, 130, 3440, 3437, 148, 3436, 73, 128, 170, 127,
	3435, 97, 129, 118, 125, 92, 3434, 145, 3433, 3432,
	3430, 3429, 184, 3427, 3425, 133, 67, 3424, 3423, 3422,
	68, 3421, 75, 3413, 35, 3412, 62, 3409, 3407, 3405,
	3404, 3402, 3401, 3399, 3397, 3396, 3395, 3393, 55, 3391,
	3388, 7, 10, 15, 3387, 23, 3386, 169, 3385, 3384,
	3383, 3382, 3381, 87, 85, 3379, 86, 161, 3378, 8,
	24, 69, 3377, 3376, 222, 212, 100, 146, 3375, 294,
	3374, 3373, 3372, 171, 3371, 435, 3369, 3366, 3365, 3362,
	3360, 3359, 93, 3358, 218, 42, 3356, 134, 136, 3355,
	38, 47, 213, 208, 3354, 3353, 3351, 595, 194, 95,
	65, 0, 3350, 163, 3349, 3347, 3346, 254, 3345, 232,
	206, 162, 229, 257, 226, 3343, 3342, 57, 3341, 164,
	33, 54, 138, 72, 19, 204, 3340, 1063, 9, 182,
	3339, 207, 3338, 185, 16, 119, 151, 3336, 3335, 29,
	261, 3334, 3332, 3331, 126, 3330, 3329, 116, 79, 3327,
	3326, 3325, 3324, 36, 3323, 37, 12, 3321, 106, 3320,
	247, 3319, 318, 139, 186, 180, 154, 230, 224, 77,
	76, 3318, 1623, 156, 105, 13, 3317, 223, 3316, 255,
	112, 3315, 81, 3314, 252, 263, 210, 3313, 183, 14,
	45, 34, 26, 44, 11, 167, 203, 3312, 3311, 21,
	51, 3307, 120, 3306, 18, 3304, 3303, 78, 3, 3301,
	3300, 17, 20, 3299, 30, 215, 173, 121, 89, 66,
	3298, 3296, 46, 135, 3293, 137, 153, 158, 3292, 74,
	3291, 3290, 3289, 652, 3286, 259, 3281, 3280, 3279, 3278,
	3276, 3275, 3274, 3273, 3272, 3271, 99, 43, 3270, 3266,
	3265, 3264, 80, 147, 3263, 3262, 3261, 3260, 39, 141,
	3259, 27, 3258, 28, 25, 41, 3257, 96, 3256, 4,
	225, 3254, 3253, 5, 3252, 3251, 1, 2, 3250, 3249,
	115, 3248, 94, 22, 166, 109, 3247, 3246, 83, 220,
	142, 3244, 3243, 98, 240, 205, 3240, 123, 238, 260,
	3238, 214, 3237, 3228, 3227, 3225, 3218, 3217, 1087, 3216,
	3215, 245, 64, 91, 111, 3213, 3211, 3209, 84, 160,
	122, 113, 61, 82, 3207, 110, 199, 3206, 192, 3205,
	3202, 103, 3201, 3200, 3199, 3184, 187, 3183, 3181, 189,
	227, 3179, 3176, 290, 3175, 3173, 3161, 3159, 3157, 3156,
	3154, 3153, 3152, 3150, 233, 236, 3149,
}

//line mysql_sql.y:11050
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 559, 562, 562, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 116, 116, 115, 544, 544, 544, 545,
	545, 112, 134, 133, 136, 136, 135, 135, 132, 132,
	128, 131, 131, 130, 130, 129, 124, 126, 126, 125,
	127, 127, 113, 101, 114, 489, 489, 488, 488, 487,
	487, 440, 440, 486, 486, 486, 485, 485, 485, 484,
	484, 483, 483, 482, 482, 480, 480, 481, 479, 478,
	478, 478, 476, 476, 476, 472, 472, 474, 473, 473,
	475, 467, 467, 470, 470, 468, 468, 468, 468, 471,
	466, 466, 466, 465, 465, 100, 100, 100, 384, 384,
	99, 99, 398, 398, 398, 398, 398, 396, 396, 396,
	396, 396, 396, 395, 395, 394, 394, 399, 399, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 90,
	90, 90, 90, 90, 95, 95, 95, 550, 550, 549,
	549, 551, 551, 551, 551, 552, 552, 93, 93, 93,
	94, 393, 393, 393, 91, 92, 92, 383, 383, 388,
	388, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 392, 392, 392, 390, 390, 389,
	389, 391, 391, 84, 84, 84, 87, 86, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 85, 85, 85,
	85, 85, 85, 80, 80, 80, 80, 80, 79, 79,
	81, 81, 380, 380, 379, 96, 96, 97, 547, 547,
	546, 548, 548, 548, 548, 98, 104, 104, 104, 104,
	104, 104, 104, 103, 103, 106, 106, 105, 107, 89,
	89, 89, 89, 89, 89, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 514, 514, 514, 516, 516, 315,
	316, 563, 318, 314, 314, 314, 510, 510, 511, 512,
	513, 513, 513, 102, 11, 11, 11, 11, 11, 11,
	11, 11, 13, 78, 83, 83, 256, 256, 261, 261,
	262, 262, 262, 267, 267, 268, 268, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 244,
	244, 244, 239, 239, 239, 239, 240, 240, 241, 241,
	242, 242, 242, 242, 243, 243, 308, 308, 263, 263,
	263, 265, 265, 264, 260, 258, 258, 258, 258, 258,
	258, 259, 259, 259, 259, 266, 266, 76, 82, 82,
	82, 527, 527, 77, 538, 538, 443, 443, 329, 329,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 448, 449, 325, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 53,
	56, 52, 52, 52, 369, 369, 51, 564, 564, 303,
	303, 64, 63, 55, 65, 66, 67, 68, 69, 70,
	50, 62, 62, 62, 62, 62, 62, 62, 62, 73,
	461, 461, 566, 566, 566, 71, 72, 442, 442, 442,
	61, 60, 59, 58, 57, 57, 49, 49, 48, 48,
	54, 140, 141, 141, 322, 322, 322, 324, 324, 320,
	565, 565, 412, 412, 323, 323, 47, 47, 47, 47,
	74, 321, 321, 302, 319, 319, 319, 12, 12, 10,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 25, 26, 28, 377, 377, 374,
	27, 19, 18, 18, 22, 21, 17, 17, 20, 23,
	24, 24, 9, 9, 9, 9, 14, 14, 15, 161,
	161, 212, 212, 522, 522, 518, 518, 519, 519, 519,
	520, 520, 521, 521, 108, 455, 455, 455, 455, 455,
	455, 8, 183, 183, 454, 454, 454, 454, 454, 454,
	381, 381, 381, 499, 499, 499, 500, 182, 182, 177,
	177, 456, 456, 346, 501, 501, 464, 464, 463, 463,
	462, 462, 180, 180, 181, 181, 164, 164, 119, 119,
	469, 469, 469, 469, 477, 477, 439, 439, 248, 248,
	295, 295, 296, 296, 154, 154, 155, 155, 155, 155,
	155, 155, 553, 553, 554, 555, 556, 556, 557, 557,
	557, 558, 558, 558, 558, 558, 507, 507, 509, 509,
	508, 179, 179, 175, 175, 176, 176, 176, 174, 174,
	173, 172, 172, 171, 169, 169, 169, 170, 170, 170,
	187, 187, 157, 157, 157, 156, 156, 156, 156, 156,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 158, 158, 515, 515, 515, 444, 444, 444,
	451, 451, 276, 276, 277, 277, 275, 275, 159, 159,
	160, 160, 160, 160, 274, 274, 273, 162, 162, 168,
	167, 167, 163, 163, 163, 163, 284, 284, 283, 283,
	283, 283, 111, 117, 117, 118, 186, 186, 282, 281,
	281, 281, 185, 185, 184, 184, 178, 178, 166, 166,
	166, 166, 280, 165, 278, 543, 543, 542, 542, 541,
	539, 539, 539, 540, 540, 540, 540, 491, 491, 491,
	491, 491, 309, 309, 309, 313, 313, 312, 312, 312,
	312, 312, 317, 7, 7, 7, 7, 7, 7, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 38, 196, 197, 39, 198, 198, 199, 199,
	200, 200, 201, 202, 203, 203, 203, 203, 37, 188,
	188, 189, 189, 190, 190, 191, 192, 192, 192, 195,
	193, 194, 194, 561, 561, 560, 36, 36, 29, 147,
	147, 148, 148, 148, 150, 150, 245, 245, 245, 149,
	149, 151, 151, 151, 523, 526, 524, 524, 528, 528,
	528, 529, 529, 529, 529, 530, 530, 30, 137, 142,
	533, 533, 533, 532, 532, 534, 534, 535, 535, 299,
	299, 300, 300, 145, 146, 146, 144, 139, 153, 153,
	153, 153, 153, 138, 143, 525, 531, 531, 531, 378,
	378, 375, 376, 376, 373, 372, 372, 372, 537, 537,
	536, 536, 536, 310, 310, 31, 368, 368, 370, 371,
	371, 371, 362, 362, 362, 362, 35, 366, 366, 367,
	367, 367, 367, 367, 367, 367, 363, 363, 365, 365,
	361, 361, 361, 361, 361, 361, 34, 152, 152, 360,
	360, 357, 357, 355, 355, 356, 356, 354, 354, 354,
	358, 358, 42, 75, 43, 44, 45, 41, 359, 359,
	33, 33, 33, 33, 121, 120, 120, 120, 120, 120,
	123, 123, 298, 298, 297, 297, 122, 40, 224, 224,
	431, 431, 426, 426, 426, 426, 426, 446, 446, 446,
	427, 427, 427, 428, 428, 428, 430, 430, 430, 429,
	429, 429, 429, 429, 445, 445, 447, 447, 447, 400,
	400, 401, 401, 401, 404, 404, 418, 418, 419, 419,
	417, 417, 424, 424, 423, 423, 422, 422, 421, 421,
	420, 420, 420, 420, 415, 415, 414, 414, 402, 402,
	402, 402, 402, 403, 403, 403, 413, 413, 416, 416,
	272, 272, 271, 271, 232, 232, 233, 233, 270, 270,
	230, 230, 231, 231, 231, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	497, 497, 498, 235, 235, 246, 246, 246, 246, 246,
	246, 234, 234, 236, 236, 213, 213, 211, 211, 204,
	204, 205, 205, 206, 206, 206, 210, 210, 209, 209,
	209, 209, 207, 207, 208, 208, 208, 208, 208, 208,
	386, 386, 494, 494, 495, 495, 490, 490, 490, 493,
	493, 493, 493, 493, 493, 496, 496, 496, 492, 492,
	214, 293, 293, 293, 311, 311, 311, 311, 292, 292,
	292, 229, 229, 228, 228, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 385, 385, 326,
	326, 327, 327, 255, 254, 254, 254, 254, 254, 252,
	253, 251, 251, 251, 251, 251, 250, 250, 249, 249,
	249, 364, 364, 247, 247, 238, 238, 238, 237, 237,
	237, 425, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 290,
	290, 290, 291, 291, 291, 291, 291, 291, 291, 291,
	336, 336, 342, 342, 506, 506, 505, 215, 215, 215,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 225,
	225, 225, 409, 409, 409, 409, 410, 410, 410, 410,
	411, 411, 411, 407, 407, 408, 408, 347, 348, 348,
	452, 452, 453, 453, 405, 405, 406, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 460, 460, 460,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 517, 517, 517, 502,
	502, 502, 503, 503, 503, 503, 503, 503, 503, 503,
	503, 503, 503, 503, 504, 504, 504, 504, 504, 504,
	504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
	504, 288, 288, 288, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 349,
	349, 350, 350, 457, 457, 457, 457, 457, 457, 458,
	458, 459, 459, 459, 459, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 334, 285, 285, 285, 351, 343,
	343, 344, 344, 345, 345, 337, 337, 337, 337, 337,
	337, 338, 338, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 339, 339, 341, 341, 353,
	353, 353, 352, 352, 352, 352, 352, 352, 352, 227,
	227, 227, 227, 331, 331, 331, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 217, 217,
	217, 217, 221, 221, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 222, 222,
	222, 222, 222, 220, 220, 220, 220, 220, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 109, 110, 110, 219,
	294, 294, 432, 432, 435, 435, 433, 433, 434, 436,
	436, 436, 437, 437, 437, 438, 438, 438, 441, 441,
	301, 301, 301, 307, 307, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 4, 0, 1, 1, 0,
	1, 5, 2, 2, 6, 9, 6, 9, 4, 7,
	8, 0, 1, 1, 2, 4, 6, 1, 2, 4,
	0, 2, 10, 10, 2, 0, 2, 1, 3, 3,
	3, 0, 2, 1, 3, 5, 0, 2, 3, 1,
	3, 1, 1, 1, 3, 1, 1, 1, 1, 0,
	3, 3, 0, 3, 3, 0, 1, 3, 0, 1,
	3, 0, 2, 1, 2, 3, 4, 3, 3, 1,
	0, 1, 1, 0, 1, 8, 5, 7, 0, 3,
	8, 5, 1, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 4, 1, 3, 1,
	2, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	2, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	1, 1, 2, 2, 1, 1, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 4, 4, 1, 3, 3,
	1, 2, 2, 2, 1, 2, 2, 3, 4, 4,
	6, 1, 1, 1, 2, 4, 6, 1, 4, 1,
	3, 3, 4, 4, 4, 4, 3, 3, 2, 4,
	4, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 2, 2, 0, 1,
	4, 2, 4, 1, 5, 3, 2, 1, 2, 2,
	4, 4, 5, 2, 1, 3, 4, 4, 1, 2,
	9, 7, 1, 3, 3, 1, 1, 3, 1, 3,
	2, 1, 2, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 2, 4, 3, 3, 1,
	1, 1, 1, 1, 1, 2, 3, 4, 7, 2,
	3, 3, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 1,
	1, 1, 1, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 10, 7, 4, 4, 1, 3, 1, 6,
	3, 3, 3, 1, 1, 1, 3, 2, 4, 5,
	5, 6, 5, 5, 3, 2, 2, 1, 3, 4,
	3, 7, 5, 8, 2, 2, 1, 3, 2, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 0, 1,
	2, 1, 3, 2, 1, 2, 2, 1, 2, 3,
	2, 3, 6, 3, 3, 1, 1, 7, 7, 8,
	8, 0, 4, 7, 0, 3, 0, 2, 0, 1,
	1, 1, 1, 4, 2, 2, 3, 3, 4, 5,
	3, 4, 4, 2, 2, 2, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 2, 5, 5, 0, 2, 7, 0, 1, 0,
	1, 5, 5, 3, 3, 2, 4, 4, 4, 4,
	4, 1, 1, 1, 3, 3, 1, 1, 1, 6,
	0, 1, 1, 1, 1, 5, 5, 0, 1, 1,
	3, 3, 3, 4, 6, 7, 4, 4, 7, 8,
	3, 3, 3, 4, 0, 2, 2, 0, 2, 2,
	1, 1, 1, 1, 0, 1, 4, 4, 5, 4,
	3, 1, 3, 1, 1, 3, 5, 2, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 4, 4, 1, 3, 1,
	4, 6, 6, 4, 4, 4, 4, 4, 3, 6,
	3, 5, 1, 1, 2, 2, 11, 8, 9, 1,
	3, 2, 4, 0, 2, 0, 1, 1, 1, 1,
	0, 1, 0, 1, 4, 2, 1, 5, 4, 4,
	2, 5, 1, 3, 2, 1, 5, 4, 4, 2,
	0, 5, 4, 0, 1, 3, 3, 1, 3, 1,
	3, 1, 3, 4, 0, 1, 0, 1, 1, 3,
	1, 1, 0, 4, 1, 3, 2, 1, 0, 8,
	0, 4, 7, 4, 0, 2, 0, 2, 0, 2,
	0, 4, 1, 3, 1, 1, 6, 4, 5, 7,
	4, 5, 0, 1, 3, 8, 0, 6, 0, 4,
	6, 1, 1, 1, 1, 1, 2, 3, 1, 3,
	6, 0, 3, 0, 1, 2, 4, 4, 0, 1,
	3, 1, 3, 3, 0, 1, 1, 0, 2, 2,
	0, 2, 3, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 7, 7, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 2, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 3, 1,
	1, 1, 4, 4, 4, 3, 2, 2, 2, 3,
	2, 3, 4, 1, 3, 4, 0, 2, 1, 1,
	2, 2, 0, 1, 2, 4, 1, 3, 1, 3,
	2, 3, 1, 4, 3, 0, 1, 1, 2, 5,
	2, 2, 2, 0, 2, 3, 3, 0, 1, 3,
	1, 3, 0, 1, 2, 1, 1, 0, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 1, 7, 1, 3, 0, 1,
	1, 3, 1, 3, 0, 1, 1, 1, 14, 1,
	3, 0, 1, 1, 3, 1, 1, 2, 4, 1,
	1, 1, 1, 0, 1, 2, 9, 9, 7, 1,
	2, 3, 3, 3, 0, 4, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 4, 1, 1, 3, 4,
	3, 0, 1, 1, 1, 0, 2, 7, 8, 8,
	0, 3, 3, 0, 3, 0, 3, 0, 5, 1,
	3, 0, 3, 3, 0, 2, 9, 6, 0, 2,
	2, 3, 3, 4, 4, 1, 0, 2, 2, 1,
	3, 2, 1, 3, 2, 1, 3, 2, 0, 1,
	3, 4, 3, 1, 1, 4, 1, 3, 1, 1,
	1, 1, 0, 1, 1, 1, 11, 0, 2, 3,
	3, 2, 2, 3, 1, 1, 1, 3, 3, 4,
	0, 2, 2, 2, 2, 2, 6, 0, 4, 1,
	1, 0, 3, 0, 1, 1, 2, 4, 4, 4,
	0, 1, 8, 2, 4, 4, 4, 9, 0, 2,
	11, 9, 11, 8, 2, 2, 9, 4, 5, 3,
	0, 4, 1, 3, 0, 3, 5, 10, 0, 2,
	0, 2, 0, 3, 2, 4, 3, 0, 2, 1,
	0, 2, 3, 0, 2, 3, 0, 2, 1, 0,
	3, 2, 4, 3, 0, 1, 0, 1, 1, 0,
	6, 0, 3, 5, 0, 4, 0, 3, 1, 3,
	4, 5, 0, 3, 1, 3, 2, 3, 1, 2,
	0, 4, 6, 5, 0, 2, 0, 2, 4, 5,
	4, 5, 1, 5, 6, 5, 0, 3, 0, 1,
	1, 3, 3, 3, 0, 4, 1, 3, 3, 3,
	0, 1, 1, 3, 2, 3, 3, 3, 4, 4,
	3, 3, 3, 3, 4, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 5, 4,
	1, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 0,
	1, 1, 3, 1, 1, 1, 1, 1, 7, 9,
	7, 9, 2, 1, 7, 9, 7, 9, 8, 5,
	0, 1, 0, 1, 1, 1, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	3, 1, 3, 5, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 2, 1, 2, 2, 1, 1,
	2, 2, 2, 3, 3, 2, 2, 1, 5, 6,
	4, 1, 1, 1, 5, 4, 1, 1, 2, 0,
	1, 1, 2, 5, 0, 1, 1, 2, 2, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 2, 2,
	2, 0, 3, 0, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 3, 5,
	2, 2, 2, 2, 1, 1, 2, 5, 6, 8,
	6, 6, 6, 1, 1, 1, 1, 1, 1, 4,
	4, 4, 7, 9, 7, 7, 7, 9, 7, 7,
	0, 2, 0, 1, 1, 2, 4, 1, 2, 2,
	1, 2, 2, 1, 2, 2, 2, 2, 2, 0,
	1, 1, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 5, 0, 1, 3, 0, 1,
	0, 2, 0, 2, 0, 1, 6, 8, 8, 6,
	6, 5, 5, 5, 6, 6, 6, 6, 5, 6,
	6, 6, 6, 6, 6, 6, 6, 1, 1, 1,
	4, 4, 6, 8, 6, 4, 5, 4, 4, 4,
	3, 4, 6, 6, 7, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 8, 4, 2, 3, 2, 4, 2,
	2, 4, 6, 2, 2, 4, 6, 4, 2, 0,
	1, 2, 3, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 3, 0,
	1, 1, 3, 1, 3, 3, 3, 3, 3, 2,
	1, 1, 1, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 1, 3, 4, 4, 5, 4, 5,
	3, 4, 5, 6, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 2, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 4, 4, 1, 2, 3, 5, 1,
	1, 3, 0, 1, 0, 3, 0, 3, 3, 0,
	3, 5, 0, 3, 5, 0, 1, 1, 0, 1,
	1, 2, 2, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}

var yyChk = [...]int{
	-1000, -559, -562, -2, -5, 611, -1, -4, -110, -84,
	-7, -112, -113, -8, -108, -9, -10, -12, -88, -103,
	-105, -107, -106, -46, -11, -102, -79, -80, -90, -96,
	-99, -100, -101, -114, -109, -111, -154, -115, -116, 601,
	-85, -86, -87, -32, -31, -30, -29, -137, -142, 607,
	445, 14, 494, -14, -15, -507, -16, 258, -314, -315,
	-316, -318, -563, -47, -48, -49, -57, -58, -59, -60,
	-61, -71, -72, -73, -50, -51, -52, -55, -53, -64,
	-63, -65, -66, -67, -68, -69, -70, -54, -140, -141,
	-74, -56, -75, -77, -76, -82, -78, -83, -139, -144,
	-13, 233, -81, 76, -91, -92, -93, -94, -95, -97,
	-98, 369, 375, 432, 600, 61, -155, -157, 617, 618,
	158, 159, 161, 162, -33, -34, -35, -36, -37, -38,
	-40, -39, -41, -42, -43, -44, -45, 229, 16, 537,
	-17, -20, -18, -21, -19, -27, -28, -26, -23, -25,
	-138, -24, -143, -22, 253, 252, 38, 319, 320, 321,
	373, 251, 230, 15, 31, 42, 349, -156, 82, 529,
	530, 532, 231, -158, 13, 621, -6, -3, -2, -124,
	-128, -132, -135, -136, -133, -134, -4, -110, 116, 243,
	602, -311, 365, 603, 605, 604, 85, 93, -304, -306,
	445, 258, 369, 375, 600, 618, 542, 543, 544, 545,
	546, 547, 548, 549, 551, 552, 553, 554, 555, 556,
	557, 567, 568, 558, 559, 560, 561, 562, 563, 564,
	565, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 497, 587, 588, 589, 590,
	525, 550, 586, 347, 348, 534, 270, 294, 400, 300,
	307, 158, 177, 171, 199, 191, 530, 166, 274, 312,
	275, 92, 161, 480, 106, 457, 429, 164, 289, 291,
	293, 526, 527, 359, 296, 524, 295, 297, 299, 528,
	276, 350, 187, 182, 288, 272, 180, 277, 40, 278,
	204, 279, 280, 539, 453, 346, 459, 304, 52, 427,
	181, 454, 292, 456, 208, 212, 471, 472, 175, 176,
	461, 474, 203, 206, 207, 250, 343, 344, 43, 536,
	262, 475, 210, 202, 198, 483, 308, 306, 201, 174,
	197, 273, 65, 214, 213, 215, 423, 424, 425, 426,
	281, 282, 363, 470, 194, 183, 351, 167, 23, 478,
	257, 458, 376, 283, 301, 309, 209, 211, 264, 269,
	538, 529, 431, 268, 305, 476, 179, 261, 290, 256,
	479, 168, 532, 378, 284, 162, 298, 473, 482, 64,
	391, 173, 165, 247, 159, 266, 271, 285, 286, 287,
	523, 311, 310, 302, 531, 195, 263, 200, 185, 172,
	196, 160, 265, 481, 392, 598, 349, 410, 193, 190,
	267, 240, 477, 460, 163, 414, 393, 188, 313, 594,
	595, 596, 364, 342, 314, 315, 186, 254, 451, 452,
	318, 420, 334, 394, 430, 401, 395, 221, 222, 322,
	463, 465, 205, 597, 323, 324, 325, 455, 326, 327,
	328, 329, 368, 56, 58, 94, 96, 619, 63, 29,
	354, 357, 389, 396, 336, 599, 535, 333, 337, 358,
	25, 412, 380, 416, 415, 48, 49, 50, 53, 54,
	55, 57, 59, 60, 51, 522, 373, 386, 484, 45,
	47, 383, 27, 360, 411, 433, 332, 413, 444, 46,
	442, 443, 464, 26, 362, 361, 62, 44, 419, 421,
	422, 316, 330, 371, 608, 485, 366, 382, 385, 367,
	335, 356, 387, 67, 66, 379, 609, 374, 372, 331,
	540, 541, 338, 566, 352, 428, 519, 518, 517, 516,
	515, 514, 513, 512, 319, 320, 321, 397, 398, 399,
	409, 402, 403, 404, 405, 406, 407, 408, 447, 448,
	610, 466, 468, 469, 467, 235, 620, 353, 238, 612,
	613, 95, 614, 616, 615, 28, -391, -389, -311, 530,
	600, 375, 529, 532, 369, 349, 618, 373, 258, 319,
	320, 321, 445, -198, -311, 620, -164, 39, -211, -311,
	-164, -81, -15, -14, -156, -157, -211, 237, -319, 24,
	427, -89, 428, 233, 82, -311, -9, -101, -8, -108,
	-79, -154, 432, -317, -311, 319, 319, -317, 237, -311,
	268, 408, -443, 243, -395, -368, 269, -394, -370, -397,
	-371, 32, 229, 231, 230, 265, 16, 373, 239, 14,
	13, 374, 251, 25, 26, 28, 15, 375, 377, 29,
	378, 381, 382, 383, 42, 386, 387, 258, 85, 93,
	88, 276, -197, -311, -345, -337, 113, -340, -332, -333,
	-335, -486, -480, -330, 82, 140, 141, 148, 114, -334,
	-425, 36, 116, 546, 550, 586, 495, -286, -287, -288,
	-289, -290, -291, -311, -481, -479, 88, 97, 99, 103,
	104, 102, 100, 152, 184, 101, 89, 153, -157, 85,
	-502, 556, -305, 579, 587, 588, 589, 590, 578, 61,
	-450, -459, 236, -457, 151, 189, 254, 185, 14, 146,
	420, 186, 553, 575, 497, 557, 567, 582, 548, 549,
	551, 543, 544, 545, 547, 558, 560, 574, -460, 570,
	580, 581, 566, 583, 584, 585, 616, 87, 86, 573,
	572, 559, 554, 555, 561, 542, 552, 562, 563, 571,
	576, 577, 357, 106, 358, 359, 487, 350, 360, 243,
	427, 70, 361, 362, 363, 364, 365, 494, 366, 71,
	367, 356, 258, 410, 368, 188, 205, 499, 498, 500,
	491, 488, 486, 489, 490, 492, 493, 564, 565, 569,
	-117, -118, 592, -553, -279, -554, 6, 7, 8, 9,
	-555, 153, -544, 429, 538, 88, 163, 160, -382, 163,
	112, 168, 167, -382, 322, 264, -359, -147, 347, 410,
	326, 94, 268, -362, -360, 526, -445, 316, 312, 288,
	238, 109, -148, 248, 247, 107, 487, 236, 384, 307,
	56, 58, -518, -519, 226, 227, 228, -509, 520, -508,
	-311, 359, 96, 27, 237, 370, 264, 465, 463, 464,
	466, 467, 468, 469, -62, -461, -442, 460, 459, -323,
	452, 458, 450, 462, 453, 348, 328, 327, 229, 612,
	527, 521, -301, 394, 430, 484, 485, 371, 431, 471,
	473, 454, 106, 192, 189, 238, 240, 237, 347, 487,
	410, 94, 326, -518, 160, 471, 473, 268, 408, 41,
	-388, 420, -387, -389, 472, 483, 86, 87, 470, -301,
	106, 451, 451, -553, -279, -155, -157, -111, -507, 528,
	528, 528, 238, 347, 410, 268, 239, 237, 523, 526,
	240, 487, 236, 319, 370, 264, 326, 94, -444, -515,
	32, -451, 223, 224, 225, 33, 34, -1, 120, 621,
	-337, -337, -6, 624, -6, -337, -311, -311, 155, -217,
	-221, -218, -220, -219, -223, -222, 189, 190, 151, 193,
	195, 196, 197, 198, 199, 200, 201, 202, 203, 206,
	207, 204, 31, 205, 254, 185, 186, 187, 188, 208,
	171, 191, 535, 216, 172, 217, 173, 218, 174, 219,
	175, 176, 220, 177, 180, 181, 182, 183, 179, 154,
	82, 154, 88, -180, 260, -211, 154, -180, -553, -173,
	-174, 11, -211, -292, -311, 429, 123, -89, -89, 428,
	-510, -511, -512, -514, 233, 428, 427, 154, 276, 17,
	-317, -317, 80, -211, -370, 268, -395, -368, 36, 79,
	155, 241, 155, 79, 82, 371, 347, 410, 372, 487,
	237, 384, 240, 268, 385, 347, 410, 237, 240, 487,
	268, 347, 237, 240, 410, 268, 385, 450, 451, 240,
	27, 376, 379, 380, 451, -465, 483, 155, 112, 109,
	110, 111, -337, 130, -352, 123, 124, 125, 126, 127,
	128, 129, 137, 136, 147, 140, 141, 142, 143, 144,
	145, 146, 138, 139, 133, 113, 131, 135, 132, 115,
	-157, -337, -345, 61, -335, -335, -335, -335, -425, -342,
	-337, 82, 82, 82, 82, 154, 100, 88, -337, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, -458, 82, 82, -349, -350, 82, 82, -330, -292,
	82, 88, 88, 82, 82, 82, 88, -350, -350, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, -174, 155, -173, 82, -173, -174, -158, -157,
	32, 33, 32, 33, 32, 33, 32, 33, -556, 609,
	82, 97, 619, 221, 476, 537, 166, 167, 168, -196,
	-311, -198, 370, 240, 523, 240, -148, -357, 243, -357,
	-357, -357, -357, 239, -357, 24, 237, 237, 237, 237,
	-357, 494, 123, 123, 59, -520, 170, 155, -509, -179,
	82, -322, 131, 135, -322, 24, 266, 266, 266, -322,
	306, -564, -565, 17, 133, -320, -565, -320, -320, -322,
	-566, 239, 461, 43, 267, 266, -175, -176, 22, -175,
	455, 451, -412, 456, 457, -324, -565, -323, -322, -322,
	-323, -322, -322, -322, 32, 237, 240, 487, 326, 613,
	-564, -564, 31, 31, -443, -443, -211, -443, 521, -302,
	-311, -443, -443, -443, -521, 242, -550, -549, 474, -552,
	476, 160, -389, 160, -389, -370, 268, 268, 155, 123,
	24, -390, 123, 134, -389, -389, -390, -390, -234, 41,
	-310, 151, -311, 88, -234, 41, -547, -546, -211, -174,
	-158, -157, 83, 83, 83, 531, 531, 531, -443, -443,
	-443, -443, -443, -445, -443, -443, -443, -443, -443, -317,
	-188, -311, -198, 243, -443, -443, -159, -160, 142, -337,
	-311, -159, -3, -126, -125, 117, 118, 120, 603, 365,
	602, 606, 600, -389, 41, -438, 392, 391, -432, -434,
	82, -433, 82, -433, -433, -433, -433, -433, 82, 82,
	-435, 82, -435, -435, -432, -436, 82, -436, -437, 82,
	-437, -436, -311, -343, -345, -311, 39, -454, 61, -154,
	82, 31, 82, -311, -455, 61, -154, 82, 31, -174,
	-119, 39, -176, 21, 154, 97, 88, -89, 83, 155,
	-513, 103, 104, -516, 203, 195, -311, -104, 88, -7,
	-8, -9, -10, -46, -79, -154, -482, -480, 82, 32,
	419, 79, 17, -396, 237, 487, 370, 264, 240, 347,
	-394, -377, -374, -372, -310, -370, -373, -372, -399, -292,
	451, -120, 434, 433, 318, -337, -337, -337, -337, -337,
	102, 113, 342, 103, 104, -332, -353, 32, 314, 315,
	-333, -333, -333, -333, -333, -333, -333, -333, -333, -333,
	-333, -333, -341, -351, -425, 82, 133, 131, 135, 132,
	115, -335, -335, -333, -333, 83, 155, -506, -505, 117,
	-337, -337, -337, -337, -311, -503, -504, 501, 502, 503,
	504, 505, 506, 507, 508, 509, 510, 511, 361, 356,
	362, 360, 350, 368, 363, 364, 188, 518, 519, 512,
	513, 514, 515, 516, 517, -343, -343, -337, -503, -343,
	-285, 33, 32, -345, -345, -345, 83, -337, -517, 340,
	339, 341, -177, -311, -343, 83, 83, 83, 97, -345,
	-345, -343, -333, -343, -504, -285, -285, -285, -285, 142,
	-345, -345, -285, -285, -285, -285, 142, -285, -285, -285,
	-285, -285, -285, -285, -285, 83, 83, 83, 142, -345,
	-175, -118, -463, -462, -337, 41, -119, -176, -557, 610,
	82, -292, -545, 88, 88, 622, 477, 478, 164, 167,
	166, 35, 82, -188, -357, -357, -357, -523, -311, 113,
	-378, -375, -372, -311, -311, -368, -311, -311, -211, -357,
	-357, -357, -357, -211, -245, 53, 54, 55, -372, -149,
	56, 57, -521, -508, 35, -178, -311, -275, 18, -335,
	-335, -372, 268, -564, -322, -322, -303, -302, -324, -319,
	-324, -324, -275, -320, -322, -322, -337, -324, -320, -275,
	-311, 451, -275, -275, -412, -322, -321, -311, -321, -357,
	-302, -303, -303, -211, -211, -256, -261, -257, -262, 260,
	234, 354, 355, 232, 230, 11, 231, -269, 307, -358,
	495, -240, -241, 77, 42, -243, 258, 396, 389, 270,
	274, 92, 275, 429, 276, 239, 278, 279, 280, 295,
	297, 250, 281, 282, 283, 420, 284, 159, 296, 285,
	286, 287, 372, -235, 6, 329, 41, 51, 52, 443,
	442, 540, 537, 271, -523, -523, 31, 31, -378, -311,
	-311, -167, -162, -166, -163, -168, -278, -280, -165, 82,
	-211, -157, -311, 155, 475, 477, 478, -550, -390, -550,
	-390, 32, 419, -393, 419, 32, -368, -387, 471, 473,
	-383, 88, 420, -373, -392, 79, 151, -462, -390, -390,
	-392, -392, 150, 155, -548, 476, 477, 226, -175, 97,
	97, 97, -213, -211, -523, -377, -368, -311, -443, -213,
	-213, -213, -311, -311, 82, 154, 36, -311, -311, -274,
	155, -273, 17, -312, -311, 35, 88, 154, -274, -127,
	-125, 119, -337, -6, 602, -337, -6, -6, -337, -6,
	-337, -441, 393, 97, 97, -294, 88, -294, 97, 97,
	97, 83, 88, -381, 79, -456, -346, -501, 592, -182,
	83, -177, -499, -500, -177, -181, -311, -456, -182, 83,
	-499, -175, 593, -119, -172, -171, -337, -311, 24, -89,
	-511, 154, 155, -178, -396, -376, -373, -398, 142, -311,
	-384, 155, 537, 625, 86, 241, -537, -536, 411, 83,
	155, -466, 242, 494, 88, 622, 427, 221, 222, 102,
	342, 103, 104, -425, -345, -341, -335, -335, -333, -333,
	-339, 255, -339, 112, -337, -336, -505, 119, -337, 35,
	155, 35, 155, 80, 154, 83, 83, 17, 17, 83,
	-337, 83, 83, 83, 83, 17, 17, -337, 83, 154,
	83, 83, 83, 83, 80, 83, 155, 83, 155, -345,
	-345, -337, -345, 83, 83, 83, -337, -337, -337, -345,
	83, -337, -337, -337, -337, -337, -337, -337, -337, -406,
	446, -406, -406, 155, 155, 155, 83, -119, 82, 97,
	155, -298, -297, 88, 165, 168, 168, 167, -197, -199,
	-200, -201, -202, -203, 133, 156, 157, 82, -211, -211,
	-211, -526, 397, 36, -538, 155, 41, -536, 487, -145,
	318, -361, 80, -152, 17, 537, -211, -211, -211, -211,
	-224, 35, 17, -161, -212, -311, 82, 83, 155, -337,
	-369, 80, -311, -303, -275, -275, -324, -275, -275, 155,
	23, -322, -324, -324, -320, 154, -302, -431, 35, -179,
	155, 21, 260, -210, -308, -207, -209, 245, -327, -208,
	248, -495, 246, 244, 107, 249, 303, 108, 239, -308,
	-308, 245, -244, 241, 35, -308, -259, 239, 345, 303,
	246, 21, 260, -258, 239, 108, -311, 245, 249, 244,
	-307, 123, -301, 150, 241, 43, 372, -307, 541, 260,
	-307, -307, -307, -307, -307, -307, -307, 277, 277, -307,
	-307, -307, -307, -307, -307, -307, -307, -307, -307, -307,
	160, -307, -307, -307, -307, -307, -307, 82, 272, 273,
	-527, 397, 31, 353, 353, -538, 31, -153, 347, 31,
	-281, -282, -283, -284, 68, 72, 74, 69, 70, 71,
	75, 31, 155, -309, -313, 35, -311, 88, -309, -157,
	-162, -167, -309, 82, -549, -551, 479, 476, 482, -392,
	-392, 241, 82, 123, -392, -392, 41, -310, -546, 483,
	477, -119, 155, 79, -213, -189, -190, -191, -192, -217,
	-292, 190, 193, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 206, 207, 204, 205, 254, 185, 186, 187,
	188, 208, 171, 191, 535, 172, 173, 174, 175, 176,
	177, 180, 181, 182, 183, 179, -311, -198, -275, -160,
	-162, -311, 88, -311, 142, -275, 120, -6, 118, -131,
	-130, -129, 121, 600, 606, 120, 120, 120, 83, 83,
	83, 155, 83, 83, 83, 155, 83, 155, -469, 456,
	40, 155, 82, 83, 155, 61, 155, 123, 83, 155,
	83, 61, -119, 88, 155, -169, 37, 38, 154, 429,
	-311, -480, 83, -398, 155, 241, 154, 154, -374, 375,
	-310, -376, 21, 537, -292, 39, -298, 123, 622, -311,
	83, -339, -339, 112, -335, -332, 83, 120, -337, 118,
	-215, -217, 391, 392, -337, -215, -216, -222, 151, 189,
	254, 188, 187, 185, 391, 392, -234, -311, -337, -337,
	83, -337, -337, 17, -311, -234, -333, -337, -174, -174,
	83, 83, -405, -406, -405, -405, 83, 83, 83, 83,
	-405, 83, 83, 83, 83, 83, 83, 83, 83, 82,
	97, 99, 97, 99, -462, -558, 63, 608, 62, 419,
	102, 308, 155, 97, 623, 155, 123, 168, 383, 83,
	155, -292, -189, -179, 82, -179, -529, 458, 399, 409,
	-307, -329, -328, 349, 42, -448, 420, 405, 406, -375,
	268, -311, -535, 95, 123, 79, 333, 337, 334, 335,
	336, -355, -356, -354, -358, -523, 82, 82, 82, 82,
	35, -426, 323, -217, -211, -161, -311, 17, 155, -522,
	154, -1, -311, -368, -322, -275, -337, -337, -275, -322,
	-322, -324, -311, -426, -217, 35, -257, 234, 231, -402,
	305, 306, -403, -416, 308, -418, 82, -214, -292, -208,
	-494, -495, -357, -311, 108, -494, 108, 82, -214, -292,
	-292, -260, -321, -292, -311, -311, -311, -311, -265, -264,
	-292, -267, 32, -268, -311, -311, -311, -311, 108, 108,
	-239, 41, 48, 49, 50, -307, -307, 192, -242, 41,
	419, 421, 422, -267, 97, 97, 97, 97, 88, 88,
	88, -307, -307, 97, 88, -313, 88, -496, 167, 45,
	46, 97, 97, 97, 97, 41, 88, -246, 41, 288,
	292, 289, 290, 291, 88, 97, 41, 97, 41, 97,
	41, -311, 82, -497, -498, 88, -529, -307, 353, -389,
	123, -329, -534, 318, -146, 92, 32, -183, 234, 231,
	-523, -380, -379, -292, -166, -166, -166, -166, 68, 68,
	68, 73, 68, 73, 68, -283, -380, -168, -179, -313,
	83, -543, -542, -541, -539, 76, 242, 77, -343, 476,
	480, 481, -376, -325, 88, -383, -187, 24, -211, -211,
	-447, 298, 299, 83, 155, -217, -277, 19, 154, -277,
	116, -6, -127, -129, -337, -6, -337, 602, 365, 603,
	88, 97, 97, -477, 440, 435, 437, 108, -346, -464,
	-463, 61, -154, -177, -456, -500, -462, -311, 61, -154,
	-456, -187, -469, -171, -170, 44, -311, 97, 17, -373,
	-368, 142, 142, -311, 376, -384, 88, 398, 88, 237,
	623, 88, -298, -332, -337, 83, -225, 176, 175, -225,
	35, 83, 83, -433, -433, -432, -435, -432, -225, -225,
	83, 83, 24, 83, 83, 83, -337, 83, 83, 155,
	-452, 496, -453, 568, -405, -405, -405, -405, -405, -405,
	-405, -405, -405, -405, -405, -405, -405, -405, -348, -347,
	260, 441, 615, 615, 441, 615, 615, 83, 155, -503,
	155, -297, 88, 88, 88, -201, -217, 83, 35, -204,
	-205, -206, -214, -207, -209, 35, -530, 92, -524, 88,
	-311, -531, 92, 400, 153, 351, 41, 401, 402, 417,
	346, 97, 97, 407, -525, -311, -153, -533, 52, 123,
	88, -211, -354, -301, 150, 279, 326, -272, -271, -311,
	88, -204, -204, -204, -154, -427, 325, 21, 97, 141,
	-180, 80, 154, -162, -212, -311, 142, 83, -275, -275,
	-275, -322, -427, -154, -414, 309, 82, -412, 82, -412,
	108, 334, -419, -417, 260, -263, 45, 47, -217, -492,
	-311, -490, -492, -311, -490, -490, -357, -337, -263, -214,
	241, 31, 231, -266, 331, 332, 337, -385, 304, 113,
	-385, 155, -169, 155, -311, -234, -234, 31, 88, 88,
	-213, 83, 155, 123, -530, -524, 123, -390, 88, -531,
	-535, 123, 88, 155, -183, -183, -275, 155, 123, -185,
	-184, 79, 80, -186, 79, -184, 68, 68, -275, -541,
	-540, 24, -495, -495, -495, 83, 83, 15, -191, 41,
	-276, 20, 21, 142, -276, 120, 118, 120, 120, -311,
	83, 83, -439, 594, -473, -475, 435, 21, 21, 15,
	242, 83, -456, -456, -477, 45, 46, -368, -384, 420,
	-211, 155, 623, -215, -337, 83, -337, 83, 88, 83,
	88, -174, 21, 83, 83, 83, 83, 83, 83, -337,
	83, -503, 235, -154, 83, 155, -154, 88, -528, 411,
	88, 88, 97, 41, 97, 153, 403, -449, -146, -532,
	92, 123, 622, 82, -307, -307, -307, -311, 83, 155,
	-307, -307, 83, 83, 83, -232, 537, -428, 259, 97,
	141, 97, 141, 97, -309, -162, -311, -275, -522, 154,
	-275, -428, -404, 310, 97, -333, 82, -333, 82, -413,
	307, 82, 83, 155, -311, -292, -229, -228, -226, 102,
	113, 41, 389, -227, 92, 150, 293, 296, 295, 271,
	294, -255, -326, 79, 395, 331, 332, -358, 594, 525,
	244, 107, 108, 377, -327, 82, 82, 80, 313, 82,
	82, -492, 83, -263, -292, 41, -266, 41, 343, 304,
	-264, -311, 150, -234, 83, -498, 88, -528, 88, -392,
	-533, 88, -523, -174, -379, -462, -337, 82, -337, 82,
	68, 11, 19, -330, -337, -345, 243, -6, 603, 365,
	-248, 595, 88, 21, 88, -471, 88, -380, -439, -122,
	-467, -412, 276, 83, 83, 83, -405, -405, -408, -407,
	-411, 441, 305, 449, -345, 80, 80, 83, 83, -193,
	-217, -150, 537, -232, -206, -150, 21, 537, 350, 41,
	97, 41, 404, 123, 103, 104, -299, -300, 88, -363,
	-365, -292, 82, -234, -236, -310, 151, 88, -271, -330,
	-330, -230, -231, -269, -358, -121, -120, -230, 82, -429,
	159, 97, 141, 97, 97, -275, -275, -429, -418, 21,
	83, -399, 83, -399, 82, 123, -333, -417, -420, 61,
	-226, 102, -333, 88, -236, -237, 41, 292, 288, 123,
	123, -238, 41, 272, 273, -247, 82, 303, 15, 192,
	82, 108, 108, -211, -363, -363, -493, 333, 334, 335,
	338, 337, 336, -493, -363, -363, 82, -386, -385, -333,
	-307, -307, 150, -532, -175, -178, -491, -311, 244, 21,
	21, -311, -311, -295, 596, 97, 88, 437, -248, -440,
	597, -476, 440, -470, -468, 435, 436, 437, 438, 123,
	83, -410, 115, 403, 407, -331, -334, 97, 99, 184,
	153, 441, 441, 536, -151, 60, 483, 88, 398, 88,
	350, 88, 623, 155, 123, 83, 155, -432, -337, -400,
	260, 155, -269, -301, -122, -400, -233, -270, -311, 88,
	-446, 167, 324, 537, 97, 141, 97, -174, -430, 167,
	324, -403, 83, 83, 83, -399, 97, 83, -424, -421,
	82, -269, 262, 133, 88, 88, 97, 82, -457, 31,
	88, -364, 82, 83, 83, 83, 83, -363, 97, -234,
	-307, 83, 83, 155, 82, 21, -295, 88, -478, 242,
	-474, -475, 439, -468, 21, 437, 21, 21, 88, -409,
	-410, 407, -331, -334, 592, 447, 447, 447, -195, -311,
	303, 420, -300, 88, -366, -365, -169, 83, -401, 312,
	21, -269, -307, -401, 83, 155, -307, -307, 324, 97,
	141, 97, -175, 324, -415, 311, 83, -424, -269, -423,
	-422, 310, 263, 82, 83, -337, -349, -307, 83, -250,
	-249, 533, -363, -366, 80, -366, 80, -366, 80, -366,
	80, 83, -234, -311, 244, -296, -311, -471, -485, 82,
	97, -473, -472, -474, 21, -471, 21, -471, -471, -123,
	155, 112, 448, 448, 448, -194, 35, 442, 376, -367,
	250, 343, 344, 92, 537, 331, 332, -169, 21, -402,
	-234, -270, -330, -330, 97, 97, 83, 155, -311, 259,
	82, -344, -338, -337, 259, 83, -311, -254, -252, -253,
	79, 454, 301, 302, 83, -493, -493, -493, -493, -255,
	83, 155, -489, 31, 83, -484, -483, -293, -479, -311,
	440, 441, 88, -471, 444, -409, 88, -307, -307, 88,
	88, 330, -292, 82, -414, -422, -421, -344, 83, 155,
	-385, -253, 79, -252, 79, 16, 15, -366, -366, -366,
	-366, -311, -488, -487, -486, 83, 155, 154, 123, -561,
	-560, 614, 97, 97, -311, -399, -404, 83, -338, -251,
	298, 299, 31, 167, -251, 155, 123, -483, -311, 88,
	88, 83, -418, 102, 41, 300, -487, 41, -337, 154,
	-311,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 0,
	263, 264, 265, 853, 854, 855, 856, 857, 858, 0,
	0, 0, 0, 612, 613, 0, 579, 0, 0, 0,
	0, 0, 0, 469, 470, 471, 472, 473, 474, 475,
	476, 477, 478, 479, 480, 481, 482, 483, 484, 485,
	486, 487, 488, 489, 490, 491, 492, 493, 494, 495,
	496, 497, 498, 354, 355, 356, 357, 358, 359, 360,
	361, 0, 288, 284, 209, 210, 211, 212, 213, 295,
	296, 446, 0, 0, 0, 0, 694, -2, 56, 0,
	277, 0, 268, 268, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, -2, 625, 0,
	580, 581, 582, 583, 584, 585, 586, 587, 588, 589,
	590, 591, 592, 593, 343, 344, 345, 339, 340, 342,
	341, -2, 0, 625, 0, 0, 0, 702, 0, 0,
	0, 0, 0, 745, 767, 23, 0, 7, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 0, 0,
	19, 0, 19, 0, 0, 0, 1244, 1245, 1246, 1247,
	2015, 1985, -2, 1761, 1738, 1912, 2044, 2045, 2046, 2047,
	2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057,
	2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067,
	2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077,
	2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087,
	2088, 2089, 2090, 1695, 1696, 1697, 1698, 1699, 1700, 1701,
	1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711,
	1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721,
	1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731,
	1732, 1733, 1734, 1735, 1736, 1737, 1739, 1740, 1741, 1742,
	1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752,
	1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1762, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
	1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803,
	1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813,
	1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
	1824, 1825, 1826, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,
	1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1913, 1914, 1915,
	1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925,
	1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
	1936, 1937, 1938, 1939, 1940, 1941, -2, 1943, 1944, 1945,
	1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
	1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965,
	1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975,
	1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1986,
	1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
	1997, 1998, 1999, 2000, -2, -2, -2, 2004, 2005, 2006,
	2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2016, 2017,
	2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027,
	2028, 2029, 2030, 2031, 2032, 2033, 0, 261, 259, 1708,
	1738, 1761, 1815, 1826, 1827, 1861, 1912, 1942, 1985, 2001,
	2002, 2003, 2015, 0, 876, 0, 672, 0, 677, 1197,
	672, 289, 614, 615, 702, 728, 577, 0, 325, 0,
	1752, 329, 1992, 0, 0, 574, 319, 320, 321, 322,
	323, 324, 0, 0, 852, 0, 0, 315, 0, 283,
	1817, 2014, 0, 0, 0, 0, 0, 153, 986, 155,
	988, 159, 166, 0, 0, 171, 172, 175, 176, 177,
	178, 179, 0, 183, 0, 185, 188, 0, 190, 191,
	0, 194, 195, 196, 0, 206, 207, 208, 989, 990,
	991, -2, 84, 874, 1666, 1553, 0, 1560, 1573, 1584,
	1324, 1325, 1326, 1327, 0, 0, 0, 0, 0, 1334,
	1335, 0, 1362, 2048, 2089, 2090, 0, 1343, 1344, 1345,
	1346, 1347, 1348, 93, 105, 106, 1606, 1607, 1608, 1609,
	1610, 1611, 1612, 0, 1614, 1615, 1616, 1524, 1311, 1244,
	0, 2057, 0, 2079, 2084, 2085, 2086, 2087, 2078, 0,
	0, 1509, 0, 1499, 0, 0, -2, -2, 0, 0,
	1886, -2, 2054, 2075, 2083, 2058, 2059, 2082, 2050, 2051,
	2052, 2045, 2046, 2047, 2049, 2061, 2063, 2074, 0, 2070,
	2080, 2081, 1990, 0, 0, 0, 2031, 107, 108, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1520, -2, -2, 1523,
	-2, 1526, -2, -2, -2, -2, 1531, 1532, -2, 1534,
	-2, -2, -2, -2, -2, -2, -2, 1511, 1512, 1513,
	1514, 1503, 1504, 1505, 1506, 1507, 1508, -2, -2, -2,
	728, 803, 0, 728, 0, 703, 750, 753, 756, 759,
	706, 0, 0, 57, 58, 0, 278, 279, 267, 269,
	0, 273, 0, 266, 0, 0, 0, 0, 1021, 1021,
	1021, 1021, 1021, 0, 1021, 0, 0, 0, 0, 0,
	1021, 0, 909, 993, 994, 995, 1019, 1020, 1085, 0,
	0, 0, 630, 626, 627, 628, 629, 716, 0, 718,
	721, 554, 554, 501, 0, 0, 0, 554, 0, 515,
	507, 0, 0, 0, 554, 0, 0, 723, 723, 0,
	557, 564, 554, 554, -2, 554, 554, 554, 0, 0,
	1033, 521, 522, 523, 507, 507, 526, 527, 528, 538,
	539, 565, 1690, 0, 0, 446, 446, 0, 446, 0,
	446, 446, 446, 632, 1856, 1759, 1832, 1817, 2014, 0,
	234, 1886, 239, 0, 1760, 1779, 0, 0, 1797, 0,
	-2, 0, 305, 728, 0, 0, 702, 0, 0, 0,
	0, 0, 446, 446, 446, 446, 446, 1084, 446, 446,
	446, 446, 446, 0, 0, 0, 446, 446, 0, 0,
	768, 769, 764, 765, 766, 770, 771, 5, 6, 19,
	0, 0, 0, 0, 0, 0, 63, 62, 0, 1667,
	1685, 1619, 1620, 1621, 1672, 1623, 1676, 1676, 1676, 1676,
	1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1676,
	1676, 0, 0, 1665, 1643, 1674, 1674, 1674, 1672, 1669,
	1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633,
	1634, 1635, 1636, 1637, 1679, 1679, 1682, 1682, 1679, 0,
	1549, 0, 0, 0, 0, 676, 0, 0, 728, -2,
	0, 0, 578, 326, 1248, 0, 0, 330, 331, 0,
	0, 346, 0, 349, 334, 335, 336, 0, 133, 0,
	317, 318, 0, 0, 285, 0, 0, 0, 447, 0,
	0, 0, 0, 0, 0, 163, 160, 167, 170, 180,
	187, 0, 199, 201, 204, 161, 168, 173, 174, 181,
	202, 162, 164, 165, 169, 203, 205, 182, 186, 200,
	184, 189, 192, 193, 198, 0, 134, 0, 0, 0,
	0, 0, 1559, 0, 0, 1592, 1593, 1594, 1595, 1596,
	1597, 1598, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 1553, 0, 0, 1330, 1331, 1332, 1333, 1336, 0,
	1363, 0, 0, 0, 0, 0, 1613, 1617, 0, 1549,
	1549, 0, 1549, 1545, 0, 0, 0, 0, 0, 0,
	1549, 1485, 0, 0, 1487, 1500, 0, 0, 1489, 1490,
	0, 1493, 1494, 1549, 0, 1549, 1498, 1481, 1482, 0,
	1545, 1545, 1545, 1545, 0, 0, 1545, 1545, 1545, 1545,
	1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 0, 0,
	0, 0, 723, 0, 729, 0, -2, 0, 747, 749,
	751, 752, 754, 755, 757, 758, 760, 761, 708, 0,
	0, 59, 0, 0, 0, 0, 271, 0, 276, 0,
	873, 0, 0, 1021, 1021, 1021, 910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1021, 1021, 1021, 1021,
	0, 1039, 0, 0, 0, 632, 631, 0, 717, 0,
	0, 776, 0, 0, 500, 0, 507, 554, 554, 513,
	514, 509, 508, 560, 561, 557, 0, 557, 557, 776,
	0, 532, 533, 534, 554, 554, 540, 724, 0, 541,
	542, 557, 0, 562, 563, 776, 0, 0, 776, 776,
	0, 550, 551, 552, 554, 0, 0, 1021, 0, 570,
	509, 509, 1691, 1692, 0, 0, 1030, 0, 0, 0,
	573, 0, 0, 0, 0, 633, 214, 217, 0, 220,
	0, 1856, 0, 1856, 0, 227, 0, 0, 0, 0,
	0, 0, 257, 258, 0, 0, 0, 0, 248, 251,
	1191, 1192, 983, 984, 252, 253, 297, 298, 0, 723,
	746, 748, 742, 743, 744, 0, 0, 0, 0, 0,
	0, 0, 0, 446, 0, 0, 0, 0, 0, 608,
	0, 889, 610, 0, 0, 0, 784, 778, 780, 847,
	93, 784, 8, 80, 77, 0, 19, 0, 0, 19,
	19, 0, 19, 262, 0, 1688, 1686, 1687, 1622, 1673,
	0, 1648, 0, 1649, 1650, 1651, 1661, 1662, 0, 0,
	1644, 0, 1645, 1646, 1647, 1638, 0, 1639, 1640, 0,
	1641, 1642, 260, 0, 1550, 877, 0, 650, 664, 645,
	0, 653, 0, 1198, 634, 664, 636, 0, 653, 723,
	700, 0, 678, 0, 0, 327, 0, 332, 0, 0,
	348, 350, 351, 352, 337, 338, 575, 313, 314, 306,
	307, 308, 309, 310, 311, 312, 316, 103, 0, 286,
	287, 0, 0, 0, 147, 148, 149, 150, 151, 152,
	154, 138, 597, 599, 975, 987, 0, 978, 0, 157,
	197, 130, 0, 0, 0, 1554, 1555, 1556, 1557, 1558,
	1563, 0, 1565, 1567, 1569, 1571, 0, 1589, -2, -2,
	1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321,
	1322, 1323, 1574, 1587, 1588, 0, 0, 0, 0, 0,
	0, 1585, 1585, 1580, 0, 1328, 0, 1360, 1364, 0,
	0, 0, 0, 0, 94, 1544, 1452, 1453, 1454, 1455,
	1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 1478, 1479, 1480, 0, 0, 1553, 0, 0,
	0, 1546, 1547, 0, 0, 0, 1440, 0, 0, 1446,
	1447, 1448, 0, 659, 0, 1510, 1486, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	802, 804, 0, 668, 670, 671, 697, 678, 704, 0,
	0, 0, 55, 60, 53, 1054, 280, 281, 0, 0,
	275, 0, -2, 0, 0, 0, 0, 0, 924, 0,
	444, 969, 0, 0, 0, 985, 1010, 1017, 0, 0,
	0, 0, 0, 1058, 911, 916, 917, 918, 912, 913,
	919, 920, 0, 719, 0, 0, 816, 499, 0, 555,
	556, 504, 1817, 509, 776, 776, 516, 510, 517, 559,
	518, 519, 520, 557, 776, 776, 725, 554, 557, 543,
	558, 557, 546, 547, 0, 553, 566, 571, 567, 0,
	569, 524, 525, 1060, 721, 364, 365, 366, 368, 0,
	416, 416, 416, 399, 416, 0, 0, 387, 1693, 0,
	0, 0, 0, 396, 1693, 0, 0, 1693, 1693, 1693,
	1693, 1693, 1693, 1693, 0, 0, 1693, 1693, 1693, 1693,
	1693, 1693, 1693, 1693, 1693, 1693, 1693, 0, 1693, 1693,
	1693, 1693, 1693, 1177, 1693, 0, 1031, 406, 407, 408,
	409, 414, 415, 0, 441, 0, 0, 0, 444, 0,
	958, 789, 0, 790, 791, 787, 818, 842, 842, 0,
	842, 822, 1197, 0, 0, 225, 226, 215, 0, 216,
	0, 228, 229, 0, 231, 232, 233, 240, 1759, 1832,
	235, 237, 0, 0, 241, 254, 255, 256, 0, 0,
	246, 247, 0, 0, 300, 301, 303, 0, 678, 1034,
	1035, 1036, 594, 1195, 595, 596, 600, 0, 0, 603,
	604, 605, 606, 607, 891, 0, 0, 963, 964, 776,
	0, 785, 0, 781, 848, 0, 850, 0, 776, 0,
	78, 19, 0, 71, 68, 0, 0, 0, 0, 0,
	1668, 1618, 1689, 0, 0, 0, 1670, 0, 0, 0,
	0, 61, 680, 641, 0, 644, 661, 0, 665, 0,
	0, 657, 649, 654, 0, 0, 674, 635, 0, 0,
	640, 678, 0, 701, 730, 731, 734, 1249, 0, 333,
	347, 0, 0, 0, 0, 141, 972, 0, 142, 146,
	136, 0, 0, 0, 977, 0, 974, 979, 0, 156,
	0, 0, 131, 132, 1045, 1054, 0, 0, 0, 1564,
	1566, 1568, 1570, 1572, 0, 1575, 1585, 1585, 1581, 0,
	1576, 0, 1578, 0, 1554, 0, 1365, 0, 0, 0,
	0, 0, 0, 0, 0, 1430, 1431, 0, 0, 1435,
	0, 1437, 1438, 1439, 1441, 0, 0, 0, 1445, 0,
	1484, 1502, 1488, 1491, 0, 1495, 0, 1497, 0, 728,
	728, 0, 0, 1404, 1404, 1404, 0, 0, 0, 0,
	1404, 0, 0, 0, 0, 0, 0, 0, 0, 1349,
	0, 1350, 1351, 0, 0, 0, 805, 698, 0, 0,
	0, 0, 1052, 0, 282, 270, 272, 0, 0, 0,
	879, 880, 882, 0, 885, 886, 887, 891, 721, 0,
	721, 931, 1693, 1022, 448, 0, 0, 971, 0, 947,
	0, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	1062, 0, 0, 0, 619, 623, 23, 722, 0, 777,
	502, 0, 503, 554, 511, 512, 776, 535, 536, 0,
	0, 776, 554, 554, 557, 0, 568, 1062, 0, 0,
	1030, 1128, 1096, 377, 0, 1206, 1207, 417, 0, 1213,
	1222, 1021, 1281, 0, 1222, 0, 0, 1224, 1225, 0,
	0, 0, 0, 400, 401, 0, 386, 0, 0, 0,
	0, 0, 0, 385, 0, 0, 427, 0, 0, 0,
	0, 1694, 1693, 1693, 0, 394, 395, 0, 398, 0,
	0, 0, 0, 0, 0, 0, 0, 1693, 1693, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1168, 0, 0, 0, 0, 0, 0, 0, 1183, 1184,
	931, 1693, 0, 0, 0, 448, 945, 954, 0, 0,
	0, 0, 0, 0, 809, 0, 0, 808, 0, 0,
	0, 0, 0, 721, 843, 0, 845, 846, 820, -2,
	0, 789, 825, 1549, 218, 219, 0, 0, 224, 242,
	244, 0, 0, 0, 243, 245, 249, 250, 299, 302,
	304, 740, 0, 0, 1086, 0, 892, 893, 895, 896,
	0, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1743, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 890, 611, 774, 779,
	786, 849, 851, 94, 782, 774, 0, 81, 19, 80,
	72, 73, 0, 19, 0, 0, 0, 0, 1678, 1677,
	1663, 0, 1664, 1675, 1680, 0, 1683, 0, 684, 0,
	0, 664, 666, 0, 0, 664, 0, 0, 673, 0,
	0, 664, 740, 680, 0, 737, 735, 736, 0, 0,
	576, 104, 353, 0, 0, 0, 0, 0, 598, 0,
	976, 138, 0, 0, 158, 0, 0, 0, 1054, 1049,
	1548, 1577, 1579, 0, 1586, 1582, 1329, 1337, 1361, 0,
	0, 1367, 1379, 1379, 0, 0, 0, 1370, 1676, 1676,
	1373, 1672, 1674, 1672, 1379, 1379, 0, 95, 0, 0,
	1436, 0, 0, 0, 660, 0, 0, 0, 1400, 1402,
	1404, 1404, 1411, 1405, 1412, 1413, 1404, 1404, 1404, 1404,
	1418, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1398,
	0, 0, 1607, 1608, 669, 0, 0, 711, 712, 713,
	714, 715, 0, 0, 54, 1054, 0, 274, 0, 0,
	884, 0, 0, 0, 1199, 0, 935, 932, 933, 934,
	0, 966, 449, 450, 451, 452, 0, 0, 0, 970,
	0, 958, 940, 0, 0, 0, 1011, 1012, 1013, 1014,
	1015, 1016, -2, 1025, 0, 0, 0, 1199, 1199, 1199,
	0, 1070, 0, 1059, 672, 0, -2, 0, 0, 621,
	0, 0, 817, 505, 776, 529, 726, 727, 544, 776,
	776, 554, 572, 1070, 1061, 0, 367, 416, 0, 1116,
	0, 0, 1122, 0, 1129, 370, 0, 418, 0, 1212,
	1238, 1223, 1238, 1282, 1238, 1238, 1021, 0, 418, 0,
	0, 388, 424, 0, 0, 0, 0, 0, 384, 421,
	734, 371, 373, 374, 375, 425, 426, 428, 0, 430,
	390, 402, 403, 404, 405, 0, 0, 0, 397, 410,
	411, 412, 413, 372, 1145, 1146, 1147, 1150, 1151, 1152,
	1153, 0, 0, 1156, 1157, 1158, 1159, 1160, 1235, 1236,
	1237, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1185, 1186,
	1187, 1188, 1189, 1190, 1169, 1170, 1171, 1172, 1173, 1174,
	1175, 1176, 0, 0, 1180, 0, 935, 0, 0, 0,
	0, 966, 947, 0, 957, 0, 959, 960, 0, 0,
	642, 776, 292, 0, 812, 806, 0, 795, 810, 811,
	798, 0, 800, 0, 796, 797, 776, 788, 819, 844,
	821, 824, 826, 827, 833, 0, 0, 0, 0, 221,
	222, 223, 230, 0, 468, 236, 696, 0, 1196, 601,
	602, 1087, 1088, 609, 0, 897, 772, 0, 0, 772,
	76, 79, 0, 74, 0, 0, 0, 0, 66, 64,
	1671, 0, 0, 686, 118, 0, 0, 0, 662, 0,
	667, 664, 648, 658, 647, 655, 656, 675, 664, 639,
	638, 699, 684, 732, 733, 0, 1250, 328, 0, 973,
	138, 143, 144, 145, 139, 137, 980, 0, 982, 0,
	1047, 0, 0, 1583, 1366, 1338, 1368, 1380, 1381, 1369,
	0, 1340, 1341, 1371, 1372, 1374, 1375, 1376, 1377, 1378,
	1342, 1432, 0, 1434, 1442, 1443, 0, 1492, 1496, 0,
	0, 0, 0, 0, 1409, 1410, 1414, 1415, 1416, 1417,
	1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 728, 1399,
	0, 0, 0, 0, 0, 0, 0, 709, 0, 0,
	0, 1053, 1055, 872, 875, 881, 883, 0, 0, 0,
	1200, 1201, 1203, 1204, 1205, 0, 908, 0, 0, 926,
	927, 937, 0, 0, 0, 454, 455, 0, 0, 0,
	467, 463, 464, 465, 445, 965, 954, 943, 0, 0,
	953, 0, 1026, 1693, 1693, 1693, 0, 0, 1130, 1693,
	1693, 0, 0, 0, 1134, 1073, 0, 0, 1064, 0,
	842, 0, 0, 776, 620, 623, 624, 720, 506, 548,
	545, 776, 1073, 363, 1094, 0, 0, 0, 0, 0,
	1126, 0, 0, 1098, 0, 389, 419, 0, -2, 0,
	1239, 0, 1226, 1239, 0, 0, 1238, 0, 378, 418,
	0, 0, 0, 431, 435, 436, 0, 433, 1277, 0,
	434, 0, 423, 0, 429, 1148, 1149, 0, 1154, 1155,
	0, 1179, 0, 0, 437, 0, 0, 0, 438, 443,
	940, 0, 955, 0, 961, 962, 728, 0, 0, 792,
	813, 0, 0, 793, 0, 794, 799, 801, 291, 828,
	0, 0, 830, 831, 832, 823, 238, 741, 894, 0,
	762, 0, 0, 783, 763, 0, 19, 0, 0, 69,
	1681, 1684, 688, 0, 685, 119, 0, 0, 0, 0,
	652, 663, 646, 637, 686, 738, 739, 140, 135, 981,
	121, 0, 1048, 0, 0, 1444, 0, 1404, 1401, 1404,
	1403, 1395, 0, 1352, 1354, 1355, 1356, 1358, 1359, 0,
	707, 0, 0, 914, 1134, 0, 914, 936, 925, 0,
	967, 968, 0, 456, 457, 0, 460, 466, 938, 939,
	0, 0, 951, 0, 0, 0, 0, 1018, 1032, 0,
	0, 0, -2, 0, -2, 1043, 0, 1079, 0, 1071,
	0, 1063, 0, 1066, 776, 776, -2, 617, 622, 0,
	549, 1079, 1096, 0, 1117, 0, 0, 0, 0, 0,
	0, 0, 1097, 0, 1110, 420, 1240, -2, 1253, 1255,
	0, 1031, 1258, 1259, 0, 0, 0, 0, 0, 0,
	1303, 1267, 0, 0, 1271, 1272, 1273, 0, 0, 1276,
	0, 1601, 1602, 0, 1280, 0, 0, 0, 0, 0,
	0, 0, 1220, 379, 380, 0, 382, 383, 1693, 1278,
	422, 376, 1693, 392, 1178, 1181, 1182, 442, 439, 440,
	943, 946, 643, 723, 293, 294, 814, 0, 807, 837,
	834, 0, 0, 898, 773, 775, 70, 75, 0, 0,
	690, 0, 687, 0, 681, 683, 129, 651, 688, 91,
	112, 0, 0, 1339, 1433, 1483, 1407, 1408, 0, 1396,
	0, 1390, 1391, 1392, 1397, 0, 0, 710, 705, 0,
	900, 907, 921, 1037, 1202, 906, 0, 0, 453, 458,
	0, 461, 462, 0, 941, 942, 0, 949, 0, 0,
	1006, 1672, 0, 1027, 1028, 1193, 1194, 1029, 1131, 1132,
	1133, 1089, -2, 1142, 0, 1041, 121, 1089, 0, 1067,
	0, 1074, 0, 1072, 1065, 728, 618, 1076, 369, 1128,
	1118, 0, 1120, 0, 0, 0, 0, 1099, -2, 0,
	1254, 1256, 1257, 1260, 1261, 1262, 1308, 1309, 1310, 0,
	0, 1265, 1305, 1306, 1307, 1266, 0, 0, 0, 0,
	0, 1599, 1600, 1301, 0, 0, 1227, 1229, 1230, 1231,
	1232, 1233, 1234, 1228, 0, 0, 0, 1219, 1221, 381,
	0, 0, 1693, 956, 290, 0, 0, 838, 840, 835,
	836, 65, 67, 82, 0, 689, 120, 0, 690, 83,
	0, 109, 0, 122, 123, 0, 0, 0, 0, 0,
	1406, 1393, 0, 0, 0, 0, 0, 1603, 1604, 1605,
	0, 1353, 1357, 0, 0, 922, 923, 928, 0, 930,
	459, 944, 948, 951, 0, 997, 0, 734, 0, 1091,
	0, 1030, 1144, 1693, 1044, 1091, 0, 1136, 1693, 1693,
	1057, 0, 1069, 0, 1081, 0, 1075, 723, 362, 0,
	1078, 1114, 1119, 1121, 1123, 0, 1127, 1125, 1100, -2,
	0, 1108, 0, 0, 1263, 1264, 0, 0, 1499, 1693,
	0, 1296, 0, 997, 997, 997, 997, 0, 432, 391,
	0, 815, 829, 0, 0, 0, 679, 92, 96, 0,
	118, 115, 0, 124, 0, 0, 0, 0, 1050, 0,
	1382, 0, 0, 0, 1386, 1387, 1388, 1389, 0, 899,
	0, 929, 950, 952, 996, 1007, 1008, 734, 1040, 0,
	1128, 1143, 0, 1042, 1135, 0, 0, 0, 1068, 1080,
	0, 1083, 616, 1077, 1095, 0, 1124, 1101, 1109, 0,
	1104, 0, 0, 0, 1304, 0, 1270, 0, 1275, 1284,
	1297, 0, 0, 1208, 0, 1210, 0, 1214, 0, 1216,
	0, 0, 393, 839, 841, 0, 692, 682, 85, 0,
	0, 113, 114, 116, 0, 125, 0, 127, 128, 1046,
	0, 0, 1383, 1384, 1385, 0, 901, 902, 915, 998,
	1693, 1693, 0, 0, 0, 1004, 1005, 1009, 0, 1116,
	1148, 1137, 1138, 1139, 1082, 1115, 1103, 0, -2, 1111,
	0, 0, 1551, 1561, 1562, 1268, 1274, 1283, 1285, 1286,
	0, 1298, 1299, 1300, 1302, 997, 997, 997, 997, 1218,
	691, 0, 1056, 0, 97, 0, 99, 101, 102, 1241,
	110, 111, 117, 126, 0, 1394, 903, 0, 0, 1001,
	1002, 0, 1092, 0, 1094, 1105, -2, 0, 1113, 0,
	1269, 1287, 0, 1288, 0, 0, 0, 1209, 1211, 1215,
	1217, 693, 86, 87, 0, 98, 0, 0, 0, 888,
	904, 0, 999, 1000, 1003, 0, 1096, 1112, 1552, 1289,
	1291, 1292, 0, 0, 1290, 0, 0, 100, 1242, 1051,
	905, 1093, 1090, 1293, 1295, 1294, 88, 89, 90, 0,
	1243,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 114, 3, 3, 3, 145, 137, 3,
	82, 83, 142, 140, 155, 141, 154, 143, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 624, 621,
	124, 123, 125, 3, 625, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 147, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 622, 136, 623, 148,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	115, 116, 117, 118, 119, 120, 121, 122, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 138, 139,
	144, 146, 149, 150, 151, 152, 153, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:796
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:803
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:809
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:817
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:823
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:827
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:842
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:846
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:852
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:857
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:861
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:893
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:901
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp: yyDollar[2].str,
				IsS3:      false,
				Dir:       yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:909
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp: yyDollar[2].str,
				IsS3:      true,
				Option:    yyDollar[5].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:919
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:939
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:945
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:952
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:960
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:966
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:975
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:985
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:993
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1001
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1009
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1019
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1027
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1037
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1044
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1053
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1063
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1067
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1073
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1077
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1083
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1092
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1102
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1106
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1112
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1121
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1125
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1131
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1152
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1165
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1172
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1176
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1182
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1186
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1192
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1199
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1207
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1211
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1225
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1229
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1233
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1238
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1242
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1246
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1252
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1261
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1272
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1276
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1282
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1286
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1292
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1296
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1302
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1326
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1345
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1349
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1353
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1358
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1362
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1369
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[3].str,
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1377
		{
			yyVAL.str = ""
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1384
		{
			yyVAL.str = yyDollar[3].str
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1389
		{
			yyVAL.str = "\n"
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1396
		{
			yyVAL.str = yyDollar[3].str
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1401
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1405
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1429
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1433
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1439
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1445
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1463
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1480
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1503
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1507
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1511
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1516
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1520
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1526
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1539
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1550
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1563
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1567
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1577
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1590
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1603
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1609
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1615
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1622
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1630
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1639
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1643
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1647
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1651
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1655
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1659
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1666
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1670
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1676
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1683
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1692
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1696
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1702
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1706
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1710
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1714
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1718
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1722
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1726
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1730
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1734
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1738
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1742
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1746
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1750
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1754
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1758
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1762
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1766
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1770
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1774
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1778
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1782
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1786
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1790
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1794
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1798
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1802
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1806
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1810
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1814
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1818
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1822
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1826
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1830
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1834
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1838
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1842
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1846
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1850
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1854
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1858
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1862
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1866
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1870
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1874
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1878
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1882
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1886
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1890
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1894
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1898
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1911
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1918
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1925
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1935
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1939
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:1945
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:1952
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1960
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1964
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1968
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1972
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:1978
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:1982
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1988
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1995
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2002
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2011
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2041
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2045
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2049
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2055
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2061
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2065
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2072
		{
			yyVAL.str = yyDollar[3].str
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2078
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2082
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2088
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2096
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2105
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2114
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2122
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2130
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2153
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2176
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2183
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2190
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2198
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2205
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2212
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2221
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2225
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2229
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2235
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2239
		{
			yyVAL.str = yyDollar[1].str
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2245
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2249
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2255
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2259
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2270
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2276
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2281
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2285
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2289
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2293
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2297
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2301
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2305
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2309
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2313
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2319
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2323
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2327
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2331
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2336
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2341
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2347
		{
			yyLOCAL = &tree.Use{
				SecondaryRole: false,
				Name:          yyDollar[2].cstrUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2354
		{
			yyLOCAL = &tree.Use{
				SecondaryRole: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2360
		{
			yyLOCAL = &tree.Use{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2367
		{
			yyLOCAL = &tree.Use{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2374
		{
			yyLOCAL = &tree.Use{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2384
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2391
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2402
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2413
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2417
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2423
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2433
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2439
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2443
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2449
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2455
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2459
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2463
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2467
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2473
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2485
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2491
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2495
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2501
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2505
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2511
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2517
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2528
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2534
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2538
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2542
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2546
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2550
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2554
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2562
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2570
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2580
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2621
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2625
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2631
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2637
		{
			yyVAL.str = yyDollar[1].str
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2642
		{
			yyVAL.str = "true"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2643
		{
			yyVAL.str = "false"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2644
		{
			yyVAL.str = yyDollar[1].str
		}
	case 353:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2649
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2666
		{
			yyLOCAL = &tree.AlterSequence{
				IfExists:    yyDollar[3].boolValUnion(),
				Name:        yyDollar[4].tableNameUnion(),
				Type:        yyDollar[5].alterTypeOptionUnion(),
				IncrementBy: yyDollar[6].incrementByOptionUnion(),
				MinValue:    yyDollar[7].minValueOptionUnion(),
				MaxValue:    yyDollar[8].maxValueOptionUnion(),
				StartWith:   yyDollar[9].startWithOptionUnion(),
				Cycle:       yyDollar[10].cycleOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2681
		{
			yyLOCAL = &tree.AlterView{
				Name:     yyDollar[4].tableNameUnion(),
				ColNames: yyDollar[5].identifierListUnion(),
				AsSource: yyDollar[7].selectUnion(),
				IfExists: yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2692
		{
			yyLOCAL = &tree.AlterTable{
				Table:   yyDollar[3].tableNameUnion(),
				Options: yyDollar[4].alterTableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2699
		{
			yyLOCAL = &tree.AlterTable{
				Table:            yyDollar[3].tableNameUnion(),
				PartitionOptions: yyDollar[4].alterPartitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2708
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2712
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2718
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2722
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			partitionDef := &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
			opt := &tree.AlterPartitionRedefinePartitionClause{
				PartitionOption: partitionDef,
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2737
		{
			opt := &tree.AlterPartitionAddPartitionClause{
				Typ:        tree.AlterPartitionAddPartition,
				Partitions: yyDollar[3].partitionsUnion(),
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2745
		{
			opt := &tree.AlterPartitionDropPartitionClause{
				Typ:            tree.AlterPartitionDropPartition,
				PartitionNames: yyDollar[3].PartitionNamesUnion(),
			}
			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2758
		{
			opt := &tree.AlterPartitionTruncatePartitionClause{
				Typ:            tree.AlterPartitionTruncatePartition,
				PartitionNames: yyDollar[3].PartitionNamesUnion(),
			}
			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2773
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2777
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2783
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2787
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2793
		{
			opt := &tree.AlterOptionAdd{
				Def: yyDollar[2].tableDefUnion(),
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2800
		{
			opt := &tree.AlterTableModifyColumnClause{
				Typ:       tree.AlterTableModifyColumn,
				NewColumn: yyDollar[3].columnTableDefUnion(),
				Position:  yyDollar[4].alterColPositionUnion(),
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2809
		{
			opt := &tree.AlterTableChangeColumnClause{
				Typ:           tree.AlterTableChangeColumn,
				OldColumnName: yyDollar[3].unresolvedNameUnion(),
				NewColumn:     yyDollar[4].columnTableDefUnion(),
				Position:      yyDollar[5].alterColPositionUnion(),
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2819
		{
			opt := &tree.AlterTableRenameColumnClause{
				Typ:           tree.AlterTableRenameColumn,
				OldColumnName: yyDollar[3].unresolvedNameUnion(),
				NewColumnName: yyDollar[5].unresolvedNameUnion(),
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2828
		{
			opt := &tree.AlterTableAlterColumnClause{
				Typ:         tree.AlterTableAlterColumn,
				ColumnName:  yyDollar[3].unresolvedNameUnion(),
				DefalutExpr: tree.NewAttributeDefault(yyDollar[6].exprUnion()),
				OptionType:  tree.AlterColumnOptionSetDefault,
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2838
		{
			opt := &tree.AlterTableAlterColumnClause{
				Typ:        tree.AlterTableAlterColumn,
				ColumnName: yyDollar[3].unresolvedNameUnion(),
				Visibility: yyDollar[5].indexVisibilityUnion(),
				OptionType: tree.AlterColumnOptionSetVisibility,
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2848
		{
			opt := &tree.AlterTableAlterColumnClause{
				Typ:        tree.AlterTableAlterColumn,
				ColumnName: yyDollar[3].unresolvedNameUnion(),
				OptionType: tree.AlterColumnOptionDropDefault,
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2857
		{
			opt := &tree.AlterTableOrderByColumnClause{
				Typ:              tree.AlterTableOrderByColumn,
				AlterOrderByList: yyDollar[3].alterColumnOrderByUnion(),
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2865
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2869
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2873
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2877
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2881
		{
			yyLOCAL = tree.AlterTableOption(
				&tree.AlterAddCol{
					Column:   yyDollar[3].columnTableDefUnion(),
					Position: yyDollar[4].alterColPositionUnion(),
				},
			)
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2890
		{
			yyLOCAL = &tree.AlterOptionAlterCheck{
				Type: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2896
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2900
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2904
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2908
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2912
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2916
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2920
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2924
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2929
		{
			yyVAL.str = ""
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2960
		{
			yyVAL.str = ""
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2964
		{
			yyVAL.str = string("COLUMN")
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:2969
		{
			yyLOCAL = &tree.ColumnPosition{
				Typ: tree.ColumnPositionNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:2975
		{
			yyLOCAL = &tree.ColumnPosition{
				Typ: tree.ColumnPositionFirst,
			}
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:2981
		{
			yyLOCAL = &tree.ColumnPosition{
				Typ:            tree.ColumnPositionAfter,
				RelativeColumn: yyDollar[2].unresolvedNameUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:2990
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:2994
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3000
		{
			yyLOCAL = &tree.AlterColumnOrder{Column: yyDollar[1].unresolvedNameUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3007
		{
			yyLOCAL = &tree.AlterTableName{
				Name: yyDollar[1].unresolvedObjectNameUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3015
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropIndex,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3022
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3029
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropColumn,
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3036
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropColumn,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3043
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3050
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ: tree.AlterTableDropPrimaryKey,
			}
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3058
		{
			yyLOCAL = &tree.AlterOptionAlterIndex{
				Visibility: yyDollar[3].indexVisibilityUnion(),
				Name:       tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3065
		{
			yyLOCAL = &tree.AlterOptionAlterReIndex{
				KeyType:       tree.INDEX_TYPE_IVFFLAT,
				AlgoParamList: int64(yyDollar[6].item.(int64)),
				Name:          tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3073
		{
			yyLOCAL = &tree.AlterOptionAlterCheck{
				Type:    yyDollar[1].str,
				Enforce: yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3080
		{
			yyLOCAL = &tree.AlterOptionAlterCheck{
				Type:    yyDollar[1].str,
				Enforce: yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3089
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3093
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3100
		{
			yyLOCAL = &tree.AlterAccount{
				IfExists:     yyDollar[3].boolValUnion(),
				Name:         yyDollar[4].str,
				AuthOption:   yyDollar[5].alterAccountAuthOptionUnion(),
				StatusOption: yyDollar[6].accountStatusUnion(),
				Comment:      yyDollar[7].accountCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3112
		{
			yyLOCAL = &tree.AlterDataBaseConfig{
				DbName:         yyDollar[3].str,
				UpdateConfig:   yyDollar[7].str,
				IsAccountLevel: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3120
		{
			yyLOCAL = &tree.AlterDataBaseConfig{
				AccountName:    yyDollar[4].str,
				UpdateConfig:   yyDollar[8].str,
				IsAccountLevel: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3128
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3141
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3147
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3158
		{
			// ifExists Users Role MiscOpt CommentOrAttribute
			yyLOCAL = tree.NewAlterUser(yyDollar[3].boolValUnion(), yyDollar[4].usersUnion(), yyDollar[5].accountRoleUnion(), yyDollar[6].userMiscOptionUnion(), yyDollar[7].accountCommentOrAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3164
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3168
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3173
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3177
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3182
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3186
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3202
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3206
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3210
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3214
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3218
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3222
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3226
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryDefault{}
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3230
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryCount{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3234
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalDefault{}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3238
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalCount{Value: yyDollar[4].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3242
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentNone{}
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3246
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentDefault{}
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3250
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentOptional{}
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3254
		{
			yyLOCAL = &tree.UserMiscOptionFailedLoginAttempts{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3258
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeCount{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3262
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeUnbounded{}
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3268
		{
			yyVAL.item = nil
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3273
		{
			yyVAL.item = nil
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3314
		{
			yyLOCAL = &tree.ShowCollation{}
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3320
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3328
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3332
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3336
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{tree.NewRole(yyDollar[5].cstrUnion().Compare())}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3345
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3349
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3355
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3360
		{
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3364
		{
		}
	case 511:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3369
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3379
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3389
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3397
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3403
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3409
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3415
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3421
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3427
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3433
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3442
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3446
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3450
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3454
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3458
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3462
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3466
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3470
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3476
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3485
		{
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3487
		{
		}
	case 535:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3496
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3506
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3515
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3519
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3523
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3529
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3535
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3541
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3547
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3556
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3566
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3578
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3582
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3588
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3600
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3614
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3620
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3627
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3631
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3636
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3640
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3644
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3649
		{
			yyVAL.str = ""
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3653
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3659
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3672
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3676
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3682
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3687
		{
			yyLOCAL = &tree.ShowCreateView{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3691
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3695
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3701
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3707
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3711
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3717
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3723
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3727
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3731
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3737
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3741
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3766
		{
			yyLOCAL = &tree.DropSequence{
				IfExists: yyDollar[3].boolValUnion(),
				Names:    yyDollar[4].tableNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3775
		{
			yyLOCAL = &tree.DropAccount{
				IfExists: yyDollar[3].boolValUnion(),
				Name:     yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3784
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3793
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3797
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3803
		{
			yyLOCAL = &tree.User{
				Username: yyDollar[1].usernameRecordUnion().Username,
				Hostname: yyDollar[1].usernameRecordUnion().Hostname,
			}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3812
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3821
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TableName: yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3831
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[4].boolValUnion(), Names: yyDollar[5].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3835
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3841
		{
			yyLOCAL = &tree.DropConnector{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3847
		{
			yyLOCAL = &tree.DropView{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3853
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare()), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3857
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare()), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3863
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3869
		{
			yyLOCAL = &tree.DropFunction{
				Name: yyDollar[3].functionNameUnion(),
				Args: yyDollar[5].funcArgsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3878
		{
			yyLOCAL = &tree.DropProcedure{
				Name:     yyDollar[3].procNameUnion(),
				IfExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3885
		{
			yyLOCAL = &tree.DropProcedure{
				Name:     yyDollar[5].procNameUnion(),
				IfExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3896
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3901
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3908
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3924
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3937
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:3948
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:3952
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3958
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3963
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3970
		{
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3972
		{
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3975
		{
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3984
		{
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3988
		{
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3993
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4002
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4009
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4015
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4023
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4030
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4037
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4057
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4067
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4071
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4077
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4084
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4090
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4098
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4105
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4112
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4131
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4135
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4139
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4144
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4148
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4152
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4158
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4167
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4171
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4177
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4181
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4187
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4191
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4197
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4202
		{
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4206
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4213
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4217
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4224
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4229
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4233
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4239
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4243
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4249
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4253
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4258
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4262
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4275
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4282
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4289
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4307
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4326
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4332
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4339
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4343
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4356
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4360
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4365
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4369
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4376
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4381
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4388
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4394
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4398
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4402
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4406
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4410
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4414
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4419
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4423
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4429
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4439
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4454
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4458
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4472
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4476
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4482
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4491
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4495
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4499
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4503
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4507
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4513
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4520
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4529
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4533
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4539
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4547
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4551
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4556
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4560
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4566
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4570
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4574
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4579
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4583
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4589
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4595
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4599
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:4605
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4610
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4614
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4618
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4623
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4627
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4631
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4636
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4640
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4648
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4652
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4656
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4670
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4674
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4684
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4694
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4704
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4716
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4724
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4732
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4741
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4749
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4757
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4765
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4773
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4781
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4789
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4797
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4805
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4815
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4826
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4840
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4844
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4848
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4853
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4857
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4861
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:4870
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:4874
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:4879
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:4883
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:4888
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:4892
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:4898
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:4902
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:4908
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:4912
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:4917
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:4921
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:4926
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:4934
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:4940
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:4948
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:4956
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4966
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:4972
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:4981
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:4990
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:4999
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5009
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5013
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5023
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5027
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5031
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5035
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 802:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5041
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5051
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5055
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5061
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5067
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5071
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5077
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5083
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5087
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5091
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 812:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5097
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5101
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5107
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5111
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5117
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5121
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5127
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5131
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5141
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5154
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5160
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5166
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:  tree.FuncName2ResolvableFunctionReference(name),
					Exprs: yyDollar[3].exprsUnion(),
					Type:  tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5179
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5190
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5197
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5201
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5207
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5217
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5221
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5225
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5230
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5234
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5238
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5242
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5247
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5251
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5255
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5259
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5263
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5268
		{
			yyVAL.str = ""
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5272
		{
			yyVAL.str = yyDollar[1].str
		}
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5276
		{
			yyVAL.str = yyDollar[2].str
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5282
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5288
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5292
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5296
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5300
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5304
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5310
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 872:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5349
		{
			yyLOCAL = &tree.CreateExtension{
				Language: yyDollar[3].str,
				Name:     tree.Identifier(yyDollar[5].str),
				Filename: tree.Identifier(yyDollar[7].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5359
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5365
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 875:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5371
		{
			yyLOCAL = &tree.CreateProcedure{
				Name: yyDollar[3].procNameUnion(),
				Args: yyDollar[5].procArgsUnion(),
				Body: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5381
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5386
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5392
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5399
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5403
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5409
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5415
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5420
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5424
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5428
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5432
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5439
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				return 1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				return 1
			}

			yyLOCAL = &tree.CreateFunction{
				Replace:    yyDollar[2].sourceOptionalUnion(),
				Name:       yyDollar[4].functionNameUnion(),
				Args:       yyDollar[6].funcArgsUnion(),
				ReturnType: yyDollar[9].funcReturnUnion(),
				Language:   yyDollar[11].str,
				Import:     yyDollar[12].boolValUnion(),
				Body:       yyDollar[13].str,
				Handler:    yyDollar[14].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5463
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5468
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5474
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5481
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5485
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5491
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5497
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5501
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5505
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5511
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5517
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5523
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5527
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5533
		{
			yyVAL.str = ""
		}
	case 905:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5540
		{
			yyVAL.str = yyDollar[2].str
		}
	case 906:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5546
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5555
		{
			yyLOCAL = &tree.CreateView{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5567
		{
			yyLOCAL = &tree.CreateAccount{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         yyDollar[4].str,
				AuthOption:   yyDollar[5].accountAuthOptionUnion(),
				StatusOption: yyDollar[6].accountStatusUnion(),
				Comment:      yyDollar[7].accountCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5579
		{
			yyVAL.str = yyDollar[1].str
		}
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5583
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5589
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5593
		{
			yyVAL.str = "DEFINER = "
		}
	case 913:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5597
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 914:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5602
		{
			yyVAL.str = ""
		}
	case 915:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:5606
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 921:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5620
		{
			yyVAL.str = ""
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5628
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 925:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:5634
		{
			yyLOCAL = tree.AccountAuthOption{
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5644
		{
			yyVAL.str = yyDollar[1].str
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5648
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 928:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5654
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5661
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5667
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5675
		{
			yyLOCAL = tree.AccountStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5681
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusOpen,
			}
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5688
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusSuspend,
			}
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5695
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusRestricted,
			}
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5703
		{
			yyLOCAL = tree.AccountComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5709
		{
			yyLOCAL = tree.AccountComment{
				Exist:   true,
				Comment: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5718
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Users:              yyDollar[4].usersUnion(),
				Role:               yyDollar[5].accountRoleUnion(),
				MiscOpt:            yyDollar[6].userMiscOptionUnion(),
				CommentOrAttribute: yyDollar[7].accountCommentOrAttributeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5730
		{
			yyLOCAL = &tree.CreatePublication{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Database:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				AccountsSet: yyDollar[7].accountsSetOptionUnion(),
				Comment:     yyDollar[8].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5742
		{
			yyLOCAL = &tree.CreateStage{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Url:         yyDollar[5].str,
				Credentials: yyDollar[6].stageCredentialsUnion(),
				Status:      yyDollar[7].stageStatusUnion(),
				Comment:     yyDollar[8].stageCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5754
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5760
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5767
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5775
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5781
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5789
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5795
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:5803
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:5809
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5818
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5822
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5827
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5831
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5838
		{
			yyVAL.str = yyDollar[3].str
		}
	case 954:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5843
		{
			yyVAL.str = ""
		}
	case 955:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5847
		{
			yyVAL.str = yyDollar[2].str
		}
	case 956:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5853
		{
			yyLOCAL = &tree.AlterStage{
				IfNotExists:       yyDollar[3].boolValUnion(),
				Name:              tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				UrlOption:         yyDollar[6].stageUrlUnion(),
				CredentialsOption: yyDollar[7].stageCredentialsUnion(),
				StatusOption:      yyDollar[8].stageStatusUnion(),
				Comment:           yyDollar[9].stageCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5867
		{
			yyLOCAL = &tree.AlterPublication{
				IfExists:    yyDollar[3].boolValUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				AccountsSet: yyDollar[5].accountsSetOptionUnion(),
				Comment:     yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:5877
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:5881
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:5887
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:5893
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:5899
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5908
		{
			yyLOCAL = &tree.DropPublication{
				IfExists: yyDollar[3].boolValUnion(),
				Name:     tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5917
		{
			yyLOCAL = &tree.DropStage{
				IfNotExists: yyDollar[3].boolValUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5926
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 966:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:5931
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:5937
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: true,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:5945
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: false,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6051
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6055
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6061
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6071
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6075
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6081
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6091
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6095
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6099
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6104
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6108
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6114
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6121
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6127
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6136
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 985:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6143
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6152
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6156
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6162
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6176
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6180
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6184
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6189
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6193
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6197
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6201
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6207
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = &tree.IndexOption{IType: tree.INDEX_TYPE_INVALID}
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Table:       yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6228
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6232
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6258
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6262
		{
			yyLOCAL = &tree.IndexOption{AlgoParamList: int64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6266
		{
			yyLOCAL = &tree.IndexOption{AlgoParamVectorOpType: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6270
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6274
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6278
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6282
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6288
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6292
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6298
		{
			// Order is parsed but just ignored as MySQL dtree.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6303
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6308
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6312
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6316
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6320
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6324
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6328
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6334
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Name:               tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SubscriptionOption: yyDollar[5].subscriptionOptionUnion(),
				CreateOptions:      yyDollar[6].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6345
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6349
		{
			yyLOCAL = &tree.SubscriptionOption{From: tree.Identifier(yyDollar[2].str), Publication: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6359
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6363
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6368
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6372
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6378
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6382
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6388
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6392
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6396
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6401
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6405
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6411
		{
			yyLOCAL = &tree.CreateConnector{
				TableName: yyDollar[4].tableNameUnion(),
				Options:   yyDollar[7].connectorOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6420
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6426
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6444
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6462
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6480
		{
			yyLOCAL = &tree.CreateSource{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				SourceName:  yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Options:     yyDollar[9].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6491
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6495
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6501
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6513
		{
			yyLOCAL = &tree.CreateTable{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Param:       yyDollar[9].loadParamUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6522
		{
			yyLOCAL = &tree.CreateTable{
				IsClusterTable:  true,
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6534
		{
			yyLOCAL = &tree.CreateTable{
				IsDynamicTable: true,
				IfNotExists:    yyDollar[4].ifNotExistsUnion(),
				Table:          *yyDollar[5].tableNameUnion(),
				AsSource:       yyDollar[7].selectUnion(),
				DTOptions:      yyDollar[8].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6545
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6552
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6562
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6575
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6583
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6592
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6601
		{
			yyVAL.str = ""
		}
	case 1051:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6605
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6611
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6615
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6620
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6624
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:6631
		{
			yyLOCAL = &tree.TailParameter{
				Fields:       yyDollar[1].fieldsUnion(),
				Lines:        yyDollar[2].linesUnion(),
				IgnoredLines: uint64(yyDollar[3].int64ValUnion()),
				ColumnList:   yyDollar[4].loadColumnsUnion(),
				Assignments:  yyDollar[5].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6642
		{
			yyLOCAL = &tree.CreateSequence{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        yyDollar[4].tableNameUnion(),
				Type:        yyDollar[5].columnTypeUnion(),
				IncrementBy: yyDollar[6].incrementByOptionUnion(),
				MinValue:    yyDollar[7].minValueOptionUnion(),
				MaxValue:    yyDollar[8].maxValueOptionUnion(),
				StartWith:   yyDollar[9].startWithOptionUnion(),
				Cycle:       yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6655
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6669
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6673
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6677
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6683
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6687
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6694
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6701
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6708
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6715
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6719
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6723
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6727
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6731
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6738
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6745
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6749
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6756
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6763
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6767
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6773
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6779
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6783
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6790
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6797
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6804
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6811
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6815
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6820
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6824
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6828
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:6833
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:6837
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:6847
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:6851
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()},
			}

		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:6858
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: yyDollar[4].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:6865
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:6869
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:6878
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:6882
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:6888
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:6892
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:6898
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:6907
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:6917
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:6921
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:6927
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:6931
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:6937
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:6944
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:6953
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:6957
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:6962
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:6966
		{
			expr := tree.NewMaxValue()
			yyLOCAL = &tree.ValuesLessThan{ValueList: tree.Exprs{expr}}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:6971
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:6975
		{
			yyLOCAL = &tree.ValuesIn{ValueList: yyDollar[4].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:6980
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:6984
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:6994
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:6998
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7009
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7017
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7025
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7033
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7044
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:    yyDollar[1].boolValUnion(),
					Algorithm: yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7053
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7063
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7073
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7077
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7082
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7086
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7092
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7096
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7102
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7106
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7111
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7115
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7121
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7125
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7131
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7135
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7140
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7144
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7150
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7154
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7158
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7164
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7168
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7172
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7176
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7180
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7184
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7188
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7193
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7197
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7201
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7205
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7209
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7213
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7217
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7221
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7225
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7229
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7233
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7237
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7241
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7245
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7249
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7253
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7257
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7261
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7265
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7269
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7273
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7277
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7281
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7285
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7289
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7293
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7297
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7301
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7307
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7311
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:7317
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7323
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7327
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7333
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7337
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7341
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7345
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7349
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7353
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7367
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7371
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7380
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7385
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7391
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7398
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7402
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7408
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7412
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7416
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7422
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7426
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7432
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7441
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7450
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7481
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7514
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7528
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7534
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7543
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7552
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7561
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7570
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7580
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7588
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7594
		{
			yyVAL.str = ""
		}
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7598
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7608
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7614
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7620
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7640
		{
			yyVAL.str = ""
		}
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7644
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:7650
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7656
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7660
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7664
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7670
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7674
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7678
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7682
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7688
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7692
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7696
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7701
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7705
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7711
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7715
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7721
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7725
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7729
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7733
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7737
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7741
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7746
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7750
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7754
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7758
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7762
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7766
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7770
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7774
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7778
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7782
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7795
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7799
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7803
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7807
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7811
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7815
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7821
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7825
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7830
		{
			yyVAL.str = ""
		}
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7834
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7840
		{
			yyVAL.str = ""
		}
	case 1282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7844
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1283:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:7850
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:7862
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:7869
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:7876
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:7883
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:7890
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7899
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7905
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7911
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7915
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7919
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7923
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7927
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:7932
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:7939
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:7943
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:7947
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7952
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7956
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7961
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7965
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:7981
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:7987
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:7991
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:7995
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:7999
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8003
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8007
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8011
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8015
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8019
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8023
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8027
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8031
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8035
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8041
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8045
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8049
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8053
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8057
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8061
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8065
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8069
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8073
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8077
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8081
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8085
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8090
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8098
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8102
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8106
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8110
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8114
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8123
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8127
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8131
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8135
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8139
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8143
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8149
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8157
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8165
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8175
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, true)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8185
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, false)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8195
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8204
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8214
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), true)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8224
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), false)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8234
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8243
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8253
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8257
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8262
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8266
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8272
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8276
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:8282
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8291
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1368:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8303
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8320
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8337
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8350
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8363
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8375
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8389
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8404
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8419
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8436
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8451
		{
		}
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8458
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8462
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8466
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8472
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8476
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8480
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8484
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8490
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8494
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8498
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8504
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8512
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8522
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8526
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8533
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8538
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8542
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8547
		{
			yyVAL.str = ","
		}
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8551
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8556
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8560
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1404:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8565
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8572
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8598
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8609
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8620
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8630
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8640
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8650
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8659
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8668
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8678
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8688
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8698
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8708
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8718
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8728
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8738
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8748
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8758
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8768
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8778
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8788
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8807
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8815
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8823
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8831
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8839
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8849
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8857
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8866
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8874
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8882
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8890
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8898
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8909
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8919
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8931
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8942
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8964
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9000
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9012
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9024
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9035
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9043
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9050
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9057
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9069
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9077
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9087
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9097
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9105
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9116
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9125
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9134
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9142
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9152
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9160
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9170
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9174
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9180
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9184
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9203
		{
		}
	case 1510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9205
		{
		}
	case 1544:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9246
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9257
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9261
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9265
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:9271
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9276
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9280
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9286
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9290
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9296
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9300
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9307
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9311
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9315
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9323
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9327
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9331
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9336
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9340
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9346
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9350
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9354
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9358
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9362
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9366
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9370
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9374
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9378
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9382
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9390
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9394
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9398
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9402
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9406
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9410
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9414
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9418
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9422
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9426
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9432
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9436
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9442
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9446
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9453
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9457
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9461
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9467
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9471
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9475
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9479
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9483
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9487
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9491
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9497
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9501
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9505
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9509
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9515
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9528
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9533
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9539
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9543
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9556
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9561
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9565
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9569
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9573
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9577
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9584
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9588
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9592
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9596
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9603
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9614
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9619
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9625
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9637
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9649
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9661
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9674
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9687
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9700
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9713
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9726
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9739
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9752
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9765
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9778
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9791
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9806
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9833
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9875
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9911
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9947
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9964
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9976
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9996
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10016
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10036
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10052
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10065
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10078
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10091
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10104
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10116
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10128
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10140
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10152
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10164
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10176
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10188
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10200
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10212
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10225
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10238
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10251
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10264
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10279
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10287
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10296
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10306
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10329
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10334
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10340
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10347
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10351
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10356
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10360
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10366
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10372
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10379
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10386
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10395
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10402
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10409
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10418
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10422
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10426
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10432
		{
		}
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10434
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10444
		{
			yyVAL.str = ""
		}
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10448
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
