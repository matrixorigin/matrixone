// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const INTEGRAL = 57437
const HEX = 57438
const FLOAT = 57439
const HEXNUM = 57440
const BIT_LITERAL = 57441
const NULL = 57442
const TRUE = 57443
const FALSE = 57444
const LOWER_THAN_CHARSET = 57445
const CHARSET = 57446
const UNIQUE = 57447
const KEY = 57448
const OR = 57449
const PIPE_CONCAT = 57450
const XOR = 57451
const AND = 57452
const NOT = 57453
const BETWEEN = 57454
const CASE = 57455
const WHEN = 57456
const THEN = 57457
const ELSE = 57458
const END = 57459
const ELSEIF = 57460
const LOWER_THAN_EQ = 57461
const LE = 57462
const GE = 57463
const NE = 57464
const NULL_SAFE_EQUAL = 57465
const IS = 57466
const LIKE = 57467
const REGEXP = 57468
const IN = 57469
const ASSIGNMENT = 57470
const ILIKE = 57471
const SHIFT_LEFT = 57472
const SHIFT_RIGHT = 57473
const DIV = 57474
const MOD = 57475
const UNARY = 57476
const COLLATE = 57477
const BINARY = 57478
const UNDERSCORE_BINARY = 57479
const INTERVAL = 57480
const OUT = 57481
const INOUT = 57482
const BEGIN = 57483
const START = 57484
const TRANSACTION = 57485
const COMMIT = 57486
const ROLLBACK = 57487
const WORK = 57488
const CONSISTENT = 57489
const SNAPSHOT = 57490
const CHAIN = 57491
const NO = 57492
const RELEASE = 57493
const PRIORITY = 57494
const QUICK = 57495
const BIT = 57496
const TINYINT = 57497
const SMALLINT = 57498
const MEDIUMINT = 57499
const INT = 57500
const INTEGER = 57501
const BIGINT = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const FLOAT_TYPE = 57506
const DECIMAL = 57507
const NUMERIC = 57508
const DECIMAL_VALUE = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const BOOL = 57516
const CHARACTER = 57517
const VARBINARY = 57518
const NCHAR = 57519
const TEXT = 57520
const TINYTEXT = 57521
const MEDIUMTEXT = 57522
const LONGTEXT = 57523
const BLOB = 57524
const TINYBLOB = 57525
const MEDIUMBLOB = 57526
const LONGBLOB = 57527
const JSON = 57528
const ENUM = 57529
const UUID = 57530
const VECF32 = 57531
const VECF64 = 57532
const GEOMETRY = 57533
const POINT = 57534
const LINESTRING = 57535
const POLYGON = 57536
const GEOMETRYCOLLECTION = 57537
const MULTIPOINT = 57538
const MULTILINESTRING = 57539
const MULTIPOLYGON = 57540
const INT1 = 57541
const INT2 = 57542
const INT3 = 57543
const INT4 = 57544
const INT8 = 57545
const S3OPTION = 57546
const STAGEOPTION = 57547
const SQL_SMALL_RESULT = 57548
const SQL_BIG_RESULT = 57549
const SQL_BUFFER_RESULT = 57550
const LOW_PRIORITY = 57551
const HIGH_PRIORITY = 57552
const DELAYED = 57553
const CREATE = 57554
const ALTER = 57555
const DROP = 57556
const RENAME = 57557
const ANALYZE = 57558
const ADD = 57559
const RETURNS = 57560
const SCHEMA = 57561
const TABLE = 57562
const SEQUENCE = 57563
const INDEX = 57564
const VIEW = 57565
const TO = 57566
const IGNORE = 57567
const IF = 57568
const PRIMARY = 57569
const COLUMN = 57570
const CONSTRAINT = 57571
const SPATIAL = 57572
const FULLTEXT = 57573
const FOREIGN = 57574
const KEY_BLOCK_SIZE = 57575
const SHOW = 57576
const DESCRIBE = 57577
const EXPLAIN = 57578
const DATE = 57579
const ESCAPE = 57580
const REPAIR = 57581
const OPTIMIZE = 57582
const TRUNCATE = 57583
const MAXVALUE = 57584
const PARTITION = 57585
const REORGANIZE = 57586
const LESS = 57587
const THAN = 57588
const PROCEDURE = 57589
const TRIGGER = 57590
const STATUS = 57591
const VARIABLES = 57592
const ROLE = 57593
const PROXY = 57594
const AVG_ROW_LENGTH = 57595
const STORAGE = 57596
const DISK = 57597
const MEMORY = 57598
const CHECKSUM = 57599
const COMPRESSION = 57600
const DATA = 57601
const DIRECTORY = 57602
const DELAY_KEY_WRITE = 57603
const ENCRYPTION = 57604
const ENGINE = 57605
const MAX_ROWS = 57606
const MIN_ROWS = 57607
const PACK_KEYS = 57608
const ROW_FORMAT = 57609
const STATS_AUTO_RECALC = 57610
const STATS_PERSISTENT = 57611
const STATS_SAMPLE_PAGES = 57612
const DYNAMIC = 57613
const COMPRESSED = 57614
const REDUNDANT = 57615
const COMPACT = 57616
const FIXED = 57617
const COLUMN_FORMAT = 57618
const AUTO_RANDOM = 57619
const ENGINE_ATTRIBUTE = 57620
const SECONDARY_ENGINE_ATTRIBUTE = 57621
const INSERT_METHOD = 57622
const RESTRICT = 57623
const CASCADE = 57624
const ACTION = 57625
const PARTIAL = 57626
const SIMPLE = 57627
const CHECK = 57628
const ENFORCED = 57629
const RANGE = 57630
const LIST = 57631
const ALGORITHM = 57632
const LINEAR = 57633
const PARTITIONS = 57634
const SUBPARTITION = 57635
const SUBPARTITIONS = 57636
const CLUSTER = 57637
const TYPE = 57638
const ANY = 57639
const SOME = 57640
const EXTERNAL = 57641
const LOCALFILE = 57642
const URL = 57643
const PREPARE = 57644
const DEALLOCATE = 57645
const RESET = 57646
const EXTENSION = 57647
const INCREMENT = 57648
const CYCLE = 57649
const MINVALUE = 57650
const PUBLICATION = 57651
const SUBSCRIPTIONS = 57652
const PUBLICATIONS = 57653
const PROPERTIES = 57654
const PARSER = 57655
const VISIBLE = 57656
const INVISIBLE = 57657
const BTREE = 57658
const HASH = 57659
const RTREE = 57660
const BSI = 57661
const IVFFLAT = 57662
const MASTER = 57663
const ZONEMAP = 57664
const LEADING = 57665
const BOTH = 57666
const TRAILING = 57667
const UNKNOWN = 57668
const LISTS = 57669
const OP_TYPE = 57670
const REINDEX = 57671
const EXPIRE = 57672
const ACCOUNT = 57673
const ACCOUNTS = 57674
const UNLOCK = 57675
const DAY = 57676
const NEVER = 57677
const PUMP = 57678
const MYSQL_COMPATIBILITY_MODE = 57679
const MODIFY = 57680
const CHANGE = 57681
const SECOND = 57682
const ASCII = 57683
const COALESCE = 57684
const COLLATION = 57685
const HOUR = 57686
const MICROSECOND = 57687
const MINUTE = 57688
const MONTH = 57689
const QUARTER = 57690
const REPEAT = 57691
const REVERSE = 57692
const ROW_COUNT = 57693
const WEEK = 57694
const REVOKE = 57695
const FUNCTION = 57696
const PRIVILEGES = 57697
const TABLESPACE = 57698
const EXECUTE = 57699
const SUPER = 57700
const GRANT = 57701
const OPTION = 57702
const REFERENCES = 57703
const REPLICATION = 57704
const SLAVE = 57705
const CLIENT = 57706
const USAGE = 57707
const RELOAD = 57708
const FILE = 57709
const TEMPORARY = 57710
const ROUTINE = 57711
const EVENT = 57712
const SHUTDOWN = 57713
const NULLX = 57714
const AUTO_INCREMENT = 57715
const APPROXNUM = 57716
const SIGNED = 57717
const UNSIGNED = 57718
const ZEROFILL = 57719
const ENGINES = 57720
const LOW_CARDINALITY = 57721
const AUTOEXTEND_SIZE = 57722
const ADMIN_NAME = 57723
const RANDOM = 57724
const SUSPEND = 57725
const ATTRIBUTE = 57726
const HISTORY = 57727
const REUSE = 57728
const CURRENT = 57729
const OPTIONAL = 57730
const FAILED_LOGIN_ATTEMPTS = 57731
const PASSWORD_LOCK_TIME = 57732
const UNBOUNDED = 57733
const SECONDARY = 57734
const RESTRICTED = 57735
const USER = 57736
const IDENTIFIED = 57737
const CIPHER = 57738
const ISSUER = 57739
const X509 = 57740
const SUBJECT = 57741
const SAN = 57742
const REQUIRE = 57743
const SSL = 57744
const NONE = 57745
const PASSWORD = 57746
const SHARED = 57747
const EXCLUSIVE = 57748
const MAX_QUERIES_PER_HOUR = 57749
const MAX_UPDATES_PER_HOUR = 57750
const MAX_CONNECTIONS_PER_HOUR = 57751
const MAX_USER_CONNECTIONS = 57752
const FORMAT = 57753
const VERBOSE = 57754
const CONNECTION = 57755
const TRIGGERS = 57756
const PROFILES = 57757
const LOAD = 57758
const INLINE = 57759
const INFILE = 57760
const TERMINATED = 57761
const OPTIONALLY = 57762
const ENCLOSED = 57763
const ESCAPED = 57764
const STARTING = 57765
const LINES = 57766
const ROWS = 57767
const IMPORT = 57768
const DISCARD = 57769
const JSONTYPE = 57770
const MODUMP = 57771
const OVER = 57772
const PRECEDING = 57773
const FOLLOWING = 57774
const GROUPS = 57775
const DATABASES = 57776
const TABLES = 57777
const SEQUENCES = 57778
const EXTENDED = 57779
const FULL = 57780
const PROCESSLIST = 57781
const FIELDS = 57782
const COLUMNS = 57783
const OPEN = 57784
const ERRORS = 57785
const WARNINGS = 57786
const INDEXES = 57787
const SCHEMAS = 57788
const NODE = 57789
const LOCKS = 57790
const ROLES = 57791
const TABLE_NUMBER = 57792
const COLUMN_NUMBER = 57793
const TABLE_VALUES = 57794
const TABLE_SIZE = 57795
const NAMES = 57796
const GLOBAL = 57797
const PERSIST = 57798
const SESSION = 57799
const ISOLATION = 57800
const LEVEL = 57801
const READ = 57802
const WRITE = 57803
const ONLY = 57804
const REPEATABLE = 57805
const COMMITTED = 57806
const UNCOMMITTED = 57807
const SERIALIZABLE = 57808
const LOCAL = 57809
const EVENTS = 57810
const PLUGINS = 57811
const CURRENT_TIMESTAMP = 57812
const DATABASE = 57813
const CURRENT_TIME = 57814
const LOCALTIME = 57815
const LOCALTIMESTAMP = 57816
const UTC_DATE = 57817
const UTC_TIME = 57818
const UTC_TIMESTAMP = 57819
const REPLACE = 57820
const CONVERT = 57821
const SEPARATOR = 57822
const TIMESTAMPDIFF = 57823
const CURRENT_DATE = 57824
const CURRENT_USER = 57825
const CURRENT_ROLE = 57826
const SECOND_MICROSECOND = 57827
const MINUTE_MICROSECOND = 57828
const MINUTE_SECOND = 57829
const HOUR_MICROSECOND = 57830
const HOUR_SECOND = 57831
const HOUR_MINUTE = 57832
const DAY_MICROSECOND = 57833
const DAY_SECOND = 57834
const DAY_MINUTE = 57835
const DAY_HOUR = 57836
const YEAR_MONTH = 57837
const SQL_TSI_HOUR = 57838
const SQL_TSI_DAY = 57839
const SQL_TSI_WEEK = 57840
const SQL_TSI_MONTH = 57841
const SQL_TSI_QUARTER = 57842
const SQL_TSI_YEAR = 57843
const SQL_TSI_SECOND = 57844
const SQL_TSI_MINUTE = 57845
const RECURSIVE = 57846
const CONFIG = 57847
const DRAINER = 57848
const SOURCE = 57849
const STREAM = 57850
const HEADERS = 57851
const CONNECTOR = 57852
const CONNECTORS = 57853
const DAEMON = 57854
const PAUSE = 57855
const CANCEL = 57856
const TASK = 57857
const RESUME = 57858
const MATCH = 57859
const AGAINST = 57860
const BOOLEAN = 57861
const LANGUAGE = 57862
const WITH = 57863
const QUERY = 57864
const EXPANSION = 57865
const WITHOUT = 57866
const VALIDATION = 57867
const ADDDATE = 57868
const BIT_AND = 57869
const BIT_OR = 57870
const BIT_XOR = 57871
const CAST = 57872
const COUNT = 57873
const APPROX_COUNT = 57874
const APPROX_COUNT_DISTINCT = 57875
const SERIAL_EXTRACT = 57876
const APPROX_PERCENTILE = 57877
const CURDATE = 57878
const CURTIME = 57879
const DATE_ADD = 57880
const DATE_SUB = 57881
const EXTRACT = 57882
const GROUP_CONCAT = 57883
const MAX = 57884
const MID = 57885
const MIN = 57886
const NOW = 57887
const POSITION = 57888
const SESSION_USER = 57889
const STD = 57890
const STDDEV = 57891
const MEDIAN = 57892
const CLUSTER_CENTERS = 57893
const KMEANS = 57894
const STDDEV_POP = 57895
const STDDEV_SAMP = 57896
const SUBDATE = 57897
const SUBSTR = 57898
const SUBSTRING = 57899
const SUM = 57900
const SYSDATE = 57901
const SYSTEM_USER = 57902
const TRANSLATE = 57903
const TRIM = 57904
const VARIANCE = 57905
const VAR_POP = 57906
const VAR_SAMP = 57907
const AVG = 57908
const RANK = 57909
const ROW_NUMBER = 57910
const DENSE_RANK = 57911
const BIT_CAST = 57912
const NEXTVAL = 57913
const SETVAL = 57914
const CURRVAL = 57915
const LASTVAL = 57916
const ARROW = 57917
const ROW = 57918
const OUTFILE = 57919
const HEADER = 57920
const MAX_FILE_SIZE = 57921
const FORCE_QUOTE = 57922
const PARALLEL = 57923
const UNUSED = 57924
const BINDINGS = 57925
const DO = 57926
const DECLARE = 57927
const LOOP = 57928
const WHILE = 57929
const LEAVE = 57930
const ITERATE = 57931
const UNTIL = 57932
const CALL = 57933
const PREV = 57934
const SLIDING = 57935
const FILL = 57936
const SPBEGIN = 57937
const BACKEND = 57938
const SERVERS = 57939
const HANDLER = 57940
const PERCENT = 57941
const SAMPLE = 57942
const KILL = 57943
const BACKUP = 57944
const FILESYSTEM = 57945
const PARALLELISM = 57946
const QUERY_RESULT = 57947

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:11300

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 117,
	11, 707,
	22, 707,
	-2, 700,
	-1, 137,
	237, 1096,
	239, 997,
	-2, 1044,
	-1, 161,
	43, 535,
	239, 535,
	266, 542,
	267, 542,
	462, 535,
	-2, 569,
	-1, 202,
	626, 1842,
	-2, 451,
	-1, 498,
	626, 1959,
	-2, 345,
	-1, 556,
	626, 2018,
	-2, 343,
	-1, 557,
	626, 2019,
	-2, 344,
	-1, 558,
	626, 2020,
	-2, 346,
	-1, 684,
	318, 133,
	434, 133,
	435, 133,
	-2, 1747,
	-1, 749,
	82, 1534,
	-2, 1897,
	-1, 750,
	82, 1552,
	-2, 1868,
	-1, 754,
	82, 1553,
	-2, 1896,
	-1, 782,
	82, 1464,
	-2, 2090,
	-1, 783,
	82, 1465,
	-2, 2089,
	-1, 784,
	82, 1466,
	-2, 2079,
	-1, 785,
	82, 2051,
	-2, 2072,
	-1, 786,
	82, 2052,
	-2, 2073,
	-1, 787,
	82, 2053,
	-2, 2081,
	-1, 788,
	82, 2054,
	-2, 2061,
	-1, 789,
	82, 2055,
	-2, 2070,
	-1, 790,
	82, 2056,
	-2, 2082,
	-1, 791,
	82, 2057,
	-2, 2083,
	-1, 792,
	82, 2058,
	-2, 2088,
	-1, 793,
	82, 2059,
	-2, 2093,
	-1, 794,
	82, 2060,
	-2, 2094,
	-1, 795,
	82, 1530,
	-2, 1933,
	-1, 796,
	82, 1531,
	-2, 1731,
	-1, 797,
	82, 1532,
	-2, 1942,
	-1, 798,
	82, 1533,
	-2, 1740,
	-1, 800,
	82, 1536,
	-2, 1748,
	-1, 801,
	82, 1537,
	-2, 1966,
	-1, 803,
	82, 1540,
	-2, 1767,
	-1, 805,
	82, 1542,
	-2, 1978,
	-1, 806,
	82, 1543,
	-2, 1977,
	-1, 807,
	82, 1544,
	-2, 1811,
	-1, 808,
	82, 1545,
	-2, 1892,
	-1, 811,
	82, 1548,
	-2, 1989,
	-1, 813,
	82, 1550,
	-2, 1992,
	-1, 814,
	82, 1551,
	-2, 1994,
	-1, 815,
	82, 1554,
	-2, 2002,
	-1, 816,
	82, 1555,
	-2, 1877,
	-1, 817,
	82, 1556,
	-2, 1922,
	-1, 818,
	82, 1557,
	-2, 1887,
	-1, 819,
	82, 1558,
	-2, 1912,
	-1, 830,
	82, 1442,
	-2, 2084,
	-1, 831,
	82, 1443,
	-2, 2085,
	-1, 832,
	82, 1444,
	-2, 2086,
	-1, 917,
	457, 569,
	458, 569,
	-2, 536,
	-1, 963,
	123, 1731,
	134, 1731,
	154, 1731,
	-2, 1705,
	-1, 1073,
	22, 734,
	-2, 683,
	-1, 1177,
	11, 707,
	22, 707,
	-2, 1326,
	-1, 1253,
	22, 734,
	-2, 683,
	-1, 1569,
	82, 1605,
	-2, 1894,
	-1, 1570,
	82, 1606,
	-2, 1895,
	-1, 1713,
	83, 883,
	-2, 889,
	-1, 2128,
	106, 1036,
	150, 1036,
	189, 1036,
	192, 1036,
	279, 1036,
	-2, 1029,
	-1, 2275,
	11, 707,
	22, 707,
	-2, 827,
	-1, 2307,
	83, 1691,
	155, 1691,
	-2, 1879,
	-1, 2308,
	83, 1691,
	155, 1691,
	-2, 1878,
	-1, 2309,
	83, 1667,
	155, 1667,
	-2, 1865,
	-1, 2310,
	83, 1668,
	155, 1668,
	-2, 1870,
	-1, 2311,
	83, 1669,
	155, 1669,
	-2, 1799,
	-1, 2312,
	83, 1670,
	155, 1670,
	-2, 1793,
	-1, 2313,
	83, 1671,
	155, 1671,
	-2, 1721,
	-1, 2314,
	83, 1672,
	155, 1672,
	-2, 1867,
	-1, 2315,
	83, 1673,
	155, 1673,
	-2, 1797,
	-1, 2316,
	83, 1674,
	155, 1674,
	-2, 1792,
	-1, 2317,
	83, 1675,
	155, 1675,
	-2, 1781,
	-1, 2318,
	83, 1691,
	155, 1691,
	-2, 1782,
	-1, 2319,
	83, 1691,
	155, 1691,
	-2, 1783,
	-1, 2321,
	83, 1680,
	155, 1680,
	-2, 1912,
	-1, 2322,
	83, 1658,
	155, 1658,
	-2, 1897,
	-1, 2323,
	83, 1689,
	155, 1689,
	-2, 1868,
	-1, 2324,
	83, 1689,
	155, 1689,
	-2, 1896,
	-1, 2325,
	83, 1689,
	155, 1689,
	-2, 1749,
	-1, 2326,
	83, 1687,
	155, 1687,
	-2, 1887,
	-1, 2327,
	83, 1684,
	155, 1684,
	-2, 1772,
	-1, 2328,
	82, 1639,
	83, 1639,
	155, 1639,
	392, 1639,
	393, 1639,
	394, 1639,
	-2, 1720,
	-1, 2329,
	82, 1640,
	83, 1640,
	155, 1640,
	392, 1640,
	393, 1640,
	394, 1640,
	-2, 1722,
	-1, 2330,
	82, 1641,
	83, 1641,
	155, 1641,
	392, 1641,
	393, 1641,
	394, 1641,
	-2, 1938,
	-1, 2331,
	82, 1643,
	83, 1643,
	155, 1643,
	392, 1643,
	393, 1643,
	394, 1643,
	-2, 1869,
	-1, 2332,
	82, 1645,
	83, 1645,
	155, 1645,
	392, 1645,
	393, 1645,
	394, 1645,
	-2, 1851,
	-1, 2333,
	82, 1647,
	83, 1647,
	155, 1647,
	392, 1647,
	393, 1647,
	394, 1647,
	-2, 1798,
	-1, 2334,
	82, 1649,
	83, 1649,
	155, 1649,
	392, 1649,
	393, 1649,
	394, 1649,
	-2, 1777,
	-1, 2335,
	82, 1650,
	83, 1650,
	155, 1650,
	392, 1650,
	393, 1650,
	394, 1650,
	-2, 1778,
	-1, 2336,
	82, 1652,
	83, 1652,
	155, 1652,
	392, 1652,
	393, 1652,
	394, 1652,
	-2, 1719,
	-1, 2337,
	83, 1694,
	155, 1694,
	392, 1694,
	393, 1694,
	394, 1694,
	-2, 1754,
	-1, 2338,
	83, 1694,
	155, 1694,
	392, 1694,
	393, 1694,
	394, 1694,
	-2, 1768,
	-1, 2339,
	83, 1697,
	155, 1697,
	392, 1697,
	393, 1697,
	394, 1697,
	-2, 1750,
	-1, 2340,
	83, 1697,
	155, 1697,
	392, 1697,
	393, 1697,
	394, 1697,
	-2, 1814,
	-1, 2341,
	83, 1694,
	155, 1694,
	392, 1694,
	393, 1694,
	394, 1694,
	-2, 1835,
	-1, 2532,
	106, 1036,
	150, 1036,
	189, 1036,
	192, 1036,
	279, 1036,
	-2, 1030,
	-1, 2548,
	80, 628,
	155, 628,
	-2, 1209,
	-1, 2933,
	192, 1036,
	303, 1294,
	-2, 1266,
	-1, 3090,
	106, 1036,
	150, 1036,
	189, 1036,
	192, 1036,
	-2, 1152,
	-1, 3092,
	106, 1036,
	150, 1036,
	189, 1036,
	192, 1036,
	-2, 1152,
	-1, 3104,
	80, 628,
	155, 628,
	-2, 1210,
	-1, 3125,
	192, 1036,
	303, 1294,
	-2, 1267,
	-1, 3262,
	106, 1036,
	150, 1036,
	189, 1036,
	192, 1036,
	-2, 1153,
	-1, 3288,
	83, 1114,
	155, 1114,
	-2, 1036,
	-1, 3416,
	83, 1114,
	155, 1114,
	-2, 1036,
	-1, 3562,
	83, 1118,
	155, 1118,
	-2, 1036,
	-1, 3609,
	83, 1119,
	155, 1119,
	-2, 1036,
}

const yyPrivate = 57344

const yyLast = 45751

var yyAct = [...]int{
	716, 694, 3655, 718, 3629, 2577, 191, 3648, 1798, 3566,
	1549, 3110, 3469, 3203, 3573, 3572, 3565, 3416, 2919, 3454,
	3495, 702, 3525, 3316, 3019, 3139, 2952, 3394, 2393, 2571,
	3020, 1395, 3448, 696, 1211, 3247, 1545, 3415, 3473, 3248,
	590, 3245, 3344, 2574, 746, 1333, 3385, 3455, 3207, 3457,
	606, 1074, 611, 611, 962, 3198, 1471, 1746, 611, 628,
	637, 1339, 3252, 637, 3269, 3126, 2173, 2551, 3077, 3259,
	3229, 1552, 2892, 2928, 2855, 3017, 3093, 2684, 1888, 3264,
	2685, 692, 2881, 2305, 3066, 36, 2601, 2948, 2667, 2683,
	2930, 3095, 2677, 2428, 2937, 1606, 1994, 648, 2746, 3005,
	2303, 2706, 1861, 1956, 642, 2985, 2680, 2521, 1853, 2176,
	2862, 2269, 2865, 2900, 686, 2858, 2860, 2856, 1388, 2936,
	1066, 2580, 55, 2139, 176, 2253, 2533, 2857, 2097, 2106,
	2790, 2853, 1903, 1978, 2206, 2096, 2374, 1693, 1885, 1460,
	893, 2719, 1965, 1957, 634, 691, 1964, 1930, 2357, 1881,
	1467, 1990, 1989, 116, 610, 610, 2729, 2258, 1472, 2270,
	618, 1856, 1854, 2510, 1306, 590, 1475, 2505, 1777, 2582,
	35, 1788, 2603, 2174, 6, 2543, 1284, 187, 8, 186,
	7, 2301, 2138, 1480, 1722, 1018, 1543, 1991, 2024, 1434,
	695, 191, 1498, 191, 605, 1009, 1010, 1374, 1404, 2119,
	685, 1758, 611, 693, 2001, 1599, 1583, 1963, 1548, 1534,
	1960, 14, 703, 1946, 26, 1087, 925, 2461, 1441, 15,
	955, 1757, 1920, 892, 1542, 1721, 1308, 956, 2460, 13,
	1373, 2169, 2277, 1371, 834, 32, 620, 623, 650, 1427,
	1607, 23, 22, 16, 10, 651, 1334, 1433, 869, 167,
	1342, 177, 875, 912, 173, 647, 890, 1251, 1212, 2279,
	1998, 2761, 1969, 3107, 2907, 1069, 1968, 589, 1322, 1318,
	632, 3379, 636, 633, 1343, 2494, 2494, 2494, 629, 1006,
	2008, 3080, 3012, 2416, 2363, 2360, 1706, 2361, 631, 2358,
	1448, 971, 1444, 1001, 630, 1002, 175, 607, 2095, 2838,
	1270, 1002, 836, 837, 618, 616, 1002, 2835, 2840, 2837,
	3640, 1356, 1700, 1266, 1446, 1005, 3196, 1007, 3129, 2486,
	2484, 2742, 968, 1146, 1147, 1148, 1145, 2740, 1935, 3351,
	896, 1069, 3345, 3199, 3018, 640, 1975, 1206, 3459, 970,
	1146, 1147, 1148, 1145, 1959, 835, 2817, 2214, 174, 1481,
	1000, 174, 174, 8, 3547, 7, 3141, 174, 3401, 2488,
	846, 174, 51, 163, 138, 174, 1496, 3234, 1109, 3132,
	1488, 174, 2402, 2539, 174, 51, 163, 138, 1995, 3127,
	2410, 174, 3230, 3094, 3149, 3150, 2130, 1271, 3369, 3506,
	3128, 1414, 1413, 174, 1412, 974, 1493, 972, 973, 895,
	1485, 688, 3402, 1280, 646, 2762, 2815, 1298, 2006, 935,
	2123, 3371, 2295, 174, 51, 163, 138, 1495, 1143, 2754,
	2537, 1487, 2713, 2714, 1866, 1867, 168, 3133, 1535, 115,
	168, 1539, 2296, 1898, 168, 1375, 1519, 1377, 1507, 1352,
	168, 115, 1353, 168, 174, 51, 163, 138, 1272, 2712,
	168, 174, 51, 163, 138, 1538, 2375, 2283, 1124, 944,
	2282, 1125, 168, 2284, 687, 1707, 1708, 1865, 1330, 847,
	966, 967, 825, 2839, 824, 826, 827, 1085, 828, 829,
	1338, 2836, 168, 2507, 1337, 1340, 1341, 1340, 1341, 1127,
	934, 1136, 937, 2508, 1772, 936, 3576, 3577, 3220, 1551,
	1141, 965, 964, 3462, 3538, 3461, 3537, 3462, 1082, 3460,
	3536, 3461, 3544, 168, 3460, 2084, 3597, 3633, 3634, 3540,
	168, 3148, 3446, 2177, 3449, 3450, 3451, 3452, 1355, 3527,
	1641, 3021, 921, 1117, 1279, 3527, 1119, 2747, 2923, 1540,
	897, 2748, 2506, 2749, 3530, 3348, 2010, 2397, 3137, 2921,
	3021, 1447, 1445, 1079, 687, 2622, 3466, 1090, 1876, 3035,
	1872, 1882, 1537, 1530, 1120, 2489, 3067, 899, 2002, 1122,
	3134, 3138, 3136, 3135, 3074, 1943, 1555, 137, 3239, 172,
	2876, 2247, 2874, 2117, 881, 2497, 1454, 1453, 3151, 2866,
	1003, 1004, 3542, 3549, 3550, 1008, 3373, 2780, 2407, 161,
	1139, 1140, 940, 938, 2778, 939, 3545, 3546, 3143, 3144,
	611, 681, 2212, 1090, 683, 1138, 160, 1112, 3197, 682,
	611, 1078, 2741, 2671, 2250, 2249, 3376, 3236, 2254, 3166,
	920, 919, 1123, 2890, 2951, 3219, 3604, 2871, 2872, 637,
	637, 2925, 611, 3221, 1113, 2513, 2949, 2950, 2901, 3406,
	3575, 3488, 918, 2873, 3483, 3151, 2544, 2576, 3156, 639,
	1748, 2007, 3398, 894, 1328, 3490, 638, 3130, 990, 1115,
	2870, 2676, 1012, 3142, 898, 930, 3163, 2487, 2125, 1536,
	3111, 1118, 1121, 1365, 1896, 1897, 3474, 1281, 3496, 3118,
	1354, 945, 1554, 1553, 1561, 1564, 1565, 2920, 926, 1269,
	3167, 1317, 1134, 1135, 3465, 1562, 645, 1114, 3307, 1126,
	634, 634, 1068, 941, 2013, 2015, 2016, 3666, 3363, 2192,
	3364, 2224, 1076, 2223, 2954, 2172, 2195, 2525, 2528, 2529,
	2530, 2526, 2527, 1071, 927, 931, 1968, 1070, 1070, 3296,
	3210, 3378, 1077, 1104, 1100, 3038, 2784, 2493, 1078, 971,
	1095, 1996, 1092, 1091, 915, 1996, 913, 917, 934, 2244,
	2245, 1996, 914, 911, 910, 3302, 916, 901, 902, 900,
	903, 904, 905, 906, 3366, 932, 943, 933, 2519, 1384,
	968, 1215, 2868, 2194, 1116, 1002, 2298, 1002, 928, 929,
	1002, 1002, 1383, 1102, 635, 1002, 1002, 970, 1315, 3400,
	3548, 1997, 1314, 3147, 1070, 3365, 3407, 1313, 1092, 1091,
	985, 980, 975, 979, 983, 2359, 2009, 3497, 3651, 3399,
	971, 1129, 1332, 1331, 1130, 924, 2193, 2572, 2573, 1084,
	2576, 923, 1449, 635, 3564, 3372, 632, 632, 988, 633,
	633, 2179, 978, 3386, 629, 629, 3420, 2929, 835, 1067,
	2834, 968, 1132, 942, 631, 631, 52, 2215, 1277, 606,
	630, 630, 1081, 1083, 635, 3096, 2485, 2926, 970, 1216,
	1093, 635, 3146, 139, 2025, 1073, 139, 139, 169, 170,
	3194, 171, 139, 1627, 3235, 1249, 139, 1329, 1254, 1101,
	139, 2877, 893, 986, 1883, 52, 139, 2411, 2867, 139,
	989, 1103, 1181, 1182, 1183, 1184, 139, 3374, 2781, 2189,
	2172, 1097, 1098, 1340, 1341, 2953, 922, 1185, 139, 1072,
	967, 3363, 976, 3364, 1340, 1341, 52, 3541, 3024, 2724,
	2725, 1285, 1128, 52, 2623, 1563, 2624, 2625, 139, 3358,
	1109, 611, 3240, 1367, 646, 987, 1875, 3524, 1873, 590,
	590, 1531, 1372, 2512, 3652, 2014, 2945, 1336, 590, 590,
	2708, 2710, 1399, 1399, 2403, 611, 2949, 2950, 2287, 139,
	1133, 2210, 883, 1999, 884, 3419, 139, 3366, 2178, 2182,
	1290, 2869, 2783, 2180, 1296, 977, 3298, 637, 1428, 606,
	3297, 1295, 1437, 1437, 1401, 1131, 3303, 3304, 1397, 1397,
	1294, 1293, 641, 191, 3060, 2946, 3309, 935, 3365, 2516,
	2517, 3563, 590, 2620, 1224, 1225, 2651, 935, 1406, 887,
	888, 889, 2011, 2012, 2515, 3359, 1108, 2792, 2791, 3456,
	3317, 3318, 3319, 3323, 3321, 3322, 3320, 2181, 1303, 1286,
	1287, 1288, 1289, 1363, 1291, 935, 1623, 1179, 2102, 2101,
	1297, 2209, 1620, 1278, 2496, 2100, 1622, 1619, 1621, 1625,
	1626, 1275, 984, 1479, 1624, 1482, 1710, 1405, 1273, 1274,
	1490, 1711, 2099, 1709, 1455, 849, 2906, 2236, 1393, 1394,
	993, 998, 999, 850, 853, 3649, 3650, 3270, 3662, 2888,
	937, 1149, 1255, 936, 1253, 1517, 3667, 2109, 981, 1178,
	937, 982, 2121, 936, 2642, 2643, 885, 1187, 3534, 1399,
	2183, 1399, 1078, 1283, 2267, 2188, 3657, 1144, 1749, 2186,
	2110, 2111, 1311, 3646, 1497, 2982, 2709, 1316, 937, 3611,
	1532, 936, 1195, 1075, 1326, 852, 1109, 2179, 2182, 855,
	854, 2377, 1345, 1346, 1366, 1348, 1349, 1350, 1305, 1749,
	2058, 2550, 1486, 2057, 2978, 3025, 1282, 1494, 3584, 1458,
	2004, 1461, 1462, 839, 840, 841, 842, 3063, 1344, 3037,
	634, 1347, 1463, 1464, 1324, 1325, 1379, 1381, 1319, 1323,
	1323, 1323, 1526, 1429, 3578, 1391, 1392, 2089, 3658, 971,
	1469, 1470, 2549, 1605, 971, 3612, 1382, 1357, 1358, 1923,
	2402, 3612, 1319, 1319, 1075, 2947, 1107, 1654, 1630, 1631,
	1632, 1633, 1634, 1635, 1628, 1629, 2120, 1474, 2889, 1533,
	1478, 616, 1407, 882, 1106, 1144, 2641, 1477, 3359, 1420,
	3585, 2958, 3360, 1550, 3560, 1512, 1513, 3516, 2268, 1450,
	1438, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579,
	1580, 1581, 1582, 2956, 1439, 2268, 3382, 1594, 1595, 1426,
	2179, 2182, 1547, 2652, 2654, 2655, 2656, 2653, 1078, 2183,
	946, 995, 996, 997, 2178, 2172, 2177, 1144, 2175, 2180,
	1428, 2844, 2842, 2268, 2727, 1719, 2982, 1399, 1724, 1725,
	1528, 1727, 1728, 611, 1639, 1691, 632, 1566, 611, 633,
	1107, 1399, 2499, 1663, 629, 893, 3561, 3491, 1747, 3382,
	844, 1525, 3674, 1399, 631, 2490, 1522, 1544, 3479, 1367,
	630, 1500, 1506, 2392, 628, 1505, 1521, 1516, 1508, 2382,
	2550, 1694, 2298, 2181, 1995, 1515, 3439, 1921, 1524, 3438,
	1523, 1520, 2155, 3433, 1771, 1864, 1541, 3432, 1250, 1653,
	2165, 2094, 2088, 1778, 1778, 1546, 1367, 1109, 1367, 1367,
	2087, 2062, 611, 611, 3431, 1719, 1719, 1986, 1894, 1399,
	1850, 1851, 1863, 3430, 1718, 1304, 1597, 1592, 1593, 2004,
	1636, 1637, 1385, 1640, 1585, 3659, 590, 1726, 1399, 1702,
	3480, 1655, 2183, 1436, 1436, 1729, 3410, 2178, 2172, 2177,
	1734, 2175, 2180, 3409, 1662, 3107, 1664, 3073, 3440, 1775,
	1161, 2143, 2731, 2167, 3381, 3382, 611, 1719, 1399, 3382,
	1908, 2552, 611, 611, 611, 1913, 1914, 3172, 1146, 1147,
	1148, 1145, 1918, 1919, 2405, 3120, 3382, 1925, 1146, 1147,
	1148, 1145, 2404, 1800, 191, 3382, 1697, 191, 191, 2396,
	191, 2160, 1899, 2053, 1845, 1846, 2181, 1715, 1716, 1717,
	2038, 1985, 2037, 1928, 1784, 1785, 3086, 1665, 2004, 1916,
	1730, 1731, 1732, 1733, 2154, 2004, 1502, 1146, 1147, 1148,
	1145, 1192, 1877, 3484, 2813, 1692, 3382, 1094, 1654, 1654,
	1967, 1146, 1147, 1148, 1145, 1723, 1654, 1654, 1869, 2298,
	1871, 1698, 1064, 1980, 1062, 3333, 1905, 3121, 3170, 1739,
	1889, 1890, 3053, 1750, 1751, 1893, 1907, 2911, 1904, 1714,
	2775, 1752, 1779, 2034, 1904, 1904, 1904, 3485, 1744, 3049,
	1747, 1780, 1891, 1892, 1399, 1993, 1743, 2036, 3087, 1884,
	2966, 1755, 1756, 1974, 2703, 2467, 1556, 1557, 1558, 1559,
	1560, 1644, 1645, 1646, 1910, 1911, 1912, 1781, 1765, 1766,
	1760, 1643, 1642, 2459, 1660, 2418, 3668, 1661, 1934, 1643,
	1642, 1937, 1938, 1759, 1940, 1761, 1762, 1723, 1776, 1782,
	1783, 1671, 1672, 1754, 3054, 2400, 1320, 1987, 1319, 1768,
	1601, 1602, 1603, 1604, 1849, 634, 1764, 1970, 1690, 1638,
	2902, 3050, 1323, 2388, 1852, 2384, 1878, 1648, 1769, 1868,
	971, 1870, 2967, 3637, 1323, 2379, 2268, 1144, 971, 2207,
	3380, 3271, 2372, 2370, 3099, 3097, 1544, 2368, 2366, 2142,
	1962, 839, 840, 841, 842, 1144, 3355, 1144, 1962, 2090,
	2069, 968, 1906, 2068, 1387, 1361, 1362, 2056, 1364, 968,
	1368, 1369, 1370, 2047, 1695, 2046, 2045, 2143, 970, 1931,
	3535, 1929, 2358, 2003, 1509, 3272, 970, 851, 3100, 3098,
	1389, 1677, 2022, 2023, 1309, 2380, 2903, 2385, 1310, 1670,
	1948, 1390, 1415, 1416, 1417, 1418, 1419, 2380, 1421, 1422,
	1423, 1424, 1425, 1976, 2373, 2371, 1431, 1432, 3300, 2367,
	2367, 2143, 1321, 3010, 1973, 3299, 1971, 3285, 1410, 971,
	3241, 2089, 1144, 686, 3079, 1144, 611, 611, 611, 1144,
	2904, 632, 2983, 2976, 633, 1144, 1984, 1144, 1144, 629,
	2971, 611, 611, 611, 611, 2004, 1510, 1767, 1351, 631,
	968, 2968, 1988, 1386, 2140, 630, 2883, 1983, 1600, 2673,
	1982, 2523, 2495, 2415, 2147, 1367, 2383, 970, 1666, 1667,
	1668, 1669, 2289, 1300, 1673, 1674, 1675, 1676, 1678, 1679,
	1680, 1681, 1682, 1683, 1684, 1685, 1299, 1080, 844, 2425,
	2017, 1367, 2026, 1164, 1165, 1166, 1167, 1168, 1161, 1591,
	1695, 856, 2020, 2021, 2019, 1695, 1695, 2352, 2201, 1932,
	1585, 719, 729, 2733, 2030, 1588, 1590, 1587, 1720, 1589,
	720, 1145, 721, 725, 728, 724, 722, 723, 2113, 2114,
	2115, 1160, 1159, 1169, 1170, 1162, 1163, 1164, 1165, 1166,
	1167, 1168, 1161, 2131, 2132, 2133, 2134, 1309, 1148, 1145,
	2060, 1310, 731, 117, 1933, 3312, 3311, 1936, 117, 1600,
	1939, 2031, 1442, 1941, 1932, 2208, 2750, 2612, 2610, 2272,
	2272, 1863, 2272, 2588, 2586, 726, 1160, 1159, 1169, 1170,
	1162, 1163, 1164, 1165, 1166, 1167, 1168, 1161, 3242, 3243,
	590, 590, 1146, 1147, 1148, 1145, 3291, 2478, 1078, 2479,
	3665, 2091, 3642, 3013, 1399, 611, 1194, 727, 617, 2451,
	1658, 117, 3641, 1979, 2083, 2085, 2086, 2171, 1193, 3588,
	611, 3559, 3558, 2103, 1659, 3486, 1078, 2342, 606, 2170,
	3435, 1215, 1437, 3423, 1863, 3237, 3413, 2347, 2122, 2349,
	2293, 3403, 3346, 191, 3071, 3274, 2018, 3273, 3112, 3101,
	2213, 3070, 2875, 2216, 2217, 2218, 2219, 2220, 2221, 2222,
	2164, 3664, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232,
	2233, 2234, 2235, 2771, 2237, 2238, 2239, 2240, 2241, 2276,
	2242, 2274, 2745, 2278, 2663, 2744, 2148, 1146, 1147, 1148,
	1145, 3238, 2161, 971, 2661, 2659, 2398, 1763, 2362, 1993,
	3072, 1146, 1147, 1148, 1145, 2156, 1399, 1405, 1399, 2028,
	1399, 2646, 2032, 1770, 2648, 1078, 1773, 1774, 2285, 1216,
	2286, 969, 1904, 2417, 968, 2151, 2063, 2064, 117, 2066,
	2157, 2645, 2644, 2158, 2184, 2185, 2073, 2190, 2290, 2291,
	2662, 970, 2346, 117, 2408, 117, 2636, 2306, 1399, 2445,
	2660, 2658, 2300, 2044, 2159, 1146, 1147, 1148, 1145, 2251,
	1323, 2051, 2630, 1442, 2452, 2629, 2628, 2353, 2627, 1399,
	2647, 2806, 2280, 1146, 1147, 1148, 1145, 2491, 2436, 2444,
	2065, 2093, 3011, 1951, 1397, 2070, 2071, 2072, 1950, 1949,
	2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 1945, 1944,
	2453, 1902, 2297, 2294, 1901, 1397, 1061, 1057, 1058, 1059,
	1060, 1900, 2441, 1503, 2440, 2439, 2437, 1379, 1381, 1078,
	2522, 2345, 2343, 1078, 1268, 2456, 2457, 2429, 3078, 2429,
	2805, 1399, 2678, 2861, 2520, 3503, 2412, 1909, 3661, 2433,
	1719, 1146, 1147, 1148, 1145, 3660, 3204, 3635, 2548, 3603,
	2427, 3602, 2454, 3599, 2554, 2414, 1146, 1147, 1148, 1145,
	2794, 2144, 2409, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
	1161, 2564, 3468, 1146, 1147, 1148, 1145, 2390, 2482, 3246,
	1078, 2438, 2354, 2423, 3453, 3444, 2401, 2399, 2585, 3427,
	3422, 3421, 2406, 3377, 3375, 1078, 1078, 1078, 1778, 2394,
	2395, 1078, 3347, 2596, 2597, 2598, 2599, 1078, 2606, 3293,
	2607, 2608, 3255, 2609, 1544, 2611, 3224, 2035, 2534, 2419,
	2420, 3223, 1146, 1147, 1148, 1145, 2606, 2538, 3202, 2535,
	2545, 1443, 2435, 3200, 1146, 1147, 1148, 1145, 2272, 2422,
	2500, 3179, 2041, 681, 2306, 3176, 683, 3174, 2049, 2668,
	2546, 682, 2664, 3069, 2555, 1800, 3068, 2566, 3569, 3065,
	590, 3046, 2509, 3499, 971, 1719, 1078, 1863, 1863, 1863,
	1863, 1146, 1147, 1148, 1145, 3044, 3028, 2977, 1078, 1863,
	2973, 1695, 2272, 1695, 1146, 1147, 1148, 1145, 2502, 2964,
	2504, 1146, 1147, 1148, 1145, 2583, 2963, 2579, 1399, 2583,
	2884, 1695, 1695, 2848, 2501, 2847, 2846, 2462, 2463, 611,
	611, 2098, 2590, 2468, 2048, 2518, 2785, 2591, 2592, 2442,
	2443, 2782, 2595, 2743, 2717, 3368, 2553, 2033, 2602, 8,
	2547, 7, 2657, 1436, 1146, 1147, 1148, 1145, 2649, 1723,
	1146, 1147, 1148, 1145, 2639, 2637, 2633, 2568, 2565, 2421,
	2632, 2631, 2492, 2618, 2619, 2699, 2391, 2581, 2387, 2587,
	781, 780, 2578, 2584, 2386, 191, 2594, 1953, 2634, 2635,
	191, 1947, 1705, 1160, 1159, 1169, 1170, 1162, 1163, 1164,
	1165, 1166, 1167, 1168, 1161, 2556, 1704, 2686, 1504, 1491,
	1223, 1654, 2670, 1654, 2561, 2562, 2760, 2638, 2626, 2686,
	2728, 1146, 1147, 1148, 1145, 1219, 1218, 2770, 1065, 848,
	3367, 2721, 2722, 1399, 3356, 3226, 2777, 3211, 3092, 174,
	2563, 163, 138, 3091, 2669, 2674, 2149, 2150, 3090, 2687,
	2688, 2689, 2690, 3062, 2698, 3058, 2152, 2153, 3056, 3055,
	2700, 2702, 3052, 2426, 2701, 3051, 2432, 3045, 3043, 2718,
	2715, 3026, 3016, 2446, 2447, 3015, 3001, 3000, 1462, 2912,
	2851, 2449, 2450, 2841, 3472, 2811, 2804, 1694, 1463, 1464,
	3225, 2796, 2759, 2711, 2455, 2755, 2795, 117, 117, 969,
	1146, 1147, 1148, 1145, 2763, 1469, 1470, 2672, 168, 2734,
	1146, 1147, 1148, 1145, 2738, 2757, 1146, 1147, 1148, 1145,
	1556, 1695, 2789, 2764, 2726, 2498, 2799, 1474, 2801, 2369,
	1478, 2774, 971, 2735, 1078, 2736, 2779, 1477, 2732, 2365,
	2864, 971, 2364, 2074, 2067, 2061, 2753, 2059, 3213, 2055,
	2879, 2751, 2054, 2756, 2052, 611, 2767, 2043, 2766, 2758,
	2040, 2039, 2765, 1952, 1688, 1687, 1686, 2893, 1078, 1657,
	1177, 1078, 1078, 3414, 1146, 1147, 1148, 1145, 1656, 1647,
	1863, 2140, 2786, 2910, 2773, 174, 2558, 2559, 1411, 1409,
	3587, 1213, 2793, 3498, 3441, 3429, 3424, 2787, 1457, 3327,
	3310, 2201, 3306, 2802, 2803, 3284, 2797, 2798, 3268, 3187,
	3617, 2344, 3185, 2935, 2850, 2938, 2843, 2938, 2938, 2887,
	2351, 2800, 1078, 3158, 3157, 3154, 1160, 1159, 1169, 1170,
	1162, 1163, 1164, 1165, 1166, 1167, 1168, 1161, 3153, 3119,
	3116, 2959, 2534, 3114, 3081, 1468, 1459, 1473, 1476, 1399,
	1399, 1465, 1307, 2845, 168, 2896, 2955, 2885, 2899, 2849,
	2665, 2957, 2589, 2541, 2922, 2924, 1169, 1170, 1162, 1163,
	1164, 1165, 1166, 1167, 1168, 1161, 2880, 2540, 2536, 2503,
	2960, 2961, 2477, 2918, 2378, 1397, 1397, 2288, 2908, 2886,
	971, 2243, 971, 2141, 2933, 971, 611, 2905, 2112, 2895,
	2092, 2864, 2897, 2898, 2909, 1586, 168, 2934, 1915, 2917,
	1256, 2943, 1719, 1719, 1713, 2171, 1701, 2818, 2819, 3515,
	971, 968, 1529, 2820, 2821, 2822, 2823, 2170, 2824, 2825,
	2826, 2827, 2828, 2829, 2830, 2831, 2939, 2940, 970, 2944,
	1152, 1153, 1154, 1155, 1156, 1157, 1158, 1150, 1489, 1466,
	1172, 1267, 1176, 1252, 1248, 1247, 1246, 1245, 1078, 3212,
	1244, 1243, 2445, 1242, 1241, 1240, 1239, 1238, 1173, 1175,
	1171, 3014, 1174, 1160, 1159, 1169, 1170, 1162, 1163, 1164,
	1165, 1166, 1167, 1168, 1161, 1146, 1147, 1148, 1145, 1237,
	2737, 1236, 2739, 1235, 1234, 2941, 1233, 1232, 1904, 1159,
	1169, 1170, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1161,
	1695, 2970, 1231, 2975, 611, 1695, 2969, 2974, 2979, 2980,
	2916, 2972, 1230, 1229, 1979, 2990, 3160, 1228, 2965, 1227,
	1226, 1222, 1221, 1220, 1217, 1210, 1209, 2994, 3041, 1207,
	1408, 1206, 2557, 1205, 617, 2809, 1204, 2560, 2997, 2998,
	2999, 1203, 1146, 1147, 1148, 1145, 1202, 1201, 3003, 2788,
	1200, 1199, 3009, 1198, 1146, 1147, 1148, 1145, 3615, 3282,
	1197, 1146, 1147, 1148, 1145, 117, 2808, 1196, 1191, 2306,
	1190, 1189, 1188, 2810, 2807, 1111, 1063, 3513, 3027, 2986,
	2987, 3511, 3280, 3509, 3155, 3030, 3029, 2146, 2127, 1099,
	3033, 3034, 1146, 1147, 1148, 1145, 3574, 2989, 2429, 2524,
	1146, 1147, 1148, 1145, 3047, 2299, 3036, 1955, 3039, 1110,
	2992, 3085, 1160, 1159, 1169, 1170, 1162, 1163, 1164, 1165,
	1166, 1167, 1168, 1161, 3189, 2991, 2272, 1863, 3104, 117,
	2255, 2692, 3190, 2691, 117, 1160, 1159, 1169, 1170, 1162,
	1163, 1164, 1165, 1166, 1167, 1168, 1161, 117, 3289, 2695,
	3122, 2693, 2389, 1078, 2696, 2381, 2694, 1301, 3061, 117,
	3059, 2476, 2935, 1741, 1742, 3064, 1078, 2260, 2263, 2264,
	2265, 2261, 102, 2262, 2266, 54, 2882, 1078, 2475, 3169,
	53, 3188, 2697, 1399, 2264, 2265, 2769, 1146, 1147, 1148,
	1145, 3031, 3032, 3076, 608, 971, 2211, 3165, 3106, 1719,
	3004, 1837, 971, 1078, 1146, 1147, 1148, 1145, 1736, 1737,
	1738, 2942, 2474, 2931, 3171, 2932, 1451, 2376, 2413, 1397,
	3152, 2394, 2395, 3113, 2859, 3115, 1499, 1483, 613, 3109,
	2118, 614, 191, 3145, 1917, 3103, 615, 3102, 1146, 1147,
	1148, 1145, 3082, 3083, 3084, 1078, 1105, 612, 3088, 3089,
	2852, 2567, 2614, 3181, 3164, 3161, 3159, 2542, 3191, 2615,
	2616, 2617, 2163, 3168, 2473, 2136, 1745, 1712, 2472, 1643,
	1642, 1263, 1264, 3626, 3123, 3175, 3173, 3426, 3178, 1261,
	1262, 2962, 3183, 3182, 1078, 2252, 2471, 3162, 3180, 1137,
	1146, 1147, 1148, 1145, 1146, 1147, 1148, 1145, 2602, 1259,
	1260, 2470, 1078, 1399, 1399, 1257, 1258, 2248, 2893, 1848,
	1360, 3209, 1146, 1147, 1148, 1145, 1359, 1335, 2996, 3263,
	2720, 3263, 3205, 2469, 2686, 1981, 3206, 1146, 1147, 1148,
	1145, 3177, 1312, 1292, 3251, 1078, 3278, 1078, 3594, 1397,
	3253, 2466, 3257, 3258, 3592, 3281, 3552, 3283, 3532, 1146,
	1147, 1148, 1145, 3531, 1399, 3233, 3195, 3529, 3232, 3231,
	2465, 3475, 3442, 3341, 3228, 3340, 2686, 1146, 1147, 1148,
	1145, 3279, 611, 3201, 1078, 1078, 2464, 3048, 1078, 1078,
	3256, 3023, 3267, 3266, 3022, 3007, 1146, 1147, 1148, 1145,
	3253, 2196, 3106, 2166, 3277, 1501, 3260, 3006, 2730, 1749,
	3324, 2772, 1146, 1147, 1148, 1145, 1747, 3329, 3338, 3314,
	3315, 3290, 3152, 3325, 3326, 3287, 3294, 3342, 3343, 3619,
	3618, 3286, 2458, 3249, 2129, 3145, 2448, 2042, 3040, 1096,
	1399, 3292, 3618, 971, 1862, 3042, 3619, 2913, 3308, 3002,
	1075, 1327, 2914, 2915, 2424, 178, 3, 3335, 1146, 1147,
	1148, 1145, 1146, 1147, 1148, 1145, 1550, 62, 1550, 2,
	3362, 3354, 3638, 3336, 3057, 3330, 1397, 3334, 3639, 1,
	1146, 1147, 1148, 1145, 3313, 1596, 2483, 2260, 2263, 2264,
	2265, 2261, 3349, 2262, 2266, 1699, 3357, 1265, 3361, 3395,
	3353, 3389, 3214, 843, 3215, 3249, 3249, 838, 1376, 3249,
	3249, 1146, 1147, 1148, 1145, 1078, 117, 2281, 1895, 117,
	117, 1403, 117, 1703, 845, 3412, 2704, 3418, 2705, 2995,
	2707, 3331, 2000, 2675, 2246, 3332, 3383, 839, 840, 841,
	842, 2116, 1075, 2878, 3392, 3391, 1302, 886, 1649, 3390,
	1514, 3209, 992, 3408, 1089, 1511, 1088, 3404, 1078, 1086,
	969, 1598, 733, 1399, 1958, 2666, 2640, 3337, 969, 3625,
	3654, 3586, 3628, 1527, 717, 2981, 3523, 3387, 3445, 3590,
	3447, 3352, 117, 3425, 2005, 1142, 2752, 3193, 908, 771,
	2993, 744, 1208, 3434, 3436, 1492, 1484, 2816, 2814, 1397,
	3464, 994, 743, 3075, 1695, 2514, 2723, 3397, 991, 909,
	3458, 1942, 3350, 1078, 971, 1695, 1452, 1456, 3184, 2162,
	3405, 3186, 3443, 3494, 3288, 2927, 2575, 3476, 3222, 3489,
	3117, 3218, 3216, 3217, 652, 1874, 1550, 588, 3192, 953,
	3328, 1954, 3471, 653, 2145, 3543, 3428, 866, 2126, 867,
	859, 3467, 3470, 2532, 2531, 3493, 1567, 1151, 1584, 1177,
	1078, 3478, 2812, 2832, 2833, 1186, 690, 2029, 1399, 2511,
	3140, 3518, 3521, 3508, 3510, 3512, 3514, 2716, 61, 3249,
	3487, 60, 59, 58, 3492, 1924, 3522, 199, 735, 198,
	3501, 3244, 3520, 3630, 715, 3507, 714, 713, 3437, 3517,
	712, 711, 710, 2259, 1397, 2257, 2256, 3526, 1399, 1858,
	3528, 3395, 1857, 1922, 2891, 1160, 1159, 1169, 1170, 1162,
	1163, 1164, 1165, 1166, 1167, 1168, 1161, 3562, 2605, 2600,
	1789, 3551, 1787, 3570, 3249, 3553, 2593, 2191, 3555, 3554,
	2198, 1786, 3571, 3504, 1397, 3556, 3557, 3505, 3305, 1627,
	2650, 3208, 1735, 2187, 1806, 3477, 2621, 1803, 1802, 2613,
	3481, 3482, 3301, 3579, 3295, 3580, 1834, 3581, 3393, 3582,
	3262, 3124, 3583, 3593, 3125, 3595, 3596, 3131, 2135, 3591,
	3589, 3249, 1017, 1078, 1013, 3598, 1015, 3458, 1016, 1014,
	2434, 3502, 2168, 2854, 2108, 2107, 2105, 2104, 1276, 3105,
	3463, 3418, 3607, 3539, 3227, 2304, 2302, 3108, 2988, 2984,
	3609, 3610, 3608, 1966, 1977, 2768, 3624, 3614, 3632, 3616,
	1859, 3631, 3620, 3621, 3622, 3623, 3613, 1855, 2128, 3370,
	1740, 860, 2124, 99, 152, 3643, 48, 1078, 3636, 89,
	88, 98, 150, 47, 183, 182, 185, 3644, 3493, 3645,
	184, 181, 3647, 2355, 2356, 180, 1440, 3653, 3656, 179,
	3533, 3265, 833, 38, 37, 33, 12, 1835, 11, 174,
	51, 163, 138, 34, 174, 21, 20, 1518, 19, 25,
	31, 3663, 3384, 30, 110, 109, 29, 164, 108, 3632,
	3670, 107, 3631, 3669, 156, 106, 3261, 105, 165, 3656,
	3671, 104, 1837, 28, 3605, 3675, 18, 42, 41, 3600,
	3601, 40, 1623, 9, 97, 95, 27, 115, 1620, 96,
	93, 94, 1622, 1619, 1621, 1625, 1626, 92, 90, 73,
	1624, 72, 103, 2275, 71, 86, 85, 84, 168, 83,
	82, 81, 79, 168, 80, 907, 70, 663, 662, 669,
	659, 69, 68, 1812, 67, 66, 91, 2027, 1550, 666,
	667, 77, 668, 672, 87, 78, 654, 76, 75, 74,
	65, 64, 63, 136, 135, 134, 677, 174, 51, 163,
	138, 1160, 1159, 1169, 1170, 1162, 1163, 1164, 1165, 1166,
	1167, 1168, 1161, 3275, 3276, 164, 1862, 133, 1195, 132,
	130, 131, 156, 129, 128, 117, 165, 127, 126, 125,
	124, 43, 44, 45, 120, 121, 46, 122, 123, 681,
	1828, 146, 683, 145, 147, 115, 149, 682, 151, 148,
	153, 143, 141, 144, 142, 140, 56, 100, 17, 24,
	103, 4, 0, 0, 0, 0, 168, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3500, 0, 0, 0,
	0, 0, 0, 1608, 1609, 1610, 1611, 1612, 1613, 1614,
	1615, 1616, 1617, 1618, 1630, 1631, 1632, 1633, 1634, 1635,
	1628, 1629, 0, 0, 0, 137, 162, 172, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1816, 0, 0, 0, 0, 0, 0, 161, 155, 154,
	0, 1822, 0, 0, 57, 883, 0, 884, 0, 0,
	0, 0, 120, 121, 0, 122, 123, 0, 0, 0,
	3567, 1810, 1844, 0, 0, 1811, 1813, 1815, 0, 1817,
	1818, 1819, 1823, 1824, 1825, 1827, 1830, 1831, 1832, 0,
	0, 0, 0, 864, 0, 0, 1820, 1829, 1821, 0,
	0, 0, 0, 655, 657, 656, 878, 0, 874, 0,
	0, 0, 0, 661, 0, 157, 158, 159, 0, 0,
	0, 0, 0, 0, 0, 665, 0, 0, 0, 0,
	1836, 0, 680, 137, 162, 172, 3567, 101, 0, 658,
	0, 0, 0, 649, 117, 0, 166, 0, 0, 0,
	0, 0, 0, 0, 117, 161, 155, 154, 0, 0,
	0, 0, 57, 0, 0, 0, 111, 0, 0, 0,
	160, 0, 112, 0, 1833, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3567, 0, 0, 0, 0, 0,
	0, 1809, 0, 0, 0, 0, 0, 0, 1808, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1146, 1147,
	1148, 1145, 1826, 157, 158, 159, 0, 0, 0, 113,
	0, 1814, 0, 0, 0, 880, 0, 873, 0, 0,
	3673, 0, 50, 0, 0, 0, 877, 876, 660, 664,
	670, 0, 671, 673, 166, 0, 674, 675, 676, 0,
	0, 678, 679, 858, 0, 0, 0, 865, 0, 1862,
	1862, 1862, 1862, 0, 111, 0, 0, 0, 160, 0,
	112, 1862, 0, 0, 0, 0, 0, 872, 0, 0,
	0, 52, 0, 0, 0, 0, 0, 1627, 0, 0,
	0, 0, 0, 0, 0, 0, 882, 0, 0, 1835,
	0, 871, 0, 0, 1796, 870, 0, 0, 0, 0,
	0, 857, 0, 0, 0, 863, 169, 170, 0, 171,
	0, 0, 0, 0, 139, 0, 0, 113, 0, 139,
	0, 0, 0, 0, 1837, 1805, 0, 861, 0, 0,
	50, 0, 0, 0, 1838, 1839, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	0, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	1804, 0, 0, 0, 881, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 1812, 0, 114, 39, 52,
	0, 117, 0, 0, 49, 0, 0, 0, 5, 0,
	862, 0, 0, 0, 118, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 170, 0, 171, 0, 0,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1623, 0, 1828, 0, 0, 0, 1620, 0, 0, 0,
	1622, 1619, 1621, 1625, 1626, 0, 0, 0, 1624, 0,
	0, 0, 0, 0, 0, 1835, 0, 879, 0, 0,
	1796, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 114, 39, 0, 0, 0,
	0, 0, 49, 0, 0, 0, 0, 0, 0, 0,
	1837, 1805, 118, 119, 0, 0, 868, 0, 0, 0,
	1838, 1839, 0, 1795, 1797, 1794, 0, 1791, 0, 0,
	0, 0, 1816, 0, 0, 0, 0, 0, 0, 0,
	969, 0, 117, 1822, 0, 117, 1804, 0, 0, 0,
	0, 1807, 1862, 1790, 0, 0, 0, 0, 0, 0,
	0, 1812, 0, 1810, 1844, 0, 0, 1811, 1813, 1815,
	117, 1817, 1818, 1819, 1823, 1824, 1825, 1827, 1830, 1831,
	1832, 0, 0, 0, 0, 0, 0, 0, 1820, 1829,
	1821, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1799, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616,
	1617, 1618, 1630, 1631, 1632, 1633, 1634, 1635, 1628, 1629,
	0, 0, 1836, 0, 0, 0, 0, 0, 1828, 0,
	0, 663, 662, 669, 659, 0, 0, 0, 0, 0,
	0, 0, 0, 666, 667, 0, 668, 672, 1792, 1793,
	654, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	677, 0, 0, 0, 0, 0, 1833, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1809, 0, 0, 0, 0, 0, 0,
	1808, 0, 0, 0, 0, 0, 0, 0, 0, 1795,
	2570, 1794, 0, 2569, 0, 0, 0, 0, 1816, 0,
	0, 0, 0, 0, 1826, 0, 0, 0, 0, 1822,
	0, 0, 0, 1814, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1841, 1840, 0, 1810,
	1844, 0, 0, 1811, 1813, 1815, 0, 1817, 1818, 1819,
	1823, 1824, 1825, 1827, 1830, 1831, 1832, 0, 0, 0,
	0, 0, 0, 0, 1820, 1829, 1821, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1799, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1801,
	0, 0, 0, 0, 0, 0, 0, 0, 1836, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1792, 1793, 0, 0, 0, 0,
	0, 1843, 0, 0, 1842, 0, 0, 0, 0, 0,
	0, 0, 1833, 0, 0, 0, 0, 655, 657, 656,
	0, 0, 0, 0, 0, 117, 0, 661, 0, 1809,
	0, 0, 117, 0, 0, 0, 1808, 0, 0, 665,
	0, 0, 0, 0, 0, 0, 680, 0, 0, 0,
	0, 0, 0, 658, 0, 0, 0, 0, 0, 751,
	1826, 0, 0, 0, 0, 0, 0, 0, 358, 1814,
	482, 515, 504, 587, 470, 0, 0, 0, 0, 1862,
	0, 704, 1841, 1840, 0, 298, 0, 0, 328, 519,
	501, 511, 502, 487, 488, 489, 496, 308, 490, 491,
	492, 463, 493, 464, 494, 495, 742, 518, 469, 389,
	342, 536, 535, 0, 0, 804, 812, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 697, 0, 0,
	732, 781, 780, 719, 729, 1801, 0, 271, 197, 465,
	583, 466, 720, 0, 721, 725, 728, 724, 722, 723,
	0, 796, 0, 0, 0, 0, 0, 0, 689, 701,
	0, 705, 660, 664, 670, 0, 671, 673, 0, 0,
	674, 675, 676, 0, 0, 678, 679, 1843, 0, 0,
	1842, 0, 0, 0, 117, 698, 699, 0, 0, 0,
	0, 752, 0, 700, 0, 0, 747, 726, 730, 0,
	0, 0, 0, 261, 394, 411, 272, 385, 424, 277,
	392, 267, 357, 381, 0, 0, 263, 409, 391, 339,
	318, 319, 262, 0, 376, 296, 310, 293, 355, 727,
	750, 754, 292, 818, 748, 419, 265, 0, 418, 354,
	405, 410, 340, 334, 264, 407, 338, 333, 322, 300,
	819, 323, 324, 314, 366, 332, 367, 315, 344, 343,
	345, 0, 0, 117, 0, 0, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	577, 745, 0, 580, 0, 421, 0, 0, 802, 0,
	0, 0, 393, 0, 0, 325, 0, 0, 0, 749,
	0, 379, 360, 815, 0, 0, 377, 330, 406, 368,
	412, 395, 420, 373, 369, 256, 396, 295, 341, 268,
	270, 290, 297, 299, 301, 302, 350, 351, 363, 384,
	397, 398, 399, 294, 278, 378, 279, 312, 280, 257,
	286, 284, 287, 386, 288, 259, 364, 403, 0, 307,
	374, 337, 260, 336, 365, 402, 401, 269, 428, 434,
	435, 523, 0, 440, 601, 602, 603, 449, 454, 455,
	456, 458, 459, 460, 461, 524, 541, 508, 478, 442,
	532, 475, 479, 480, 544, 1651, 1650, 1652, 433, 326,
	327, 0, 305, 253, 254, 597, 800, 356, 546, 579,
	471, 0, 814, 795, 797, 798, 801, 805, 806, 807,
	808, 809, 811, 813, 817, 596, 0, 525, 540, 599,
	539, 593, 362, 0, 383, 537, 484, 0, 529, 503,
	0, 530, 499, 534, 117, 473, 0, 390, 414, 426,
	443, 446, 474, 559, 560, 561, 258, 445, 563, 564,
	565, 566, 567, 568, 569, 562, 816, 506, 483, 509,
	425, 486, 485, 0, 0, 520, 753, 521, 522, 346,
	347, 348, 349, 803, 547, 276, 444, 372, 0, 507,
	0, 0, 0, 0, 0, 0, 0, 0, 512, 513,
	510, 604, 0, 570, 571, 0, 0, 438, 439, 304,
	311, 457, 313, 275, 361, 306, 423, 320, 0, 450,
	514, 451, 573, 576, 574, 575, 353, 316, 317, 387,
	321, 331, 375, 422, 359, 380, 273, 413, 388, 335,
	500, 527, 825, 799, 824, 826, 827, 823, 828, 829,
	810, 709, 0, 757, 821, 820, 822, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 554,
	553, 552, 551, 550, 549, 548, 0, 0, 497, 400,
	285, 250, 281, 282, 289, 594, 591, 404, 595, 0,
	255, 477, 329, 0, 370, 303, 542, 543, 788, 764,
	765, 766, 706, 767, 761, 762, 707, 763, 789, 755,
	785, 786, 734, 758, 768, 784, 769, 787, 790, 791,
	830, 831, 775, 759, 222, 832, 772, 792, 783, 782,
	770, 756, 793, 794, 741, 736, 773, 774, 760, 776,
	777, 778, 708, 737, 738, 739, 740, 0, 0, 0,
	429, 430, 431, 453, 415, 476, 592, 0, 0, 0,
	0, 0, 0, 0, 526, 538, 572, 0, 581, 582,
	584, 586, 779, 751, 598, 467, 468, 578, 0, 0,
	0, 0, 358, 0, 482, 515, 504, 587, 470, 0,
	0, 0, 0, 0, 0, 704, 0, 0, 0, 298,
	1696, 0, 328, 519, 501, 511, 502, 487, 488, 489,
	496, 308, 490, 491, 492, 463, 493, 464, 494, 495,
	742, 518, 469, 389, 342, 536, 535, 0, 0, 804,
	812, 0, 0, 0, 0, 0, 0, 0, 1886, 0,
	0, 697, 0, 0, 732, 781, 780, 719, 729, 0,
	0, 271, 197, 465, 583, 466, 720, 0, 721, 725,
	728, 724, 722, 723, 0, 796, 0, 0, 0, 0,
	0, 0, 689, 701, 0, 705, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 698,
	699, 0, 0, 0, 0, 752, 0, 700, 0, 0,
	1887, 726, 730, 0, 0, 0, 0, 261, 394, 411,
	272, 385, 424, 277, 392, 267, 357, 381, 0, 0,
	263, 409, 391, 339, 318, 319, 262, 0, 376, 296,
	310, 293, 355, 727, 750, 754, 292, 818, 748, 419,
	265, 0, 418, 354, 405, 410, 340, 334, 264, 407,
	338, 333, 322, 300, 819, 323, 324, 314, 366, 332,
	367, 315, 344, 343, 345, 0, 0, 0, 0, 0,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 577, 745, 0, 580, 0, 421,
	0, 0, 802, 0, 0, 0, 393, 0, 0, 325,
	0, 0, 0, 749, 0, 379, 360, 815, 0, 0,
	377, 330, 406, 368, 412, 395, 420, 373, 369, 256,
	396, 295, 341, 268, 270, 290, 297, 299, 301, 302,
	350, 351, 363, 384, 397, 398, 399, 294, 278, 378,
	279, 312, 280, 257, 286, 284, 287, 386, 288, 259,
	364, 403, 0, 307, 374, 337, 260, 336, 365, 402,
	401, 269, 428, 434, 435, 523, 0, 440, 601, 602,
	603, 449, 454, 455, 456, 458, 459, 460, 461, 524,
	541, 508, 478, 442, 532, 475, 479, 480, 544, 0,
	0, 0, 433, 326, 327, 0, 305, 253, 254, 597,
	800, 356, 546, 579, 471, 0, 814, 795, 797, 798,
	801, 805, 806, 807, 808, 809, 811, 813, 817, 596,
	0, 525, 540, 599, 539, 593, 362, 0, 383, 537,
	484, 0, 529, 503, 0, 530, 499, 534, 0, 473,
	0, 390, 414, 426, 443, 446, 474, 559, 560, 561,
	258, 445, 563, 564, 565, 566, 567, 568, 569, 562,
	816, 506, 483, 509, 425, 486, 485, 0, 0, 520,
	753, 521, 522, 346, 347, 348, 349, 803, 547, 276,
	444, 372, 0, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 512, 513, 510, 604, 0, 570, 571, 0,
	0, 438, 439, 304, 311, 457, 313, 275, 361, 306,
	423, 320, 0, 450, 514, 451, 573, 576, 574, 575,
	353, 316, 317, 387, 321, 331, 375, 422, 359, 380,
	273, 413, 388, 335, 500, 527, 825, 799, 824, 826,
	827, 823, 828, 829, 810, 709, 0, 757, 821, 820,
	822, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 554, 553, 552, 551, 550, 549, 548,
	0, 0, 497, 400, 285, 250, 281, 282, 289, 594,
	591, 404, 595, 0, 255, 477, 329, 0, 370, 303,
	542, 543, 788, 764, 765, 766, 706, 767, 761, 762,
	707, 763, 789, 755, 785, 786, 734, 758, 768, 784,
	769, 787, 790, 791, 830, 831, 775, 759, 222, 832,
	772, 792, 783, 782, 770, 756, 793, 794, 741, 736,
	773, 774, 760, 776, 777, 778, 708, 737, 738, 739,
	740, 0, 0, 0, 429, 430, 431, 453, 415, 476,
	592, 0, 0, 0, 0, 0, 0, 0, 526, 538,
	572, 0, 581, 582, 584, 586, 779, 0, 598, 467,
	468, 578, 174, 751, 0, 0, 0, 0, 0, 0,
	0, 0, 358, 0, 482, 515, 504, 587, 470, 0,
	0, 0, 0, 0, 0, 704, 0, 0, 0, 298,
	0, 0, 328, 519, 501, 511, 502, 487, 488, 489,
	496, 308, 490, 491, 492, 463, 493, 464, 494, 495,
	1180, 518, 469, 389, 342, 536, 535, 0, 0, 804,
	812, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 697, 0, 0, 732, 781, 780, 719, 729, 0,
	0, 271, 197, 465, 583, 466, 720, 0, 721, 725,
	728, 724, 722, 723, 0, 796, 0, 0, 0, 0,
	0, 0, 689, 701, 0, 705, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 698,
	699, 0, 0, 0, 0, 752, 0, 700, 0, 0,
	747, 726, 730, 0, 0, 0, 0, 261, 394, 411,
	272, 385, 424, 277, 392, 267, 357, 381, 0, 0,
	263, 409, 391, 339, 318, 319, 262, 0, 376, 296,
	310, 293, 355, 727, 750, 754, 292, 818, 748, 419,
	265, 0, 418, 354, 405, 410, 340, 334, 264, 407,
	338, 333, 322, 300, 819, 323, 324, 314, 366, 332,
	367, 315, 344, 343, 345, 0, 0, 0, 0, 0,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 577, 745, 0, 580, 0, 421,
	0, 0, 802, 0, 0, 0, 393, 0, 0, 325,
	0, 0, 0, 749, 0, 379, 360, 815, 0, 0,
	377, 330, 406, 368, 412, 395, 420, 373, 369, 256,
	396, 295, 341, 268, 270, 290, 297, 299, 301, 302,
	350, 351, 363, 384, 397, 398, 399, 294, 278, 378,
	279, 312, 280, 257, 286, 284, 287, 386, 288, 259,
	364, 403, 0, 307, 374, 337, 260, 336, 365, 402,
	401, 269, 428, 434, 435, 523, 0, 440, 601, 602,
	603, 449, 454, 455, 456, 458, 459, 460, 461, 524,
	541, 508, 478, 442, 532, 475, 479, 480, 544, 0,
	0, 0, 433, 326, 327, 0, 305, 253, 254, 597,
	800, 356, 546, 579, 471, 0, 814, 795, 797, 798,
	801, 805, 806, 807, 808, 809, 811, 813, 817, 596,
	0, 525, 540, 599, 539, 593, 362, 0, 383, 537,
	484, 0, 529, 503, 0, 530, 499, 534, 0, 473,
	0, 390, 414, 426, 443, 446, 474, 559, 560, 561,
	258, 445, 563, 564, 565, 566, 567, 568, 569, 562,
	816, 506, 483, 509, 425, 486, 485, 0, 0, 520,
	753, 521, 522, 346, 347, 348, 349, 803, 547, 276,
	444, 372, 0, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 512, 513, 510, 604, 0, 570, 571, 0,
	0, 438, 439, 304, 311, 457, 313, 275, 361, 306,
	423, 320, 0, 450, 514, 451, 573, 576, 574, 575,
	353, 316, 317, 387, 321, 331, 375, 422, 359, 380,
	273, 413, 388, 335, 500, 527, 825, 799, 824, 826,
	827, 823, 828, 829, 810, 709, 0, 757, 821, 820,
	822, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 554, 553, 552, 551, 550, 549, 548,
	0, 0, 497, 400, 285, 250, 281, 282, 289, 594,
	591, 404, 595, 0, 255, 477, 329, 139, 370, 303,
	542, 543, 788, 764, 765, 766, 706, 767, 761, 762,
	707, 763, 789, 755, 785, 786, 734, 758, 768, 784,
	769, 787, 790, 791, 830, 831, 775, 759, 222, 832,
	772, 792, 783, 782, 770, 756, 793, 794, 741, 736,
	773, 774, 760, 776, 777, 778, 708, 737, 738, 739,
	740, 0, 0, 0, 429, 430, 431, 453, 415, 476,
	592, 0, 0, 0, 0, 0, 0, 0, 526, 538,
	572, 0, 581, 582, 584, 586, 779, 751, 598, 467,
	468, 578, 0, 0, 0, 0, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 704,
	0, 0, 0, 298, 3672, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 742, 518, 469, 389, 342, 536,
	535, 0, 0, 804, 812, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 697, 0, 0, 732, 781,
	780, 719, 729, 0, 0, 271, 197, 465, 583, 466,
	720, 0, 721, 725, 728, 724, 722, 723, 0, 796,
	0, 0, 0, 0, 0, 0, 689, 701, 0, 705,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 698, 699, 0, 0, 0, 0, 752,
	0, 700, 0, 0, 747, 726, 730, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 727, 750, 754,
	292, 818, 748, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 819, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 745,
	0, 580, 0, 421, 0, 0, 802, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 749, 0, 379,
	360, 815, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 800, 356, 546, 579, 471, 0,
	814, 795, 797, 798, 801, 805, 806, 807, 808, 809,
	811, 813, 817, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 816, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 753, 521, 522, 346, 347, 348,
	349, 803, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	825, 799, 824, 826, 827, 823, 828, 829, 810, 709,
	0, 757, 821, 820, 822, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 788, 764, 765, 766,
	706, 767, 761, 762, 707, 763, 789, 755, 785, 786,
	734, 758, 768, 784, 769, 787, 790, 791, 830, 831,
	775, 759, 222, 832, 772, 792, 783, 782, 770, 756,
	793, 794, 741, 736, 773, 774, 760, 776, 777, 778,
	708, 737, 738, 739, 740, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	779, 751, 598, 467, 468, 578, 0, 0, 0, 0,
	358, 0, 482, 515, 504, 587, 470, 0, 0, 0,
	0, 0, 0, 704, 0, 0, 0, 298, 0, 0,
	328, 519, 501, 511, 502, 487, 488, 489, 496, 308,
	490, 491, 492, 463, 493, 464, 494, 495, 742, 518,
	469, 389, 342, 536, 535, 0, 0, 804, 812, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 697,
	0, 0, 732, 781, 780, 719, 729, 0, 0, 271,
	197, 465, 583, 466, 720, 0, 721, 725, 728, 724,
	722, 723, 0, 796, 0, 0, 0, 0, 0, 0,
	689, 701, 0, 705, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 698, 699, 0,
	0, 0, 0, 752, 0, 700, 0, 0, 747, 726,
	730, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 727, 750, 754, 292, 818, 748, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 819, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 745, 0, 580, 0, 421, 0, 0,
	802, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 749, 0, 379, 360, 815, 3568, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 523, 0, 440, 601, 602, 603, 449,
	454, 455, 456, 458, 459, 460, 461, 524, 541, 508,
	478, 442, 532, 475, 479, 480, 544, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 597, 800, 356,
	546, 579, 471, 0, 814, 795, 797, 798, 801, 805,
	806, 807, 808, 809, 811, 813, 817, 596, 0, 525,
	540, 599, 539, 593, 362, 0, 383, 537, 484, 0,
	529, 503, 0, 530, 499, 534, 0, 473, 0, 390,
	414, 426, 443, 446, 474, 559, 560, 561, 258, 445,
	563, 564, 565, 566, 567, 568, 569, 562, 816, 506,
	483, 509, 425, 486, 485, 0, 0, 520, 753, 521,
	522, 346, 347, 348, 349, 803, 547, 276, 444, 372,
	0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 510, 604, 0, 570, 571, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 514, 451, 573, 576, 574, 575, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 500, 527, 825, 799, 824, 826, 827, 823,
	828, 829, 810, 709, 0, 757, 821, 820, 822, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 554, 553, 552, 551, 550, 549, 548, 0, 0,
	497, 400, 285, 250, 281, 282, 289, 594, 591, 404,
	595, 0, 255, 477, 329, 0, 370, 303, 542, 543,
	788, 764, 765, 766, 706, 767, 761, 762, 707, 763,
	789, 755, 785, 786, 734, 758, 768, 784, 769, 787,
	790, 791, 830, 831, 775, 759, 222, 832, 772, 792,
	783, 782, 770, 756, 793, 794, 741, 736, 773, 774,
	760, 776, 777, 778, 708, 737, 738, 739, 740, 0,
	0, 0, 429, 430, 431, 453, 415, 476, 592, 0,
	0, 0, 0, 0, 0, 0, 526, 538, 572, 0,
	581, 582, 584, 586, 779, 751, 598, 467, 468, 578,
	0, 0, 0, 0, 358, 0, 482, 515, 504, 587,
	470, 0, 0, 0, 0, 0, 0, 704, 0, 0,
	0, 298, 1696, 0, 328, 519, 501, 511, 502, 487,
	488, 489, 496, 308, 490, 491, 492, 463, 493, 464,
	494, 495, 742, 518, 469, 389, 342, 536, 535, 0,
	0, 804, 812, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 697, 0, 0, 732, 781, 780, 719,
	729, 0, 0, 271, 197, 465, 583, 466, 720, 0,
	721, 725, 728, 724, 722, 723, 0, 796, 0, 0,
	0, 0, 0, 0, 689, 701, 0, 705, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 698, 699, 0, 0, 0, 0, 752, 0, 700,
	0, 0, 747, 726, 730, 0, 0, 0, 0, 261,
	394, 411, 272, 385, 424, 277, 392, 267, 357, 381,
	0, 0, 263, 409, 391, 339, 318, 319, 262, 0,
	376, 296, 310, 293, 355, 727, 750, 754, 292, 818,
	748, 419, 265, 0, 418, 354, 405, 410, 340, 334,
	264, 407, 338, 333, 322, 300, 819, 323, 324, 314,
	366, 332, 367, 315, 344, 343, 345, 0, 0, 0,
	0, 0, 447, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 577, 745, 0, 580,
	0, 421, 0, 0, 802, 0, 0, 0, 393, 0,
	0, 325, 0, 0, 0, 749, 0, 379, 360, 815,
	0, 0, 377, 330, 406, 368, 412, 395, 420, 373,
	369, 256, 396, 295, 341, 268, 270, 290, 297, 299,
	301, 302, 350, 351, 363, 384, 397, 398, 399, 294,
	278, 378, 279, 312, 280, 257, 286, 284, 287, 386,
	288, 259, 364, 403, 0, 307, 374, 337, 260, 336,
	365, 402, 401, 269, 428, 434, 435, 523, 0, 440,
	601, 602, 603, 449, 454, 455, 456, 458, 459, 460,
	461, 524, 541, 508, 478, 442, 532, 475, 479, 480,
	544, 0, 0, 0, 433, 326, 327, 0, 305, 253,
	254, 597, 800, 356, 546, 579, 471, 0, 814, 795,
	797, 798, 801, 805, 806, 807, 808, 809, 811, 813,
	817, 596, 0, 525, 540, 599, 539, 593, 362, 0,
	383, 537, 484, 0, 529, 503, 0, 530, 499, 534,
	0, 473, 0, 390, 414, 426, 443, 446, 474, 559,
	560, 561, 258, 445, 563, 564, 565, 566, 567, 568,
	569, 562, 816, 506, 483, 509, 425, 486, 485, 0,
	0, 520, 753, 521, 522, 346, 347, 348, 349, 803,
	547, 276, 444, 372, 0, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 512, 513, 510, 604, 0, 570,
	571, 0, 0, 438, 439, 304, 311, 457, 313, 275,
	361, 306, 423, 320, 0, 450, 514, 451, 573, 576,
	574, 575, 353, 316, 317, 387, 321, 331, 375, 422,
	359, 380, 273, 413, 388, 335, 500, 527, 825, 799,
	824, 826, 827, 823, 828, 829, 810, 709, 0, 757,
	821, 820, 822, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 554, 553, 552, 551, 550,
	549, 548, 0, 0, 497, 400, 285, 250, 281, 282,
	289, 594, 591, 404, 595, 0, 255, 477, 329, 0,
	370, 303, 542, 543, 788, 764, 765, 766, 706, 767,
	761, 762, 707, 763, 789, 755, 785, 786, 734, 758,
	768, 784, 769, 787, 790, 791, 830, 831, 775, 759,
	222, 832, 772, 792, 783, 782, 770, 756, 793, 794,
	741, 736, 773, 774, 760, 776, 777, 778, 708, 737,
	738, 739, 740, 0, 0, 0, 429, 430, 431, 453,
	415, 476, 592, 0, 0, 0, 0, 0, 0, 0,
	526, 538, 572, 0, 581, 582, 584, 586, 779, 751,
	598, 467, 468, 578, 0, 0, 0, 0, 358, 0,
	482, 515, 504, 587, 470, 0, 0, 0, 0, 0,
	0, 704, 0, 0, 0, 298, 0, 0, 328, 519,
	501, 511, 502, 487, 488, 489, 496, 308, 490, 491,
	492, 463, 493, 464, 494, 495, 742, 518, 469, 389,
	342, 536, 535, 0, 0, 804, 812, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 697, 0, 0,
	732, 781, 780, 719, 729, 0, 0, 271, 197, 465,
	583, 466, 720, 0, 721, 725, 728, 724, 722, 723,
	0, 796, 0, 0, 0, 0, 0, 0, 689, 701,
	0, 705, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 698, 699, 1435, 0, 0,
	0, 752, 0, 700, 0, 0, 747, 726, 730, 0,
	0, 0, 0, 261, 394, 411, 272, 385, 424, 277,
	392, 267, 357, 381, 0, 0, 263, 409, 391, 339,
	318, 319, 262, 0, 376, 296, 310, 293, 355, 727,
	750, 754, 292, 818, 748, 419, 265, 0, 418, 354,
	405, 410, 340, 334, 264, 407, 338, 333, 322, 300,
	819, 323, 324, 314, 366, 332, 367, 315, 344, 343,
	345, 0, 0, 0, 0, 0, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	577, 745, 0, 580, 0, 421, 0, 0, 802, 0,
	0, 0, 393, 0, 0, 325, 0, 0, 0, 749,
	0, 379, 360, 815, 0, 0, 377, 330, 406, 368,
	412, 395, 420, 373, 369, 256, 396, 295, 341, 268,
	270, 290, 297, 299, 301, 302, 350, 351, 363, 384,
	397, 398, 399, 294, 278, 378, 279, 312, 280, 257,
	286, 284, 287, 386, 288, 259, 364, 403, 0, 307,
	374, 337, 260, 336, 365, 402, 401, 269, 428, 434,
	435, 523, 0, 440, 601, 602, 603, 449, 454, 455,
	456, 458, 459, 460, 461, 524, 541, 508, 478, 442,
	532, 475, 479, 480, 544, 0, 0, 0, 433, 326,
	327, 0, 305, 253, 254, 597, 800, 356, 546, 579,
	471, 0, 814, 795, 797, 798, 801, 805, 806, 807,
	808, 809, 811, 813, 817, 596, 0, 525, 540, 599,
	539, 593, 362, 0, 383, 537, 484, 0, 529, 503,
	0, 530, 499, 534, 0, 473, 0, 390, 414, 426,
	443, 446, 474, 559, 560, 561, 258, 445, 563, 564,
	565, 566, 567, 568, 569, 562, 816, 506, 483, 509,
	425, 486, 485, 0, 0, 520, 753, 521, 522, 346,
	347, 348, 349, 803, 547, 276, 444, 372, 0, 507,
	0, 0, 0, 0, 0, 0, 0, 0, 512, 513,
	510, 604, 0, 570, 571, 0, 0, 438, 439, 304,
	311, 457, 313, 275, 361, 306, 423, 320, 0, 450,
	514, 451, 573, 576, 574, 575, 353, 316, 317, 387,
	321, 331, 375, 422, 359, 380, 273, 413, 388, 335,
	500, 527, 825, 799, 824, 826, 827, 823, 828, 829,
	810, 709, 0, 757, 821, 820, 822, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 554,
	553, 552, 551, 550, 549, 548, 0, 0, 497, 400,
	285, 250, 281, 282, 289, 594, 591, 404, 595, 0,
	255, 477, 329, 0, 370, 303, 542, 543, 788, 764,
	765, 766, 706, 767, 761, 762, 707, 763, 789, 755,
	785, 786, 734, 758, 768, 784, 769, 787, 790, 791,
	830, 831, 775, 759, 222, 832, 772, 792, 783, 782,
	770, 756, 793, 794, 741, 736, 773, 774, 760, 776,
	777, 778, 708, 737, 738, 739, 740, 0, 0, 0,
	429, 430, 431, 453, 415, 476, 592, 0, 0, 0,
	0, 0, 0, 0, 526, 538, 572, 0, 581, 582,
	584, 586, 779, 0, 598, 467, 468, 578, 751, 0,
	0, 2050, 0, 0, 0, 0, 0, 358, 0, 482,
	515, 504, 587, 470, 0, 0, 0, 0, 0, 0,
	704, 0, 0, 0, 298, 0, 0, 328, 519, 501,
	511, 502, 487, 488, 489, 496, 308, 490, 491, 492,
	463, 493, 464, 494, 495, 742, 518, 469, 389, 342,
	536, 535, 0, 0, 804, 812, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 697, 0, 0, 732,
	781, 780, 719, 729, 0, 0, 271, 197, 465, 583,
	466, 720, 0, 721, 725, 728, 724, 722, 723, 0,
	796, 0, 0, 0, 0, 0, 0, 689, 701, 0,
	705, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 698, 699, 0, 0, 0, 0,
	752, 0, 700, 0, 0, 747, 726, 730, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 727, 750,
	754, 292, 818, 748, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 819,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	745, 0, 580, 0, 421, 0, 0, 802, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 749, 0,
	379, 360, 815, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	523, 0, 440, 601, 602, 603, 449, 454, 455, 456,
	458, 459, 460, 461, 524, 541, 508, 478, 442, 532,
	475, 479, 480, 544, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 597, 800, 356, 546, 579, 471,
	0, 814, 795, 797, 798, 801, 805, 806, 807, 808,
	809, 811, 813, 817, 596, 0, 525, 540, 599, 539,
	593, 362, 0, 383, 537, 484, 0, 529, 503, 0,
	530, 499, 534, 0, 473, 0, 390, 414, 426, 443,
	446, 474, 559, 560, 561, 258, 445, 563, 564, 565,
	566, 567, 568, 569, 562, 816, 506, 483, 509, 425,
	486, 485, 0, 0, 520, 753, 521, 522, 346, 347,
	348, 349, 803, 547, 276, 444, 372, 0, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 512, 513, 510,
	604, 0, 570, 571, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 514,
	451, 573, 576, 574, 575, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 500,
	527, 825, 799, 824, 826, 827, 823, 828, 829, 810,
	709, 0, 757, 821, 820, 822, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 554, 553,
	552, 551, 550, 549, 548, 0, 0, 497, 400, 285,
	250, 281, 282, 289, 594, 591, 404, 595, 0, 255,
	477, 329, 0, 370, 303, 542, 543, 788, 764, 765,
	766, 706, 767, 761, 762, 707, 763, 789, 755, 785,
	786, 734, 758, 768, 784, 769, 787, 790, 791, 830,
	831, 775, 759, 222, 832, 772, 792, 783, 782, 770,
	756, 793, 794, 741, 736, 773, 774, 760, 776, 777,
	778, 708, 737, 738, 739, 740, 0, 0, 0, 429,
	430, 431, 453, 415, 476, 592, 0, 0, 0, 0,
	0, 0, 0, 526, 538, 572, 0, 581, 582, 584,
	586, 779, 751, 598, 467, 468, 578, 0, 0, 0,
	0, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 704, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 742,
	518, 469, 389, 342, 536, 535, 0, 0, 804, 812,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	697, 0, 0, 732, 781, 780, 719, 729, 0, 0,
	271, 197, 465, 583, 466, 720, 0, 721, 725, 728,
	724, 722, 723, 0, 796, 0, 0, 0, 0, 0,
	0, 689, 701, 0, 705, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 698, 699,
	1689, 0, 0, 0, 752, 0, 700, 0, 0, 747,
	726, 730, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 727, 750, 754, 292, 818, 748, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 819, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 745, 0, 580, 0, 421, 0,
	0, 802, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 749, 0, 379, 360, 815, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 800,
	356, 546, 579, 471, 0, 814, 795, 797, 798, 801,
	805, 806, 807, 808, 809, 811, 813, 817, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 816,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 753,
	521, 522, 346, 347, 348, 349, 803, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 825, 799, 824, 826, 827,
	823, 828, 829, 810, 709, 0, 757, 821, 820, 822,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 788, 764, 765, 766, 706, 767, 761, 762, 707,
	763, 789, 755, 785, 786, 734, 758, 768, 784, 769,
	787, 790, 791, 830, 831, 775, 759, 222, 832, 772,
	792, 783, 782, 770, 756, 793, 794, 741, 736, 773,
	774, 760, 776, 777, 778, 708, 737, 738, 739, 740,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 779, 751, 598, 467, 468,
	578, 0, 0, 0, 0, 358, 0, 482, 515, 504,
	587, 470, 0, 0, 0, 0, 0, 0, 704, 0,
	0, 0, 298, 0, 0, 328, 519, 501, 511, 502,
	487, 488, 489, 496, 308, 490, 491, 492, 463, 493,
	464, 494, 495, 742, 518, 469, 389, 342, 536, 535,
	0, 0, 804, 812, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 697, 0, 0, 732, 781, 780,
	719, 729, 0, 0, 271, 197, 465, 583, 466, 720,
	0, 721, 725, 728, 724, 722, 723, 0, 796, 0,
	0, 0, 0, 0, 0, 689, 701, 0, 705, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 698, 699, 0, 0, 0, 0, 752, 0,
	700, 0, 0, 747, 726, 730, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 727, 750, 754, 292,
	818, 748, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 819, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 745, 0,
	580, 0, 421, 0, 0, 802, 0, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 749, 0, 379, 360,
	815, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 523, 0,
	440, 601, 602, 603, 449, 454, 455, 456, 458, 459,
	460, 461, 524, 541, 508, 478, 442, 532, 475, 479,
	480, 544, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 597, 800, 356, 546, 579, 471, 0, 814,
	795, 797, 798, 801, 805, 806, 807, 808, 809, 811,
	813, 817, 596, 0, 525, 540, 599, 539, 593, 362,
	0, 383, 537, 484, 0, 529, 503, 0, 530, 499,
	534, 0, 473, 0, 390, 414, 426, 443, 446, 474,
	559, 560, 561, 258, 445, 563, 564, 565, 566, 567,
	568, 569, 562, 816, 506, 483, 509, 425, 486, 485,
	0, 0, 520, 753, 521, 522, 346, 347, 348, 349,
	803, 547, 276, 444, 372, 0, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 512, 513, 510, 604, 0,
	570, 571, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 514, 451, 573,
	576, 574, 575, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 500, 527, 825,
	799, 824, 826, 827, 823, 828, 829, 810, 709, 0,
	757, 821, 820, 822, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 554, 553, 552, 551,
	550, 549, 548, 0, 0, 497, 400, 285, 250, 281,
	282, 289, 594, 591, 404, 595, 0, 255, 477, 329,
	0, 370, 303, 542, 543, 788, 764, 765, 766, 706,
	767, 761, 762, 707, 763, 789, 755, 785, 786, 734,
	758, 768, 784, 769, 787, 790, 791, 830, 831, 775,
	759, 222, 832, 772, 792, 783, 782, 770, 756, 793,
	794, 741, 736, 773, 774, 760, 776, 777, 778, 708,
	737, 738, 739, 740, 0, 0, 0, 429, 430, 431,
	453, 415, 476, 592, 0, 0, 0, 0, 0, 0,
	0, 526, 538, 572, 0, 581, 582, 584, 586, 779,
	751, 598, 467, 468, 578, 0, 0, 0, 0, 358,
	0, 482, 515, 504, 587, 470, 0, 0, 0, 0,
	0, 0, 704, 0, 0, 0, 298, 0, 0, 328,
	519, 501, 511, 502, 487, 488, 489, 496, 308, 490,
	491, 492, 463, 493, 464, 494, 495, 742, 518, 469,
	389, 342, 536, 535, 0, 0, 804, 812, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 697, 0,
	0, 732, 781, 780, 719, 729, 0, 0, 271, 197,
	465, 583, 466, 2480, 0, 2481, 725, 728, 724, 722,
	723, 0, 796, 0, 0, 0, 0, 0, 0, 689,
	701, 0, 705, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 698, 699, 0, 0,
	0, 0, 752, 0, 700, 0, 0, 747, 726, 730,
	0, 0, 0, 0, 261, 394, 411, 272, 385, 424,
	277, 392, 267, 357, 381, 0, 0, 263, 409, 391,
	339, 318, 319, 262, 0, 376, 296, 310, 293, 355,
	727, 750, 754, 292, 818, 748, 419, 265, 0, 418,
	354, 405, 410, 340, 334, 264, 407, 338, 333, 322,
	300, 819, 323, 324, 314, 366, 332, 367, 315, 344,
	343, 345, 0, 0, 0, 0, 0, 447, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 577, 745, 0, 580, 0, 421, 0, 0, 802,
	0, 0, 0, 393, 0, 0, 325, 0, 0, 0,
	749, 0, 379, 360, 815, 0, 0, 377, 330, 406,
	368, 412, 395, 420, 373, 369, 256, 396, 295, 341,
	268, 270, 290, 297, 299, 301, 302, 350, 351, 363,
	384, 397, 398, 399, 294, 278, 378, 279, 312, 280,
	257, 286, 284, 287, 386, 288, 259, 364, 403, 0,
	307, 374, 337, 260, 336, 365, 402, 401, 269, 428,
	434, 435, 523, 0, 440, 601, 602, 603, 449, 454,
	455, 456, 458, 459, 460, 461, 524, 541, 508, 478,
	442, 532, 475, 479, 480, 544, 0, 0, 0, 433,
	326, 327, 0, 305, 253, 254, 597, 800, 356, 546,
	579, 471, 0, 814, 795, 797, 798, 801, 805, 806,
	807, 808, 809, 811, 813, 817, 596, 0, 525, 540,
	599, 539, 593, 362, 0, 383, 537, 484, 0, 529,
	503, 0, 530, 499, 534, 0, 473, 0, 390, 414,
	426, 443, 446, 474, 559, 560, 561, 258, 445, 563,
	564, 565, 566, 567, 568, 569, 562, 816, 506, 483,
	509, 425, 486, 485, 0, 0, 520, 753, 521, 522,
	346, 347, 348, 349, 803, 547, 276, 444, 372, 0,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 512,
	513, 510, 604, 0, 570, 571, 0, 0, 438, 439,
	304, 311, 457, 313, 275, 361, 306, 423, 320, 0,
	450, 514, 451, 573, 576, 574, 575, 353, 316, 317,
	387, 321, 331, 375, 422, 359, 380, 273, 413, 388,
	335, 500, 527, 825, 799, 824, 826, 827, 823, 828,
	829, 810, 709, 0, 757, 821, 820, 822, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	554, 553, 552, 551, 550, 549, 548, 0, 0, 497,
	400, 285, 250, 281, 282, 289, 594, 591, 404, 595,
	0, 255, 477, 329, 0, 370, 303, 542, 543, 788,
	764, 765, 766, 706, 767, 761, 762, 707, 763, 789,
	755, 785, 786, 734, 758, 768, 784, 769, 787, 790,
	791, 830, 831, 775, 759, 222, 832, 772, 792, 783,
	782, 770, 756, 793, 794, 741, 736, 773, 774, 760,
	776, 777, 778, 708, 737, 738, 739, 740, 0, 0,
	0, 429, 430, 431, 453, 415, 476, 592, 0, 0,
	0, 0, 0, 0, 0, 526, 538, 572, 0, 581,
	582, 584, 586, 779, 751, 598, 467, 468, 578, 0,
	0, 0, 0, 358, 0, 482, 515, 504, 587, 470,
	0, 0, 1568, 0, 0, 0, 704, 0, 0, 0,
	298, 0, 0, 328, 519, 501, 511, 502, 487, 488,
	489, 496, 308, 490, 491, 492, 463, 493, 464, 494,
	495, 742, 518, 469, 389, 342, 536, 535, 0, 0,
	804, 812, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 697, 0, 0, 732, 781, 780, 719, 729,
	0, 0, 271, 197, 465, 583, 466, 720, 0, 721,
	725, 728, 724, 722, 723, 0, 796, 0, 0, 0,
	0, 0, 0, 0, 701, 0, 705, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	698, 699, 0, 0, 0, 0, 752, 0, 700, 0,
	0, 747, 726, 730, 0, 0, 0, 0, 261, 394,
	411, 272, 385, 424, 277, 392, 267, 357, 381, 0,
	0, 263, 409, 391, 339, 318, 319, 262, 0, 376,
	296, 310, 293, 355, 727, 750, 754, 292, 818, 748,
	419, 265, 0, 418, 354, 405, 410, 340, 334, 264,
	407, 338, 333, 322, 300, 819, 323, 324, 314, 366,
	332, 367, 315, 344, 343, 345, 0, 0, 0, 0,
	0, 447, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 577, 745, 0, 580, 0,
	421, 0, 0, 802, 0, 0, 0, 393, 0, 0,
	325, 0, 0, 0, 749, 0, 379, 360, 815, 0,
	0, 377, 330, 406, 368, 412, 395, 420, 373, 369,
	256, 396, 295, 341, 268, 270, 290, 297, 299, 301,
	302, 350, 351, 363, 384, 397, 398, 399, 294, 278,
	378, 279, 312, 280, 257, 286, 284, 287, 386, 288,
	259, 364, 403, 0, 307, 374, 337, 260, 336, 365,
	402, 401, 269, 428, 1569, 1570, 523, 0, 440, 601,
	602, 603, 449, 454, 455, 456, 458, 459, 460, 461,
	524, 541, 508, 478, 442, 532, 475, 479, 480, 544,
	0, 0, 0, 433, 326, 327, 0, 305, 253, 254,
	597, 800, 356, 546, 579, 471, 0, 814, 795, 797,
	798, 801, 805, 806, 807, 808, 809, 811, 813, 817,
	596, 0, 525, 540, 599, 539, 593, 362, 0, 383,
	537, 484, 0, 529, 503, 0, 530, 499, 534, 0,
	473, 0, 390, 414, 426, 443, 446, 474, 559, 560,
	561, 258, 445, 563, 564, 565, 566, 567, 568, 569,
	562, 816, 506, 483, 509, 425, 486, 485, 0, 0,
	520, 753, 521, 522, 346, 347, 348, 349, 803, 547,
	276, 444, 372, 0, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 512, 513, 510, 604, 0, 570, 571,
	0, 0, 438, 439, 304, 311, 457, 313, 275, 361,
	306, 423, 320, 0, 450, 514, 451, 573, 576, 574,
	575, 353, 316, 317, 387, 321, 331, 375, 422, 359,
	380, 273, 413, 388, 335, 500, 527, 825, 799, 824,
	826, 827, 823, 828, 829, 810, 709, 0, 757, 821,
	820, 822, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 554, 553, 552, 551, 550, 549,
	548, 0, 0, 497, 400, 285, 250, 281, 282, 289,
	594, 591, 404, 595, 0, 255, 477, 329, 0, 370,
	303, 542, 543, 788, 764, 765, 766, 706, 767, 761,
	762, 707, 763, 789, 755, 785, 786, 734, 758, 768,
	784, 769, 787, 790, 791, 830, 831, 775, 759, 222,
	832, 772, 792, 783, 782, 770, 756, 793, 794, 741,
	736, 773, 774, 760, 776, 777, 778, 708, 737, 738,
	739, 740, 0, 0, 0, 429, 430, 431, 453, 415,
	476, 592, 0, 0, 0, 0, 0, 0, 0, 526,
	538, 572, 0, 581, 582, 584, 586, 779, 751, 598,
	467, 468, 578, 0, 0, 0, 0, 358, 0, 482,
	515, 504, 587, 470, 0, 0, 0, 0, 0, 0,
	704, 0, 0, 0, 298, 0, 0, 328, 519, 501,
	511, 502, 487, 488, 489, 496, 308, 490, 491, 492,
	463, 493, 464, 494, 495, 742, 518, 469, 389, 342,
	536, 535, 0, 0, 804, 812, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 697, 0, 0, 732,
	781, 780, 719, 729, 0, 0, 271, 197, 465, 583,
	466, 720, 0, 721, 725, 728, 724, 722, 723, 0,
	796, 0, 0, 0, 0, 0, 0, 0, 701, 0,
	705, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 698, 699, 0, 0, 0, 0,
	752, 0, 700, 0, 0, 747, 726, 730, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 727, 750,
	754, 292, 818, 748, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 819,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	745, 0, 580, 0, 421, 0, 0, 802, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 749, 0,
	379, 360, 815, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	523, 0, 440, 601, 602, 603, 449, 454, 455, 456,
	458, 459, 460, 461, 524, 541, 508, 478, 442, 532,
	475, 479, 480, 544, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 597, 800, 356, 546, 579, 471,
	0, 814, 795, 797, 798, 801, 805, 806, 807, 808,
	809, 811, 813, 817, 596, 0, 525, 540, 599, 539,
	593, 362, 0, 383, 537, 484, 0, 529, 503, 0,
	530, 499, 534, 0, 473, 0, 390, 414, 426, 443,
	446, 474, 559, 560, 561, 258, 445, 563, 564, 565,
	566, 567, 568, 569, 562, 816, 506, 483, 509, 425,
	486, 485, 0, 0, 520, 753, 521, 522, 346, 347,
	348, 349, 803, 547, 276, 444, 372, 0, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 512, 513, 510,
	604, 0, 570, 571, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 514,
	451, 573, 576, 574, 575, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 500,
	527, 825, 799, 824, 826, 827, 823, 828, 829, 810,
	709, 0, 757, 821, 820, 822, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 554, 553,
	552, 551, 550, 549, 548, 0, 0, 497, 400, 285,
	250, 281, 282, 289, 594, 591, 404, 595, 0, 255,
	477, 329, 0, 370, 303, 542, 543, 788, 764, 765,
	766, 706, 767, 761, 762, 707, 763, 789, 755, 785,
	786, 734, 758, 768, 784, 769, 787, 790, 791, 830,
	831, 775, 759, 222, 832, 772, 792, 783, 782, 770,
	756, 793, 794, 741, 736, 773, 774, 760, 776, 777,
	778, 708, 737, 738, 739, 740, 0, 0, 0, 429,
	430, 431, 453, 415, 476, 592, 0, 0, 0, 0,
	0, 0, 0, 526, 538, 572, 0, 581, 582, 584,
	586, 779, 751, 598, 467, 468, 578, 0, 0, 0,
	0, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 704, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 742,
	518, 469, 389, 342, 536, 535, 0, 0, 804, 812,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 732, 781, 780, 719, 729, 0, 0,
	271, 197, 465, 583, 466, 720, 0, 721, 725, 728,
	724, 722, 723, 0, 796, 0, 0, 0, 0, 0,
	0, 689, 701, 0, 705, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 698, 699,
	0, 0, 0, 0, 752, 0, 700, 0, 0, 747,
	726, 730, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 727, 750, 754, 292, 818, 748, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 819, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 745, 0, 580, 0, 421, 0,
	0, 802, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 749, 0, 379, 360, 815, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 800,
	356, 546, 579, 471, 0, 814, 795, 797, 798, 801,
	805, 806, 807, 808, 809, 811, 813, 817, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 816,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 753,
	521, 522, 346, 347, 348, 349, 803, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 825, 799, 824, 826, 827,
	823, 828, 829, 810, 709, 0, 757, 821, 820, 822,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 788, 764, 765, 766, 706, 767, 761, 762, 707,
	763, 789, 755, 785, 786, 734, 758, 768, 784, 769,
	787, 790, 791, 830, 831, 775, 759, 222, 832, 772,
	792, 783, 782, 770, 756, 793, 794, 741, 736, 773,
	774, 760, 776, 777, 778, 708, 737, 738, 739, 740,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 779, 0, 598, 467, 468,
	578, 174, 51, 163, 138, 0, 0, 0, 0, 0,
	0, 358, 0, 482, 515, 504, 587, 470, 0, 164,
	0, 0, 0, 0, 0, 0, 156, 0, 298, 0,
	165, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 115,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 0,
	168, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 137, 162, 172,
	0, 101, 0, 577, 0, 0, 580, 0, 421, 0,
	0, 189, 0, 0, 0, 393, 0, 0, 325, 161,
	155, 154, 437, 0, 379, 360, 201, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 556, 557, 558,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 416, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 192, 528, 531, 462, 202, 0,
	525, 540, 498, 539, 203, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 113, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 200, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 52, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 371, 266,
	404, 382, 0, 255, 477, 329, 139, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 204,
	39, 190, 193, 195, 194, 0, 49, 526, 538, 572,
	5, 581, 582, 584, 586, 585, 118, 205, 467, 468,
	578, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 115,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	168, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 2179, 2182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 2183, 421, 0,
	0, 0, 2178, 0, 2177, 393, 2175, 2180, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 2181, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 139, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1214, 0, 0, 196, 0, 0, 719, 729, 0, 0,
	271, 197, 465, 583, 466, 720, 0, 721, 725, 728,
	724, 722, 723, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	726, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 727, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 174, 51, 163, 138, 0, 0, 0, 0, 0,
	0, 358, 621, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 0, 0,
	626, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 625, 0, 577, 0, 0, 580, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 622, 624, 276, 444,
	372, 635, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 52, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 139, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 2179, 2182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 2183, 421, 0,
	0, 0, 2178, 0, 2177, 393, 2175, 2180, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 2181, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 358, 0, 482, 515, 504, 587, 470, 0, 1035,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1021,
	0, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 2328,
	2331, 2332, 2333, 2334, 2335, 2336, 0, 2341, 2337, 2338,
	2339, 2340, 0, 2323, 2324, 2325, 2326, 1019, 2307, 2329,
	0, 2308, 354, 2309, 2310, 2311, 2312, 2313, 2314, 2315,
	2316, 2317, 2320, 2321, 2318, 2319, 2327, 366, 332, 367,
	315, 344, 343, 345, 1046, 1048, 1050, 1052, 1055, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 2322, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 2330, 329, 0, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 2200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 2199, 421, 0,
	0, 0, 2205, 2202, 2204, 393, 0, 2203, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 2197, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 2200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 2199, 421, 0,
	0, 0, 2205, 2202, 2204, 393, 0, 2203, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 1926, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 1927, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 1146, 1147, 1148,
	1145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 174, 598, 467, 468,
	578, 0, 0, 0, 0, 0, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 115, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 168, 1972, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 139, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 174, 598, 467, 468, 578, 0, 0, 0, 0,
	0, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 115,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	168, 1961, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 569, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 441,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 139, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 0, 598, 467, 468,
	578, 358, 0, 482, 515, 504, 587, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 952,
	0, 328, 519, 501, 511, 502, 487, 488, 489, 496,
	308, 490, 491, 492, 463, 493, 464, 494, 495, 0,
	518, 469, 389, 342, 536, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 959, 960, 0, 0, 0, 0,
	271, 197, 465, 583, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 394, 947, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 937, 419, 265,
	936, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 580, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 600, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 950, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 523, 0, 440, 601, 602, 603,
	449, 454, 455, 456, 458, 459, 460, 461, 524, 541,
	508, 478, 442, 532, 475, 479, 480, 544, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 597, 291,
	356, 546, 579, 471, 0, 533, 472, 481, 283, 505,
	517, 516, 352, 432, 0, 528, 531, 462, 596, 0,
	525, 540, 599, 539, 593, 362, 0, 383, 537, 484,
	0, 529, 503, 0, 530, 499, 534, 0, 473, 0,
	390, 414, 426, 443, 446, 474, 559, 560, 561, 258,
	445, 563, 564, 565, 566, 567, 568, 951, 562, 417,
	506, 483, 509, 425, 486, 485, 0, 0, 520, 954,
	521, 522, 346, 347, 348, 349, 309, 547, 276, 444,
	372, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 513, 510, 604, 0, 570, 571, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 514, 451, 573, 576, 574, 575, 961,
	948, 957, 949, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 958, 500, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 554, 553, 552, 551, 550, 549, 548, 0,
	0, 497, 400, 285, 250, 281, 282, 289, 594, 591,
	404, 595, 0, 255, 477, 329, 0, 370, 303, 542,
	543, 206, 207, 208, 209, 210, 211, 212, 213, 251,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 545, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 252, 246, 247, 248, 249,
	0, 0, 0, 429, 430, 431, 453, 415, 476, 592,
	0, 0, 0, 0, 0, 0, 0, 526, 538, 572,
	0, 581, 582, 584, 586, 585, 174, 598, 467, 468,
	578, 0, 0, 0, 0, 0, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 115, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1860, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 139, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 959,
	960, 0, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 937, 419, 265, 936, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 961, 1879, 957, 1880, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 958, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 2679, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 2682, 0, 0, 2681, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 1402, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 1400, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1398, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 1396, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 1400, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1398, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3627, 0, 196, 781,
	0, 0, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 1400, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1398, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 1400, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3254, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 2271, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 2273, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 2292, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 1400, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 781,
	0, 0, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3606, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 3396, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 3519, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3250, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3411, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 3339, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 2894, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2911, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1860, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3008, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 2863, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2776, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 1400, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 2273, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 2604, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1992, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2350, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 0, 598, 467, 468, 578, 358, 0, 482, 515,
	504, 587, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 328, 519, 501, 511,
	502, 487, 488, 489, 496, 308, 490, 491, 492, 463,
	493, 464, 494, 495, 0, 518, 469, 389, 342, 536,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 2348, 0, 0, 0, 271, 197, 465, 583, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 0, 408, 436,
	292, 427, 0, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 452, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 580, 0, 421, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 437, 0, 379,
	360, 600, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 523,
	0, 440, 601, 602, 603, 449, 454, 455, 456, 458,
	459, 460, 461, 524, 541, 508, 478, 442, 532, 475,
	479, 480, 544, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 597, 291, 356, 546, 579, 471, 0,
	533, 472, 481, 283, 505, 517, 516, 352, 432, 0,
	528, 531, 462, 596, 0, 525, 540, 599, 539, 593,
	362, 0, 383, 537, 484, 0, 529, 503, 0, 530,
	499, 534, 0, 473, 0, 390, 414, 426, 443, 446,
	474, 559, 560, 561, 258, 445, 563, 564, 565, 566,
	567, 568, 569, 562, 417, 506, 483, 509, 425, 486,
	485, 0, 0, 520, 441, 521, 522, 346, 347, 348,
	349, 309, 547, 276, 444, 372, 0, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 513, 510, 604,
	0, 570, 571, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 514, 451,
	573, 576, 574, 575, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 500, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 554, 553, 552,
	551, 550, 549, 548, 0, 0, 497, 400, 285, 250,
	281, 282, 289, 594, 591, 404, 595, 0, 255, 477,
	329, 0, 370, 303, 542, 543, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	545, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 476, 592, 0, 0, 0, 0, 0,
	0, 0, 526, 538, 572, 0, 581, 582, 584, 586,
	585, 2137, 598, 467, 468, 578, 0, 358, 0, 482,
	515, 504, 587, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 519, 501,
	511, 502, 487, 488, 489, 496, 308, 490, 491, 492,
	463, 493, 464, 494, 495, 0, 518, 469, 389, 342,
	536, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 271, 197, 465, 583,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	0, 0, 580, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 600, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	523, 0, 440, 601, 602, 603, 449, 454, 455, 456,
	458, 459, 460, 461, 524, 541, 508, 478, 442, 532,
	475, 479, 480, 544, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 597, 291, 356, 546, 579, 471,
	0, 533, 472, 481, 283, 505, 517, 516, 352, 432,
	0, 528, 531, 462, 596, 0, 525, 540, 599, 539,
	593, 362, 0, 383, 537, 484, 0, 529, 503, 0,
	530, 499, 534, 0, 473, 0, 390, 414, 426, 443,
	446, 474, 559, 560, 561, 258, 445, 563, 564, 565,
	566, 567, 568, 569, 562, 417, 506, 483, 509, 425,
	486, 485, 0, 0, 520, 441, 521, 522, 346, 347,
	348, 349, 309, 547, 276, 444, 372, 0, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 512, 513, 510,
	604, 0, 570, 571, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 514,
	451, 573, 576, 574, 575, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 500,
	527, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 554, 553,
	552, 551, 550, 549, 548, 0, 0, 497, 400, 285,
	250, 281, 282, 289, 594, 591, 404, 595, 0, 255,
	477, 329, 0, 370, 303, 542, 543, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 545, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 476, 592, 0, 0, 0, 0,
	0, 0, 0, 526, 538, 572, 0, 581, 582, 584,
	586, 585, 0, 598, 467, 468, 578, 358, 0, 482,
	515, 504, 587, 470, 0, 1847, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 519, 501,
	511, 502, 487, 488, 489, 496, 308, 490, 491, 492,
	463, 493, 464, 494, 495, 0, 518, 469, 389, 342,
	536, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 271, 197, 465, 583,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	0, 0, 580, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 600, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	523, 0, 440, 601, 602, 603, 449, 454, 455, 456,
	458, 459, 460, 461, 524, 541, 508, 478, 442, 532,
	475, 479, 480, 544, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 597, 291, 356, 546, 579, 471,
	0, 533, 472, 481, 283, 505, 517, 516, 352, 432,
	0, 528, 531, 462, 596, 0, 525, 540, 599, 539,
	593, 362, 0, 383, 537, 484, 0, 529, 503, 0,
	530, 499, 534, 0, 473, 0, 390, 414, 426, 443,
	446, 474, 559, 560, 561, 258, 445, 563, 564, 565,
	566, 567, 568, 569, 562, 417, 506, 483, 509, 425,
	486, 485, 0, 0, 520, 441, 521, 522, 346, 347,
	348, 349, 309, 547, 276, 444, 372, 0, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 512, 513, 510,
	604, 0, 570, 571, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 514,
	451, 573, 576, 574, 575, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 500,
	527, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 554, 553,
	552, 551, 550, 549, 548, 0, 0, 497, 400, 285,
	250, 281, 282, 289, 594, 591, 404, 595, 0, 255,
	477, 329, 0, 370, 303, 542, 543, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 545, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 476, 592, 0, 0, 0, 0,
	0, 0, 0, 526, 538, 572, 0, 581, 582, 584,
	586, 585, 0, 598, 467, 468, 578, 358, 0, 482,
	515, 504, 587, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 519, 501,
	511, 502, 487, 488, 489, 496, 308, 490, 491, 492,
	463, 493, 464, 494, 495, 0, 518, 469, 389, 342,
	536, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 1400, 0, 0, 0, 271, 197, 465, 583,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	0, 0, 580, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 600, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 1753, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	523, 0, 440, 601, 602, 603, 449, 454, 455, 456,
	458, 459, 460, 461, 524, 541, 508, 478, 442, 532,
	475, 479, 480, 544, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 597, 291, 356, 546, 579, 471,
	0, 533, 472, 481, 283, 505, 517, 516, 352, 432,
	0, 528, 531, 462, 596, 0, 525, 540, 599, 539,
	593, 362, 0, 383, 537, 484, 0, 529, 503, 0,
	530, 499, 534, 0, 473, 0, 390, 414, 426, 443,
	446, 474, 559, 560, 561, 258, 445, 563, 564, 565,
	566, 567, 568, 569, 562, 417, 506, 483, 509, 425,
	486, 485, 0, 0, 520, 441, 521, 522, 346, 347,
	348, 349, 309, 547, 276, 444, 372, 0, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 512, 513, 510,
	604, 0, 570, 571, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 514,
	451, 573, 576, 574, 575, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 500,
	527, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 554, 553,
	552, 551, 550, 549, 548, 0, 0, 497, 400, 285,
	250, 281, 282, 289, 594, 591, 404, 595, 0, 255,
	477, 329, 0, 370, 303, 542, 543, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 545, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 476, 592, 0, 0, 0, 0,
	0, 0, 0, 526, 538, 572, 0, 581, 582, 584,
	586, 585, 0, 598, 467, 468, 578, 358, 0, 482,
	515, 504, 587, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 519, 501,
	511, 502, 487, 488, 489, 496, 308, 490, 491, 492,
	463, 493, 464, 494, 495, 0, 518, 469, 389, 342,
	536, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 271, 197, 465, 583,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	0, 0, 580, 0, 421, 0, 0, 1430, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 600, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	523, 0, 440, 601, 602, 603, 449, 454, 455, 456,
	458, 459, 460, 461, 524, 541, 508, 478, 442, 532,
	475, 479, 480, 544, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 597, 291, 356, 546, 579, 471,
	0, 533, 472, 481, 283, 505, 517, 516, 352, 432,
	0, 528, 531, 462, 596, 0, 525, 540, 599, 539,
	593, 362, 0, 383, 537, 484, 0, 529, 503, 0,
	530, 499, 534, 0, 473, 0, 390, 414, 426, 443,
	446, 474, 559, 560, 561, 258, 445, 563, 564, 565,
	566, 567, 568, 569, 562, 417, 506, 483, 509, 425,
	486, 485, 0, 0, 520, 441, 521, 522, 346, 347,
	348, 349, 309, 547, 276, 444, 372, 0, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 512, 513, 510,
	604, 0, 570, 571, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 514,
	451, 573, 576, 574, 575, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 500,
	527, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 554, 553,
	552, 551, 550, 549, 548, 0, 0, 497, 400, 285,
	250, 281, 282, 289, 594, 591, 404, 595, 0, 255,
	477, 329, 0, 370, 303, 542, 543, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 545, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 476, 592, 0, 0, 0, 0,
	0, 0, 0, 526, 538, 572, 0, 581, 582, 584,
	586, 585, 0, 598, 467, 468, 578, 358, 0, 482,
	515, 504, 587, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 519, 501,
	511, 502, 487, 488, 489, 496, 308, 490, 491, 492,
	463, 493, 464, 494, 495, 0, 518, 469, 389, 342,
	536, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 271, 197, 465, 583,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	0, 619, 580, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 600, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	523, 0, 440, 601, 602, 603, 449, 454, 455, 456,
	458, 459, 460, 461, 524, 541, 508, 478, 442, 532,
	475, 479, 480, 544, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 597, 291, 356, 546, 579, 471,
	0, 533, 472, 481, 283, 505, 517, 516, 352, 432,
	0, 528, 531, 462, 596, 0, 525, 540, 599, 539,
	593, 362, 0, 383, 537, 484, 0, 529, 503, 0,
	530, 499, 534, 0, 473, 0, 390, 414, 426, 443,
	446, 474, 559, 560, 561, 258, 445, 563, 564, 565,
	566, 567, 568, 569, 562, 417, 506, 483, 509, 425,
	486, 485, 0, 0, 520, 441, 521, 522, 346, 347,
	348, 349, 309, 547, 276, 444, 372, 0, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 512, 513, 510,
	604, 0, 570, 571, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 514,
	451, 573, 576, 574, 575, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 500,
	527, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 554, 553,
	552, 551, 550, 549, 548, 0, 0, 497, 400, 285,
	250, 281, 282, 289, 594, 591, 404, 595, 0, 255,
	477, 329, 0, 370, 303, 542, 543, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 545, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 476, 592, 0, 0, 0, 0,
	0, 0, 0, 526, 538, 572, 0, 581, 582, 584,
	586, 585, 0, 598, 467, 468, 578, 358, 0, 482,
	515, 504, 587, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 519, 501,
	511, 502, 487, 488, 489, 496, 308, 490, 491, 492,
	463, 493, 464, 494, 495, 0, 518, 469, 389, 342,
	536, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 271, 197, 465, 583,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	0, 0, 580, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 600, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	523, 0, 440, 601, 602, 603, 449, 454, 455, 456,
	458, 459, 460, 461, 524, 541, 508, 478, 442, 532,
	475, 479, 480, 544, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 597, 291, 356, 546, 579, 471,
	0, 533, 472, 481, 283, 505, 517, 516, 352, 432,
	0, 528, 531, 462, 596, 0, 525, 540, 599, 539,
	593, 362, 0, 383, 537, 484, 0, 529, 503, 0,
	530, 499, 534, 0, 473, 0, 390, 414, 426, 443,
	446, 474, 559, 560, 561, 258, 445, 563, 564, 565,
	566, 567, 568, 569, 562, 417, 506, 483, 509, 425,
	486, 485, 0, 0, 520, 441, 521, 522, 346, 347,
	348, 349, 309, 547, 276, 444, 372, 0, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 512, 513, 510,
	604, 0, 570, 571, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 514,
	451, 573, 576, 574, 575, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 500,
	527, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 554, 553,
	552, 551, 550, 549, 548, 891, 0, 497, 400, 285,
	250, 281, 282, 289, 594, 591, 404, 595, 0, 255,
	477, 329, 0, 370, 303, 542, 543, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 545, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 476, 592, 0, 0, 0, 0,
	0, 0, 0, 526, 538, 572, 0, 581, 582, 584,
	586, 585, 0, 598, 467, 468, 578, 358, 0, 482,
	515, 504, 587, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 609, 298, 0, 0, 328, 519, 501,
	511, 502, 487, 488, 489, 496, 308, 490, 491, 492,
	463, 493, 464, 494, 495, 0, 518, 469, 389, 342,
	536, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 271, 197, 465, 583,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	0, 0, 580, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 600, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	523, 0, 440, 601, 602, 603, 449, 454, 455, 456,
	458, 459, 460, 461, 524, 541, 508, 478, 442, 532,
	475, 479, 480, 544, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 597, 291, 356, 546, 579, 471,
	0, 533, 472, 481, 283, 505, 517, 516, 352, 432,
	0, 528, 531, 462, 596, 0, 525, 540, 599, 539,
	593, 362, 0, 383, 537, 484, 0, 529, 503, 0,
	530, 499, 534, 0, 473, 0, 390, 414, 426, 443,
	446, 474, 559, 560, 561, 258, 445, 563, 564, 565,
	566, 567, 568, 569, 562, 417, 506, 483, 509, 425,
	486, 485, 0, 0, 520, 441, 521, 522, 346, 347,
	348, 349, 309, 547, 276, 444, 372, 0, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 512, 513, 510,
	604, 0, 570, 571, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 514,
	451, 573, 576, 574, 575, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 500,
	527, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 554, 553,
	552, 551, 550, 549, 548, 0, 0, 497, 400, 285,
	250, 281, 282, 289, 594, 591, 404, 595, 0, 255,
	477, 329, 0, 370, 303, 542, 543, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 545, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 476, 592, 0, 0, 0, 0,
	0, 0, 0, 526, 538, 572, 0, 581, 582, 584,
	586, 585, 0, 598, 467, 468, 578, 358, 0, 482,
	515, 504, 587, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 519, 501,
	511, 502, 487, 488, 489, 496, 308, 490, 491, 492,
	463, 493, 464, 494, 495, 0, 518, 469, 389, 342,
	536, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 271, 197, 465, 583,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	0, 0, 580, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 600, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	523, 0, 440, 601, 602, 603, 449, 454, 455, 456,
	458, 459, 460, 461, 524, 541, 508, 478, 442, 532,
	475, 479, 480, 544, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 597, 291, 356, 546, 579, 471,
	0, 533, 472, 481, 283, 505, 517, 516, 352, 432,
	0, 528, 531, 462, 596, 0, 525, 540, 599, 539,
	593, 362, 0, 383, 537, 484, 0, 529, 503, 0,
	530, 499, 534, 0, 473, 0, 390, 414, 426, 443,
	446, 474, 559, 560, 561, 258, 445, 563, 564, 565,
	566, 567, 568, 569, 562, 417, 506, 483, 509, 425,
	486, 485, 0, 0, 520, 441, 521, 522, 346, 347,
	348, 349, 309, 547, 276, 444, 372, 0, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 512, 513, 510,
	604, 0, 570, 571, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 514,
	451, 573, 576, 574, 575, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 500,
	527, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 554, 553,
	552, 551, 550, 549, 548, 0, 0, 497, 400, 285,
	250, 281, 282, 289, 594, 591, 404, 595, 0, 255,
	477, 329, 0, 370, 303, 542, 543, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 545, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 476, 592, 0, 0, 0, 0,
	0, 0, 0, 526, 538, 572, 0, 581, 582, 584,
	586, 585, 0, 598, 467, 468, 578, 358, 0, 482,
	515, 504, 587, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 519, 501,
	511, 502, 487, 488, 489, 496, 308, 490, 491, 492,
	463, 493, 464, 494, 495, 0, 518, 469, 389, 342,
	536, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 271, 197, 465, 583,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 394, 1380, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	0, 0, 580, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 600, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	523, 0, 440, 601, 602, 603, 449, 454, 455, 456,
	458, 459, 460, 461, 524, 541, 508, 478, 442, 532,
	475, 479, 480, 544, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 597, 291, 356, 546, 579, 471,
	0, 533, 472, 481, 283, 505, 517, 516, 352, 432,
	0, 528, 531, 462, 596, 0, 525, 540, 599, 539,
	593, 362, 0, 383, 537, 484, 0, 529, 503, 0,
	530, 499, 534, 0, 473, 0, 390, 414, 426, 443,
	446, 474, 559, 560, 561, 258, 445, 563, 564, 565,
	566, 567, 568, 569, 562, 417, 506, 483, 509, 425,
	486, 485, 0, 0, 520, 441, 521, 522, 346, 347,
	348, 349, 309, 547, 276, 444, 372, 0, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 512, 513, 510,
	604, 0, 570, 571, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 514,
	451, 573, 576, 574, 575, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 500,
	527, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 554, 553,
	552, 551, 550, 549, 548, 0, 0, 497, 400, 285,
	250, 281, 282, 289, 594, 591, 404, 595, 0, 255,
	477, 329, 0, 370, 303, 542, 543, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 545, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 476, 592, 0, 0, 0, 0,
	0, 0, 0, 526, 538, 572, 0, 581, 582, 584,
	586, 585, 0, 598, 467, 468, 578, 358, 0, 482,
	515, 504, 587, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 519, 501,
	511, 502, 487, 488, 489, 496, 308, 490, 491, 492,
	463, 493, 464, 494, 495, 0, 518, 469, 389, 342,
	536, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 271, 197, 465, 583,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 394, 1378, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	0, 0, 580, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 600, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	523, 0, 440, 601, 602, 603, 449, 454, 455, 456,
	458, 459, 460, 461, 524, 541, 508, 478, 442, 532,
	475, 479, 480, 544, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 597, 291, 356, 546, 579, 471,
	0, 533, 472, 481, 283, 505, 517, 516, 352, 432,
	0, 528, 531, 462, 596, 0, 525, 540, 599, 539,
	593, 362, 0, 383, 537, 484, 0, 529, 503, 0,
	530, 499, 534, 0, 473, 0, 390, 414, 426, 443,
	446, 474, 559, 560, 561, 258, 445, 563, 564, 565,
	566, 567, 568, 569, 562, 417, 506, 483, 509, 425,
	486, 485, 0, 0, 520, 441, 521, 522, 346, 347,
	348, 349, 309, 547, 276, 444, 372, 0, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 512, 513, 510,
	604, 0, 570, 571, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 514,
	451, 573, 576, 574, 575, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 500,
	527, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 554, 553,
	552, 551, 550, 549, 548, 0, 0, 497, 400, 285,
	250, 281, 282, 289, 594, 591, 404, 595, 0, 255,
	477, 329, 0, 370, 303, 542, 543, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 545, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 476, 592, 0, 0, 0, 0,
	0, 0, 0, 526, 538, 572, 0, 581, 582, 584,
	586, 585, 0, 598, 467, 468, 578, 358, 0, 482,
	515, 504, 587, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 519, 501,
	511, 502, 487, 488, 489, 496, 308, 490, 491, 492,
	463, 493, 464, 494, 495, 0, 518, 469, 389, 342,
	536, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 271, 197, 465, 583,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	0, 0, 580, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 600, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	684, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	523, 0, 440, 601, 602, 603, 449, 454, 455, 456,
	458, 459, 460, 461, 524, 541, 508, 478, 442, 532,
	475, 479, 480, 544, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 597, 291, 356, 546, 579, 471,
	0, 533, 472, 481, 283, 505, 517, 516, 352, 432,
	0, 528, 531, 462, 596, 0, 525, 540, 599, 539,
	593, 362, 0, 383, 537, 484, 0, 529, 503, 0,
	530, 499, 534, 0, 473, 0, 390, 414, 426, 443,
	446, 474, 559, 560, 561, 258, 445, 563, 564, 565,
	566, 567, 568, 569, 562, 417, 506, 483, 509, 425,
	486, 485, 0, 0, 520, 441, 521, 522, 346, 347,
	348, 349, 309, 547, 276, 444, 372, 0, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 512, 513, 510,
	604, 0, 570, 571, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 514,
	451, 573, 576, 574, 575, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 500,
	527, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 554, 553,
	552, 551, 550, 549, 548, 0, 0, 497, 400, 285,
	250, 281, 282, 289, 594, 591, 404, 595, 0, 255,
	477, 329, 0, 370, 303, 542, 543, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 545, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 476, 592, 0, 0, 0, 0,
	0, 0, 0, 526, 538, 572, 0, 581, 582, 584,
	586, 585, 0, 598, 467, 468, 578, 358, 0, 482,
	515, 504, 587, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 519, 501,
	511, 502, 487, 488, 489, 496, 308, 490, 491, 492,
	463, 493, 464, 494, 495, 0, 518, 469, 389, 342,
	536, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 271, 197, 465, 583,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	0, 0, 580, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 600, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 643, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	523, 0, 440, 601, 602, 603, 449, 454, 455, 456,
	458, 459, 460, 461, 524, 541, 508, 478, 442, 532,
	475, 479, 480, 544, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 597, 291, 356, 546, 579, 471,
	0, 533, 472, 481, 283, 505, 517, 516, 352, 432,
	0, 528, 531, 462, 596, 0, 525, 540, 599, 539,
	593, 362, 0, 383, 537, 484, 0, 529, 503, 0,
	530, 499, 534, 0, 473, 0, 390, 414, 426, 443,
	446, 474, 559, 560, 561, 258, 445, 563, 564, 565,
	566, 567, 568, 644, 562, 417, 506, 483, 509, 425,
	486, 485, 0, 0, 520, 441, 521, 522, 346, 347,
	348, 349, 309, 547, 276, 444, 372, 0, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 512, 513, 510,
	604, 0, 570, 571, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 514,
	451, 573, 576, 574, 575, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 500,
	527, 1035, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 554, 553,
	552, 551, 550, 549, 548, 0, 0, 497, 400, 285,
	250, 281, 282, 289, 594, 591, 404, 595, 0, 255,
	477, 329, 0, 370, 303, 542, 543, 206, 207, 208,
	209, 210, 211, 212, 213, 251, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 545, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 1035, 0,
	0, 252, 246, 247, 248, 249, 0, 0, 0, 429,
	430, 431, 453, 415, 476, 592, 0, 0, 0, 0,
	0, 1021, 0, 526, 538, 572, 0, 581, 582, 584,
	586, 585, 0, 598, 467, 468, 578, 0, 0, 0,
	0, 1043, 1047, 1049, 1051, 1053, 1054, 1056, 0, 1061,
	1057, 1058, 1059, 1060, 0, 1038, 1039, 1040, 1041, 1019,
	1020, 1044, 0, 1022, 0, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1034, 1036, 1032, 1033, 1042, 0,
	0, 0, 1035, 0, 0, 0, 1046, 1048, 1050, 1052,
	1055, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1021, 0,
	0, 0, 1011, 0, 1037, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1043, 1047,
	1049, 1051, 1053, 1054, 1056, 0, 1061, 1057, 1058, 1059,
	1060, 0, 1038, 1039, 1040, 1041, 1019, 1020, 1044, 1835,
	1022, 0, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1034, 1036, 1032, 1033, 1042, 0, 0, 0, 0,
	0, 0, 0, 1046, 1048, 1050, 1052, 1055, 0, 0,
	0, 0, 0, 0, 1837, 0, 0, 0, 0, 0,
	0, 0, 1021, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1037, 1043, 1047, 1049, 1051, 1053, 1054, 1056, 0,
	1061, 1057, 1058, 1059, 1060, 3417, 1038, 1039, 1040, 1041,
	1019, 1020, 1044, 1835, 1022, 1812, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1034, 1036, 1032, 1033, 1042,
	0, 0, 2430, 2431, 0, 0, 0, 1046, 1048, 1050,
	1052, 1055, 0, 0, 0, 0, 0, 0, 1837, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1037, 0, 0, 0, 0,
	0, 0, 1828, 0, 0, 0, 1835, 0, 0, 663,
	662, 669, 659, 0, 0, 0, 0, 0, 0, 1812,
	0, 666, 667, 0, 668, 672, 0, 0, 654, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 677, 0,
	0, 1837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 681, 1816, 0, 683, 0, 1828, 0, 0, 682,
	0, 0, 1812, 1822, 0, 0, 1045, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1810, 1844, 0, 0, 1811, 1813, 1815,
	0, 1817, 1818, 1819, 1823, 1824, 1825, 1827, 1830, 1831,
	1832, 0, 0, 0, 0, 0, 0, 0, 1820, 1829,
	1821, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3388, 0, 0, 0, 1828,
	0, 0, 0, 0, 0, 0, 1816, 0, 0, 0,
	0, 0, 1836, 0, 0, 0, 0, 1822, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1045, 0, 0, 0, 1810, 1844, 0,
	0, 1811, 1813, 1815, 0, 1817, 1818, 1819, 1823, 1824,
	1825, 1827, 1830, 1831, 1832, 0, 1833, 0, 0, 0,
	0, 0, 1820, 1829, 1821, 655, 657, 656, 0, 0,
	0, 0, 0, 1809, 0, 661, 0, 0, 0, 1816,
	1808, 0, 0, 0, 0, 0, 0, 665, 0, 0,
	1822, 0, 0, 0, 680, 0, 1836, 0, 0, 0,
	0, 658, 0, 0, 1826, 0, 0, 0, 0, 0,
	1810, 1844, 0, 1814, 1811, 1813, 1815, 1045, 1817, 1818,
	1819, 1823, 1824, 1825, 1827, 1830, 1831, 1832, 0, 0,
	0, 0, 0, 0, 0, 1820, 1829, 1821, 0, 0,
	1833, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1809, 0, 0,
	0, 0, 0, 0, 1808, 0, 0, 0, 0, 1836,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1826, 0,
	0, 0, 0, 0, 0, 0, 0, 1814, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	660, 664, 670, 1833, 671, 673, 0, 0, 674, 675,
	676, 0, 0, 678, 679, 0, 0, 0, 0, 0,
	1809, 0, 0, 0, 0, 0, 0, 1808, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1826, 0, 0, 0, 0, 0, 0, 0, 0,
	1814,
}

var yyPact = [...]int{
	3626, -1000, -1000, -1000, -327, 13188, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42024,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42024,
	-325, 41424, 41424, -1000, -1000, 2396, -1000, 40224, 15008, 42024,
	347, 340, 42024, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 765, -1000, 44424, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 701, 3704, 43824, 10162, -248, -1000, 1157, -70, 2311,
	912, 923, 972, 972, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3829, 793, 40824,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 303, 365, 793, 19818, 50, 49, 1157, 368, -132,
	-131, -134, 574, -1000, 1048, 3734, 173, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10162, 10162,
	13188, -347, 13188, 10162, 42024, 42024, -1000, -1000, -1000, -1000,
	-325, 40224, 701, 3704, 10162, 2311, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -131, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -132, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -134, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 49, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 44977, -1000,
	1350, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2774, 1348, 2310, 589, 42024,
	-1000, 111, 589, -1000, -1000, -1000, 1157, 3301, -1000, 42024,
	42024, 123, 1654, -1000, 431, 400, 380, 242, 1333, -1000,
	-1000, -1000, -1000, -1000, -1000, 474, 3192, -1000, 42024, 42024,
	2789, 42024, -1000, 2148, 525, 45316, 2990, 1145, 785, 2810,
	-1000, -1000, 2773, -1000, 245, 296, 221, 584, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 251, -1000, 3042, -1000, -1000,
	238, -1000, -1000, 220, -1000, -1000, -1000, 48, -1000, -1000,
	-1000, -1000, -1000, -1000, -66, -1000, -1000, 962, 2361, 10162,
	2587, -1000, 2607, -1000, -1000, -1000, -1000, 5929, 11974, 11974,
	11974, 11974, -1000, -1000, 2594, 10162, 2770, 2769, 2768, 2766,
	-1000, -1000, -1000, -1000, -1000, -1000, 1327, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1808, -1000, -1000, -1000,
	12578, -1000, 2765, 2758, 2751, 2749, 2748, 2745, 2744, 2739,
	2734, 2731, 2729, 2727, 2724, 2723, 2479, 14398, 2722, 2308,
	2307, 2721, 2720, 2719, 2292, 2479, 2479, 2718, 2717, 2715,
	2711, 2710, 2700, 2685, 2684, 2682, 2681, 2679, 2677, 2655,
	2654, 2653, 2652, 2651, 2649, 2648, 2645, 2644, 2643, 2642,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1193, -1000, 2641, 3209, 2542, -1000, 3053,
	3047, 3027, 3019, -297, 2639, 2017, -1000, -1000, 79, -1000,
	-90, -1000, -1000, 902, -1000, 893, -1000, 42024, 42024, 163,
	916, 688, 688, 688, 688, 688, 741, 688, 3089, 764,
	763, 754, 747, 688, -88, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1653, 1640, 2878, 868, -1000, -1000, -1000, -1000,
	1220, 42024, -1000, 2540, 1543, 1543, 3088, 541, 536, 532,
	1543, 395, -1000, 1569, 1569, 1569, 1569, 1543, 425, 556,
	3075, 3075, 28, 1569, 35, 1543, 1543, 35, 1543, 1543,
	1706, 202, -303, -1000, -1000, -1000, -1000, 1569, 1569, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3065, 3059, 701, 701,
	42024, 161, 42024, 701, 701, 701, 710, -40, 43224, 42624,
	2148, 524, 511, 1227, 1620, -1000, 1547, 42024, 42024, 1547,
	1547, 22823, 22223, -1000, 42024, -1000, 3209, 2542, 2476, 1625,
	2475, 2542, -138, -140, -141, 701, 701, 701, 701, 701,
	199, 701, 701, 701, 701, 701, 42024, 42024, 39624, 701,
	701, 8345, 8345, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 13188, 1936, 2103, 172, -52, -317, 231, -1000,
	-1000, 42024, 2955, 194, -1000, -1000, -1000, 2486, -1000, 2534,
	2534, 2534, 2534, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2534, 2534, 2539, 2637, -1000, -1000, 2533, 2533,
	2533, 2486, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2535, 2535, 2536,
	2536, 2535, 42024, 10162, 42024, 2968, 339, 2636, -1000, 42024,
	2291, 335, 3209, 2967, 3075, 3154, -1000, -1000, 1322, 2006,
	2290, -1000, 242, -1000, 361, 242, 1581, -1000, 1132, -1000,
	-1000, -1000, -1000, -1000, 42024, -66, 348, -1000, -1000, 2264,
	2610, -1000, 531, 1051, 1202, -1000, 191, 4458, 34223, 2148,
	34223, 42024, -1000, -1000, -1000, -1000, -1000, -1000, 47, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 258, -1000, 10162, 10162, 10162, 10162, 10162, -1000,
	592, 11370, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11974,
	11974, 11974, 11974, 11974, 11974, 11974, 11974, 11974, 11974, 11974,
	11974, 2593, 1674, 11974, 11974, 11974, 11974, 1625, 3172, 1221,
	255, -1000, -1000, -1000, -1000, -1000, 1631, 2361, 10162, 10162,
	10162, 10162, 42024, -1000, -1000, 3939, 10162, 10162, 3331, 10162,
	3017, 10162, 10162, 10162, 2466, 4715, 42024, 10162, -1000, 2465,
	2456, -1000, -1000, 1817, 10162, -1000, -1000, 10162, -1000, -1000,
	10162, 11974, 10162, -1000, -1000, -1000, 695, 3017, 3017, 3017,
	1537, 10162, 10162, 3017, 3017, 3017, 1529, 3017, 3017, 3017,
	3017, 3017, 3017, 3017, 3017, 2453, 2452, 2451, 9558, 3075,
	-248, -1000, 7741, 2967, 3075, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -299, 2604, 42024, 2288, 2274,
	-338, -13, 909, 899, 905, -1000, 3012, -1000, 2602, 42024,
	688, 688, 688, -1000, 42024, 1695, 34223, 42024, 42024, 2148,
	42024, 42024, 42024, 688, 688, 688, 688, 42024, -1000, 2935,
	34223, 2887, 710, -1000, 42024, 1220, 3011, 42024, 3161, 11974,
	11974, -1000, 39024, 1569, 1543, 1543, -1000, -1000, 42024, -1000,
	-1000, -1000, 1569, 42024, 1569, 1569, 3161, 1569, -1000, -1000,
	-1000, 1543, 1543, -1000, -1000, 10162, -1000, -1000, 1569, 1569,
	-1000, -1000, 3161, 42024, 42, 3161, 3161, 30, -1000, -1000,
	-1000, 1543, 42024, 42024, 688, 42024, -1000, 42024, 42024, -1000,
	-1000, 42024, 42024, 4133, 42024, 38424, 3058, -1000, 34223, 42024,
	42024, 31823, -1000, 1190, -1000, -9, -1000, -54, -40, 1547,
	-40, 1547, -1000, 528, 526, 21023, 473, 34223, 5319, -1000,
	-1000, 1547, 1547, 5319, 5319, 1365, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1213, -1000, 207, 3075, -1000, -1000, -1000,
	-1000, -1000, 2004, 1997, 1994, 42024, 42024, 34223, 2148, 42024,
	701, 42024, 42024, 42024, 42024, 42024, -1000, 2596, 1315, -1000,
	2978, 42024, 42024, 1182, -1000, -1000, 18008, 1309, 1182, -1000,
	1735, -1000, 10162, 13188, -275, 10162, 13188, 13188, 10162, 13188,
	-1000, 10162, 181, -1000, -1000, -1000, -1000, 1992, -1000, 1991,
	-1000, -1000, -1000, -1000, -1000, 2273, 2273, -1000, 1982, -1000,
	-1000, -1000, -1000, 1981, -1000, -1000, 1976, -1000, -1000, -1000,
	2450, 962, -1000, 2269, 2808, -249, -1000, 19218, 42024, 42024,
	-361, -365, -1000, -249, -1000, 18613, 42024, 3075, -1000, -258,
	2967, 10162, 42024, -1000, 3081, -1000, -1000, 242, -1000, 438,
	324, -1000, -1000, -1000, -1000, -1000, -1000, 1307, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1212, -1000, 42024,
	-1000, -1000, 191, 34223, 36023, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 223, -1000, -1000, 174, -1000, 732, 156, 1580,
	-1000, -1000, 166, 192, 118, 801, 2361, -1000, 1727, 1727,
	1699, -1000, 612, -1000, -1000, -1000, -1000, 2594, -1000, -1000,
	-1000, 2498, 2632, -1000, 1641, 1641, 1263, 1263, 1263, 1263,
	1263, 2013, 2013, -1000, -1000, -1000, 5929, 2593, 11974, 11974,
	11974, 11974, 619, 619, 1730, 3615, -1000, 10162, 1732, -1000,
	10162, 2282, 1368, 2172, 1382, 1306, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2448, 2447, 2215, 3190,
	2444, 10162, -1000, -1000, 1573, 1572, 1570, -1000, 2221, 8954,
	-1000, -1000, -1000, 2441, 1299, 2439, -1000, -1000, -1000, 2436,
	1564, 1070, 2434, 1685, 2432, 1206, 10162, 10162, 10162, 10162,
	2431, 1560, 1557, 10162, 10162, 10162, 10162, 2430, 10162, 10162,
	10162, 10162, 10162, 10162, 10162, 10162, 68, 68, 68, 1205,
	1197, -1000, -1000, 1556, -1000, 2361, -1000, -1000, 2967, -1000,
	2588, 1974, 1196, -1000, -1000, -323, 2213, -1000, -1000, 907,
	887, 881, 42024, 964, 2586, 42024, 42024, 42024, 185, -1000,
	2974, 1061, -1000, 156, -78, 360, 981, 2788, 3187, -152,
	42024, 42024, 42024, 42024, 3010, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 37824, -1000, 2581, 1546, -1000, -1000, 10162,
	-1000, -1000, 2787, 42024, 42024, 3161, 3161, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1569, 3161, 3161, 1319, 1543, 1569,
	-1000, -1000, 1569, -1000, -1000, 1569, -1000, -1000, 1297, -1000,
	42024, -1000, -1000, -1000, 3007, 2540, 1195, -1000, -1000, -1000,
	3152, 1153, 665, 665, 874, 480, 3150, 16808, -1000, 1496,
	901, 730, 2933, 239, -1000, 1496, -195, 597, 1496, 1496,
	1496, 1496, 1496, 1496, 1496, 446, 444, 1496, 1496, 1496,
	1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 917, 1496,
	1496, 1496, 1496, 1496, -1000, 1496, 2579, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 487, 183, 3056, 271, 270, 1061,
	3034, 280, 2879, 1083, -1000, -1000, -1000, -1000, 25223, 25223,
	20423, 25223, -1000, 177, -40, -20, -1000, -1000, 1190, 5319,
	1190, 5319, -1000, -1000, 727, -1000, -1000, 981, -1000, 42024,
	42024, -1000, -1000, 2575, 1639, -1000, -1000, 14398, -1000, 5319,
	5319, -1000, -1000, 25823, 42024, -1000, -72, -1000, -46, 2967,
	-1000, -1000, -1000, 1177, -1000, -1000, 1179, 981, 2806, 42024,
	1177, 1177, 1177, -1000, -1000, 16208, 42024, 42024, -1000, -1000,
	3161, 8345, -1000, 31823, -1000, -1000, 37223, -1000, 36623, 3161,
	1677, -1000, 13188, 2054, 168, -1000, 214, -322, 167, 1868,
	164, 2361, -1000, -1000, 2429, 2426, 1545, -1000, 1544, 2416,
	1540, 1539, -1000, -1, -1000, 2957, 986, -1000, 2572, -1000,
	1532, 2874, -1000, 1174, -1000, 1633, 1522, -1000, 2266, 2260,
	986, 1520, 2871, 1174, 2967, 2258, -1000, 1168, -1000, 2152,
	1295, 117, -1000, -1000, -1000, 42024, 2264, 1502, 36023, 1045,
	-1000, 723, 1288, 1280, -1000, 34223, 222, 34223, -1000, 34223,
	-1000, -1000, 359, -1000, 42024, 2959, -1000, -1000, -1000, 2213,
	1630, -341, 42024, -1000, -1000, -1000, -1000, -1000, 1482, -1000,
	619, 619, 1730, 2227, -1000, 11974, -1000, 11974, 3141, 1659,
	-1000, 10162, 2022, 44880, 10162, 44880, 1917, 24023, 42024, -1000,
	-1000, 10162, 10162, -1000, 3123, -1000, -1000, -1000, -1000, 10162,
	10162, 1882, -1000, 42024, -1000, -1000, -1000, -1000, 24023, -1000,
	11974, -1000, 10162, 1122, 1122, 3119, 1480, 68, 68, 68,
	3073, 3057, 3038, 1462, 68, 3020, 2998, 2983, 2965, 2961,
	2909, 2875, 2858, -1000, 2570, -1000, -1000, 1790, 10766, 7741,
	-1000, -1000, 257, 1160, 1970, 2254, 122, -1000, 1629, -1000,
	-1000, -1000, 886, 201, 2412, 1147, -1000, -1000, 42024, -1000,
	-1000, -1000, 16208, 2540, 2567, 2540, 83, 1496, -1000, 603,
	34223, 510, -1000, 42024, 2015, 1628, 2800, 394, 2940, 42024,
	2566, 338, 2565, 2551, 3002, 333, 45061, 42024, 1175, -1000,
	1267, 3734, -1000, 42024, 2361, -1000, 2148, -1000, 1543, -1000,
	-1000, 3161, -1000, -1000, 10162, 10162, 3161, 1543, 1543, 1569,
	42024, -1000, 333, 45061, 2996, 4309, 522, 2270, -1000, 42024,
	-1000, -1000, -1000, 734, -1000, 871, 688, 42024, 1756, 871,
	1755, 2550, -1000, -1000, 42024, 42024, 42024, 42024, -1000, -1000,
	42024, -1000, 42024, 42024, 42024, 42024, 42024, 35423, -1000, 42024,
	42024, -1000, 42024, 1750, 42024, 1749, 2991, -1000, 1496, 1496,
	821, -1000, -1000, 514, -1000, 35423, 1961, 1959, 1958, 1955,
	2253, 2252, 2248, 1496, 1496, 1939, 2247, 34823, 2246, 1059,
	1925, 1924, 1904, 1963, 2240, 975, -1000, 2234, 1944, 1943,
	1933, 42024, 2548, 2151, -1000, -1000, 83, 1496, 269, 42024,
	1626, 603, 353, 2030, 21623, 42024, 31823, 31823, 31823, 31823,
	-1000, 2845, 2843, -1000, 2863, 2861, 2894, 42024, 31823, 2540,
	-1000, 34823, -1000, -1000, -1000, 1625, 1461, 3189, 884, 10162,
	-1000, -1000, -28, -59, -1000, -1000, -1000, 34223, 2226, 473,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3076, 42024, 42024,
	631, 2411, 1129, -1000, -1000, -1000, 45061, 2534, 2534, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2534, 2534,
	2539, -1000, -1000, 2533, 2533, 2533, 2486, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2535, 2535, 2536,
	2536, 2535, -1000, -1000, 3159, -1000, 1128, -1000, -1000, 1258,
	-1000, 3159, 1687, -328, 13188, 1680, 1541, -1000, 10162, 13188,
	10162, -276, 256, -283, -1000, -1000, -1000, 2225, -1000, -1000,
	-1000, 1878, -1000, 1875, 96, 105, 1748, -249, 7741, 358,
	42024, -249, 42024, 7741, -1000, 42024, -366, -1000, 344, -249,
	3076, -1, 10162, 2922, -1000, -1000, 42024, 1866, -1000, -1000,
	-1000, 3164, 34223, 2148, 1378, 33623, -1000, 227, -1000, 217,
	509, 2223, -1000, 745, 121, 2218, 2213, -1000, -1000, -1000,
	-1000, 11974, -1000, -1000, -1000, -1000, 2361, 10162, 2409, -1000,
	852, 852, 2115, 2383, 2378, -1000, 2534, 2534, -1000, 2486,
	2533, 2486, 852, 852, 2373, -1000, 2037, 2771, -1000, 2763,
	2732, 10162, -1000, 2372, 3349, 1329, -91, -223, 68, 68,
	-1000, -1000, -1000, -1000, 68, 68, 68, 68, -1000, 68,
	68, 68, 68, 68, 68, 68, 68, 590, -135, -307,
	-143, -308, -1000, 2370, 1127, -1000, -1000, -1000, -1000, -1000,
	3331, 1126, -1000, -1000, 2213, 2208, -1000, 2207, 2205, 964,
	45061, 2367, 2995, 15608, 2969, 2031, -1000, -1000, -1000, 33023,
	497, -1000, -1000, -1000, 629, 235, 1845, 483, -1000, 42024,
	280, 2904, 1623, 2202, 42024, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2940, -1000, 939, 307, 30623, 13798, -1000, 352,
	15608, 15608, 352, 323, 1579, -1000, 589, 996, 110, 31823,
	42024, -1000, 31223, 2366, -1000, 981, 3161, -1000, 2361, 2361,
	-1000, 3161, 3161, 1543, -1000, 323, -1000, 352, -1000, 1030,
	17408, 388, 467, 456, -1000, 533, -1000, -1000, 587, 2948,
	45061, -1000, 42024, -1000, 42024, -1000, 42024, 42024, 688, 10162,
	2948, 42024, 715, -1000, -1000, 974, 315, 297, 611, 611,
	1098, -1000, 2964, -1000, -1000, 1076, -1000, -1000, -1000, -1000,
	42024, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 24023, 24023,
	3030, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2198, 2191, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 42024, 1457, -1000, 1618, 2031,
	33023, 1607, 1547, 2182, 497, 2015, 1600, -1000, 2179, -1000,
	999, 42024, 42024, -1000, 1131, -1000, 1599, 2780, 2798, 2780,
	-1000, -1000, -1000, -1000, 2837, -1000, 2822, -1000, -1000, 1131,
	-1000, -1000, -1000, -1000, -1000, 884, -1000, 3074, 871, 871,
	871, 2364, -1000, -1000, -1000, 1045, 2363, -1000, -1000, -1000,
	3204, -1000, -1000, -1000, -1000, -1000, -1000, 16208, 2939, 3157,
	3144, 32423, 3157, -1000, -328, 1583, -1000, 1954, 162, 1773,
	42024, -1000, -1000, -1000, 2362, 2359, -261, 114, 3143, 3140,
	913, -1000, 2358, 1032, -249, -1000, -1000, 986, -1000, -1000,
	-1000, 2178, -249, -1000, 986, -1000, 96, -1000, -1000, 2926,
	-1000, -1000, 2148, -1000, 213, -1000, -1000, -1000, -1000, -1000,
	-1000, 138, -1000, 42024, -1000, 1014, 120, -1000, 2361, -1000,
	-1000, -1000, -1000, -1000, 44880, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10162, -1000, -1000, -1000,
	2725, -1000, -1000, 10162, 2355, 2177, 2354, 2163, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3209, -1000, 3136, 1446, 2352, 2349, 1429, 2346,
	2345, -1000, 10162, 2342, 3331, -1000, -1000, -1000, -1000, -1000,
	-1000, 769, 352, 2340, 1012, -1000, -1000, -1000, -1000, 352,
	-1000, 2161, 154, -1000, -1000, -1000, 2158, 2155, 1844, -1000,
	-1000, 1893, 1254, 170, -1000, -1000, -1000, -1000, -1000, -1000,
	2030, 2026, 1591, -343, -1000, 2532, -1000, 1496, 1496, 1496,
	42024, 1383, -1000, 1496, 1496, 2335, -1000, 2330, 2325, -155,
	606, 1528, 1527, -1000, 1842, 25223, 31823, 31223, 1100, -1000,
	1251, -1000, -1000, -1000, -1000, -1000, 3161, 606, -1000, 370,
	1841, 11974, 2531, 11974, 2528, 382, 2527, 1352, -1000, 42024,
	-1000, -1000, 42024, 277, 2526, -1000, 2513, 2784, 345, 2512,
	2511, 42024, 2713, -1000, 2948, 42024, 635, 2936, -1000, -1000,
	-1000, 285, -1000, -1000, 396, -1000, 42024, -1000, 42024, -1000,
	1358, -1000, 24023, -1000, -1000, 1344, -1000, 2151, 2149, -1000,
	154, 2147, 5319, -1000, -1000, 2904, 2143, -1000, 42024, 999,
	999, 3209, 42024, 7741, -1000, -1000, 10162, 2500, -1000, 10162,
	-1000, -1000, -1000, -1000, -1000, 2497, 2893, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1713, -1000, 10162, 10162, -1000, -1000,
	637, 13188, -288, 252, -1000, -1000, -1000, -263, 2135, -1000,
	-1000, 3132, 2130, 2048, 42024, -1000, -1000, 986, -1000, 986,
	-261, -1000, -1000, 981, -1000, -1000, 911, 464, -1000, 2324,
	2646, -1000, 2435, 68, -1000, 68, -1000, 193, 10162, -1000,
	2123, -1000, -1000, -1000, 2118, -1000, -1000, 2377, -1000, 2322,
	45061, -156, -155, 15608, -156, -1000, -1000, 346, -1000, -1000,
	276, -1000, -1000, 1884, 537, -1000, -1000, -1000, 1587, 1775,
	2081, 28823, 24023, 24623, 2114, -1000, -1000, 30623, 1713, 1713,
	3631, 258, 45247, -1000, 2496, 928, 1524, -1000, 1840, -1000,
	1838, -1000, 3161, 1100, 109, -1000, -1000, 1375, -1000, 928,
	2270, 3130, -1000, 2779, 42024, 2756, 42024, 2493, 1584, 11974,
	-1000, 587, 2867, -1000, -1000, 277, -1000, -1000, 1784, 11974,
	-1000, -1000, 2111, 24623, 698, 1582, 1575, 724, 2490, -1000,
	405, 3203, -1000, -1000, -1000, 814, 2488, -1000, 1738, 1737,
	-1000, 42024, -1000, 28823, 28823, 697, 697, 28823, 28823, 2487,
	611, -1000, -1000, 11974, -1000, -1000, 1496, -1000, -1000, -1000,
	1496, 1355, -1000, -1000, -1000, -1000, -1000, -1000, 2026, -1000,
	-1000, 3075, -1000, -1000, 2361, 42024, 2361, 30023, -1000, 3124,
	3122, -1000, 2361, 962, -1000, -328, 42024, 42024, -265, 1835,
	-1000, 2104, 107, -1000, -1000, 970, -263, -269, 30, 24023,
	1513, -1000, -1000, -1000, -1000, -1000, 2321, -1000, 824, -1000,
	-1000, -1000, 962, 2317, 2232, -1000, -1000, -149, -1000, -1000,
	351, -1000, -1000, -1000, 508, 2096, -1000, -1000, 275, -1000,
	-1000, 2095, -1000, -1000, 116, -1000, 1497, 1331, -1000, 2486,
	10162, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 583,
	-1000, 352, 45320, -1000, 901, -1000, 911, 583, 27623, 495,
	261, -1000, 1834, -1000, -1000, 3209, -1000, 482, -1000, 349,
	-1000, 1320, -1000, 1313, 29423, 1829, 2460, -1000, 45163, 713,
	-1000, -1000, 1730, -1000, -1000, -1000, -1000, -1000, -1000, 2093,
	2092, -1000, -1000, -1000, -1000, -1000, 1826, 2484, -15, 3026,
	2091, -1000, -1000, 2483, 1290, 1281, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1264, 1260, 28823, -1000, -1000,
	1730, 1823, 24023, 1496, -1000, -1000, 1256, 1253, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2482, -1000, -1000, 3121, -265,
	-1000, 2087, 81, 88, -1000, 2086, -1000, -1000, 621, -255,
	66, 63, 59, -1000, -1000, -1000, 10162, -1000, -1000, 42024,
	401, -1000, -1000, -1000, 135, -1000, -1000, -1000, -1000, 2081,
	2074, -1000, 28823, 2964, 2371, 374, 3120, -1000, 45247, -1000,
	1496, -1000, 374, 1235, -1000, 1496, 1496, -1000, 330, -1000,
	1386, -1000, 1818, -1000, 3075, -1000, 327, -1000, 354, -1000,
	-1000, -1000, 1224, -1000, -1000, -1000, 45163, 378, -1000, 554,
	2481, -1000, -1000, 2170, 10162, 2479, 1496, 2042, -145, 28823,
	2783, 2781, 2777, 2609, 1154, -1000, -1000, 24023, -1000, -1000,
	28223, 42024, 2048, -1000, -1000, 705, 95, 88, -1000, 3116,
	106, 3112, 3107, 953, 1548, -1000, 61, 57, 55, -1000,
	-1000, -1000, -1000, 484, -1000, 215, -1000, -1000, -1000, 262,
	-1000, -1000, 2964, -1000, 3105, 522, -1000, 24023, -1000, -1000,
	27623, 1713, 1713, -1000, -1000, 1815, -1000, -1000, -1000, -1000,
	1814, -1000, -1000, -1000, 1151, -1000, 42024, 752, 7137, -1000,
	2165, -1000, 42024, -1000, 2797, -1000, 195, 1101, 262, 697,
	262, 697, 262, 697, 262, 697, 210, -1000, -1000, -1000,
	1075, -1000, -1000, 2478, 1812, 114, 89, 3103, -1000, 2048,
	3097, 2048, 2048, -1000, 71, 621, -1000, -1000, -1000, 2055,
	-1000, -1000, -1000, -1000, 1496, 1496, 2053, 2051, 306, -1000,
	-1000, -1000, 27023, 388, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 378, 45247, -1000, 7137, 1046, -1000, 2361, -1000, 611,
	-1000, -1000, 2759, 2501, 3184, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 42024, 3022, 23423, 76, -1000,
	-1000, -1000, 2049, -1000, 2048, -1000, -1000, 1490, -1000, -305,
	1805, 1795, -1000, -1000, 42024, -1000, 42024, 370, -1000, 45247,
	1040, -1000, 7137, -1000, -1000, 3201, -1000, 3196, 787, 787,
	262, 262, 262, 262, -1000, -1000, 42024, -1000, 1033, -1000,
	-1000, -1000, 1231, -1000, -1000, -1000, -1000, 2047, -1000, -1000,
	2040, -1000, -1000, -1000, 1005, 2270, -1000, -1000, -1000, -1000,
	-1000, 1849, 417, -1000, 941, -1000, 1443, -1000, 26423, 42024,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 42024, 6533, -1000,
	1158, -1000, -1000, 2361, 42024, -1000,
}

var yyPgo = [...]int{
	0, 174, 3225, 251, 179, 3811, 124, 244, 229, 219,
	243, 3809, 3808, 3807, 2960, 2955, 3806, 3805, 3804, 3803,
	3802, 3801, 3800, 3799, 3798, 3796, 3794, 3793, 3791, 3786,
	3783, 3782, 3781, 3780, 3779, 3778, 3777, 3774, 3773, 3771,
	3770, 3769, 3767, 3745, 3744, 3743, 241, 3742, 3741, 3740,
	3739, 3738, 3737, 3735, 3734, 3731, 3726, 3725, 3724, 3722,
	3721, 3716, 3715, 3714, 3712, 3711, 3710, 3709, 3707, 3706,
	3705, 3704, 3701, 3699, 3698, 3697, 3691, 3690, 3689, 214,
	3686, 2952, 3685, 3684, 3683, 3681, 3678, 3677, 3676, 237,
	3673, 3671, 3667, 3665, 3661, 3658, 3656, 3655, 3654, 3653,
	3650, 235, 3649, 3648, 3647, 3646, 242, 3645, 211, 3643,
	177, 170, 3638, 3636, 3635, 3634, 3633, 3632, 234, 192,
	71, 3631, 48, 3630, 3629, 218, 3626, 147, 3625, 148,
	3624, 3623, 3621, 3620, 3616, 3615, 3614, 3613, 3612, 3611,
	3610, 3609, 3606, 3604, 3603, 3602, 92, 3601, 252, 3600,
	70, 3599, 3598, 125, 85, 153, 249, 1842, 254, 247,
	189, 182, 108, 3597, 2974, 3590, 162, 232, 161, 28,
	3585, 133, 3584, 257, 51, 45, 246, 142, 57, 164,
	120, 3583, 210, 106, 105, 3579, 3578, 141, 239, 181,
	3576, 100, 3575, 3574, 3573, 3570, 3568, 200, 194, 3567,
	3566, 129, 3565, 3564, 131, 3563, 74, 127, 173, 115,
	3562, 102, 123, 132, 117, 93, 3560, 83, 3559, 3558,
	3556, 3554, 185, 3552, 3548, 130, 65, 3547, 3544, 3541,
	69, 3540, 76, 3538, 31, 3536, 62, 3534, 3532, 3529,
	3528, 3527, 3526, 3524, 3523, 3522, 3521, 3520, 3518, 55,
	3517, 3513, 7, 15, 14, 3512, 25, 3511, 171, 3510,
	3507, 3506, 3502, 3500, 90, 86, 3499, 87, 172, 3498,
	8, 27, 72, 3484, 3483, 222, 660, 99, 156, 3482,
	303, 3479, 3476, 3475, 157, 3473, 530, 3472, 3471, 3470,
	3467, 3466, 3464, 121, 3463, 213, 42, 3462, 128, 135,
	3461, 41, 54, 201, 221, 3459, 3458, 3457, 134, 231,
	111, 36, 0, 3455, 159, 3453, 3452, 3451, 272, 3448,
	236, 268, 168, 226, 253, 250, 3447, 3440, 66, 3439,
	163, 33, 49, 145, 81, 21, 203, 3437, 401, 9,
	188, 3436, 206, 3435, 183, 16, 349, 143, 3434, 3433,
	34, 258, 3428, 3427, 3426, 126, 3424, 3423, 176, 79,
	3420, 3419, 3418, 3417, 35, 3416, 39, 12, 3415, 97,
	3414, 245, 3413, 208, 151, 186, 184, 152, 224, 225,
	80, 77, 3411, 1667, 149, 96, 26, 3410, 220, 3409,
	227, 118, 3407, 138, 3405, 238, 255, 209, 3404, 187,
	10, 46, 38, 29, 43, 11, 228, 217, 3403, 3402,
	19, 47, 3401, 61, 3400, 18, 3399, 3396, 73, 5,
	3395, 3394, 17, 20, 3393, 37, 212, 175, 113, 91,
	64, 3390, 3389, 56, 139, 3387, 150, 158, 166, 3386,
	75, 3382, 3381, 3379, 706, 3378, 248, 3377, 3376, 3375,
	3373, 3372, 3371, 3368, 3367, 3366, 3365, 103, 44, 3362,
	3361, 3359, 3358, 78, 137, 3356, 3355, 3354, 3351, 32,
	136, 3350, 13, 3349, 24, 22, 30, 3348, 98, 3346,
	3, 190, 3344, 3343, 4, 3342, 3341, 1, 2, 3340,
	3339, 119, 3337, 94, 23, 169, 109, 3336, 3335, 88,
	207, 146, 3334, 3332, 95, 240, 205, 3331, 122, 223,
	256, 3329, 215, 3326, 3325, 3324, 3322, 3320, 3318, 1106,
	3317, 3316, 233, 67, 89, 110, 3313, 3311, 3304, 84,
	167, 116, 112, 68, 82, 3303, 107, 204, 3302, 199,
	3300, 3299, 101, 3298, 3296, 3294, 3293, 198, 3291, 3288,
	197, 230, 3287, 3278, 302, 3277, 3273, 3267, 3265, 3256,
	3249, 3248, 3242, 3239, 3237, 269, 274, 3221,
}

//line mysql_sql.y:11300
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 560, 563, 563, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 116, 116, 115, 545, 545, 545, 546,
	546, 112, 134, 133, 136, 136, 135, 135, 132, 132,
	128, 131, 131, 130, 130, 129, 124, 126, 126, 125,
	127, 127, 113, 101, 114, 490, 490, 489, 489, 488,
	488, 441, 441, 487, 487, 487, 486, 486, 486, 485,
	485, 484, 484, 483, 483, 481, 481, 482, 480, 479,
	479, 479, 477, 477, 477, 473, 473, 475, 474, 474,
	476, 468, 468, 471, 471, 469, 469, 469, 469, 472,
	467, 467, 467, 466, 466, 100, 100, 100, 385, 385,
	99, 99, 399, 399, 399, 399, 399, 397, 397, 397,
	397, 397, 397, 396, 396, 395, 395, 400, 400, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 90,
	90, 90, 90, 90, 95, 95, 95, 551, 551, 550,
	550, 552, 552, 552, 552, 553, 553, 93, 93, 93,
	94, 394, 394, 394, 91, 92, 92, 384, 384, 389,
	389, 388, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 393, 393, 393, 391, 391, 390,
	390, 392, 392, 84, 84, 84, 87, 86, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 85, 85, 85,
	85, 85, 85, 80, 80, 80, 80, 80, 79, 79,
	81, 81, 381, 381, 380, 96, 96, 97, 548, 548,
	547, 549, 549, 549, 549, 98, 104, 104, 104, 104,
	104, 104, 104, 103, 103, 106, 106, 105, 107, 89,
	89, 89, 89, 89, 89, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 515, 515,
	515, 517, 517, 316, 317, 564, 319, 315, 315, 315,
	511, 511, 512, 513, 514, 514, 514, 102, 11, 11,
	11, 11, 11, 11, 11, 11, 13, 78, 83, 83,
	257, 257, 262, 262, 263, 263, 263, 268, 268, 269,
	269, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 244, 244, 244, 239, 239, 239, 239,
	240, 240, 241, 241, 242, 242, 242, 242, 243, 243,
	309, 309, 264, 264, 264, 266, 266, 265, 261, 259,
	259, 259, 259, 259, 259, 259, 260, 260, 260, 260,
	267, 267, 76, 82, 82, 82, 528, 528, 77, 539,
	539, 444, 444, 330, 330, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 449, 450, 326, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 53, 56, 52, 52, 52, 370,
	370, 51, 565, 565, 304, 304, 64, 63, 55, 65,
	66, 67, 68, 69, 70, 50, 62, 62, 62, 62,
	62, 62, 62, 62, 73, 462, 462, 567, 567, 567,
	71, 72, 443, 443, 443, 61, 60, 59, 58, 57,
	57, 49, 49, 48, 48, 54, 140, 141, 141, 323,
	323, 323, 325, 325, 321, 566, 566, 413, 413, 324,
	324, 47, 47, 47, 47, 74, 322, 322, 303, 320,
	320, 320, 12, 12, 10, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 25,
	26, 28, 378, 378, 375, 27, 19, 18, 18, 22,
	21, 17, 17, 20, 23, 24, 24, 9, 9, 9,
	9, 14, 14, 15, 161, 161, 212, 212, 523, 523,
	519, 519, 520, 520, 520, 521, 521, 522, 522, 108,
	456, 456, 456, 456, 456, 456, 8, 183, 183, 455,
	455, 455, 455, 455, 455, 382, 382, 382, 500, 500,
	500, 501, 182, 182, 177, 177, 457, 457, 347, 502,
	502, 465, 465, 464, 464, 463, 463, 180, 180, 181,
	181, 164, 164, 119, 119, 470, 470, 470, 470, 478,
	478, 440, 440, 249, 249, 296, 296, 297, 297, 154,
	154, 155, 155, 155, 155, 155, 155, 554, 554, 555,
	556, 557, 557, 558, 558, 558, 559, 559, 559, 559,
	559, 508, 508, 510, 510, 509, 179, 179, 175, 175,
	176, 176, 176, 174, 174, 173, 172, 172, 171, 169,
	169, 169, 170, 170, 170, 187, 187, 157, 157, 157,
	156, 156, 156, 156, 156, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 158, 158, 516,
	516, 516, 445, 445, 445, 452, 452, 277, 277, 278,
	278, 276, 276, 159, 159, 160, 160, 160, 160, 275,
	275, 274, 162, 162, 168, 167, 167, 163, 163, 163,
	163, 285, 285, 284, 284, 284, 284, 111, 117, 117,
	118, 186, 186, 283, 282, 282, 282, 185, 185, 184,
	184, 178, 178, 166, 166, 166, 166, 281, 165, 279,
	544, 544, 543, 543, 542, 540, 540, 540, 541, 541,
	541, 541, 492, 492, 492, 492, 492, 310, 310, 310,
	314, 314, 313, 313, 313, 313, 313, 318, 7, 7,
	7, 7, 7, 7, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 38, 196, 197,
	39, 198, 198, 199, 199, 200, 200, 201, 202, 203,
	203, 203, 203, 37, 188, 188, 189, 189, 190, 190,
	191, 192, 192, 192, 195, 193, 194, 194, 562, 562,
	561, 36, 36, 29, 147, 147, 148, 148, 148, 150,
	150, 245, 245, 245, 149, 149, 151, 151, 151, 524,
	527, 525, 525, 529, 529, 529, 530, 530, 530, 530,
	531, 531, 30, 137, 142, 534, 534, 534, 533, 533,
	535, 535, 536, 536, 300, 300, 301, 301, 145, 146,
	146, 144, 139, 153, 153, 153, 153, 153, 138, 143,
	526, 532, 532, 532, 379, 379, 376, 377, 377, 374,
	373, 373, 373, 538, 538, 537, 537, 537, 311, 311,
	31, 369, 369, 371, 372, 372, 372, 363, 363, 363,
	363, 35, 367, 367, 368, 368, 368, 368, 368, 368,
	368, 364, 364, 366, 366, 362, 362, 362, 362, 362,
	362, 362, 34, 152, 152, 361, 361, 358, 358, 356,
	356, 357, 357, 355, 355, 355, 359, 359, 42, 75,
	43, 44, 45, 41, 360, 360, 33, 33, 33, 33,
	33, 33, 33, 33, 121, 120, 120, 120, 120, 120,
	123, 123, 299, 299, 298, 298, 122, 246, 246, 40,
	224, 224, 432, 432, 427, 427, 427, 427, 427, 447,
	447, 447, 428, 428, 428, 429, 429, 429, 431, 431,
	431, 430, 430, 430, 430, 430, 446, 446, 448, 448,
	448, 401, 401, 402, 402, 402, 405, 405, 419, 419,
	420, 420, 418, 418, 425, 425, 424, 424, 423, 423,
	422, 422, 421, 421, 421, 421, 416, 416, 415, 415,
	403, 403, 403, 403, 403, 404, 404, 404, 414, 414,
	417, 417, 273, 273, 272, 272, 232, 232, 233, 233,
	271, 271, 230, 230, 231, 231, 231, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 498, 498, 499, 235, 235, 247, 247, 247,
	247, 247, 247, 234, 234, 236, 236, 213, 213, 211,
	211, 211, 211, 204, 204, 205, 205, 206, 206, 206,
	210, 210, 209, 209, 209, 209, 207, 207, 208, 208,
	208, 208, 208, 208, 387, 387, 495, 495, 496, 496,
	491, 491, 491, 494, 494, 494, 494, 494, 494, 494,
	497, 497, 497, 493, 493, 214, 294, 294, 294, 312,
	312, 312, 312, 293, 293, 293, 229, 229, 228, 228,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 386, 386, 327, 327, 328, 328, 256, 255,
	255, 255, 255, 255, 253, 254, 252, 252, 252, 252,
	252, 251, 251, 250, 250, 250, 365, 365, 248, 248,
	238, 238, 238, 237, 237, 237, 426, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 291, 291, 291, 292, 292, 292,
	292, 292, 292, 292, 292, 337, 337, 343, 343, 507,
	507, 506, 215, 215, 215, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 225, 225, 225, 410, 410, 410,
	410, 411, 411, 411, 411, 412, 412, 412, 408, 408,
	409, 409, 348, 349, 349, 453, 453, 454, 454, 406,
	406, 407, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 461, 461, 461, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 518, 518, 518, 503, 503, 503, 504, 504, 504,
	504, 504, 504, 504, 504, 504, 504, 504, 504, 505,
	505, 505, 505, 505, 505, 505, 505, 505, 505, 505,
	505, 505, 505, 505, 505, 505, 289, 289, 289, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 350, 350, 351, 351, 458, 458,
	458, 458, 458, 458, 459, 459, 460, 460, 460, 460,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 335,
	286, 286, 286, 352, 344, 344, 345, 345, 346, 346,
	338, 338, 338, 338, 338, 338, 339, 339, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	340, 340, 342, 342, 354, 354, 354, 353, 353, 353,
	353, 353, 353, 353, 227, 227, 227, 227, 332, 332,
	332, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 217, 217, 217, 217, 221, 221, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 222, 222, 222, 222, 222, 220, 220,
	220, 220, 220, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 109, 110, 110, 219, 295, 295, 433, 433, 436,
	436, 434, 434, 435, 437, 437, 437, 438, 438, 438,
	439, 439, 439, 442, 442, 302, 302, 302, 308, 308,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 4, 0, 1, 1, 0,
	1, 5, 2, 2, 6, 9, 6, 9, 4, 7,
	8, 0, 1, 1, 2, 4, 6, 1, 2, 4,
	0, 2, 10, 10, 2, 0, 2, 1, 3, 3,
	3, 0, 2, 1, 3, 5, 0, 2, 3, 1,
	3, 1, 1, 1, 3, 1, 1, 1, 1, 0,
	3, 3, 0, 3, 3, 0, 1, 3, 0, 1,
	3, 0, 2, 1, 2, 3, 4, 3, 3, 1,
	0, 1, 1, 0, 1, 8, 5, 7, 0, 3,
	8, 5, 1, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 4, 1, 3, 1,
	2, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	2, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	1, 1, 2, 2, 1, 1, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 4, 4, 1, 3, 3,
	1, 2, 2, 2, 1, 2, 2, 3, 4, 4,
	6, 1, 1, 1, 2, 4, 6, 1, 4, 1,
	3, 3, 4, 4, 4, 4, 3, 3, 2, 4,
	4, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 2, 2, 0, 1,
	4, 2, 4, 1, 5, 3, 2, 1, 2, 2,
	4, 4, 5, 2, 1, 3, 4, 4, 1, 2,
	9, 7, 1, 3, 3, 1, 1, 3, 1, 3,
	2, 1, 2, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 2, 4, 3, 3, 1,
	1, 1, 1, 1, 1, 2, 3, 4, 7, 2,
	3, 3, 4, 5, 3, 4, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 1, 1, 1, 1, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 10, 7, 4, 4,
	1, 3, 1, 6, 3, 3, 3, 1, 1, 1,
	3, 2, 4, 5, 5, 6, 5, 5, 3, 2,
	2, 1, 3, 4, 3, 7, 5, 8, 2, 2,
	1, 3, 2, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 2, 1, 3, 2, 1, 2,
	2, 1, 2, 3, 2, 2, 3, 6, 3, 3,
	1, 1, 7, 7, 8, 8, 0, 4, 7, 0,
	3, 0, 2, 0, 1, 1, 1, 1, 4, 2,
	2, 3, 3, 4, 5, 3, 4, 4, 2, 2,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 2, 5, 5, 0,
	2, 7, 0, 1, 0, 1, 5, 5, 3, 3,
	2, 4, 4, 4, 4, 4, 1, 1, 1, 3,
	3, 1, 1, 1, 6, 0, 1, 1, 1, 1,
	5, 5, 0, 1, 1, 3, 3, 3, 4, 6,
	7, 4, 4, 7, 8, 3, 3, 3, 4, 0,
	2, 2, 0, 2, 2, 1, 1, 1, 1, 0,
	1, 4, 4, 5, 4, 3, 1, 3, 1, 1,
	3, 5, 2, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 4, 1, 3, 1, 4, 6, 6, 4, 4,
	4, 4, 4, 3, 6, 3, 5, 1, 1, 2,
	2, 11, 8, 9, 1, 3, 2, 4, 0, 2,
	0, 1, 1, 1, 1, 0, 1, 0, 1, 4,
	2, 1, 5, 4, 4, 2, 5, 1, 3, 2,
	1, 5, 4, 4, 2, 0, 5, 4, 0, 1,
	3, 3, 1, 3, 1, 3, 1, 3, 4, 0,
	1, 0, 1, 1, 3, 1, 1, 0, 4, 1,
	3, 2, 1, 0, 8, 0, 4, 7, 4, 0,
	2, 0, 2, 0, 2, 0, 4, 1, 3, 1,
	1, 6, 4, 5, 7, 4, 5, 0, 1, 3,
	8, 0, 6, 0, 4, 6, 1, 1, 1, 1,
	1, 2, 3, 1, 3, 6, 0, 3, 0, 1,
	2, 4, 4, 0, 1, 3, 1, 3, 3, 0,
	1, 1, 0, 2, 2, 0, 2, 3, 3, 3,
	1, 3, 3, 3, 3, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 7, 7, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 2, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 3, 1, 1, 1, 4, 4, 4,
	3, 2, 2, 2, 3, 2, 3, 4, 1, 3,
	4, 0, 2, 1, 1, 2, 2, 0, 1, 2,
	4, 1, 3, 1, 3, 2, 3, 1, 4, 3,
	0, 1, 1, 2, 5, 2, 2, 2, 0, 2,
	3, 3, 0, 1, 3, 1, 3, 0, 1, 2,
	1, 1, 0, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 1,
	7, 1, 3, 0, 1, 1, 3, 1, 3, 0,
	1, 1, 1, 14, 1, 3, 0, 1, 1, 3,
	1, 1, 2, 4, 1, 1, 1, 1, 0, 1,
	2, 9, 9, 7, 1, 2, 3, 3, 3, 0,
	4, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	4, 1, 1, 3, 4, 3, 0, 1, 1, 1,
	0, 2, 7, 8, 8, 0, 3, 3, 0, 3,
	0, 3, 0, 5, 1, 3, 0, 3, 3, 0,
	2, 9, 6, 0, 2, 2, 3, 3, 4, 4,
	1, 0, 2, 2, 1, 3, 2, 1, 3, 2,
	1, 3, 2, 0, 1, 3, 4, 3, 1, 1,
	4, 1, 3, 1, 1, 1, 1, 0, 1, 1,
	1, 11, 0, 2, 3, 3, 2, 2, 3, 1,
	1, 1, 3, 3, 4, 0, 2, 2, 2, 2,
	2, 2, 6, 0, 4, 1, 1, 0, 3, 0,
	1, 1, 2, 4, 4, 4, 0, 1, 8, 2,
	4, 4, 4, 9, 0, 2, 11, 9, 11, 8,
	6, 9, 7, 10, 2, 2, 9, 4, 5, 3,
	0, 4, 1, 3, 0, 3, 6, 0, 2, 10,
	0, 2, 0, 2, 0, 3, 2, 4, 3, 0,
	2, 1, 0, 2, 3, 0, 2, 3, 0, 2,
	1, 0, 3, 2, 4, 3, 0, 1, 0, 1,
	1, 0, 6, 0, 3, 5, 0, 4, 0, 3,
	1, 3, 4, 5, 0, 3, 1, 3, 2, 3,
	1, 2, 0, 4, 6, 5, 0, 2, 0, 2,
	4, 5, 4, 5, 1, 5, 6, 5, 0, 3,
	0, 1, 1, 3, 3, 3, 0, 4, 1, 3,
	3, 3, 0, 1, 1, 3, 2, 3, 3, 3,
	4, 4, 3, 3, 3, 3, 4, 4, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	5, 4, 1, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 5, 7, 0, 1, 1, 3, 1, 1, 1,
	1, 1, 7, 9, 7, 9, 2, 1, 7, 9,
	7, 9, 8, 5, 0, 1, 0, 1, 1, 1,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 3, 1, 3, 5, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 2,
	1, 2, 2, 1, 1, 2, 2, 2, 3, 3,
	2, 2, 1, 5, 6, 4, 1, 1, 1, 5,
	4, 1, 1, 2, 0, 1, 1, 2, 5, 0,
	1, 1, 2, 2, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 2, 2, 2, 0, 3, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 3, 5, 2, 2, 2, 2, 1,
	1, 2, 5, 6, 8, 6, 6, 6, 1, 1,
	1, 1, 1, 1, 4, 4, 4, 7, 9, 7,
	7, 7, 9, 7, 7, 0, 2, 0, 1, 1,
	2, 4, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 2, 2, 2, 0, 1, 1, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 5,
	0, 1, 3, 0, 1, 0, 2, 0, 2, 0,
	1, 6, 8, 8, 6, 6, 5, 5, 5, 6,
	6, 6, 6, 5, 6, 6, 6, 6, 6, 6,
	6, 6, 1, 1, 1, 4, 4, 6, 8, 6,
	4, 5, 4, 4, 4, 3, 4, 6, 6, 7,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 8, 4,
	2, 3, 2, 4, 2, 2, 4, 6, 2, 2,
	4, 6, 4, 2, 0, 1, 2, 3, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 1, 1, 3, 0, 1, 1, 3, 1, 3,
	3, 3, 3, 3, 2, 1, 1, 1, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 1, 3,
	4, 4, 5, 4, 5, 3, 4, 5, 6, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 2, 3, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 4,
	1, 2, 3, 5, 1, 1, 3, 0, 1, 0,
	3, 0, 3, 3, 0, 3, 5, 0, 3, 5,
	0, 1, 1, 0, 1, 1, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -560, -563, -2, -5, 612, -1, -4, -110, -84,
	-7, -112, -113, -8, -108, -9, -10, -12, -88, -103,
	-105, -107, -106, -46, -11, -102, -79, -80, -90, -96,
	-99, -100, -101, -114, -109, -111, -154, -115, -116, 602,
	-85, -86, -87, -32, -31, -30, -29, -137, -142, 608,
	446, 14, 495, -14, -15, -508, -16, 258, -315, -316,
	-317, -319, -564, -47, -48, -49, -57, -58, -59, -60,
	-61, -71, -72, -73, -50, -51, -52, -55, -53, -64,
	-63, -65, -66, -67, -68, -69, -70, -54, -140, -141,
	-74, -56, -75, -77, -76, -82, -78, -83, -139, -144,
	-13, 233, -81, 76, -91, -92, -93, -94, -95, -97,
	-98, 370, 376, 433, 601, 61, -155, -157, 618, 619,
	158, 159, 161, 162, -33, -34, -35, -36, -37, -38,
	-40, -39, -41, -42, -43, -44, -45, 229, 16, 538,
	-17, -20, -18, -21, -19, -27, -28, -26, -23, -25,
	-138, -24, -143, -22, 253, 252, 38, 319, 320, 321,
	374, 251, 230, 15, 31, 42, 350, -156, 82, 530,
	531, 533, 231, -158, 13, 623, -6, -3, -2, -124,
	-128, -132, -135, -136, -133, -134, -4, -110, 116, 243,
	603, -312, 366, 604, 606, 605, 85, 93, -305, -307,
	446, 258, 370, 376, 601, 619, 543, 544, 545, 546,
	547, 548, 549, 550, 552, 553, 554, 555, 556, 557,
	558, 568, 569, 559, 560, 561, 562, 563, 564, 565,
	566, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 498, 588, 589, 590, 591,
	526, 551, 587, 348, 349, 535, 270, 294, 401, 300,
	307, 158, 177, 171, 199, 191, 531, 166, 274, 312,
	275, 92, 161, 481, 106, 458, 430, 164, 289, 291,
	293, 527, 528, 360, 296, 525, 295, 297, 299, 529,
	276, 351, 187, 182, 288, 272, 180, 277, 40, 278,
	204, 279, 280, 540, 454, 347, 460, 304, 52, 428,
	181, 455, 292, 457, 208, 212, 472, 473, 175, 176,
	462, 475, 203, 206, 207, 250, 344, 345, 43, 537,
	262, 476, 210, 202, 198, 484, 308, 306, 201, 174,
	197, 273, 65, 214, 213, 215, 424, 425, 426, 427,
	281, 282, 364, 471, 194, 183, 352, 167, 23, 479,
	257, 459, 377, 283, 301, 309, 209, 211, 264, 269,
	539, 530, 432, 268, 305, 477, 179, 261, 290, 256,
	480, 168, 533, 379, 284, 162, 298, 474, 483, 64,
	392, 173, 165, 247, 159, 266, 271, 285, 286, 287,
	524, 311, 310, 302, 532, 195, 263, 200, 185, 172,
	196, 160, 265, 482, 393, 599, 350, 411, 193, 190,
	267, 240, 478, 461, 163, 415, 394, 188, 313, 595,
	596, 597, 365, 343, 314, 315, 186, 254, 452, 453,
	318, 421, 334, 395, 431, 402, 396, 221, 222, 322,
	464, 466, 205, 598, 323, 324, 325, 456, 326, 327,
	328, 329, 369, 56, 58, 94, 96, 620, 621, 63,
	29, 355, 358, 390, 397, 336, 600, 536, 333, 337,
	338, 359, 25, 413, 381, 417, 416, 48, 49, 50,
	53, 54, 55, 57, 59, 60, 51, 523, 374, 387,
	485, 45, 47, 384, 27, 361, 412, 434, 332, 414,
	445, 46, 443, 444, 465, 26, 363, 362, 62, 44,
	420, 422, 423, 316, 330, 372, 609, 486, 367, 383,
	386, 368, 335, 357, 388, 67, 66, 380, 610, 375,
	373, 331, 541, 542, 339, 567, 353, 429, 520, 519,
	518, 517, 516, 515, 514, 513, 319, 320, 321, 398,
	399, 400, 410, 403, 404, 405, 406, 407, 408, 409,
	448, 449, 611, 467, 469, 470, 468, 235, 622, 354,
	238, 613, 614, 95, 615, 617, 616, 28, -392, -390,
	-312, 531, 601, 376, 530, 533, 370, 350, 619, 374,
	258, 319, 320, 321, 446, -198, -312, 622, -164, 39,
	-211, -312, -164, -81, -15, -14, -156, -157, -211, 237,
	-320, 24, 428, -89, 429, 233, 82, 77, -312, -9,
	-101, -8, -108, -79, -154, 433, -318, -312, 319, 319,
	-318, 237, -312, 268, 409, -444, 243, -396, -369, 269,
	-395, -371, -398, -372, 32, 229, 231, 230, 265, 16,
	374, 239, 14, 13, 375, 251, 25, 26, 28, 15,
	376, 378, 29, 379, 382, 383, 384, 42, 387, 388,
	258, 85, 93, 88, 276, -197, -312, -346, -338, 113,
	-341, -333, -334, -336, -487, -481, -331, 82, 140, 141,
	148, 114, -335, -426, 36, 116, 547, 551, 587, 496,
	-287, -288, -289, -290, -291, -292, -312, -482, -480, 88,
	97, 99, 103, 104, 102, 100, 152, 184, 101, 89,
	153, -157, 85, -503, 557, -306, 580, 588, 589, 590,
	591, 579, 61, -451, -460, 236, -458, 151, 189, 254,
	185, 14, 146, 421, 186, 554, 576, 498, 558, 568,
	583, 549, 550, 552, 544, 545, 546, 548, 559, 561,
	575, -461, 571, 581, 582, 567, 584, 585, 586, 617,
	87, 86, 574, 573, 560, 555, 556, 562, 543, 553,
	563, 564, 572, 577, 578, 358, 106, 359, 360, 488,
	351, 361, 243, 428, 70, 362, 363, 364, 365, 366,
	495, 367, 71, 368, 357, 258, 411, 369, 188, 205,
	500, 499, 501, 492, 489, 487, 490, 491, 493, 494,
	565, 566, 570, -117, -118, 593, -554, -280, -555, 6,
	7, 8, 9, -556, 153, -545, 430, 539, 88, 163,
	160, -383, 163, 112, 168, 167, -383, 322, 264, -360,
	-147, 348, 411, 326, 94, 268, -363, -361, 527, -446,
	316, 312, 288, 238, 109, -148, 248, 247, 107, 488,
	236, 385, 307, 56, 58, -519, -520, 226, 227, 228,
	-510, 521, -509, -312, 360, 96, 27, 237, 371, 264,
	466, 464, 465, 467, 468, 469, 470, -62, -462, -443,
	461, 460, -324, 453, 459, 451, 463, 454, 349, 328,
	327, 229, 613, 528, 522, -302, 395, 431, 485, 486,
	372, 432, 472, 474, 455, 106, 192, 189, 238, 240,
	237, 348, 488, 411, 94, 326, -519, 160, 472, 474,
	268, 409, 41, -389, 421, -388, -390, 473, 484, 86,
	87, 471, -302, 106, 452, 452, -554, -280, -155, -157,
	-111, -508, 529, 529, 529, 238, 348, 411, 268, 239,
	237, 524, 527, 240, 488, 236, 319, 371, 264, 326,
	94, -445, -516, 32, -452, 223, 224, 225, 33, 34,
	-1, 120, 623, -338, -338, -6, 626, -6, -338, -312,
	-312, 155, -217, -221, -218, -220, -219, -223, -222, 189,
	190, 151, 193, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 206, 207, 204, 31, 205, 254, 185, 186,
	187, 188, 208, 171, 191, 536, 216, 172, 217, 173,
	218, 174, 219, 175, 176, 220, 177, 180, 181, 182,
	183, 179, 154, 82, 154, 88, -180, 260, -211, 154,
	627, -180, -554, -173, -174, 11, -211, -293, -312, 430,
	123, -89, 77, -89, 429, 77, -511, -512, -513, -515,
	233, 429, 428, -106, 154, 276, 17, -318, -318, 80,
	-211, -371, 268, -396, -369, 36, 79, 155, 241, 155,
	79, 82, 372, 348, 411, 373, 488, 237, 385, 240,
	268, 386, 348, 411, 237, 240, 488, 268, 348, 237,
	240, 411, 268, 386, 451, 452, 240, 27, 377, 380,
	381, 452, -466, 484, 155, 112, 109, 110, 111, -338,
	130, -353, 123, 124, 125, 126, 127, 128, 129, 137,
	136, 147, 140, 141, 142, 143, 144, 145, 146, 138,
	139, 133, 113, 131, 135, 132, 115, -157, -338, -346,
	61, -336, -336, -336, -336, -426, -343, -338, 82, 82,
	82, 82, 154, 100, 88, -338, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, -459, 82,
	82, -350, -351, 82, 82, -331, -293, 82, 88, 88,
	82, 82, 82, 88, -351, -351, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, -174,
	155, -173, 82, -173, -174, -158, -157, 32, 33, 32,
	33, 32, 33, 32, 33, -557, 610, 82, 97, 620,
	221, 477, 538, 166, 167, 168, -196, -312, -198, 371,
	240, 524, 240, -148, -358, 243, -358, -358, -358, -358,
	239, -358, 24, 237, 237, 237, 237, -358, 495, 123,
	123, 59, -521, 170, 155, -510, -179, 82, -323, 131,
	135, -323, 24, 266, 266, 266, -323, 306, -565, -566,
	17, 133, -321, -566, -321, -321, -323, -567, 239, 462,
	43, 267, 266, -175, -176, 22, -175, 456, 452, -413,
	457, 458, -325, -566, -324, -323, -323, -324, -323, -323,
	-323, 32, 237, 240, 488, 326, 614, -565, -565, 31,
	31, -444, -444, -211, -444, 522, -303, -312, -444, -444,
	-444, -522, 242, -551, -550, 475, -553, 477, 160, -390,
	160, -390, -371, 268, 268, 155, 123, 24, -391, 123,
	134, -390, -390, -391, -391, -234, 41, -311, 151, -312,
	88, -234, 41, -548, -547, -211, -174, -158, -157, 83,
	83, 83, 532, 532, 532, -444, -444, -444, -444, -444,
	-446, -444, -444, -444, -444, -444, -318, -188, -312, -198,
	243, -444, -444, -159, -160, 142, -338, -312, -159, -3,
	-126, -125, 117, 118, 120, 604, 366, 603, 607, 601,
	-390, 41, -439, 393, 392, -433, -435, 82, -434, 82,
	-434, -434, -434, -434, -434, 82, 82, -436, 82, -436,
	-436, -433, -437, 82, -437, -438, 82, -438, -437, -312,
	-344, -346, -312, 39, -455, 61, -154, 82, 31, 82,
	-312, 88, -456, 61, -154, 82, 31, -174, -119, 39,
	-176, 21, 154, 97, 88, -106, -89, 77, -106, 83,
	155, -514, 103, 104, -517, 203, 195, -312, -104, 88,
	-7, -8, -9, -10, -46, -79, -154, -483, -481, 82,
	32, 420, 79, 17, -397, 237, 488, 371, 264, 240,
	348, -395, -378, -375, -373, -311, -371, -374, -373, -400,
	-293, 452, -120, 435, 434, 318, -338, -338, -338, -338,
	-338, 102, 113, 343, 103, 104, -333, -354, 32, 314,
	315, -334, -334, -334, -334, -334, -334, -334, -334, -334,
	-334, -334, -334, -342, -352, -426, 82, 133, 131, 135,
	132, 115, -336, -336, -334, -334, 83, 155, -507, -506,
	117, -338, -338, -338, -338, -312, -504, -505, 502, 503,
	504, 505, 506, 507, 508, 509, 510, 511, 512, 362,
	357, 363, 361, 351, 369, 364, 365, 188, 519, 520,
	513, 514, 515, 516, 517, 518, -344, -344, -338, -504,
	-344, -286, 33, 32, -346, -346, -346, 83, -338, -518,
	341, 340, 342, -177, -312, -344, 83, 83, 83, 97,
	-346, -346, -344, -334, -344, -505, -286, -286, -286, -286,
	142, -346, -346, -286, -286, -286, -286, 142, -286, -286,
	-286, -286, -286, -286, -286, -286, 83, 83, 83, 142,
	-346, -175, -118, -464, -463, -338, 41, -119, -176, -558,
	611, 82, -293, -546, 88, 88, 624, 478, 479, 164,
	167, 166, 35, 82, -188, -358, -358, -358, -524, -312,
	113, -379, -376, -373, -312, -312, -369, -312, -312, -211,
	-358, -358, -358, -358, -211, -245, 53, 54, 55, -373,
	-149, 56, 57, -522, -509, 35, -178, -312, -276, 18,
	-336, -336, -373, 268, -565, -323, -323, -304, -303, -325,
	-320, -325, -325, -276, -321, -323, -323, -338, -325, -321,
	-276, -312, 452, -276, -276, -413, -323, -322, -312, -322,
	-358, -303, -304, -304, -211, -211, -257, -262, -258, -263,
	260, 234, 355, 356, 232, 230, 11, 231, -270, 307,
	-359, 496, -240, -241, 77, 42, -243, 258, 397, 390,
	270, 274, 92, 275, 430, 276, 239, 278, 279, 280,
	295, 297, 250, 281, 282, 283, 421, 284, 159, 296,
	285, 286, 287, 373, -235, 6, 329, 41, 51, 52,
	444, 443, 541, 538, 271, -524, -524, 31, 31, -379,
	-312, -312, -167, -162, -166, -163, -168, -279, -281, -165,
	82, -211, -157, -312, 155, 476, 478, 479, -551, -391,
	-551, -391, 32, 420, -394, 420, 32, -369, -388, 472,
	474, -384, 88, 421, -374, -393, 79, 151, -463, -391,
	-391, -393, -393, 150, 155, -549, 477, 478, 226, -175,
	97, 97, 97, -213, -211, -524, -378, -369, -312, -444,
	-213, -213, -213, -312, -312, 82, 154, 36, -312, -312,
	-275, 155, -274, 17, -313, -312, 35, 88, 154, -275,
	-127, -125, 119, -338, -6, 603, -338, -6, -6, -338,
	-6, -338, -442, 394, 97, 97, -295, 88, -295, 97,
	97, 97, 83, 88, -382, 79, -457, -347, -502, 593,
	-182, 83, -177, -500, -501, -177, -181, -312, 627, 627,
	-457, -182, 83, -500, -175, 594, -119, -172, -171, -338,
	-312, 24, -106, -89, -512, 154, 155, -178, -397, -377,
	-374, -399, 142, -312, -385, 155, 538, 627, 86, 241,
	-538, -537, 412, 83, 155, -467, 242, 495, 88, 624,
	428, 221, 222, 102, 343, 103, 104, -426, -346, -342,
	-336, -336, -334, -334, -340, 255, -340, 112, -338, -337,
	-506, 119, -338, 35, 155, 35, 155, 80, 154, 83,
	83, 17, 17, 83, -338, 83, 83, 83, 83, 17,
	17, -338, 83, 154, 83, 83, 83, 83, 80, 83,
	155, 83, 155, -346, -346, -338, -346, 83, 83, 83,
	-338, -338, -338, -346, 83, -338, -338, -338, -338, -338,
	-338, -338, -338, -407, 447, -407, -407, 155, 155, 155,
	83, -119, 82, 97, 155, 621, -299, -298, 88, 165,
	168, 168, 167, -197, -199, -200, -201, -202, -203, 133,
	156, 157, 82, -211, -211, -211, -527, 398, 36, -539,
	155, 41, -537, 488, -145, 318, -362, 80, -152, 17,
	538, -211, -211, -211, -211, -224, 35, 17, -161, -212,
	-312, 82, 83, 155, -338, -370, 80, -312, -304, -276,
	-276, -325, -276, -276, 155, 23, -323, -325, -325, -321,
	154, -303, -432, 35, -179, 155, 21, 260, -210, -309,
	-207, -209, 245, -328, -208, 248, -496, 246, 244, 107,
	249, 303, 108, 239, -309, -309, 245, -244, 241, 35,
	-309, -260, 239, 346, 303, 246, 21, 260, -259, 239,
	108, -312, 245, 249, 246, 244, -308, 123, -302, 150,
	241, 43, 373, -308, 542, 260, -308, -308, -308, -308,
	-308, -308, -308, 277, 277, -308, -308, -308, -308, -308,
	-308, -308, -308, -308, -308, -308, 160, -308, -308, -308,
	-308, -308, -308, 82, 272, 273, -528, 398, 31, 354,
	354, -539, 31, -153, 348, 31, -282, -283, -284, -285,
	68, 72, 74, 69, 70, 71, 75, 31, 155, -310,
	-314, 35, -312, 88, -310, -157, -162, -167, -310, 82,
	-550, -552, 480, 477, 483, -393, -393, 241, 82, 123,
	-393, -393, 41, -311, -547, 484, 478, -119, 155, 79,
	-213, -189, -190, -191, -192, -217, -293, 190, 193, 195,
	196, 197, 198, 199, 200, 201, 202, 203, 206, 207,
	204, 205, 254, 185, 186, 187, 188, 208, 171, 191,
	536, 172, 173, 174, 175, 176, 177, 180, 181, 182,
	183, 179, -312, -198, -276, -160, -162, -312, 88, -312,
	142, -276, 120, -6, 118, -131, -130, -129, 121, 601,
	607, 120, 120, 120, 83, 83, 83, 155, 83, 83,
	83, 155, 83, 155, -470, 457, 40, 155, 82, 83,
	155, 61, 155, 123, 83, 155, 88, 88, 83, 61,
	-119, 88, 155, -169, 37, 38, 154, 430, -312, -481,
	83, -399, 155, 241, 154, 154, -375, 376, -311, -377,
	21, 538, -293, 39, -299, 123, 624, -312, 83, -340,
	-340, 112, -336, -333, 83, 120, -338, 118, -215, -217,
	392, 393, -338, -215, -216, -222, 151, 189, 254, 188,
	187, 185, 392, 393, -234, -312, -338, -338, 83, -338,
	-338, 17, -312, -234, -334, -338, -174, -174, 83, 83,
	-406, -407, -406, -406, 83, 83, 83, 83, -406, 83,
	83, 83, 83, 83, 83, 83, 83, 82, 97, 99,
	97, 99, -463, -559, 63, 609, 62, 420, 102, 308,
	155, 97, 88, 625, 155, 123, 168, 384, 83, 155,
	-293, -189, -179, 82, -179, -530, 459, 400, 410, -308,
	-330, -329, 350, 42, -449, 421, 406, 407, -376, 268,
	-312, -536, 95, 123, 79, 333, 337, 338, 334, 335,
	336, -356, -357, -355, -359, -524, 82, 82, -154, 35,
	82, 82, 35, -427, 323, -217, -211, -161, -312, 17,
	155, -523, 154, -1, -312, -369, -323, -276, -338, -338,
	-276, -323, -323, -325, -312, -427, -217, 35, -258, 234,
	231, -403, 305, 306, -404, -417, 308, -419, 82, -214,
	-293, -208, -495, -496, -358, -312, 108, -495, 108, 82,
	-214, -293, -293, -261, -322, -293, -312, -312, -312, -312,
	-266, -265, -293, -268, 32, -269, -312, -312, -312, -312,
	108, -312, 108, -239, 41, 48, 49, 50, -308, -308,
	192, -242, 41, 420, 422, 423, -268, 97, 97, 97,
	97, 88, 88, 88, -308, -308, 97, 88, -314, 88,
	-497, 167, 45, 46, 97, 97, 97, 97, 41, 88,
	-247, 41, 288, 292, 289, 290, 291, 88, 97, 41,
	97, 41, 97, 41, -312, 82, -498, -499, 88, -530,
	-308, 354, -390, 123, -330, -535, 318, -146, 92, 32,
	-183, 234, 231, -524, -381, -380, -293, -166, -166, -166,
	-166, 68, 68, 68, 73, 68, 73, 68, -284, -381,
	-168, -179, -314, 83, -544, -543, -542, -540, 76, 242,
	77, -344, 477, 481, 482, -377, -326, 88, -384, -187,
	24, -211, -211, -448, 298, 299, 83, 155, -217, -278,
	19, 154, -278, 116, -6, -127, -129, -338, -6, -338,
	603, 366, 604, 88, 97, 97, -478, 441, 436, 438,
	108, -347, -465, -464, 61, -154, -177, -457, -501, -463,
	-312, 627, 61, -154, -457, -187, -470, -171, -170, 44,
	-312, 97, 17, -374, -369, 142, 142, -312, 377, -385,
	88, 399, 88, 237, 625, 88, -299, -333, -338, 83,
	-225, 176, 175, -225, 35, 83, 83, -434, -434, -433,
	-436, -433, -225, -225, 83, 83, 24, 83, 83, 83,
	-338, 83, 83, 155, -453, 497, -454, 569, -406, -406,
	-406, -406, -406, -406, -406, -406, -406, -406, -406, -406,
	-406, -406, -349, -348, 260, 442, 616, 616, 442, 616,
	616, 83, 155, -504, 155, -298, 88, 88, 88, -201,
	-217, 83, 35, -204, -205, -206, -214, -207, -209, 35,
	-531, 92, -525, 88, -312, -532, 92, 401, 153, 352,
	41, 402, 403, 418, 347, 97, 97, 408, -526, -312,
	-153, -534, 52, 123, 88, -211, -355, -302, 150, 279,
	326, -273, -272, -312, 88, -204, -154, -204, -204, -154,
	-428, 325, 21, 97, 141, -180, 80, 154, -162, -212,
	-312, 142, 83, -276, -276, -276, -323, -428, -154, -415,
	309, 82, -413, 82, -413, 108, 334, -420, -418, 260,
	-264, 45, 47, -217, -493, -312, -491, -493, -312, -491,
	-491, -358, -338, -264, -214, 241, 31, 231, -267, 331,
	332, 337, -386, 304, 113, -386, 155, -169, 155, -312,
	-234, -234, 31, 88, 88, -213, 83, 155, 123, -531,
	-525, 123, -391, 88, -532, -536, 123, 88, 155, -183,
	-183, -276, 155, 123, -185, -184, 79, 80, -186, 79,
	-184, 68, 68, -276, -542, -541, 24, -496, -496, -496,
	83, 83, 15, -191, 41, -277, 20, 21, 142, -277,
	120, 118, 120, 120, -312, 83, 83, -440, 595, -474,
	-476, 436, 21, 21, 15, 242, 83, -457, 88, -457,
	-478, 45, 46, -369, -385, 421, -211, 155, 625, -215,
	-338, 83, -338, 83, 88, 83, 88, -174, 21, 83,
	155, 83, 83, 83, 155, 83, 83, -338, 83, -504,
	235, -154, 83, 155, -154, 88, -529, 412, 88, 88,
	97, 41, 97, 153, 404, -450, -146, -533, 92, 123,
	624, 82, -308, -308, -308, -312, 83, 155, -308, -308,
	83, 83, 83, -232, 538, -429, 259, 97, 141, 97,
	141, 97, -310, -162, -312, -276, -523, 154, -276, -429,
	-405, 310, 97, -334, 82, -334, 82, -414, 307, 82,
	83, 155, -312, -293, -229, -228, -226, 102, 113, 41,
	390, -227, 92, 150, 293, 296, 295, 271, 294, -256,
	-327, 79, 396, 331, 332, -359, 595, 526, 244, 107,
	108, 378, -328, 82, 82, 80, 313, 82, 82, -493,
	83, -264, -293, 41, -267, 41, 344, 304, -265, -312,
	150, -234, 83, -499, 88, -529, 88, -393, -534, 88,
	-524, -174, -380, -463, -338, 82, -338, 82, 68, 11,
	19, -331, -338, -346, 243, -6, 604, 366, -249, 596,
	88, 21, 88, -472, 88, -381, -440, -122, -246, -302,
	276, 83, 83, 83, -406, -406, -409, -408, -412, 442,
	305, 450, -346, 88, 88, 83, 83, -193, -217, -150,
	538, -232, -206, -150, 21, 538, 351, 41, 97, 41,
	405, 123, 103, 104, -300, -301, 88, -364, -366, -293,
	82, -234, -236, -311, 151, 88, -272, -331, -331, -230,
	-154, 35, -231, -270, -359, -121, -120, -230, 82, -430,
	159, 97, 141, 97, 97, -276, -276, -430, -419, 21,
	83, -400, 83, -400, 82, 123, -334, -418, -421, 61,
	-226, 102, -334, 88, -236, -237, 41, 292, 288, 123,
	123, -238, 41, 272, 273, -248, 82, 303, 15, 192,
	82, 108, 108, -211, -364, -364, -494, 333, 334, 335,
	339, 337, 338, 336, -494, -364, -364, 82, -387, -386,
	-334, -308, -308, 150, -533, -175, -178, -492, -312, 244,
	21, 21, -312, -312, -296, 597, 97, 88, 438, -249,
	-441, 598, -468, -413, -234, 123, 83, -411, 115, 404,
	408, -332, -335, 97, 99, 184, 153, 83, 83, 537,
	-151, 60, 484, 88, 399, 88, 351, 88, 625, 155,
	123, 83, 155, -433, -338, -401, 260, -154, 155, -270,
	-302, -122, -401, -233, -271, -312, 88, -447, 167, 324,
	538, 97, 141, 97, -174, -431, 167, 324, -404, 83,
	83, 83, -400, 97, 83, -425, -422, 82, -270, 262,
	133, 88, 88, 97, 82, -458, 31, 88, -365, 82,
	83, 83, 83, 83, -364, 97, -234, -308, 83, 83,
	155, 82, 21, -296, 88, -477, 441, -471, -469, 436,
	437, 438, 439, 88, -410, -411, 408, -332, -335, 593,
	448, 448, 448, -195, -312, 303, 421, -301, 88, -367,
	-366, -169, 83, -402, 312, 21, -270, -308, -402, 83,
	155, -308, -308, 324, 97, 141, 97, -175, 324, -416,
	311, 83, -425, -270, -424, -423, 310, 263, 82, 83,
	-338, -350, -308, 83, -251, -250, 534, -364, -367, 80,
	-367, 80, -367, 80, -367, 80, 83, -234, -312, 244,
	-297, -312, -472, -479, 242, -475, -476, 440, -469, 21,
	438, 21, 21, -123, 155, 112, 449, 449, 449, -194,
	35, 443, 377, -368, 250, 344, 345, 92, 538, 331,
	332, -169, 21, -403, -234, -271, -331, -331, 97, 97,
	83, 155, -312, 259, 82, -345, -339, -338, 259, 83,
	-312, -255, -253, -254, 79, 455, 301, 302, 83, -494,
	-494, -494, -494, -256, 83, 155, -486, 82, 97, -474,
	-473, -475, 21, -472, 21, -472, -472, 445, -410, 88,
	-308, -308, 88, 88, 330, -293, 82, -415, -423, -422,
	-345, 83, 155, -386, -254, 79, -253, 79, 16, 15,
	-367, -367, -367, -367, -312, -490, 31, 83, -485, -484,
	-294, -480, -312, 441, 442, 88, -472, 123, -562, -561,
	615, 97, 97, -312, -400, -405, 83, -339, -252, 298,
	299, 31, 167, -252, -489, -488, -487, 83, 155, 154,
	88, 88, 83, -419, 102, 41, 300, 155, 123, -484,
	-312, -488, 41, -338, 154, -312,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 0,
	263, 264, 265, 858, 859, 860, 861, 862, 863, 0,
	0, 0, 0, 617, 618, 0, 584, 0, 0, 0,
	0, 0, 0, 474, 475, 476, 477, 478, 479, 480,
	481, 482, 483, 484, 485, 486, 487, 488, 489, 490,
	491, 492, 493, 494, 495, 496, 497, 498, 499, 500,
	501, 502, 503, 358, 359, 360, 361, 362, 363, 364,
	365, 0, 288, 284, 209, 210, 211, 212, 213, 295,
	296, 451, 0, 0, 0, 0, 699, -2, 56, 0,
	277, 0, 268, 268, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, -2, 630, 0,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	595, 596, 597, 598, 347, 348, 349, 343, 344, 346,
	345, -2, 0, 630, 0, 0, 0, 707, 0, 0,
	0, 0, 0, 750, 772, 23, 0, 7, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 0, 0,
	19, 0, 19, 0, 0, 0, 1259, 1260, 1261, 1262,
	2032, 2002, -2, 1776, 1753, 1927, 2061, 2062, 2063, 2064,
	2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
	2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084,
	2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094,
	2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104,
	2105, 2106, 2107, 1710, 1711, 1712, 1713, 1714, 1715, 1716,
	1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726,
	1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736,
	1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
	1747, 1748, 1749, 1750, 1751, 1752, 1754, 1755, 1756, 1757,
	1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
	1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1777, 1778,
	1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788,
	1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798,
	1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808,
	1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818,
	1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828,
	1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838,
	1839, 1840, 1841, 1843, 1844, 1845, 1846, 1847, 1848, 1849,
	1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859,
	1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
	1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879,
	1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889,
	1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899,
	1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909,
	1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919,
	1920, 1921, 1922, 1923, 1924, 1925, 1926, 1928, 1929, 1930,
	1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940,
	1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950,
	1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, -2, 1960,
	1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
	1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980,
	1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,
	1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
	2001, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
	2012, 2013, 2014, 2015, 2016, 2017, -2, -2, -2, 2021,
	2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
	2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042,
	2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 0, 261,
	259, 1723, 1753, 1776, 1830, 1841, 1842, 1876, 1927, 1959,
	2002, 2018, 2019, 2020, 2032, 0, 881, 0, 677, 0,
	682, 1209, 677, 289, 619, 620, 707, 733, 582, 0,
	325, 0, 1767, 329, 2009, 0, 0, 0, 579, 319,
	320, 321, 322, 323, 324, 0, 0, 857, 0, 0,
	315, 0, 283, 1832, 2031, 0, 0, 0, 0, 0,
	153, 991, 155, 993, 159, 166, 0, 0, 171, 172,
	175, 176, 177, 178, 179, 0, 183, 0, 185, 188,
	0, 190, 191, 0, 194, 195, 196, 0, 206, 207,
	208, 994, 995, 996, -2, 84, 879, 1681, 1568, 0,
	1575, 1588, 1599, 1339, 1340, 1341, 1342, 0, 0, 0,
	0, 0, 1349, 1350, 0, 1377, 2065, 2106, 2107, 0,
	1358, 1359, 1360, 1361, 1362, 1363, 93, 105, 106, 1621,
	1622, 1623, 1624, 1625, 1626, 1627, 0, 1629, 1630, 1631,
	1539, 1326, 1259, 0, 2074, 0, 2096, 2101, 2102, 2103,
	2104, 2095, 0, 0, 1524, 0, 1514, 0, 0, -2,
	-2, 0, 0, 1901, -2, 2071, 2092, 2100, 2075, 2076,
	2099, 2067, 2068, 2069, 2062, 2063, 2064, 2066, 2078, 2080,
	2091, 0, 2087, 2097, 2098, 2007, 0, 0, 0, 2048,
	107, 108, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1535,
	-2, -2, 1538, -2, 1541, -2, -2, -2, -2, 1546,
	1547, -2, 1549, -2, -2, -2, -2, -2, -2, -2,
	1526, 1527, 1528, 1529, 1518, 1519, 1520, 1521, 1522, 1523,
	-2, -2, -2, 733, 808, 0, 733, 0, 708, 755,
	758, 761, 764, 711, 0, 0, 57, 58, 0, 278,
	279, 267, 269, 0, 273, 0, 266, 0, 0, 0,
	0, 1027, 1027, 1027, 1027, 1027, 0, 1027, 0, 0,
	0, 0, 0, 1027, 0, 914, 998, 999, 1000, 1025,
	1026, 1097, 0, 0, 0, 635, 631, 632, 633, 634,
	721, 0, 723, 726, 559, 559, 506, 0, 0, 0,
	559, 0, 520, 512, 0, 0, 0, 559, 0, 0,
	728, 728, 0, 562, 569, 559, 559, -2, 559, 559,
	559, 0, 0, 1039, 526, 527, 528, 512, 512, 531,
	532, 533, 543, 544, 570, 1705, 0, 0, 451, 451,
	0, 451, 0, 451, 451, 451, 637, 1871, 1774, 1847,
	1832, 2031, 0, 234, 1901, 239, 0, 1775, 1794, 0,
	0, 1812, 0, -2, 0, 305, 733, 0, 0, 707,
	0, 0, 0, 0, 0, 451, 451, 451, 451, 451,
	1096, 451, 451, 451, 451, 451, 0, 0, 0, 451,
	451, 0, 0, 773, 774, 769, 770, 771, 775, 776,
	5, 6, 19, 0, 0, 0, 0, 0, 0, 63,
	62, 0, 1682, 1700, 1634, 1635, 1636, 1687, 1638, 1691,
	1691, 1691, 1691, 1667, 1668, 1669, 1670, 1671, 1672, 1673,
	1674, 1675, 1691, 1691, 0, 0, 1680, 1658, 1689, 1689,
	1689, 1687, 1684, 1639, 1640, 1641, 1642, 1643, 1644, 1645,
	1646, 1647, 1648, 1649, 1650, 1651, 1652, 1694, 1694, 1697,
	1697, 1694, 0, 1564, 0, 0, 0, 0, 681, 0,
	0, 0, 733, -2, 0, 0, 583, 326, 1263, 0,
	0, 330, 0, 331, 0, 0, 0, 350, 0, 353,
	338, 339, 340, 334, 0, 133, 0, 317, 318, 0,
	0, 285, 0, 0, 0, 452, 0, 0, 0, 0,
	0, 0, 163, 160, 167, 170, 180, 187, 0, 199,
	201, 204, 161, 168, 173, 174, 181, 202, 162, 164,
	165, 169, 203, 205, 182, 186, 200, 184, 189, 192,
	193, 198, 0, 134, 0, 0, 0, 0, 0, 1574,
	0, 0, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 1568, 0,
	0, 1345, 1346, 1347, 1348, 1351, 0, 1378, 0, 0,
	0, 0, 0, 1628, 1632, 0, 1564, 1564, 0, 1564,
	1560, 0, 0, 0, 0, 0, 0, 1564, 1500, 0,
	0, 1502, 1515, 0, 0, 1504, 1505, 0, 1508, 1509,
	1564, 0, 1564, 1513, 1496, 1497, 0, 1560, 1560, 1560,
	1560, 0, 0, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
	1560, 1560, 1560, 1560, 1560, 0, 0, 0, 0, 728,
	0, 734, 0, -2, 0, 752, 754, 756, 757, 759,
	760, 762, 763, 765, 766, 713, 0, 0, 59, 0,
	0, 0, 0, 271, 0, 276, 0, 878, 0, 0,
	1027, 1027, 1027, 915, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1027, 1027, 1027, 1027, 0, 1045, 0,
	0, 0, 637, 636, 0, 722, 0, 0, 781, 0,
	0, 505, 0, 512, 559, 559, 518, 519, 514, 513,
	565, 566, 562, 0, 562, 562, 781, 0, 537, 538,
	539, 559, 559, 545, 729, 0, 546, 547, 562, 0,
	567, 568, 781, 0, 0, 781, 781, 0, 555, 556,
	557, 559, 0, 0, 1027, 0, 575, 514, 514, 1706,
	1707, 0, 0, 1036, 0, 0, 0, 578, 0, 0,
	0, 0, 638, 214, 217, 0, 220, 0, 1871, 0,
	1871, 0, 227, 0, 0, 0, 0, 0, 0, 257,
	258, 0, 0, 0, 0, 248, 251, 1203, 1204, 988,
	989, 252, 253, 297, 298, 0, 728, 751, 753, 747,
	748, 749, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 0, 613, 0, 894, 615,
	0, 0, 0, 789, 783, 785, 852, 93, 789, 8,
	80, 77, 0, 19, 0, 0, 19, 19, 0, 19,
	262, 0, 1703, 1701, 1702, 1637, 1688, 0, 1663, 0,
	1664, 1665, 1666, 1676, 1677, 0, 0, 1659, 0, 1660,
	1661, 1662, 1653, 0, 1654, 1655, 0, 1656, 1657, 260,
	0, 1565, 882, 0, 655, 669, 650, 0, 658, 0,
	1210, 0, 639, 669, 641, 0, 658, 728, 705, 0,
	683, 0, 0, 327, 0, 335, 332, 0, 336, 0,
	0, 352, 354, 355, 356, 341, 342, 580, 313, 314,
	306, 307, 308, 309, 310, 311, 312, 316, 103, 0,
	286, 287, 0, 0, 0, 147, 148, 149, 150, 151,
	152, 154, 138, 602, 604, 980, 992, 0, 983, 0,
	157, 197, 130, 0, 0, 0, 1569, 1570, 1571, 1572,
	1573, 1578, 0, 1580, 1582, 1584, 1586, 0, 1604, -2,
	-2, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
	1336, 1337, 1338, 1589, 1602, 1603, 0, 0, 0, 0,
	0, 0, 1600, 1600, 1595, 0, 1343, 0, 1375, 1379,
	0, 0, 0, 0, 0, 94, 1559, 1467, 1468, 1469,
	1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
	1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 0, 0, 1568, 0,
	0, 0, 1561, 1562, 0, 0, 0, 1455, 0, 0,
	1461, 1462, 1463, 0, 664, 0, 1525, 1501, 1516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 807, 809, 0, 673, 675, 676, 702, 683, 709,
	0, 0, 0, 55, 60, 0, 1064, 280, 281, 0,
	0, 275, 0, -2, 0, 0, 0, 0, 0, 929,
	0, 449, 974, 0, 0, 0, 990, 1015, 1023, 0,
	0, 0, 0, 0, 1070, 916, 921, 922, 923, 917,
	918, 924, 925, 0, 724, 0, 0, 821, 504, 0,
	560, 561, 509, 1832, 514, 781, 781, 521, 515, 522,
	564, 523, 524, 525, 562, 781, 781, 730, 559, 562,
	548, 563, 562, 551, 552, 0, 558, 571, 576, 572,
	0, 574, 529, 530, 1072, 726, 368, 369, 370, 372,
	0, 420, 420, 420, 403, 420, 0, 0, 391, 1708,
	0, 0, 0, 0, 400, 1708, 0, 0, 1708, 1708,
	1708, 1708, 1708, 1708, 1708, 0, 0, 1708, 1708, 1708,
	1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 0, 1708,
	1708, 1708, 1708, 1708, 1189, 1708, 0, 1037, 410, 411,
	412, 413, 418, 419, 0, 446, 0, 0, 0, 449,
	0, 963, 794, 0, 795, 796, 792, 823, 847, 847,
	0, 847, 827, 1209, 0, 0, 225, 226, 215, 0,
	216, 0, 228, 229, 0, 231, 232, 233, 240, 1774,
	1847, 235, 237, 0, 0, 241, 254, 255, 256, 0,
	0, 246, 247, 0, 0, 300, 301, 303, 0, 683,
	1040, 1041, 1042, 599, 1207, 600, 601, 605, 0, 0,
	608, 609, 610, 611, 612, 896, 0, 0, 968, 969,
	781, 0, 790, 0, 786, 853, 0, 855, 0, 781,
	0, 78, 19, 0, 71, 68, 0, 0, 0, 0,
	0, 1683, 1633, 1704, 0, 0, 0, 1685, 0, 0,
	0, 0, 61, 685, 646, 0, 649, 666, 0, 670,
	0, 0, 662, 654, 659, 0, 0, 679, 0, 0,
	640, 0, 0, 645, 683, 0, 706, 735, 736, 739,
	1264, 0, 337, 333, 351, 0, 0, 0, 0, 141,
	977, 0, 142, 146, 136, 0, 0, 0, 982, 0,
	979, 984, 0, 156, 0, 0, 131, 132, 1055, 1064,
	0, 0, 0, 1579, 1581, 1583, 1585, 1587, 0, 1590,
	1600, 1600, 1596, 0, 1591, 0, 1593, 0, 1569, 0,
	1380, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	1446, 0, 0, 1450, 0, 1452, 1453, 1454, 1456, 0,
	0, 0, 1460, 0, 1499, 1517, 1503, 1506, 0, 1510,
	0, 1512, 0, 733, 733, 0, 0, 1419, 1419, 1419,
	0, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 0, 0, 1364, 0, 1365, 1366, 0, 0, 0,
	810, 703, 0, 0, 0, 0, 0, 1062, 0, 282,
	270, 272, 0, 0, 0, 884, 885, 887, 0, 890,
	891, 892, 896, 726, 0, 726, 936, 1708, 1028, 453,
	0, 0, 976, 0, 952, 0, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 1074, 0, 0, 0, 624,
	628, 23, 727, 0, 782, 507, 0, 508, 559, 516,
	517, 781, 540, 541, 0, 0, 781, 559, 559, 562,
	0, 573, 1074, 0, 0, 1036, 1140, 1108, 381, 0,
	1220, 1221, 421, 0, 1227, 1236, 1027, 1296, 0, 1236,
	0, 0, 1238, 1239, 0, 0, 0, 0, 404, 405,
	0, 390, 0, 0, 0, 0, 0, 0, 389, 0,
	0, 431, 0, 0, 0, 0, 0, 1709, 1708, 1708,
	0, 398, 399, 0, 402, 0, 0, 0, 0, 0,
	0, 0, 0, 1708, 1708, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1180, 0, 0, 0,
	0, 0, 0, 0, 1195, 1196, 936, 1708, 0, 0,
	0, 453, 950, 959, 0, 0, 0, 0, 0, 0,
	814, 0, 0, 813, 0, 0, 0, 0, 0, 726,
	848, 0, 850, 851, 825, -2, 0, 794, 830, 1564,
	218, 219, 0, 0, 224, 242, 244, 0, 0, 0,
	243, 245, 249, 250, 299, 302, 304, 745, 0, 0,
	1098, 0, 897, 898, 900, 901, 0, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1758, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 895, 616, 779, 784, 791, 854, 856, 94,
	787, 779, 0, 81, 19, 80, 72, 73, 0, 19,
	0, 0, 0, 0, 1693, 1692, 1678, 0, 1679, 1690,
	1695, 0, 1698, 0, 689, 0, 0, 669, 671, 0,
	0, 669, 0, 0, 678, 0, 0, 1211, 0, 669,
	745, 685, 0, 742, 740, 741, 0, 0, 581, 104,
	357, 0, 0, 0, 0, 0, 603, 0, 981, 138,
	0, 0, 158, 0, 0, 0, 1064, 1059, 1563, 1592,
	1594, 0, 1601, 1597, 1344, 1352, 1376, 0, 0, 1382,
	1394, 1394, 0, 0, 0, 1385, 1691, 1691, 1388, 1687,
	1689, 1687, 1394, 1394, 0, 95, 0, 0, 1451, 0,
	0, 0, 665, 0, 0, 0, 1415, 1417, 1419, 1419,
	1426, 1420, 1427, 1428, 1419, 1419, 1419, 1419, 1433, 1419,
	1419, 1419, 1419, 1419, 1419, 1419, 1419, 1413, 0, 0,
	1622, 1623, 674, 0, 0, 716, 717, 718, 719, 720,
	0, 0, 53, 54, 1064, 0, 274, 0, 0, 889,
	0, 0, 0, 1213, 0, 940, 937, 938, 939, 0,
	971, 454, 455, 456, 457, 0, 0, 0, 975, 0,
	963, 945, 0, 0, 0, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, -2, 1031, 0, 0, 0, 1213, 1050, 0,
	1213, 1213, 0, 1082, 0, 1071, 677, 0, -2, 0,
	0, 626, 0, 0, 822, 510, 781, 534, 731, 732,
	549, 781, 781, 559, 577, 1082, 1073, 0, 371, 420,
	0, 1128, 0, 0, 1134, 0, 1141, 374, 0, 422,
	0, 1226, 1253, 1237, 1253, 1297, 1253, 1253, 1027, 0,
	422, 0, 0, 392, 428, 0, 0, 0, 0, 0,
	388, 425, 739, 375, 377, 378, 379, 429, 430, 432,
	0, 434, 435, 394, 406, 407, 408, 409, 0, 0,
	0, 401, 414, 415, 416, 417, 376, 1157, 1158, 1159,
	1162, 1163, 1164, 1165, 0, 0, 1168, 1169, 1170, 1171,
	1172, 1250, 1251, 1252, 1173, 1174, 1175, 1176, 1177, 1178,
	1179, 1197, 1198, 1199, 1200, 1201, 1202, 1181, 1182, 1183,
	1184, 1185, 1186, 1187, 1188, 0, 0, 1192, 0, 940,
	0, 0, 0, 0, 971, 952, 0, 962, 0, 964,
	965, 0, 0, 647, 781, 292, 0, 817, 811, 0,
	800, 815, 816, 803, 0, 805, 0, 801, 802, 781,
	793, 824, 849, 826, 829, 831, 832, 838, 0, 0,
	0, 0, 221, 222, 223, 230, 0, 473, 236, 701,
	0, 1208, 606, 607, 1099, 1100, 614, 0, 902, 777,
	0, 0, 777, 76, 79, 0, 74, 0, 0, 0,
	0, 66, 64, 1686, 0, 0, 691, 118, 0, 0,
	0, 667, 0, 672, 669, 653, 663, 652, 660, 661,
	680, 0, 669, 644, 643, 704, 689, 737, 738, 0,
	1265, 328, 0, 978, 138, 143, 144, 145, 139, 137,
	985, 0, 987, 0, 1057, 0, 0, 1598, 1381, 1353,
	1383, 1395, 1396, 1384, 0, 1355, 1356, 1386, 1387, 1389,
	1390, 1391, 1392, 1393, 1357, 1447, 0, 1449, 1457, 1458,
	0, 1507, 1511, 0, 0, 0, 0, 0, 1424, 1425,
	1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439,
	1440, 1441, 733, 1414, 0, 0, 0, 0, 0, 0,
	0, 714, 0, 0, 0, 1063, 1065, 877, 880, 886,
	888, 0, 0, 0, 1214, 1215, 1217, 1218, 1219, 0,
	913, 0, 0, 931, 932, 942, 0, 0, 0, 459,
	460, 0, 0, 0, 472, 468, 469, 470, 450, 970,
	959, 948, 0, 0, 958, 0, 1032, 1708, 1708, 1708,
	0, 0, 1142, 1708, 1708, 0, 1052, 0, 0, 1146,
	1085, 0, 0, 1076, 0, 847, 0, 0, 781, 625,
	628, 629, 725, 511, 553, 550, 781, 1085, 367, 1106,
	0, 0, 0, 0, 0, 1138, 0, 0, 1110, 0,
	393, 423, 0, -2, 0, 1254, 0, 1240, 1254, 0,
	0, 1253, 0, 382, 422, 0, 0, 0, 436, 440,
	441, 0, 438, 1292, 0, 439, 0, 427, 0, 433,
	1160, 1161, 0, 1166, 1167, 0, 1191, 0, 0, 442,
	0, 0, 0, 443, 448, 945, 0, 960, 0, 966,
	967, 733, 0, 0, 797, 818, 0, 0, 798, 0,
	799, 804, 806, 291, 833, 0, 0, 835, 836, 837,
	828, 238, 746, 899, 0, 767, 0, 0, 788, 768,
	0, 19, 0, 0, 69, 1696, 1699, 693, 0, 690,
	119, 0, 0, 0, 0, 657, 668, 651, 1212, 642,
	691, 743, 744, 140, 135, 986, 1067, 0, 1058, 0,
	0, 1459, 0, 1419, 1416, 1419, 1418, 1410, 0, 1367,
	0, 1369, 1370, 1371, 0, 1373, 1374, 0, 712, 0,
	0, 919, 1146, 0, 919, 941, 930, 0, 972, 973,
	0, 461, 462, 0, 465, 471, 943, 944, 0, 0,
	956, 0, 0, 0, 0, 1024, 1038, 0, 0, 0,
	-2, 0, -2, 1049, 0, 1091, 0, 1083, 0, 1075,
	0, 1078, 781, 781, -2, 622, 627, 0, 554, 1091,
	1108, 0, 1129, 0, 0, 0, 0, 0, 0, 0,
	1109, 0, 1122, 424, 1255, -2, 1268, 1270, 0, 1037,
	1273, 1274, 0, 0, 0, 0, 0, 0, 1318, 1282,
	0, 0, 1286, 1287, 1288, 0, 0, 1291, 0, 1616,
	1617, 0, 1295, 0, 0, 0, 0, 0, 0, 0,
	1234, 383, 384, 0, 386, 387, 1708, 1293, 426, 380,
	1708, 396, 1190, 1193, 1194, 447, 444, 445, 948, 951,
	648, 728, 293, 294, 819, 0, 812, 842, 839, 0,
	0, 903, 778, 780, 70, 75, 0, 0, 695, 0,
	692, 0, 686, 688, 129, 656, 693, 91, 121, 0,
	0, 1354, 1448, 1498, 1422, 1423, 0, 1411, 0, 1405,
	1406, 1407, 1412, 0, 0, 715, 710, 0, 905, 912,
	926, 1043, 1216, 911, 0, 0, 458, 463, 0, 466,
	467, 0, 946, 947, 0, 954, 0, 0, 1011, 1687,
	0, 1033, 1034, 1205, 1206, 1035, 1143, 1144, 1145, 1101,
	1051, 0, -2, 1154, 0, 1047, 1067, 1101, 0, 1079,
	0, 1086, 0, 1084, 1077, 733, 623, 1088, 373, 1140,
	1130, 0, 1132, 0, 0, 0, 0, 1111, -2, 0,
	1269, 1271, 1272, 1275, 1276, 1277, 1323, 1324, 1325, 0,
	0, 1280, 1320, 1321, 1322, 1281, 0, 0, 0, 0,
	0, 1614, 1615, 1316, 0, 0, 1241, 1243, 1244, 1245,
	1246, 1247, 1248, 1249, 1242, 0, 0, 0, 1233, 1235,
	385, 0, 0, 1708, 961, 290, 0, 0, 843, 845,
	840, 841, 65, 67, 82, 0, 694, 120, 0, 695,
	83, 0, 112, 0, 1068, 0, 1421, 1408, 0, 0,
	0, 0, 0, 1618, 1619, 1620, 0, 1368, 1372, 0,
	0, 927, 928, 933, 0, 935, 464, 949, 953, 956,
	0, 1002, 0, 739, 0, 1103, 0, 1053, 1036, 1156,
	1708, 1054, 1103, 0, 1148, 1708, 1708, 1069, 0, 1081,
	0, 1093, 0, 1087, 728, 366, 0, 1090, 1126, 1131,
	1133, 1135, 0, 1139, 1137, 1112, -2, 0, 1120, 0,
	0, 1278, 1279, 0, 0, 1514, 1708, 0, 1311, 0,
	1002, 1002, 1002, 1002, 0, 437, 395, 0, 820, 834,
	0, 0, 0, 684, 92, 109, 0, 122, 123, 0,
	0, 0, 0, 1060, 0, 1397, 0, 0, 0, 1401,
	1402, 1403, 1404, 0, 904, 0, 934, 955, 957, 1001,
	1012, 1013, 739, 1046, 0, 1140, 1155, 0, 1048, 1147,
	0, 0, 0, 1080, 1092, 0, 1095, 621, 1089, 1107,
	0, 1136, 1113, 1121, 0, 1116, 0, 0, 0, 1319,
	0, 1285, 0, 1290, 1299, 1312, 0, 0, 1222, 0,
	1224, 0, 1228, 0, 1230, 0, 0, 397, 844, 846,
	0, 697, 687, 96, 0, 118, 115, 0, 124, 0,
	0, 0, 0, 1056, 0, 0, 1398, 1399, 1400, 0,
	906, 907, 920, 1003, 1708, 1708, 0, 0, 0, 1009,
	1010, 1014, 0, 1128, 1160, 1149, 1150, 1151, 1094, 1127,
	1115, 0, -2, 1123, 0, 0, 1566, 1576, 1577, 1283,
	1289, 1298, 1300, 1301, 0, 1313, 1314, 1315, 1317, 1002,
	1002, 1002, 1002, 1232, 696, 0, 85, 0, 0, 113,
	114, 116, 0, 125, 0, 127, 128, 0, 1409, 908,
	0, 0, 1006, 1007, 0, 1104, 0, 1106, 1117, -2,
	0, 1125, 0, 1284, 1302, 0, 1303, 0, 0, 0,
	1223, 1225, 1229, 1231, 698, 1066, 0, 97, 0, 99,
	101, 102, 1256, 110, 111, 117, 126, 0, 893, 909,
	0, 1004, 1005, 1008, 0, 1108, 1124, 1567, 1304, 1306,
	1307, 0, 0, 1305, 86, 87, 0, 98, 0, 0,
	1061, 910, 1105, 1102, 1308, 1310, 1309, 0, 0, 100,
	1257, 88, 89, 90, 0, 1258,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 114, 3, 3, 3, 145, 137, 3,
	82, 83, 142, 140, 155, 141, 154, 143, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 626, 623,
	124, 123, 125, 3, 627, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 147, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 624, 136, 625, 148,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	115, 116, 117, 118, 119, 120, 121, 122, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 138, 139,
	144, 146, 149, 150, 151, 152, 153, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:795
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:802
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:808
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:816
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:822
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:826
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:841
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:845
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:851
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:856
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:860
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:892
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:900
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp:   yyDollar[2].str,
				IsS3:        false,
				Dir:         yyDollar[4].str,
				Parallelism: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:909
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp: yyDollar[2].str,
				IsS3:      true,
				Option:    yyDollar[5].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:919
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:939
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:945
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:952
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:960
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:966
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:975
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:985
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:993
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1001
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1009
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1019
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1027
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1037
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1044
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1053
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1063
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1067
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1073
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1077
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1083
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1092
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1102
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1106
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1112
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1121
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1125
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1131
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1152
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1165
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1172
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1176
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1182
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1186
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1192
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1199
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1207
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1211
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1225
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1229
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1233
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1238
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1242
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1246
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1252
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1261
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1272
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1276
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1282
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1286
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1292
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1296
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1302
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1326
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1345
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1349
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1353
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1358
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1362
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1371
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1381
		{
			yyVAL.str = ""
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1388
		{
			yyVAL.str = yyDollar[3].str
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1393
		{
			yyVAL.str = "\n"
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1400
		{
			yyVAL.str = yyDollar[3].str
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1405
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1409
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1437
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1441
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1447
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1455
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1475
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1494
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1519
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1523
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1527
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1532
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1536
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1542
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1555
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1566
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1579
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1583
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1593
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1606
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1619
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1625
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1631
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1638
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1646
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1655
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1659
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1663
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1667
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1671
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1675
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1682
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1686
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1692
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1699
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1708
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1712
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1718
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1722
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1726
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1730
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1734
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1738
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1742
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1746
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1750
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1754
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1758
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1762
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1766
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1770
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1774
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1778
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1782
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1786
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1790
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1794
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1798
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1802
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1806
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1810
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1814
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1818
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1822
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1826
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1830
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1834
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1838
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1842
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1846
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1850
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1854
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1858
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1862
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1866
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1870
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1874
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1878
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1882
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1886
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1890
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1894
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1898
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1902
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1906
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1910
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1914
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1927
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1934
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1941
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1951
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1955
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:1961
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:1968
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1976
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1980
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1984
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1988
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:1994
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:1998
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2004
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2011
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2018
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2027
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2057
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2061
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2065
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2071
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2077
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2081
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2088
		{
			yyVAL.str = yyDollar[3].str
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2094
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2098
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2104
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2112
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2121
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2130
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2138
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2146
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2169
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2192
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2199
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2206
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2214
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2221
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2228
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2237
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2241
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2245
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2251
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2255
		{
			yyVAL.str = yyDollar[1].str
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2261
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2265
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2271
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2275
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2286
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2292
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2297
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2301
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2305
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2309
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2313
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2317
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2321
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2325
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2329
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2335
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2339
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2343
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2347
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2352
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2357
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2363
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2376
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2389
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2402
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2415
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2431
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2438
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2449
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2460
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2464
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2470
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2480
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2486
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2490
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2496
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2502
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2506
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2510
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2514
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2520
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2532
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2538
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2542
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2548
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2552
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2558
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2564
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2575
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2581
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2585
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2589
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2593
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2597
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2601
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2609
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2617
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2627
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2639
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2643
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2651
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2659
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2698
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2702
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2708
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2714
		{
			yyVAL.str = yyDollar[1].str
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2719
		{
			yyVAL.str = "true"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2720
		{
			yyVAL.str = "false"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2721
		{
			yyVAL.str = yyDollar[1].str
		}
	case 357:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2726
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2743
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2766
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2776
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2783
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2792
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2796
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2802
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2806
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			partitionDef := &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2825
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2835
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2851
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2869
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2873
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2879
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2883
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2889
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2895
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2903
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2913
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2921
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2931
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr *tree.AttributeDefault
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2941
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr *tree.AttributeDefault
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2951
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2958
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2962
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2966
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2970
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2974
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2981
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2987
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2991
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2995
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2999
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3003
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3007
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3011
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3015
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3020
		{
			yyVAL.str = ""
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3051
		{
			yyVAL.str = ""
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3055
		{
			yyVAL.str = string("COLUMN")
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3060
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3066
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3072
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3080
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3084
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3090
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3098
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3105
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3111
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3117
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3123
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3129
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3136
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3143
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3151
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3157
		{
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = int64(yyDollar[6].item.(int64))
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3164
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3170
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3178
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3182
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3189
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3207
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3221
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3235
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3248
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3254
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3265
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3278
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3282
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3287
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3291
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3296
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3300
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3316
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3320
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3324
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3328
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3332
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3336
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3340
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryDefault{}
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3344
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryCount{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3348
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalDefault{}
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3352
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalCount{Value: yyDollar[4].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3356
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentNone{}
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3360
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentDefault{}
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3364
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentOptional{}
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3368
		{
			yyLOCAL = &tree.UserMiscOptionFailedLoginAttempts{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3372
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeCount{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3376
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeUnbounded{}
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3382
		{
			yyVAL.item = nil
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3387
		{
			yyVAL.item = nil
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3428
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3437
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3445
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3449
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3453
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{tree.NewRole(yyDollar[5].cstrUnion().Compare())}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3462
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3466
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3472
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3477
		{
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3481
		{
		}
	case 516:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3486
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3496
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3506
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3514
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3520
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3526
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3532
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3538
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3544
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3550
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3559
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3563
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3567
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3571
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3575
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3579
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3583
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3587
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3593
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3602
		{
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3604
		{
		}
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3613
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3623
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3632
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3636
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3640
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3646
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3652
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3658
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3664
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3673
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3683
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3695
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3699
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3705
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3717
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3731
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3737
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3744
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3748
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3753
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3757
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3761
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3766
		{
			yyVAL.str = ""
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3770
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3776
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3789
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3793
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3799
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3804
		{
			yyLOCAL = &tree.ShowCreateView{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3808
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3812
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3818
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3824
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3828
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3834
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3840
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3844
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3848
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3854
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3858
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3883
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3891
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3899
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3907
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3911
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3917
		{
			yyLOCAL = &tree.User{
				Username: yyDollar[1].usernameRecordUnion().Username,
				Hostname: yyDollar[1].usernameRecordUnion().Hostname,
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3926
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3934
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3943
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3949
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3957
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3965
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3973
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3979
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3987
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3993
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4001
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4007
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4017
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4022
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4029
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4045
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4058
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4069
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4073
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4079
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4084
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4091
		{
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4093
		{
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4096
		{
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4105
		{
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4109
		{
		}
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4114
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4123
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4130
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4136
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4144
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4151
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4158
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4178
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4188
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4192
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4198
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4205
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4211
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4219
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4226
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4233
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4252
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4256
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4260
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4265
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4269
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4273
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4279
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4288
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4292
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4298
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4302
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4308
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4312
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4318
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4323
		{
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4327
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4334
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4338
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4345
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4350
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4354
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4360
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4364
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4370
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4374
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4379
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4383
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4396
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4407
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4418
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4440
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4463
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4471
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4480
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4484
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4497
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4501
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4506
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4510
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4517
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4522
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4529
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4535
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4539
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4543
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4547
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4551
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4555
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4560
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4564
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4570
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4580
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4595
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4599
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4613
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4617
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4623
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4632
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4636
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4640
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4644
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4648
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4654
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4661
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4670
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4674
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4680
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4688
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4692
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4697
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4701
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4707
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4711
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4715
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4720
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4724
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4730
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4736
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4740
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:4746
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4751
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4755
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4759
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4764
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4768
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4772
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4777
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4781
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4789
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4793
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4797
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4811
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4815
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4825
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4835
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4845
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4857
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4865
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4873
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4882
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4890
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4898
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4906
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4914
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4922
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4930
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4938
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4946
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4956
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4967
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4981
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4985
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4989
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4994
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4998
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5002
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5011
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5015
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5020
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5024
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5029
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5033
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5039
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5043
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5049
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5053
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5058
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5062
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5067
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5075
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5081
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5089
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5097
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5107
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5113
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5122
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5131
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5140
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5150
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5154
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5164
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5168
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5172
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5176
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5182
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5192
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5196
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5202
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5208
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5212
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5218
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5224
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5228
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5232
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5238
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5242
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5248
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5252
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5258
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5262
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5268
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5272
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5282
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5295
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5301
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5307
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:  tree.FuncName2ResolvableFunctionReference(name),
					Exprs: yyDollar[3].exprsUnion(),
					Type:  tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5320
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5331
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5338
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5342
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5348
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5358
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5362
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5366
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5371
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5375
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5379
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5383
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5388
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5392
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5396
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5400
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5404
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5409
		{
			yyVAL.str = ""
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5413
		{
			yyVAL.str = yyDollar[1].str
		}
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5417
		{
			yyVAL.str = yyDollar[2].str
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5423
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5429
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5433
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5437
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5441
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5445
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5451
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 877:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5490
		{
			yyLOCAL = &tree.CreateExtension{
				Language: yyDollar[3].str,
				Name:     tree.Identifier(yyDollar[5].str),
				Filename: tree.Identifier(yyDollar[7].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5500
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5506
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 880:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5512
		{
			yyLOCAL = &tree.CreateProcedure{
				Name: yyDollar[3].procNameUnion(),
				Args: yyDollar[5].procArgsUnion(),
				Body: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5522
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5527
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5533
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5540
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5544
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5550
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5556
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5561
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5565
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5569
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5573
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5580
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				return 1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				return 1
			}

			yyLOCAL = &tree.CreateFunction{
				Replace:    yyDollar[2].sourceOptionalUnion(),
				Name:       yyDollar[4].functionNameUnion(),
				Args:       yyDollar[6].funcArgsUnion(),
				ReturnType: yyDollar[9].funcReturnUnion(),
				Language:   yyDollar[11].str,
				Import:     yyDollar[12].boolValUnion(),
				Body:       yyDollar[13].str,
				Handler:    yyDollar[14].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5604
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5609
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5615
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5622
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5626
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5632
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5638
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5642
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5646
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5652
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5658
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5664
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5668
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5674
		{
			yyVAL.str = ""
		}
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5681
		{
			yyVAL.str = yyDollar[2].str
		}
	case 911:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5687
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5696
		{
			yyLOCAL = &tree.CreateView{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5708
		{
			yyLOCAL = &tree.CreateAccount{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         yyDollar[4].str,
				AuthOption:   yyDollar[5].accountAuthOptionUnion(),
				StatusOption: yyDollar[6].accountStatusUnion(),
				Comment:      yyDollar[7].accountCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5720
		{
			yyVAL.str = yyDollar[1].str
		}
	case 915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5724
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5730
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 917:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5734
		{
			yyVAL.str = "DEFINER = "
		}
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5738
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 919:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5743
		{
			yyVAL.str = ""
		}
	case 920:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:5747
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5761
		{
			yyVAL.str = ""
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5769
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 930:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:5775
		{
			yyLOCAL = tree.AccountAuthOption{
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5785
		{
			yyVAL.str = yyDollar[1].str
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5789
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 933:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5795
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5802
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5808
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5816
		{
			yyLOCAL = tree.AccountStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5822
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusOpen,
			}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5829
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusSuspend,
			}
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5836
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusRestricted,
			}
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5844
		{
			yyLOCAL = tree.AccountComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5850
		{
			yyLOCAL = tree.AccountComment{
				Exist:   true,
				Comment: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5859
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Users:              yyDollar[4].usersUnion(),
				Role:               yyDollar[5].accountRoleUnion(),
				MiscOpt:            yyDollar[6].userMiscOptionUnion(),
				CommentOrAttribute: yyDollar[7].accountCommentOrAttributeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5871
		{
			yyLOCAL = &tree.CreatePublication{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Database:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				AccountsSet: yyDollar[7].accountsSetOptionUnion(),
				Comment:     yyDollar[8].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5883
		{
			yyLOCAL = &tree.CreateStage{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Url:         yyDollar[5].str,
				Credentials: yyDollar[6].stageCredentialsUnion(),
				Status:      yyDollar[7].stageStatusUnion(),
				Comment:     yyDollar[8].stageCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5895
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5901
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5908
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5916
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5922
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5930
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5936
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:5944
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:5950
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5959
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5963
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5968
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5972
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5979
		{
			yyVAL.str = yyDollar[3].str
		}
	case 959:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5984
		{
			yyVAL.str = ""
		}
	case 960:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5988
		{
			yyVAL.str = yyDollar[2].str
		}
	case 961:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5994
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6007
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var comment = yyDollar[6].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, comment)
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6016
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6020
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6026
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6032
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6038
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6047
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6055
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6063
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 971:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6068
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6074
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: true,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6082
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: false,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6188
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6192
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6198
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6208
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6212
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6218
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6228
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6232
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6236
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6241
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6245
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6251
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6258
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6264
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6273
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 990:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6280
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6289
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6293
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6299
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6313
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6317
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6321
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6326
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6330
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6334
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6338
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6344
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = &tree.IndexOption{IType: tree.INDEX_TYPE_INVALID}
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Table:       yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6365
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6369
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6395
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6399
		{
			yyLOCAL = &tree.IndexOption{AlgoParamList: int64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6403
		{
			yyLOCAL = &tree.IndexOption{AlgoParamVectorOpType: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6407
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6411
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6415
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6419
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6425
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6429
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6435
		{
			// Order is parsed but just ignored as MySQL dtree.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6440
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6445
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6449
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6453
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6457
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6461
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6465
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6469
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6475
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Name:               tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SubscriptionOption: yyDollar[5].subscriptionOptionUnion(),
				CreateOptions:      yyDollar[6].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6486
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6490
		{
			yyLOCAL = &tree.SubscriptionOption{From: tree.Identifier(yyDollar[2].str), Publication: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6500
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6504
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6509
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6513
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6519
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6523
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6529
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6533
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6537
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6542
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6546
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6552
		{
			yyLOCAL = &tree.CreateConnector{
				TableName: yyDollar[4].tableNameUnion(),
				Options:   yyDollar[7].connectorOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6561
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6567
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6585
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6603
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6621
		{
			yyLOCAL = &tree.CreateSource{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				SourceName:  yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Options:     yyDollar[9].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6632
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6636
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6642
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6654
		{
			yyLOCAL = &tree.CreateTable{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Param:       yyDollar[9].loadParamUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6663
		{
			yyLOCAL = &tree.CreateTable{
				IsClusterTable:  true,
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6675
		{
			yyLOCAL = &tree.CreateTable{
				IsDynamicTable: true,
				IfNotExists:    yyDollar[4].ifNotExistsUnion(),
				Table:          *yyDollar[5].tableNameUnion(),
				AsSource:       yyDollar[7].selectUnion(),
				DTOptions:      yyDollar[8].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6685
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				AsSource:    yyDollar[6].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6695
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				AsSource:    yyDollar[9].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6706
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				AsSource:    yyDollar[7].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6716
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				AsSource:    yyDollar[10].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6729
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6736
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6746
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6759
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6767
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6776
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6785
		{
			yyVAL.str = ""
		}
	case 1061:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6789
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6795
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6799
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6804
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6808
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:6815
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6827
		{
			yyVAL.str = ""
		}
	case 1068:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6831
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1069:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6837
		{
			yyLOCAL = &tree.CreateSequence{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        yyDollar[4].tableNameUnion(),
				Type:        yyDollar[5].columnTypeUnion(),
				IncrementBy: yyDollar[6].incrementByOptionUnion(),
				MinValue:    yyDollar[7].minValueOptionUnion(),
				MaxValue:    yyDollar[8].maxValueOptionUnion(),
				StartWith:   yyDollar[9].startWithOptionUnion(),
				Cycle:       yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6850
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6864
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6868
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6872
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6878
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6882
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6889
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6896
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6903
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6910
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6914
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6918
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6922
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6926
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6933
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6940
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6944
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6951
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6958
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6962
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6968
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6974
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6978
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6985
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6992
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6999
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7006
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7010
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7015
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7019
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7023
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7028
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7032
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7042
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7046
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()},
			}

		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7053
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: yyDollar[4].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7060
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7064
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7073
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7077
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7083
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7087
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7093
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7102
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7112
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7116
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7122
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7126
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7132
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7139
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7148
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7152
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7157
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7161
		{
			expr := tree.NewMaxValue()
			yyLOCAL = &tree.ValuesLessThan{ValueList: tree.Exprs{expr}}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7166
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7170
		{
			yyLOCAL = &tree.ValuesIn{ValueList: yyDollar[4].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7175
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7179
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7189
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7193
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7204
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7212
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7220
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7228
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7239
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:    yyDollar[1].boolValUnion(),
					Algorithm: yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7248
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7258
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7268
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7272
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7277
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7281
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7287
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7291
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7297
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7301
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7306
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7310
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7316
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7320
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7326
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7330
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7335
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7339
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7345
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7349
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7353
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7359
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7363
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7367
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7371
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7375
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7379
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7383
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7388
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7392
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7396
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7400
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7404
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7408
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7412
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7416
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7420
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7424
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7428
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7432
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7436
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7440
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7444
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7448
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7452
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7456
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7460
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7464
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7468
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7472
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7476
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7480
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7484
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7488
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7492
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7496
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7502
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7506
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:7512
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7518
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7522
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7528
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7532
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7536
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7540
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7544
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7548
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7562
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7566
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7575
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7580
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7585
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			atType := tree.ATTIMESTAMPNONE
			if yyDollar[3].str != "" {
				t := strings.ToLower(yyDollar[3].str)
				switch t {
				case "timestamp":
					atType = tree.ATTIMESTAMPTIME
				case "snapshot":
					atType = tree.ATTIMESTAMPSNAPSHOT
				default:
					yylex.Error("Invalid the type of at timestamp")
					return 1
				}
			}
			atTs := &tree.AtTimeStampClause{
				TimeStampExpr: &tree.TimeStampExpr{
					Type: atType,
					Expr: yyDollar[5].str,
				},
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7609
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			atType := tree.ATTIMESTAMPNONE
			if yyDollar[5].str != "" {
				t := strings.ToLower(yyDollar[5].str)
				switch t {
				case "timestamp":
					atType = tree.ATTIMESTAMPTIME
				case "snapshot":
					atType = tree.ATTIMESTAMPSNAPSHOT
				default:
					yylex.Error("Invalid the type of at timestamp")
					return 1
				}
			}
			atTs := &tree.AtTimeStampClause{
				TimeStampExpr: &tree.TimeStampExpr{
					Type: atType,
					Expr: yyDollar[7].str,
				},
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7634
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7641
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7645
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7651
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7655
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7659
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7665
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7669
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7675
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7684
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7693
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7726
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7761
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7775
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7781
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7790
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7799
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7808
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7817
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7827
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7835
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7841
		{
			yyVAL.str = ""
		}
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7845
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7855
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7861
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7867
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7888
		{
			yyVAL.str = ""
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7892
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:7898
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7904
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7908
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7912
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7918
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7922
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7926
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7930
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7936
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7940
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7944
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7949
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7953
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7959
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7963
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7969
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7973
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7977
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7981
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7985
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7989
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7994
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7998
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8002
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8006
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8010
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8014
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8018
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8022
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8026
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8030
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8043
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8047
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8051
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8055
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8059
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8063
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8069
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8073
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8078
		{
			yyVAL.str = ""
		}
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8082
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8088
		{
			yyVAL.str = ""
		}
	case 1297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8092
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1298:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8098
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8110
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8117
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8124
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8131
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8138
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8147
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8153
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8159
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8163
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8167
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8171
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8175
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8180
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8187
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8191
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8195
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8200
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8204
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8209
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8213
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8229
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8235
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8239
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8243
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8247
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8251
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8255
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8259
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8263
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8267
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8271
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8275
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8279
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8283
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8289
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8293
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8297
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8301
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8305
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8309
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8313
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8317
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8321
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8325
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8329
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8333
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8338
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8346
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8350
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8354
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8358
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8362
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8371
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8375
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8379
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8383
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8387
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8391
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8397
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8405
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8413
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8423
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8433
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8443
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8452
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8462
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8472
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8482
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8491
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8501
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8505
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8510
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8514
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8520
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8524
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:8530
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8539
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8551
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8568
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8585
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8598
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8611
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8623
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8637
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8652
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8667
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8684
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8699
		{
		}
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8706
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8710
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8714
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8720
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8724
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8728
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8732
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8738
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8742
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8746
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8752
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8760
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8770
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8774
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8781
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8786
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8790
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8795
		{
			yyVAL.str = ","
		}
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8799
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8804
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8808
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1419:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8813
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8820
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8846
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8857
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8868
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8878
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8888
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8898
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8907
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8916
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8926
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8936
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8946
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8956
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8966
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8976
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8986
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8996
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9006
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9016
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9026
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9036
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9055
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9063
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9071
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9079
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9087
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9097
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9105
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9114
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9122
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9130
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9138
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9146
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9157
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9167
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9179
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9190
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9212
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9248
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9260
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9272
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9283
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9291
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9298
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9305
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9317
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9325
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9335
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9345
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9353
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9364
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9373
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9382
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9390
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9400
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9408
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9418
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9422
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9428
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9432
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9451
		{
		}
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9453
		{
		}
	case 1559:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9494
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9505
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9509
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9513
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:9519
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9524
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9528
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9534
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9538
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9544
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9548
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9555
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9559
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9563
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9571
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9575
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9579
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9584
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9588
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9594
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9598
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9602
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9606
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9610
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9614
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9618
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9622
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9626
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9630
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9638
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9642
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9646
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9650
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9654
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9658
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9662
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9666
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9670
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9674
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9680
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9684
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9690
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9694
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9701
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9705
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9709
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9715
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9719
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9723
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9727
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9731
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9735
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9739
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9745
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9749
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9753
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9757
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9763
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9776
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9781
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9787
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9791
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9804
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9809
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9813
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9817
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9821
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9825
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9832
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9836
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9840
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9844
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9851
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9862
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9867
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9873
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9885
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9897
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9909
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9922
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9935
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9948
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9961
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9974
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9987
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10000
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10013
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10026
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10039
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10054
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10081
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10123
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10159
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10195
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10212
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10224
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10244
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10264
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10284
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10300
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10313
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10326
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10339
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10352
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10364
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10376
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10388
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10400
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10412
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10424
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10436
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10448
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10460
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10473
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10486
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10499
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10512
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10527
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10535
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10544
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10554
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10577
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10582
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10588
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10595
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10599
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10604
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10608
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10614
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10620
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10627
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10634
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10643
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10650
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10657
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10666
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10670
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10674
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10680
		{
		}
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10682
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10692
		{
			yyVAL.str = ""
		}
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10696
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
