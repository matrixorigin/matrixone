// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const SNAPSHOTS = 57437
const INTEGRAL = 57438
const HEX = 57439
const FLOAT = 57440
const HEXNUM = 57441
const BIT_LITERAL = 57442
const NULL = 57443
const TRUE = 57444
const FALSE = 57445
const LOWER_THAN_CHARSET = 57446
const CHARSET = 57447
const UNIQUE = 57448
const KEY = 57449
const OR = 57450
const PIPE_CONCAT = 57451
const XOR = 57452
const AND = 57453
const NOT = 57454
const BETWEEN = 57455
const CASE = 57456
const WHEN = 57457
const THEN = 57458
const ELSE = 57459
const END = 57460
const ELSEIF = 57461
const LOWER_THAN_EQ = 57462
const LE = 57463
const GE = 57464
const NE = 57465
const NULL_SAFE_EQUAL = 57466
const IS = 57467
const LIKE = 57468
const REGEXP = 57469
const IN = 57470
const ASSIGNMENT = 57471
const ILIKE = 57472
const SHIFT_LEFT = 57473
const SHIFT_RIGHT = 57474
const DIV = 57475
const MOD = 57476
const UNARY = 57477
const COLLATE = 57478
const BINARY = 57479
const UNDERSCORE_BINARY = 57480
const INTERVAL = 57481
const OUT = 57482
const INOUT = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const WORK = 57489
const CONSISTENT = 57490
const SNAPSHOT = 57491
const CHAIN = 57492
const NO = 57493
const RELEASE = 57494
const PRIORITY = 57495
const QUICK = 57496
const BIT = 57497
const TINYINT = 57498
const SMALLINT = 57499
const MEDIUMINT = 57500
const INT = 57501
const INTEGER = 57502
const BIGINT = 57503
const INTNUM = 57504
const REAL = 57505
const DOUBLE = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const DECIMAL_VALUE = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const UUID = 57531
const VECF32 = 57532
const VECF64 = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const INT1 = 57542
const INT2 = 57543
const INT3 = 57544
const INT4 = 57545
const INT8 = 57546
const S3OPTION = 57547
const STAGEOPTION = 57548
const SQL_SMALL_RESULT = 57549
const SQL_BIG_RESULT = 57550
const SQL_BUFFER_RESULT = 57551
const LOW_PRIORITY = 57552
const HIGH_PRIORITY = 57553
const DELAYED = 57554
const CREATE = 57555
const ALTER = 57556
const DROP = 57557
const RENAME = 57558
const ANALYZE = 57559
const ADD = 57560
const RETURNS = 57561
const SCHEMA = 57562
const TABLE = 57563
const SEQUENCE = 57564
const INDEX = 57565
const VIEW = 57566
const TO = 57567
const IGNORE = 57568
const IF = 57569
const PRIMARY = 57570
const COLUMN = 57571
const CONSTRAINT = 57572
const SPATIAL = 57573
const FULLTEXT = 57574
const FOREIGN = 57575
const KEY_BLOCK_SIZE = 57576
const SHOW = 57577
const DESCRIBE = 57578
const EXPLAIN = 57579
const DATE = 57580
const ESCAPE = 57581
const REPAIR = 57582
const OPTIMIZE = 57583
const TRUNCATE = 57584
const MAXVALUE = 57585
const PARTITION = 57586
const REORGANIZE = 57587
const LESS = 57588
const THAN = 57589
const PROCEDURE = 57590
const TRIGGER = 57591
const STATUS = 57592
const VARIABLES = 57593
const ROLE = 57594
const PROXY = 57595
const AVG_ROW_LENGTH = 57596
const STORAGE = 57597
const DISK = 57598
const MEMORY = 57599
const CHECKSUM = 57600
const COMPRESSION = 57601
const DATA = 57602
const DIRECTORY = 57603
const DELAY_KEY_WRITE = 57604
const ENCRYPTION = 57605
const ENGINE = 57606
const MAX_ROWS = 57607
const MIN_ROWS = 57608
const PACK_KEYS = 57609
const ROW_FORMAT = 57610
const STATS_AUTO_RECALC = 57611
const STATS_PERSISTENT = 57612
const STATS_SAMPLE_PAGES = 57613
const DYNAMIC = 57614
const COMPRESSED = 57615
const REDUNDANT = 57616
const COMPACT = 57617
const FIXED = 57618
const COLUMN_FORMAT = 57619
const AUTO_RANDOM = 57620
const ENGINE_ATTRIBUTE = 57621
const SECONDARY_ENGINE_ATTRIBUTE = 57622
const INSERT_METHOD = 57623
const RESTRICT = 57624
const CASCADE = 57625
const ACTION = 57626
const PARTIAL = 57627
const SIMPLE = 57628
const CHECK = 57629
const ENFORCED = 57630
const RANGE = 57631
const LIST = 57632
const ALGORITHM = 57633
const LINEAR = 57634
const PARTITIONS = 57635
const SUBPARTITION = 57636
const SUBPARTITIONS = 57637
const CLUSTER = 57638
const TYPE = 57639
const ANY = 57640
const SOME = 57641
const EXTERNAL = 57642
const LOCALFILE = 57643
const URL = 57644
const PREPARE = 57645
const DEALLOCATE = 57646
const RESET = 57647
const EXTENSION = 57648
const INCREMENT = 57649
const CYCLE = 57650
const MINVALUE = 57651
const PUBLICATION = 57652
const SUBSCRIPTIONS = 57653
const PUBLICATIONS = 57654
const PROPERTIES = 57655
const PARSER = 57656
const VISIBLE = 57657
const INVISIBLE = 57658
const BTREE = 57659
const HASH = 57660
const RTREE = 57661
const BSI = 57662
const IVFFLAT = 57663
const MASTER = 57664
const ZONEMAP = 57665
const LEADING = 57666
const BOTH = 57667
const TRAILING = 57668
const UNKNOWN = 57669
const LISTS = 57670
const OP_TYPE = 57671
const REINDEX = 57672
const EXPIRE = 57673
const ACCOUNT = 57674
const ACCOUNTS = 57675
const UNLOCK = 57676
const DAY = 57677
const NEVER = 57678
const PUMP = 57679
const MYSQL_COMPATIBILITY_MODE = 57680
const MODIFY = 57681
const CHANGE = 57682
const SECOND = 57683
const ASCII = 57684
const COALESCE = 57685
const COLLATION = 57686
const HOUR = 57687
const MICROSECOND = 57688
const MINUTE = 57689
const MONTH = 57690
const QUARTER = 57691
const REPEAT = 57692
const REVERSE = 57693
const ROW_COUNT = 57694
const WEEK = 57695
const REVOKE = 57696
const FUNCTION = 57697
const PRIVILEGES = 57698
const TABLESPACE = 57699
const EXECUTE = 57700
const SUPER = 57701
const GRANT = 57702
const OPTION = 57703
const REFERENCES = 57704
const REPLICATION = 57705
const SLAVE = 57706
const CLIENT = 57707
const USAGE = 57708
const RELOAD = 57709
const FILE = 57710
const TEMPORARY = 57711
const ROUTINE = 57712
const EVENT = 57713
const SHUTDOWN = 57714
const NULLX = 57715
const AUTO_INCREMENT = 57716
const APPROXNUM = 57717
const SIGNED = 57718
const UNSIGNED = 57719
const ZEROFILL = 57720
const ENGINES = 57721
const LOW_CARDINALITY = 57722
const AUTOEXTEND_SIZE = 57723
const ADMIN_NAME = 57724
const RANDOM = 57725
const SUSPEND = 57726
const ATTRIBUTE = 57727
const HISTORY = 57728
const REUSE = 57729
const CURRENT = 57730
const OPTIONAL = 57731
const FAILED_LOGIN_ATTEMPTS = 57732
const PASSWORD_LOCK_TIME = 57733
const UNBOUNDED = 57734
const SECONDARY = 57735
const RESTRICTED = 57736
const USER = 57737
const IDENTIFIED = 57738
const CIPHER = 57739
const ISSUER = 57740
const X509 = 57741
const SUBJECT = 57742
const SAN = 57743
const REQUIRE = 57744
const SSL = 57745
const NONE = 57746
const PASSWORD = 57747
const SHARED = 57748
const EXCLUSIVE = 57749
const MAX_QUERIES_PER_HOUR = 57750
const MAX_UPDATES_PER_HOUR = 57751
const MAX_CONNECTIONS_PER_HOUR = 57752
const MAX_USER_CONNECTIONS = 57753
const FORMAT = 57754
const VERBOSE = 57755
const CONNECTION = 57756
const TRIGGERS = 57757
const PROFILES = 57758
const LOAD = 57759
const INLINE = 57760
const INFILE = 57761
const TERMINATED = 57762
const OPTIONALLY = 57763
const ENCLOSED = 57764
const ESCAPED = 57765
const STARTING = 57766
const LINES = 57767
const ROWS = 57768
const IMPORT = 57769
const DISCARD = 57770
const JSONTYPE = 57771
const MODUMP = 57772
const OVER = 57773
const PRECEDING = 57774
const FOLLOWING = 57775
const GROUPS = 57776
const DATABASES = 57777
const TABLES = 57778
const SEQUENCES = 57779
const EXTENDED = 57780
const FULL = 57781
const PROCESSLIST = 57782
const FIELDS = 57783
const COLUMNS = 57784
const OPEN = 57785
const ERRORS = 57786
const WARNINGS = 57787
const INDEXES = 57788
const SCHEMAS = 57789
const NODE = 57790
const LOCKS = 57791
const ROLES = 57792
const TABLE_NUMBER = 57793
const COLUMN_NUMBER = 57794
const TABLE_VALUES = 57795
const TABLE_SIZE = 57796
const NAMES = 57797
const GLOBAL = 57798
const PERSIST = 57799
const SESSION = 57800
const ISOLATION = 57801
const LEVEL = 57802
const READ = 57803
const WRITE = 57804
const ONLY = 57805
const REPEATABLE = 57806
const COMMITTED = 57807
const UNCOMMITTED = 57808
const SERIALIZABLE = 57809
const LOCAL = 57810
const EVENTS = 57811
const PLUGINS = 57812
const CURRENT_TIMESTAMP = 57813
const DATABASE = 57814
const CURRENT_TIME = 57815
const LOCALTIME = 57816
const LOCALTIMESTAMP = 57817
const UTC_DATE = 57818
const UTC_TIME = 57819
const UTC_TIMESTAMP = 57820
const REPLACE = 57821
const CONVERT = 57822
const SEPARATOR = 57823
const TIMESTAMPDIFF = 57824
const CURRENT_DATE = 57825
const CURRENT_USER = 57826
const CURRENT_ROLE = 57827
const SECOND_MICROSECOND = 57828
const MINUTE_MICROSECOND = 57829
const MINUTE_SECOND = 57830
const HOUR_MICROSECOND = 57831
const HOUR_SECOND = 57832
const HOUR_MINUTE = 57833
const DAY_MICROSECOND = 57834
const DAY_SECOND = 57835
const DAY_MINUTE = 57836
const DAY_HOUR = 57837
const YEAR_MONTH = 57838
const SQL_TSI_HOUR = 57839
const SQL_TSI_DAY = 57840
const SQL_TSI_WEEK = 57841
const SQL_TSI_MONTH = 57842
const SQL_TSI_QUARTER = 57843
const SQL_TSI_YEAR = 57844
const SQL_TSI_SECOND = 57845
const SQL_TSI_MINUTE = 57846
const RECURSIVE = 57847
const CONFIG = 57848
const DRAINER = 57849
const SOURCE = 57850
const STREAM = 57851
const HEADERS = 57852
const CONNECTOR = 57853
const CONNECTORS = 57854
const DAEMON = 57855
const PAUSE = 57856
const CANCEL = 57857
const TASK = 57858
const RESUME = 57859
const MATCH = 57860
const AGAINST = 57861
const BOOLEAN = 57862
const LANGUAGE = 57863
const WITH = 57864
const QUERY = 57865
const EXPANSION = 57866
const WITHOUT = 57867
const VALIDATION = 57868
const UPGRADE = 57869
const RETRY = 57870
const ADDDATE = 57871
const BIT_AND = 57872
const BIT_OR = 57873
const BIT_XOR = 57874
const CAST = 57875
const COUNT = 57876
const APPROX_COUNT = 57877
const APPROX_COUNT_DISTINCT = 57878
const SERIAL_EXTRACT = 57879
const APPROX_PERCENTILE = 57880
const CURDATE = 57881
const CURTIME = 57882
const DATE_ADD = 57883
const DATE_SUB = 57884
const EXTRACT = 57885
const GROUP_CONCAT = 57886
const MAX = 57887
const MID = 57888
const MIN = 57889
const NOW = 57890
const POSITION = 57891
const SESSION_USER = 57892
const STD = 57893
const STDDEV = 57894
const MEDIAN = 57895
const CLUSTER_CENTERS = 57896
const KMEANS = 57897
const STDDEV_POP = 57898
const STDDEV_SAMP = 57899
const SUBDATE = 57900
const SUBSTR = 57901
const SUBSTRING = 57902
const SUM = 57903
const SYSDATE = 57904
const SYSTEM_USER = 57905
const TRANSLATE = 57906
const TRIM = 57907
const VARIANCE = 57908
const VAR_POP = 57909
const VAR_SAMP = 57910
const AVG = 57911
const RANK = 57912
const ROW_NUMBER = 57913
const DENSE_RANK = 57914
const BIT_CAST = 57915
const BITMAP_BIT_POSITION = 57916
const BITMAP_BUCKET_NUMBER = 57917
const BITMAP_COUNT = 57918
const BITMAP_CONSTRUCT_AGG = 57919
const BITMAP_OR_AGG = 57920
const NEXTVAL = 57921
const SETVAL = 57922
const CURRVAL = 57923
const LASTVAL = 57924
const ARROW = 57925
const ROW = 57926
const OUTFILE = 57927
const HEADER = 57928
const MAX_FILE_SIZE = 57929
const FORCE_QUOTE = 57930
const PARALLEL = 57931
const STRICT = 57932
const UNUSED = 57933
const BINDINGS = 57934
const DO = 57935
const DECLARE = 57936
const LOOP = 57937
const WHILE = 57938
const LEAVE = 57939
const ITERATE = 57940
const UNTIL = 57941
const CALL = 57942
const PREV = 57943
const SLIDING = 57944
const FILL = 57945
const SPBEGIN = 57946
const BACKEND = 57947
const SERVERS = 57948
const HANDLER = 57949
const PERCENT = 57950
const SAMPLE = 57951
const MO_TS = 57952
const KILL = 57953
const BACKUP = 57954
const FILESYSTEM = 57955
const PARALLELISM = 57956
const RESTORE = 57957
const QUERY_RESULT = 57958

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12115

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 123,
	11, 740,
	22, 740,
	-2, 733,
	-1, 144,
	238, 1141,
	240, 1040,
	-2, 1087,
	-1, 169,
	43, 563,
	240, 563,
	267, 570,
	268, 570,
	463, 563,
	-2, 600,
	-1, 210,
	637, 1899,
	-2, 476,
	-1, 511,
	637, 2018,
	-2, 365,
	-1, 569,
	637, 2077,
	-2, 363,
	-1, 570,
	637, 2078,
	-2, 364,
	-1, 571,
	637, 2079,
	-2, 366,
	-1, 703,
	319, 151,
	435, 151,
	436, 151,
	-2, 1804,
	-1, 769,
	82, 1591,
	-2, 1954,
	-1, 770,
	82, 1609,
	-2, 1925,
	-1, 774,
	82, 1610,
	-2, 1953,
	-1, 807,
	82, 1518,
	-2, 2150,
	-1, 808,
	82, 1519,
	-2, 2149,
	-1, 809,
	82, 1520,
	-2, 2139,
	-1, 810,
	82, 2111,
	-2, 2132,
	-1, 811,
	82, 2112,
	-2, 2133,
	-1, 812,
	82, 2113,
	-2, 2141,
	-1, 813,
	82, 2114,
	-2, 2121,
	-1, 814,
	82, 2115,
	-2, 2130,
	-1, 815,
	82, 2116,
	-2, 2142,
	-1, 816,
	82, 2117,
	-2, 2143,
	-1, 817,
	82, 2118,
	-2, 2148,
	-1, 818,
	82, 2119,
	-2, 2153,
	-1, 819,
	82, 2120,
	-2, 2154,
	-1, 820,
	82, 1587,
	-2, 1992,
	-1, 821,
	82, 1588,
	-2, 1788,
	-1, 822,
	82, 1589,
	-2, 2001,
	-1, 823,
	82, 1590,
	-2, 1797,
	-1, 825,
	82, 1593,
	-2, 1805,
	-1, 826,
	82, 1594,
	-2, 2025,
	-1, 828,
	82, 1597,
	-2, 1824,
	-1, 830,
	82, 1599,
	-2, 2037,
	-1, 831,
	82, 1600,
	-2, 2036,
	-1, 832,
	82, 1601,
	-2, 1868,
	-1, 833,
	82, 1602,
	-2, 1949,
	-1, 836,
	82, 1605,
	-2, 2048,
	-1, 838,
	82, 1607,
	-2, 2051,
	-1, 839,
	82, 1608,
	-2, 2053,
	-1, 840,
	82, 1611,
	-2, 2061,
	-1, 841,
	82, 1612,
	-2, 1934,
	-1, 842,
	82, 1613,
	-2, 1979,
	-1, 843,
	82, 1614,
	-2, 1944,
	-1, 844,
	82, 1615,
	-2, 1969,
	-1, 855,
	82, 1496,
	-2, 2144,
	-1, 856,
	82, 1497,
	-2, 2145,
	-1, 857,
	82, 1498,
	-2, 2146,
	-1, 946,
	458, 600,
	459, 600,
	-2, 564,
	-1, 993,
	124, 1788,
	135, 1788,
	155, 1788,
	-2, 1762,
	-1, 1109,
	22, 767,
	-2, 716,
	-1, 1215,
	11, 740,
	22, 740,
	-2, 1376,
	-1, 1297,
	22, 767,
	-2, 716,
	-1, 1627,
	82, 1662,
	-2, 1951,
	-1, 1628,
	82, 1663,
	-2, 1952,
	-1, 1785,
	83, 917,
	-2, 923,
	-1, 2218,
	107, 1079,
	151, 1079,
	190, 1079,
	193, 1079,
	280, 1079,
	-2, 1072,
	-1, 2368,
	11, 740,
	22, 740,
	-2, 860,
	-1, 2400,
	83, 1748,
	156, 1748,
	-2, 1936,
	-1, 2401,
	83, 1748,
	156, 1748,
	-2, 1935,
	-1, 2402,
	83, 1724,
	156, 1724,
	-2, 1922,
	-1, 2403,
	83, 1725,
	156, 1725,
	-2, 1927,
	-1, 2404,
	83, 1726,
	156, 1726,
	-2, 1856,
	-1, 2405,
	83, 1727,
	156, 1727,
	-2, 1850,
	-1, 2406,
	83, 1728,
	156, 1728,
	-2, 1778,
	-1, 2407,
	83, 1729,
	156, 1729,
	-2, 1924,
	-1, 2408,
	83, 1730,
	156, 1730,
	-2, 1854,
	-1, 2409,
	83, 1731,
	156, 1731,
	-2, 1849,
	-1, 2410,
	83, 1732,
	156, 1732,
	-2, 1838,
	-1, 2411,
	83, 1748,
	156, 1748,
	-2, 1839,
	-1, 2412,
	83, 1748,
	156, 1748,
	-2, 1840,
	-1, 2414,
	83, 1737,
	156, 1737,
	-2, 1969,
	-1, 2415,
	83, 1715,
	156, 1715,
	-2, 1954,
	-1, 2416,
	83, 1746,
	156, 1746,
	-2, 1925,
	-1, 2417,
	83, 1746,
	156, 1746,
	-2, 1953,
	-1, 2418,
	83, 1746,
	156, 1746,
	-2, 1806,
	-1, 2419,
	83, 1744,
	156, 1744,
	-2, 1944,
	-1, 2420,
	83, 1741,
	156, 1741,
	-2, 1829,
	-1, 2421,
	82, 1696,
	83, 1696,
	156, 1696,
	393, 1696,
	394, 1696,
	395, 1696,
	-2, 1777,
	-1, 2422,
	82, 1697,
	83, 1697,
	156, 1697,
	393, 1697,
	394, 1697,
	395, 1697,
	-2, 1779,
	-1, 2423,
	82, 1698,
	83, 1698,
	156, 1698,
	393, 1698,
	394, 1698,
	395, 1698,
	-2, 1997,
	-1, 2424,
	82, 1700,
	83, 1700,
	156, 1700,
	393, 1700,
	394, 1700,
	395, 1700,
	-2, 1926,
	-1, 2425,
	82, 1702,
	83, 1702,
	156, 1702,
	393, 1702,
	394, 1702,
	395, 1702,
	-2, 1908,
	-1, 2426,
	82, 1704,
	83, 1704,
	156, 1704,
	393, 1704,
	394, 1704,
	395, 1704,
	-2, 1855,
	-1, 2427,
	82, 1706,
	83, 1706,
	156, 1706,
	393, 1706,
	394, 1706,
	395, 1706,
	-2, 1834,
	-1, 2428,
	82, 1707,
	83, 1707,
	156, 1707,
	393, 1707,
	394, 1707,
	395, 1707,
	-2, 1835,
	-1, 2429,
	82, 1709,
	83, 1709,
	156, 1709,
	393, 1709,
	394, 1709,
	395, 1709,
	-2, 1776,
	-1, 2430,
	83, 1751,
	156, 1751,
	393, 1751,
	394, 1751,
	395, 1751,
	-2, 1811,
	-1, 2431,
	83, 1751,
	156, 1751,
	393, 1751,
	394, 1751,
	395, 1751,
	-2, 1825,
	-1, 2432,
	83, 1754,
	156, 1754,
	393, 1754,
	394, 1754,
	395, 1754,
	-2, 1807,
	-1, 2433,
	83, 1754,
	156, 1754,
	393, 1754,
	394, 1754,
	395, 1754,
	-2, 1871,
	-1, 2434,
	83, 1751,
	156, 1751,
	393, 1751,
	394, 1751,
	395, 1751,
	-2, 1892,
	-1, 2637,
	107, 1079,
	151, 1079,
	190, 1079,
	193, 1079,
	280, 1079,
	-2, 1073,
	-1, 2655,
	80, 660,
	156, 660,
	-2, 1256,
	-1, 3058,
	193, 1079,
	304, 1344,
	-2, 1316,
	-1, 3224,
	107, 1079,
	151, 1079,
	190, 1079,
	193, 1079,
	-2, 1197,
	-1, 3226,
	107, 1079,
	151, 1079,
	190, 1079,
	193, 1079,
	-2, 1197,
	-1, 3238,
	80, 660,
	156, 660,
	-2, 1256,
	-1, 3260,
	193, 1079,
	304, 1344,
	-2, 1317,
	-1, 3400,
	107, 1079,
	151, 1079,
	190, 1079,
	193, 1079,
	-2, 1198,
	-1, 3427,
	83, 1159,
	156, 1159,
	-2, 1079,
	-1, 3559,
	83, 1159,
	156, 1159,
	-2, 1079,
	-1, 3711,
	83, 1163,
	156, 1163,
	-2, 1079,
	-1, 3759,
	83, 1164,
	156, 1164,
	-2, 1079,
}

const yyPrivate = 57344

const yyLast = 48761

var yyAct = [...]int{
	736, 713, 3805, 738, 3779, 2685, 199, 1870, 3715, 3798,
	3245, 3721, 1607, 3077, 707, 3339, 3616, 3722, 3559, 3714,
	3642, 3044, 3599, 722, 3673, 715, 3146, 3593, 3455, 3537,
	2679, 2489, 3147, 3274, 1250, 3558, 1444, 3387, 1603, 3620,
	3388, 3385, 604, 3483, 766, 1110, 2682, 992, 3343, 3528,
	1382, 1521, 1388, 3334, 622, 1818, 628, 628, 3600, 1654,
	59, 3602, 628, 645, 654, 3407, 3211, 654, 3261, 2658,
	37, 2266, 1104, 3397, 3014, 1610, 3369, 2793, 3402, 3053,
	711, 2398, 2975, 3144, 3227, 2792, 1958, 184, 3003, 3199,
	1961, 2709, 3073, 2791, 3062, 2775, 3055, 3229, 3102, 1668,
	3186, 2524, 1926, 2073, 2854, 2031, 3132, 2396, 2814, 2362,
	662, 666, 3112, 2788, 2626, 2982, 2269, 2229, 2986, 1437,
	705, 2688, 1830, 1533, 2980, 1976, 3023, 1100, 2976, 2978,
	2638, 3061, 2346, 651, 2973, 2248, 2196, 2182, 2901, 2958,
	2056, 710, 2181, 2468, 2040, 2827, 122, 921, 1517, 2039,
	1760, 2977, 2450, 2069, 36, 2032, 2004, 1929, 2837, 1954,
	1525, 2351, 2068, 2363, 1522, 2614, 2609, 2711, 1849, 2650,
	2690, 986, 6, 604, 1353, 195, 8, 2218, 2267, 1927,
	194, 7, 2228, 2394, 1794, 1049, 1601, 2070, 1860, 1484,
	714, 621, 1554, 1453, 1423, 2557, 2080, 2208, 1661, 199,
	2103, 199, 1592, 1040, 1041, 2262, 15, 1829, 1641, 1123,
	628, 1034, 1035, 603, 704, 2020, 1039, 955, 2038, 1491,
	712, 2035, 1994, 1790, 1600, 723, 1322, 1536, 1371, 985,
	1422, 2370, 1793, 637, 920, 33, 1476, 1001, 1510, 1420,
	859, 668, 1669, 1483, 706, 669, 653, 1383, 1367, 897,
	2556, 640, 181, 1391, 175, 27, 100, 941, 665, 918,
	903, 1606, 24, 17, 23, 185, 1251, 10, 2077, 649,
	1295, 16, 1546, 1183, 1184, 1185, 1182, 1183, 1184, 1185,
	1182, 1183, 1184, 1185, 1182, 2372, 1036, 3522, 1038, 2592,
	2592, 2592, 1037, 1545, 3415, 2871, 3241, 2870, 647, 3030,
	2087, 1105, 3214, 14, 3139, 2249, 2512, 2453, 2456, 2454,
	1106, 2451, 1773, 657, 633, 1498, 1494, 1032, 650, 861,
	862, 1033, 183, 998, 1314, 1033, 623, 2180, 2951, 624,
	2948, 1000, 2953, 1033, 646, 2950, 706, 3790, 1405, 2584,
	2582, 1767, 1310, 1496, 1183, 1184, 1185, 1182, 3332, 3264,
	1183, 1184, 1185, 1182, 2850, 2848, 1031, 2009, 1105, 8,
	3588, 3490, 3484, 3335, 7, 3145, 648, 2053, 3604, 1245,
	2034, 860, 2928, 2026, 2307, 871, 3370, 1145, 3696, 2498,
	2586, 3374, 1532, 2074, 182, 3228, 629, 3276, 2219, 2220,
	3544, 182, 55, 171, 145, 1531, 1317, 2506, 3510, 182,
	3267, 182, 3653, 1463, 1462, 1461, 2644, 182, 55, 171,
	145, 3262, 1004, 1002, 1003, 2926, 3284, 3285, 182, 55,
	171, 145, 3263, 664, 2085, 682, 681, 688, 678, 1345,
	2213, 1328, 182, 1355, 3545, 2786, 2388, 685, 686, 1401,
	687, 691, 1402, 3512, 672, 1593, 182, 121, 1597, 182,
	55, 171, 145, 2642, 696, 1121, 182, 1318, 182, 3268,
	176, 182, 1180, 1775, 182, 55, 171, 145, 176, 1971,
	176, 1563, 1596, 2389, 1540, 2376, 176, 2820, 2375, 1552,
	2873, 2377, 1118, 1424, 872, 1426, 850, 176, 849, 851,
	852, 1938, 853, 854, 2862, 996, 997, 700, 2821, 2822,
	702, 176, 2469, 2645, 1537, 701, 121, 1939, 1940, 1549,
	2952, 2611, 2949, 1777, 1778, 176, 964, 1379, 176, 1844,
	1392, 2612, 1609, 1160, 1575, 1539, 1161, 176, 1404, 1178,
	1551, 1389, 1390, 176, 1387, 1173, 2299, 3693, 1386, 1389,
	1390, 3725, 3726, 1153, 995, 994, 1155, 3607, 3686, 3356,
	3606, 3685, 3607, 3283, 1163, 2270, 1598, 3605, 3684, 3746,
	3606, 3605, 1327, 2169, 3591, 3689, 3048, 3148, 1934, 2855,
	2610, 3675, 3046, 3675, 1156, 3594, 3595, 3596, 3597, 1595,
	3272, 3783, 3784, 2493, 3678, 2856, 2587, 2857, 1497, 1495,
	3487, 1613, 3148, 1115, 2089, 3613, 3161, 1949, 3200, 2081,
	1955, 2997, 3269, 3273, 3271, 3270, 2987, 1945, 2340, 1126,
	3207, 3379, 2207, 2017, 2995, 1504, 1503, 909, 3698, 3699,
	1126, 2601, 1176, 1177, 627, 627, 628, 628, 3286, 3691,
	635, 3694, 3695, 1588, 1158, 2889, 1175, 628, 1114, 2891,
	3278, 3279, 673, 675, 674, 2730, 2503, 3514, 3515, 168,
	700, 1148, 680, 702, 1149, 2617, 654, 654, 701, 628,
	3333, 3519, 1165, 2305, 684, 1166, 144, 1584, 180, 2992,
	2993, 699, 2779, 2849, 3502, 2343, 3503, 2086, 677, 1151,
	2342, 2212, 667, 1689, 1043, 2994, 3355, 3286, 169, 3376,
	1403, 1154, 1157, 1168, 3357, 3724, 1594, 1159, 2585, 3265,
	2599, 3687, 1414, 874, 1001, 3277, 3508, 1612, 1611, 3301,
	3190, 2347, 651, 651, 1377, 1329, 2064, 1150, 1170, 2285,
	1969, 1970, 1223, 1186, 2991, 2265, 2288, 3076, 620, 3754,
	3505, 1216, 1313, 1547, 3050, 3012, 2600, 656, 3635, 875,
	1226, 3298, 1544, 3074, 3075, 3630, 1171, 1172, 2630, 2633,
	2634, 2635, 2631, 2632, 3502, 1689, 3503, 1107, 3024, 1113,
	2075, 3504, 2075, 2651, 3549, 1234, 2075, 3521, 1114, 3164,
	2895, 2591, 3497, 1164, 1162, 1140, 1106, 1001, 635, 1106,
	655, 1106, 2784, 2287, 2215, 3291, 2959, 679, 683, 689,
	998, 690, 692, 1254, 1152, 693, 694, 695, 1000, 2872,
	697, 698, 3621, 2869, 1128, 1127, 3246, 2108, 1120, 3541,
	3505, 1169, 652, 3637, 3045, 1128, 1127, 1033, 974, 3643,
	2076, 1033, 1033, 1033, 2684, 3697, 2286, 3253, 652, 1033,
	1033, 3543, 1366, 3302, 2391, 3282, 1167, 2989, 1106, 652,
	1217, 3504, 2680, 2681, 2452, 2684, 1685, 2088, 649, 649,
	1499, 3612, 1682, 3079, 3446, 3816, 1684, 1681, 1683, 1687,
	1688, 2317, 2316, 998, 1686, 3346, 1131, 2623, 3513, 3441,
	1364, 1000, 663, 911, 56, 912, 1316, 647, 647, 1363,
	1619, 1622, 1623, 2337, 2338, 652, 1325, 622, 860, 1255,
	56, 1620, 2759, 1117, 1119, 2583, 1433, 650, 650, 3375,
	1432, 56, 1133, 1134, 1293, 1109, 1137, 1298, 1138, 1129,
	146, 3281, 2998, 646, 646, 2507, 2988, 146, 1685, 1362,
	921, 3550, 1139, 3644, 1682, 146, 3713, 146, 1684, 1681,
	1683, 1687, 1688, 146, 1956, 1776, 1686, 1378, 1219, 1220,
	1221, 1222, 1389, 1390, 146, 648, 648, 56, 1389, 1390,
	1224, 2892, 3529, 1108, 997, 1102, 676, 3054, 146, 3516,
	3051, 2272, 970, 968, 2616, 969, 3542, 177, 178, 3435,
	179, 628, 146, 1416, 3690, 146, 3380, 2832, 2833, 604,
	604, 3498, 146, 3563, 146, 3601, 1948, 146, 604, 604,
	146, 1385, 1448, 1448, 1101, 628, 1946, 1670, 1671, 1672,
	1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1692, 1693,
	1694, 1695, 1696, 1697, 1690, 1691, 2947, 654, 1477, 622,
	2620, 2621, 1589, 1487, 1487, 2731, 2308, 2732, 2733, 1450,
	1446, 1446, 3074, 3075, 199, 2619, 2990, 1486, 1486, 3801,
	1381, 1380, 1455, 604, 3078, 1266, 1267, 3230, 1214, 2265,
	3330, 975, 965, 1323, 2092, 2094, 2095, 2282, 1330, 664,
	1145, 3498, 2816, 2818, 3672, 3499, 3456, 3457, 3458, 3462,
	3460, 3461, 3459, 971, 1421, 3609, 3151, 3365, 1326, 3070,
	1692, 1693, 1694, 1695, 1696, 1697, 1690, 1691, 2963, 2499,
	2380, 2275, 2303, 2595, 1529, 1415, 3010, 2078, 2271, 1534,
	1505, 3442, 3443, 2273, 3712, 1337, 1543, 2894, 1343, 1442,
	1443, 1342, 3562, 1341, 1340, 1299, 1332, 1333, 1334, 1335,
	1336, 1621, 1338, 658, 3193, 910, 965, 3448, 1344, 2728,
	3071, 1573, 1297, 2272, 2275, 967, 973, 3187, 966, 1350,
	2760, 2762, 2763, 2764, 2761, 1448, 1144, 1448, 1114, 1331,
	1428, 1430, 913, 2104, 1553, 2090, 2091, 2274, 2597, 1440,
	1441, 1001, 2188, 1373, 1374, 915, 916, 917, 1001, 1321,
	2302, 1538, 965, 2903, 2902, 1780, 3802, 1359, 1550, 1352,
	2190, 2189, 2750, 2751, 1781, 880, 1779, 1319, 1320, 3366,
	2964, 651, 2670, 2187, 627, 1103, 1614, 1615, 1616, 1617,
	1618, 1393, 2185, 1583, 1396, 1112, 1406, 1407, 1774, 967,
	1478, 876, 966, 972, 1500, 1448, 2329, 3437, 877, 1519,
	1520, 3436, 2276, 3408, 2199, 3011, 1431, 1136, 3812, 2817,
	1542, 3817, 1667, 1024, 1029, 1030, 879, 3807, 1659, 2210,
	882, 881, 1663, 1664, 1665, 1666, 1716, 2200, 2201, 3796,
	1456, 1700, 1527, 1655, 1524, 967, 633, 1528, 966, 1710,
	1469, 1568, 1569, 1475, 2281, 2276, 3682, 1488, 2279, 1608,
	2271, 2265, 2270, 2138, 2268, 2273, 2137, 1629, 1630, 1631,
	1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1508,
	1590, 1511, 1512, 1652, 1653, 2093, 3761, 1181, 3733, 1489,
	1605, 2083, 1513, 1514, 3152, 2749, 3109, 3799, 3800, 1145,
	3808, 1762, 1114, 3824, 2596, 864, 865, 866, 867, 2471,
	3105, 3727, 3762, 1782, 976, 3029, 1586, 649, 1477, 2274,
	1624, 3072, 1111, 1791, 1448, 1796, 1797, 1701, 1799, 1416,
	628, 1725, 1360, 2360, 1758, 628, 1360, 3196, 1448, 1181,
	3709, 3163, 921, 1572, 2209, 1819, 647, 1358, 1556, 2174,
	2656, 1571, 1448, 1365, 1706, 1707, 1708, 1143, 1416, 3762,
	1375, 3734, 1562, 645, 3663, 1823, 650, 1722, 1394, 1395,
	1723, 1397, 1398, 1561, 1399, 1599, 1564, 1761, 1581, 1582,
	1715, 1604, 646, 1843, 3525, 1580, 1579, 1736, 1737, 1839,
	1576, 2657, 1850, 1850, 1578, 1416, 1602, 1416, 1416, 1111,
	2498, 628, 628, 3638, 1791, 1920, 1757, 3083, 1448, 1923,
	1924, 1936, 3626, 3710, 648, 1026, 1027, 1028, 739, 749,
	3081, 1650, 1651, 1769, 1643, 604, 1577, 1448, 740, 3582,
	741, 745, 748, 744, 742, 743, 3581, 3525, 1798, 1847,
	3576, 3575, 1762, 1368, 1372, 1372, 1372, 1762, 1762, 3574,
	3573, 1800, 2957, 869, 3553, 628, 1791, 1448, 2361, 1981,
	3552, 628, 628, 628, 1986, 1987, 3524, 1181, 1368, 1368,
	2361, 1991, 1992, 1993, 3109, 3307, 2083, 1999, 2955, 3255,
	1764, 1872, 3220, 746, 199, 3627, 1142, 199, 199, 2657,
	199, 1183, 1184, 1185, 1182, 2361, 1972, 2007, 1918, 3179,
	2010, 1730, 3583, 2013, 1997, 2835, 2015, 1591, 3175, 2233,
	751, 123, 2603, 3525, 3525, 747, 123, 1853, 3091, 1964,
	1965, 2588, 3525, 3525, 2811, 1759, 2488, 2083, 2476, 1412,
	1716, 1716, 2042, 2083, 2391, 1950, 1765, 2924, 1942, 3525,
	1944, 2563, 1716, 1716, 1294, 1787, 1788, 1789, 2391, 2058,
	1962, 1963, 3256, 1454, 1786, 3221, 2555, 1802, 1803, 1804,
	1805, 1851, 2057, 1143, 2074, 1937, 2514, 1821, 1822, 1980,
	634, 2008, 3180, 123, 2011, 2012, 1816, 2014, 1819, 1815,
	1957, 3176, 1448, 2072, 2496, 1795, 1983, 1984, 1985, 2484,
	1001, 3092, 1703, 1001, 2052, 1836, 1832, 2361, 2478, 1811,
	2473, 1826, 1001, 1538, 1854, 1855, 2044, 1841, 1698, 1699,
	2465, 1702, 2463, 1824, 1181, 1831, 2258, 1833, 1834, 1717,
	1852, 2179, 1183, 1184, 1185, 1182, 651, 1917, 2173, 1181,
	2461, 1840, 1724, 2066, 1726, 2172, 1727, 1728, 1729, 1181,
	1922, 2459, 1925, 1995, 2232, 2048, 1145, 2145, 1941, 2065,
	1943, 1967, 1351, 1658, 1951, 1434, 3206, 2233, 3809, 2117,
	2272, 2275, 2474, 2107, 2175, 3241, 2839, 2112, 2114, 1795,
	3472, 2479, 3305, 2474, 2037, 2659, 998, 2501, 2500, 1978,
	2492, 1979, 2244, 2466, 1000, 2464, 2037, 999, 998, 1183,
	1184, 1185, 1182, 2252, 123, 1001, 1000, 2133, 2118, 2063,
	2005, 2003, 1198, 2460, 2152, 2002, 1989, 1214, 2124, 123,
	1558, 123, 2151, 2136, 2460, 1231, 2131, 2233, 1602, 2101,
	2102, 1130, 2022, 1197, 1196, 1206, 1207, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1198, 2116, 2127, 2174, 2148, 2054,
	1098, 2126, 2140, 2153, 2154, 2155, 2125, 2082, 2158, 2159,
	2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2097, 1093,
	2043, 2051, 649, 2049, 1966, 2184, 2062, 2186, 3631, 1183,
	1184, 1185, 1182, 878, 1565, 705, 3034, 1181, 628, 628,
	628, 998, 3409, 2067, 3233, 1181, 1181, 1827, 1828, 1000,
	2886, 647, 2276, 628, 628, 628, 628, 2271, 2265, 2270,
	3818, 2268, 2273, 3787, 1837, 1838, 2230, 2061, 1436, 1181,
	3231, 650, 3632, 2260, 1181, 2243, 2236, 1416, 2060, 1181,
	2083, 2451, 1705, 1704, 1848, 3025, 3410, 646, 3234, 1356,
	2300, 1410, 1411, 1357, 1413, 3523, 1417, 1418, 1419, 1705,
	1704, 2096, 2105, 1416, 2098, 2146, 2147, 1566, 2149, 2110,
	864, 865, 866, 867, 3232, 2156, 2274, 2099, 2100, 648,
	2294, 1643, 1201, 1202, 1203, 1204, 1205, 1198, 1464, 1465,
	1466, 1467, 1468, 1368, 1470, 1471, 1472, 1473, 1474, 1369,
	3494, 3439, 1480, 1481, 1482, 3438, 3424, 1372, 1206, 1207,
	1199, 1200, 1201, 1202, 1203, 1204, 1205, 1198, 1801, 1372,
	2532, 3381, 3026, 1806, 883, 3213, 3110, 3101, 1435, 3096,
	2301, 1196, 1206, 1207, 1199, 1200, 1201, 1202, 1203, 1204,
	1205, 1198, 2365, 2365, 1936, 2365, 3093, 1459, 1092, 1088,
	1089, 1090, 1091, 1742, 2537, 3040, 2536, 2535, 2533, 2168,
	2170, 2171, 3005, 604, 604, 1438, 3027, 1762, 2176, 1762,
	1735, 1114, 3557, 1400, 2781, 2628, 1439, 1448, 628, 2593,
	1183, 1184, 1185, 1182, 2511, 2254, 2477, 1762, 1762, 1856,
	1857, 3140, 2382, 628, 3137, 2251, 1254, 2253, 2047, 1114,
	2435, 622, 2211, 2264, 1001, 2046, 1487, 2045, 1936, 2193,
	1347, 2440, 1346, 2442, 1116, 2386, 1370, 199, 869, 2521,
	1486, 2445, 1662, 2534, 2111, 2263, 1197, 1196, 1206, 1207,
	1199, 1200, 1201, 1202, 1203, 1204, 1205, 1198, 2006, 2378,
	1662, 2379, 2257, 1977, 2237, 1492, 2369, 2006, 2841, 1977,
	1977, 1977, 2367, 1783, 2371, 1185, 1182, 2481, 3683, 2383,
	2384, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1198, 1182,
	2480, 3451, 2483, 1356, 2494, 3450, 2858, 1357, 2072, 1649,
	2277, 2278, 2720, 2283, 2718, 1448, 2250, 1448, 2696, 1448,
	998, 2694, 1255, 3430, 1114, 1646, 1648, 1645, 1000, 1647,
	2240, 3815, 2513, 1233, 2446, 2246, 3382, 3383, 2247, 1720,
	2439, 1183, 1184, 1185, 1182, 2576, 1232, 2577, 2393, 3792,
	2399, 3791, 2455, 3737, 1721, 2504, 3708, 3707, 1448, 2541,
	2344, 3633, 3578, 3566, 1428, 1430, 2522, 3377, 3212, 2528,
	3556, 3546, 2373, 3204, 2548, 3485, 2542, 2543, 3412, 1448,
	1183, 1184, 1185, 1182, 2545, 2546, 3411, 2771, 2627, 3138,
	3247, 2538, 2539, 3814, 2540, 2769, 1446, 3235, 3203, 2767,
	2551, 2387, 123, 123, 999, 2390, 1189, 1190, 1191, 1192,
	1193, 1194, 1195, 1187, 2129, 2549, 2756, 1446, 1183, 1184,
	1185, 1182, 2436, 2996, 3378, 2438, 2594, 2523, 1614, 1762,
	3205, 2882, 2552, 2553, 3650, 2525, 2853, 2525, 2852, 1114,
	2754, 2753, 2752, 1114, 2770, 2508, 1183, 1184, 1185, 1182,
	1448, 3103, 2768, 2624, 2625, 2447, 2766, 2529, 2917, 2744,
	1920, 2550, 2738, 1183, 1184, 1185, 1182, 2737, 2655, 2736,
	2735, 2510, 1493, 2755, 2661, 2589, 2467, 1215, 2178, 2025,
	2128, 2505, 2490, 2491, 2024, 2486, 2023, 2019, 2519, 1183,
	1184, 1185, 1182, 2672, 2018, 2497, 2495, 1492, 2665, 2666,
	1975, 2502, 1974, 1114, 1973, 2580, 1559, 1183, 1184, 1185,
	1182, 2693, 1312, 2981, 2245, 3517, 3518, 2916, 1114, 1114,
	1114, 1850, 1001, 1096, 1114, 3811, 2704, 2705, 2706, 2707,
	1114, 2714, 2643, 2715, 2716, 3810, 2717, 2639, 2719, 3718,
	2515, 2516, 2531, 3619, 1183, 1184, 1185, 1182, 2652, 2714,
	3340, 700, 3785, 2640, 702, 1183, 1184, 1185, 1182, 701,
	2604, 2365, 3753, 3752, 2399, 2518, 1183, 1184, 1185, 1182,
	1183, 1184, 1185, 1182, 3749, 2772, 1602, 1872, 2674, 1095,
	3670, 3615, 1982, 604, 3386, 3598, 3589, 2662, 1920, 1114,
	1936, 1936, 1936, 1936, 3570, 3565, 2203, 2204, 2205, 3564,
	3520, 1114, 1936, 3486, 3432, 2365, 3393, 3363, 1372, 3360,
	3359, 2221, 2222, 2223, 2224, 3338, 3336, 3315, 2606, 3314,
	2608, 1448, 3311, 1300, 3309, 2691, 2605, 2776, 3242, 2691,
	3202, 2687, 628, 628, 2622, 1183, 1184, 1185, 1182, 2646,
	2699, 2700, 2558, 2559, 2660, 2703, 2698, 8, 2564, 3201,
	2654, 2710, 7, 2905, 2306, 3198, 3188, 2309, 2310, 2311,
	2312, 2313, 2314, 2315, 3172, 2673, 2318, 2319, 2320, 2321,
	2322, 2323, 2324, 2325, 2326, 2327, 2328, 3170, 2330, 2331,
	2332, 2333, 2334, 2695, 2335, 2689, 2807, 2676, 199, 2702,
	3098, 3089, 3088, 199, 1197, 1196, 1206, 1207, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1198, 2845, 3006, 2847, 2968,
	2794, 1795, 2967, 2962, 2183, 1716, 2734, 1716, 2896, 2893,
	2868, 2836, 2794, 2547, 2746, 2851, 2825, 1762, 1183, 1184,
	1185, 1182, 1762, 2881, 2765, 2757, 2692, 3361, 2747, 1448,
	2745, 2741, 2888, 2057, 2671, 2740, 2777, 2739, 2590, 2487,
	2782, 806, 805, 3646, 2780, 2028, 2021, 1772, 1457, 2808,
	3349, 2806, 634, 1771, 1183, 1184, 1185, 1182, 2810, 2795,
	2796, 2797, 2798, 1820, 1001, 2842, 1454, 2809, 2899, 1560,
	2846, 1262, 2826, 2823, 2863, 1001, 1258, 1183, 1184, 1185,
	1182, 1977, 1257, 1835, 123, 2874, 3348, 1099, 873, 3507,
	3506, 3495, 2921, 1761, 3362, 3347, 1519, 1520, 2867, 1842,
	3226, 3225, 1845, 1846, 2121, 3224, 1183, 1184, 1185, 1182,
	3195, 2865, 3184, 1183, 1184, 1185, 1182, 2910, 3295, 2912,
	3182, 2875, 3181, 3178, 1527, 3177, 1524, 2965, 3171, 1528,
	3169, 2966, 2844, 2840, 3153, 2843, 3167, 3143, 1114, 2890,
	3142, 2885, 3128, 3127, 2984, 1183, 1184, 1185, 1182, 2864,
	3035, 123, 2971, 2861, 3000, 2954, 2866, 2859, 123, 2878,
	628, 2877, 2876, 1183, 1184, 1185, 1182, 2922, 2915, 2907,
	1512, 123, 3015, 1114, 2906, 2920, 628, 2900, 1114, 1114,
	1513, 1514, 2884, 123, 2834, 2897, 2602, 1936, 2230, 2898,
	3033, 2462, 2458, 2457, 2157, 2150, 2904, 1183, 1184, 1185,
	1182, 2663, 1183, 1184, 1185, 1182, 2144, 2913, 2914, 2294,
	2668, 2669, 2143, 2142, 2141, 2911, 2970, 3009, 2956, 2139,
	2135, 3060, 2134, 3063, 2132, 3063, 3063, 2123, 2120, 2119,
	1114, 2027, 1755, 1001, 182, 1001, 171, 145, 1754, 1753,
	1001, 1719, 3067, 1718, 1709, 3018, 2639, 182, 1460, 3084,
	3022, 3080, 2919, 1458, 2686, 3736, 1252, 1448, 1448, 3645,
	2961, 2960, 3584, 3047, 3049, 3572, 1001, 3567, 1507, 3466,
	2969, 3449, 3082, 3445, 2613, 3423, 3043, 3406, 3323, 1183,
	1184, 1185, 1182, 3321, 3293, 2819, 3292, 3001, 3002, 3031,
	3289, 3288, 3254, 3085, 3086, 1446, 1446, 3251, 3008, 3249,
	3058, 2908, 2909, 176, 628, 3032, 3215, 3017, 1518, 2984,
	1509, 3028, 3020, 3021, 1523, 3059, 176, 1416, 1526, 998,
	1920, 1920, 1515, 1354, 2773, 3068, 2653, 1000, 2697, 2648,
	3042, 3421, 2647, 3037, 2918, 2929, 2930, 2264, 2641, 2607,
	2575, 2931, 2932, 2933, 2934, 2574, 2935, 2936, 2937, 2938,
	2939, 2940, 2941, 2942, 2943, 2944, 3064, 3065, 3069, 2263,
	2115, 1183, 1184, 1185, 1182, 2472, 1114, 2113, 2726, 2727,
	2541, 2573, 1183, 1184, 1185, 1182, 2381, 2336, 2231, 3141,
	2202, 2177, 1644, 2742, 2743, 1197, 1196, 1206, 1207, 1199,
	1200, 1201, 1202, 1203, 1204, 1205, 1198, 176, 1183, 1184,
	1185, 1182, 1731, 1732, 1733, 1734, 1988, 2778, 1738, 1739,
	1740, 1741, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
	1751, 1752, 1785, 1768, 3095, 628, 3662, 2572, 3100, 3090,
	3097, 3099, 3094, 3106, 3107, 1183, 1184, 1185, 1182, 3104,
	3117, 1587, 1183, 1184, 1185, 1182, 1541, 1516, 1311, 1296,
	3660, 2571, 3121, 3066, 1183, 1184, 1185, 1182, 1292, 1291,
	1290, 1289, 3166, 3124, 3125, 3126, 1288, 1413, 1287, 3168,
	1286, 1935, 1285, 3130, 2570, 1284, 1283, 3136, 1183, 1184,
	1185, 1182, 1282, 1281, 1280, 3658, 2569, 2399, 1279, 1278,
	2829, 2830, 1277, 1276, 1275, 3191, 1274, 1273, 3154, 2568,
	3183, 1183, 1184, 1185, 1182, 1272, 1271, 1270, 1269, 3155,
	3656, 2567, 3156, 1183, 1184, 1185, 1182, 2525, 1268, 3160,
	1265, 3173, 1264, 3290, 2566, 3159, 1183, 1184, 1185, 1182,
	1263, 1261, 1260, 1259, 1256, 2238, 2239, 3165, 1183, 1184,
	1185, 1182, 1249, 3219, 123, 2241, 2242, 123, 123, 2565,
	123, 1183, 1184, 1185, 1182, 1248, 1246, 1245, 1244, 2365,
	1936, 3238, 1243, 1001, 1242, 1241, 1240, 1239, 1238, 1237,
	1001, 1236, 1235, 3194, 1230, 1229, 1183, 1184, 1185, 1182,
	3197, 2562, 1228, 1227, 1147, 3257, 1097, 3185, 1114, 3767,
	999, 3189, 2561, 123, 3113, 3114, 2560, 3060, 2235, 2217,
	1135, 1114, 999, 3765, 3723, 3116, 2629, 2392, 1183, 1184,
	1185, 1182, 1114, 3119, 3304, 2030, 123, 2554, 1448, 1183,
	1184, 1185, 1182, 1183, 1184, 1185, 1182, 1146, 3118, 2803,
	3209, 3210, 2801, 3240, 2804, 3041, 1920, 2802, 2800, 2799,
	1114, 3004, 1762, 3428, 1183, 1184, 1185, 1182, 2805, 1348,
	2357, 2358, 2485, 2475, 3306, 1762, 1446, 3248, 3320, 3250,
	3287, 3322, 3237, 2304, 108, 58, 3325, 3280, 3236, 199,
	3244, 2544, 57, 2880, 3326, 1813, 1814, 2520, 3328, 1808,
	1809, 1810, 1114, 3056, 3317, 3057, 3300, 3327, 3157, 3158,
	3131, 3294, 1909, 1501, 3299, 1215, 3296, 2470, 1183, 1184,
	1185, 1182, 2437, 3303, 1183, 1184, 1185, 1182, 1657, 3258,
	2509, 2444, 2490, 2491, 3312, 3310, 1555, 3318, 3308, 3313,
	1535, 3364, 3297, 3324, 630, 631, 2192, 1114, 3007, 3316,
	1990, 3319, 632, 2710, 2722, 1183, 1184, 1185, 1182, 1141,
	3345, 2723, 2724, 2725, 3019, 2979, 1114, 1448, 1448, 2972,
	2675, 2649, 3015, 2256, 2226, 1817, 3331, 1784, 1705, 1704,
	3776, 2794, 3401, 3569, 3401, 1307, 1308, 3341, 1305, 1306,
	3342, 1303, 1304, 1301, 1302, 1174, 3087, 2345, 3395, 3396,
	1114, 3417, 1114, 3391, 2341, 1446, 1655, 1921, 3329, 1409,
	1408, 3123, 3420, 2828, 3422, 2191, 2059, 1361, 3743, 1448,
	1339, 1384, 3741, 2794, 3373, 3368, 3701, 3392, 3680, 3372,
	3371, 3679, 3677, 3622, 3585, 1001, 3480, 628, 3479, 1114,
	1114, 3418, 3337, 1114, 1114, 3398, 3394, 3419, 3358, 3174,
	3405, 3404, 3150, 3149, 3134, 2289, 2259, 1655, 3240, 3468,
	3416, 2044, 2353, 2356, 2357, 2358, 2354, 1557, 2355, 2359,
	3463, 3133, 1819, 2838, 3477, 1360, 3453, 3454, 3433, 3429,
	3464, 3465, 3287, 3481, 3482, 3425, 3426, 3389, 3192, 3280,
	3769, 3768, 1977, 2883, 2219, 3431, 1448, 2122, 2348, 1315,
	1132, 1197, 1196, 1206, 1207, 1199, 1200, 1201, 1202, 1203,
	1204, 1205, 1198, 3768, 3769, 3447, 3129, 3509, 3474, 1111,
	1376, 1608, 66, 1608, 186, 3, 2, 3475, 3501, 3469,
	3473, 3788, 3493, 3789, 1446, 2353, 2356, 2357, 2358, 2354,
	1, 2355, 2359, 2581, 1766, 1309, 3488, 3492, 864, 865,
	866, 867, 868, 1111, 863, 3527, 1425, 3538, 3532, 2374,
	3389, 3389, 1968, 3496, 3389, 3389, 3500, 1452, 2664, 1770,
	3350, 870, 3351, 2667, 1114, 2812, 2813, 3122, 2815, 2598,
	2079, 2783, 2339, 2206, 2999, 3561, 3555, 1349, 914, 1711,
	1570, 3526, 1023, 1125, 1567, 1124, 1122, 1660, 753, 2033,
	3533, 2774, 3345, 3534, 2368, 3535, 1209, 2748, 1213, 3547,
	1001, 3476, 3775, 3162, 3804, 3551, 3735, 1114, 3778, 1585,
	3530, 737, 1448, 3671, 1210, 1212, 1208, 3590, 1211, 1197,
	1196, 1206, 1207, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
	1198, 3739, 3568, 3592, 3491, 2084, 1179, 2860, 937, 794,
	764, 1247, 1548, 2927, 3577, 2925, 1025, 763, 3579, 3608,
	1446, 3611, 3208, 2618, 2831, 3540, 1022, 938, 1935, 2016,
	1234, 3603, 3587, 3489, 1502, 1506, 1114, 123, 2255, 3548,
	3641, 3427, 3586, 3052, 2683, 1530, 3636, 3252, 3354, 3623,
	3352, 3353, 670, 1947, 602, 1608, 3216, 3217, 3218, 983,
	3467, 2029, 3222, 3223, 671, 2234, 3692, 3571, 3618, 894,
	2216, 895, 887, 2637, 3614, 2636, 3617, 3640, 1625, 1188,
	1642, 2945, 2946, 1114, 1225, 3625, 2923, 709, 2109, 2615,
	3275, 1448, 3647, 2824, 3665, 3668, 65, 64, 3389, 63,
	3655, 3657, 3659, 3661, 62, 3639, 659, 1998, 3634, 207,
	755, 3669, 206, 3648, 3384, 3667, 3780, 735, 734, 733,
	3654, 732, 731, 730, 2352, 2350, 2349, 3664, 1931, 1446,
	3676, 1930, 1996, 3013, 3674, 1448, 2713, 2708, 3538, 1861,
	1197, 1196, 1206, 1207, 1199, 1200, 1201, 1202, 1203, 1204,
	1205, 1198, 2517, 1859, 3711, 2701, 2284, 3389, 2291, 1858,
	3719, 3700, 3720, 3702, 3705, 3706, 3651, 3704, 3652, 3444,
	3716, 3703, 2758, 1446, 3344, 1807, 1197, 1196, 1206, 1207,
	1199, 1200, 1201, 1202, 1203, 1204, 1205, 1198, 2280, 1878,
	2729, 1875, 1874, 2721, 3440, 3728, 3434, 3729, 3748, 3730,
	1906, 3731, 3536, 3742, 3389, 3744, 3745, 3732, 3400, 3740,
	3738, 3259, 1114, 3260, 3266, 2225, 3747, 3603, 1048, 1044,
	1046, 1047, 1045, 2530, 2261, 2974, 2198, 2197, 2195, 3561,
	2194, 1324, 3610, 3688, 3757, 3367, 2397, 2395, 3716, 1094,
	3759, 3758, 3763, 3760, 3766, 3774, 3115, 3782, 3111, 3764,
	3781, 2041, 123, 2055, 2879, 3770, 3771, 3772, 3773, 1932,
	1928, 2785, 123, 3511, 1812, 3793, 888, 1114, 2214, 3786,
	161, 51, 105, 159, 50, 94, 93, 3640, 3795, 3794,
	104, 3797, 157, 49, 191, 190, 193, 3716, 3806, 3803,
	192, 189, 182, 55, 171, 145, 2448, 2449, 188, 1490,
	187, 1020, 3681, 3403, 858, 40, 39, 38, 34, 13,
	172, 3813, 12, 35, 22, 21, 1574, 164, 20, 3782,
	3820, 173, 3781, 3819, 182, 55, 171, 145, 26, 3806,
	3821, 32, 31, 3755, 116, 3825, 115, 30, 114, 113,
	121, 112, 172, 3823, 111, 110, 29, 19, 3470, 164,
	44, 3036, 3471, 173, 43, 109, 3038, 3039, 42, 9,
	103, 176, 101, 28, 102, 3452, 99, 97, 95, 77,
	2106, 76, 121, 1021, 75, 90, 89, 88, 87, 86,
	1935, 1935, 1935, 1935, 85, 83, 84, 109, 1608, 936,
	74, 73, 1935, 176, 1197, 1196, 1206, 1207, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1198, 72, 682, 681, 688,
	678, 71, 70, 92, 98, 96, 81, 91, 82, 685,
	686, 80, 687, 691, 79, 78, 672, 69, 68, 67,
	143, 142, 141, 140, 139, 137, 696, 138, 127, 128,
	136, 129, 130, 135, 1015, 1010, 1005, 1009, 1013, 134,
	133, 132, 131, 45, 46, 47, 48, 153, 152, 154,
	156, 158, 155, 160, 150, 148, 151, 149, 147, 60,
	127, 128, 1018, 129, 130, 11, 1008, 106, 123, 700,
	3108, 18, 702, 123, 25, 4, 0, 701, 0, 0,
	0, 0, 0, 0, 0, 3120, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 144,
	170, 180, 0, 107, 0, 123, 0, 0, 0, 3580,
	0, 0, 0, 0, 0, 0, 0, 1016, 0, 0,
	0, 169, 163, 162, 1019, 0, 0, 0, 61, 0,
	0, 144, 170, 180, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1006, 0, 0, 0,
	0, 0, 0, 169, 163, 162, 0, 0, 0, 0,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 1017,
	3624, 0, 0, 0, 0, 3628, 3629, 0, 1907, 0,
	0, 0, 0, 0, 0, 182, 0, 0, 0, 165,
	166, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3649, 3399, 0, 1007,
	0, 0, 0, 1909, 673, 675, 674, 0, 0, 0,
	174, 165, 166, 167, 680, 0, 0, 0, 0, 1183,
	1184, 1185, 1182, 0, 0, 0, 684, 0, 0, 0,
	117, 0, 0, 699, 168, 0, 118, 0, 0, 0,
	677, 0, 174, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 999, 1884, 123, 0, 0, 0, 0,
	123, 0, 117, 0, 0, 0, 168, 1935, 118, 0,
	0, 0, 0, 0, 0, 0, 1014, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 1689, 3239,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 3243,
	0, 0, 1011, 0, 0, 1012, 0, 0, 0, 0,
	3750, 3751, 1900, 0, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 679,
	683, 689, 0, 690, 692, 56, 0, 693, 694, 695,
	0, 0, 697, 698, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	177, 178, 0, 179, 0, 0, 0, 0, 146, 0,
	0, 0, 1888, 52, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1894, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	146, 0, 0, 1882, 1916, 52, 0, 1883, 1885, 1887,
	0, 1889, 1890, 1891, 1895, 1896, 1897, 1899, 1902, 1903,
	1904, 0, 0, 0, 0, 0, 0, 0, 1892, 1901,
	1893, 1685, 0, 0, 0, 0, 0, 1682, 0, 120,
	41, 1684, 1681, 1683, 1687, 1688, 53, 0, 0, 1686,
	5, 0, 0, 0, 0, 0, 0, 124, 125, 0,
	0, 126, 1908, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 41, 0, 3413, 3414, 0, 0, 53, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 676, 124,
	125, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1905, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1881, 0, 0, 0, 0, 0, 0,
	1880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 1898, 0, 0, 0, 0, 0,
	123, 0, 0, 1886, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
	1678, 1679, 1680, 1692, 1693, 1694, 1695, 1696, 1697, 1690,
	1691, 0, 771, 0, 0, 0, 0, 0, 0, 0,
	1935, 370, 0, 495, 528, 517, 600, 483, 0, 0,
	0, 0, 0, 0, 724, 0, 0, 0, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 762,
	531, 482, 401, 354, 549, 548, 0, 0, 829, 837,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	716, 146, 0, 752, 806, 805, 739, 749, 0, 0,
	283, 205, 477, 596, 479, 478, 740, 0, 741, 745,
	748, 744, 742, 743, 0, 821, 0, 0, 0, 0,
	0, 0, 708, 720, 0, 725, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 717,
	718, 0, 0, 0, 0, 772, 0, 719, 0, 0,
	767, 746, 750, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 747, 770, 774, 304, 843, 768, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 844, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 123, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 765, 0, 593, 0, 433,
	0, 0, 827, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 769, 0, 391, 372, 840, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 536, 0, 452, 616, 617,
	618, 461, 466, 467, 468, 470, 471, 472, 473, 537,
	554, 521, 491, 454, 545, 488, 492, 493, 557, 1713,
	1712, 1714, 445, 338, 339, 0, 317, 265, 266, 611,
	825, 368, 559, 592, 484, 0, 839, 820, 822, 823,
	826, 830, 831, 832, 833, 834, 836, 838, 842, 610,
	0, 538, 553, 614, 552, 607, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	123, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	841, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	773, 534, 535, 358, 359, 360, 361, 828, 560, 288,
	456, 384, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 619, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 850, 824, 849, 851,
	852, 848, 853, 854, 835, 729, 0, 780, 846, 845,
	847, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 608,
	605, 416, 609, 0, 267, 490, 341, 0, 382, 315,
	555, 556, 0, 0, 813, 787, 788, 789, 726, 790,
	784, 785, 727, 786, 814, 778, 810, 811, 754, 781,
	791, 809, 792, 812, 815, 816, 855, 856, 798, 782,
	231, 857, 795, 817, 808, 807, 793, 779, 818, 819,
	761, 756, 796, 797, 783, 801, 802, 803, 728, 775,
	776, 777, 799, 800, 757, 758, 759, 760, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 606, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	594, 595, 597, 599, 804, 601, 771, 612, 480, 481,
	613, 591, 0, 721, 0, 370, 0, 495, 528, 517,
	600, 483, 0, 0, 0, 0, 0, 0, 724, 0,
	0, 0, 310, 1763, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 762, 531, 482, 401, 354, 549, 548,
	0, 0, 829, 837, 0, 0, 0, 0, 0, 0,
	0, 1959, 0, 0, 716, 0, 0, 752, 806, 805,
	739, 749, 0, 0, 283, 205, 477, 596, 479, 478,
	740, 0, 741, 745, 748, 744, 742, 743, 0, 821,
	0, 0, 0, 0, 0, 0, 708, 720, 0, 725,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 717, 718, 0, 0, 0, 0, 772,
	0, 719, 0, 0, 1960, 746, 750, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 747, 770, 774,
	304, 843, 768, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 844, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 765,
	0, 593, 0, 433, 0, 0, 827, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 769, 0, 391,
	372, 840, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 616, 617, 618, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 611, 825, 368, 559, 592, 484, 0,
	839, 820, 822, 823, 826, 830, 831, 832, 833, 834,
	836, 838, 842, 610, 0, 538, 553, 614, 552, 607,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 841, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 773, 534, 535, 358, 359, 360,
	361, 828, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 619,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	850, 824, 849, 851, 852, 848, 853, 854, 835, 729,
	0, 780, 846, 845, 847, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 608, 605, 416, 609, 0, 267, 490,
	341, 0, 382, 315, 555, 556, 0, 0, 813, 787,
	788, 789, 726, 790, 784, 785, 727, 786, 814, 778,
	810, 811, 754, 781, 791, 809, 792, 812, 815, 816,
	855, 856, 798, 782, 231, 857, 795, 817, 808, 807,
	793, 779, 818, 819, 761, 756, 796, 797, 783, 801,
	802, 803, 728, 775, 776, 777, 799, 800, 757, 758,
	759, 760, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 606, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 594, 595, 597, 599, 804, 601,
	0, 612, 480, 481, 613, 591, 0, 721, 182, 771,
	0, 0, 0, 0, 0, 0, 0, 0, 370, 0,
	495, 528, 517, 600, 483, 0, 0, 0, 0, 0,
	0, 724, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 1218, 531, 482, 401,
	354, 549, 548, 0, 0, 829, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 716, 0, 0,
	752, 806, 805, 739, 749, 0, 0, 283, 205, 477,
	596, 479, 478, 740, 0, 741, 745, 748, 744, 742,
	743, 0, 821, 0, 0, 0, 0, 0, 0, 708,
	720, 0, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 717, 718, 0, 0,
	0, 0, 772, 0, 719, 0, 0, 767, 746, 750,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	747, 770, 774, 304, 843, 768, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 844, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 765, 0, 593, 0, 433, 0, 0, 827,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	769, 0, 391, 372, 840, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 616, 617, 618, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 611, 825, 368, 559,
	592, 484, 0, 839, 820, 822, 823, 826, 830, 831,
	832, 833, 834, 836, 838, 842, 610, 0, 538, 553,
	614, 552, 607, 374, 0, 395, 550, 497, 0, 542,
	516, 0, 543, 512, 547, 0, 486, 0, 402, 426,
	438, 455, 458, 487, 572, 573, 574, 270, 457, 576,
	577, 578, 579, 580, 581, 582, 575, 841, 519, 496,
	522, 437, 499, 498, 0, 0, 533, 773, 534, 535,
	358, 359, 360, 361, 828, 560, 288, 456, 384, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 525,
	526, 523, 619, 0, 583, 584, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 527, 463, 586, 589, 587, 588, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 513, 540, 850, 824, 849, 851, 852, 848, 853,
	854, 835, 729, 0, 780, 846, 845, 847, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	567, 566, 565, 564, 563, 562, 561, 0, 0, 510,
	412, 297, 259, 293, 294, 301, 608, 605, 416, 609,
	0, 267, 490, 341, 146, 382, 315, 555, 556, 0,
	0, 813, 787, 788, 789, 726, 790, 784, 785, 727,
	786, 814, 778, 810, 811, 754, 781, 791, 809, 792,
	812, 815, 816, 855, 856, 798, 782, 231, 857, 795,
	817, 808, 807, 793, 779, 818, 819, 761, 756, 796,
	797, 783, 801, 802, 803, 728, 775, 776, 777, 799,
	800, 757, 758, 759, 760, 0, 0, 0, 441, 442,
	443, 465, 0, 427, 489, 606, 0, 0, 0, 0,
	0, 0, 0, 539, 551, 585, 0, 594, 595, 597,
	599, 804, 601, 771, 612, 480, 481, 613, 591, 0,
	721, 0, 370, 0, 495, 528, 517, 600, 483, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 0, 310,
	3822, 0, 340, 532, 514, 524, 515, 500, 501, 502,
	509, 320, 503, 504, 505, 475, 506, 476, 507, 508,
	762, 531, 482, 401, 354, 549, 548, 0, 0, 829,
	837, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 716, 0, 0, 752, 806, 805, 739, 749, 0,
	0, 283, 205, 477, 596, 479, 478, 740, 0, 741,
	745, 748, 744, 742, 743, 0, 821, 0, 0, 0,
	0, 0, 0, 708, 720, 0, 725, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	717, 718, 0, 0, 0, 0, 772, 0, 719, 0,
	0, 767, 746, 750, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 747, 770, 774, 304, 843, 768,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 844, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 765, 0, 593, 0,
	433, 0, 0, 827, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 769, 0, 391, 372, 840, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 616,
	617, 618, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	611, 825, 368, 559, 592, 484, 0, 839, 820, 822,
	823, 826, 830, 831, 832, 833, 834, 836, 838, 842,
	610, 0, 538, 553, 614, 552, 607, 374, 0, 395,
	550, 497, 0, 542, 516, 0, 543, 512, 547, 0,
	486, 0, 402, 426, 438, 455, 458, 487, 572, 573,
	574, 270, 457, 576, 577, 578, 579, 580, 581, 582,
	575, 841, 519, 496, 522, 437, 499, 498, 0, 0,
	533, 773, 534, 535, 358, 359, 360, 361, 828, 560,
	288, 456, 384, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 526, 523, 619, 0, 583, 584,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 527, 463, 586, 589, 587,
	588, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 513, 540, 850, 824, 849,
	851, 852, 848, 853, 854, 835, 729, 0, 780, 846,
	845, 847, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 567, 566, 565, 564, 563, 562,
	561, 0, 0, 510, 412, 297, 259, 293, 294, 301,
	608, 605, 416, 609, 0, 267, 490, 341, 0, 382,
	315, 555, 556, 0, 0, 813, 787, 788, 789, 726,
	790, 784, 785, 727, 786, 814, 778, 810, 811, 754,
	781, 791, 809, 792, 812, 815, 816, 855, 856, 798,
	782, 231, 857, 795, 817, 808, 807, 793, 779, 818,
	819, 761, 756, 796, 797, 783, 801, 802, 803, 728,
	775, 776, 777, 799, 800, 757, 758, 759, 760, 0,
	0, 0, 441, 442, 443, 465, 0, 427, 489, 606,
	0, 0, 0, 0, 0, 0, 0, 539, 551, 585,
	0, 594, 595, 597, 599, 804, 601, 771, 612, 480,
	481, 613, 591, 0, 721, 0, 370, 0, 495, 528,
	517, 600, 483, 0, 0, 0, 0, 0, 0, 724,
	0, 0, 0, 310, 0, 0, 340, 532, 514, 524,
	515, 500, 501, 502, 509, 320, 503, 504, 505, 475,
	506, 476, 507, 508, 762, 531, 482, 401, 354, 549,
	548, 0, 0, 829, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 716, 0, 0, 752, 806,
	805, 739, 749, 0, 0, 283, 205, 477, 596, 479,
	478, 740, 0, 741, 745, 748, 744, 742, 743, 0,
	821, 0, 0, 0, 0, 0, 0, 708, 720, 0,
	725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 717, 718, 0, 0, 0, 0,
	772, 0, 719, 0, 0, 767, 746, 750, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 747, 770,
	774, 304, 843, 768, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 844,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	765, 0, 593, 0, 433, 0, 0, 827, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 769, 0,
	391, 372, 840, 3717, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 616, 617, 618, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 611, 825, 368, 559, 592, 484,
	0, 839, 820, 822, 823, 826, 830, 831, 832, 833,
	834, 836, 838, 842, 610, 0, 538, 553, 614, 552,
	607, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 841, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 773, 534, 535, 358, 359,
	360, 361, 828, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	619, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 850, 824, 849, 851, 852, 848, 853, 854, 835,
	729, 0, 780, 846, 845, 847, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 608, 605, 416, 609, 0, 267,
	490, 341, 0, 382, 315, 555, 556, 0, 0, 813,
	787, 788, 789, 726, 790, 784, 785, 727, 786, 814,
	778, 810, 811, 754, 781, 791, 809, 792, 812, 815,
	816, 855, 856, 798, 782, 231, 857, 795, 817, 808,
	807, 793, 779, 818, 819, 761, 756, 796, 797, 783,
	801, 802, 803, 728, 775, 776, 777, 799, 800, 757,
	758, 759, 760, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 606, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 594, 595, 597, 599, 804,
	601, 771, 612, 480, 481, 613, 591, 0, 721, 0,
	370, 0, 495, 528, 517, 600, 483, 0, 0, 0,
	0, 0, 0, 724, 0, 0, 0, 310, 1763, 0,
	340, 532, 514, 524, 515, 500, 501, 502, 509, 320,
	503, 504, 505, 475, 506, 476, 507, 508, 762, 531,
	482, 401, 354, 549, 548, 0, 0, 829, 837, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 716,
	0, 0, 752, 806, 805, 739, 749, 0, 0, 283,
	205, 477, 596, 479, 478, 740, 0, 741, 745, 748,
	744, 742, 743, 0, 821, 0, 0, 0, 0, 0,
	0, 708, 720, 0, 725, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 717, 718,
	0, 0, 0, 0, 772, 0, 719, 0, 0, 767,
	746, 750, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 747, 770, 774, 304, 843, 768, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 844, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 765, 0, 593, 0, 433, 0,
	0, 827, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 769, 0, 391, 372, 840, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 616, 617, 618,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 611, 825,
	368, 559, 592, 484, 0, 839, 820, 822, 823, 826,
	830, 831, 832, 833, 834, 836, 838, 842, 610, 0,
	538, 553, 614, 552, 607, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 841,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 773,
	534, 535, 358, 359, 360, 361, 828, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 619, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 850, 824, 849, 851, 852,
	848, 853, 854, 835, 729, 0, 780, 846, 845, 847,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 608, 605,
	416, 609, 0, 267, 490, 341, 0, 382, 315, 555,
	556, 0, 0, 813, 787, 788, 789, 726, 790, 784,
	785, 727, 786, 814, 778, 810, 811, 754, 781, 791,
	809, 792, 812, 815, 816, 855, 856, 798, 782, 231,
	857, 795, 817, 808, 807, 793, 779, 818, 819, 761,
	756, 796, 797, 783, 801, 802, 803, 728, 775, 776,
	777, 799, 800, 757, 758, 759, 760, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 606, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 594,
	595, 597, 599, 804, 601, 771, 612, 480, 481, 613,
	591, 0, 721, 0, 370, 0, 495, 528, 517, 600,
	483, 0, 0, 0, 0, 0, 0, 724, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 762, 531, 482, 401, 354, 549, 548, 0,
	0, 829, 837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 716, 0, 0, 752, 806, 805, 739,
	749, 0, 0, 283, 205, 477, 596, 479, 478, 740,
	0, 741, 745, 748, 744, 742, 743, 0, 821, 0,
	0, 0, 0, 0, 0, 708, 720, 0, 725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 717, 718, 1485, 0, 0, 0, 772, 0,
	719, 0, 0, 767, 746, 750, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 747, 770, 774, 304,
	843, 768, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 844, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 765, 0,
	593, 0, 433, 0, 0, 827, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 769, 0, 391, 372,
	840, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 616, 617, 618, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 611, 825, 368, 559, 592, 484, 0, 839,
	820, 822, 823, 826, 830, 831, 832, 833, 834, 836,
	838, 842, 610, 0, 538, 553, 614, 552, 607, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 841, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 773, 534, 535, 358, 359, 360, 361,
	828, 560, 288, 456, 384, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 619, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 850,
	824, 849, 851, 852, 848, 853, 854, 835, 729, 0,
	780, 846, 845, 847, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 608, 605, 416, 609, 0, 267, 490, 341,
	0, 382, 315, 555, 556, 0, 0, 813, 787, 788,
	789, 726, 790, 784, 785, 727, 786, 814, 778, 810,
	811, 754, 781, 791, 809, 792, 812, 815, 816, 855,
	856, 798, 782, 231, 857, 795, 817, 808, 807, 793,
	779, 818, 819, 761, 756, 796, 797, 783, 801, 802,
	803, 728, 775, 776, 777, 799, 800, 757, 758, 759,
	760, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 606, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 594, 595, 597, 599, 804, 601, 0,
	612, 480, 481, 613, 591, 771, 721, 0, 2130, 0,
	0, 0, 0, 0, 370, 0, 495, 528, 517, 600,
	483, 0, 0, 0, 0, 0, 0, 724, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 762, 531, 482, 401, 354, 549, 548, 0,
	0, 829, 837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 716, 0, 0, 752, 806, 805, 739,
	749, 0, 0, 283, 205, 477, 596, 479, 478, 740,
	0, 741, 745, 748, 744, 742, 743, 0, 821, 0,
	0, 0, 0, 0, 0, 708, 720, 0, 725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 717, 718, 0, 0, 0, 0, 772, 0,
	719, 0, 0, 767, 746, 750, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 747, 770, 774, 304,
	843, 768, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 844, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 765, 0,
	593, 0, 433, 0, 0, 827, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 769, 0, 391, 372,
	840, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 616, 617, 618, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 611, 825, 368, 559, 592, 484, 0, 839,
	820, 822, 823, 826, 830, 831, 832, 833, 834, 836,
	838, 842, 610, 0, 538, 553, 614, 552, 607, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 841, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 773, 534, 535, 358, 359, 360, 361,
	828, 560, 288, 456, 384, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 619, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 850,
	824, 849, 851, 852, 848, 853, 854, 835, 729, 0,
	780, 846, 845, 847, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 608, 605, 416, 609, 0, 267, 490, 341,
	0, 382, 315, 555, 556, 0, 0, 813, 787, 788,
	789, 726, 790, 784, 785, 727, 786, 814, 778, 810,
	811, 754, 781, 791, 809, 792, 812, 815, 816, 855,
	856, 798, 782, 231, 857, 795, 817, 808, 807, 793,
	779, 818, 819, 761, 756, 796, 797, 783, 801, 802,
	803, 728, 775, 776, 777, 799, 800, 757, 758, 759,
	760, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 606, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 594, 595, 597, 599, 804, 601, 771,
	612, 480, 481, 613, 591, 0, 721, 0, 370, 0,
	495, 528, 517, 600, 483, 0, 0, 0, 0, 0,
	0, 724, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 762, 531, 482, 401,
	354, 549, 548, 0, 0, 829, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 716, 0, 0,
	752, 806, 805, 739, 749, 0, 0, 283, 205, 477,
	596, 479, 478, 740, 0, 741, 745, 748, 744, 742,
	743, 0, 821, 0, 0, 0, 0, 0, 0, 708,
	720, 0, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 717, 718, 1756, 0,
	0, 0, 772, 0, 719, 0, 0, 767, 746, 750,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	747, 770, 774, 304, 843, 768, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 844, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 765, 0, 593, 0, 433, 0, 0, 827,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	769, 0, 391, 372, 840, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 616, 617, 618, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 611, 825, 368, 559,
	592, 484, 0, 839, 820, 822, 823, 826, 830, 831,
	832, 833, 834, 836, 838, 842, 610, 0, 538, 553,
	614, 552, 607, 374, 0, 395, 550, 497, 0, 542,
	516, 0, 543, 512, 547, 0, 486, 0, 402, 426,
	438, 455, 458, 487, 572, 573, 574, 270, 457, 576,
	577, 578, 579, 580, 581, 582, 575, 841, 519, 496,
	522, 437, 499, 498, 0, 0, 533, 773, 534, 535,
	358, 359, 360, 361, 828, 560, 288, 456, 384, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 525,
	526, 523, 619, 0, 583, 584, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 527, 463, 586, 589, 587, 588, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 513, 540, 850, 824, 849, 851, 852, 848, 853,
	854, 835, 729, 0, 780, 846, 845, 847, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	567, 566, 565, 564, 563, 562, 561, 0, 0, 510,
	412, 297, 259, 293, 294, 301, 608, 605, 416, 609,
	0, 267, 490, 341, 0, 382, 315, 555, 556, 0,
	0, 813, 787, 788, 789, 726, 790, 784, 785, 727,
	786, 814, 778, 810, 811, 754, 781, 791, 809, 792,
	812, 815, 816, 855, 856, 798, 782, 231, 857, 795,
	817, 808, 807, 793, 779, 818, 819, 761, 756, 796,
	797, 783, 801, 802, 803, 728, 775, 776, 777, 799,
	800, 757, 758, 759, 760, 0, 0, 0, 441, 442,
	443, 465, 0, 427, 489, 606, 0, 0, 0, 0,
	0, 0, 0, 539, 551, 585, 0, 594, 595, 597,
	599, 804, 601, 771, 612, 480, 481, 613, 591, 0,
	721, 0, 370, 0, 495, 528, 517, 600, 483, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 0, 310,
	0, 0, 340, 532, 514, 524, 515, 500, 501, 502,
	509, 320, 503, 504, 505, 475, 506, 476, 507, 508,
	762, 531, 482, 401, 354, 549, 548, 0, 0, 829,
	837, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 716, 0, 0, 752, 806, 805, 739, 749, 0,
	0, 283, 205, 477, 596, 479, 478, 740, 0, 741,
	745, 748, 744, 742, 743, 0, 821, 0, 0, 0,
	0, 0, 0, 708, 720, 0, 725, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	717, 718, 0, 0, 0, 0, 772, 0, 719, 0,
	0, 767, 746, 750, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 747, 770, 774, 304, 843, 768,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 844, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 765, 0, 593, 0,
	433, 0, 0, 827, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 769, 0, 391, 372, 840, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 616,
	617, 618, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	611, 825, 368, 559, 592, 484, 0, 839, 820, 822,
	823, 826, 830, 831, 832, 833, 834, 836, 838, 842,
	610, 0, 538, 553, 614, 552, 607, 374, 0, 395,
	550, 497, 0, 542, 516, 0, 543, 512, 547, 0,
	486, 0, 402, 426, 438, 455, 458, 487, 572, 573,
	574, 270, 457, 576, 577, 578, 579, 580, 581, 582,
	575, 841, 519, 496, 522, 437, 499, 498, 0, 0,
	533, 773, 534, 535, 358, 359, 360, 361, 828, 560,
	288, 456, 384, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 526, 523, 619, 0, 583, 584,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 527, 463, 586, 589, 587,
	588, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 513, 540, 850, 824, 849,
	851, 852, 848, 853, 854, 835, 729, 0, 780, 846,
	845, 847, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 567, 566, 565, 564, 563, 562,
	561, 0, 0, 510, 412, 297, 259, 293, 294, 301,
	608, 605, 416, 609, 0, 267, 490, 341, 0, 382,
	315, 555, 556, 0, 0, 813, 787, 788, 789, 726,
	790, 784, 785, 727, 786, 814, 778, 810, 811, 754,
	781, 791, 809, 792, 812, 815, 816, 855, 856, 798,
	782, 231, 857, 795, 817, 808, 807, 793, 779, 818,
	819, 761, 756, 796, 797, 783, 801, 802, 803, 728,
	775, 776, 777, 799, 800, 757, 758, 759, 760, 0,
	0, 0, 441, 442, 443, 465, 0, 427, 489, 606,
	0, 0, 0, 0, 0, 0, 0, 539, 551, 585,
	0, 594, 595, 597, 599, 804, 601, 771, 612, 480,
	481, 613, 591, 0, 721, 0, 370, 0, 495, 528,
	517, 600, 483, 0, 0, 0, 0, 0, 0, 724,
	0, 0, 0, 310, 0, 0, 340, 532, 514, 524,
	515, 500, 501, 502, 509, 320, 503, 504, 505, 475,
	506, 476, 507, 508, 762, 531, 482, 401, 354, 549,
	548, 0, 0, 829, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 716, 0, 0, 752, 806,
	805, 739, 749, 0, 0, 283, 205, 477, 596, 479,
	478, 2578, 0, 2579, 745, 748, 744, 742, 743, 0,
	821, 0, 0, 0, 0, 0, 0, 708, 720, 0,
	725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 717, 718, 0, 0, 0, 0,
	772, 0, 719, 0, 0, 767, 746, 750, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 747, 770,
	774, 304, 843, 768, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 844,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	765, 0, 593, 0, 433, 0, 0, 827, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 769, 0,
	391, 372, 840, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 616, 617, 618, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 611, 825, 368, 559, 592, 484,
	0, 839, 820, 822, 823, 826, 830, 831, 832, 833,
	834, 836, 838, 842, 610, 0, 538, 553, 614, 552,
	607, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 841, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 773, 534, 535, 358, 359,
	360, 361, 828, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	619, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 850, 824, 849, 851, 852, 848, 853, 854, 835,
	729, 0, 780, 846, 845, 847, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 608, 605, 416, 609, 0, 267,
	490, 341, 0, 382, 315, 555, 556, 0, 0, 813,
	787, 788, 789, 726, 790, 784, 785, 727, 786, 814,
	778, 810, 811, 754, 781, 791, 809, 792, 812, 815,
	816, 855, 856, 798, 782, 231, 857, 795, 817, 808,
	807, 793, 779, 818, 819, 761, 756, 796, 797, 783,
	801, 802, 803, 728, 775, 776, 777, 799, 800, 757,
	758, 759, 760, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 606, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 594, 595, 597, 599, 804,
	601, 771, 612, 480, 481, 613, 591, 0, 721, 0,
	370, 0, 495, 528, 517, 600, 483, 0, 0, 1626,
	0, 0, 0, 724, 0, 0, 0, 310, 0, 0,
	340, 532, 514, 524, 515, 500, 501, 502, 509, 320,
	503, 504, 505, 475, 506, 476, 507, 508, 762, 531,
	482, 401, 354, 549, 548, 0, 0, 829, 837, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 716,
	0, 0, 752, 806, 805, 739, 749, 0, 0, 283,
	205, 477, 596, 479, 478, 740, 0, 741, 745, 748,
	744, 742, 743, 0, 821, 0, 0, 0, 0, 0,
	0, 0, 720, 0, 725, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 717, 718,
	0, 0, 0, 0, 772, 0, 719, 0, 0, 767,
	746, 750, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 747, 770, 774, 304, 843, 768, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 844, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 765, 0, 593, 0, 433, 0,
	0, 827, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 769, 0, 391, 372, 840, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 1627, 1628, 536, 0, 452, 616, 617, 618,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 611, 825,
	368, 559, 592, 484, 0, 839, 820, 822, 823, 826,
	830, 831, 832, 833, 834, 836, 838, 842, 610, 0,
	538, 553, 614, 552, 607, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 841,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 773,
	534, 535, 358, 359, 360, 361, 828, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 619, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 850, 824, 849, 851, 852,
	848, 853, 854, 835, 729, 0, 780, 846, 845, 847,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 608, 605,
	416, 609, 0, 267, 490, 341, 0, 382, 315, 555,
	556, 0, 0, 813, 787, 788, 789, 726, 790, 784,
	785, 727, 786, 814, 778, 810, 811, 754, 781, 791,
	809, 792, 812, 815, 816, 855, 856, 798, 782, 231,
	857, 795, 817, 808, 807, 793, 779, 818, 819, 761,
	756, 796, 797, 783, 801, 802, 803, 728, 775, 776,
	777, 799, 800, 757, 758, 759, 760, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 606, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 594,
	595, 597, 599, 804, 601, 771, 612, 480, 481, 613,
	591, 0, 721, 0, 370, 0, 495, 528, 517, 600,
	483, 0, 0, 0, 0, 0, 0, 724, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 762, 531, 482, 401, 354, 549, 548, 0,
	0, 829, 837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 716, 0, 0, 752, 806, 805, 739,
	749, 0, 0, 283, 205, 477, 596, 479, 478, 740,
	0, 741, 745, 748, 744, 742, 743, 0, 821, 0,
	0, 0, 0, 0, 0, 0, 720, 0, 725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 717, 718, 0, 0, 0, 0, 772, 0,
	719, 0, 0, 767, 746, 750, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 747, 770, 774, 304,
	843, 768, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 844, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 765, 0,
	593, 0, 433, 0, 0, 827, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 769, 0, 391, 372,
	840, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 616, 617, 618, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 611, 825, 368, 559, 592, 484, 0, 839,
	820, 822, 823, 826, 830, 831, 832, 833, 834, 836,
	838, 842, 610, 0, 538, 553, 614, 552, 607, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 841, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 773, 534, 535, 358, 359, 360, 361,
	828, 560, 288, 456, 384, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 619, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 850,
	824, 849, 851, 852, 848, 853, 854, 835, 729, 0,
	780, 846, 845, 847, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 608, 605, 416, 609, 0, 267, 490, 341,
	0, 382, 315, 555, 556, 0, 0, 813, 787, 788,
	789, 726, 790, 784, 785, 727, 786, 814, 778, 810,
	811, 754, 781, 791, 809, 792, 812, 815, 816, 855,
	856, 798, 782, 231, 857, 795, 817, 808, 807, 793,
	779, 818, 819, 761, 756, 796, 797, 783, 801, 802,
	803, 728, 775, 776, 777, 799, 800, 757, 758, 759,
	760, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 606, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 594, 595, 597, 599, 804, 601, 771,
	612, 480, 481, 613, 591, 0, 721, 0, 370, 0,
	495, 528, 517, 600, 483, 0, 0, 0, 0, 0,
	0, 724, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 762, 531, 482, 401,
	354, 549, 548, 0, 0, 829, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	752, 806, 805, 739, 749, 0, 0, 283, 205, 477,
	596, 479, 478, 740, 0, 741, 745, 748, 744, 742,
	743, 0, 821, 0, 0, 0, 0, 0, 0, 708,
	720, 0, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 717, 718, 0, 0,
	0, 0, 772, 0, 719, 0, 0, 767, 746, 750,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	747, 770, 774, 304, 843, 768, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 844, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 765, 0, 593, 0, 433, 0, 0, 827,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	769, 0, 391, 372, 840, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 616, 617, 618, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 611, 825, 368, 559,
	592, 484, 0, 839, 820, 822, 823, 826, 830, 831,
	832, 833, 834, 836, 838, 842, 610, 0, 538, 553,
	614, 552, 607, 374, 0, 395, 550, 497, 0, 542,
	516, 0, 543, 512, 547, 0, 486, 0, 402, 426,
	438, 455, 458, 487, 572, 573, 574, 270, 457, 576,
	577, 578, 579, 580, 581, 582, 575, 841, 519, 496,
	522, 437, 499, 498, 0, 0, 533, 773, 534, 535,
	358, 359, 360, 361, 828, 560, 288, 456, 384, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 525,
	526, 523, 619, 0, 583, 584, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 527, 463, 586, 589, 587, 588, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 513, 540, 850, 824, 849, 851, 852, 848, 853,
	854, 835, 729, 0, 780, 846, 845, 847, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	567, 566, 565, 564, 563, 562, 561, 0, 0, 510,
	412, 297, 259, 293, 294, 301, 608, 605, 416, 609,
	0, 267, 490, 341, 0, 382, 315, 555, 556, 0,
	0, 813, 787, 788, 789, 726, 790, 784, 785, 727,
	786, 814, 778, 810, 811, 754, 781, 791, 809, 792,
	812, 815, 816, 855, 856, 798, 782, 231, 857, 795,
	817, 808, 807, 793, 779, 818, 819, 761, 756, 796,
	797, 783, 801, 802, 803, 728, 775, 776, 777, 799,
	800, 757, 758, 759, 760, 0, 0, 0, 441, 442,
	443, 465, 0, 427, 489, 606, 0, 0, 0, 0,
	0, 0, 0, 539, 551, 585, 0, 594, 595, 597,
	599, 804, 601, 0, 612, 480, 481, 613, 591, 0,
	721, 182, 55, 171, 145, 0, 0, 0, 0, 0,
	0, 370, 0, 495, 528, 517, 600, 483, 0, 172,
	0, 0, 0, 0, 0, 0, 164, 0, 310, 0,
	173, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 121,
	531, 482, 401, 354, 549, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	176, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	283, 205, 477, 596, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 144, 170,
	180, 0, 107, 0, 590, 0, 0, 593, 0, 433,
	0, 0, 197, 0, 0, 0, 405, 0, 0, 337,
	169, 163, 162, 449, 0, 391, 372, 209, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 536, 0, 452, 569, 570,
	571, 461, 466, 467, 468, 470, 471, 472, 473, 537,
	554, 521, 491, 454, 545, 488, 492, 493, 557, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 428,
	303, 368, 559, 592, 484, 0, 546, 485, 494, 295,
	518, 530, 529, 364, 444, 200, 541, 544, 474, 210,
	0, 538, 553, 511, 552, 211, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	429, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	453, 534, 535, 358, 359, 360, 361, 321, 560, 288,
	456, 384, 119, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 208, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 383,
	278, 416, 394, 0, 267, 490, 341, 146, 382, 315,
	555, 556, 52, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 558, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 212, 41,
	198, 201, 203, 202, 0, 53, 539, 551, 585, 5,
	594, 595, 597, 599, 598, 601, 124, 213, 480, 481,
	214, 591, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 370, 0, 495, 528, 517, 600, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 0, 340, 532, 514, 524, 515, 500, 501, 502,
	509, 320, 503, 504, 505, 475, 506, 476, 507, 508,
	121, 531, 482, 401, 354, 549, 548, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 283, 205, 477, 596, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 2272, 2275, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 0, 593, 2276,
	433, 0, 0, 0, 2271, 0, 2270, 405, 2268, 2273,
	337, 0, 0, 0, 449, 0, 391, 372, 615, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 2274, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 616,
	617, 618, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	611, 303, 368, 559, 592, 484, 0, 546, 485, 494,
	295, 518, 530, 529, 364, 444, 0, 541, 544, 474,
	610, 0, 538, 553, 614, 552, 607, 374, 0, 395,
	550, 497, 0, 542, 516, 0, 543, 512, 547, 0,
	486, 0, 402, 426, 438, 455, 458, 487, 572, 573,
	574, 270, 457, 576, 577, 578, 579, 580, 581, 582,
	575, 429, 519, 496, 522, 437, 499, 498, 0, 0,
	533, 453, 534, 535, 358, 359, 360, 361, 321, 560,
	288, 456, 384, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 526, 523, 619, 0, 583, 584,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 527, 463, 586, 589, 587,
	588, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 513, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 567, 566, 565, 564, 563, 562,
	561, 0, 0, 510, 412, 297, 259, 293, 294, 301,
	608, 605, 416, 609, 0, 267, 490, 341, 146, 382,
	315, 555, 556, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 558,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 0, 427, 489, 606,
	0, 0, 0, 0, 0, 0, 0, 539, 551, 585,
	0, 594, 595, 597, 599, 598, 601, 0, 612, 480,
	481, 613, 591, 370, 0, 495, 528, 517, 600, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 0, 340, 532, 514, 524, 515, 500, 501,
	502, 509, 320, 503, 504, 505, 475, 506, 476, 507,
	508, 0, 531, 482, 401, 354, 549, 548, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1253, 0, 0, 204, 0, 0, 739, 749,
	0, 0, 283, 205, 477, 596, 479, 478, 740, 0,
	741, 745, 748, 744, 742, 743, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 747, 420, 448, 304, 439,
	0, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 464, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 593,
	0, 433, 0, 0, 0, 0, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 449, 0, 391, 372, 615,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 536, 0, 452,
	616, 617, 618, 461, 466, 467, 468, 470, 471, 472,
	473, 537, 554, 521, 491, 454, 545, 488, 492, 493,
	557, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 611, 303, 368, 559, 592, 484, 0, 546, 485,
	494, 295, 518, 530, 529, 364, 444, 0, 541, 544,
	474, 610, 0, 538, 553, 614, 552, 607, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 429, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 453, 534, 535, 358, 359, 360, 361, 321,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 619, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 608, 605, 416, 609, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	558, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	606, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 594, 595, 597, 599, 598, 601, 0, 612,
	480, 481, 613, 591, 182, 55, 171, 145, 0, 0,
	0, 0, 0, 0, 370, 638, 495, 528, 517, 600,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 0, 531, 482, 401, 354, 549, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 644, 0,
	0, 0, 0, 643, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 283, 205, 477, 596, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 642, 0, 590, 0, 0,
	593, 0, 433, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	615, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 616, 617, 618, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 611, 303, 368, 559, 592, 484, 0, 546,
	485, 494, 295, 518, 530, 529, 364, 444, 0, 541,
	544, 474, 610, 0, 538, 553, 614, 552, 607, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 429, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 453, 534, 535, 358, 359, 360, 361,
	639, 641, 288, 456, 384, 652, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 619, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 608, 605, 416, 609, 0, 267, 490, 341,
	146, 382, 315, 555, 556, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 558, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 606, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 594, 595, 597, 599, 598, 601, 0,
	612, 480, 481, 613, 591, 370, 0, 495, 528, 517,
	600, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 0, 531, 482, 401, 354, 549, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 283, 205, 477, 596, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	2272, 2275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 593, 2276, 433, 0, 0, 0, 2271, 0, 2270,
	405, 2268, 2273, 337, 0, 0, 0, 449, 0, 391,
	372, 615, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 2274, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 616, 617, 618, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 611, 303, 368, 559, 592, 484, 0,
	546, 485, 494, 295, 518, 530, 529, 364, 444, 0,
	541, 544, 474, 610, 0, 538, 553, 614, 552, 607,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 429, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 453, 534, 535, 358, 359, 360,
	361, 321, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 619,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 608, 605, 416, 609, 0, 267, 490,
	341, 0, 382, 315, 555, 556, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 558, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 606, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 594, 595, 597, 599, 598, 601,
	0, 612, 480, 481, 613, 591, 370, 0, 495, 528,
	517, 600, 483, 0, 1066, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 340, 532, 514, 524,
	515, 500, 501, 502, 509, 320, 503, 504, 505, 475,
	506, 476, 507, 508, 0, 531, 482, 401, 354, 549,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 283, 205, 477, 596, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 2421, 2424, 2425, 2426, 2427,
	2428, 2429, 0, 2434, 2430, 2431, 2432, 2433, 0, 2416,
	2417, 2418, 2419, 1050, 2400, 2422, 0, 2401, 366, 2402,
	2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2413, 2414,
	2411, 2412, 2420, 378, 344, 379, 327, 356, 355, 357,
	1077, 1079, 1081, 1083, 1086, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	0, 0, 593, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 2415, 0,
	391, 372, 615, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 616, 617, 618, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 611, 303, 368, 559, 592, 484,
	0, 546, 485, 494, 295, 518, 530, 529, 364, 444,
	0, 541, 544, 474, 610, 0, 538, 553, 614, 552,
	607, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 429, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 453, 534, 535, 358, 359,
	360, 361, 321, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	619, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 608, 605, 416, 609, 0, 267,
	2423, 341, 0, 382, 315, 555, 556, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 558, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 606, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 594, 595, 597, 599, 598,
	601, 0, 612, 480, 481, 613, 591, 370, 0, 495,
	528, 517, 600, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 0, 531, 482, 401, 354,
	549, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 283, 205, 477, 596,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 2293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 0, 0, 593, 2292, 433, 0, 0, 0, 2298,
	2295, 2297, 405, 0, 2296, 337, 0, 0, 0, 449,
	0, 391, 372, 615, 0, 2290, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 536, 0, 452, 616, 617, 618, 461, 466, 467,
	468, 470, 471, 472, 473, 537, 554, 521, 491, 454,
	545, 488, 492, 493, 557, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 611, 303, 368, 559, 592,
	484, 0, 546, 485, 494, 295, 518, 530, 529, 364,
	444, 0, 541, 544, 474, 610, 0, 538, 553, 614,
	552, 607, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 429, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 453, 534, 535, 358,
	359, 360, 361, 321, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 619, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 608, 605, 416, 609, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 558, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 606, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 594, 595, 597, 599,
	598, 601, 0, 612, 480, 481, 613, 591, 370, 0,
	495, 528, 517, 600, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 0, 531, 482, 401,
	354, 549, 548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 283, 205, 477,
	596, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 2293, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 593, 2292, 433, 0, 0, 0,
	2298, 2295, 2297, 405, 0, 2296, 337, 0, 0, 0,
	449, 0, 391, 372, 615, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 616, 617, 618, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 611, 303, 368, 559,
	592, 484, 0, 546, 485, 494, 295, 518, 530, 529,
	364, 444, 0, 541, 544, 474, 610, 0, 538, 553,
	614, 552, 607, 374, 0, 395, 550, 497, 0, 542,
	516, 0, 543, 512, 547, 0, 486, 0, 402, 426,
	438, 455, 458, 487, 572, 573, 574, 270, 457, 576,
	577, 578, 579, 580, 581, 582, 575, 429, 519, 496,
	522, 437, 499, 498, 0, 0, 533, 453, 534, 535,
	358, 359, 360, 361, 321, 560, 288, 456, 384, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 525,
	526, 523, 619, 0, 583, 584, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 527, 463, 586, 589, 587, 588, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 513, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	567, 566, 565, 564, 563, 562, 561, 0, 0, 510,
	412, 297, 259, 293, 294, 301, 608, 605, 416, 609,
	0, 267, 490, 341, 0, 382, 315, 555, 556, 0,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 558, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 0, 427, 489, 606, 0, 0, 0, 0,
	0, 0, 0, 539, 551, 585, 0, 594, 595, 597,
	599, 598, 601, 0, 612, 480, 481, 613, 591, 370,
	0, 495, 528, 517, 600, 483, 0, 0, 0, 0,
	0, 2000, 0, 0, 0, 0, 310, 0, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 0, 531, 482,
	401, 354, 549, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 2001, 0, 0, 0, 283, 205,
	477, 596, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 1183, 1184, 1185, 1182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 593, 0, 433, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 615, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 616, 617, 618, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 611, 303, 368,
	559, 592, 484, 0, 546, 485, 494, 295, 518, 530,
	529, 364, 444, 0, 541, 544, 474, 610, 0, 538,
	553, 614, 552, 607, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 429, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 453, 534,
	535, 358, 359, 360, 361, 321, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 619, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 608, 605, 416,
	609, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 558, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 606, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 594, 595,
	597, 599, 598, 601, 182, 612, 480, 481, 613, 591,
	0, 0, 0, 0, 370, 0, 495, 528, 517, 600,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 121, 531, 482, 401, 354, 549, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 2050, 0, 204, 0, 0, 0,
	0, 0, 0, 283, 205, 477, 596, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	593, 0, 433, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	615, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 616, 617, 618, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 611, 303, 368, 559, 592, 484, 0, 546,
	485, 494, 295, 518, 530, 529, 364, 444, 0, 541,
	544, 474, 610, 0, 538, 553, 614, 552, 607, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 429, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 453, 534, 535, 358, 359, 360, 361,
	321, 560, 288, 456, 384, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 619, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 608, 605, 416, 609, 0, 267, 490, 341,
	146, 382, 315, 555, 556, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 558, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 606, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 594, 595, 597, 599, 598, 601, 182,
	612, 480, 481, 613, 591, 0, 0, 0, 0, 370,
	0, 495, 528, 517, 600, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 0, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 121, 531, 482,
	401, 354, 549, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 2036,
	0, 204, 0, 0, 0, 0, 0, 0, 283, 205,
	477, 596, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 593, 0, 433, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 615, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 616, 617, 618, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 611, 303, 368,
	559, 592, 484, 0, 546, 485, 494, 295, 518, 530,
	529, 364, 444, 0, 541, 544, 474, 610, 0, 538,
	553, 614, 552, 607, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 429, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 453, 534,
	535, 358, 359, 360, 361, 321, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 619, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 608, 605, 416,
	609, 0, 267, 490, 341, 146, 382, 315, 555, 556,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 558, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 606, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 594, 595,
	597, 599, 598, 601, 0, 612, 480, 481, 613, 591,
	370, 0, 495, 528, 517, 600, 483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 982, 0,
	340, 532, 514, 524, 515, 500, 501, 502, 509, 320,
	503, 504, 505, 475, 506, 476, 507, 508, 0, 531,
	482, 401, 354, 549, 548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 989, 990, 0, 0, 0, 0, 283,
	205, 477, 596, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 993, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 406, 977, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 967, 431, 277,
	966, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 0, 0, 593, 0, 433, 0,
	0, 0, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 615, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 980, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 616, 617, 618,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 611, 303,
	368, 559, 592, 484, 0, 546, 485, 494, 295, 518,
	530, 529, 364, 444, 0, 541, 544, 474, 610, 0,
	538, 553, 614, 552, 607, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 981, 575, 429,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 984,
	534, 535, 358, 359, 360, 361, 321, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 619, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 991,
	978, 987, 979, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 988, 513, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 608, 605,
	416, 609, 0, 267, 490, 341, 0, 382, 315, 555,
	556, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 558, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 606, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 594,
	595, 597, 599, 598, 601, 182, 612, 480, 481, 613,
	591, 0, 0, 0, 0, 370, 0, 495, 528, 517,
	600, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 121, 531, 482, 401, 354, 549, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1933, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 283, 205, 477, 596, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 593, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 615, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 616, 617, 618, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 611, 303, 368, 559, 592, 484, 0,
	546, 485, 494, 295, 518, 530, 529, 364, 444, 0,
	541, 544, 474, 610, 0, 538, 553, 614, 552, 607,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 429, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 453, 534, 535, 358, 359, 360,
	361, 321, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 619,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 608, 605, 416, 609, 0, 267, 490,
	341, 146, 382, 315, 555, 556, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 558, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 606, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 594, 595, 597, 599, 598, 601,
	0, 612, 480, 481, 613, 591, 370, 0, 495, 528,
	517, 600, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 340, 532, 514, 524,
	515, 500, 501, 502, 509, 320, 503, 504, 505, 475,
	506, 476, 507, 508, 0, 531, 482, 401, 354, 549,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 989,
	990, 0, 0, 0, 0, 283, 205, 477, 596, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	993, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 967, 431, 277, 966, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	0, 0, 593, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 615, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 616, 617, 618, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 611, 303, 368, 559, 592, 484,
	0, 546, 485, 494, 295, 518, 530, 529, 364, 444,
	0, 541, 544, 474, 610, 0, 538, 553, 614, 552,
	607, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 429, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 453, 534, 535, 358, 359,
	360, 361, 321, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	619, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 991, 1952, 987, 1953, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 988, 513,
	540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 608, 605, 416, 609, 0, 267,
	490, 341, 0, 382, 315, 555, 556, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 558, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 606, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 594, 595, 597, 599, 598,
	601, 0, 612, 480, 481, 613, 591, 370, 0, 495,
	528, 517, 600, 483, 0, 0, 2787, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 0, 531, 482, 401, 354,
	549, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 283, 205, 477, 596,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 2790, 0, 0, 2789,
	590, 0, 0, 593, 0, 433, 0, 0, 0, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 449,
	0, 391, 372, 615, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 536, 0, 452, 616, 617, 618, 461, 466, 467,
	468, 470, 471, 472, 473, 537, 554, 521, 491, 454,
	545, 488, 492, 493, 557, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 611, 303, 368, 559, 592,
	484, 0, 546, 485, 494, 295, 518, 530, 529, 364,
	444, 0, 541, 544, 474, 610, 0, 538, 553, 614,
	552, 607, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 429, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 453, 534, 535, 358,
	359, 360, 361, 321, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 619, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 608, 605, 416, 609, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 558, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 606, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 594, 595, 597, 599,
	598, 601, 0, 612, 480, 481, 613, 591, 370, 0,
	495, 528, 517, 600, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 1451, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 0, 531, 482, 401,
	354, 549, 548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 1449, 0, 0, 0, 283, 205, 477,
	596, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 593, 0, 433, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 615, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 616, 617, 618, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 611, 303, 368, 559,
	592, 484, 0, 546, 485, 494, 295, 518, 530, 529,
	364, 444, 0, 541, 544, 474, 610, 0, 538, 553,
	614, 552, 607, 374, 0, 395, 550, 497, 0, 542,
	516, 0, 543, 512, 547, 0, 486, 0, 402, 426,
	438, 455, 458, 487, 572, 573, 574, 270, 457, 576,
	577, 578, 579, 580, 581, 582, 575, 429, 519, 496,
	522, 437, 499, 498, 0, 0, 533, 453, 534, 535,
	358, 359, 360, 361, 321, 560, 288, 456, 384, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 525,
	526, 523, 619, 0, 583, 584, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 527, 463, 586, 589, 587, 588, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 513, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	567, 566, 565, 564, 563, 562, 561, 0, 0, 510,
	412, 297, 259, 293, 294, 301, 608, 605, 416, 609,
	0, 267, 490, 341, 0, 382, 315, 555, 556, 0,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 558, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 0, 427, 489, 606, 0, 0, 0, 0,
	0, 0, 0, 539, 551, 585, 0, 594, 595, 597,
	599, 598, 601, 0, 612, 480, 481, 613, 591, 370,
	0, 495, 528, 517, 600, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 1445, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 0, 531, 482,
	401, 354, 549, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 1449, 0, 0, 0, 283, 205,
	477, 596, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1447, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 593, 0, 433, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 615, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 616, 617, 618, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 611, 303, 368,
	559, 592, 484, 0, 546, 485, 494, 295, 518, 530,
	529, 364, 444, 0, 541, 544, 474, 610, 0, 538,
	553, 614, 552, 607, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 429, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 453, 534,
	535, 358, 359, 360, 361, 321, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 619, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 608, 605, 416,
	609, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 558, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 606, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 594, 595,
	597, 599, 598, 601, 0, 612, 480, 481, 613, 591,
	370, 0, 495, 528, 517, 600, 483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 0, 0,
	340, 532, 514, 524, 515, 500, 501, 502, 509, 320,
	503, 504, 505, 475, 506, 476, 507, 508, 0, 531,
	482, 401, 354, 549, 548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3777, 0, 204, 806, 0, 0, 0, 0, 0, 283,
	205, 477, 596, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 0, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 0, 0, 593, 0, 433, 0,
	0, 0, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 615, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 616, 617, 618,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 611, 303,
	368, 559, 592, 484, 0, 546, 485, 494, 295, 518,
	530, 529, 364, 444, 0, 541, 544, 474, 610, 0,
	538, 553, 614, 552, 607, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 429,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 453,
	534, 535, 358, 359, 360, 361, 321, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 619, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 608, 605,
	416, 609, 0, 267, 490, 341, 0, 382, 315, 555,
	556, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 558, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 606, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 594,
	595, 597, 599, 598, 601, 0, 612, 480, 481, 613,
	591, 370, 0, 495, 528, 517, 600, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 0,
	531, 482, 401, 354, 549, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 1449, 0, 0, 0,
	283, 205, 477, 596, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1447, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 0, 0, 593, 0, 433,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 449, 0, 391, 372, 615, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 536, 0, 452, 616, 617,
	618, 461, 466, 467, 468, 470, 471, 472, 473, 537,
	554, 521, 491, 454, 545, 488, 492, 493, 557, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 611,
	303, 368, 559, 592, 484, 0, 546, 485, 494, 295,
	518, 530, 529, 364, 444, 0, 541, 544, 474, 610,
	0, 538, 553, 614, 552, 607, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	429, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	453, 534, 535, 358, 359, 360, 361, 321, 560, 288,
	456, 384, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 619, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 608,
	605, 416, 609, 0, 267, 490, 341, 0, 382, 315,
	555, 556, 0, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 558, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 606, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	594, 595, 597, 599, 598, 601, 0, 612, 480, 481,
	613, 591, 370, 0, 495, 528, 517, 600, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 0, 340, 532, 514, 524, 515, 500, 501, 502,
	509, 320, 503, 504, 505, 475, 506, 476, 507, 508,
	0, 531, 482, 401, 354, 549, 548, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 1449, 0, 0,
	0, 283, 205, 477, 596, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1656, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 0, 593, 0,
	433, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 449, 0, 391, 372, 615, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 616,
	617, 618, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	611, 303, 368, 559, 592, 484, 0, 546, 485, 494,
	295, 518, 530, 529, 364, 444, 0, 541, 544, 474,
	610, 0, 538, 553, 614, 552, 607, 374, 0, 395,
	550, 497, 0, 542, 516, 0, 543, 512, 547, 0,
	486, 0, 402, 426, 438, 455, 458, 487, 572, 573,
	574, 270, 457, 576, 577, 578, 579, 580, 581, 582,
	575, 429, 519, 496, 522, 437, 499, 498, 0, 0,
	533, 453, 534, 535, 358, 359, 360, 361, 321, 560,
	288, 456, 384, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 526, 523, 619, 0, 583, 584,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 527, 463, 586, 589, 587,
	588, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 513, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 567, 566, 565, 564, 563, 562,
	561, 0, 0, 510, 412, 297, 259, 293, 294, 301,
	608, 605, 416, 609, 0, 267, 490, 341, 0, 382,
	315, 555, 556, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 558,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 0, 427, 489, 606,
	0, 0, 0, 0, 0, 0, 0, 539, 551, 585,
	0, 594, 595, 597, 599, 598, 601, 0, 612, 480,
	481, 613, 591, 370, 0, 495, 528, 517, 600, 483,
	0, 0, 0, 0, 0, 2364, 0, 0, 0, 0,
	310, 0, 0, 340, 532, 514, 524, 515, 500, 501,
	502, 509, 320, 503, 504, 505, 475, 506, 476, 507,
	508, 0, 531, 482, 401, 354, 549, 548, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 2366, 0,
	0, 0, 283, 205, 477, 596, 479, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 0, 420, 448, 304, 439,
	0, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 464, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 593,
	0, 433, 0, 0, 0, 0, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 449, 0, 391, 372, 615,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 536, 0, 452,
	616, 617, 618, 461, 466, 467, 468, 470, 471, 472,
	473, 537, 554, 521, 491, 454, 545, 488, 492, 493,
	557, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 611, 303, 368, 559, 592, 484, 0, 546, 485,
	494, 295, 518, 530, 529, 364, 444, 0, 541, 544,
	474, 610, 0, 538, 553, 614, 552, 607, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 429, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 453, 534, 535, 358, 359, 360, 361, 321,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 619, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 608, 605, 416, 609, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	558, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	606, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 594, 595, 597, 599, 598, 601, 0, 612,
	480, 481, 613, 591, 370, 0, 495, 528, 517, 600,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 0, 531, 482, 401, 354, 549, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 2983,
	2985, 0, 0, 283, 205, 477, 596, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	593, 0, 433, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	615, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 616, 617, 618, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 611, 303, 368, 559, 592, 484, 0, 546,
	485, 494, 295, 518, 530, 529, 364, 444, 0, 541,
	544, 474, 610, 0, 538, 553, 614, 552, 607, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 429, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 453, 534, 535, 358, 359, 360, 361,
	321, 560, 288, 456, 384, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 619, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 608, 605, 416, 609, 0, 267, 490, 341,
	0, 382, 315, 555, 556, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 558, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 606, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 594, 595, 597, 599, 598, 601, 0,
	612, 480, 481, 613, 591, 370, 0, 495, 528, 517,
	600, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 2385, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 0, 531, 482, 401, 354, 549, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	1449, 0, 0, 0, 283, 205, 477, 596, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 593, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 615, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 616, 617, 618, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 611, 303, 368, 559, 592, 484, 0,
	546, 485, 494, 295, 518, 530, 529, 364, 444, 0,
	541, 544, 474, 610, 0, 538, 553, 614, 552, 607,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 429, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 453, 534, 535, 358, 359, 360,
	361, 321, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 619,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 608, 605, 416, 609, 0, 267, 490,
	341, 0, 382, 315, 555, 556, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 558, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 606, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 594, 595, 597, 599, 598, 601,
	0, 612, 480, 481, 613, 591, 370, 0, 495, 528,
	517, 600, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 626, 310, 0, 0, 340, 532, 514, 524,
	515, 500, 501, 502, 509, 320, 503, 504, 505, 475,
	506, 476, 507, 508, 0, 531, 482, 401, 354, 549,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 283, 205, 477, 596, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 0, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	0, 0, 593, 0, 433, 0, 625, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 615, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 616, 617, 618, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 611, 303, 368, 559, 592, 484,
	0, 546, 485, 494, 295, 518, 530, 529, 364, 444,
	0, 541, 544, 474, 610, 0, 538, 553, 614, 552,
	607, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 429, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 453, 534, 535, 358, 359,
	360, 361, 321, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	619, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 608, 605, 416, 609, 0, 267,
	490, 341, 0, 382, 315, 555, 556, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 558, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 606, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 594, 595, 597, 599, 598,
	601, 0, 612, 480, 481, 613, 591, 370, 0, 495,
	528, 517, 600, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 0, 531, 482, 401, 354,
	549, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	806, 0, 0, 0, 0, 0, 283, 205, 477, 596,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 0, 0, 593, 0, 433, 0, 0, 0, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 449,
	0, 391, 372, 615, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 536, 0, 452, 616, 617, 618, 461, 466, 467,
	468, 470, 471, 472, 473, 537, 554, 521, 491, 454,
	545, 488, 492, 493, 557, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 611, 303, 368, 559, 592,
	484, 0, 546, 485, 494, 295, 518, 530, 529, 364,
	444, 0, 541, 544, 474, 610, 0, 538, 553, 614,
	552, 607, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 429, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 453, 534, 535, 358,
	359, 360, 361, 321, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 619, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 608, 605, 416, 609, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 558, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 606, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 594, 595, 597, 599,
	598, 601, 0, 612, 480, 481, 613, 591, 370, 0,
	495, 528, 517, 600, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 0, 531, 482, 401,
	354, 549, 548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3756, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 283, 205, 477,
	596, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 593, 0, 433, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 615, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 616, 617, 618, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 611, 303, 368, 559,
	592, 484, 0, 546, 485, 494, 295, 518, 530, 529,
	364, 444, 0, 541, 544, 474, 610, 0, 538, 553,
	614, 552, 607, 374, 0, 395, 550, 497, 0, 542,
	516, 0, 543, 512, 547, 0, 486, 0, 402, 426,
	438, 455, 458, 487, 572, 573, 574, 270, 457, 576,
	577, 578, 579, 580, 581, 582, 575, 429, 519, 496,
	522, 437, 499, 498, 0, 0, 533, 453, 534, 535,
	358, 359, 360, 361, 321, 560, 288, 456, 384, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 525,
	526, 523, 619, 0, 583, 584, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 527, 463, 586, 589, 587, 588, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 513, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	567, 566, 565, 564, 563, 562, 561, 0, 0, 510,
	412, 297, 259, 293, 294, 301, 608, 605, 416, 609,
	0, 267, 490, 341, 0, 382, 315, 555, 556, 0,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 558, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 0, 427, 489, 606, 0, 0, 0, 0,
	0, 0, 0, 539, 551, 585, 0, 594, 595, 597,
	599, 598, 601, 0, 612, 480, 481, 613, 591, 370,
	0, 495, 528, 517, 600, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 0, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 0, 531, 482,
	401, 354, 549, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 3539, 0, 0, 0, 283, 205,
	477, 596, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 593, 0, 433, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 615, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 616, 617, 618, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 611, 303, 368,
	559, 592, 484, 0, 546, 485, 494, 295, 518, 530,
	529, 364, 444, 0, 541, 544, 474, 610, 0, 538,
	553, 614, 552, 607, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 429, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 453, 534,
	535, 358, 359, 360, 361, 321, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 619, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 608, 605, 416,
	609, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 558, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 606, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 594, 595,
	597, 599, 598, 601, 0, 612, 480, 481, 613, 591,
	370, 0, 495, 528, 517, 600, 483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 0, 0,
	340, 532, 514, 524, 515, 500, 501, 502, 509, 320,
	503, 504, 505, 475, 506, 476, 507, 508, 0, 531,
	482, 401, 354, 549, 548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 283,
	205, 477, 596, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 0, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 0, 0, 593, 0, 433, 0,
	0, 0, 3666, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 615, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 616, 617, 618,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 611, 303,
	368, 559, 592, 484, 0, 546, 485, 494, 295, 518,
	530, 529, 364, 444, 0, 541, 544, 474, 610, 0,
	538, 553, 614, 552, 607, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 429,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 453,
	534, 535, 358, 359, 360, 361, 321, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 619, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 608, 605,
	416, 609, 0, 267, 490, 341, 0, 382, 315, 555,
	556, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 558, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 606, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 594,
	595, 597, 599, 598, 601, 0, 612, 480, 481, 613,
	591, 370, 0, 495, 528, 517, 600, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 0,
	531, 482, 401, 354, 549, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3390, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	283, 205, 477, 596, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 0, 0, 593, 0, 433,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 449, 0, 391, 372, 615, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 536, 0, 452, 616, 617,
	618, 461, 466, 467, 468, 470, 471, 472, 473, 537,
	554, 521, 491, 454, 545, 488, 492, 493, 557, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 611,
	303, 368, 559, 592, 484, 0, 546, 485, 494, 295,
	518, 530, 529, 364, 444, 0, 541, 544, 474, 610,
	0, 538, 553, 614, 552, 607, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	429, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	453, 534, 535, 358, 359, 360, 361, 321, 560, 288,
	456, 384, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 619, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 608,
	605, 416, 609, 0, 267, 490, 341, 0, 382, 315,
	555, 556, 0, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 558, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 606, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	594, 595, 597, 599, 598, 601, 0, 612, 480, 481,
	613, 591, 370, 0, 495, 528, 517, 600, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 0, 340, 532, 514, 524, 515, 500, 501, 502,
	509, 320, 503, 504, 505, 475, 506, 476, 507, 508,
	0, 531, 482, 401, 354, 549, 548, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3554, 0, 204, 0, 0, 0, 0, 0,
	0, 283, 205, 477, 596, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 0, 593, 0,
	433, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 449, 0, 391, 372, 615, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 616,
	617, 618, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	611, 303, 368, 559, 592, 484, 0, 546, 485, 494,
	295, 518, 530, 529, 364, 444, 0, 541, 544, 474,
	610, 0, 538, 553, 614, 552, 607, 374, 0, 395,
	550, 497, 0, 542, 516, 0, 543, 512, 547, 0,
	486, 0, 402, 426, 438, 455, 458, 487, 572, 573,
	574, 270, 457, 576, 577, 578, 579, 580, 581, 582,
	575, 429, 519, 496, 522, 437, 499, 498, 0, 0,
	533, 453, 534, 535, 358, 359, 360, 361, 321, 560,
	288, 456, 384, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 526, 523, 619, 0, 583, 584,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 527, 463, 586, 589, 587,
	588, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 513, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 567, 566, 565, 564, 563, 562,
	561, 0, 0, 510, 412, 297, 259, 293, 294, 301,
	608, 605, 416, 609, 0, 267, 490, 341, 0, 382,
	315, 555, 556, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 558,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 0, 427, 489, 606,
	0, 0, 0, 0, 0, 0, 0, 539, 551, 585,
	0, 594, 595, 597, 599, 598, 601, 0, 612, 480,
	481, 613, 591, 370, 0, 495, 528, 517, 600, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 0, 340, 532, 514, 524, 515, 500, 501,
	502, 509, 320, 503, 504, 505, 475, 506, 476, 507,
	508, 0, 531, 482, 401, 354, 549, 548, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 283, 205, 477, 596, 479, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 0, 420, 448, 304, 439,
	0, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 464, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 593,
	0, 433, 0, 0, 0, 3478, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 449, 0, 391, 372, 615,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 536, 0, 452,
	616, 617, 618, 461, 466, 467, 468, 470, 471, 472,
	473, 537, 554, 521, 491, 454, 545, 488, 492, 493,
	557, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 611, 303, 368, 559, 592, 484, 0, 546, 485,
	494, 295, 518, 530, 529, 364, 444, 0, 541, 544,
	474, 610, 0, 538, 553, 614, 552, 607, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 429, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 453, 534, 535, 358, 359, 360, 361, 321,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 619, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 608, 605, 416, 609, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	558, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	606, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 594, 595, 597, 599, 598, 601, 0, 612,
	480, 481, 613, 591, 370, 0, 495, 528, 517, 600,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 0, 531, 482, 401, 354, 549, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 3016,
	0, 0, 0, 283, 205, 477, 596, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	593, 0, 433, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	615, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 616, 617, 618, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 611, 303, 368, 559, 592, 484, 0, 546,
	485, 494, 295, 518, 530, 529, 364, 444, 0, 541,
	544, 474, 610, 0, 538, 553, 614, 552, 607, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 429, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 453, 534, 535, 358, 359, 360, 361,
	321, 560, 288, 456, 384, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 619, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 608, 605, 416, 609, 0, 267, 490, 341,
	0, 382, 315, 555, 556, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 558, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 606, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 594, 595, 597, 599, 598, 601, 0,
	612, 480, 481, 613, 591, 370, 0, 495, 528, 517,
	600, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 0, 531, 482, 401, 354, 549, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 283, 205, 477, 596, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3034, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 593, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 615, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 616, 617, 618, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 611, 303, 368, 559, 592, 484, 0,
	546, 485, 494, 295, 518, 530, 529, 364, 444, 0,
	541, 544, 474, 610, 0, 538, 553, 614, 552, 607,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 429, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 453, 534, 535, 358, 359, 360,
	361, 321, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 619,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 608, 605, 416, 609, 0, 267, 490,
	341, 0, 382, 315, 555, 556, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 558, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 606, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 594, 595, 597, 599, 598, 601,
	0, 612, 480, 481, 613, 591, 370, 0, 495, 528,
	517, 600, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 340, 532, 514, 524,
	515, 500, 501, 502, 509, 320, 503, 504, 505, 475,
	506, 476, 507, 508, 0, 531, 482, 401, 354, 549,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1933, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 283, 205, 477, 596, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 0, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	0, 0, 593, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 615, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 616, 617, 618, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 611, 303, 368, 559, 592, 484,
	0, 546, 485, 494, 295, 518, 530, 529, 364, 444,
	0, 541, 544, 474, 610, 0, 538, 553, 614, 552,
	607, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 429, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 453, 534, 535, 358, 359,
	360, 361, 321, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	619, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 608, 605, 416, 609, 0, 267,
	490, 341, 0, 382, 315, 555, 556, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 558, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 606, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 594, 595, 597, 599, 598,
	601, 0, 612, 480, 481, 613, 591, 370, 0, 495,
	528, 517, 600, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 0, 531, 482, 401, 354,
	549, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 283, 205, 477, 596,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3135, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 0, 0, 593, 0, 433, 0, 0, 0, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 449,
	0, 391, 372, 615, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 536, 0, 452, 616, 617, 618, 461, 466, 467,
	468, 470, 471, 472, 473, 537, 554, 521, 491, 454,
	545, 488, 492, 493, 557, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 611, 303, 368, 559, 592,
	484, 0, 546, 485, 494, 295, 518, 530, 529, 364,
	444, 0, 541, 544, 474, 610, 0, 538, 553, 614,
	552, 607, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 429, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 453, 534, 535, 358,
	359, 360, 361, 321, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 619, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 608, 605, 416, 609, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 558, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 606, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 594, 595, 597, 599,
	598, 601, 0, 612, 480, 481, 613, 591, 370, 0,
	495, 528, 517, 600, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 0, 531, 482, 401,
	354, 549, 548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 283, 205, 477,
	596, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2887, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 593, 0, 433, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 615, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 616, 617, 618, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 611, 303, 368, 559,
	592, 484, 0, 546, 485, 494, 295, 518, 530, 529,
	364, 444, 0, 541, 544, 474, 610, 0, 538, 553,
	614, 552, 607, 374, 0, 395, 550, 497, 0, 542,
	516, 0, 543, 512, 547, 0, 486, 0, 402, 426,
	438, 455, 458, 487, 572, 573, 574, 270, 457, 576,
	577, 578, 579, 580, 581, 582, 575, 429, 519, 496,
	522, 437, 499, 498, 0, 0, 533, 453, 534, 535,
	358, 359, 360, 361, 321, 560, 288, 456, 384, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 525,
	526, 523, 619, 0, 583, 584, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 527, 463, 586, 589, 587, 588, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 513, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	567, 566, 565, 564, 563, 562, 561, 0, 0, 510,
	412, 297, 259, 293, 294, 301, 608, 605, 416, 609,
	0, 267, 490, 341, 0, 382, 315, 555, 556, 0,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 558, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 0, 427, 489, 606, 0, 0, 0, 0,
	0, 0, 0, 539, 551, 585, 0, 594, 595, 597,
	599, 598, 601, 0, 612, 480, 481, 613, 591, 370,
	0, 495, 528, 517, 600, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 0, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 0, 531, 482,
	401, 354, 549, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 1449, 0, 0, 0, 283, 205,
	477, 596, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 593, 0, 433, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 615, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 616, 617, 618, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 611, 303, 368,
	559, 592, 484, 0, 546, 485, 494, 295, 518, 530,
	529, 364, 444, 0, 541, 544, 474, 610, 0, 538,
	553, 614, 552, 607, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 429, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 453, 534,
	535, 358, 359, 360, 361, 321, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 619, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 608, 605, 416,
	609, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 558, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 606, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 594, 595,
	597, 599, 598, 601, 0, 612, 480, 481, 613, 591,
	370, 0, 495, 528, 517, 600, 483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 0, 0,
	340, 532, 514, 524, 515, 500, 501, 502, 509, 320,
	503, 504, 505, 475, 506, 476, 507, 508, 0, 531,
	482, 401, 354, 549, 548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 2366, 0, 0, 0, 283,
	205, 477, 596, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 0, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 0, 0, 593, 0, 433, 0,
	0, 0, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 615, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 616, 617, 618,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 611, 303,
	368, 559, 592, 484, 0, 546, 485, 494, 295, 518,
	530, 529, 364, 444, 0, 541, 544, 474, 610, 0,
	538, 553, 614, 552, 607, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 429,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 453,
	534, 535, 358, 359, 360, 361, 321, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 619, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 608, 605,
	416, 609, 0, 267, 490, 341, 0, 382, 315, 555,
	556, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 558, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 606, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 594,
	595, 597, 599, 598, 601, 0, 612, 480, 481, 613,
	591, 370, 0, 495, 528, 517, 600, 483, 0, 0,
	2712, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 0,
	531, 482, 401, 354, 549, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	283, 205, 477, 596, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 0, 0, 593, 0, 433,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 449, 0, 391, 372, 615, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 536, 0, 452, 616, 617,
	618, 461, 466, 467, 468, 470, 471, 472, 473, 537,
	554, 521, 491, 454, 545, 488, 492, 493, 557, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 611,
	303, 368, 559, 592, 484, 0, 546, 485, 494, 295,
	518, 530, 529, 364, 444, 0, 541, 544, 474, 610,
	0, 538, 553, 614, 552, 607, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	429, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	453, 534, 535, 358, 359, 360, 361, 321, 560, 288,
	456, 384, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 619, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 608,
	605, 416, 609, 0, 267, 490, 341, 0, 382, 315,
	555, 556, 0, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 558, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 606, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	594, 595, 597, 599, 598, 601, 0, 612, 480, 481,
	613, 591, 370, 0, 495, 528, 517, 600, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 0, 340, 532, 514, 524, 515, 500, 501, 502,
	509, 320, 503, 504, 505, 475, 506, 476, 507, 508,
	0, 531, 482, 401, 354, 549, 548, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 283, 205, 477, 596, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2071, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 0, 593, 0,
	433, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 449, 0, 391, 372, 615, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 616,
	617, 618, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	611, 303, 368, 559, 592, 484, 0, 546, 485, 494,
	295, 518, 530, 529, 364, 444, 0, 541, 544, 474,
	610, 0, 538, 553, 614, 552, 607, 374, 0, 395,
	550, 497, 0, 542, 516, 0, 543, 512, 547, 0,
	486, 0, 402, 426, 438, 455, 458, 487, 572, 573,
	574, 270, 457, 576, 577, 578, 579, 580, 581, 582,
	575, 429, 519, 496, 522, 437, 499, 498, 0, 0,
	533, 453, 534, 535, 358, 359, 360, 361, 321, 560,
	288, 456, 384, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 526, 523, 619, 0, 583, 584,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 527, 463, 586, 589, 587,
	588, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 513, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 567, 566, 565, 564, 563, 562,
	561, 0, 0, 510, 412, 297, 259, 293, 294, 301,
	608, 605, 416, 609, 0, 267, 490, 341, 0, 382,
	315, 555, 556, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 558,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 0, 427, 489, 606,
	0, 0, 0, 0, 0, 0, 0, 539, 551, 585,
	0, 594, 595, 597, 599, 598, 601, 0, 612, 480,
	481, 613, 591, 370, 0, 495, 528, 517, 600, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 0, 340, 532, 514, 524, 515, 500, 501,
	502, 509, 320, 503, 504, 505, 475, 506, 476, 507,
	508, 0, 531, 482, 401, 354, 549, 548, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 2482, 0,
	0, 0, 283, 205, 477, 596, 479, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 0, 420, 448, 304, 439,
	0, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 464, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 593,
	0, 433, 0, 0, 0, 0, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 449, 0, 391, 372, 615,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 536, 0, 452,
	616, 617, 618, 461, 466, 467, 468, 470, 471, 472,
	473, 537, 554, 521, 491, 454, 545, 488, 492, 493,
	557, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 611, 303, 368, 559, 592, 484, 0, 546, 485,
	494, 295, 518, 530, 529, 364, 444, 0, 541, 544,
	474, 610, 0, 538, 553, 614, 552, 607, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 429, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 453, 534, 535, 358, 359, 360, 361, 321,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 619, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 608, 605, 416, 609, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	558, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	606, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 594, 595, 597, 599, 598, 601, 0, 612,
	480, 481, 613, 591, 370, 0, 495, 528, 517, 600,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 0, 531, 482, 401, 354, 549, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 283, 205, 477, 596, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	593, 0, 433, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	615, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 616, 617, 618, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 611, 303, 368, 559, 592, 484, 0, 546,
	485, 494, 295, 518, 530, 529, 364, 444, 0, 541,
	544, 474, 610, 0, 538, 553, 614, 552, 607, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 429, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 453, 534, 535, 358, 359, 360, 361,
	321, 560, 288, 456, 384, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 619, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 608, 605, 416, 609, 0, 267, 490, 341,
	0, 382, 315, 555, 556, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 558, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 606, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 594, 595, 597, 599, 598, 601, 0,
	612, 480, 481, 613, 591, 370, 0, 495, 528, 517,
	600, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 0, 531, 482, 401, 354, 549, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	2441, 0, 0, 0, 283, 205, 477, 596, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 593, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 615, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 616, 617, 618, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 611, 303, 368, 559, 592, 484, 0,
	546, 485, 494, 295, 518, 530, 529, 364, 444, 0,
	541, 544, 474, 610, 0, 538, 553, 614, 552, 607,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 429, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 453, 534, 535, 358, 359, 360,
	361, 321, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 619,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 608, 605, 416, 609, 0, 267, 490,
	341, 0, 382, 315, 555, 556, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 558, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 606, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 594, 595, 597, 599, 598, 601,
	2227, 612, 480, 481, 613, 591, 370, 0, 495, 528,
	517, 600, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 340, 532, 514, 524,
	515, 500, 501, 502, 509, 320, 503, 504, 505, 475,
	506, 476, 507, 508, 0, 531, 482, 401, 354, 549,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 283, 205, 477, 596, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 0, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	0, 0, 593, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 615, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 616, 617, 618, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 611, 303, 368, 559, 592, 484,
	0, 546, 485, 494, 295, 518, 530, 529, 364, 444,
	0, 541, 544, 474, 610, 0, 538, 553, 614, 552,
	607, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 429, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 453, 534, 535, 358, 359,
	360, 361, 321, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	619, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 608, 605, 416, 609, 0, 267,
	490, 341, 0, 382, 315, 555, 556, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 558, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 606, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 594, 595, 597, 599, 598,
	601, 0, 612, 480, 481, 613, 591, 370, 0, 495,
	528, 517, 600, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 0, 531, 482, 401, 354,
	549, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 1792, 0, 0, 283, 205, 477, 596,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 0, 0, 593, 0, 433, 0, 0, 0, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 449,
	0, 391, 372, 615, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 536, 0, 452, 616, 617, 618, 461, 466, 467,
	468, 470, 471, 472, 473, 537, 554, 521, 491, 454,
	545, 488, 492, 493, 557, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 611, 303, 368, 559, 592,
	484, 0, 546, 485, 494, 295, 518, 530, 529, 364,
	444, 0, 541, 544, 474, 610, 0, 538, 553, 614,
	552, 607, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 429, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 453, 534, 535, 358,
	359, 360, 361, 321, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 619, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 608, 605, 416, 609, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 558, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 606, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 594, 595, 597, 599,
	598, 601, 0, 612, 480, 481, 613, 591, 370, 0,
	495, 528, 517, 600, 483, 0, 1919, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 0, 531, 482, 401,
	354, 549, 548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 283, 205, 477,
	596, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 593, 0, 433, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 615, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 616, 617, 618, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 611, 303, 368, 559,
	592, 484, 0, 546, 485, 494, 295, 518, 530, 529,
	364, 444, 0, 541, 544, 474, 610, 0, 538, 553,
	614, 552, 607, 374, 0, 395, 550, 497, 0, 542,
	516, 0, 543, 512, 547, 0, 486, 0, 402, 426,
	438, 455, 458, 487, 572, 573, 574, 270, 457, 576,
	577, 578, 579, 580, 581, 582, 575, 429, 519, 496,
	522, 437, 499, 498, 0, 0, 533, 453, 534, 535,
	358, 359, 360, 361, 321, 560, 288, 456, 384, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 525,
	526, 523, 619, 0, 583, 584, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 527, 463, 586, 589, 587, 588, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 513, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	567, 566, 565, 564, 563, 562, 561, 0, 0, 510,
	412, 297, 259, 293, 294, 301, 608, 605, 416, 609,
	0, 267, 490, 341, 0, 382, 315, 555, 556, 0,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 558, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 0, 427, 489, 606, 0, 0, 0, 0,
	0, 0, 0, 539, 551, 585, 0, 594, 595, 597,
	599, 598, 601, 0, 612, 480, 481, 613, 591, 370,
	0, 495, 528, 517, 600, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 0, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 0, 531, 482,
	401, 354, 549, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 1449, 0, 0, 0, 283, 205,
	477, 596, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 593, 0, 433, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 615, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 1825, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 616, 617, 618, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 611, 303, 368,
	559, 592, 484, 0, 546, 485, 494, 295, 518, 530,
	529, 364, 444, 0, 541, 544, 474, 610, 0, 538,
	553, 614, 552, 607, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 429, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 453, 534,
	535, 358, 359, 360, 361, 321, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 619, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 608, 605, 416,
	609, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 558, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 606, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 594, 595,
	597, 599, 598, 601, 0, 612, 480, 481, 613, 591,
	370, 0, 495, 528, 517, 600, 483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 0, 0,
	340, 532, 514, 524, 515, 500, 501, 502, 509, 320,
	503, 504, 505, 475, 506, 476, 507, 508, 0, 531,
	482, 401, 354, 549, 548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 283,
	205, 477, 596, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 0, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 0, 0, 593, 0, 433, 0,
	0, 1479, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 615, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 616, 617, 618,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 611, 303,
	368, 559, 592, 484, 0, 546, 485, 494, 295, 518,
	530, 529, 364, 444, 0, 541, 544, 474, 610, 0,
	538, 553, 614, 552, 607, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 429,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 453,
	534, 535, 358, 359, 360, 361, 321, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 619, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 608, 605,
	416, 609, 0, 267, 490, 341, 0, 382, 315, 555,
	556, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 558, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 606, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 594,
	595, 597, 599, 598, 601, 0, 612, 480, 481, 613,
	591, 370, 0, 495, 528, 517, 600, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 626, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 0,
	531, 482, 401, 354, 549, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	283, 205, 477, 596, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 0, 0, 593, 0, 433,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 449, 0, 391, 372, 615, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 536, 0, 452, 616, 617,
	618, 461, 466, 467, 468, 470, 471, 472, 473, 537,
	554, 521, 491, 454, 545, 488, 492, 493, 557, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 611,
	303, 368, 559, 592, 484, 0, 546, 485, 494, 295,
	518, 530, 529, 364, 444, 0, 541, 544, 474, 610,
	0, 538, 553, 614, 552, 607, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	429, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	453, 534, 535, 358, 359, 360, 361, 321, 560, 288,
	456, 384, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 619, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 608,
	605, 416, 609, 0, 267, 490, 341, 0, 382, 315,
	555, 556, 0, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 558, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 606, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	594, 595, 597, 599, 598, 601, 0, 612, 480, 481,
	613, 591, 370, 0, 495, 528, 517, 600, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 0, 340, 532, 514, 524, 515, 500, 501, 502,
	509, 320, 503, 504, 505, 475, 506, 476, 507, 508,
	0, 531, 482, 401, 354, 549, 548, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 283, 205, 477, 596, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 636, 593, 0,
	433, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 449, 0, 391, 372, 615, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 616,
	617, 618, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	611, 303, 368, 559, 592, 484, 0, 546, 485, 494,
	295, 518, 530, 529, 364, 444, 0, 541, 544, 474,
	610, 0, 538, 553, 614, 552, 607, 374, 0, 395,
	550, 497, 0, 542, 516, 0, 543, 512, 547, 0,
	486, 0, 402, 426, 438, 455, 458, 487, 572, 573,
	574, 270, 457, 576, 577, 578, 579, 580, 581, 582,
	575, 429, 519, 496, 522, 437, 499, 498, 0, 0,
	533, 453, 534, 535, 358, 359, 360, 361, 321, 560,
	288, 456, 384, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 526, 523, 619, 0, 583, 584,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 527, 463, 586, 589, 587,
	588, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 513, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 567, 566, 565, 564, 563, 562,
	561, 0, 0, 510, 412, 297, 259, 293, 294, 301,
	608, 605, 416, 609, 0, 267, 490, 341, 0, 382,
	315, 555, 556, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 558,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 0, 427, 489, 606,
	0, 0, 0, 0, 0, 0, 0, 539, 551, 585,
	0, 594, 595, 597, 599, 598, 601, 0, 612, 480,
	481, 613, 591, 370, 0, 495, 528, 517, 600, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 0, 340, 532, 514, 524, 515, 500, 501,
	502, 509, 320, 503, 504, 505, 475, 506, 476, 507,
	508, 0, 531, 482, 401, 354, 549, 548, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 283, 205, 477, 596, 479, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 0, 420, 448, 304, 439,
	0, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 464, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 593,
	0, 433, 0, 0, 0, 0, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 449, 0, 391, 372, 615,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 536, 0, 452,
	616, 617, 618, 461, 466, 467, 468, 470, 471, 472,
	473, 537, 554, 521, 491, 454, 545, 488, 492, 493,
	557, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 611, 303, 368, 559, 592, 484, 0, 546, 485,
	494, 295, 518, 530, 529, 364, 444, 0, 541, 544,
	474, 610, 0, 538, 553, 614, 552, 607, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 429, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 453, 534, 535, 358, 359, 360, 361, 321,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 619, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 919, 0, 510, 412, 297, 259, 293, 294,
	301, 608, 605, 416, 609, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	558, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	606, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 594, 595, 597, 599, 598, 601, 0, 612,
	480, 481, 613, 591, 370, 0, 495, 528, 517, 600,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 0, 531, 482, 401, 354, 549, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 283, 205, 477, 596, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	593, 0, 433, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	615, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 616, 617, 618, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 611, 303, 368, 559, 592, 484, 0, 546,
	485, 494, 295, 518, 530, 529, 364, 444, 0, 541,
	544, 474, 610, 0, 538, 553, 614, 552, 607, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 429, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 453, 534, 535, 358, 359, 360, 361,
	321, 560, 288, 456, 384, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 619, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 608, 605, 416, 609, 0, 267, 490, 341,
	0, 382, 315, 555, 556, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 558, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 606, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 594, 595, 597, 599, 598, 601, 0,
	612, 480, 481, 613, 591, 370, 0, 495, 528, 517,
	600, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 0, 531, 482, 401, 354, 549, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 283, 205, 477, 596, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 1429, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 593, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 615, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 616, 617, 618, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 611, 303, 368, 559, 592, 484, 0,
	546, 485, 494, 295, 518, 530, 529, 364, 444, 0,
	541, 544, 474, 610, 0, 538, 553, 614, 552, 607,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 429, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 453, 534, 535, 358, 359, 360,
	361, 321, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 619,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 608, 605, 416, 609, 0, 267, 490,
	341, 0, 382, 315, 555, 556, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 558, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 606, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 594, 595, 597, 599, 598, 601,
	0, 612, 480, 481, 613, 591, 370, 0, 495, 528,
	517, 600, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 340, 532, 514, 524,
	515, 500, 501, 502, 509, 320, 503, 504, 505, 475,
	506, 476, 507, 508, 0, 531, 482, 401, 354, 549,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 283, 205, 477, 596, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 406, 1427, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 0, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	0, 0, 593, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 615, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 616, 617, 618, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 611, 303, 368, 559, 592, 484,
	0, 546, 485, 494, 295, 518, 530, 529, 364, 444,
	0, 541, 544, 474, 610, 0, 538, 553, 614, 552,
	607, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 429, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 453, 534, 535, 358, 359,
	360, 361, 321, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	619, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 608, 605, 416, 609, 0, 267,
	490, 341, 0, 382, 315, 555, 556, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 558, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 606, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 594, 595, 597, 599, 598,
	601, 0, 612, 480, 481, 613, 591, 370, 0, 495,
	528, 517, 600, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 0, 531, 482, 401, 354,
	549, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 283, 205, 477, 596,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 0, 0, 593, 0, 433, 0, 0, 0, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 449,
	0, 391, 372, 615, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 703, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 536, 0, 452, 616, 617, 618, 461, 466, 467,
	468, 470, 471, 472, 473, 537, 554, 521, 491, 454,
	545, 488, 492, 493, 557, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 611, 303, 368, 559, 592,
	484, 0, 546, 485, 494, 295, 518, 530, 529, 364,
	444, 0, 541, 544, 474, 610, 0, 538, 553, 614,
	552, 607, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 429, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 453, 534, 535, 358,
	359, 360, 361, 321, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 619, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 608, 605, 416, 609, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 558, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 606, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 594, 595, 597, 599,
	598, 601, 0, 612, 480, 481, 613, 591, 370, 0,
	495, 528, 517, 600, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 0, 531, 482, 401,
	354, 549, 548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 283, 205, 477,
	596, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 593, 0, 433, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 615, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 660, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 616, 617, 618, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 611, 303, 368, 559,
	592, 484, 0, 546, 485, 494, 295, 518, 530, 529,
	364, 444, 0, 541, 544, 474, 610, 0, 538, 553,
	614, 552, 607, 374, 0, 395, 550, 497, 0, 542,
	516, 0, 543, 512, 547, 0, 486, 0, 402, 426,
	438, 455, 458, 487, 572, 573, 574, 270, 457, 576,
	577, 578, 579, 580, 581, 661, 575, 429, 519, 496,
	522, 437, 499, 498, 0, 0, 533, 453, 534, 535,
	358, 359, 360, 361, 321, 560, 288, 456, 384, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 525,
	526, 523, 619, 0, 583, 584, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 527, 463, 586, 589, 587, 588, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 513, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	567, 566, 565, 564, 563, 562, 561, 0, 0, 510,
	412, 297, 259, 293, 294, 301, 608, 605, 416, 609,
	0, 267, 490, 341, 0, 382, 315, 555, 556, 0,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 558, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 925, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 0, 427, 489, 606, 0, 0, 0, 0,
	0, 0, 0, 539, 551, 585, 0, 594, 595, 597,
	599, 598, 601, 0, 612, 480, 481, 613, 591, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 923, 924, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1907, 0, 0, 0, 0, 1868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1066, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1909,
	1877, 0, 0, 0, 0, 0, 0, 0, 0, 1910,
	1911, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 1876, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1884, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 951, 0, 0, 0, 0,
	0, 0, 0, 926, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	928, 1052, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1900, 0,
	0, 1074, 1078, 1080, 1082, 1084, 1085, 1087, 0, 1092,
	1088, 1089, 1090, 1091, 0, 1069, 1070, 1071, 1072, 1050,
	1051, 1075, 0, 1053, 0, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1065, 1067, 1063, 1064, 1073, 0,
	0, 0, 0, 950, 948, 0, 1077, 1079, 1081, 1083,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 947, 0, 0, 0, 1867,
	1869, 1866, 0, 1863, 0, 0, 922, 0, 1888, 0,
	0, 0, 0, 0, 1068, 0, 0, 927, 960, 1894,
	0, 0, 0, 0, 0, 0, 0, 1879, 0, 1862,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1882,
	1916, 956, 0, 1883, 1885, 1887, 0, 1889, 1890, 1891,
	1895, 1896, 1897, 1899, 1902, 1903, 1904, 1907, 0, 0,
	0, 0, 1868, 0, 1892, 1901, 1893, 0, 0, 0,
	0, 0, 0, 1066, 0, 0, 1871, 957, 961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1909, 1877, 0, 0, 0, 944, 1908, 942,
	946, 964, 1910, 1911, 0, 943, 940, 939, 0, 945,
	930, 931, 929, 932, 933, 934, 935, 0, 962, 0,
	963, 0, 0, 0, 1864, 1865, 0, 0, 1876, 0,
	0, 958, 959, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1905, 1884, 0, 0, 0, 0, 0, 0,
	0, 0, 2526, 2527, 0, 0, 0, 0, 0, 1881,
	0, 0, 0, 0, 0, 0, 1880, 0, 954, 0,
	0, 0, 0, 0, 953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 949,
	1898, 0, 0, 0, 1052, 0, 0, 0, 1042, 1886,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1900, 1913, 1912, 1074, 1078, 1080, 1082, 1084, 1085,
	1087, 0, 1092, 1088, 1089, 1090, 1091, 0, 1069, 1070,
	1071, 1072, 1050, 1051, 1075, 0, 1053, 0, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1065, 1067, 1063,
	1064, 1073, 0, 0, 0, 0, 0, 0, 0, 1077,
	1079, 1081, 1083, 1086, 0, 1873, 0, 952, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1867, 2678, 1866, 0, 2677, 0, 0, 0,
	0, 1888, 0, 0, 0, 0, 1076, 1068, 0, 0,
	0, 0, 1894, 0, 0, 0, 0, 1915, 0, 0,
	1914, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1882, 1916, 0, 0, 1883, 1885, 1887, 0,
	1889, 1890, 1891, 1895, 1896, 1897, 1899, 1902, 1903, 1904,
	0, 0, 682, 681, 688, 678, 0, 1892, 1901, 1893,
	0, 0, 0, 0, 685, 686, 1066, 687, 691, 1871,
	0, 672, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 696, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1908, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 911, 0, 912, 0, 1907, 0,
	0, 0, 0, 0, 0, 0, 0, 1864, 1865, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1905, 0, 0, 0, 0,
	0, 0, 892, 1909, 0, 0, 0, 0, 0, 0,
	0, 0, 1881, 0, 0, 0, 906, 0, 902, 1880,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1898, 3560, 0, 0, 1052, 0, 0,
	0, 0, 1886, 0, 1884, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1913, 1912, 1074, 1078, 1080,
	1082, 1084, 1085, 1087, 884, 1092, 1088, 1089, 1090, 1091,
	0, 1069, 1070, 1071, 1072, 1050, 1051, 1075, 0, 1053,
	0, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1065, 1067, 1063, 1064, 1073, 0, 0, 0, 0, 0,
	0, 0, 1077, 1079, 1081, 1083, 1086, 0, 1873, 0,
	0, 0, 1900, 0, 0, 0, 0, 0, 0, 673,
	675, 674, 0, 0, 0, 0, 1907, 0, 0, 680,
	0, 0, 0, 0, 0, 908, 0, 901, 0, 1076,
	1068, 684, 0, 0, 0, 0, 905, 904, 699, 0,
	1915, 0, 0, 1914, 0, 677, 0, 0, 0, 0,
	0, 1909, 0, 886, 0, 0, 0, 893, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 900, 0, 0,
	0, 0, 1888, 0, 0, 1907, 0, 0, 0, 0,
	0, 0, 0, 1894, 0, 0, 910, 0, 0, 0,
	0, 899, 1884, 0, 0, 898, 0, 0, 0, 0,
	0, 885, 0, 1882, 1916, 891, 0, 1883, 1885, 1887,
	1909, 1889, 1890, 1891, 1895, 1896, 1897, 1899, 1902, 1903,
	1904, 0, 0, 0, 0, 0, 0, 889, 1892, 1901,
	1893, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 679, 683, 689, 0, 690, 692,
	0, 0, 693, 694, 695, 0, 3531, 697, 698, 0,
	1900, 1884, 1908, 0, 909, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1905, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1881, 0, 0, 0, 0, 0, 1900,
	1880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1888, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1894, 0, 0, 1898, 0, 0, 0, 0, 0,
	0, 0, 0, 1886, 0, 0, 0, 907, 0, 0,
	0, 1882, 1916, 0, 0, 1883, 1885, 1887, 0, 1889,
	1890, 1891, 1895, 1896, 1897, 1899, 1902, 1903, 1904, 0,
	0, 0, 0, 0, 0, 0, 1892, 1901, 1893, 0,
	0, 0, 1076, 0, 0, 0, 896, 0, 0, 1888,
	0, 0, 0, 676, 0, 0, 0, 0, 0, 0,
	1894, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1908, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1882, 1916, 0, 0, 1883, 1885, 1887, 0, 1889, 1890,
	1891, 1895, 1896, 1897, 1899, 1902, 1903, 1904, 0, 0,
	0, 0, 0, 0, 0, 1892, 1901, 1893, 0, 0,
	0, 0, 0, 0, 1905, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1881, 0, 0, 0, 0, 0, 0, 1880, 1908,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1898, 0, 0, 0, 0, 0, 0, 0,
	0, 1886, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1905, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1881, 0, 0, 0, 0, 0, 0, 1880, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1898, 0, 0, 0, 0, 0, 0, 0, 0,
	1886,
}

var yyPact = [...]int{
	3769, -1000, -1000, -1000, -312, 13148, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 44341, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 379, 44341, -307, 27233, 42508, -1000, -1000, 2691,
	-1000, 43119, 15001, 44341, 460, 417, 44341, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 885, -1000, 46785,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 815, 412, 46174,
	10069, -230, -1000, 1309, -56, 2470, 390, 1047, 1057, 1072,
	1072, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 48038, 938, 43730, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 47345,
	724, 938, 19897, 92, 91, 1309, 445, -117, -116, -118,
	3697, -1000, 1201, 3801, 196, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10069, 10069, 13148, -345,
	13148, 10069, 44341, 44341, -1000, -1000, -1000, -1000, -307, 43119,
	815, 412, 10069, 2470, 390, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -116, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -117, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -118, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 91, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 47742, -1000, 1614, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2251, 2974, 1595, 2469, 733, 42508, 44341, -1000, 146, 733,
	-1000, -1000, -1000, 1309, 3392, -1000, 44341, 44341, 162, 1880,
	-1000, 405, 378, 386, 274, 1576, -1000, -1000, -1000, -1000,
	-1000, -1000, 589, 3333, -1000, 44341, 44341, 2990, 44341, -1000,
	2226, 639, -1000, 3884, 3173, 1417, 904, 3018, -1000, -1000,
	2972, -1000, 278, 305, 285, 424, 369, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 294, -1000, 3218, -1000, -1000, 258,
	-1000, -1000, 241, -1000, -1000, -1000, 76, -1000, -1000, -1000,
	-1000, -1000, -1000, -23, -1000, -1000, 1141, 2285, 10069, 2042,
	-1000, 3342, 1566, -1000, -1000, -1000, 5765, 11911, 11911, 11911,
	11911, 44341, -1000, -1000, 2785, 10069, 2971, 2970, 2963, 2962,
	-1000, -1000, -1000, -1000, -1000, -1000, 1570, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2005, -1000, -1000, -1000,
	12525, -1000, 2960, 2959, 2957, 2956, 2955, 2954, 2953, 2952,
	2950, 2946, 2945, 2944, 2943, 2930, 2644, 14380, 2922, 2464,
	2458, 2921, 2920, 2919, 2453, 2918, 2910, 2908, 2644, 2644,
	2906, 2896, 2895, 2894, 2893, 2885, 2884, 2882, 2881, 2880,
	2877, 2876, 2872, 2871, 2870, 2864, 2863, 2860, 2858, 2856,
	2854, 2849, 2848, 2847, 2846, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1398, -1000,
	2837, 3358, 2704, -1000, 3211, 3209, 3206, 3203, -277, 2836,
	2174, -1000, -1000, 102, 3332, 44341, -1000, -82, -1000, -1000,
	1020, -1000, 1000, -1000, 809, 44341, 44341, 190, 817, 809,
	809, 809, 809, 809, 865, 809, 3246, 876, 875, 873,
	870, 809, -67, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1878, 1876, 3060, 968, -1000, -1000, -1000, -1000, 1506, 44341,
	-1000, 2711, 1707, 1707, 3307, 3243, 652, 612, 603, 1707,
	525, -1000, 1872, 1872, 1872, 1872, 1707, 474, 773, 3249,
	3249, 81, 1872, 60, 1707, 1707, 60, 1707, 1707, -1000,
	1931, 201, -285, -1000, -1000, -1000, -1000, 1872, 1872, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3229, 3228, 815, 815,
	44341, 179, 44341, 815, 815, 815, 831, 7, 45563, 44952,
	2226, 631, 627, 1509, 1794, -1000, 1831, 44341, 44341, 1831,
	1831, 22956, 22345, -1000, 44341, -1000, 3358, 2704, 2640, 1854,
	2635, 2704, -128, -129, -130, 815, 815, 815, 815, 815,
	231, 815, 815, 815, 815, 815, 44341, 44341, 41897, 815,
	815, 815, 8221, 8221, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 13148, 2139, 2113, 195, -24, -301, 240,
	-1000, -1000, 44341, 3122, 222, -1000, -1000, -1000, 2656, -1000,
	2698, 2698, 2698, 2698, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2698, 2698, 2710, 2835, -1000, -1000, 2696,
	2696, 2696, 2656, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2702, 2702,
	2706, 2706, 2702, 44341, -144, -1000, -1000, 10069, 44341, 3151,
	443, 2834, 733, -1000, -1000, 44341, 106, 448, 3358, 3147,
	3249, 3296, -1000, -1000, 1565, 2168, 2451, -1000, 274, -1000,
	394, 274, 1701, -1000, 1157, -1000, -1000, -1000, -1000, -1000,
	44341, -23, 436, -1000, -1000, 2425, 2829, -1000, 601, 1211,
	1500, -1000, 207, 48029, 35176, 2226, 35176, 44341, -1000, -1000,
	-1000, -1000, -1000, -1000, 69, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 272,
	-1000, 10069, 10069, 10069, 10069, 10069, -1000, 777, 11297, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11911, 11911, 11911, 11911,
	11911, 11911, 11911, 11911, 11911, 11911, 11911, 11911, 2770, 1953,
	11911, 11911, 11911, 11911, 24789, 1854, 3095, 1507, 287, 1566,
	1566, 1566, 1566, 10069, -1000, 1912, 2285, 10069, 10069, 10069,
	10069, 44341, -1000, -1000, 4019, 10069, 10069, 494, 10069, 3196,
	10069, 10069, 10069, 2631, 4528, 44341, 10069, -1000, 2630, 2628,
	-1000, -1000, 2016, 10069, -1000, -1000, 10069, -1000, -1000, 10069,
	11911, 10069, -1000, 10069, 10069, 10069, -1000, -1000, 566, 3196,
	3196, 3196, 1817, 10069, 10069, 3196, 3196, 3196, 1800, 3196,
	3196, 3196, 3196, 3196, 3196, 3196, 3196, 3196, 3196, 2626,
	2625, 2619, 9455, 3249, -230, -1000, 7607, 3147, 3249, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -279,
	2811, 44341, 2435, 2429, -323, 1042, 446, 34, 1021, 1007,
	1017, -1000, 44341, 1929, 3192, -1000, 2810, 44341, 809, 809,
	809, -1000, 40064, 35176, 44341, 44341, 2226, 44341, 44341, 44341,
	809, 809, 809, 809, 44341, -1000, 3096, 35176, 3089, 831,
	-1000, 44341, 1506, 3190, 44341, 3307, 11911, 11911, -1000, -1000,
	10069, 41286, 1872, 1707, 1707, -1000, -1000, 44341, -1000, -1000,
	-1000, 1872, 44341, 1872, 1872, 3307, 1872, -1000, -1000, -1000,
	1707, 1707, -1000, -1000, 10069, -1000, -1000, 1872, 1872, -1000,
	-1000, 3307, 44341, 66, 3307, 3307, 73, -1000, -1000, -1000,
	1707, 44341, 44341, 809, 44341, -1000, 44341, 44341, -1000, -1000,
	44341, 44341, 47468, 40064, 40675, 3226, -1000, 35176, 44341, 44341,
	33343, -1000, 1419, -1000, 14, -1000, 28, 7, 1831, 7,
	1831, -1000, 575, 565, 21123, 512, 35176, 5142, -1000, -1000,
	1831, 1831, 5142, 5142, 1623, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1505, -1000, 242, 3249, -1000, -1000, -1000, -1000,
	-1000, 2166, 2164, 2162, 44341, 40064, 35176, 2226, 44341, 815,
	44341, 44341, 44341, 44341, 44341, -1000, 2794, 1561, -1000, 3164,
	44341, 44341, 44341, 1497, -1000, -1000, 18056, 1560, 1497, -1000,
	1917, -1000, 10069, 13148, -255, 10069, 13148, 13148, 10069, 13148,
	-1000, 10069, 218, -1000, -1000, -1000, -1000, 2156, -1000, 2149,
	-1000, -1000, -1000, -1000, -1000, 2428, 2428, -1000, 2148, -1000,
	-1000, -1000, -1000, 2146, -1000, -1000, 2141, -1000, -1000, -1000,
	-1000, -172, 2618, 1141, -1000, 2427, 3006, -231, -1000, 19286,
	44341, 44341, 443, -325, -1000, 1873, 1871, 1864, -1000, -231,
	-1000, 18671, 44341, 3249, -1000, -235, 3147, 10069, 44341, -1000,
	3242, -1000, -1000, 274, -1000, 451, 375, -1000, -1000, -1000,
	-1000, -1000, -1000, 1554, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 367, 1503, -1000, 44341, -1000, -1000,
	207, 35176, 37009, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	227, -1000, -1000, 182, -1000, 855, 186, 1674, -1000, -1000,
	181, 212, 165, 933, 2285, -1000, 1933, 1933, 1946, -1000,
	951, -1000, -1000, -1000, -1000, 2785, -1000, -1000, -1000, 1759,
	1783, -1000, 1729, 1729, 1564, 1564, 1564, 1564, 1564, 1910,
	1910, -1000, -1000, -1000, 5765, 2770, 11911, 11911, 11911, 11911,
	897, 897, 2317, 3747, -1000, -1000, -1000, -1000, 10069, 171,
	1894, -1000, 10069, 2802, 1522, 2795, 1589, 1553, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2616, 2615,
	2557, 3330, 2614, 10069, -1000, -1000, 1673, 1668, 1663, -1000,
	2157, 8841, -1000, -1000, -1000, 2611, 1552, 2609, -1000, -1000,
	-1000, 2607, 1640, 1193, 2606, 1596, 2601, 2600, 2599, 2593,
	1501, 10069, 10069, 10069, 10069, 2582, 1639, 1631, 10069, 10069,
	10069, 10069, 2581, 10069, 10069, 10069, 10069, 10069, 10069, 10069,
	10069, 10069, 10069, 115, 115, 115, 1489, 1482, -1000, -1000,
	1591, -1000, 2285, -1000, -1000, 3147, -1000, 2769, 2140, 1475,
	-1000, -1000, -304, 2386, 44341, 1036, 44341, -1000, -1000, 1027,
	993, 1012, 3241, 3160, 44341, 1090, 2768, 44341, 44341, 44341,
	213, -1000, -1000, 1198, -1000, 186, 192, 465, 1153, 2989,
	3327, -150, 44341, 44341, 44341, 44341, 3189, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 39453, -1000, 2766, 1571, -1000,
	-1000, 1566, 1566, 2285, 2988, 44341, 44341, 3307, 3307, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1872, 3307, 3307, 1669,
	1707, 1872, -1000, -1000, 1872, -330, -1000, 1872, -1000, -330,
	1548, -330, 44341, -1000, -1000, -1000, 3188, 2711, 1470, -1000,
	-1000, -1000, 3285, 1562, 803, 803, 1022, 479, 3284, 16834,
	-1000, 1716, 1019, 850, 3090, 289, -1000, 1716, -169, 765,
	1716, 1716, 1716, 1716, 1716, 1716, 1716, 584, 583, 1716,
	1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
	1055, 1716, 1716, 1716, 1716, 1716, -1000, 1716, 2765, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 610, 209, 3223, 325,
	-1000, 320, 1198, 3216, 362, 3317, 1312, -1000, -1000, -1000,
	-1000, 25400, 25400, 20512, 25400, -1000, 203, 7, -3, -1000,
	-1000, 1419, 5142, 1419, 5142, -1000, -1000, 848, -1000, -1000,
	1153, -1000, 44341, 44341, -1000, -1000, 2764, 1858, -1000, -1000,
	14380, -1000, 5142, 5142, -1000, -1000, 26622, 44341, -1000, -49,
	-1000, -6, 3147, -1000, -1000, -1000, 1388, -1000, -1000, 1418,
	1153, 2998, 44341, 1388, 1388, 1388, -1000, -1000, 16223, 44341,
	44341, -1000, -1000, -1000, 3307, 8221, -1000, 33343, -1000, -1000,
	38842, -1000, 38231, 3307, 1890, -1000, 13148, 2096, 189, -1000,
	234, -309, 188, 1991, 187, 2285, -1000, -1000, 2580, 2579,
	1568, -1000, 1557, 2578, 1539, 1537, 2138, -1000, 44, -1000,
	3127, 1163, -1000, 2753, -1000, 1527, 3062, -1000, 1382, -1000,
	1852, 1525, -1000, -1000, -1000, 10069, 37620, 10069, 1163, 1516,
	3061, 1382, 3147, 2421, -1000, 1380, -1000, 2205, 1535, 152,
	-1000, -1000, -1000, 44341, 815, 2425, 1511, 37009, 1254, -1000,
	847, 1533, 1532, -1000, 35176, 269, 35176, -1000, 35176, -1000,
	-1000, 376, -1000, 44341, 3141, -1000, -1000, -1000, 2386, 1850,
	-329, 44341, -1000, -1000, -1000, -1000, -1000, 1493, -1000, 897,
	897, 2317, 3529, -1000, 11911, -1000, 11911, 3064, -1000, 1888,
	-1000, 10069, 2068, 47459, 10069, 47459, 1758, 24178, 44341, -1000,
	-1000, 10069, 10069, -1000, 3058, -1000, -1000, -1000, -1000, 10069,
	10069, 2466, -1000, 44341, -1000, -1000, -1000, -1000, 24178, -1000,
	11911, -1000, -1000, -1000, -1000, 10069, 1321, 1321, 3004, 1483,
	115, 115, 115, 2983, 2979, 2968, 1468, 115, 2936, 2911,
	2898, 2886, 2873, 2861, 2838, 2814, 2758, 2732, -1000, 2728,
	-1000, -1000, 2007, 10683, 7607, -1000, -1000, 277, 1375, 2137,
	2420, 135, -1000, 1845, -1000, 44341, 1076, -1000, -1000, -1000,
	989, 387, -1000, 236, 2573, 1366, -1000, -1000, 44341, -1000,
	-1000, -1000, 16223, 2711, 2727, 2711, 110, 1716, 613, 35176,
	598, -1000, 44341, 44341, 2053, 1841, 2997, 414, 3121, 44341,
	2726, 371, 2720, 2717, 3186, 439, 48025, 44341, 1343, -1000,
	1530, 3801, -1000, 44341, -1000, 2226, -1000, 1707, -1000, -1000,
	3307, -1000, -1000, 10069, 10069, 3307, 1707, 1707, -1000, 1026,
	1872, -1000, 44341, -1000, -1000, 439, 48025, 3185, 47751, 536,
	2642, -1000, 44341, -1000, -1000, -1000, 853, -1000, 982, 809,
	44341, 1972, 982, 1969, 2716, -1000, -1000, 44341, 44341, 44341,
	44341, -1000, -1000, 44341, -1000, 44341, 44341, 44341, 44341, 44341,
	36398, -1000, 44341, 44341, -1000, 44341, 1965, 44341, 1963, 3163,
	-1000, 1716, 1716, 936, -1000, -1000, 604, -1000, 36398, 2132,
	2131, 2129, 2124, 2419, 2417, 2413, 1716, 1716, 2121, 2412,
	35787, 2410, 1137, 2104, 2103, 2102, 2135, 2407, 851, -1000,
	2406, 2118, 2114, 2106, 44341, 2712, 2299, -1000, -1000, 110,
	1716, 317, 44341, 1840, 613, 463, -54, 21734, 44341, 33343,
	33343, 33343, 33343, -1000, 3041, 3040, -1000, 3034, 3031, 3050,
	44341, 33343, 2711, -1000, 35787, -1000, -1000, -1000, 1854, 1451,
	3244, 986, 10069, -1000, -1000, -1, 16, -1000, -1000, -1000,
	35176, 2398, 512, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3239, 44341, 44341, 678, 2571, 1359, -1000, -1000, -1000, 48025,
	2698, 2698, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2698, 2698, 2710, -1000, -1000, 2696, 2696, 2696, 2656,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2702, 2702, 2706, 2706, 2702, -1000, -1000, 3304, -1000, 1349,
	-1000, -1000, 1521, -1000, 3304, 1921, -313, 13148, 1908, 1709,
	-1000, 10069, 13148, 10069, -257, 306, -259, -1000, -1000, -1000,
	2397, -1000, -1000, -1000, 2100, -1000, 2098, -1000, 127, 148,
	1957, -231, 7607, 433, 44341, -231, 44341, 7607, -1000, 44341,
	167, -339, -341, 163, 419, -231, 3239, 44, 10069, 3099,
	-1000, -1000, 44341, 2093, -1000, -1000, -1000, 3326, 35176, 2226,
	1657, 34565, -1000, 257, -1000, 223, 551, 2391, -1000, 869,
	134, 2390, 2386, -1000, -1000, -1000, -1000, 11911, 1566, -1000,
	-1000, -1000, 2285, 10069, 2564, -1000, 997, 997, 2378, 2561,
	2556, -1000, 2698, 2698, -1000, 2656, 2696, 2656, 997, 997,
	2555, -1000, 2194, 2721, -1000, 2639, 2562, 10069, -1000, 2554,
	3493, 1391, -83, -200, 115, 115, -1000, -1000, -1000, -1000,
	115, 115, 115, 115, -1000, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 755, -113, -290, -115, -293,
	-1000, 2542, 1332, -1000, -1000, -1000, -1000, -1000, 494, 1306,
	472, 472, 2386, 2385, 846, 1024, 44341, -1000, -1000, -1000,
	44341, 2384, 2381, 1090, 48025, 2539, 3184, 15612, 3180, 2181,
	-1000, -1000, -1000, 26011, 514, -1000, -1000, -1000, 683, 266,
	2085, 503, -1000, 44341, 362, 362, 3059, 1828, 2379, 44341,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3121, -1000, 945,
	408, 32121, 13769, -1000, 388, 44341, -1000, 15612, 15612, 388,
	432, 1814, -1000, 733, 1245, 144, 33343, 44341, -1000, 32732,
	2537, -1000, 1153, 3307, -1000, 2285, 2285, -330, 3307, 3307,
	1821, 1707, -1000, 432, -1000, 388, -1000, 1025, 17445, 504,
	490, 484, -1000, 625, -1000, -1000, 696, 3108, 48025, -1000,
	44341, -1000, 44341, -1000, 44341, 44341, 809, 10069, 3108, 44341,
	837, -1000, -1000, 1099, 411, 389, 739, 739, 1274, -1000,
	3145, -1000, -1000, 1261, -1000, -1000, -1000, -1000, 44341, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 24178, 24178, 3215, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2364, 2363, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 44341, 1445, -1000, 1812, 2181, 26011, 1795,
	1831, 2362, 514, 2053, 1793, 2119, 44341, -1000, 1164, 44341,
	44341, -1000, 1328, -1000, 1792, 2985, 2996, 2985, -1000, -1000,
	-1000, -1000, 3030, -1000, 3015, -1000, -1000, 1328, -1000, -1000,
	-1000, -1000, -1000, 986, -1000, 3237, 982, 982, 982, 2530,
	-1000, -1000, -1000, 1254, 2529, -1000, -1000, -1000, 3351, -1000,
	-1000, -1000, -1000, -1000, -1000, 16223, 3119, 3301, 3283, 33954,
	3301, -1000, -313, 1863, -1000, 2030, 183, 1860, 44341, -1000,
	-1000, -1000, 2527, 2524, -238, 155, 3282, 3281, 1061, -1000,
	2521, 1203, -231, -1000, -1000, 1163, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -231, -1000, 1163, -1000, 127, -1000, -1000,
	3113, -1000, -1000, 2226, -1000, 221, -1000, -1000, -1000, -1000,
	-1000, -1000, 174, -1000, 44341, -1000, 1195, 133, -1000, 2285,
	-1000, -1000, -1000, -1000, -1000, 47459, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10069, -1000, -1000,
	-1000, 2523, -1000, -1000, 10069, 2517, 2349, 2515, 2336, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3358, -1000, 3278, 1435, 2512,
	2510, 1426, 2509, 2507, -1000, 10069, 2499, 494, 950, 2328,
	950, -1000, -1000, 361, 44341, 3321, -1000, -1000, -1000, -1000,
	-1000, 888, 388, 2497, 1191, -1000, -1000, -1000, -1000, 388,
	-1000, 2327, 185, -1000, -1000, -1000, -1000, 2321, 2302, 2060,
	-1000, -1000, 2092, 1512, 205, -1000, -1000, -1000, -1000, -1000,
	-1000, 2119, 2119, 2036, 1791, -333, -1000, 2694, -1000, 1716,
	1716, 1716, 44341, 1409, -1000, 1716, 1716, 2492, -1000, -1000,
	2488, 2487, -154, 787, 1722, 1696, -1000, 2059, 25400, 33343,
	32732, 1324, -1000, 1520, -1000, -1000, -1000, -1000, -1000, -1000,
	2300, 3307, 787, -1000, 495, 2052, 11911, 2687, 11911, 2685,
	519, 2680, 1406, -1000, 44341, -1000, -1000, 44341, 308, 2679,
	-1000, 2678, 2913, 471, 2674, 2672, 44341, 2505, -1000, 3108,
	44341, 700, 3115, -1000, -1000, -1000, 364, -1000, -1000, 528,
	-1000, 44341, -1000, 44341, -1000, 1531, -1000, 24178, -1000, -1000,
	1402, -1000, 2299, 2296, -1000, 185, 2294, 5142, -1000, -1000,
	3059, 2291, -1000, 2289, -1000, 44341, 1164, 1164, 3358, 44341,
	7607, -1000, -1000, 10069, 2671, -1000, 10069, -1000, -1000, -1000,
	-1000, -1000, 2666, 3125, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1340, -1000, 10069, 10069, -1000, -1000, 806, 13148, -265,
	293, -1000, -1000, -1000, -241, 2288, -1000, -1000, 3271, 2287,
	2222, 44341, -1000, -1000, 1163, 1163, -238, -1000, -1000, 1153,
	-1000, -1000, 1065, 588, -1000, 2482, 2473, -1000, 2437, 115,
	-1000, 115, -1000, 243, 10069, -1000, 2282, -1000, -1000, -1000,
	2281, -1000, -1000, 2414, -1000, 2481, -1000, 2279, -1000, -1000,
	44341, 835, 1023, 48025, -163, -154, 15612, -163, -1000, -1000,
	360, -1000, -1000, 337, -1000, -1000, 2086, 570, -1000, -1000,
	-1000, -1000, 1787, 1992, 2256, 30288, 24178, 24789, 2278, -1000,
	-1000, 32121, 1340, 1340, 4072, 272, 48329, -1000, 2665, 1063,
	1694, -1000, 2048, -1000, 2040, -1000, 3307, 1324, 141, -1000,
	-1000, 1643, -342, -1000, 1063, 2642, 3270, -1000, 3214, 44341,
	2718, 44341, 2663, 1772, 11911, -1000, 696, 3052, -1000, -1000,
	308, -1000, -1000, 1980, 11911, -1000, -1000, 2276, 24789, 928,
	1771, 1767, 828, 2661, -1000, 550, 3350, -1000, -1000, -1000,
	934, 2659, -1000, 1956, 1952, -1000, 44341, -1000, 30288, 30288,
	732, 732, 30288, 30288, 2657, 739, -1000, -1000, 11911, -1000,
	-1000, 1716, -1000, -1000, -1000, 1716, 1529, -1000, -1000, -1000,
	-1000, -1000, -1000, 2036, -1000, -1000, -1000, 3249, -1000, -1000,
	2285, 44341, 2285, 31510, -1000, 3267, 3265, -1000, 2285, 1141,
	-1000, -313, 44341, 44341, -243, 2037, -1000, 2275, 151, -1000,
	-1000, 1150, -241, -245, 73, 24178, 1766, -1000, -1000, -1000,
	-1000, -1000, 2478, -1000, 656, -1000, -1000, -1000, 1141, 2477,
	2476, -1000, -1000, -1000, -1000, 357, 44341, -140, -1000, -1000,
	383, -1000, -1000, -1000, 559, 2187, -1000, -1000, 309, -1000,
	-1000, 2272, -1000, -1000, 131, -1000, 1721, 1393, -1000, 2656,
	10069, -1000, -1000, -1000, -1000, -1000, -1000, 691, -1000, 388,
	48260, -1000, 1019, -1000, 1065, 691, 29066, 641, 292, -1000,
	2033, -1000, -1000, 3358, -1000, -1000, 596, -1000, 515, -1000,
	1387, -1000, 1381, 30899, 2032, 1879, -1000, 48092, 849, -1000,
	-1000, 2317, -1000, -1000, -1000, -1000, -1000, -1000, 2271, 2267,
	-1000, -1000, -1000, -1000, -1000, 2025, 2655, -2, 3202, 2266,
	-1000, -1000, 2653, 1377, 1376, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1368, 1367, 30288, -1000, -1000, 2317,
	2024, 24178, 1716, -1000, -1000, 1363, 1356, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2650, -1000, -1000, 3263, -243, -247,
	2258, 122, 138, -1000, 2257, -1000, -1000, 576, -233, 112,
	111, 103, -1000, -1000, -1000, 10069, -1000, -1000, 44341, 833,
	44341, 547, -1000, -1000, -1000, -1000, 173, -1000, -1000, -1000,
	-1000, -1000, 2256, 2253, -1000, 30288, 3145, 2220, 489, 3262,
	-1000, 48329, -1000, 1716, -1000, 489, 1339, -1000, 1716, 1716,
	-1000, 420, -1000, 1680, -1000, 2023, -1000, 3249, -1000, 413,
	-1000, 501, -1000, -1000, -1000, 1330, -1000, -1000, -1000, 48092,
	508, -1000, 659, 2647, -1000, -1000, 2430, 10069, 2644, 1716,
	2111, -133, 30288, 2900, 2875, 2840, 2816, 1291, -1000, -1000,
	24178, -1000, -1000, 29677, 44341, 2222, -1000, -1000, 2252, -1000,
	821, 130, 138, -1000, 3261, 145, 3260, 3257, 1110, 1935,
	-1000, 108, 101, 98, -1000, -1000, -1000, -1000, -1000, 352,
	530, -1000, 251, -1000, -1000, -1000, 286, -1000, -1000, 3145,
	-1000, 3255, 536, -1000, 24178, -1000, -1000, 29066, 1340, 1340,
	-1000, -1000, 2019, -1000, -1000, -1000, -1000, 2018, -1000, -1000,
	-1000, 1267, -1000, 44341, 844, 6993, -1000, 2216, -1000, 44341,
	-1000, 2995, -1000, 239, 1238, 286, 732, 286, 732, 286,
	732, 286, 732, 249, -1000, -1000, -1000, 1215, -1000, -1000,
	-1000, 2643, 2015, 155, 132, 3251, -1000, 2222, 3247, 2222,
	2222, -1000, 113, 576, -1000, -1000, -1000, 44341, 2246, -1000,
	-1000, -1000, -1000, 1716, 1716, 2235, 2234, 398, -1000, -1000,
	-1000, 28455, 504, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	508, 48329, -1000, 6993, 1213, -1000, 2285, -1000, 739, -1000,
	-1000, 2994, 2980, 3325, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 44341, 3199, 23567, 139, -1000, -1000,
	-1000, 2224, -1000, 2222, -1000, -1000, 1689, -1000, -1000, -287,
	2013, 2011, -1000, -1000, 44341, -1000, 44341, 495, -1000, 48329,
	1166, -1000, 6993, -1000, -1000, 3349, -1000, 3347, 1008, 1008,
	286, 286, 286, 286, -1000, -1000, 44341, -1000, 1154, -1000,
	-1000, -1000, 1513, -1000, -1000, -1000, -1000, 2207, -1000, -1000,
	2197, -1000, -1000, -1000, 1145, 2642, -1000, -1000, -1000, -1000,
	-1000, 2050, 554, -1000, 1075, -1000, 1686, -1000, 27844, 44341,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 44341, 6379, -1000,
	1158, -1000, -1000, 2285, 44341, -1000,
}

var yyPgo = [...]int{
	0, 172, 3374, 265, 180, 3975, 87, 267, 303, 271,
	263, 3974, 3971, 3967, 3965, 3142, 3135, 3959, 3958, 3957,
	3956, 3955, 3954, 3953, 3952, 3951, 3950, 3949, 3948, 3947,
	3946, 3945, 3944, 3943, 3942, 3941, 3940, 3939, 3933, 3930,
	3927, 3925, 3924, 3923, 3922, 3921, 3920, 262, 3919, 3918,
	3917, 3915, 3914, 3911, 3908, 3907, 3906, 3905, 3904, 3903,
	3902, 3901, 3896, 3881, 3880, 3879, 3876, 3875, 3874, 3869,
	3868, 3867, 3866, 3865, 3864, 3861, 3859, 3858, 3857, 256,
	3856, 3854, 255, 3853, 3134, 3852, 3850, 3849, 3848, 3844,
	3840, 3837, 251, 3836, 3835, 3834, 3831, 3829, 3828, 3827,
	3826, 3824, 3822, 3821, 235, 3818, 3808, 3806, 3805, 264,
	3804, 206, 3803, 175, 154, 3802, 3799, 3798, 3797, 3796,
	3795, 3794, 240, 192, 75, 3793, 48, 3792, 3790, 219,
	3789, 156, 3788, 152, 3787, 3786, 3781, 3780, 3776, 3775,
	3774, 3773, 3772, 3770, 3766, 3765, 3764, 3763, 3762, 3761,
	3760, 3758, 98, 3756, 260, 3754, 76, 3753, 177, 132,
	3751, 70, 146, 254, 1520, 252, 243, 189, 182, 102,
	3750, 329, 3749, 179, 231, 157, 31, 3744, 140, 3743,
	270, 45, 50, 247, 144, 55, 174, 127, 3741, 221,
	113, 112, 3738, 3736, 145, 3729, 236, 183, 3727, 107,
	3726, 3725, 3723, 3722, 3721, 214, 191, 3720, 3718, 136,
	3717, 3716, 72, 134, 3715, 82, 151, 178, 129, 3714,
	568, 117, 125, 128, 101, 3713, 81, 3712, 3711, 3710,
	3709, 185, 3708, 3705, 138, 68, 3704, 3703, 3701, 73,
	3698, 84, 3692, 36, 3690, 59, 3686, 3684, 3683, 3682,
	3681, 3680, 3679, 3678, 3665, 3664, 3662, 3659, 53, 3658,
	3656, 9, 11, 17, 3652, 33, 3649, 188, 3648, 3646,
	3645, 3643, 3629, 96, 91, 3627, 92, 167, 3626, 7,
	29, 74, 3623, 3622, 222, 1177, 106, 158, 3621, 320,
	3618, 3616, 3615, 161, 3614, 1602, 3613, 3612, 3611, 3609,
	3608, 3607, 121, 3606, 215, 43, 3605, 137, 142, 3604,
	41, 47, 122, 207, 139, 100, 3602, 3600, 3599, 536,
	205, 109, 38, 0, 3597, 3596, 163, 3594, 3589, 3587,
	246, 3586, 233, 228, 168, 433, 257, 253, 3583, 3580,
	71, 135, 3579, 165, 25, 61, 141, 80, 23, 220,
	3578, 14, 8, 200, 3577, 208, 3574, 382, 19, 123,
	155, 3572, 3571, 34, 266, 3570, 3569, 3568, 130, 3565,
	3563, 226, 78, 3562, 3561, 3560, 3559, 37, 3557, 40,
	16, 3556, 111, 3555, 245, 3554, 261, 153, 186, 184,
	162, 224, 232, 77, 85, 3551, 1783, 159, 103, 13,
	3550, 229, 3549, 171, 119, 3544, 86, 3543, 241, 258,
	202, 3542, 187, 12, 49, 39, 30, 46, 10, 250,
	195, 3541, 3540, 22, 58, 3538, 52, 3537, 21, 3536,
	3535, 3534, 79, 5, 3533, 3531, 18, 20, 3530, 35,
	225, 169, 126, 97, 65, 3529, 3528, 51, 238, 3525,
	148, 164, 160, 3524, 83, 3523, 3522, 3519, 3517, 872,
	3516, 249, 3515, 3514, 3513, 3512, 3507, 3506, 3505, 3503,
	227, 3502, 105, 44, 3501, 3500, 3499, 3498, 90, 150,
	3497, 3496, 3495, 3494, 27, 143, 3493, 15, 3491, 26,
	24, 32, 3477, 104, 3473, 3, 190, 3471, 3469, 4,
	3468, 3466, 1, 2, 3464, 3462, 131, 3461, 94, 28,
	170, 116, 3457, 3451, 95, 218, 149, 3449, 3448, 99,
	242, 198, 3447, 60, 234, 259, 3446, 209, 3445, 3444,
	3443, 3442, 3440, 3439, 1152, 3438, 3437, 239, 69, 93,
	3434, 223, 115, 3433, 3432, 89, 166, 124, 118, 66,
	88, 3431, 114, 196, 3430, 197, 3429, 3428, 3427, 108,
	3426, 3425, 3421, 3419, 193, 3417, 3412, 194, 230, 3409,
	3406, 319, 3404, 3402, 3395, 3394, 3393, 3390, 3383, 3381,
	3376, 3372, 248, 520, 3370,
}

//line mysql_sql.y:12115
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 577, 580, 580, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 119, 119, 314, 314, 315,
	315, 149, 556, 556, 120, 120, 120, 120, 120, 120,
	120, 118, 562, 562, 562, 563, 563, 115, 138, 137,
	140, 140, 139, 139, 136, 136, 132, 135, 135, 134,
	134, 133, 128, 130, 130, 129, 131, 131, 116, 104,
	117, 505, 505, 504, 504, 503, 503, 455, 455, 456,
	456, 502, 502, 502, 501, 501, 501, 500, 500, 499,
	499, 498, 498, 496, 496, 497, 495, 494, 494, 494,
	492, 492, 492, 488, 488, 490, 489, 489, 491, 483,
	483, 486, 486, 484, 484, 484, 484, 487, 482, 482,
	482, 481, 481, 103, 103, 103, 398, 398, 102, 102,
	412, 412, 412, 412, 412, 410, 410, 410, 410, 410,
	410, 409, 409, 408, 408, 413, 413, 411, 411, 411,
	411, 411, 411, 411, 411, 411, 411, 411, 411, 411,
	411, 411, 411, 411, 411, 411, 411, 411, 411, 411,
	411, 411, 411, 411, 411, 411, 411, 411, 411, 411,
	411, 411, 411, 411, 411, 411, 411, 411, 411, 411,
	411, 411, 411, 411, 411, 411, 411, 411, 93, 93,
	93, 93, 93, 98, 98, 98, 568, 568, 567, 567,
	569, 569, 569, 569, 570, 570, 96, 96, 96, 97,
	407, 407, 407, 94, 95, 95, 397, 397, 402, 402,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 406, 406, 406, 404, 404, 403, 403,
	405, 405, 87, 87, 87, 90, 89, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 88, 88, 88, 88,
	88, 88, 83, 83, 83, 83, 83, 82, 82, 84,
	84, 394, 394, 393, 99, 99, 100, 565, 565, 564,
	566, 566, 566, 566, 101, 107, 107, 107, 107, 107,
	107, 107, 107, 106, 106, 109, 109, 108, 110, 92,
	92, 92, 92, 92, 92, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 530, 530,
	530, 532, 532, 328, 329, 581, 331, 327, 327, 327,
	526, 526, 527, 528, 529, 529, 529, 105, 14, 195,
	195, 430, 430, 11, 11, 11, 11, 11, 11, 11,
	11, 13, 81, 86, 86, 266, 266, 271, 271, 272,
	272, 272, 277, 277, 278, 278, 267, 267, 267, 267,
	267, 267, 267, 267, 267, 267, 267, 267, 267, 267,
	267, 267, 267, 267, 267, 267, 267, 267, 253, 253,
	253, 248, 248, 248, 248, 249, 249, 250, 250, 251,
	251, 251, 251, 252, 252, 320, 320, 273, 273, 273,
	275, 275, 274, 270, 268, 268, 268, 268, 268, 268,
	268, 269, 269, 269, 269, 276, 276, 79, 85, 85,
	85, 544, 544, 80, 555, 555, 459, 459, 343, 343,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 464, 465, 338, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 54, 57, 58, 53, 53, 53, 383, 383, 52,
	582, 582, 313, 313, 67, 66, 56, 68, 69, 70,
	71, 72, 73, 51, 65, 65, 65, 65, 65, 65,
	65, 65, 76, 477, 477, 584, 584, 584, 74, 75,
	458, 458, 458, 64, 63, 62, 61, 60, 60, 50,
	50, 49, 49, 55, 144, 59, 145, 145, 335, 335,
	335, 337, 337, 333, 341, 341, 583, 583, 426, 426,
	336, 336, 48, 48, 48, 48, 77, 334, 334, 312,
	332, 332, 332, 12, 12, 10, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 26, 27, 29, 391, 391, 388, 28, 20, 19,
	19, 23, 22, 18, 18, 21, 24, 25, 25, 9,
	9, 9, 9, 15, 15, 16, 168, 168, 221, 221,
	538, 538, 534, 534, 535, 535, 535, 536, 536, 537,
	537, 111, 471, 471, 471, 471, 471, 471, 8, 8,
	190, 190, 470, 470, 470, 470, 470, 470, 395, 395,
	395, 515, 515, 515, 516, 189, 189, 184, 184, 472,
	472, 360, 517, 517, 480, 480, 479, 479, 478, 478,
	187, 187, 188, 188, 171, 171, 123, 123, 485, 485,
	485, 485, 493, 493, 454, 454, 258, 258, 305, 305,
	306, 306, 161, 161, 162, 162, 162, 162, 162, 162,
	571, 571, 572, 573, 574, 574, 575, 575, 575, 576,
	576, 576, 576, 576, 523, 523, 525, 525, 524, 186,
	186, 182, 182, 183, 183, 183, 181, 181, 180, 179,
	179, 178, 176, 176, 176, 177, 177, 177, 194, 194,
	164, 164, 164, 163, 163, 163, 163, 163, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	165, 165, 531, 531, 531, 460, 460, 460, 467, 467,
	286, 286, 287, 287, 285, 285, 166, 166, 167, 167,
	167, 167, 284, 284, 283, 169, 169, 175, 174, 174,
	170, 170, 170, 170, 294, 294, 293, 293, 293, 293,
	114, 121, 121, 122, 193, 193, 292, 291, 291, 291,
	192, 192, 191, 191, 185, 185, 173, 173, 173, 173,
	290, 172, 288, 561, 561, 560, 560, 559, 557, 557,
	557, 558, 558, 558, 558, 507, 507, 507, 507, 507,
	321, 321, 321, 326, 326, 324, 324, 324, 324, 324,
	330, 7, 7, 7, 7, 7, 7, 7, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 39, 204, 205, 40, 206, 206, 207, 207, 208,
	208, 209, 210, 211, 211, 211, 211, 38, 196, 196,
	197, 197, 198, 198, 199, 200, 200, 200, 203, 201,
	202, 202, 579, 579, 578, 37, 37, 30, 153, 153,
	154, 154, 154, 156, 156, 254, 254, 254, 155, 155,
	157, 157, 157, 539, 541, 541, 543, 542, 542, 542,
	545, 545, 545, 545, 545, 546, 546, 546, 546, 547,
	547, 31, 141, 141, 146, 550, 550, 550, 549, 549,
	551, 551, 552, 552, 309, 309, 310, 310, 151, 152,
	152, 148, 143, 159, 159, 159, 159, 159, 160, 160,
	142, 147, 150, 540, 548, 548, 548, 392, 392, 389,
	390, 390, 387, 386, 386, 386, 554, 554, 553, 553,
	553, 322, 322, 32, 382, 382, 384, 385, 385, 385,
	376, 376, 376, 376, 36, 380, 380, 381, 381, 381,
	381, 381, 381, 381, 377, 377, 379, 379, 375, 375,
	375, 375, 375, 375, 375, 35, 158, 158, 374, 374,
	371, 371, 369, 369, 370, 370, 368, 368, 368, 372,
	372, 43, 78, 44, 45, 46, 42, 373, 373, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 125,
	124, 124, 124, 124, 124, 127, 127, 308, 308, 307,
	307, 126, 255, 255, 41, 233, 233, 446, 446, 441,
	441, 441, 441, 441, 462, 462, 462, 442, 442, 442,
	443, 443, 443, 445, 445, 445, 444, 444, 444, 444,
	444, 461, 461, 463, 463, 463, 414, 414, 415, 415,
	415, 418, 418, 433, 433, 434, 434, 432, 432, 439,
	439, 438, 438, 437, 437, 436, 436, 435, 435, 435,
	435, 429, 429, 428, 428, 416, 416, 416, 416, 416,
	417, 417, 417, 427, 427, 431, 431, 282, 282, 281,
	281, 241, 241, 242, 242, 280, 280, 239, 239, 240,
	240, 240, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 513, 513, 514,
	244, 244, 256, 256, 256, 256, 256, 256, 243, 243,
	245, 245, 222, 222, 220, 220, 212, 212, 212, 212,
	212, 212, 213, 213, 214, 214, 215, 215, 215, 219,
	219, 218, 218, 218, 218, 216, 216, 217, 217, 217,
	217, 217, 217, 400, 400, 510, 510, 511, 511, 506,
	506, 506, 509, 509, 509, 509, 509, 509, 509, 512,
	512, 512, 508, 508, 223, 303, 303, 303, 323, 323,
	323, 323, 325, 302, 302, 302, 238, 238, 237, 237,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 399, 399, 339, 339, 340, 340, 265, 264,
	264, 264, 264, 264, 262, 263, 261, 261, 261, 261,
	261, 260, 260, 259, 259, 259, 378, 378, 257, 257,
	247, 247, 247, 246, 246, 246, 440, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	349, 349, 349, 349, 349, 349, 349, 349, 349, 349,
	349, 349, 349, 349, 349, 349, 349, 349, 349, 349,
	349, 349, 349, 349, 349, 349, 300, 300, 300, 301,
	301, 301, 301, 301, 301, 301, 301, 350, 350, 356,
	356, 522, 522, 521, 224, 224, 224, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 234, 234, 234, 423,
	423, 423, 423, 424, 424, 424, 424, 425, 425, 425,
	421, 421, 422, 422, 361, 362, 362, 468, 468, 469,
	469, 419, 419, 420, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 476, 476, 476, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 533, 533, 533, 518, 518,
	518, 519, 519, 519, 519, 519, 519, 519, 519, 519,
	519, 519, 519, 520, 520, 520, 520, 520, 520, 520,
	520, 520, 520, 520, 520, 520, 520, 520, 520, 520,
	298, 298, 298, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 363, 363, 364, 364, 473, 473, 473, 473, 473,
	473, 474, 474, 475, 475, 475, 475, 466, 466, 466,
	466, 466, 466, 466, 466, 466, 466, 466, 466, 466,
	466, 466, 466, 466, 466, 466, 466, 466, 466, 466,
	466, 466, 466, 466, 466, 466, 348, 295, 295, 295,
	365, 357, 357, 358, 358, 359, 359, 351, 351, 351,
	351, 351, 351, 352, 352, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 353, 353, 355,
	355, 367, 367, 367, 366, 366, 366, 366, 366, 366,
	366, 236, 236, 236, 236, 345, 345, 345, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	226, 226, 226, 226, 230, 230, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	231, 231, 231, 231, 231, 229, 229, 229, 229, 229,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 112, 113,
	113, 228, 304, 304, 447, 447, 450, 450, 448, 448,
	449, 451, 451, 451, 452, 452, 452, 453, 453, 453,
	457, 457, 311, 311, 311, 319, 319, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 8, 8, 0, 2, 0,
	2, 6, 1, 2, 5, 6, 8, 10, 9, 11,
	13, 4, 0, 1, 1, 0, 1, 5, 2, 2,
	6, 9, 6, 9, 4, 7, 8, 0, 1, 1,
	2, 4, 6, 1, 2, 4, 0, 2, 10, 11,
	2, 0, 2, 1, 3, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 3,
	0, 3, 3, 0, 1, 3, 0, 1, 3, 0,
	2, 1, 2, 3, 4, 3, 3, 1, 0, 1,
	1, 0, 1, 8, 5, 7, 0, 3, 8, 5,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 1, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 4, 1, 3, 3, 1,
	2, 2, 2, 1, 2, 2, 3, 4, 4, 6,
	1, 1, 1, 2, 4, 6, 1, 4, 1, 3,
	3, 4, 4, 4, 4, 3, 3, 2, 4, 4,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 2, 2, 0, 1, 4,
	2, 4, 1, 5, 3, 2, 1, 2, 2, 4,
	4, 5, 2, 1, 3, 4, 4, 1, 2, 9,
	7, 1, 3, 3, 1, 1, 3, 1, 3, 2,
	1, 2, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 2, 4, 3, 3, 1,
	1, 1, 1, 1, 1, 2, 3, 4, 7, 2,
	3, 3, 4, 5, 3, 4, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 1, 1, 1, 1, 6, 4, 1,
	1, 0, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 10, 7, 4, 4, 1, 3, 1, 6, 3,
	3, 3, 1, 1, 1, 3, 2, 4, 5, 5,
	6, 5, 5, 3, 2, 2, 1, 3, 4, 3,
	7, 5, 8, 2, 2, 1, 3, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 0, 1, 2,
	1, 3, 2, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 6, 3, 3, 1, 1, 7, 7, 8,
	8, 0, 4, 7, 0, 3, 0, 2, 0, 1,
	1, 1, 1, 4, 2, 2, 3, 3, 4, 5,
	3, 4, 4, 2, 2, 2, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 3, 2, 5, 5, 0, 2, 7,
	0, 1, 0, 1, 5, 5, 3, 3, 2, 4,
	4, 4, 4, 4, 1, 1, 1, 3, 3, 1,
	1, 1, 6, 0, 1, 1, 1, 1, 5, 5,
	0, 1, 1, 3, 3, 3, 4, 7, 7, 5,
	4, 7, 8, 3, 3, 2, 3, 4, 0, 2,
	2, 0, 2, 2, 0, 5, 1, 1, 1, 1,
	0, 1, 5, 5, 5, 4, 3, 1, 3, 1,
	1, 3, 5, 2, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 4, 4, 1, 3, 1, 4, 6, 6,
	4, 4, 4, 4, 4, 3, 6, 3, 5, 1,
	1, 2, 2, 11, 8, 9, 1, 3, 2, 4,
	0, 2, 0, 1, 1, 1, 1, 0, 1, 0,
	1, 4, 2, 1, 5, 4, 4, 2, 5, 5,
	1, 3, 2, 1, 5, 4, 4, 2, 0, 5,
	4, 0, 1, 3, 3, 1, 3, 1, 3, 1,
	3, 4, 0, 1, 0, 1, 1, 3, 1, 1,
	0, 4, 1, 3, 2, 1, 0, 8, 0, 4,
	7, 4, 0, 2, 0, 2, 0, 2, 0, 4,
	1, 3, 1, 1, 6, 4, 5, 7, 4, 5,
	0, 1, 3, 8, 0, 6, 0, 4, 6, 1,
	1, 1, 1, 1, 2, 3, 1, 3, 6, 0,
	3, 0, 1, 2, 4, 4, 0, 1, 3, 1,
	3, 3, 0, 1, 1, 0, 2, 2, 0, 2,
	3, 3, 3, 1, 3, 3, 3, 3, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	7, 7, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 2, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 3, 1, 1, 1,
	4, 4, 4, 3, 2, 2, 2, 3, 2, 3,
	4, 1, 3, 4, 0, 2, 1, 1, 2, 2,
	0, 1, 2, 4, 1, 3, 1, 3, 2, 3,
	1, 4, 3, 0, 1, 1, 2, 5, 2, 2,
	2, 0, 2, 3, 3, 0, 1, 3, 1, 3,
	0, 1, 2, 1, 1, 0, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 1, 7, 1, 3, 0, 1, 1,
	3, 1, 3, 0, 1, 1, 1, 14, 1, 3,
	0, 1, 1, 3, 1, 1, 2, 4, 1, 1,
	1, 1, 0, 1, 2, 9, 9, 7, 1, 2,
	3, 3, 3, 0, 4, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 4, 1, 1, 1,
	3, 3, 4, 3, 3, 0, 1, 1, 1, 0,
	2, 7, 8, 8, 8, 0, 3, 3, 0, 3,
	0, 3, 0, 5, 1, 3, 0, 3, 3, 0,
	2, 9, 7, 0, 2, 2, 3, 3, 0, 2,
	4, 4, 4, 1, 0, 2, 2, 1, 3, 2,
	1, 3, 2, 1, 3, 2, 0, 1, 3, 4,
	3, 1, 1, 4, 1, 3, 1, 1, 1, 1,
	0, 1, 1, 1, 11, 0, 2, 3, 3, 2,
	2, 3, 1, 1, 1, 3, 3, 4, 0, 2,
	2, 2, 2, 2, 2, 6, 0, 4, 1, 1,
	0, 3, 0, 1, 1, 2, 4, 4, 4, 0,
	1, 8, 2, 4, 4, 4, 9, 0, 2, 11,
	9, 11, 8, 6, 9, 7, 10, 7, 6, 2,
	2, 9, 4, 5, 3, 0, 4, 1, 3, 0,
	3, 6, 0, 2, 10, 0, 2, 0, 2, 0,
	3, 2, 4, 3, 0, 2, 1, 0, 2, 3,
	0, 2, 3, 0, 2, 1, 0, 3, 2, 4,
	3, 0, 1, 0, 1, 1, 0, 6, 0, 3,
	5, 0, 4, 0, 3, 1, 3, 4, 5, 0,
	3, 1, 3, 2, 3, 1, 2, 0, 4, 6,
	5, 0, 2, 0, 2, 4, 5, 4, 5, 1,
	5, 6, 5, 0, 3, 0, 1, 1, 3, 3,
	3, 0, 4, 1, 3, 3, 3, 0, 1, 1,
	3, 2, 3, 3, 3, 4, 4, 3, 3, 3,
	3, 4, 4, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 5, 4, 1, 3, 3,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 4, 0, 2, 5, 5,
	5, 5, 0, 1, 1, 3, 1, 1, 1, 1,
	1, 7, 9, 7, 9, 2, 1, 7, 9, 7,
	9, 8, 5, 0, 1, 0, 1, 1, 1, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 3, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 2,
	1, 2, 2, 1, 1, 2, 2, 2, 3, 3,
	2, 2, 1, 5, 6, 4, 1, 1, 1, 5,
	4, 1, 1, 2, 0, 1, 1, 2, 5, 0,
	1, 1, 2, 2, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 2, 2, 2, 0, 3, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 3, 5, 2, 2, 2, 2, 4,
	1, 1, 2, 5, 6, 8, 6, 6, 6, 1,
	1, 1, 1, 1, 1, 3, 4, 4, 4, 7,
	9, 7, 7, 7, 9, 7, 7, 0, 2, 0,
	1, 1, 2, 4, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 2, 2, 2, 0, 1, 1, 1,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 5, 0, 1, 3, 0, 1, 0, 2, 0,
	2, 0, 1, 6, 8, 8, 6, 6, 5, 5,
	5, 6, 6, 6, 6, 5, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 1, 1, 1, 4,
	4, 6, 8, 6, 4, 5, 4, 4, 4, 3,
	4, 6, 6, 7, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 8, 4, 2, 3, 2, 4, 2, 2,
	4, 6, 2, 2, 4, 6, 4, 2, 4, 4,
	4, 0, 1, 2, 3, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	3, 0, 1, 1, 3, 1, 3, 3, 3, 3,
	3, 2, 1, 1, 1, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 1, 3, 4, 4, 5,
	4, 5, 3, 4, 5, 6, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 2,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 4, 4, 1, 2, 3,
	5, 1, 1, 3, 0, 1, 0, 3, 0, 3,
	3, 0, 3, 5, 0, 3, 5, 0, 1, 1,
	0, 1, 1, 2, 2, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}

var yyChk = [...]int{
	-1000, -577, -580, -2, -5, 621, -1, -4, -113, -87,
	-7, -14, -115, -116, -8, -111, -9, -10, -12, -91,
	-106, -108, -110, -109, -47, -11, -105, -82, -83, -93,
	-99, -102, -103, -104, -117, -112, -114, -161, -118, -119,
	-120, 611, -88, -89, -90, -33, -32, -31, -30, -141,
	-146, -149, 544, 617, 447, 14, 496, -15, -16, -523,
	-17, 259, -327, -328, -329, -331, -581, -48, -49, -50,
	-60, -61, -62, -63, -64, -74, -75, -76, -51, -52,
	-53, -56, -54, -67, -66, -68, -69, -70, -71, -72,
	-73, -55, -59, -144, -145, -77, -57, -78, -58, -80,
	-79, -85, -81, -86, -143, -148, -13, 234, -84, 76,
	-94, -95, -96, -97, -98, -100, -101, 371, 377, 434,
	610, 61, -162, -164, 628, 629, 632, 159, 160, 162,
	163, -34, -35, -36, -37, -38, -39, -41, -40, -42,
	-43, -44, -45, -46, 230, 16, 539, -18, -21, -19,
	-22, -20, -28, -29, -27, -24, -26, -142, -25, -147,
	-23, -150, 254, 253, 38, 320, 321, 322, 375, 252,
	231, 15, 31, 42, 351, -163, 82, 531, 532, 534,
	232, -165, 13, 634, -6, -3, -2, -128, -132, -136,
	-139, -140, -137, -138, -4, -113, 117, 244, 612, -323,
	367, 613, 615, 614, 85, 93, -316, -318, 447, 259,
	371, 377, 610, 629, 632, 546, 547, 548, 549, 550,
	551, 552, 553, 555, 556, 557, 558, 559, 560, 561,
	571, 572, 562, 563, 564, 565, 566, 567, 568, 569,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 499, 596, 597, 598, 599, 527,
	554, 590, 591, 592, 593, 349, 350, 536, 271, 295,
	402, 301, 308, 159, 178, 172, 200, 192, 532, 167,
	275, 313, 276, 92, 162, 482, 107, 459, 431, 165,
	290, 292, 294, 528, 529, 361, 297, 526, 296, 298,
	300, 530, 277, 352, 188, 183, 289, 273, 181, 278,
	40, 279, 205, 280, 281, 541, 455, 348, 461, 305,
	52, 429, 182, 456, 293, 458, 209, 213, 473, 474,
	176, 177, 463, 476, 204, 207, 208, 251, 345, 346,
	43, 538, 263, 477, 211, 203, 199, 485, 309, 307,
	202, 175, 198, 274, 65, 215, 214, 216, 425, 426,
	427, 428, 282, 283, 365, 472, 195, 184, 353, 168,
	23, 480, 258, 460, 378, 284, 302, 310, 210, 212,
	265, 270, 540, 531, 433, 269, 306, 478, 180, 262,
	291, 257, 481, 169, 534, 380, 285, 163, 299, 475,
	484, 64, 393, 174, 166, 248, 160, 267, 272, 286,
	287, 288, 525, 312, 311, 303, 533, 196, 264, 201,
	186, 173, 197, 161, 266, 483, 394, 608, 351, 412,
	194, 191, 268, 241, 479, 462, 164, 416, 395, 189,
	314, 603, 604, 605, 366, 344, 315, 316, 187, 255,
	453, 454, 319, 422, 335, 396, 432, 403, 397, 222,
	223, 323, 465, 467, 206, 606, 324, 325, 326, 457,
	327, 328, 329, 330, 370, 56, 58, 94, 97, 96,
	630, 631, 63, 29, 356, 359, 391, 398, 337, 609,
	537, 334, 338, 339, 360, 25, 414, 382, 418, 417,
	48, 49, 50, 53, 54, 55, 57, 59, 60, 51,
	524, 375, 388, 486, 45, 47, 385, 27, 362, 413,
	435, 333, 415, 446, 46, 444, 445, 466, 26, 364,
	363, 62, 44, 421, 423, 424, 317, 331, 373, 618,
	487, 368, 384, 387, 369, 336, 358, 389, 67, 66,
	381, 619, 376, 374, 332, 542, 543, 340, 570, 354,
	430, 521, 520, 519, 518, 517, 516, 515, 514, 320,
	321, 322, 399, 400, 401, 411, 404, 405, 406, 407,
	408, 409, 410, 449, 450, 620, 468, 470, 471, 469,
	236, 633, 355, 239, 622, 623, 95, 624, 626, 625,
	28, 627, -405, -403, -323, 532, 610, 377, 531, 534,
	371, 351, 629, 632, 375, 259, 320, 321, 322, 447,
	349, -206, -323, 633, -171, 243, 39, -220, -323, -171,
	-84, -16, -15, -163, -164, -220, 238, -332, 24, 429,
	-92, 430, 234, 82, 77, -323, -9, -104, -8, -111,
	-82, -161, 434, -330, -323, 320, 320, -330, 238, -325,
	269, 410, -323, -459, 244, -409, -382, 270, -408, -384,
	-411, -385, 32, 230, 232, 231, 544, 266, 16, 375,
	240, 14, 13, 376, 252, 25, 26, 28, 15, 377,
	379, 29, 380, 383, 384, 385, 42, 388, 389, 259,
	85, 93, 88, 277, -205, -323, -359, -351, 114, -354,
	-346, -347, -349, -502, -496, -344, 82, 141, 142, 149,
	115, 635, -348, -440, 36, 117, 550, 554, 590, 497,
	-296, -297, -298, -299, -300, -301, -323, -497, -495, 88,
	98, 100, 104, 105, 103, 101, 153, 185, 102, 89,
	154, -164, 85, -518, 560, -317, 583, 596, 597, 598,
	599, 582, 61, -466, -475, 237, -473, 152, 190, 255,
	186, 14, 147, 422, 187, 591, 592, 593, 557, 579,
	499, 561, 571, 586, 552, 553, 555, 547, 548, 549,
	551, 562, 564, 578, -476, 574, 584, 585, 570, 594,
	595, 587, 588, 589, 626, 87, 86, 577, 576, 563,
	558, 559, 565, 546, 556, 566, 567, 575, 580, 581,
	359, 107, 360, 361, 489, 352, 362, 244, 429, 70,
	363, 364, 365, 366, 367, 496, 368, 71, 369, 358,
	259, 412, 370, 189, 206, 501, 500, 502, 493, 490,
	488, 491, 492, 494, 495, 568, 569, 573, -121, -122,
	601, -571, -289, -572, 6, 7, 8, 9, -573, 154,
	-562, 431, 540, 88, 313, 349, 164, 161, -396, 164,
	113, 169, 168, -396, 166, 323, 265, -373, -153, 349,
	412, 327, 94, 269, -376, -374, 528, -461, 317, 313,
	289, 239, 110, -154, 249, 248, 108, 489, 237, 386,
	308, 56, 58, -534, -535, 227, 228, 229, -525, 522,
	-524, -323, 361, 96, 97, 27, 238, 372, 265, 467,
	465, 466, 468, 469, 470, 471, -65, -477, -458, 462,
	461, -336, 454, 460, 452, 464, 455, 350, 329, 544,
	328, 230, 622, 529, 523, -311, 396, 432, 486, 487,
	373, 433, 473, 475, 456, 107, 193, 190, 239, 241,
	238, 349, 489, 412, 94, 327, -534, 161, 473, 475,
	269, 410, 41, -402, 422, -401, -403, 474, 485, 86,
	87, 472, -311, 107, 453, 453, -571, -289, -162, -164,
	-114, -523, 530, 530, 530, 239, 349, 412, 269, 240,
	238, 525, 528, 241, 489, 237, 320, 372, 265, 327,
	94, 166, -460, -531, 32, -467, 224, 225, 226, 33,
	34, -1, 121, 634, -351, -351, -6, 637, -6, -351,
	-323, -323, 156, -226, -230, -227, -229, -228, -232, -231,
	190, 191, 152, 194, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 207, 208, 205, 31, 206, 255, 186,
	187, 188, 189, 209, 172, 192, 537, 217, 173, 218,
	174, 219, 175, 220, 176, 177, 221, 178, 181, 182,
	183, 184, 180, 155, -195, 88, 32, 82, 155, 88,
	-187, 261, -171, -220, -212, 155, 635, -187, -571, -180,
	-181, 11, -220, -302, -323, 431, 124, -92, 77, -92,
	430, 77, -526, -527, -528, -530, 234, 430, 429, -109,
	155, 277, 17, -330, -330, 80, -220, -384, 269, -409,
	-382, 36, 79, 156, 242, 156, 79, 82, 373, 349,
	412, 374, 489, 238, 386, 241, 269, 387, 349, 412,
	238, 241, 489, 269, 349, 238, 241, 412, 269, 387,
	349, 452, 453, 241, 27, 378, 381, 382, 453, -481,
	485, 156, 113, 110, 111, 112, -351, 131, -366, 124,
	125, 126, 127, 128, 129, 130, 138, 137, 148, 141,
	142, 143, 144, 145, 146, 147, 139, 140, 134, 114,
	132, 136, 133, 116, 151, -164, -351, -359, 61, -349,
	-349, -349, -349, -323, -440, -356, -351, 82, 82, 82,
	82, 155, 101, 88, -351, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, -474, 82, 82,
	-363, -364, 82, 82, -344, -302, 82, 88, 88, 82,
	82, 82, 88, 82, 82, 82, -364, -364, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, -181, 156, -180, 82, -180, -181, -165,
	-164, 32, 33, 32, 33, 32, 33, 32, 33, -574,
	619, 82, 98, 630, 222, 17, -323, 478, 539, 167,
	168, 169, -371, 244, -204, -323, -206, 372, 241, 525,
	241, -154, -371, -371, -371, -371, -371, 240, -371, 24,
	238, 238, 238, 238, -371, 496, 124, 124, 59, -536,
	171, 156, -525, -186, 82, -335, 132, 136, -335, -285,
	18, 24, 267, 267, 267, -335, 307, -582, -583, 17,
	134, -333, -583, -333, -333, -335, -584, 240, 463, 43,
	268, 267, -182, -183, 22, -182, 457, 453, -426, 458,
	459, -337, -583, -336, -335, -335, -336, -335, -335, -335,
	32, 238, 241, 489, 327, 623, -582, -582, 31, 31,
	-459, -459, -220, -459, 523, -312, -323, -459, -459, -459,
	-537, 243, -568, -567, 476, -570, 478, 161, -403, 161,
	-403, -384, 269, 269, 156, 124, 24, -404, 124, 135,
	-403, -403, -404, -404, -243, 41, -322, 152, -323, 88,
	-243, 41, -565, -564, -220, -181, -165, -164, 83, 83,
	83, 533, 533, 533, -459, -459, -459, -459, -459, -461,
	-459, -459, -459, -459, -459, -330, -196, -323, -206, 244,
	-459, -459, -459, -166, -167, 143, -351, -323, -166, -3,
	-130, -129, 118, 119, 121, 613, 367, 612, 616, 610,
	-403, 41, -453, 394, 393, -447, -449, 82, -448, 82,
	-448, -448, -448, -448, -448, 82, 82, -450, 82, -450,
	-450, -447, -451, 82, -451, -452, 82, -452, -451, -323,
	-430, 539, -357, -359, -323, 39, -470, 61, -161, 82,
	31, 82, -187, -323, 636, 187, 166, 627, -471, 61,
	-161, 82, 31, -181, -123, 39, -183, 21, 155, 98,
	88, -109, -92, 77, -109, 83, 156, -529, 104, 105,
	-532, 204, 196, -323, -107, 88, -7, -8, -9, -10,
	-47, -82, -79, -161, 231, -498, -496, 82, 32, 421,
	79, 17, -410, 238, 489, 372, 265, 241, 349, -408,
	-391, -388, -386, -322, -384, -387, -386, -413, -302, 453,
	-124, 436, 435, 319, -351, -351, -351, -351, -351, 103,
	114, 344, 104, 105, -346, -367, 32, 315, 316, -347,
	-347, -347, -347, -347, -347, -347, -347, -347, -347, -347,
	-347, -355, -365, -440, 82, 134, 132, 136, 133, 116,
	-349, -349, -347, -347, -245, -322, 152, 83, 156, -351,
	-522, -521, 118, -351, -351, -351, -351, -323, -519, -520,
	503, 504, 505, 506, 507, 508, 509, 510, 511, 512,
	513, 363, 358, 364, 362, 352, 370, 365, 366, 189,
	520, 521, 514, 515, 516, 517, 518, 519, -357, -357,
	-351, -519, -357, -295, 33, 32, -359, -359, -359, 83,
	-351, -533, 342, 341, 343, -184, -323, -357, 83, 83,
	83, 98, -359, -359, -357, -347, -357, -357, -357, -357,
	-520, -295, -295, -295, -295, 143, -359, -359, -295, -295,
	-295, -295, 143, -295, -295, -295, -295, -295, -295, -295,
	-295, -295, -295, 83, 83, 83, 143, -359, -182, -122,
	-479, -478, -351, 41, -123, -183, -575, 620, 82, -302,
	-563, 88, 88, 635, 166, 17, 489, 479, 480, 165,
	168, 167, -323, 114, 35, 82, -196, -371, -371, -371,
	-541, -323, 89, -392, -389, -386, -323, -323, -382, -323,
	-312, -220, -371, -371, -371, -371, -220, -254, 53, 54,
	55, -386, -155, 56, 57, -537, -524, 35, -185, -323,
	-285, -349, -349, -351, -386, 269, -582, -335, -335, -313,
	-312, -337, -332, -337, -337, -285, -333, -335, -335, -351,
	-337, -333, -285, -323, 453, -285, -285, -426, -335, -334,
	-323, -334, -371, -312, -313, -313, -220, -220, -266, -271,
	-267, -272, 261, 235, 356, 357, 233, 231, 11, 232,
	-279, 308, -372, 497, -249, -250, 77, 42, -252, 259,
	398, 391, 271, 275, 92, 276, 431, 277, 240, 279,
	280, 281, 296, 298, 251, 282, 283, 284, 422, 285,
	160, 297, 286, 287, 288, 374, -244, 6, 330, 41,
	51, 52, 445, 444, 542, 539, 272, -541, -539, 31,
	-323, 31, -392, -323, -323, -174, -169, -173, -170, -175,
	-288, -290, -172, 82, -220, -164, -323, 156, 477, 479,
	480, -568, -404, -568, -404, 32, 421, -407, 421, 32,
	-382, -401, 473, 475, -397, 88, 422, -387, -406, 79,
	152, -478, -404, -404, -406, -406, 151, 156, -566, 478,
	479, 227, -182, 98, 98, 98, -222, -220, -541, -391,
	-382, -323, -459, -222, -222, -222, -323, -323, 82, 155,
	36, -323, -323, -323, -284, 156, -283, 17, -324, -323,
	35, 88, 155, -284, -131, -129, 120, -351, -6, 612,
	-351, -6, -6, -351, -6, -351, -457, 395, 98, 98,
	-304, 88, -304, 98, 98, 98, 545, 83, 88, -395,
	79, -472, -360, -517, 601, -189, 83, -184, -515, -516,
	-184, -188, -323, -470, -212, 124, 124, 124, -472, -189,
	83, -515, -182, 602, -123, -179, -178, -351, -323, 24,
	-109, -92, -527, 155, 349, 156, -185, -410, -390, -387,
	-412, 143, -323, -398, 156, 539, 638, 86, 242, -554,
	-553, 413, 83, 156, -482, 243, 496, 88, 635, 429,
	222, 223, 103, 344, 104, 105, -440, -359, -355, -349,
	-349, -347, -347, -353, 256, -353, 113, -351, 636, -350,
	-521, 120, -351, 35, 156, 35, 156, 80, 155, 83,
	83, 17, 17, 83, -351, 83, 83, 83, 83, 17,
	17, -351, 83, 155, 83, 83, 83, 83, 80, 83,
	156, 83, 83, 83, 83, 156, -359, -359, -351, -359,
	83, 83, 83, -351, -351, -351, -359, 83, -351, -351,
	-351, -351, -351, -351, -351, -351, -351, -351, -420, 448,
	-420, -420, 156, 156, 156, 83, -123, 82, 98, 156,
	631, -308, -307, 88, -323, 166, -323, 166, 169, 169,
	168, 24, 36, -205, -207, -208, -209, -210, -211, 134,
	157, 158, 82, -220, -220, -220, -543, 399, -555, 156,
	41, -553, 489, 238, -151, 319, -375, 80, -158, 17,
	539, -220, -220, -220, -220, -233, 35, 17, -168, -221,
	-323, 82, 83, 156, -383, 80, -323, -313, -285, -285,
	-337, -285, -285, 156, 23, -335, -337, -337, -341, 635,
	-333, -341, 155, -341, -312, -446, 35, -186, 156, 21,
	261, -219, -320, -216, -218, 246, -340, -217, 249, -511,
	247, 245, 108, 250, 304, 109, 240, -320, -320, 246,
	-253, 242, 35, -320, -269, 240, 347, 304, 247, 21,
	261, -268, 240, 109, -323, 246, 250, 247, 245, -319,
	124, -311, 151, 242, 43, 374, -319, 543, 261, -319,
	-319, -319, -319, -319, -319, -319, 278, 278, -319, -319,
	-319, -319, -319, -319, -319, -319, -319, -319, -319, 161,
	-319, -319, -319, -319, -319, -319, 82, 273, 274, -544,
	399, 31, 355, 355, -555, 31, -159, 349, 31, -291,
	-292, -293, -294, 68, 72, 74, 69, 70, 71, 75,
	31, 156, -321, -326, 35, -323, 88, -321, -164, -169,
	-174, -321, 82, -567, -569, 481, 478, 484, -406, -406,
	242, 82, 124, -406, -406, 41, -322, -564, 485, 479,
	-123, 156, 79, -222, -197, -198, -199, -200, -226, -302,
	191, 194, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 207, 208, 205, 206, 255, 186, 187, 188, 189,
	209, 172, 192, 537, 173, 174, 175, 176, 177, 178,
	181, 182, 183, 184, 180, -323, -206, -285, -167, -169,
	-323, 88, -323, 143, -285, 121, -6, 119, -135, -134,
	-133, 122, 610, 616, 121, 121, 121, 83, 83, 83,
	156, 83, 83, 83, 156, 83, 156, 98, -485, 458,
	40, 156, 82, 83, 156, 61, 156, 124, 83, 156,
	-351, -323, 88, -351, 83, 61, -123, 88, 156, -176,
	37, 38, 155, 431, -323, -496, 83, -412, 156, 242,
	155, 155, -388, 377, -322, -390, 21, 539, -302, 39,
	-308, 124, 635, -323, 83, -353, -353, 113, -349, -346,
	83, 121, -351, 119, -224, -226, 393, 394, -351, -224,
	-225, -231, 152, 190, 255, 189, 188, 186, 393, 394,
	-243, -323, -351, -351, 83, -351, -351, 17, -323, -243,
	-347, -351, -181, -181, 83, 83, -419, -420, -419, -419,
	83, 83, 83, 83, -419, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 82, 98, 100, 98, 100,
	-478, -576, 63, 618, 62, 421, 103, 309, 156, 98,
	88, 636, 156, 124, -323, 17, 238, 169, -556, 313,
	349, 385, 83, 156, -302, -197, -186, 82, -186, -546,
	460, 401, 411, -319, -343, -342, 351, 42, -464, 422,
	407, 408, -389, 269, -323, -323, -552, 95, 124, 79,
	334, 338, 339, 335, 336, 337, -369, -370, -368, -372,
	-539, 82, 82, -161, 35, 132, -158, 82, 82, 35,
	-441, 324, -226, -220, -168, -323, 17, 156, -538, 155,
	-1, -323, -382, -335, -285, -351, -351, -285, -335, -335,
	166, -337, -323, -441, -226, 35, -267, 235, 232, -416,
	306, 307, -417, -431, 309, -433, 82, -223, -302, -217,
	-510, -511, -371, -323, 109, -510, 109, 82, -223, -302,
	-302, -270, -334, -302, -323, -323, -323, -323, -275, -274,
	-302, -277, 32, -278, -323, -323, -323, -323, 109, -323,
	109, -248, 41, 48, 49, 50, -319, -319, 193, -251,
	41, 421, 423, 424, -277, 98, 98, 98, 98, 88,
	88, 88, -319, -319, 98, 88, -326, 88, -512, 168,
	45, 46, 98, 98, 98, 98, 41, 88, -256, 41,
	289, 293, 290, 291, 292, 88, 98, 41, 98, 41,
	98, 41, -323, 82, -513, -514, 88, -546, -319, 355,
	-403, 124, -343, -551, 319, -160, 489, 32, -190, 235,
	232, -539, -394, -393, -302, -173, -173, -173, -173, 68,
	68, 68, 73, 68, 73, 68, -293, -394, -175, -186,
	-326, 83, -561, -560, -559, -557, 76, 243, 77, -357,
	478, 482, 483, -390, -338, 88, -397, -194, 24, -220,
	-220, -463, 299, 300, 83, 156, -226, -287, 19, 155,
	-287, 117, -6, -131, -133, -351, -6, -351, 612, 367,
	613, 88, 98, 98, -493, 442, 437, 439, 109, -360,
	-480, -479, 61, -161, -184, -472, -516, -478, -323, 636,
	636, 636, 636, 61, -161, -472, -194, -485, -178, -177,
	44, -323, 98, 17, -387, -382, 143, 143, -323, 378,
	-398, 88, 400, 88, 238, 636, 88, -308, -346, -351,
	83, -234, 177, 176, -234, 35, 83, 83, -448, -448,
	-447, -450, -447, -234, -234, 83, 83, 24, 83, 83,
	83, -351, 83, 83, 156, -468, 498, -469, 572, -419,
	-419, -419, -419, -419, -419, -419, -419, -419, -419, -419,
	-419, -419, -419, -419, -419, -362, -361, 261, 443, 625,
	625, 443, 625, 625, 83, 156, -519, 156, -314, 314,
	-314, -307, 88, 242, 166, -323, -323, 88, 88, -209,
	-226, 83, 35, -213, -214, -215, -223, -216, -218, 35,
	-547, 92, -542, 88, -323, 89, -548, 92, 402, 154,
	353, 41, 403, 404, 419, 348, 98, 98, 409, -540,
	-323, -159, -159, -550, 52, 124, 88, -220, -368, -311,
	151, 280, 327, -282, -281, -323, 88, -213, -161, -220,
	-213, -213, -161, -442, 326, 21, 98, 142, -187, 80,
	155, -169, -221, -323, 143, 83, -285, -341, -285, -285,
	124, -335, -442, -161, -428, 310, 82, -426, 82, -426,
	109, 335, -434, -432, 261, -273, 45, 47, -226, -508,
	-323, -506, -508, -323, -506, -506, -371, -351, -273, -223,
	242, 31, 232, -276, 332, 333, 338, -399, 305, 114,
	-399, 156, -176, 156, -323, -243, -243, 31, 88, 88,
	-222, 83, 156, 124, -547, -542, 124, -404, 88, -548,
	-552, 124, -152, 92, -312, 156, -190, -190, -285, 156,
	124, -192, -191, 79, 80, -193, 79, -191, 68, 68,
	-285, -559, -558, 24, -511, -511, -511, 83, 83, 15,
	-199, 41, -286, 20, 21, 143, -286, 121, 119, 121,
	121, -323, 83, 83, -454, 603, -489, -491, 437, 21,
	21, 15, 243, 83, -472, -472, -493, 45, 46, -382,
	-398, 422, -220, 156, 636, -224, -351, 83, -351, 83,
	88, 83, 88, -181, 21, 83, 156, 83, 83, 83,
	156, 83, 83, -351, 83, -519, -315, 187, 88, -315,
	349, -323, 17, 236, -161, 83, 156, -161, 88, -545,
	413, 88, 88, 98, 41, 98, 154, 405, -465, -152,
	-152, -549, 92, 124, 635, 82, -319, -319, -319, -323,
	83, 156, -319, -319, 83, 83, 83, -241, 539, -443,
	260, 98, 142, 98, 142, 98, -321, -169, -323, -285,
	-538, 155, 88, -285, -443, -418, 311, 98, -347, 82,
	-347, 82, -427, 308, 82, 83, 156, -323, -302, -238,
	-237, -235, 103, 114, 41, 391, -236, 92, 151, 294,
	297, 296, 272, 295, -265, -339, 79, 397, 332, 333,
	-372, 603, 527, 245, 108, 109, 379, -340, 82, 82,
	80, 314, 82, 82, -508, 83, -273, -302, 41, -276,
	41, 345, 305, -274, -323, 151, -243, 83, -514, 88,
	-545, 88, -406, -550, 88, 88, -539, -181, -393, -478,
	-351, 82, -351, 82, 68, 11, 19, -344, -351, -359,
	244, -6, 613, 367, -258, 604, 88, 21, 88, -487,
	88, -394, -454, -126, -255, -311, 277, 83, 83, 83,
	-419, -419, -422, -421, -425, 443, 306, 451, -359, 88,
	88, 83, 83, 88, -323, 242, 166, -201, -226, -156,
	539, -241, -215, -156, 21, 539, 352, 41, 98, 41,
	406, 124, 104, 105, -309, -310, 88, -377, -379, -302,
	82, -243, -245, 88, -281, -344, -344, -239, -161, 35,
	-240, -279, -372, -125, -124, -239, 82, -444, 160, 98,
	142, 98, 98, -285, -285, 636, -444, -433, 21, 83,
	-413, 83, -413, 82, 124, -347, -432, -435, 61, -235,
	103, -347, 88, -245, -246, 41, 293, 289, 124, 124,
	-247, 41, 273, 274, -257, 82, 304, 15, 193, 82,
	109, 109, -220, -377, -377, -509, 334, 335, 336, 340,
	338, 339, 337, -509, -377, -377, 82, -400, -399, -347,
	-319, -319, 151, -549, -182, -185, -507, -323, 245, 21,
	21, -323, -323, -305, 605, 98, 88, 439, -258, -455,
	606, -483, -426, -243, 124, 83, -424, 116, 405, 409,
	-345, -348, 98, 100, 185, 154, 83, 83, 349, -323,
	538, -157, 60, 485, 88, 89, 400, 88, 89, 352,
	88, 636, 156, 124, 83, 156, -447, -351, -414, 261,
	-161, 156, -279, -311, -126, -414, -242, -280, -323, 88,
	-462, 168, 325, 539, 98, 142, 98, -181, -445, 168,
	325, -417, 83, 83, 83, -413, 98, 83, -439, -436,
	82, -279, 263, 134, 88, 88, 98, 82, -473, 31,
	88, -378, 82, 83, 83, 83, 83, -377, 98, -243,
	-319, 83, 83, 156, 82, 21, -305, -456, 607, 88,
	-492, 442, -486, -484, 437, 438, 439, 440, 88, -423,
	-424, 409, -345, -348, 601, 449, 449, 449, -323, 242,
	-203, -323, 304, 422, -310, 88, -380, -379, -176, 83,
	-415, 313, 21, -279, -319, -415, 83, 156, -319, -319,
	325, 98, 142, 98, -182, 325, -429, 312, 83, -439,
	-279, -438, -437, 311, 264, 82, 83, -351, -363, -319,
	83, -260, -259, 535, -377, -380, 80, -380, 80, -380,
	80, -380, 80, 83, -243, -323, 245, -306, -323, -487,
	88, -494, 243, -490, -491, 441, -484, 21, 439, 21,
	21, -127, 156, 113, 450, 450, 450, 349, -202, 35,
	444, 378, -381, 251, 345, 346, 92, 539, 332, 333,
	-176, 21, -416, -243, -280, -344, -344, 98, 98, 83,
	156, -323, 260, 82, -358, -352, -351, 260, 83, -323,
	-264, -262, -263, 79, 456, 302, 303, 83, -509, -509,
	-509, -509, -265, 83, 156, -501, 82, 98, -489, -488,
	-490, 21, -487, 21, -487, -487, 446, -423, -323, 88,
	-319, -319, 88, 88, 331, -302, 82, -428, -437, -436,
	-358, 83, 156, -399, -263, 79, -262, 79, 16, 15,
	-380, -380, -380, -380, -323, -505, 31, 83, -500, -499,
	-303, -495, -323, 442, 443, 88, -487, 124, -579, -578,
	624, 98, 98, -323, -413, -418, 83, -352, -261, 299,
	300, 31, 168, -261, -504, -503, -502, 83, 156, 155,
	88, 88, 83, -433, 103, 41, 301, 156, 124, -499,
	-323, -503, 41, -351, 155, -323,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 0, 282, 283, 284, 891, 892, 893, 894, 895,
	896, 897, 0, 0, 0, 0, 0, 649, 650, 0,
	615, 0, 0, 0, 0, 0, 0, 499, 500, 501,
	502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 530, 383,
	384, 385, 386, 387, 388, 389, 390, 0, 307, 303,
	228, 229, 230, 231, 232, 314, 315, 476, 0, 0,
	0, 0, 732, -2, 72, 0, 0, 296, 0, 287,
	287, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, -2, 662, 0, 616, 617, 618,
	619, 620, 621, 622, 623, 624, 625, 626, 627, 628,
	629, 630, 367, 368, 369, 363, 364, 366, 365, -2,
	0, 662, 0, 0, 0, 740, 0, 0, 0, 0,
	0, 783, 805, 23, 0, 7, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 18, 0, 0, 19, 0,
	19, 0, 0, 0, 1308, 1309, 1310, 1311, 2091, 2061,
	-2, 1833, 1810, 1985, 1986, 2121, 2122, 2123, 2124, 2125,
	2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135,
	2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145,
	2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155,
	2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165,
	2166, 2167, 2168, 2169, 2170, 1767, 1768, 1769, 1770, 1771,
	1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,
	1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1811, 1812,
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832,
	1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843,
	1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873,
	1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883,
	1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893,
	1894, 1895, 1896, 1897, 1898, 1900, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
	1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
	1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
	1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
	1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
	1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964,
	1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974,
	1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
	1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
	1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
	2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
	2017, -2, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026,
	2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036,
	2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,
	2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
	2057, 2058, 2059, 2060, 2062, 2063, 2064, 2065, 2066, 2067,
	2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, -2,
	-2, -2, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087,
	2088, 2089, 2090, 2092, 2093, 2094, 2095, 2096, 2097, 2098,
	2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
	2109, 2110, 0, 280, 278, 1780, 1810, 1833, 1887, 1898,
	1899, 1933, 1985, 1986, 2018, 2061, 2077, 2078, 2079, 2091,
	0, 0, 915, 0, 710, 0, 0, 715, 1256, 710,
	308, 651, 652, 740, 766, 613, 0, 345, 0, 1824,
	349, 2068, 0, 0, 0, 610, 339, 340, 341, 342,
	343, 344, 0, 0, 890, 0, 0, 335, 0, 302,
	1889, 2090, 1312, 0, 0, 0, 0, 0, 171, 1034,
	173, 1036, 177, 185, 0, 0, 0, 190, 191, 194,
	195, 196, 197, 198, 0, 202, 0, 204, 207, 0,
	209, 210, 0, 213, 214, 215, 0, 225, 226, 227,
	1037, 1038, 1039, -2, 100, 913, 1738, 1625, 0, 1632,
	1645, 1656, 1389, 1390, 1391, 1392, 0, 0, 0, 0,
	0, 0, 1400, 1401, 0, 1429, 2125, 2166, 2167, 0,
	1409, 1410, 1411, 1412, 1413, 1414, 111, 123, 124, 1678,
	1679, 1680, 1681, 1682, 1683, 1684, 0, 1686, 1687, 1688,
	1596, 1376, 1308, 0, 2134, 0, 2156, 2161, 2162, 2163,
	2164, 2155, 0, 0, 1581, 0, 1571, 0, 0, -2,
	-2, 0, 0, 1958, -2, 2168, 2169, 2170, 2131, 2152,
	2160, 2135, 2136, 2159, 2127, 2128, 2129, 2122, 2123, 2124,
	2126, 2138, 2140, 2151, 0, 2147, 2157, 2158, 2066, 0,
	0, 0, 0, 0, 2107, 125, 126, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1592, -2, -2, 1595, -2, 1598,
	-2, -2, -2, -2, 1603, 1604, -2, 1606, -2, -2,
	-2, -2, -2, -2, -2, 1583, 1584, 1585, 1586, 1575,
	1576, 1577, 1578, 1579, 1580, -2, -2, -2, 766, 841,
	0, 766, 0, 741, 788, 791, 794, 797, 744, 0,
	0, 73, 74, 0, 0, 0, 297, 298, 286, 288,
	0, 292, 0, 285, 1070, 0, 0, 0, 0, 1070,
	1070, 1070, 1070, 1070, 0, 1070, 0, 0, 0, 0,
	0, 1070, 0, 948, 1041, 1042, 1043, 1068, 1069, 1142,
	0, 0, 0, 667, 663, 664, 665, 666, 754, 0,
	756, 759, 588, 588, 814, 534, 0, 0, 0, 588,
	0, 548, 540, 0, 0, 0, 588, 0, 0, 761,
	761, 0, 591, 600, 588, 588, -2, 588, 588, 585,
	588, 0, 0, 1082, 554, 555, 556, 540, 540, 559,
	560, 561, 571, 572, 601, 1762, 0, 0, 476, 476,
	0, 476, 0, 476, 476, 476, 669, 1928, 1831, 1904,
	1889, 2090, 0, 253, 1958, 258, 0, 1832, 1851, 0,
	0, 1869, 0, -2, 0, 324, 766, 0, 0, 740,
	0, 0, 0, 0, 0, 476, 476, 476, 476, 476,
	1141, 476, 476, 476, 476, 476, 0, 0, 0, 476,
	476, 476, 0, 0, 806, 807, 802, 803, 804, 808,
	809, 5, 6, 19, 0, 0, 0, 0, 0, 0,
	79, 78, 0, 1739, 1757, 1691, 1692, 1693, 1744, 1695,
	1748, 1748, 1748, 1748, 1724, 1725, 1726, 1727, 1728, 1729,
	1730, 1731, 1732, 1748, 1748, 0, 0, 1737, 1715, 1746,
	1746, 1746, 1744, 1741, 1696, 1697, 1698, 1699, 1700, 1701,
	1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1751, 1751,
	1754, 1754, 1751, 0, 381, 379, 380, 1621, 0, 0,
	0, 0, 710, 714, 1254, 0, 0, 0, 766, -2,
	0, 0, 614, 346, 1313, 0, 0, 350, 0, 351,
	0, 0, 0, 370, 0, 373, 358, 359, 360, 354,
	0, 151, 0, 337, 338, 0, 0, 304, 0, 0,
	0, 477, 0, 0, 0, 0, 0, 0, 182, 178,
	186, 189, 199, 206, 0, 218, 220, 223, 179, 187,
	192, 193, 200, 221, 180, 183, 184, 188, 222, 224,
	181, 201, 205, 219, 203, 208, 211, 212, 217, 0,
	152, 0, 0, 0, 0, 0, 1631, 0, 0, 1664,
	1665, 1666, 1667, 1668, 1669, 1670, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 1625, 0, 0, 1395,
	1396, 1397, 1398, 0, 1402, 0, 1430, 0, 0, 0,
	0, 0, 1685, 1689, 0, 1621, 1621, 0, 1621, 1617,
	0, 0, 0, 0, 0, 0, 1621, 1554, 0, 0,
	1556, 1572, 0, 0, 1558, 1559, 0, 1562, 1563, 1621,
	0, 1621, 1567, 1621, 1621, 1621, 1550, 1551, 0, 1617,
	1617, 1617, 1617, 0, 0, 1617, 1617, 1617, 1617, 1617,
	1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 0,
	0, 0, 0, 761, 0, 767, 0, -2, 0, 785,
	787, 789, 790, 792, 793, 795, 796, 798, 799, 746,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 290,
	0, 295, 0, 0, 0, 912, 0, 0, 1070, 1070,
	1070, 949, 0, 0, 0, 0, 0, 0, 0, 0,
	1070, 1070, 1070, 1070, 0, 1088, 0, 0, 0, 669,
	668, 0, 755, 0, 0, 814, 0, 0, 532, 533,
	0, 0, 540, 588, 588, 546, 547, 542, 541, 596,
	597, 591, 0, 591, 591, 814, 0, 565, 566, 567,
	588, 588, 573, 762, 0, 574, 575, 591, 0, 598,
	599, 814, 0, 0, 814, 814, 0, 583, 584, 586,
	588, 0, 0, 1070, 0, 606, 542, 542, 1763, 1764,
	0, 0, 1079, 0, 0, 0, 609, 0, 0, 0,
	0, 670, 233, 236, 0, 239, 0, 1928, 0, 1928,
	0, 246, 0, 0, 0, 0, 0, 0, 276, 277,
	0, 0, 0, 0, 267, 270, 1248, 1249, 1031, 1032,
	271, 272, 316, 317, 0, 761, 784, 786, 780, 781,
	782, 0, 0, 0, 0, 0, 0, 0, 0, 476,
	0, 0, 0, 0, 0, 645, 0, 928, 647, 0,
	0, 0, 0, 822, 816, 818, 885, 111, 822, 8,
	96, 93, 0, 19, 0, 0, 19, 19, 0, 19,
	281, 0, 1760, 1758, 1759, 1694, 1745, 0, 1720, 0,
	1721, 1722, 1723, 1733, 1734, 0, 0, 1716, 0, 1717,
	1718, 1719, 1710, 0, 1711, 1712, 0, 1713, 1714, 279,
	378, 0, 0, 1622, 916, 0, 688, 702, 683, 0,
	691, 0, 0, 1256, 1257, 0, 0, 0, 671, 702,
	673, 0, 691, 761, 738, 0, 716, 0, 0, 347,
	0, 355, 352, 0, 356, 0, 0, 372, 374, 375,
	376, 361, 362, 611, 333, 334, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 336, 121, 0, 305, 306,
	0, 0, 0, 165, 166, 167, 168, 169, 170, 172,
	156, 634, 636, 1023, 1035, 0, 1026, 0, 175, 216,
	148, 0, 0, 0, 1626, 1627, 1628, 1629, 1630, 1635,
	0, 1637, 1639, 1641, 1643, 0, 1661, -2, -2, 1377,
	1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
	1388, 1646, 1659, 1660, 0, 0, 0, 0, 0, 0,
	1657, 1657, 1652, 0, 1415, 1250, 1251, 1393, 0, 0,
	1427, 1431, 0, 0, 0, 0, 0, 112, 1616, 1521,
	1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531,
	1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541,
	1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 0, 0,
	1625, 0, 0, 0, 1618, 1619, 0, 0, 0, 1509,
	0, 0, 1515, 1516, 1517, 0, 697, 0, 1582, 1555,
	1573, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 840, 842,
	0, 706, 708, 709, 735, 716, 742, 0, 0, 0,
	71, 76, 0, 1109, 0, 0, 0, 299, 300, 0,
	0, 294, 0, 0, 0, -2, 0, 0, 0, 0,
	0, 964, 965, 474, 1017, 0, 0, 0, 1033, 1058,
	1066, 0, 0, 0, 0, 0, 1115, 950, 955, 956,
	957, 951, 952, 958, 959, 0, 757, 0, 0, 854,
	531, 589, 590, 815, 537, 1889, 542, 814, 814, 549,
	543, 550, 593, 551, 552, 553, 591, 814, 814, 763,
	588, 591, 576, 592, 591, 594, 580, 0, 587, 594,
	607, 594, 0, 605, 557, 558, 1117, 759, 393, 394,
	395, 397, 0, 445, 445, 445, 428, 445, 0, 0,
	416, 1765, 0, 0, 0, 0, 425, 1765, 0, 0,
	1765, 1765, 1765, 1765, 1765, 1765, 1765, 0, 0, 1765,
	1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765,
	0, 1765, 1765, 1765, 1765, 1765, 1234, 1765, 0, 1080,
	435, 436, 437, 438, 443, 444, 0, 471, 0, 0,
	963, 0, 474, 0, 1003, 827, 0, 828, 829, 825,
	856, 880, 880, 0, 880, 860, 1256, 0, 0, 244,
	245, 234, 0, 235, 0, 247, 248, 0, 250, 251,
	252, 259, 1831, 1904, 254, 256, 0, 0, 260, 273,
	274, 275, 0, 0, 265, 266, 0, 0, 319, 320,
	322, 0, 716, 1083, 1084, 1085, 631, 1252, 632, 633,
	637, 0, 0, 640, 641, 642, 643, 644, 930, 0,
	0, 1010, 1011, 1012, 814, 0, 823, 0, 819, 886,
	0, 888, 0, 814, 0, 94, 19, 0, 87, 84,
	0, 0, 0, 0, 0, 1740, 1690, 1761, 0, 0,
	0, 1742, 0, 0, 0, 0, 0, 77, 718, 678,
	0, 682, 699, 0, 703, 0, 0, 695, 687, 692,
	0, 0, 712, 679, 1255, 0, 0, 0, 672, 0,
	0, 677, 716, 0, 739, 768, 769, 772, 1314, 0,
	357, 353, 371, 0, 476, 0, 0, 0, 159, 1020,
	0, 160, 164, 154, 0, 0, 0, 1025, 0, 1022,
	1027, 0, 174, 0, 0, 149, 150, 1100, 1109, 0,
	0, 0, 1636, 1638, 1640, 1642, 1644, 0, 1647, 1657,
	1657, 1653, 0, 1648, 0, 1650, 0, 1626, 1399, 0,
	1432, 0, 0, 0, 0, 0, 0, 0, 0, 1499,
	1500, 0, 0, 1504, 0, 1506, 1507, 1508, 1510, 0,
	0, 0, 1514, 0, 1553, 1574, 1557, 1560, 0, 1564,
	0, 1566, 1568, 1569, 1570, 0, 766, 766, 0, 0,
	1471, 1471, 1471, 0, 0, 0, 0, 1471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1416, 0,
	1417, 1418, 0, 0, 0, 843, 736, 0, 0, 0,
	0, 0, 1107, 0, 64, 0, 0, 301, 289, 291,
	0, 0, 1071, 0, 0, 918, 919, 921, 0, 924,
	925, 926, 930, 759, 0, 759, 975, 1765, 478, 0,
	0, 1019, 0, 0, 992, 0, 0, 0, -2, 0,
	0, 1066, 0, 0, 0, 1119, 0, 0, 0, 656,
	660, 23, 760, 0, 535, 0, 536, 588, 544, 545,
	814, 568, 569, 0, 0, 814, 588, 588, 579, 0,
	591, 602, 0, 603, 604, 1119, 0, 0, 1079, 1185,
	1153, 406, 0, 1269, 1270, 446, 0, 1276, 1285, 1070,
	1346, 0, 1285, 0, 0, 1287, 1288, 0, 0, 0,
	0, 429, 430, 0, 415, 0, 0, 0, 0, 0,
	0, 414, 0, 0, 456, 0, 0, 0, 0, 0,
	1766, 1765, 1765, 0, 423, 424, 0, 427, 0, 0,
	0, 0, 0, 0, 0, 0, 1765, 1765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1225,
	0, 0, 0, 0, 0, 0, 0, 1240, 1241, 975,
	1765, 0, 0, 0, 478, 990, 1008, 0, 0, 0,
	0, 0, 0, 847, 0, 0, 846, 0, 0, 0,
	0, 0, 759, 881, 0, 883, 884, 858, -2, 0,
	827, 863, 1621, 237, 238, 0, 0, 243, 261, 263,
	0, 0, 0, 262, 264, 268, 269, 318, 321, 323,
	778, 0, 0, 1143, 0, 931, 932, 934, 935, 0,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1815, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 929, 648, 812, 817, 824,
	887, 889, 112, 820, 812, 0, 97, 19, 96, 88,
	89, 0, 19, 0, 0, 0, 0, 1750, 1749, 1735,
	0, 1736, 1747, 1752, 0, 1755, 0, 382, 722, 0,
	0, 702, 704, 0, 0, 702, 0, 0, 711, 0,
	0, 0, 0, 0, 0, 702, 778, 718, 0, 775,
	773, 774, 0, 0, 612, 122, 377, 0, 0, 0,
	0, 0, 635, 0, 1024, 156, 0, 0, 176, 0,
	0, 0, 1109, 1104, 1620, 1649, 1651, 0, 1658, 1654,
	1394, 1403, 1428, 0, 0, 1434, 1446, 1446, 0, 0,
	0, 1437, 1748, 1748, 1440, 1744, 1746, 1744, 1446, 1446,
	0, 113, 0, 0, 1505, 0, 0, 0, 698, 0,
	0, 0, 1467, 1469, 1471, 1471, 1478, 1472, 1479, 1480,
	1471, 1471, 1471, 1471, 1485, 1471, 1471, 1471, 1471, 1471,
	1471, 1471, 1471, 1471, 1471, 1465, 0, 0, 1679, 1680,
	707, 0, 0, 749, 750, 751, 752, 753, 0, 0,
	57, 57, 1109, 0, 65, 0, 0, 293, 61, 62,
	0, 0, 0, 923, 0, 0, 0, 1262, 0, 979,
	976, 977, 978, 0, 1014, 479, 480, 481, 482, 0,
	0, 0, 1018, 0, 1003, 1003, 985, 0, 0, 0,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, -2, 1074, 0,
	0, 0, 1262, 1093, 0, 0, 1098, 1262, 1262, 0,
	1127, 0, 1116, 710, 0, -2, 0, 0, 658, 0,
	0, 855, 538, 814, 562, 764, 765, 594, 814, 814,
	0, 588, 608, 1127, 1118, 0, 396, 445, 0, 1173,
	0, 0, 1179, 0, 1186, 399, 0, 447, 0, 1275,
	1302, 1286, 1302, 1347, 1302, 1302, 1070, 0, 447, 0,
	0, 417, 453, 0, 0, 0, 0, 0, 413, 450,
	772, 400, 402, 403, 404, 454, 455, 457, 0, 459,
	460, 419, 431, 432, 433, 434, 0, 0, 0, 426,
	439, 440, 441, 442, 401, 1202, 1203, 1204, 1207, 1208,
	1209, 1210, 0, 0, 1213, 1214, 1215, 1216, 1217, 1299,
	1300, 1301, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1242,
	1243, 1244, 1245, 1246, 1247, 1226, 1227, 1228, 1229, 1230,
	1231, 1232, 1233, 0, 0, 1237, 0, 979, 0, 0,
	0, 0, 1014, 992, 0, 999, 0, 1004, 1005, 0,
	0, 680, 814, 311, 0, 850, 844, 0, 833, 848,
	849, 836, 0, 838, 0, 834, 835, 814, 826, 857,
	882, 859, 862, 864, 865, 871, 0, 0, 0, 0,
	240, 241, 242, 249, 0, 498, 255, 734, 0, 1253,
	638, 639, 1144, 1145, 646, 0, 936, 810, 0, 0,
	810, 92, 95, 0, 90, 0, 0, 0, 0, 82,
	80, 1743, 0, 0, 724, 136, 0, 0, 0, 700,
	0, 705, 702, 686, 696, 685, 693, 694, 713, 1258,
	1259, 1260, 1261, 702, 676, 675, 737, 722, 770, 771,
	0, 1315, 348, 0, 1021, 156, 161, 162, 163, 157,
	155, 1028, 0, 1030, 0, 1102, 0, 0, 1655, 1433,
	1404, 1435, 1447, 1448, 1436, 0, 1406, 1407, 1438, 1439,
	1441, 1442, 1443, 1444, 1445, 1408, 1501, 0, 1503, 1511,
	1512, 0, 1561, 1565, 0, 0, 0, 0, 0, 1476,
	1477, 1481, 1482, 1483, 1484, 1486, 1487, 1488, 1489, 1490,
	1491, 1492, 1493, 1494, 1495, 766, 1466, 0, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 0, 59, 0,
	59, 1108, 1110, 0, 0, 0, 63, 911, 914, 920,
	922, 0, 0, 0, 1263, 1264, 1266, 1267, 1268, 0,
	947, 0, 0, 967, 968, 969, 981, 0, 0, 0,
	484, 485, 0, 0, 0, 497, 493, 494, 495, 475,
	1013, 999, 999, 988, 0, 0, 998, 0, 1075, 1765,
	1765, 1765, 0, 0, 1187, 1765, 1765, 0, 1095, 1097,
	0, 0, 1191, 1130, 0, 0, 1121, 0, 880, 0,
	0, 814, 657, 660, 661, 758, 539, 577, 581, 578,
	0, 814, 1130, 392, 1151, 0, 0, 0, 0, 0,
	1183, 0, 0, 1155, 0, 418, 448, 0, -2, 0,
	1303, 0, 1289, 1303, 0, 0, 1302, 0, 407, 447,
	0, 0, 0, 461, 465, 466, 0, 463, 1342, 0,
	464, 0, 452, 0, 458, 1205, 1206, 0, 1211, 1212,
	0, 1236, 0, 0, 467, 0, 0, 0, 468, 473,
	985, 0, 1002, 0, 1009, 0, 1006, 1007, 766, 0,
	0, 830, 851, 0, 0, 831, 0, 832, 837, 839,
	310, 866, 0, 0, 868, 869, 870, 861, 257, 779,
	933, 0, 800, 0, 0, 821, 801, 0, 19, 0,
	0, 85, 1753, 1756, 726, 0, 723, 137, 0, 0,
	0, 0, 690, 701, 684, 674, 724, 776, 777, 158,
	153, 1029, 1112, 0, 1103, 0, 0, 1513, 0, 1471,
	1468, 1471, 1470, 1462, 0, 1419, 0, 1421, 1422, 1423,
	0, 1425, 1426, 0, 745, 0, 55, 0, 58, 56,
	0, 66, 0, 0, 953, 1191, 0, 953, 980, 966,
	0, 1015, 1016, 0, 486, 487, 0, 490, 496, 982,
	983, 984, 0, 0, 996, 0, 0, 0, 0, 1067,
	1081, 0, 0, 0, -2, 0, -2, 1092, 0, 1136,
	0, 1128, 0, 1120, 0, 1123, 814, 814, -2, 654,
	659, 0, 0, 582, 1136, 1153, 0, 1174, 0, 0,
	0, 0, 0, 0, 0, 1154, 0, 1167, 449, 1304,
	-2, 1318, 1320, 0, 1080, 1323, 1324, 0, 0, 0,
	0, 0, 0, 1368, 1332, 0, 0, 1336, 1337, 1338,
	0, 0, 1341, 0, 1673, 1674, 0, 1345, 0, 0,
	0, 0, 0, 0, 0, 1283, 408, 409, 0, 411,
	412, 1765, 1343, 451, 405, 1765, 421, 1235, 1238, 1239,
	472, 469, 470, 988, 991, 1000, 681, 761, 312, 313,
	852, 0, 845, 875, 872, 0, 0, 937, 811, 813,
	86, 91, 0, 0, 728, 0, 725, 0, 719, 721,
	147, 689, 726, 107, 139, 0, 0, 1405, 1502, 1552,
	1474, 1475, 0, 1463, 0, 1457, 1458, 1459, 1464, 0,
	0, 748, 743, 60, 68, 0, 0, 0, 939, 946,
	960, 1086, 1265, 945, 0, 0, 483, 488, 0, 491,
	492, 0, 986, 987, 0, 994, 0, 0, 1054, 1744,
	0, 1076, 1077, 1078, 1188, 1189, 1190, 1146, 1094, 0,
	-2, 1199, 0, 1090, 1112, 1146, 0, 1124, 0, 1131,
	0, 1129, 1122, 766, 655, 595, 1133, 398, 1185, 1175,
	0, 1177, 0, 0, 0, 0, 1156, -2, 0, 1319,
	1321, 1322, 1325, 1326, 1327, 1373, 1374, 1375, 0, 0,
	1330, 1370, 1371, 1372, 1331, 0, 0, 0, 0, 0,
	1671, 1672, 1366, 0, 0, 1290, 1292, 1293, 1294, 1295,
	1296, 1297, 1298, 1291, 0, 0, 0, 1282, 1284, 410,
	0, 0, 1765, 1001, 309, 0, 0, 876, 878, 873,
	874, 81, 83, 98, 0, 727, 138, 0, 728, 109,
	0, 130, 0, 1113, 0, 1473, 1460, 0, 0, 0,
	0, 0, 1675, 1676, 1677, 0, 1420, 1424, 0, 67,
	0, 0, 961, 962, 970, 971, 0, 973, 974, 489,
	989, 993, 996, 0, 1045, 0, 772, 0, 1148, 0,
	1096, 1079, 1201, 1765, 1099, 1148, 0, 1193, 1765, 1765,
	1114, 0, 1126, 0, 1138, 0, 1132, 761, 391, 0,
	1135, 1171, 1176, 1178, 1180, 0, 1184, 1182, 1157, -2,
	0, 1165, 0, 0, 1328, 1329, 0, 0, 1571, 1765,
	0, 1361, 0, 1045, 1045, 1045, 1045, 0, 462, 420,
	0, 853, 867, 0, 0, 0, 717, 99, 0, 108,
	127, 0, 140, 141, 0, 0, 0, 0, 1105, 0,
	1449, 0, 0, 0, 1453, 1454, 1455, 1456, 69, 0,
	0, 938, 0, 972, 995, 997, 1044, 1055, 1056, 772,
	1089, 0, 1185, 1200, 0, 1091, 1192, 0, 0, 0,
	1125, 1137, 0, 1140, 653, 1134, 1152, 0, 1181, 1158,
	1166, 0, 1161, 0, 0, 0, 1369, 0, 1335, 0,
	1340, 1349, 1362, 0, 0, 1271, 0, 1273, 0, 1277,
	0, 1279, 0, 0, 422, 877, 879, 0, 730, 720,
	110, 114, 0, 136, 133, 0, 142, 0, 0, 0,
	0, 1101, 0, 0, 1450, 1451, 1452, 0, 0, 940,
	941, 954, 1046, 1765, 1765, 0, 0, 0, 1052, 1053,
	1057, 0, 1173, 1205, 1194, 1195, 1196, 1139, 1172, 1160,
	0, -2, 1168, 0, 0, 1623, 1633, 1634, 1333, 1339,
	1348, 1350, 1351, 0, 1363, 1364, 1365, 1367, 1045, 1045,
	1045, 1045, 1281, 729, 0, 101, 0, 0, 131, 132,
	134, 0, 143, 0, 145, 146, 0, 1461, 70, 942,
	0, 0, 1049, 1050, 0, 1149, 0, 1151, 1162, -2,
	0, 1170, 0, 1334, 1352, 0, 1353, 0, 0, 0,
	1272, 1274, 1278, 1280, 731, 1111, 0, 115, 0, 117,
	119, 120, 1305, 128, 129, 135, 144, 0, 927, 943,
	0, 1047, 1048, 1051, 0, 1153, 1169, 1624, 1354, 1356,
	1357, 0, 0, 1355, 102, 103, 0, 116, 0, 0,
	1106, 944, 1150, 1147, 1358, 1360, 1359, 0, 0, 118,
	1306, 104, 105, 106, 0, 1307,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 115, 3, 3, 3, 146, 138, 3,
	82, 83, 143, 141, 156, 142, 155, 144, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 637, 634,
	125, 124, 126, 3, 638, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 148, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 635, 137, 636, 149,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 116, 117, 118, 119, 120, 121, 122, 123, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 139,
	140, 145, 147, 150, 151, 152, 153, 154, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:815
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:822
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:828
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:836
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:842
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:846
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:861
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:865
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:871
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:876
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:880
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:913
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:923
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:934
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:946
		{
			yyVAL.str = ""
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:950
		{
			yyVAL.str = yyDollar[2].str
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:955
		{
			yyVAL.str = ""
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:959
		{
			yyVAL.str = yyDollar[2].str
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:967
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:977
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:987
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1000
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().ToLower()),
			}

		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1008
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().ToLower()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1016
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().ToLower()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().ToLower()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1025
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().ToLower()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().ToLower()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().ToLower()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1035
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().ToLower()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().ToLower()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1044
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELDATABASE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().ToLower()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().ToLower()),
				SnapShotName:  tree.Identifier(yyDollar[8].cstrUnion().ToLower()),
				ToAccountName: tree.Identifier(yyDollar[11].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1054
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELTABLE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().ToLower()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().ToLower()),
				TableName:     tree.Identifier(yyDollar[7].cstrUnion().ToLower()),
				SnapShotName:  tree.Identifier(yyDollar[10].cstrUnion().ToLower()),
				ToAccountName: tree.Identifier(yyDollar[13].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1067
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1087
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1093
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1100
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1108
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1114
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1123
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1133
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1141
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1149
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1157
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1167
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1175
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1185
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1192
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1201
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1211
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1215
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1221
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1225
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1231
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1240
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1250
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1254
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1260
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1269
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1273
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1279
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1300
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1314
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1321
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1325
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1331
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1335
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1341
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1348
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1356
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1360
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1372
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1376
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1389
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yyDollar[1].cstrUnion())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1395
		{
			unResolve := tree.SetUnresolvedName(yylex.(*Lexer).GetTblName("", yyDollar[1].cstrUnion().Origin()), yyDollar[3].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1401
		{
			unResolve := tree.SetUnresolvedName(yylex.(*Lexer).GetDbName(yyDollar[1].cstrUnion().Origin()), yylex.(*Lexer).GetTblName(yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin()), yyDollar[5].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion(), yyDollar[5].cstrUnion())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1408
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1412
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1416
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1422
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1431
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1442
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1446
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1452
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1456
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1462
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1466
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1472
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1496
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1515
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1519
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1523
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1528
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1532
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1541
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1551
		{
			yyVAL.str = ""
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1558
		{
			yyVAL.str = yyDollar[3].str
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1563
		{
			yyVAL.str = "\n"
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1570
		{
			yyVAL.str = yyDollar[3].str
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1575
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1579
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1607
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1611
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1617
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1625
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1645
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1664
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1689
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1693
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1697
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1702
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1706
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1712
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1725
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1736
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1749
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1753
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1763
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1776
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1789
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1795
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1801
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1808
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1816
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1825
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1829
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1833
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1837
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1841
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1845
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1852
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1856
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1862
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1869
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1878
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1882
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1888
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1892
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1896
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1900
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1904
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1908
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1912
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1916
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1920
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1924
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1928
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1932
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1936
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1940
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1944
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1948
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1952
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1956
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1960
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1964
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1968
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1972
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1976
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1980
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1984
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1988
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1992
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1996
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2000
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2004
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2008
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2012
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2016
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2020
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2024
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2028
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2032
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2036
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2040
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2044
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2048
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2052
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2056
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2060
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2064
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2068
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2072
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2076
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2080
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2084
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2088
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2101
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2108
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2115
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2125
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2129
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2135
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2142
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2150
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2154
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2158
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2162
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2168
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2172
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2178
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2185
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2192
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2201
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2231
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2235
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2239
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2245
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2251
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2255
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2262
		{
			yyVAL.str = yyDollar[3].str
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2268
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2272
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2278
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2286
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2295
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2304
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2312
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2320
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2343
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2366
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2373
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2380
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2388
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2395
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2402
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2411
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2415
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2419
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2425
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2429
		{
			yyVAL.str = yyDollar[1].str
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2435
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2439
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2445
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2449
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2460
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2466
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2471
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2475
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2479
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2483
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2487
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2491
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2495
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2499
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2503
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2509
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2513
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2517
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2521
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2526
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2531
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2537
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2550
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2563
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2576
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2589
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2605
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2612
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2623
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2634
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2638
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2644
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2654
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2660
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2664
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2670
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2676
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2680
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2684
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2688
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2694
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2707
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2713
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2717
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2723
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2727
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2733
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2739
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2750
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2756
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2760
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2764
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2768
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2772
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2776
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2784
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2792
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2802
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2814
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2818
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2826
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2834
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2873
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2877
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2883
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2889
		{
			yyVAL.str = yyDollar[1].str
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2894
		{
			yyVAL.str = "true"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2895
		{
			yyVAL.str = "false"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2896
		{
			yyVAL.str = yyDollar[1].str
		}
	case 377:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2901
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2907
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2916
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2923
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2931
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2935
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2958
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2981
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2991
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2998
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3007
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3011
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3017
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3021
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3045
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3055
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3071
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3089
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3093
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3099
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3103
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3109
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3115
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3123
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3133
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3141
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3151
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3161
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3171
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3178
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3182
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3186
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3190
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3194
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3201
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3207
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3211
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3215
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3219
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3223
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3227
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3231
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3235
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3240
		{
			yyVAL.str = ""
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3271
		{
			yyVAL.str = ""
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3275
		{
			yyVAL.str = string("COLUMN")
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3280
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3286
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3292
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3300
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3304
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3310
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3318
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3325
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3331
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3337
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3343
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3349
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3356
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3363
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3371
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3377
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3389
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3395
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3403
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3407
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3414
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3432
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3446
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3460
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3473
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3479
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3490
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3503
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3507
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3515
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3519
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3524
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3528
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3544
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3548
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3552
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3556
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3563
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3567
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3571
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3575
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3582
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3586
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3593
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3597
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3601
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3605
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3612
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3619
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3625
		{
			yyVAL.item = nil
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3630
		{
			yyVAL.item = nil
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3673
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3682
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3690
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3698
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3702
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3706
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				&tree.Role{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3717
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3721
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3727
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3732
		{
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3736
		{
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3741
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3751
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3761
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3769
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3775
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3781
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3787
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3793
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3799
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3805
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3814
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3818
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3822
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3826
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3830
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3834
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3838
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3842
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3848
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3857
		{
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3859
		{
		}
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3868
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3878
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3887
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3891
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3895
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3901
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3907
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3913
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3919
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3928
		{
			yyLOCAL = &tree.ShowTables{
				Open:         false,
				Full:         yyDollar[2].fullOptUnion(),
				DBName:       yyDollar[4].str,
				Like:         yyDollar[5].comparisionExprUnion(),
				Where:        yyDollar[6].whereUnion(),
				SnapshotName: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3939
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3951
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:         yyDollar[3].comparisionExprUnion(),
				Where:        yyDollar[4].whereUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3959
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3965
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3977
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3991
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3997
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4003
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4010
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4014
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4019
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4023
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4027
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4032
		{
			yyVAL.str = ""
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4036
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4042
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4047
		{
			yyVAL.str = ""
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
//line mysql_sql.y:4051
		{
			yyVAL.str = yyDollar[4].str
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4066
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4070
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4076
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4084
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4091
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4095
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4101
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4107
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4111
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4117
		{
			yyVAL.str = yylex.(*Lexer).GetDbName(yyDollar[1].cstrUnion().Origin())
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4123
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4127
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4131
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4137
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4141
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4167
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4175
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4183
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4191
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4195
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4201
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4214
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4222
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4231
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4237
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4245
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4253
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4261
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4267
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4275
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4281
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4289
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4295
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4305
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4310
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4317
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4333
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4346
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4357
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4361
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4367
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4372
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4379
		{
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4381
		{
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4384
		{
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4393
		{
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4397
		{
		}
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4402
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4411
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4418
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4424
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4432
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4439
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4446
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4466
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4474
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4484
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4488
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4494
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4501
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4507
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4515
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4522
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4529
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4548
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4552
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4556
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4561
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4565
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4569
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4575
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4584
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4588
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4594
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4598
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4604
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4608
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4614
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4619
		{
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4623
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4630
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4634
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4641
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4646
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4650
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4656
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4660
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4666
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4670
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4675
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4679
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4692
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4703
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4714
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4736
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4759
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4767
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4776
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4780
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4793
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4797
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4802
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4806
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4813
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4818
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4825
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4831
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4835
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4839
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4843
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4847
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4851
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4856
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4860
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4866
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4876
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4891
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4895
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4909
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4913
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4919
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4928
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4932
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4936
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4940
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4944
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4950
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4957
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4966
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4970
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4976
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4984
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4988
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4993
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4997
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5003
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5007
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5011
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5016
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5020
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5026
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5032
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5036
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5042
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5047
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5051
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5055
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5060
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5064
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5068
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5073
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5077
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5085
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5089
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5093
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5107
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5111
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5121
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5131
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5141
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5153
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5161
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5169
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5178
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5186
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5194
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5202
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5210
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5218
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5226
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5234
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5242
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5252
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5263
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5277
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5281
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5285
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 805:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5290
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5294
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5298
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5307
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5311
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5316
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5320
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5325
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5329
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5335
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5339
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5345
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5349
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5353
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yylex.(*Lexer).GetTblName("", yyDollar[1].cstrUnion().Origin()))}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5357
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yylex.(*Lexer).GetDbName(yyDollar[1].cstrUnion().Origin()), yylex.(*Lexer).GetTblName(yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin()))}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5362
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5370
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5376
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5384
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5392
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5402
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5408
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5417
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5426
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5435
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5445
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5449
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5459
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 837:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5463
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5467
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 839:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5471
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 840:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5477
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5487
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5491
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5497
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5503
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5507
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5513
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5519
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5523
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5527
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 850:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5533
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5537
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5543
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5547
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5553
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5557
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5563
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5567
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5577
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5590
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5596
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5602
		{
			name := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5616
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5627
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5634
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5638
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5644
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5654
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5658
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5662
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5667
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5671
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5675
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5679
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5684
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5688
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5692
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5696
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5700
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5705
		{
			yyVAL.str = ""
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5709
		{
			yyVAL.str = yyDollar[1].str
		}
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5713
		{
			yyVAL.str = yyDollar[2].str
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5719
		{
			yyVAL.str = yylex.(*Lexer).GetTblName("", yyDollar[1].cstrUnion().Origin())
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5723
		{
			yyVAL.str = yylex.(*Lexer).GetTblName("", yyDollar[1].str)
		}
	case 885:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5728
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5732
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5736
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5740
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5744
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5750
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 911:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5790
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5803
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5809
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 914:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5815
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5828
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5833
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5839
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5846
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5850
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5856
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5862
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5867
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5871
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5875
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5879
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5886
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5919
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5924
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5930
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5937
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5941
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5947
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5953
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5957
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5961
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5967
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5973
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5979
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5983
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5989
		{
			yyVAL.str = ""
		}
	case 944:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5996
		{
			yyVAL.str = yyDollar[2].str
		}
	case 945:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6002
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6017
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6034
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6051
		{
			yyVAL.str = yyDollar[1].str
		}
	case 949:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6055
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 950:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6061
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6065
		{
			yyVAL.str = "DEFINER = "
		}
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6069
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 953:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6074
		{
			yyVAL.str = ""
		}
	case 954:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6078
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 960:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6092
		{
			yyVAL.str = ""
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6100
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6106
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6111
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6117
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6130
		{
			var Str = yyDollar[1].str
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6135
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6140
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6146
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6153
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6160
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6167
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6174
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6182
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6188
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6195
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6202
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6210
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6216
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6225
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6242
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var Table = tree.Identifier("")
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6259
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier("")
			var Table = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6278
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6296
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6302
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6309
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6317
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6323
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6331
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6337
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6345
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6351
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6360
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6364
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6369
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6373
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6380
		{
			yyVAL.str = yyDollar[3].str
		}
	case 999:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6385
		{
			yyVAL.str = ""
		}
	case 1000:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6389
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1001:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6395
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6408
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var comment = yyDollar[7].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, comment)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6418
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6422
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6428
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6434
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6440
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6447
		{
			yyVAL.str = ""
		}
	case 1009:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6451
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1010:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6457
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6465
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6473
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6481
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1014:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6486
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6498
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6509
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6618
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6622
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6628
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6641
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6645
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6651
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6664
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6668
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6672
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6677
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6681
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6687
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6694
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6700
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6709
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1033:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6716
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6727
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6731
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6737
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6746
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6750
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6754
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6759
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6763
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6767
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6771
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6777
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6808
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6812
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6838
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6844
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6856
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6862
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6868
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6874
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6880
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6888
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6892
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6898
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6912
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6926
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6930
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6934
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6938
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6942
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6946
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6950
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6956
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6971
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6975
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6986
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6990
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6995
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6999
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7005
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7009
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7015
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7024
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7033
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7039
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7043
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7049
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7060
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7066
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7084
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7102
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7120
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7136
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7140
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7149
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7161
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7170
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7182
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7192
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7202
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7213
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7223
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7234
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7242
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7253
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7260
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7270
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7283
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7291
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7300
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7309
		{
			yyVAL.str = ""
		}
	case 1106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7313
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7319
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7323
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7328
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7332
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7339
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7351
		{
			yyVAL.str = ""
		}
	case 1113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7355
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1114:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7361
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7382
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7396
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7400
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7404
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7410
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7414
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7421
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7428
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7435
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7442
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7446
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7450
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7454
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7458
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7465
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7472
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7476
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7483
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7490
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7494
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7500
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7506
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7510
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7517
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7524
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7531
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7538
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7542
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7547
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7551
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7555
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7560
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7564
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7577
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7581
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7589
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7597
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7601
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7613
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7617
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7623
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7627
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7633
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7646
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7660
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7664
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7670
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7674
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7680
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7689
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7700
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7704
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7709
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7713
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7719
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7724
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7732
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7736
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7746
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7750
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7761
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7769
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7777
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7785
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7796
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7805
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7815
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7825
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7829
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7834
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7838
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7844
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7848
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7854
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7863
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7873
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7877
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7883
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7887
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7893
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7902
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7912
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7916
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7922
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7926
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7930
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7936
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7940
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7944
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7948
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7952
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7956
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7960
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7965
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7969
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7973
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7977
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7981
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7985
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7989
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7993
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7997
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8001
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8005
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8009
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8013
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8019
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8025
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8029
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8033
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8037
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8041
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8047
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8053
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8059
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8065
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8071
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8077
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8081
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8085
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8089
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8096
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8100
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8106
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8117
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8121
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8127
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8131
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8135
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8139
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8143
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8147
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8161
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8165
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8174
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yylex.(*Lexer).GetTblName("", yyDollar[1].cstrUnion().Origin())), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8179
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yylex.(*Lexer).GetDbName(yyDollar[1].cstrUnion().Origin())), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yylex.(*Lexer).GetTblName(yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin())), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8185
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8189
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8193
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8200
		{
			var Str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8208
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8215
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8223
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8230
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8234
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8240
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8244
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8248
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8254
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8258
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8264
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8277
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8290
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8329
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8369
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8383
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8389
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8402
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8415
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8428
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8441
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8456
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8466
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8472
		{
			yyVAL.str = ""
		}
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8476
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8486
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8492
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8498
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8519
		{
			yyVAL.str = ""
		}
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8523
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8529
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8535
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yyDollar[1].cstrUnion())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8541
		{
			unResolve := tree.SetUnresolvedName(yylex.(*Lexer).GetTblName("", yyDollar[1].cstrUnion().Origin()), yyDollar[3].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8547
		{
			unResolve := tree.SetUnresolvedName(yylex.(*Lexer).GetDbName(yyDollar[1].cstrUnion().Origin()), yylex.(*Lexer).GetTblName(yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin()), yyDollar[5].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion(), yyDollar[5].cstrUnion())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8555
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8559
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8563
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8567
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8573
		{
			yyLOCAL = yylex.(*Lexer).GetDbNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8579
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yyDollar[1].cstrUnion())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8585
		{
			unResolve := tree.SetUnresolvedName(yylex.(*Lexer).GetTblName("", yyDollar[1].cstrUnion().Origin()), yyDollar[3].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8591
		{
			unResolve := tree.SetUnresolvedName(yylex.(*Lexer).GetDbName(yyDollar[1].cstrUnion().Origin()), yylex.(*Lexer).GetTblName(yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin()), yyDollar[5].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion(), yyDollar[5].cstrUnion())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8598
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8602
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8608
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8612
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8618
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8622
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8626
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8630
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8634
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8638
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8643
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8647
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8651
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8655
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8659
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8663
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8667
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8671
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8675
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8679
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8693
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8697
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8701
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8705
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8709
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8713
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8719
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8723
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8728
		{
			yyVAL.str = ""
		}
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8732
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8738
		{
			yyVAL.str = ""
		}
	case 1347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8742
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1348:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8748
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8765
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8772
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8779
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8786
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8793
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8802
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8808
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8814
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8818
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8822
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8826
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8830
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8835
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8842
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8846
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8850
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8855
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8859
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8864
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8868
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8884
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8890
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8894
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8898
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8902
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8906
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8910
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8914
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8918
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8922
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8926
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8930
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8934
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8938
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8944
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8948
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8952
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8956
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8960
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8964
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8968
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8972
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8976
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8980
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9022
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9026
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9030
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9035
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9043
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9047
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9051
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9055
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9059
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9069
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9073
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9077
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9081
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9085
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9089
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9093
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9099
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9108
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9117
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9128
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9138
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9148
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9157
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9167
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9177
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9187
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9196
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9206
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9210
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9215
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9219
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9225
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9229
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9235
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9244
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9256
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9273
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9290
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9303
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9316
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9328
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9342
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9357
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9372
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9389
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9404
		{
		}
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9411
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9415
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9419
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9425
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9429
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9433
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9437
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9443
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9447
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9451
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9457
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9465
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9475
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9479
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9486
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9491
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9495
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9500
		{
			yyVAL.str = ","
		}
	case 1468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9504
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9509
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9513
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1471:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9518
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9525
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9551
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9563
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9575
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9586
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9597
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9608
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9618
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9628
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9639
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9650
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9661
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9672
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9683
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9694
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9705
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9716
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9727
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9738
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9749
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9760
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9771
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9782
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9800
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9809
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9818
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9827
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9836
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9847
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9856
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9866
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9875
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9884
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9893
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9902
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9914
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9925
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9938
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9950
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9973
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1550:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10009
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10022
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10035
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10047
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10056
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10064
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10072
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10085
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10094
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10105
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10116
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10125
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10137
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10147
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10157
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10166
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10177
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10186
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10196
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10205
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10214
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10224
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10228
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10234
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10238
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10257
		{
		}
	case 1582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10259
		{
		}
	case 1616:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10300
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10312
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10316
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10320
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10326
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10331
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10335
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10341
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10345
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10351
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10355
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10362
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10366
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10370
		{
			name := tree.SetUnresolvedName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10379
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10383
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10387
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10392
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10396
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10402
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10406
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10410
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10414
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10418
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10422
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10426
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10430
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10434
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10438
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10446
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10450
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10454
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10458
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10462
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10466
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10470
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10474
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10478
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10482
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10488
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10492
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10498
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10502
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10509
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10513
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10517
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10523
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10527
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10531
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10535
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10539
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10543
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10547
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10553
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10557
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10561
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10565
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10571
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10584
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10589
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10595
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10599
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10612
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10617
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10621
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10625
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10629
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10633
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10640
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10644
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10648
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10652
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10659
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10670
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10675
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10681
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10693
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10705
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10717
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10730
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10743
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10756
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10769
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10782
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10795
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10808
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10821
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10834
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10847
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10862
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10889
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10931
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10967
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11003
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11020
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11032
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11052
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11072
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11092
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11108
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11121
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11134
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11147
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11160
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11172
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11184
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11196
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11208
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11220
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11232
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11244
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11256
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11268
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11281
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11294
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11307
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11320
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11335
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11343
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11352
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11362
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11385
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11390
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11396
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11403
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11407
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11412
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11416
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11422
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11428
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11435
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11442
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11451
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11458
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11465
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11474
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11478
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11482
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11488
		{
		}
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11490
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11500
		{
			yyVAL.str = ""
		}
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11504
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
