// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const SELECT = 57349
const STREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const LOWER_THAN_SET = 57363
const SET = 57364
const ALL = 57365
const DISTINCT = 57366
const DISTINCTROW = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const DEFAULT = 57374
const LOCK = 57375
const KEYS = 57376
const VALUES = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const SUBQUERY_AS_EXPR = 57396
const LOWER_THAN_STRING = 57397
const ID = 57398
const AT_ID = 57399
const AT_AT_ID = 57400
const STRING = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const INTEGRAL = 57406
const HEX = 57407
const BIT_LITERAL = 57408
const FLOAT = 57409
const HEXNUM = 57410
const NULL = 57411
const TRUE = 57412
const FALSE = 57413
const LOWER_THAN_CHARSET = 57414
const CHARSET = 57415
const UNIQUE = 57416
const KEY = 57417
const OR = 57418
const PIPE_CONCAT = 57419
const XOR = 57420
const AND = 57421
const NOT = 57422
const BETWEEN = 57423
const CASE = 57424
const WHEN = 57425
const THEN = 57426
const ELSE = 57427
const END = 57428
const LE = 57429
const GE = 57430
const NE = 57431
const NULL_SAFE_EQUAL = 57432
const IS = 57433
const LIKE = 57434
const REGEXP = 57435
const IN = 57436
const ASSIGNMENT = 57437
const SHIFT_LEFT = 57438
const SHIFT_RIGHT = 57439
const DIV = 57440
const MOD = 57441
const UNARY = 57442
const COLLATE = 57443
const BINARY = 57444
const UNDERSCORE_BINARY = 57445
const INTERVAL = 57446
const BEGIN = 57447
const START = 57448
const TRANSACTION = 57449
const COMMIT = 57450
const ROLLBACK = 57451
const WORK = 57452
const CONSISTENT = 57453
const SNAPSHOT = 57454
const CHAIN = 57455
const NO = 57456
const RELEASE = 57457
const PRIORITY = 57458
const QUICK = 57459
const BIT = 57460
const TINYINT = 57461
const SMALLINT = 57462
const MEDIUMINT = 57463
const INT = 57464
const INTEGER = 57465
const BIGINT = 57466
const INTNUM = 57467
const REAL = 57468
const DOUBLE = 57469
const FLOAT_TYPE = 57470
const DECIMAL = 57471
const NUMERIC = 57472
const DECIMAL_VALUE = 57473
const TIME = 57474
const TIMESTAMP = 57475
const DATETIME = 57476
const YEAR = 57477
const CHAR = 57478
const VARCHAR = 57479
const BOOL = 57480
const CHARACTER = 57481
const VARBINARY = 57482
const NCHAR = 57483
const TEXT = 57484
const TINYTEXT = 57485
const MEDIUMTEXT = 57486
const LONGTEXT = 57487
const BLOB = 57488
const TINYBLOB = 57489
const MEDIUMBLOB = 57490
const LONGBLOB = 57491
const JSON = 57492
const ENUM = 57493
const GEOMETRY = 57494
const POINT = 57495
const LINESTRING = 57496
const POLYGON = 57497
const GEOMETRYCOLLECTION = 57498
const MULTIPOINT = 57499
const MULTILINESTRING = 57500
const MULTIPOLYGON = 57501
const INT1 = 57502
const INT2 = 57503
const INT3 = 57504
const INT4 = 57505
const INT8 = 57506
const SQL_SMALL_RESULT = 57507
const SQL_BIG_RESULT = 57508
const SQL_BUFFER_RESULT = 57509
const LOW_PRIORITY = 57510
const HIGH_PRIORITY = 57511
const DELAYED = 57512
const CREATE = 57513
const ALTER = 57514
const DROP = 57515
const RENAME = 57516
const ANALYZE = 57517
const ADD = 57518
const SCHEMA = 57519
const TABLE = 57520
const INDEX = 57521
const VIEW = 57522
const TO = 57523
const IGNORE = 57524
const IF = 57525
const PRIMARY = 57526
const COLUMN = 57527
const CONSTRAINT = 57528
const SPATIAL = 57529
const FULLTEXT = 57530
const FOREIGN = 57531
const KEY_BLOCK_SIZE = 57532
const SHOW = 57533
const DESCRIBE = 57534
const EXPLAIN = 57535
const DATE = 57536
const ESCAPE = 57537
const REPAIR = 57538
const OPTIMIZE = 57539
const TRUNCATE = 57540
const MAXVALUE = 57541
const PARTITION = 57542
const REORGANIZE = 57543
const LESS = 57544
const THAN = 57545
const PROCEDURE = 57546
const TRIGGER = 57547
const STATUS = 57548
const VARIABLES = 57549
const ROLE = 57550
const PROXY = 57551
const AVG_ROW_LENGTH = 57552
const STORAGE = 57553
const DISK = 57554
const MEMORY = 57555
const CHECKSUM = 57556
const COMPRESSION = 57557
const DATA = 57558
const DIRECTORY = 57559
const DELAY_KEY_WRITE = 57560
const ENCRYPTION = 57561
const ENGINE = 57562
const MAX_ROWS = 57563
const MIN_ROWS = 57564
const PACK_KEYS = 57565
const ROW_FORMAT = 57566
const STATS_AUTO_RECALC = 57567
const STATS_PERSISTENT = 57568
const STATS_SAMPLE_PAGES = 57569
const DYNAMIC = 57570
const COMPRESSED = 57571
const REDUNDANT = 57572
const COMPACT = 57573
const FIXED = 57574
const COLUMN_FORMAT = 57575
const AUTO_RANDOM = 57576
const RESTRICT = 57577
const CASCADE = 57578
const ACTION = 57579
const PARTIAL = 57580
const SIMPLE = 57581
const CHECK = 57582
const ENFORCED = 57583
const RANGE = 57584
const LIST = 57585
const ALGORITHM = 57586
const LINEAR = 57587
const PARTITIONS = 57588
const SUBPARTITION = 57589
const SUBPARTITIONS = 57590
const TYPE = 57591
const ANY = 57592
const SOME = 57593
const PREPARE = 57594
const DEALLOCATE = 57595
const PROPERTIES = 57596
const PARSER = 57597
const VISIBLE = 57598
const INVISIBLE = 57599
const BTREE = 57600
const HASH = 57601
const RTREE = 57602
const BSI = 57603
const ZONEMAP = 57604
const LEADING = 57605
const BOTH = 57606
const TRAILING = 57607
const UNKNOWN = 57608
const EXPIRE = 57609
const ACCOUNT = 57610
const UNLOCK = 57611
const DAY = 57612
const NEVER = 57613
const SECOND = 57614
const ASCII = 57615
const COALESCE = 57616
const COLLATION = 57617
const HOUR = 57618
const MICROSECOND = 57619
const MINUTE = 57620
const MONTH = 57621
const QUARTER = 57622
const REPEAT = 57623
const REVERSE = 57624
const ROW_COUNT = 57625
const WEEK = 57626
const REVOKE = 57627
const FUNCTION = 57628
const PRIVILEGES = 57629
const TABLESPACE = 57630
const EXECUTE = 57631
const SUPER = 57632
const GRANT = 57633
const OPTION = 57634
const REFERENCES = 57635
const REPLICATION = 57636
const SLAVE = 57637
const CLIENT = 57638
const USAGE = 57639
const RELOAD = 57640
const FILE = 57641
const TEMPORARY = 57642
const ROUTINE = 57643
const EVENT = 57644
const SHUTDOWN = 57645
const NULLX = 57646
const AUTO_INCREMENT = 57647
const APPROXNUM = 57648
const SIGNED = 57649
const UNSIGNED = 57650
const ZEROFILL = 57651
const USER = 57652
const IDENTIFIED = 57653
const CIPHER = 57654
const ISSUER = 57655
const X509 = 57656
const SUBJECT = 57657
const SAN = 57658
const REQUIRE = 57659
const SSL = 57660
const NONE = 57661
const PASSWORD = 57662
const MAX_QUERIES_PER_HOUR = 57663
const MAX_UPDATES_PER_HOUR = 57664
const MAX_CONNECTIONS_PER_HOUR = 57665
const MAX_USER_CONNECTIONS = 57666
const FORMAT = 57667
const VERBOSE = 57668
const CONNECTION = 57669
const LOAD = 57670
const INFILE = 57671
const TERMINATED = 57672
const OPTIONALLY = 57673
const ENCLOSED = 57674
const ESCAPED = 57675
const STARTING = 57676
const LINES = 57677
const DATABASES = 57678
const TABLES = 57679
const EXTENDED = 57680
const FULL = 57681
const PROCESSLIST = 57682
const FIELDS = 57683
const COLUMNS = 57684
const OPEN = 57685
const ERRORS = 57686
const WARNINGS = 57687
const INDEXES = 57688
const SCHEMAS = 57689
const NAMES = 57690
const GLOBAL = 57691
const SESSION = 57692
const ISOLATION = 57693
const LEVEL = 57694
const READ = 57695
const WRITE = 57696
const ONLY = 57697
const REPEATABLE = 57698
const COMMITTED = 57699
const UNCOMMITTED = 57700
const SERIALIZABLE = 57701
const LOCAL = 57702
const EXCEPT = 57703
const CURRENT_TIMESTAMP = 57704
const DATABASE = 57705
const CURRENT_TIME = 57706
const LOCALTIME = 57707
const LOCALTIMESTAMP = 57708
const UTC_DATE = 57709
const UTC_TIME = 57710
const UTC_TIMESTAMP = 57711
const REPLACE = 57712
const CONVERT = 57713
const SEPARATOR = 57714
const CURRENT_DATE = 57715
const CURRENT_USER = 57716
const CURRENT_ROLE = 57717
const SECOND_MICROSECOND = 57718
const MINUTE_MICROSECOND = 57719
const MINUTE_SECOND = 57720
const HOUR_MICROSECOND = 57721
const HOUR_SECOND = 57722
const HOUR_MINUTE = 57723
const DAY_MICROSECOND = 57724
const DAY_SECOND = 57725
const DAY_MINUTE = 57726
const DAY_HOUR = 57727
const YEAR_MONTH = 57728
const SQL_TSI_HOUR = 57729
const SQL_TSI_DAY = 57730
const SQL_TSI_WEEK = 57731
const SQL_TSI_MONTH = 57732
const SQL_TSI_QUARTER = 57733
const SQL_TSI_YEAR = 57734
const SQL_TSI_SECOND = 57735
const SQL_TSI_MINUTE = 57736
const RECURSIVE = 57737
const CONFIG = 57738
const MATCH = 57739
const AGAINST = 57740
const BOOLEAN = 57741
const LANGUAGE = 57742
const WITH = 57743
const QUERY = 57744
const EXPANSION = 57745
const ADDDATE = 57746
const BIT_AND = 57747
const BIT_OR = 57748
const BIT_XOR = 57749
const CAST = 57750
const COUNT = 57751
const APPROX_COUNT_DISTINCT = 57752
const APPROX_PERCENTILE = 57753
const CURDATE = 57754
const CURTIME = 57755
const DATE_ADD = 57756
const DATE_SUB = 57757
const EXTRACT = 57758
const GROUP_CONCAT = 57759
const MAX = 57760
const MID = 57761
const MIN = 57762
const NOW = 57763
const POSITION = 57764
const SESSION_USER = 57765
const STD = 57766
const STDDEV = 57767
const STDDEV_POP = 57768
const STDDEV_SAMP = 57769
const SUBDATE = 57770
const SUBSTR = 57771
const SUBSTRING = 57772
const SUM = 57773
const SYSDATE = 57774
const SYSTEM_USER = 57775
const TRANSLATE = 57776
const TRIM = 57777
const VARIANCE = 57778
const VAR_POP = 57779
const VAR_SAMP = 57780
const AVG = 57781
const JSON_EXTRACT = 57782
const ROW = 57783
const OUTFILE = 57784
const HEADER = 57785
const MAX_FILE_SIZE = 57786
const FORCE_QUOTE = 57787
const UNUSED = 57788

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"INTEGRAL",
	"HEX",
	"BIT_LITERAL",
	"FLOAT",
	"HEXNUM",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"TYPE",
	"ANY",
	"SOME",
	"PREPARE",
	"DEALLOCATE",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"EXPIRE",
	"ACCOUNT",
	"UNLOCK",
	"DAY",
	"NEVER",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"LOAD",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"DATABASES",
	"TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EXCEPT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT_DISTINCT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"JSON_EXTRACT",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"UNUSED",
	"';'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:6769

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 61,
	18, 407,
	-2, 388,
	-1, 66,
	196, 557,
	-2, 593,
	-1, 81,
	223, 273,
	224, 273,
	-2, 294,
	-1, 333,
	60, 1382,
	465, 1382,
	-2, 97,
	-1, 352,
	60, 718,
	465, 718,
	-2, 555,
	-1, 353,
	60, 548,
	465, 548,
	-2, 556,
	-1, 359,
	18, 408,
	-2, 371,
	-1, 428,
	91, 1262,
	102, 1262,
	121, 1262,
	-2, 1085,
	-1, 456,
	18, 408,
	-2, 371,
	-1, 603,
	55, 1411,
	-2, 1418,
	-1, 611,
	55, 1412,
	-2, 1426,
	-1, 613,
	55, 1408,
	-2, 1428,
	-1, 614,
	55, 1409,
	-2, 1429,
	-1, 619,
	55, 1410,
	-2, 1435,
	-1, 620,
	55, 1413,
	-2, 1436,
	-1, 621,
	55, 1414,
	-2, 1437,
	-1, 622,
	55, 848,
	-2, 1438,
	-1, 623,
	55, 849,
	-2, 1439,
	-1, 624,
	55, 850,
	-2, 1440,
	-1, 626,
	55, 1415,
	-2, 1442,
	-1, 627,
	55, 868,
	-2, 1443,
	-1, 628,
	55, 867,
	-2, 1444,
	-1, 631,
	55, 1416,
	-2, 1447,
	-1, 632,
	55, 1417,
	-2, 1448,
	-1, 638,
	55, 930,
	-2, 1262,
	-1, 639,
	55, 939,
	-2, 1288,
	-1, 640,
	55, 943,
	-2, 1327,
	-1, 641,
	55, 954,
	-2, 1387,
	-1, 642,
	55, 956,
	-2, 1397,
	-1, 643,
	55, 944,
	-2, 1402,
	-1, 644,
	55, 952,
	-2, 1406,
	-1, 645,
	55, 933,
	-2, 1407,
	-1, 797,
	1, 583,
	57, 583,
	464, 583,
	-2, 590,
	-1, 934,
	18, 407,
	-2, 776,
	-1, 981,
	121, 1095,
	-2, 1093,
	-1, 983,
	121, 497,
	-2, 1090,
	-1, 984,
	121, 498,
	-2, 1091,
	-1, 1172,
	1, 584,
	57, 584,
	464, 584,
	-2, 590,
	-1, 1259,
	55, 997,
	-2, 1404,
	-1, 1260,
	55, 998,
	-2, 1405,
	-1, 1422,
	53, 328,
	56, 328,
	-2, 682,
	-1, 1739,
	76, 590,
	117, 590,
	153, 590,
	156, 590,
	-2, 630,
	-1, 1741,
	257, 743,
	-2, 724,
	-1, 1765,
	53, 328,
	56, 328,
	-2, 683,
	-1, 1850,
	76, 590,
	117, 590,
	153, 590,
	156, 590,
	-2, 631,
	-1, 1878,
	257, 743,
	-2, 725,
	-1, 2262,
	56, 605,
	57, 605,
	-2, 590,
	-1, 2266,
	56, 605,
	57, 605,
	-2, 590,
	-1, 2278,
	56, 609,
	57, 609,
	-2, 590,
	-1, 2281,
	56, 610,
	57, 610,
	-2, 590,
}

const yyPrivate = 57344

const yyLast = 23359

var yyAct = [...]int{
	784, 2266, 1262, 2268, 2265, 2273, 2239, 648, 2213, 773,
	1908, 646, 2104, 667, 2184, 2228, 1219, 1890, 2165, 2078,
	2166, 1846, 2059, 537, 1906, 1733, 1159, 98, 865, 2014,
	2081, 1907, 312, 318, 574, 318, 2066, 582, 360, 1215,
	1898, 359, 1794, 101, 426, 1921, 801, 1458, 831, 1425,
	322, 1897, 1559, 525, 1787, 1547, 1797, 851, 354, 354,
	1759, 1805, 516, 679, 61, 1437, 1604, 1587, 602, 383,
	316, 22, 1809, 825, 1879, 97, 1563, 1214, 1406, 1575,
	1745, 1564, 963, 1165, 1634, 1568, 1642, 1178, 1624, 427,
	1613, 1500, 451, 304, 768, 61, 1263, 98, 978, 972,
	981, 973, 1463, 527, 1250, 1346, 964, 828, 657, 1332,
	647, 844, 1201, 1436, 826, 803, 60, 3, 1854, 315,
	15, 1400, 1177, 434, 29, 786, 385, 769, 429, 313,
	6, 431, 1173, 810, 649, 1261, 595, 324, 811, 314,
	5, 1276, 771, 848, 812, 453, 305, 867, 1264, 1141,
	466, 1217, 308, 870, 433, 29, 901, 418, 61, 1241,
	382, 326, 760, 550, 504, 22, 1148, 325, 483, 94,
	12, 1932, 1842, 7, 4, 1732, 781, 966, 419, 594,
	89, 92, 1382, 93, 1144, 93, 1548, 317, 552, 1401,
	2131, 93, 583, 2121, 548, 93, 356, 26, 83, 67,
	329, 329, 566, 514, 1389, 93, 729, 432, 372, 544,
	303, 1526, 450, 93, 15, 26, 83, 67, 29, 726,
	838, 503, 320, 380, 6, 438, 437, 833, 834, 2153,
	1392, 90, 404, 90, 5, 814, 553, 776, 93, 728,
	26, 83, 67, 90, 536, 538, 539, 535, 538, 539,
	749, 2151, 498, 90, 2188, 436, 494, 2169, 2170, 2012,
	390, 90, 2015, 2016, 2017, 2018, 1551, 2092, 1552, 2095,
	1553, 1935, 1734, 780, 1576, 1577, 1578, 1579, 1374, 460,
	1605, 845, 1144, 1608, 1146, 469, 90, 1409, 1407, 1404,
	1408, 1410, 405, 1403, 1402, 1918, 1839, 1409, 1407, 440,
	1408, 1410, 1793, 1792, 485, 1998, 459, 1895, 496, 497,
	495, 1580, 1729, 484, 361, 1776, 458, 1772, 2155, 1775,
	318, 2179, 98, 319, 489, 374, 1987, 2258, 2274, 761,
	2193, 2130, 1607, 2150, 2106, 371, 370, 1253, 1254, 1255,
	1569, 1572, 455, 457, 2200, 431, 456, 1981, 1251, 2249,
	2102, 2103, 490, 2106, 2080, 763, 366, 435, 2168, 2128,
	1950, 1468, 1254, 1255, 2067, 2068, 2069, 2071, 2070, 1949,
	476, 358, 2112, 61, 61, 433, 66, 562, 91, 2157,
	2158, 492, 383, 1976, 1412, 1413, 1414, 1415, 2275, 2269,
	469, 1501, 1390, 517, 545, 549, 81, 2133, 2134, 2240,
	534, 533, 1938, 452, 430, 480, 2090, 1773, 551, 1386,
	439, 1228, 493, 1152, 788, 354, 1572, 519, 1730, 321,
	515, 427, 427, 427, 522, 509, 354, 354, 432, 518,
	1456, 520, 487, 29, 29, 471, 470, 762, 377, 378,
	379, 318, 598, 598, 488, 491, 396, 1224, 369, 1789,
	1788, 1226, 1225, 556, 486, 731, 2231, 836, 365, 1573,
	1972, 579, 462, 463, 1566, 2044, 554, 555, 1567, 1570,
	837, 1223, 835, 747, 407, 2253, 408, 2217, 1768, 1593,
	354, 354, 459, 354, 1554, 1465, 1426, 1944, 1380, 529,
	1379, 919, 774, 732, 585, 1373, 541, 542, 304, 1368,
	1193, 354, 354, 1157, 1138, 882, 735, 474, 581, 472,
	454, 373, 859, 1597, 1540, 61, 2156, 354, 528, 354,
	1571, 797, 727, 398, 383, 530, 397, 802, 61, 2079,
	531, 98, 538, 539, 1573, 2235, 793, 61, 597, 597,
	471, 470, 2132, 508, 756, 819, 1548, 500, 1252, 354,
	2226, 98, 561, 506, 538, 539, 846, 329, 1409, 1407,
	1167, 1408, 1410, 354, 427, 2232, 354, 817, 576, 576,
	1771, 1147, 1467, 482, 464, 1774, 567, 789, 1588, 807,
	1977, 1978, 860, 1383, 443, 448, 449, 568, 29, 354,
	354, 864, 98, 755, 68, 778, 68, 29, 879, 569,
	570, 571, 68, 752, 783, 524, 68, 787, 820, 868,
	758, 790, 584, 751, 2116, 303, 68, 738, 430, 532,
	1611, 733, 724, 329, 68, 775, 572, 573, 593, 779,
	588, 589, 590, 591, 592, 565, 869, 808, 809, 805,
	866, 1370, 772, 821, 754, 806, 764, 753, 750, 68,
	734, 1230, 540, 410, 936, 543, 792, 815, 816, 1542,
	396, 329, 777, 852, 1707, 742, 743, 1266, 1265, 852,
	852, 782, 1143, 1974, 461, 1702, 813, 1973, 2045, 2047,
	2048, 2049, 2046, 862, 799, 798, 2229, 2230, 409, 1681,
	1678, 1679, 1680, 847, 1347, 1712, 883, 1711, 1710, 1708,
	842, 1418, 412, 411, 1339, 329, 564, 375, 1398, 1541,
	824, 1347, 791, 1506, 875, 934, 857, 858, 1337, 1338,
	1336, 843, 1142, 878, 875, 1983, 1488, 863, 1982, 970,
	970, 975, 329, 876, 877, 878, 875, 398, 1749, 1744,
	397, 1967, 1704, 445, 446, 447, 2264, 861, 935, 1831,
	2245, 746, 983, 1271, 2210, 2194, 943, 1709, 2248, 745,
	802, 2140, 1475, 937, 938, 939, 940, 941, 432, 2055,
	2053, 1487, 854, 855, 856, 945, 413, 2051, 1274, 984,
	922, 923, 924, 925, 926, 919, 1830, 909, 1275, 98,
	98, 406, 433, 876, 877, 878, 875, 1509, 2247, 1179,
	1508, 2041, 959, 61, 2054, 2052, 1140, 2088, 876, 877,
	878, 875, 2050, 1882, 312, 876, 877, 878, 875, 1847,
	1419, 1195, 2087, 876, 877, 878, 875, 2162, 868, 2061,
	969, 876, 877, 878, 875, 2039, 2040, 1162, 1164, 354,
	2038, 2037, 953, 2034, 2028, 432, 2025, 1885, 2189, 876,
	877, 878, 875, 1880, 2024, 869, 1933, 1926, 1893, 1894,
	354, 1925, 1924, 29, 1881, 1920, 1160, 1161, 1919, 1297,
	1713, 1714, 598, 1912, 98, 1220, 1755, 1754, 962, 1753,
	1752, 1246, 1538, 1248, 736, 2178, 2161, 982, 794, 795,
	796, 1137, 1136, 2060, 2110, 2109, 1222, 976, 1886, 977,
	2278, 1183, 1272, 1273, 1156, 1196, 920, 921, 922, 923,
	924, 925, 926, 919, 1187, 2086, 1174, 876, 877, 878,
	875, 1691, 2042, 1184, 1185, 1186, 2035, 1151, 2031, 1320,
	1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
	1331, 1155, 2030, 2029, 1341, 1342, 1189, 1240, 1191, 1221,
	1969, 852, 852, 852, 1256, 2084, 813, 1356, 1934, 1188,
	1190, 959, 1192, 1922, 876, 877, 878, 875, 597, 1358,
	1459, 2256, 1242, 1243, 1244, 1245, 1227, 876, 877, 878,
	875, 329, 1892, 1845, 1565, 1843, 1238, 1762, 876, 877,
	878, 875, 1720, 1585, 1269, 1584, 1583, 1582, 1231, 1232,
	1233, 1361, 1235, 1154, 1293, 1153, 1290, 1311, 1239, 1888,
	1292, 1289, 1291, 1295, 1296, 695, 694, 2137, 1294, 2246,
	917, 927, 928, 920, 921, 922, 923, 924, 925, 926,
	919, 1887, 1889, 955, 916, 915, 737, 1511, 1334, 1471,
	2283, 1348, 1340, 1351, 1267, 1268, 1515, 1270, 2136, 1471,
	1514, 2277, 2276, 1306, 1307, 1308, 1309, 1310, 1150, 2259,
	1316, 1317, 1318, 1319, 2117, 918, 917, 927, 928, 920,
	921, 922, 923, 924, 925, 926, 919, 2005, 1362, 2255,
	2254, 2279, 1350, 1352, 1353, 323, 2001, 1349, 1150, 2243,
	2000, 1895, 1357, 1834, 1359, 886, 887, 888, 889, 890,
	891, 892, 884, 1883, 876, 877, 878, 875, 1832, 1360,
	1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
	1288, 1300, 1301, 1302, 1303, 1304, 1305, 1298, 1299, 927,
	928, 920, 921, 922, 923, 924, 925, 926, 919, 1375,
	363, 1698, 1150, 2242, 355, 354, 2216, 2215, 354, 804,
	362, 459, 1829, 354, 1994, 2176, 2010, 1821, 1395, 1994,
	2171, 1385, 918, 917, 927, 928, 920, 921, 922, 923,
	924, 925, 926, 919, 1237, 2159, 1786, 1422, 876, 877,
	878, 875, 1992, 1428, 2148, 2147, 1994, 2126, 1994, 2125,
	1739, 587, 1211, 93, 1433, 26, 83, 67, 1722, 459,
	98, 98, 98, 98, 876, 877, 878, 875, 88, 1438,
	1927, 459, 98, 1453, 1623, 77, 1397, 1994, 2124, 1417,
	1598, 1438, 1994, 2123, 1518, 1420, 2115, 2114, 804, 354,
	2009, 2008, 876, 877, 878, 875, 49, 98, 98, 1817,
	1592, 90, 1516, 1424, 61, 1816, 1513, 1387, 2007, 2006,
	1512, 22, 1393, 1394, 1815, 787, 1454, 1510, 1719, 1480,
	1220, 876, 877, 878, 875, 2003, 2004, 876, 877, 878,
	875, 1610, 1381, 1476, 1376, 1477, 876, 877, 878, 875,
	876, 877, 878, 875, 1396, 1461, 1462, 2003, 2002, 1470,
	1384, 1174, 1455, 1430, 1435, 1431, 1182, 1999, 1427, 1421,
	15, 1994, 1993, 1429, 29, 1416, 1701, 1355, 84, 85,
	6, 86, 87, 1354, 1439, 1440, 1441, 1442, 1434, 1452,
	5, 1695, 1450, 1457, 1451, 586, 1432, 2234, 876, 877,
	878, 875, 1471, 1696, 1210, 1694, 1471, 1682, 1495, 1471,
	1479, 1471, 1460, 876, 877, 878, 875, 1471, 1478, 1363,
	1498, 1499, 1182, 1377, 1372, 1371, 1466, 876, 877, 878,
	875, 1472, 1366, 1365, 1473, 1474, 1469, 970, 1211, 1530,
	970, 1182, 1181, 1533, 66, 82, 91, 1423, 47, 354,
	1150, 1149, 873, 354, 354, 740, 739, 354, 1740, 93,
	1536, 479, 83, 67, 81, 76, 75, 499, 477, 934,
	459, 478, 478, 1482, 1483, 1484, 1485, 1486, 1693, 1490,
	1562, 1144, 98, 1491, 1492, 1493, 1494, 1537, 1723, 1520,
	1211, 1424, 1525, 480, 98, 1179, 871, 1596, 1532, 61,
	876, 877, 878, 875, 1369, 480, 1527, 90, 1986, 1344,
	1237, 1503, 1158, 1139, 1507, 1334, 1496, 523, 1497, 563,
	1529, 1505, 432, 1692, 2225, 78, 79, 1519, 93, 2219,
	1586, 852, 2201, 2198, 2196, 1521, 1627, 852, 1528, 1531,
	1522, 2139, 1534, 1539, 1535, 876, 877, 878, 875, 1688,
	2076, 1546, 2064, 2062, 1581, 2057, 1589, 1590, 57, 2019,
	1796, 1990, 80, 1170, 58, 1687, 1989, 1594, 1988, 1686,
	1985, 876, 877, 878, 875, 1980, 90, 1622, 1965, 526,
	354, 1806, 1595, 1591, 1798, 1685, 354, 876, 877, 878,
	875, 876, 877, 878, 875, 1543, 1545, 1810, 1813, 1718,
	1803, 59, 1618, 1802, 1782, 1757, 1601, 876, 877, 878,
	875, 1750, 1335, 90, 1715, 354, 1599, 1600, 1399, 475,
	1717, 1684, 1609, 1364, 1229, 1627, 2263, 98, 1632, 1197,
	1180, 961, 960, 958, 957, 956, 1743, 1621, 1629, 954,
	902, 1700, 951, 876, 877, 878, 875, 1631, 1683, 950,
	876, 877, 878, 875, 948, 1689, 1690, 947, 354, 1697,
	354, 1630, 946, 98, 1765, 1706, 944, 914, 913, 876,
	877, 878, 875, 1703, 68, 1738, 912, 911, 1716, 1724,
	1721, 459, 1699, 876, 877, 878, 875, 910, 908, 61,
	907, 1438, 1758, 906, 905, 904, 1737, 903, 900, 1785,
	1728, 1747, 899, 898, 897, 1220, 1367, 896, 1343, 895,
	401, 894, 893, 759, 730, 1742, 1767, 1741, 1778, 481,
	1748, 431, 576, 1746, 1751, 1746, 2206, 1198, 576, 1756,
	876, 877, 878, 875, 1614, 1615, 1764, 2204, 2167, 1763,
	1770, 1617, 1411, 1236, 501, 1620, 1779, 1203, 1206, 1207,
	1208, 1204, 396, 1205, 1209, 1447, 1619, 1725, 1800, 1801,
	1448, 1790, 1203, 1206, 1207, 1208, 1204, 1444, 1205, 1209,
	1443, 1799, 1804, 1549, 1445, 1808, 1175, 505, 1780, 1446,
	1766, 1781, 48, 1449, 1783, 1207, 1208, 1769, 1160, 1161,
	1726, 1556, 1784, 1807, 1168, 823, 28, 354, 354, 1727,
	576, 98, 1760, 27, 1936, 1555, 1213, 800, 1266, 1265,
	2181, 459, 300, 1851, 547, 1899, 1901, 546, 1899, 1899,
	1822, 1562, 1811, 1824, 1814, 1826, 301, 507, 459, 398,
	511, 512, 397, 302, 1135, 1823, 2220, 1819, 1827, 1828,
	2144, 2142, 2097, 1825, 2096, 2094, 2022, 2020, 1844, 1840,
	1777, 1835, 1736, 802, 1838, 2223, 1900, 1735, 1818, 1626,
	510, 362, 1848, 1876, 395, 363, 1625, 1464, 804, 1902,
	1903, 1820, 399, 2208, 2207, 362, 1481, 1378, 473, 2207,
	2208, 1212, 1904, 386, 34, 1767, 1915, 1, 1896, 521,
	852, 376, 1312, 513, 744, 1914, 442, 468, 741, 1916,
	467, 918, 917, 927, 928, 920, 921, 922, 923, 924,
	925, 926, 919, 465, 1345, 1277, 680, 1905, 965, 1923,
	971, 2058, 2180, 2212, 1940, 2138, 2183, 757, 666, 2089,
	1550, 2011, 2091, 2013, 1930, 1391, 1929, 1388, 502, 1836,
	1837, 1523, 1524, 692, 683, 949, 685, 725, 444, 1910,
	1911, 682, 1913, 1606, 364, 441, 930, 354, 933, 387,
	1917, 1731, 1791, 1812, 1968, 1795, 98, 2272, 2262, 1943,
	2238, 2218, 931, 932, 929, 1901, 918, 917, 927, 928,
	920, 921, 922, 923, 924, 925, 926, 919, 2105, 2257,
	1941, 1942, 2149, 1945, 1946, 1947, 1948, 1517, 1928, 1951,
	1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961,
	1962, 1963, 1964, 2023, 1984, 1991, 2199, 1970, 2192, 1997,
	2101, 1995, 431, 1966, 1937, 1896, 327, 839, 557, 392,
	416, 394, 404, 2077, 2056, 1574, 391, 389, 388, 400,
	393, 1405, 402, 403, 918, 917, 927, 928, 920, 921,
	922, 923, 924, 925, 926, 919, 459, 1166, 1145, 459,
	459, 459, 770, 2036, 328, 459, 2129, 1220, 2221, 2063,
	61, 367, 1169, 368, 1172, 1171, 1996, 2021, 1257, 885,
	2065, 2026, 2027, 2073, 2074, 2075, 1333, 2032, 2033, 384,
	2099, 952, 2083, 942, 2072, 600, 2082, 354, 354, 1760,
	1504, 656, 650, 1603, 1602, 2085, 1891, 818, 33, 32,
	31, 874, 2100, 2093, 918, 917, 927, 928, 920, 921,
	922, 923, 924, 925, 926, 919, 979, 681, 98, 100,
	1194, 2107, 2108, 980, 2098, 459, 1931, 2185, 665, 664,
	663, 662, 661, 1202, 1200, 1199, 830, 459, 829, 872,
	2164, 2163, 2119, 2120, 1841, 1979, 2113, 2043, 1975, 2122,
	1971, 2111, 1850, 1849, 1877, 1878, 1884, 1641, 1637, 1639,
	1640, 2127, 1638, 1705, 1633, 1560, 866, 1561, 1558, 1557,
	1616, 2135, 1612, 967, 974, 785, 2143, 2141, 2145, 2146,
	95, 827, 11, 10, 748, 9, 2152, 2154, 14, 21,
	20, 19, 56, 55, 54, 53, 18, 8, 2160, 52,
	2187, 51, 50, 17, 16, 46, 44, 43, 42, 2191,
	41, 40, 39, 2186, 2172, 2173, 2174, 2175, 38, 2118,
	45, 37, 36, 2195, 35, 2197, 2190, 65, 64, 576,
	576, 63, 62, 23, 24, 25, 74, 73, 70, 72,
	71, 69, 2202, 30, 13, 2205, 2203, 2, 0, 2214,
	0, 0, 0, 0, 2209, 0, 2211, 459, 2177, 459,
	0, 0, 0, 0, 0, 0, 2222, 774, 2224, 774,
	0, 0, 0, 2227, 0, 0, 0, 2187, 2237, 0,
	0, 0, 0, 0, 2233, 0, 459, 0, 0, 0,
	2186, 2236, 0, 2241, 0, 2244, 774, 0, 0, 0,
	0, 0, 2214, 2250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2260, 0, 0, 0, 0, 0,
	0, 0, 2261, 0, 0, 0, 0, 0, 0, 0,
	2271, 2270, 0, 0, 0, 0, 0, 0, 0, 0,
	2281, 0, 2282, 2280, 0, 2271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1093, 1080, 0,
	1042, 1095, 1016, 1031, 1103, 1032, 1033, 1067, 995, 1051,
	225, 1029, 0, 1083, 987, 1019, 1020, 989, 1026, 990,
	1017, 1044, 169, 1015, 1054, 195, 1101, 0, 0, 254,
	209, 0, 2252, 1047, 1085, 1049, 1072, 1041, 1068, 1003,
	1061, 1096, 1030, 1065, 1097, 0, 0, 0, 0, 0,
	794, 795, 796, 0, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 1064, 1090, 1028, 0, 154, 1094, 1048,
	1066, 0, 0, 988, 1062, 0, 993, 996, 1102, 1088,
	1023, 1024, 0, 0, 0, 0, 0, 0, 0, 1045,
	1050, 1069, 1038, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1021, 0, 1058, 0, 0, 0, 998, 994,
	0, 1043, 0, 143, 259, 273, 152, 250, 286, 157,
	257, 148, 224, 246, 0, 1134, 145, 271, 256, 206,
	189, 190, 144, 0, 241, 167, 181, 164, 222, 0,
	1092, 298, 163, 289, 997, 281, 147, 1129, 280, 221,
	268, 272, 207, 201, 146, 270, 205, 200, 193, 171,
	185, 233, 199, 234, 186, 211, 210, 212, 1113, 1114,
	1115, 1116, 1117, 1125, 1126, 0, 1130, 1131, 1132, 1002,
	0, 1022, 1070, 0, 986, 1078, 1086, 1040, 283, 1089,
	1037, 1036, 1120, 0, 1119, 258, 1121, 1122, 194, 1084,
	1018, 1027, 299, 1025, 244, 227, 1091, 1057, 1133, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 139, 261,
	166, 208, 149, 150, 162, 168, 170, 172, 173, 217,
	218, 230, 249, 262, 263, 264, 165, 158, 243, 159,
	183, 160, 140, 251, 161, 141, 231, 267, 1118, 179,
	239, 204, 142, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1127, 0, 1128, 295, 176, 985, 278, 0, 223,
	1081, 991, 1001, 999, 1034, 1059, 1060, 219, 294, 1074,
	1077, 1075, 1104, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 992, 0, 255, 276, 288, 279, 1035,
	1009, 1046, 287, 1012, 1010, 1073, 1011, 1063, 1106, 213,
	214, 215, 216, 180, 0, 156, 1055, 1039, 1107, 1108,
	1109, 1110, 1111, 1112, 1014, 1087, 175, 182, 0, 184,
	155, 228, 178, 285, 191, 1079, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 153, 275, 253, 202, 177,
	1008, 1013, 1007, 1052, 1053, 1098, 1099, 1100, 1071, 1000,
	1082, 1004, 1006, 1005, 918, 917, 927, 928, 920, 921,
	922, 923, 924, 925, 926, 919, 0, 0, 0, 0,
	0, 0, 0, 1076, 0, 1056, 138, 0, 196, 1105,
	237, 174, 688, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	658, 0, 0, 0, 169, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 1833, 0, 0, 703, 709, 1123,
	1124, 291, 292, 293, 277, 0, 0, 0, 651, 0,
	0, 0, 601, 695, 694, 668, 677, 0, 0, 151,
	669, 0, 676, 670, 674, 673, 671, 672, 0, 638,
	0, 0, 0, 0, 0, 0, 599, 655, 0, 659,
	918, 917, 927, 928, 920, 921, 922, 923, 924, 925,
	926, 919, 0, 0, 0, 0, 0, 0, 0, 0,
	652, 653, 0, 0, 0, 0, 689, 0, 654, 0,
	0, 691, 0, 678, 0, 143, 259, 273, 152, 250,
	286, 157, 257, 148, 224, 246, 0, 0, 145, 271,
	256, 206, 189, 190, 144, 0, 241, 167, 181, 164,
	222, 675, 687, 644, 163, 642, 686, 281, 147, 1502,
	280, 221, 268, 272, 207, 201, 146, 270, 205, 200,
	193, 171, 185, 233, 199, 234, 186, 211, 210, 212,
	918, 917, 927, 928, 920, 921, 922, 923, 924, 925,
	926, 919, 0, 0, 0, 0, 0, 684, 0, 0,
	283, 0, 0, 702, 0, 0, 0, 258, 0, 0,
	194, 0, 0, 0, 645, 0, 244, 227, 712, 0,
	0, 242, 197, 269, 235, 274, 260, 282, 238, 236,
	139, 261, 166, 208, 149, 150, 162, 168, 170, 172,
	173, 217, 218, 230, 249, 262, 263, 264, 165, 158,
	243, 159, 183, 160, 140, 251, 161, 141, 231, 267,
	0, 179, 239, 204, 142, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1314, 1313, 1315, 295, 176, 0, 278,
	700, 223, 711, 696, 697, 698, 701, 704, 705, 640,
	643, 706, 708, 710, 713, 247, 0, 0, 0, 0,
	0, 188, 229, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 276, 288,
	641, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	690, 213, 214, 215, 216, 639, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 182,
	0, 184, 155, 228, 178, 285, 191, 0, 220, 187,
	252, 192, 198, 240, 284, 226, 245, 153, 275, 253,
	202, 177, 719, 699, 718, 720, 721, 717, 722, 723,
	707, 660, 0, 715, 714, 716, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	196, 0, 237, 174, 603, 604, 605, 606, 607, 608,
	609, 610, 611, 612, 613, 614, 615, 616, 617, 117,
	618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	693, 0, 0, 291, 292, 293, 277, 93, 0, 688,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 658, 0, 0,
	0, 169, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 703, 709, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 651, 0, 0, 0, 601,
	695, 694, 668, 677, 0, 0, 151, 669, 0, 676,
	670, 674, 673, 671, 672, 0, 638, 0, 0, 0,
	0, 0, 0, 599, 655, 0, 659, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 652, 653, 0,
	0, 0, 0, 689, 0, 654, 0, 0, 691, 0,
	678, 0, 143, 259, 273, 152, 250, 286, 157, 257,
	148, 224, 246, 0, 0, 145, 271, 256, 206, 189,
	190, 144, 0, 241, 167, 181, 164, 222, 675, 687,
	644, 163, 642, 686, 281, 147, 0, 280, 221, 268,
	272, 207, 201, 146, 270, 205, 200, 193, 171, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 684, 0, 0, 283, 0, 0,
	702, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 645, 0, 244, 227, 712, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 700, 223, 711,
	696, 697, 698, 701, 704, 705, 640, 643, 706, 708,
	710, 713, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 641, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 690, 213, 214,
	215, 216, 639, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 719,
	699, 718, 720, 721, 717, 722, 723, 707, 660, 0,
	715, 714, 716, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 68, 237,
	174, 603, 604, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 117, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 693, 688, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 658, 0, 0, 0,
	169, 853, 0, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 703, 709, 0, 0, 0, 0, 0,
	0, 849, 0, 0, 651, 0, 0, 0, 601, 695,
	694, 668, 677, 0, 0, 151, 669, 0, 676, 670,
	674, 673, 671, 672, 0, 638, 0, 0, 0, 0,
	0, 0, 599, 655, 0, 659, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 652, 653, 0, 0,
	0, 0, 689, 0, 654, 0, 0, 850, 0, 678,
	0, 143, 259, 273, 152, 250, 286, 157, 257, 148,
	224, 246, 0, 0, 145, 271, 256, 206, 189, 190,
	144, 0, 241, 167, 181, 164, 222, 675, 687, 644,
	163, 642, 686, 281, 147, 0, 280, 221, 268, 272,
	207, 201, 146, 270, 205, 200, 193, 171, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 684, 0, 0, 283, 0, 0, 702,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	645, 0, 244, 227, 712, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 139, 261, 166, 208,
	149, 150, 162, 168, 170, 172, 173, 217, 218, 230,
	249, 262, 263, 264, 165, 158, 243, 159, 183, 160,
	140, 251, 161, 141, 231, 267, 0, 179, 239, 204,
	142, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 176, 0, 278, 700, 223, 711, 696,
	697, 698, 701, 704, 705, 640, 643, 706, 708, 710,
	713, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 641, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 690, 213, 214, 215,
	216, 639, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 182, 0, 184, 155, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 153, 275, 253, 202, 177, 719, 699,
	718, 720, 721, 717, 722, 723, 707, 660, 0, 715,
	714, 716, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 196, 0, 237, 174,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 117, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 693, 688, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 658, 0, 0, 0, 169,
	2251, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 703, 709, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 651, 0, 0, 0, 601, 695, 694,
	668, 677, 0, 0, 151, 669, 0, 676, 670, 674,
	673, 671, 672, 0, 638, 0, 0, 0, 0, 0,
	0, 599, 655, 0, 659, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 652, 653, 0, 0, 0,
	0, 689, 0, 654, 0, 0, 691, 0, 678, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 675, 687, 644, 163,
	642, 686, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 684, 0, 0, 283, 0, 0, 702, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 645,
	0, 244, 227, 712, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 139, 261, 166, 208, 149,
	150, 162, 168, 170, 172, 173, 217, 218, 230, 249,
	262, 263, 264, 165, 158, 243, 159, 183, 160, 140,
	251, 161, 141, 231, 267, 0, 179, 239, 204, 142,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 176, 0, 278, 700, 223, 711, 696, 697,
	698, 701, 704, 705, 640, 643, 706, 708, 710, 713,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 641, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 690, 213, 214, 215, 216,
	639, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 182, 0, 184, 155, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 153, 275, 253, 202, 177, 719, 699, 718,
	720, 721, 717, 722, 723, 707, 660, 0, 715, 714,
	716, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 196, 0, 237, 174, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 117, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 693, 688, 0, 291, 292,
	293, 277, 0, 0, 0, 0, 225, 0, 0, 0,
	0, 0, 0, 0, 658, 0, 0, 0, 169, 853,
	0, 195, 0, 0, 0, 254, 209, 0, 0, 0,
	0, 703, 709, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 651, 0, 0, 0, 601, 695, 694, 668,
	677, 0, 0, 151, 669, 0, 676, 670, 674, 673,
	671, 672, 0, 638, 0, 0, 0, 0, 0, 0,
	599, 655, 0, 659, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 652, 653, 0, 0, 0, 0,
	689, 0, 654, 0, 0, 691, 0, 678, 0, 143,
	259, 273, 152, 250, 286, 157, 257, 148, 224, 246,
	0, 0, 145, 271, 256, 206, 189, 190, 144, 0,
	241, 167, 181, 164, 222, 675, 687, 644, 163, 642,
	686, 281, 147, 0, 280, 221, 268, 272, 207, 201,
	146, 270, 205, 200, 193, 171, 185, 233, 199, 234,
	186, 211, 210, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 684, 0, 0, 283, 0, 0, 702, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 645, 0,
	244, 227, 712, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 700, 223, 711, 696, 697, 698,
	701, 704, 705, 640, 643, 706, 708, 710, 713, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 641, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 690, 213, 214, 215, 216, 639,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 719, 699, 718, 720,
	721, 717, 722, 723, 707, 660, 0, 715, 714, 716,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 196, 0, 237, 174, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 117, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 693, 0, 0, 291, 292, 293,
	277, 688, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 225, 0, 0, 0, 0, 0, 0, 0, 658,
	0, 0, 0, 169, 0, 0, 195, 0, 0, 0,
	254, 209, 0, 0, 0, 0, 703, 709, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 651, 0, 0,
	0, 601, 695, 694, 668, 677, 0, 0, 151, 669,
	0, 676, 670, 674, 673, 671, 672, 0, 638, 0,
	0, 0, 0, 0, 0, 599, 655, 0, 659, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 652,
	653, 0, 0, 0, 0, 689, 0, 654, 0, 0,
	691, 0, 678, 0, 143, 259, 273, 152, 250, 286,
	157, 257, 148, 224, 246, 0, 0, 145, 271, 256,
	206, 189, 190, 144, 0, 241, 167, 181, 164, 222,
	675, 687, 644, 163, 642, 686, 281, 147, 0, 280,
	221, 268, 272, 207, 201, 146, 270, 205, 200, 193,
	171, 185, 233, 199, 234, 186, 211, 210, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 684, 0, 0, 283,
	0, 0, 702, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 645, 0, 244, 227, 712, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 139,
	261, 166, 208, 149, 150, 162, 168, 170, 172, 173,
	217, 218, 230, 249, 262, 263, 264, 165, 158, 243,
	159, 183, 160, 140, 251, 161, 141, 231, 267, 0,
	179, 239, 204, 142, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 176, 0, 278, 700,
	223, 711, 696, 697, 698, 701, 704, 705, 640, 643,
	706, 708, 710, 713, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 641,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 690,
	213, 214, 215, 216, 639, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 182, 0,
	184, 155, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 153, 275, 253, 202,
	177, 719, 699, 718, 720, 721, 717, 722, 723, 707,
	660, 0, 715, 714, 716, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 196,
	0, 237, 174, 603, 604, 605, 606, 607, 608, 609,
	610, 611, 612, 613, 614, 615, 616, 617, 117, 618,
	619, 620, 621, 622, 623, 624, 625, 626, 627, 628,
	629, 630, 631, 632, 633, 634, 635, 636, 637, 693,
	688, 0, 291, 292, 293, 277, 0, 0, 0, 0,
	225, 0, 0, 0, 0, 0, 0, 0, 658, 0,
	0, 0, 169, 0, 0, 195, 0, 0, 0, 254,
	209, 0, 0, 0, 0, 703, 709, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 651, 0, 0, 0,
	601, 695, 694, 668, 677, 0, 0, 151, 669, 0,
	676, 670, 674, 673, 671, 672, 0, 638, 0, 0,
	0, 0, 0, 0, 599, 655, 0, 659, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 652, 653,
	596, 0, 0, 0, 689, 0, 654, 0, 0, 691,
	0, 678, 0, 143, 259, 273, 152, 250, 286, 157,
	257, 148, 224, 246, 0, 0, 145, 271, 256, 206,
	189, 190, 144, 0, 241, 167, 181, 164, 222, 675,
	687, 644, 163, 642, 686, 281, 147, 0, 280, 221,
	268, 272, 207, 201, 146, 270, 205, 200, 193, 171,
	185, 233, 199, 234, 186, 211, 210, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 684, 0, 0, 283, 0,
	0, 702, 0, 0, 0, 258, 0, 0, 194, 0,
	0, 0, 645, 0, 244, 227, 712, 0, 0, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 139, 261,
	166, 208, 149, 150, 162, 168, 170, 172, 173, 217,
	218, 230, 249, 262, 263, 264, 165, 158, 243, 159,
	183, 160, 140, 251, 161, 141, 231, 267, 0, 179,
	239, 204, 142, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 176, 0, 278, 700, 223,
	711, 696, 697, 698, 701, 704, 705, 640, 643, 706,
	708, 710, 713, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 276, 288, 641, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 690, 213,
	214, 215, 216, 639, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 182, 0, 184,
	155, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 153, 275, 253, 202, 177,
	719, 699, 718, 720, 721, 717, 722, 723, 707, 660,
	0, 715, 714, 716, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 196, 0,
	237, 174, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 117, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 693, 688,
	0, 291, 292, 293, 277, 0, 0, 0, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 658, 0, 0,
	0, 169, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 703, 709, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 651, 0, 0, 0, 601,
	695, 694, 668, 677, 0, 0, 151, 669, 0, 676,
	670, 674, 673, 671, 672, 0, 638, 0, 0, 0,
	0, 0, 0, 599, 655, 0, 659, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 652, 653, 0,
	0, 0, 0, 689, 0, 654, 0, 0, 691, 0,
	678, 0, 143, 259, 273, 152, 250, 286, 157, 257,
	148, 224, 246, 0, 0, 145, 271, 256, 206, 189,
	190, 144, 0, 241, 167, 181, 164, 222, 675, 687,
	644, 163, 642, 686, 281, 147, 0, 280, 221, 268,
	272, 207, 201, 146, 270, 205, 200, 193, 171, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 684, 0, 0, 283, 0, 0,
	702, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 645, 0, 244, 227, 712, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 700, 223, 711,
	696, 697, 698, 701, 704, 705, 640, 643, 706, 708,
	710, 713, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 641, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 690, 213, 214,
	215, 216, 639, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 719,
	699, 718, 720, 721, 717, 722, 723, 707, 660, 0,
	715, 714, 716, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 603, 604, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 117, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 693, 688, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 225, 0,
	0, 0, 1258, 0, 0, 0, 658, 0, 0, 0,
	169, 0, 0, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 703, 709, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 651, 0, 0, 0, 601, 695,
	694, 668, 677, 0, 0, 151, 669, 0, 676, 670,
	674, 673, 671, 672, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 655, 0, 659, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 652, 653, 0, 0,
	0, 0, 689, 0, 654, 0, 0, 691, 0, 678,
	0, 143, 259, 273, 152, 250, 286, 157, 257, 148,
	224, 246, 0, 0, 145, 271, 256, 206, 189, 190,
	144, 0, 241, 167, 181, 164, 222, 675, 687, 644,
	163, 642, 686, 281, 147, 0, 280, 221, 268, 272,
	207, 201, 146, 270, 205, 200, 193, 171, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 684, 0, 0, 283, 0, 0, 702,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	645, 0, 244, 227, 712, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 139, 261, 166, 208,
	149, 150, 162, 168, 170, 172, 173, 217, 218, 230,
	249, 262, 263, 264, 165, 158, 243, 159, 183, 160,
	140, 251, 161, 141, 231, 267, 0, 179, 239, 204,
	142, 203, 232, 266, 265, 290, 1259, 1260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 176, 0, 278, 700, 223, 711, 696,
	697, 698, 701, 704, 705, 640, 643, 706, 708, 710,
	713, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 641, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 690, 213, 214, 215,
	216, 639, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 182, 0, 184, 155, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 153, 275, 253, 202, 177, 719, 699,
	718, 720, 721, 717, 722, 723, 707, 660, 0, 715,
	714, 716, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 196, 0, 237, 174,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 117, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 693, 688, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 658, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 703, 709, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 651, 0, 0, 0, 601, 695, 694,
	668, 677, 0, 0, 151, 669, 0, 676, 670, 674,
	673, 671, 672, 0, 638, 0, 0, 0, 0, 0,
	0, 0, 655, 0, 659, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 652, 653, 0, 0, 0,
	0, 689, 0, 654, 0, 0, 691, 0, 678, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 675, 687, 644, 163,
	642, 686, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 684, 0, 0, 283, 0, 0, 702, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 645,
	0, 244, 227, 712, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 139, 261, 166, 208, 149,
	150, 162, 168, 170, 172, 173, 217, 218, 230, 249,
	262, 263, 264, 165, 158, 243, 159, 183, 160, 140,
	251, 161, 141, 231, 267, 0, 179, 239, 204, 142,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 176, 0, 278, 700, 223, 711, 696, 697,
	698, 701, 704, 705, 640, 643, 706, 708, 710, 713,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 641, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 690, 213, 214, 215, 216,
	639, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 182, 0, 184, 155, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 153, 275, 253, 202, 177, 719, 699, 718,
	720, 721, 717, 722, 723, 707, 660, 0, 715, 714,
	716, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 196, 0, 237, 174, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 117, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 693, 688, 0, 291, 292,
	293, 277, 0, 0, 0, 0, 225, 0, 0, 0,
	0, 0, 0, 0, 658, 0, 0, 0, 169, 0,
	0, 195, 0, 0, 0, 254, 209, 0, 0, 0,
	0, 703, 709, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 695, 694, 668,
	677, 0, 0, 151, 669, 0, 676, 670, 674, 673,
	671, 672, 0, 638, 0, 0, 0, 0, 0, 0,
	599, 655, 0, 659, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 652, 653, 0, 0, 0, 0,
	689, 0, 654, 0, 0, 691, 0, 678, 0, 143,
	259, 273, 152, 250, 286, 157, 257, 148, 224, 246,
	0, 0, 145, 271, 256, 206, 189, 190, 144, 0,
	241, 167, 181, 164, 222, 675, 687, 644, 163, 642,
	686, 281, 147, 0, 280, 221, 268, 272, 207, 201,
	146, 270, 205, 200, 193, 171, 185, 233, 199, 234,
	186, 211, 210, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 684, 0, 0, 283, 0, 0, 702, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 645, 0,
	244, 227, 712, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 700, 223, 711, 696, 697, 698,
	701, 704, 705, 640, 643, 706, 708, 710, 713, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 641, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 690, 213, 214, 215, 216, 639,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 719, 699, 718, 720,
	721, 717, 722, 723, 707, 660, 0, 715, 714, 716,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 196, 0, 237, 174, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 117, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 693, 0, 0, 291, 292, 293,
	277, 339, 0, 338, 342, 334, 0, 0, 0, 0,
	0, 0, 0, 225, 0, 0, 0, 330, 0, 0,
	0, 0, 0, 0, 0, 169, 0, 349, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 352, 0, 0, 353, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 338, 342, 334, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 0, 0, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 0, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 0, 0, 298, 163, 289, 0, 281, 147,
	0, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 332, 331, 335, 0, 0, 0, 0, 0,
	337, 283, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 194, 341, 0, 0, 299, 0, 244, 227, 0,
	0, 0, 242, 197, 269, 235, 333, 260, 282, 238,
	357, 139, 261, 166, 208, 149, 150, 162, 168, 170,
	172, 173, 217, 218, 230, 249, 262, 263, 264, 165,
	158, 243, 159, 183, 160, 140, 251, 161, 141, 231,
	267, 0, 179, 239, 204, 142, 203, 232, 266, 265,
	290, 296, 297, 332, 331, 335, 0, 0, 0, 0,
	0, 337, 0, 0, 0, 0, 0, 295, 176, 0,
	278, 0, 223, 341, 0, 0, 0, 0, 0, 0,
	219, 294, 0, 0, 0, 0, 247, 765, 0, 0,
	336, 340, 343, 229, 344, 345, 0, 0, 346, 347,
	348, 0, 0, 350, 351, 0, 0, 0, 255, 276,
	288, 279, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 180, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	182, 0, 184, 155, 228, 178, 285, 191, 0, 220,
	187, 252, 192, 198, 240, 284, 226, 245, 153, 275,
	253, 202, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 340, 766, 0, 344, 767, 0, 0, 346,
	347, 348, 0, 0, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 196, 0, 237, 174, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 0, 0, 0, 291, 292, 293, 277, 339, 0,
	338, 342, 334, 0, 0, 0, 0, 0, 0, 0,
	225, 0, 0, 0, 330, 0, 0, 0, 0, 0,
	0, 0, 169, 0, 349, 195, 0, 0, 0, 254,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 0, 353, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 259, 273, 152, 250, 286, 157,
	257, 148, 224, 246, 0, 0, 145, 271, 256, 206,
	189, 190, 144, 0, 241, 167, 181, 164, 222, 0,
	0, 298, 163, 289, 0, 281, 147, 0, 280, 221,
	268, 272, 207, 201, 146, 270, 205, 200, 193, 171,
	185, 233, 199, 234, 186, 211, 210, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	331, 335, 0, 0, 0, 0, 0, 337, 283, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 194, 341,
	0, 0, 299, 0, 244, 227, 0, 0, 0, 242,
	197, 269, 235, 333, 260, 282, 238, 236, 139, 261,
	166, 208, 149, 150, 162, 168, 170, 172, 173, 217,
	218, 230, 249, 262, 263, 264, 165, 158, 243, 159,
	183, 160, 140, 251, 161, 141, 231, 267, 0, 179,
	239, 204, 142, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 176, 0, 278, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 219, 294, 0,
	0, 0, 0, 247, 0, 0, 0, 336, 340, 343,
	229, 344, 345, 0, 0, 346, 347, 348, 0, 0,
	350, 351, 0, 0, 0, 255, 276, 288, 279, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 180, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 182, 0, 184,
	155, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 153, 275, 253, 202, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 196, 0,
	237, 174, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 0, 0,
	0, 291, 292, 293, 277, 93, 0, 26, 83, 67,
	0, 0, 0, 0, 0, 0, 0, 225, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 311, 0, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 299,
	0, 244, 227, 0, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 139, 261, 166, 208, 149,
	150, 162, 168, 170, 172, 173, 217, 218, 230, 249,
	262, 263, 264, 165, 158, 243, 159, 183, 160, 140,
	251, 161, 141, 231, 267, 0, 179, 239, 204, 142,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 176, 0, 278, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 219, 294, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 279, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	307, 309, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 182, 0, 184, 155, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 153, 275, 253, 202, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 196, 68, 237, 174, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 225, 0, 0, 291, 292,
	293, 277, 0, 0, 0, 0, 0, 169, 0, 0,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 1569, 1572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 259,
	273, 152, 250, 286, 157, 257, 148, 224, 246, 0,
	0, 145, 271, 256, 206, 189, 190, 144, 0, 241,
	167, 181, 164, 222, 0, 0, 298, 163, 289, 0,
	281, 147, 0, 280, 221, 268, 272, 207, 201, 146,
	270, 205, 200, 193, 171, 185, 233, 199, 234, 186,
	211, 210, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1573, 283, 0, 0, 0, 1566, 0, 1565,
	258, 1567, 1570, 194, 0, 0, 0, 299, 0, 244,
	227, 0, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 139, 261, 166, 208, 149, 150, 162,
	168, 170, 172, 173, 217, 218, 230, 249, 262, 263,
	264, 165, 158, 243, 159, 183, 160, 140, 251, 161,
	141, 231, 267, 1571, 179, 239, 204, 142, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	176, 0, 278, 0, 223, 0, 0, 0, 0, 0,
	0, 0, 219, 294, 0, 0, 0, 0, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 279, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 180, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 182, 0, 184, 155, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	153, 275, 253, 202, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 196, 0, 237, 174, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 225, 0, 0, 291, 292, 293, 277,
	880, 0, 0, 0, 0, 169, 0, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 881, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 876, 877, 878, 875, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 0, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 0, 0, 298, 163, 289, 0, 281, 147,
	0, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 194, 0, 0, 0, 299, 0, 244, 227, 0,
	0, 0, 242, 197, 269, 235, 274, 260, 282, 238,
	236, 139, 261, 166, 208, 149, 150, 162, 168, 170,
	172, 173, 217, 218, 230, 249, 262, 263, 264, 165,
	158, 243, 159, 183, 160, 140, 251, 161, 141, 231,
	267, 0, 179, 239, 204, 142, 203, 232, 266, 265,
	290, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 176, 0,
	278, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	219, 294, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 188, 229, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 276,
	288, 279, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 180, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	182, 0, 184, 155, 228, 178, 285, 191, 0, 220,
	187, 252, 192, 198, 240, 284, 226, 245, 153, 275,
	253, 202, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 196, 0, 237, 174, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 225, 0, 0, 291, 292, 293, 277, 0, 0,
	0, 0, 0, 169, 415, 0, 195, 0, 0, 0,
	254, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 423, 424, 0, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 259, 273, 152, 250, 286,
	157, 257, 148, 224, 246, 0, 0, 145, 271, 256,
	206, 189, 190, 144, 0, 241, 167, 181, 164, 222,
	0, 0, 298, 163, 289, 398, 281, 147, 397, 280,
	221, 268, 272, 207, 201, 146, 270, 205, 200, 193,
	171, 185, 233, 199, 234, 186, 211, 210, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 299, 0, 244, 227, 0, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 414, 236, 139,
	261, 166, 208, 149, 150, 162, 168, 170, 172, 173,
	217, 218, 230, 249, 262, 263, 264, 165, 158, 243,
	159, 183, 160, 140, 251, 161, 141, 231, 267, 0,
	179, 239, 204, 142, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 176, 0, 278, 0,
	223, 0, 0, 0, 0, 0, 0, 0, 219, 294,
	0, 0, 0, 0, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 876, 877, 878, 875, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 279,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 417,
	213, 214, 215, 216, 180, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 182, 0,
	184, 155, 228, 178, 285, 191, 0, 425, 420, 421,
	192, 198, 240, 284, 226, 245, 153, 275, 253, 422,
	177, 0, 0, 0, 0, 0, 0, 0, 1297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 196,
	0, 237, 174, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 93,
	0, 0, 291, 292, 293, 277, 0, 0, 0, 0,
	0, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 169, 0, 0, 195, 0, 0, 0,
	254, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 968,
	0, 99, 0, 0, 0, 0, 0, 0, 151, 0,
	0, 0, 0, 1293, 0, 1290, 0, 0, 154, 1292,
	1289, 1291, 1295, 1296, 0, 0, 0, 1294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 259, 273, 152, 250, 286,
	157, 257, 148, 224, 246, 0, 0, 145, 271, 256,
	206, 189, 190, 144, 0, 241, 167, 181, 164, 222,
	0, 0, 298, 163, 289, 0, 281, 147, 0, 280,
	221, 268, 272, 207, 201, 146, 270, 205, 200, 193,
	171, 185, 233, 199, 234, 186, 211, 210, 212, 1278,
	1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
	1300, 1301, 1302, 1303, 1304, 1305, 1298, 1299, 0, 283,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 299, 0, 244, 227, 0, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 139,
	261, 166, 208, 149, 150, 162, 168, 170, 172, 173,
	217, 218, 230, 249, 262, 263, 264, 165, 158, 243,
	159, 183, 160, 140, 251, 161, 141, 231, 267, 0,
	179, 239, 204, 142, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 176, 0, 278, 0,
	223, 0, 0, 0, 0, 0, 0, 0, 219, 294,
	0, 0, 0, 0, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 279,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 180, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 182, 0,
	184, 155, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 153, 275, 253, 202,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 196,
	68, 237, 174, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 225,
	0, 0, 291, 292, 293, 277, 0, 0, 0, 0,
	0, 169, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	423, 424, 0, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 259, 273, 152, 250, 286, 157, 257,
	148, 224, 246, 0, 0, 145, 271, 256, 206, 189,
	190, 144, 0, 241, 167, 181, 164, 222, 0, 0,
	298, 163, 289, 398, 281, 147, 397, 280, 221, 268,
	272, 207, 201, 146, 270, 205, 200, 193, 171, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 425, 420, 421, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 422, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 0, 0, 0,
	291, 292, 293, 277, 225, 0, 0, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 169, 559, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 0, 0, 353, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 0, 0, 298, 163, 289, 0, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 194, 0, 0, 0, 299, 0, 244, 227,
	0, 0, 0, 242, 197, 269, 235, 274, 260, 282,
	238, 236, 139, 261, 166, 208, 149, 150, 162, 168,
	170, 172, 173, 217, 218, 230, 249, 262, 263, 264,
	165, 158, 243, 159, 183, 160, 140, 251, 161, 141,
	231, 267, 0, 179, 239, 204, 142, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 176,
	0, 278, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 219, 294, 0, 0, 0, 0, 247, 0, 0,
	0, 0, 0, 188, 229, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	276, 288, 279, 0, 0, 0, 287, 0, 0, 0,
	0, 560, 0, 213, 214, 215, 216, 180, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 182, 0, 184, 155, 228, 178, 285, 191, 0,
	220, 187, 252, 192, 198, 240, 284, 226, 245, 153,
	275, 253, 202, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 196, 0, 237, 174, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 0, 0, 0, 291, 292, 293, 277, 225,
	0, 0, 0, 841, 0, 0, 0, 0, 0, 0,
	0, 169, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
	0, 0, 353, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 259, 273, 152, 250, 286, 157, 257,
	148, 224, 246, 0, 0, 145, 271, 256, 206, 189,
	190, 144, 0, 241, 167, 181, 164, 222, 0, 0,
	298, 163, 289, 0, 281, 147, 0, 280, 221, 268,
	272, 207, 201, 146, 270, 205, 200, 193, 171, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 840, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 0, 169,
	580, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	578, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 577, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 299,
	0, 244, 227, 0, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 139, 261, 166, 208, 149,
	150, 162, 168, 170, 172, 173, 217, 218, 230, 249,
	262, 263, 264, 165, 158, 243, 159, 183, 160, 140,
	251, 161, 141, 231, 267, 0, 179, 239, 204, 142,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 176, 0, 278, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 219, 294, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 279, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	180, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 182, 0, 184, 155, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 153, 275, 253, 202, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 196, 0, 237, 174, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 225, 0, 0, 291, 292,
	293, 277, 0, 0, 0, 0, 0, 169, 575, 0,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 578, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 577, 0, 0, 0, 143, 259,
	273, 152, 250, 286, 157, 257, 148, 224, 246, 0,
	0, 145, 271, 256, 206, 189, 190, 144, 0, 241,
	167, 181, 164, 222, 0, 0, 298, 163, 289, 0,
	281, 147, 0, 280, 221, 268, 272, 207, 201, 146,
	270, 205, 200, 193, 171, 185, 233, 199, 234, 186,
	211, 210, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 299, 0, 244,
	227, 0, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 139, 261, 166, 208, 149, 150, 162,
	168, 170, 172, 173, 217, 218, 230, 249, 262, 263,
	264, 165, 158, 243, 159, 183, 160, 140, 251, 161,
	141, 231, 267, 0, 179, 239, 204, 142, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	176, 0, 278, 0, 223, 0, 0, 0, 0, 0,
	0, 0, 219, 294, 0, 0, 0, 0, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 279, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 180, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 182, 0, 184, 155, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	153, 275, 253, 202, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 196, 0, 237, 174, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 225, 0, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 0, 169, 0, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2182, 0, 99, 695, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 0, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 0, 0, 298, 163, 289, 0, 281, 147,
	0, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 194, 0, 0, 0, 299, 0, 244, 227, 0,
	0, 0, 242, 197, 269, 235, 274, 260, 282, 238,
	236, 139, 261, 166, 208, 149, 150, 162, 168, 170,
	172, 173, 217, 218, 230, 249, 262, 263, 264, 165,
	158, 243, 159, 183, 160, 140, 251, 161, 141, 231,
	267, 0, 179, 239, 204, 142, 203, 232, 266, 265,
	290, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 176, 0,
	278, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	219, 294, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 188, 229, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 276,
	288, 279, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 180, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	182, 0, 184, 155, 228, 178, 285, 191, 0, 220,
	187, 252, 192, 198, 240, 284, 226, 245, 153, 275,
	253, 202, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 196, 0, 237, 174, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 225, 0, 0, 291, 292, 293, 277, 0, 0,
	0, 0, 0, 169, 0, 0, 195, 0, 0, 0,
	254, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 0, 578, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	577, 0, 0, 0, 143, 259, 273, 152, 250, 286,
	157, 257, 148, 224, 246, 0, 0, 145, 271, 256,
	206, 189, 190, 144, 0, 241, 167, 181, 164, 222,
	0, 0, 298, 163, 289, 0, 281, 147, 0, 280,
	221, 268, 272, 207, 201, 146, 270, 205, 200, 193,
	171, 185, 233, 199, 234, 186, 211, 210, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 299, 0, 244, 227, 0, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 139,
	261, 166, 208, 149, 150, 162, 168, 170, 172, 173,
	217, 218, 230, 249, 262, 263, 264, 165, 158, 243,
	159, 183, 160, 140, 251, 161, 141, 231, 267, 0,
	179, 239, 204, 142, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 176, 0, 278, 0,
	223, 0, 0, 0, 0, 0, 0, 0, 219, 294,
	0, 0, 0, 0, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 279,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 180, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 182, 0,
	184, 155, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 153, 275, 253, 202,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 196,
	0, 237, 174, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 225,
	0, 0, 291, 292, 293, 277, 0, 0, 0, 0,
	0, 169, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 578, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1761, 0,
	0, 0, 143, 259, 273, 152, 250, 286, 157, 257,
	148, 224, 246, 0, 0, 145, 271, 256, 206, 189,
	190, 144, 0, 241, 167, 181, 164, 222, 0, 0,
	298, 163, 289, 0, 281, 147, 0, 280, 221, 268,
	272, 207, 201, 146, 270, 205, 200, 193, 171, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	578, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 299,
	0, 244, 227, 0, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 139, 261, 166, 208, 149,
	150, 162, 168, 170, 172, 173, 217, 218, 230, 249,
	262, 263, 264, 165, 158, 243, 159, 183, 160, 140,
	251, 161, 141, 231, 267, 0, 179, 239, 204, 142,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 176, 0, 278, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 219, 294, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 279, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 1544, 213, 214, 215, 216,
	180, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 182, 0, 184, 155, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 153, 275, 253, 202, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 196, 0, 237, 174, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 225, 0, 0, 291, 292,
	293, 277, 0, 0, 0, 0, 0, 169, 1234, 0,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 578, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 259,
	273, 152, 250, 286, 157, 257, 148, 224, 246, 0,
	0, 145, 271, 256, 206, 189, 190, 144, 0, 241,
	167, 181, 164, 222, 0, 0, 298, 163, 289, 0,
	281, 147, 0, 280, 221, 268, 272, 207, 201, 146,
	270, 205, 200, 193, 171, 185, 233, 199, 234, 186,
	211, 210, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 299, 0, 244,
	227, 0, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 139, 261, 166, 208, 149, 150, 162,
	168, 170, 172, 173, 217, 218, 230, 249, 262, 263,
	264, 165, 158, 243, 159, 183, 160, 140, 251, 161,
	141, 231, 267, 0, 179, 239, 204, 142, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	176, 0, 278, 0, 223, 0, 0, 0, 0, 0,
	0, 0, 219, 294, 0, 0, 0, 0, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 279, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 180, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 182, 0, 184, 155, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	153, 275, 253, 202, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 196, 0, 237, 174, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 225, 0, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 0, 169, 0, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 695, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 0, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 0, 0, 298, 163, 289, 0, 281, 147,
	0, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 194, 0, 0, 0, 299, 0, 244, 227, 0,
	0, 0, 242, 197, 269, 235, 274, 260, 282, 238,
	236, 139, 261, 166, 208, 149, 150, 162, 168, 170,
	172, 173, 217, 218, 230, 249, 262, 263, 264, 165,
	158, 243, 159, 183, 160, 140, 251, 161, 141, 231,
	267, 0, 179, 239, 204, 142, 203, 232, 266, 265,
	290, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 176, 0,
	278, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	219, 294, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 188, 229, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 276,
	288, 279, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 180, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	182, 0, 184, 155, 228, 178, 285, 191, 0, 220,
	187, 252, 192, 198, 240, 284, 226, 245, 153, 275,
	253, 202, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 196, 0, 237, 174, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 225, 0, 0, 291, 292, 293, 277, 0, 0,
	0, 0, 0, 169, 0, 0, 195, 0, 0, 0,
	254, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1909, 0, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 259, 273, 152, 250, 286,
	157, 257, 148, 224, 246, 0, 0, 145, 271, 256,
	206, 189, 190, 144, 0, 241, 167, 181, 164, 222,
	0, 0, 298, 163, 289, 0, 281, 147, 0, 280,
	221, 268, 272, 207, 201, 146, 270, 205, 200, 193,
	171, 185, 233, 199, 234, 186, 211, 210, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 299, 0, 244, 227, 0, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 139,
	261, 166, 208, 149, 150, 162, 168, 170, 172, 173,
	217, 218, 230, 249, 262, 263, 264, 165, 158, 243,
	159, 183, 160, 140, 251, 161, 141, 231, 267, 0,
	179, 239, 204, 142, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 176, 0, 278, 0,
	223, 0, 0, 0, 0, 0, 0, 0, 219, 294,
	0, 0, 0, 0, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 279,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 180, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 182, 0,
	184, 155, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 153, 275, 253, 202,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 196,
	0, 237, 174, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 225,
	0, 0, 291, 292, 293, 277, 0, 0, 0, 0,
	0, 169, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 578, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 259, 273, 152, 250, 286, 157, 257,
	148, 224, 246, 0, 0, 145, 271, 256, 206, 189,
	190, 144, 0, 241, 167, 181, 164, 222, 0, 0,
	298, 163, 289, 0, 281, 147, 0, 280, 221, 268,
	272, 207, 201, 146, 270, 205, 200, 193, 171, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1597, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 299,
	0, 244, 227, 0, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 139, 261, 166, 208, 149,
	150, 162, 168, 170, 172, 173, 217, 218, 230, 249,
	262, 263, 264, 165, 158, 243, 159, 183, 160, 140,
	251, 161, 141, 231, 267, 0, 179, 239, 204, 142,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 176, 0, 278, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 219, 294, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 279, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	180, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 182, 0, 184, 155, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 153, 275, 253, 202, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 196, 0, 237, 174, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 225, 0, 0, 291, 292,
	293, 277, 0, 0, 0, 0, 0, 169, 0, 0,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 259,
	273, 152, 250, 286, 157, 257, 148, 224, 246, 0,
	0, 145, 271, 256, 206, 189, 190, 144, 0, 241,
	167, 181, 164, 222, 0, 0, 298, 163, 289, 0,
	281, 147, 0, 280, 221, 268, 272, 207, 201, 146,
	270, 205, 200, 193, 171, 185, 233, 199, 234, 186,
	211, 210, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 299, 0, 244,
	227, 0, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 139, 261, 166, 208, 149, 150, 162,
	168, 170, 172, 173, 217, 218, 230, 249, 262, 263,
	264, 165, 158, 243, 159, 183, 160, 140, 251, 161,
	141, 231, 267, 0, 179, 239, 204, 142, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	176, 0, 278, 0, 223, 0, 0, 0, 0, 0,
	0, 0, 219, 294, 0, 0, 0, 0, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 279, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 180, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 182, 0, 184, 155, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	153, 275, 253, 202, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 196, 0, 237, 174, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 225, 0, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 0, 169, 0, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1628, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 0, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 0, 0, 298, 163, 289, 0, 281, 147,
	0, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 194, 0, 0, 0, 299, 0, 244, 227, 0,
	0, 0, 242, 197, 269, 235, 274, 260, 282, 238,
	236, 139, 261, 166, 208, 149, 150, 162, 168, 170,
	172, 173, 217, 218, 230, 249, 262, 263, 264, 165,
	158, 243, 159, 183, 160, 140, 251, 161, 141, 231,
	267, 0, 179, 239, 204, 142, 203, 232, 266, 265,
	290, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 176, 0,
	278, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	219, 294, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 188, 229, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 276,
	288, 279, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 180, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	182, 0, 184, 155, 228, 178, 285, 191, 0, 220,
	187, 252, 192, 198, 240, 284, 226, 245, 153, 275,
	253, 202, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 196, 0, 237, 174, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 225, 0, 0, 291, 292, 293, 277, 0, 0,
	0, 0, 0, 169, 0, 0, 195, 0, 0, 0,
	254, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1249, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 259, 273, 152, 250, 286,
	157, 257, 148, 224, 246, 0, 0, 145, 271, 256,
	206, 189, 190, 144, 0, 241, 167, 181, 164, 222,
	0, 0, 298, 163, 289, 0, 281, 147, 0, 280,
	221, 268, 272, 207, 201, 146, 270, 205, 200, 193,
	171, 185, 233, 199, 234, 186, 211, 210, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 299, 0, 244, 227, 0, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 139,
	261, 166, 208, 149, 150, 162, 168, 170, 172, 173,
	217, 218, 230, 249, 262, 263, 264, 165, 158, 243,
	159, 183, 160, 140, 251, 161, 141, 231, 267, 0,
	179, 239, 204, 142, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 176, 0, 278, 0,
	223, 0, 0, 0, 0, 0, 0, 0, 219, 294,
	0, 0, 0, 0, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 279,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 180, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 182, 0,
	184, 155, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 153, 275, 253, 202,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 196,
	0, 237, 174, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 225,
	0, 0, 291, 292, 293, 277, 0, 0, 0, 0,
	0, 169, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 1247, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 259, 273, 152, 250, 286, 157, 257,
	148, 224, 246, 0, 0, 145, 271, 256, 206, 189,
	190, 144, 0, 241, 167, 181, 164, 222, 0, 0,
	298, 163, 289, 0, 281, 147, 0, 280, 221, 268,
	272, 207, 201, 146, 270, 205, 200, 193, 171, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 352, 0, 0,
	353, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 299,
	0, 244, 227, 0, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 139, 261, 166, 208, 149,
	150, 162, 168, 170, 172, 173, 217, 218, 230, 249,
	262, 263, 264, 165, 158, 243, 159, 183, 160, 140,
	251, 161, 141, 231, 267, 0, 179, 239, 204, 142,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 176, 0, 278, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 219, 294, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 279, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	180, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 182, 0, 184, 155, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 153, 275, 253, 202, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 196, 0, 237, 174, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 1176, 0, 0, 291, 292,
	293, 277, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 259, 273, 152, 250,
	286, 157, 257, 148, 224, 246, 0, 0, 145, 271,
	256, 206, 189, 190, 144, 0, 241, 167, 181, 164,
	222, 0, 0, 298, 163, 289, 0, 281, 147, 0,
	280, 221, 268, 272, 207, 201, 146, 270, 205, 200,
	193, 171, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	194, 0, 0, 0, 299, 0, 244, 227, 0, 0,
	0, 242, 197, 269, 235, 274, 260, 282, 238, 236,
	139, 261, 166, 208, 149, 150, 162, 168, 170, 172,
	173, 217, 218, 230, 249, 262, 263, 264, 165, 158,
	243, 159, 183, 160, 140, 251, 161, 141, 231, 267,
	0, 179, 239, 204, 142, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 176, 0, 278,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 219,
	294, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 188, 229, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 276, 288,
	279, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 180, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 182,
	0, 184, 155, 228, 178, 285, 191, 0, 220, 187,
	252, 192, 198, 240, 284, 226, 245, 153, 275, 253,
	202, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	196, 0, 237, 174, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	225, 0, 0, 291, 292, 293, 277, 0, 0, 0,
	0, 0, 169, 0, 0, 195, 0, 0, 0, 254,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 259, 273, 152, 250, 286, 157,
	257, 148, 224, 246, 0, 0, 145, 271, 256, 206,
	189, 190, 144, 0, 241, 167, 181, 164, 222, 0,
	0, 298, 163, 289, 0, 281, 147, 0, 280, 221,
	268, 272, 207, 201, 146, 270, 205, 200, 193, 171,
	185, 233, 199, 234, 186, 211, 210, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 1163, 0, 0, 0, 258, 0, 0, 194, 0,
	0, 0, 299, 0, 244, 227, 0, 0, 0, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 139, 261,
	166, 208, 149, 150, 162, 168, 170, 172, 173, 217,
	218, 230, 249, 262, 263, 264, 165, 158, 243, 159,
	183, 160, 140, 251, 161, 141, 231, 267, 0, 179,
	239, 204, 142, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 176, 0, 278, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 219, 294, 0,
	0, 0, 0, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 276, 288, 279, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 180, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 182, 0, 184,
	155, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 153, 275, 253, 202, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 196, 0,
	237, 174, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 225, 0,
	0, 291, 292, 293, 277, 0, 0, 0, 0, 0,
	169, 0, 0, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 578, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 259, 273, 152, 250, 286, 157, 257, 148,
	224, 246, 0, 0, 145, 271, 256, 206, 189, 190,
	144, 0, 241, 167, 181, 164, 222, 0, 0, 298,
	163, 289, 0, 281, 147, 0, 280, 221, 268, 272,
	207, 201, 146, 270, 205, 200, 193, 171, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	299, 0, 244, 227, 0, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 139, 261, 166, 208,
	149, 150, 162, 168, 170, 172, 173, 217, 218, 230,
	249, 262, 263, 264, 165, 158, 243, 159, 183, 160,
	140, 251, 161, 141, 231, 267, 0, 179, 239, 204,
	142, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 176, 0, 278, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 219, 294, 0, 0, 0,
	0, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 822, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 180, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 182, 0, 184, 155, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 153, 275, 253, 202, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 196, 0, 237, 174,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 225, 0, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 169, 0,
	0, 195, 0, 0, 0, 254, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	259, 273, 152, 250, 286, 157, 257, 148, 224, 246,
	0, 0, 145, 271, 256, 206, 189, 190, 144, 0,
	241, 167, 181, 164, 222, 0, 0, 298, 163, 289,
	0, 281, 147, 0, 280, 221, 268, 272, 207, 201,
	146, 270, 205, 200, 193, 171, 185, 233, 199, 234,
	186, 211, 210, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 299, 0,
	244, 227, 0, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 219, 294, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 279, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 180,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 381,
	0, 0, 138, 0, 196, 0, 237, 174, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 225, 0, 0, 291, 292, 293,
	277, 0, 0, 0, 0, 96, 169, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 0, 0, 298, 163, 289, 0, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 194, 0, 0, 0, 299, 0, 244, 227,
	0, 0, 0, 242, 197, 269, 235, 274, 260, 282,
	238, 236, 139, 261, 166, 208, 149, 150, 162, 168,
	170, 172, 173, 217, 218, 230, 249, 262, 263, 264,
	165, 158, 243, 159, 183, 160, 140, 251, 161, 141,
	231, 267, 0, 179, 239, 204, 142, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 176,
	0, 278, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 219, 294, 0, 0, 0, 0, 247, 0, 0,
	0, 0, 0, 188, 229, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	276, 288, 279, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 180, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 182, 0, 184, 155, 228, 178, 285, 191, 0,
	220, 187, 252, 192, 198, 240, 284, 226, 245, 153,
	275, 253, 202, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 196, 0, 237, 174, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 225, 0, 0, 291, 292, 293, 277, 0,
	0, 0, 0, 0, 169, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 259, 273, 152, 250,
	286, 157, 257, 148, 224, 246, 0, 0, 145, 271,
	256, 206, 189, 190, 144, 0, 241, 167, 181, 164,
	222, 0, 0, 298, 163, 289, 0, 281, 147, 0,
	280, 221, 268, 272, 207, 201, 146, 270, 205, 200,
	193, 171, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	194, 0, 0, 0, 299, 0, 244, 227, 0, 0,
	0, 242, 197, 269, 235, 274, 260, 282, 238, 236,
	139, 261, 166, 208, 149, 150, 162, 168, 170, 172,
	173, 217, 218, 230, 249, 262, 263, 264, 165, 158,
	243, 159, 183, 160, 140, 251, 161, 141, 231, 267,
	0, 179, 239, 204, 142, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 176, 0, 278,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 219,
	294, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 188, 229, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 276, 288,
	279, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 180, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 182,
	0, 184, 155, 228, 178, 285, 191, 0, 220, 187,
	252, 192, 198, 240, 284, 226, 245, 153, 275, 253,
	202, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	196, 0, 237, 174, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	225, 0, 0, 291, 292, 293, 277, 1216, 0, 0,
	0, 0, 169, 0, 0, 195, 0, 0, 0, 254,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	794, 795, 796, 1218, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 259, 273, 152, 250, 286, 157,
	257, 148, 224, 246, 0, 0, 145, 271, 256, 206,
	189, 190, 144, 0, 241, 167, 181, 164, 222, 0,
	0, 298, 163, 289, 0, 281, 147, 0, 280, 221,
	268, 272, 207, 201, 146, 270, 205, 200, 193, 171,
	185, 233, 199, 234, 186, 211, 210, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 194, 0,
	0, 0, 299, 0, 244, 227, 0, 0, 0, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 139, 261,
	166, 208, 149, 150, 162, 168, 170, 172, 173, 217,
	218, 230, 249, 262, 263, 264, 165, 158, 243, 159,
	183, 160, 140, 251, 161, 141, 231, 267, 0, 179,
	239, 204, 142, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 176, 0, 278, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 219, 294, 0,
	0, 0, 0, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 276, 288, 279, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 180, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 182, 0, 184,
	155, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 153, 275, 253, 202, 177,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 196, 0,
	237, 174, 794, 795, 796, 1218, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 293, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 259, 273, 152, 250,
	286, 157, 257, 148, 224, 246, 0, 0, 145, 271,
	256, 206, 189, 190, 144, 0, 241, 167, 181, 164,
	222, 0, 0, 298, 163, 289, 0, 281, 147, 0,
	280, 221, 268, 272, 207, 201, 146, 270, 205, 200,
	193, 171, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	194, 0, 0, 0, 299, 0, 244, 227, 0, 0,
	0, 242, 197, 269, 235, 274, 260, 282, 238, 236,
	139, 261, 166, 208, 149, 150, 162, 168, 170, 172,
	173, 217, 218, 230, 249, 262, 263, 264, 165, 158,
	243, 159, 183, 160, 140, 251, 161, 141, 231, 267,
	0, 179, 239, 204, 142, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 176, 0, 278,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 219,
	294, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 188, 229, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 276, 288,
	279, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 180, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 182,
	0, 184, 155, 228, 178, 285, 191, 0, 220, 187,
	252, 192, 198, 240, 284, 226, 245, 153, 275, 253,
	202, 177, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	196, 0, 237, 174, 794, 795, 796, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 293, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 0, 0, 298, 163, 289, 0, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 194, 0, 0, 0, 299, 0, 244, 227,
	0, 0, 0, 242, 197, 269, 235, 274, 260, 282,
	238, 236, 139, 261, 166, 208, 149, 150, 162, 168,
	170, 172, 173, 217, 218, 230, 249, 262, 263, 264,
	165, 158, 243, 159, 183, 160, 140, 251, 161, 141,
	231, 267, 0, 179, 239, 204, 142, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 176,
	0, 278, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 219, 294, 0, 0, 0, 0, 247, 0, 0,
	0, 0, 0, 188, 229, 1657, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	276, 288, 279, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 180, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1874,
	175, 182, 0, 184, 155, 228, 178, 285, 191, 0,
	220, 187, 252, 192, 198, 240, 284, 226, 245, 153,
	275, 253, 202, 177, 1657, 1175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2267, 0,
	0, 1645, 0, 0, 0, 0, 0, 0, 0, 1856,
	138, 0, 196, 0, 237, 174, 0, 0, 1664, 1668,
	1670, 1672, 1674, 1675, 1677, 0, 1681, 1678, 1679, 1680,
	0, 0, 1659, 1660, 1661, 1662, 1643, 1644, 1665, 0,
	1646, 0, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654,
	1655, 1656, 1663, 0, 0, 291, 292, 293, 277, 0,
	1667, 1669, 1671, 1673, 1676, 0, 0, 0, 0, 0,
	1645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1874, 0, 0, 1664, 1668, 1670,
	1672, 1674, 1675, 1677, 1658, 1681, 1678, 1679, 1680, 0,
	0, 1659, 1660, 1661, 1662, 1643, 1644, 1665, 0, 1646,
	1175, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
	1656, 1663, 0, 0, 0, 0, 0, 0, 0, 1667,
	1669, 1671, 1673, 1676, 1939, 0, 0, 0, 0, 1860,
	1874, 0, 0, 0, 1856, 0, 0, 0, 0, 0,
	1864, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1658, 0, 0, 1175, 0, 0, 0,
	1853, 0, 0, 0, 1855, 1857, 1859, 0, 1861, 1862,
	1863, 1865, 1866, 1867, 1869, 1870, 1871, 1872, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1856, 0, 0, 0, 0, 0, 0, 1635, 1636, 0,
	0, 0, 0, 0, 1875, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1873, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1852, 0, 0, 0, 0,
	0, 0, 0, 0, 1860, 0, 0, 0, 0, 0,
	1868, 0, 0, 0, 0, 1864, 0, 1858, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1666,
	0, 0, 0, 0, 0, 1853, 0, 0, 0, 1855,
	1857, 1859, 0, 1861, 1862, 1863, 1865, 1866, 1867, 1869,
	1870, 1871, 1872, 0, 0, 0, 0, 0, 0, 0,
	1860, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1864, 0, 0, 0, 0, 0, 0, 0, 1875,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1853, 0, 0, 0, 1855, 1857, 1859, 1666, 1861,
	1862, 1863, 1865, 1866, 1867, 1869, 1870, 1871, 1872, 0,
	0, 0, 0, 1873, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1852, 0, 0, 0, 0, 1875, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1868, 0, 0, 0, 0,
	0, 0, 1858, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1852, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1868, 0, 0, 0, 0, 0, 0, 1858,
}

var yyPact = [...]int{
	1186, -1000, -295, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 20875, -1000, -1000, 1382,
	-1000, 8578, 21313, 54, 21313, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 224, -1000, 21313,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 8121, 7664, 138,
	-1000, 1789, -1000, -1000, -1000, -1000, 131, 253, 20437, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1606, -35, 253, 347, 352, 571, 571, 9892, 1789,
	178, 30, -1000, 561, 1186, 186, 21313, -1000, 389, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1789, 1789, 21313, -65, 583, -1000, 206,
	231, 198, 388, -1000, -1000, -1000, -1000, 1796, -1000, 21313,
	1496, 21313, -1000, 1346, 1379, -1000, -1000, 1594, -1000, 108,
	9, -14, 127, -1000, -1000, 156, -1000, -1000, -1000, -1000,
	-1000, 59, -1000, 1, -1000, -4, -1000, -1000, -1000, -102,
	-1000, -1000, -1000, -1000, -1000, 1345, 349, 1622, -156, 1677,
	1739, 1451, 1773, 1737, 8, 193, 193, 221, 193, -1000,
	-1000, -1000, -1000, -1000, -1000, 290, -1000, -1000, -1000, -1000,
	1391, 21313, -1000, 1454, 419, 419, 518, 177, -1000, -1000,
	-110, -124, 419, 419, -124, 14, -1000, 1725, 1722, -1000,
	-1000, -1000, -1000, -1000, -1000, 195, 209, -1000, -182, -1000,
	336, -1000, 321, -1000, 11225, 152, 1393, 615, -1000, 485,
	21313, 21313, 21313, 485, 485, 12546, 12108, 387, -1000, 1739,
	1451, -1000, 1268, 1134, 1451, 195, 195, 195, 195, 195,
	21313, 5411, 5411, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 184, 1589, -1000, 21313, 1739, 1677, 1739, -1000, 385,
	817, 974, -1000, -1000, 206, 1329, -1000, 592, -1000, -1000,
	-1000, -1000, 21313, 188, -1000, 955, 1588, 134, 7745, 16050,
	18678, 21313, 16050, -1000, -1000, -1000, -1000, -1000, -117, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 134,
	16050, 16050, -73, -1000, -1000, -283, 1677, 5860, -1000, -1000,
	5860, -1000, -1000, 217, 193, -1000, 16050, 629, 18678, 829,
	21313, 209, -1000, 21313, 1391, 1711, 21313, 1785, 6758, 1785,
	21313, -1000, -1000, 419, 419, -1000, 518, 518, -1000, -1000,
	-119, 1785, 1785, -113, 21313, 193, -1000, -1000, 19999, 1698,
	16926, -1000, -144, 344, 326, 340, -1000, -1000, -158, -1000,
	-1000, 1367, 11670, 10780, 219, 16050, 3609, -1000, -1000, 485,
	485, 485, 3609, 3609, 395, -1000, -1000, -1000, -1000, -1000,
	-1000, 21313, 1677, -1000, -1000, -1000, -1000, -1000, 16050, 18678,
	21313, 21313, 22475, -1000, 1370, -1000, -1000, 9454, 384, 5860,
	1004, 1587, -1000, -1000, 1586, 1584, 1582, 1579, 1578, 1577,
	1573, -1000, 1515, -1000, -1000, 1572, 1570, 1569, 1568, -1000,
	-1000, -1000, -1000, -1000, -1000, 1565, -1000, -1000, -1000, 1563,
	1515, -1000, -1000, 1562, 1552, 1551, 1543, 1542, -1000, -1000,
	-1000, -1000, -1000, -1000, 973, 972, 1803, -1000, -1000, -1000,
	-1000, 3160, 6758, 6758, 6758, 6758, -1000, -1000, 1488, 5860,
	1541, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7207, -1000,
	1537, 1532, 1529, 1524, 1517, 1515, 1514, 971, 1510, 1509,
	1508, 6758, 1507, 1506, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1370, -1000, -281, -1000, 10342, 21313,
	21313, -1000, 1677, -1000, 1677, 2291, -1000, 1744, -1000, 206,
	93, -1000, -1000, -1000, -1000, -1000, -1000, 383, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1387, -1000, 21313,
	613, -1000, -1000, -1000, -1000, -1000, 1, -4, 1355, -1000,
	-44, 106, -1000, 1324, -1000, -1000, -1000, 613, 1355, 215,
	943, 941, -1000, 885, 382, 1386, -1000, 838, 19561, 21313,
	226, 1697, 1367, 1440, -1000, -1000, -1000, 1674, 19123, -1000,
	1505, 1315, -1000, -1000, 5860, -1000, -1000, 1785, 1785, 1785,
	419, 22475, 518, 21313, 518, -1000, -1000, 518, -1000, 379,
	21313, 226, 1504, -1000, 1635, 1312, -1000, -1000, -1000, -1000,
	1710, 21751, 178, -1000, -1000, 342, 315, 320, 18678, 213,
	-1000, -1000, 1367, -1000, -1000, -1000, 1499, 560, -1000, -1000,
	6758, -1000, 752, -1000, 3609, 3609, 3609, -1000, -1000, 14736,
	-1000, -1000, 1355, 1367, 1621, 1384, -1000, -1000, -1000, -1000,
	1785, 5411, -1000, 16926, -1000, 5860, 5860, 5860, 5860, -1000,
	18240, -1000, 17802, -1000, 265, 6309, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5860, 1715, 1715, 1715, 5860, 644, 5860,
	5860, -1000, 721, 717, 1715, 1715, 1715, 1715, 1715, -1000,
	2703, 1715, 1715, 1715, 1715, -1000, -1000, 6758, 6758, 6758,
	6758, 6758, 6758, 6758, 6758, 6758, 6758, 6758, 6758, 1487,
	619, 6758, 6758, 6758, 1134, 1581, 1383, -1000, -1000, -1000,
	-1000, -1000, 607, 752, 5860, 10126, 5860, 5860, 5860, -1000,
	1256, 1250, -1000, -1000, 5860, -1000, 5860, 6758, 5860, -1000,
	1715, 939, 1785, 1293, -1000, 1498, -1000, 1306, 1601, -1000,
	378, 1378, -1000, 550, 1298, -1000, -1000, -1000, -1000, 374,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -66, -1000, -1000, 21313, 955,
	1296, 1795, 369, 367, 16050, -1000, 165, 16050, -1000, -1000,
	21313, 211, 16050, 5, -128, 5860, 5860, 21313, 5860, -1000,
	-1000, -1000, 1454, 625, 1493, -229, -1000, -42, -1000, 1620,
	109, -1000, 1674, -1000, 584, -1000, 21313, 1365, -1000, 365,
	1186, -1000, 21313, 752, -1000, -1000, -1000, 1785, -1000, 419,
	-1000, 419, 518, 21313, -1000, -1000, -229, 1237, 21313, 16926,
	16926, 16926, 16926, -1000, 1658, 1655, -1000, 1662, 1643, 1671,
	21313, 16926, 21313, -1000, -1000, -1000, 22113, -1000, -1000, -1000,
	-1000, 1235, 1789, -1000, -1000, -1000, 298, 1367, 16050, 908,
	219, -1000, -1000, -1000, -1000, -1000, 21313, 21313, 1783, -1000,
	1364, 1650, -1000, 642, 642, 632, -1000, -1000, 364, -1000,
	-1000, 289, -1000, -1000, -1000, -1000, -1000, 1488, -1000, -1000,
	-1000, 1232, 1285, 752, 5860, -1000, -1000, 5860, 5860, 736,
	5860, 1218, 1291, 1283, -1000, 1202, 1794, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 5860, 5860, 5860, 5860,
	5860, 714, 4962, -1000, -1000, -1000, 5860, 5860, 5860, 5860,
	1024, 916, -1000, 671, 671, 377, 377, 377, 377, 377,
	799, 799, -1000, -1000, -1000, 3160, 1487, 6758, 6758, 6758,
	179, 2581, 2777, -1000, 5860, 624, -1000, 5860, 744, -1000,
	1200, 1025, 1193, 1189, -1000, -1000, 993, 1185, 1871, 1167,
	5860, 1363, 1783, -281, 4507, 176, 21313, -281, 21313, 21313,
	4507, -1000, 21313, 2291, 815, -1000, -1000, -1000, 16050, 405,
	600, -1000, 14298, 16050, -1000, -1000, 16050, 128, 1673, -1000,
	-1000, -86, -79, 752, 752, 363, -1000, 1709, 1694, 9016,
	-1000, -64, -1000, -1000, -1000, 229, -1000, 935, 934, 933,
	931, 21313, -1000, -1000, -1000, -1000, -1000, 487, 487, 487,
	186, 1187, 358, 16926, 21313, -1000, 16488, 1163, -1000, -1000,
	1785, 1785, 419, -1000, -5, -45, 1215, -1000, 529, 1612,
	1619, 1612, -1000, -1000, -1000, -1000, 1644, -1000, 1633, -1000,
	-1000, 1215, -1000, 1454, -1000, -1000, -1000, 1355, 1157, -1000,
	-1000, -1000, -1000, 1781, 1772, 17364, -1000, -1000, -1000, -1000,
	-1000, 5860, 1534, 1520, 1501, 22763, 1280, -1000, -1000, -1000,
	-1000, 5860, 1494, 1458, 1442, 1438, 1422, -1000, 5860, 5860,
	909, 1396, 1351, 1278, 1264, 1276, -1000, 179, 2581, 1059,
	-1000, 6758, 6758, 1249, 585, -1000, 5860, 654, 546, 13422,
	-1000, 5860, -1000, -1000, -1000, 13422, -1000, 6758, -1000, 1201,
	930, 1781, -1000, 1141, 1362, -1000, -281, -1000, -1000, 1293,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1355,
	-1000, -1000, -1000, -1000, 16050, 1703, 226, -1000, 4, 223,
	-285, -75, 1770, 1765, 21313, 178, 21313, 1133, 1332, -1000,
	-1000, -1000, 22832, 263, -1000, 21313, 661, 338, 193, 338,
	660, 1486, -1000, -1000, -64, -1000, 813, 812, 810, 809,
	-32, -1000, -1000, -1000, -1000, -1000, 1480, 13422, -1000, 13860,
	925, 21751, 16926, 16488, 1136, -1000, 357, -1000, -1000, -1000,
	-1000, 1785, -1000, -5, -1000, 284, 287, 31, 1763, 1775,
	21313, 5860, -1000, -1000, 5860, 1479, -1000, 5860, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 5860, 5860, -1000, -1000, 752,
	-1000, -1000, -1000, 1119, -1000, 310, 310, -22, -1000, -1000,
	-1000, 1435, -1000, 1459, 1459, 1435, 1435, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1478, 1475, -1000, 1435,
	1456, 1456, 1435, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1472, 1472,
	1473, 1472, -1000, 1197, -1000, -1000, -1000, -1000, -1000, 1188,
	1182, 5860, -1000, -1000, -1000, -1000, -1000, -1000, 6758, -1000,
	-1000, -1000, -1000, 752, 5860, 1100, -1000, 1435, 1459, -1000,
	1435, 1456, 1435, 310, 310, 1095, 729, 1051, 2687, -1000,
	1036, -1000, -1000, 4507, 1293, -1000, 16050, 16050, -232, -13,
	21313, -289, 923, -1000, 1761, 921, 757, -1000, 1454, 23014,
	9016, 781, -1000, -1000, 21313, 21313, -1000, 21313, 21313, 193,
	5860, -1000, -1000, -1000, -1000, -1000, -1000, 15612, -1000, -1000,
	-1000, -1000, -1000, 1785, 1136, 357, -1000, -1000, 404, -1000,
	-1000, -1000, -1000, 806, -1000, -1000, -1000, 908, 1739, -1000,
	752, 752, 21313, 752, 752, 1285, -1000, -1000, -1000, -1000,
	-1000, -31, -1000, -1000, -1000, -1000, 801, -1000, 798, -1000,
	-1000, -1000, 901, 901, -1000, -1000, 795, -1000, -1000, -1000,
	794, -1000, -1000, 790, -1000, -1000, -1000, -1000, 1153, -1000,
	752, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5860, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-113, -291, 789, -1000, 896, -78, -1000, -1000, 1708, 185,
	22958, -1000, 487, 487, 370, 487, 487, 487, 487, 135,
	126, 487, 487, 487, 487, 487, 487, 487, 487, 487,
	487, 487, 487, 487, 487, 1453, -1000, -1000, 781, -1000,
	-1000, 669, 6758, -1000, -1000, 888, 13860, 428, 351, 1450,
	-1000, 90, 650, 647, -1000, 21313, -1000, 1445, 1385, 60,
	1443, -1000, 1441, 1436, 21313, 1125, 1245, -1000, 1435, 5860,
	1775, -1000, 18, -1000, -1000, -1000, 1240, -1000, -1000, 1033,
	1029, 1231, -1000, 1209, 1020, 1192, 1174, -1000, 1099, -93,
	-85, -1000, 1434, -1000, -1000, 1760, 178, -1000, 1759, 23014,
	-1000, 787, 779, 487, 487, 777, 881, 880, 866, 487,
	487, 776, 864, 22113, 774, 773, 768, 769, 860, 433,
	745, 738, 737, 21313, 1430, 831, -1000, -1000, 2581, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	762, 1428, -1000, -1000, 1427, 15612, 89, 89, 15612, 15612,
	15612, 1425, 271, -1000, 15612, 1690, 898, 1739, -1000, -1000,
	-1000, -1000, -1000, 853, -1000, -1000, -1000, 755, -1000, 740,
	-1000, 207, -84, -85, -1000, 1758, -80, 1757, 1755, 21313,
	757, -1000, 91, -1000, -1000, -1000, 13422, 13422, -1000, -1000,
	-1000, -1000, 833, 832, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 144, 21313, 1170, -1000,
	523, 1007, 5860, -221, 15612, 1166, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1161, 1132, 1130, 15612, -1000, -1000, -1000,
	101, 124, -1000, -1000, 1690, -1000, -1000, 991, 960, 1416,
	694, -75, 1754, -1000, 757, 1753, 757, 757, 1128, -1000,
	-1000, 70, 196, 174, -1000, 240, -1000, -1000, -1000, -1000,
	-1000, -1000, 150, 1118, -1000, 831, 824, -1000, 770, 1616,
	-1000, 2, 1103, -1000, -1000, -1000, -1000, 1098, -1000, -1000,
	487, 823, 49, -1000, -1000, -1000, -1000, -1000, 1718, 12984,
	-98, -1000, 786, -1000, 757, -1000, -1000, -1000, 21313, 66,
	688, 6758, 1409, 6758, 1408, 83, 1407, -1000, -1000, -1000,
	-1000, -1000, 271, -1000, -1000, 1615, 1604, 1793, -1000, -1000,
	-1000, -1000, 124, 124, 124, 124, -3, 687, -1000, 829,
	-1000, 21313, -1000, 1090, -1000, -1000, -1000, 356, -1000, -1000,
	-1000, -1000, 1404, 1749, -1000, 1941, 21313, 1728, 21313, 1399,
	459, 6758, -1000, -1000, 1800, -1000, 1798, 434, 434, -1000,
	-1000, -1000, 1271, -1000, 444, -1000, 15174, 21313, -1000, 182,
	72, -1000, 1086, -1000, 1032, 21313, 683, 962, -1000, -1000,
	-1000, 726, 95, -1000, 21313, 4058, -1000, 354, 1023, -1000,
	912, 62, -1000, -1000, 1002, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 752, 21313, -1000, 182, 1521, -1000, 679, -1000,
	-1000, -1000, 22823, 170, -1000, -1000, 22823, 64, -1000, 168,
	-1000, -1000, 995, -1000, 841, 1026, -1000, 64, 23014, 5860,
	-1000, 23014, 983, -1000,
}

var yyPgo = [...]int{
	0, 117, 2187, 174, 139, 129, 173, 2184, 1733, 1726,
	2183, 2181, 2180, 2179, 2178, 2177, 2176, 2175, 2174, 2173,
	2172, 2171, 2168, 2167, 170, 2164, 2162, 2161, 2160, 2158,
	2152, 2151, 2150, 2148, 2147, 2146, 2145, 119, 2144, 1712,
	2143, 2142, 2141, 2139, 2137, 152, 2136, 2135, 2134, 2133,
	2132, 2131, 2130, 2129, 2128, 2125, 2124, 2123, 2122, 164,
	70, 116, 180, 63, 181, 179, 136, 73, 122, 159,
	114, 2121, 2120, 107, 26, 125, 2115, 41, 38, 37,
	192, 101, 46, 53, 92, 2114, 2113, 90, 2112, 2110,
	2109, 2108, 52, 2107, 81, 48, 87, 28, 2105, 2104,
	2103, 84, 2102, 2100, 2099, 2098, 86, 2097, 54, 74,
	2096, 2095, 2094, 2093, 2092, 34, 2091, 60, 2090, 2088,
	2087, 2085, 2084, 2083, 2082, 15, 18, 20, 2081, 2080,
	17, 3, 2079, 153, 115, 88, 102, 2078, 314, 2076,
	2075, 2074, 112, 2073, 148, 2072, 2071, 2070, 2069, 2068,
	10, 2067, 45, 2066, 2064, 2063, 44, 2060, 2059, 2057,
	100, 43, 67, 98, 2056, 2041, 77, 151, 16, 142,
	0, 147, 39, 2040, 2039, 2038, 187, 146, 144, 2037,
	103, 260, 133, 47, 2036, 76, 66, 2034, 2033, 2032,
	104, 68, 11, 2031, 110, 2030, 96, 91, 2025, 109,
	2023, 135, 2, 106, 2021, 156, 2016, 2009, 2008, 132,
	2005, 2004, 62, 118, 2003, 2002, 2001, 24, 1999, 31,
	30, 1996, 137, 161, 1994, 1992, 1988, 127, 94, 83,
	1987, 1971, 78, 1965, 121, 79, 65, 113, 688, 111,
	55, 19, 1963, 157, 1960, 178, 202, 143, 1958, 1957,
	167, 1085, 162, 1956, 149, 9, 1954, 1950, 12, 1948,
	23, 1946, 1922, 1919, 1918, 6, 1901, 1900, 1898, 1,
	5, 1897, 4, 108, 42, 56, 1895, 61, 72, 1893,
	1892, 1891, 1890, 1889, 194, 1885, 1884, 1883, 1882, 1881,
	1878, 1877, 82, 1876, 1875, 1874, 1873, 57, 1872, 1871,
	1868, 1867, 1866, 29, 1865, 1863, 21, 1862, 25, 1861,
	1860, 1859, 13, 134, 1858, 1857, 14, 1856, 1855, 7,
	8, 1853, 1852, 51, 40, 36, 80, 85, 1851, 22,
	1850, 99, 1848, 1846, 141, 1845, 105, 1844, 123, 160,
	223, 1843, 150, 1830, 1828, 1827, 1826, 1824, 1823, 1822,
	707, 1821, 1819, 163, 49, 1817, 1814, 1813, 138, 1811,
}

//line mysql_sql.y:6769
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 355, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 53, 322, 322, 321, 321, 320,
	320, 319, 319, 319, 318, 318, 318, 317, 317, 316,
	316, 315, 315, 313, 313, 314, 312, 311, 311, 309,
	309, 307, 307, 308, 308, 302, 302, 305, 305, 303,
	303, 303, 303, 306, 301, 301, 301, 300, 300, 52,
	52, 52, 240, 240, 51, 51, 254, 254, 254, 254,
	254, 252, 252, 252, 252, 251, 251, 250, 250, 255,
	255, 253, 253, 253, 253, 253, 253, 253, 253, 253,
	253, 253, 253, 253, 253, 253, 253, 253, 253, 253,
	253, 253, 253, 253, 253, 253, 253, 253, 253, 253,
	253, 253, 253, 253, 46, 46, 46, 46, 49, 50,
	248, 248, 248, 248, 248, 249, 249, 249, 47, 48,
	48, 239, 239, 244, 244, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 247, 247, 247,
	246, 246, 245, 245, 40, 40, 40, 43, 42, 238,
	238, 238, 238, 238, 238, 238, 238, 41, 41, 41,
	41, 41, 41, 38, 38, 37, 37, 39, 39, 237,
	237, 236, 56, 56, 56, 56, 56, 56, 56, 55,
	55, 58, 58, 57, 45, 45, 45, 45, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 345, 345, 345,
	347, 347, 174, 175, 356, 173, 173, 173, 341, 341,
	342, 343, 344, 344, 344, 54, 7, 36, 36, 284,
	284, 187, 187, 188, 188, 186, 186, 186, 186, 186,
	186, 287, 288, 183, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 28, 28, 35, 357, 357,
	357, 33, 34, 283, 283, 283, 32, 31, 30, 29,
	29, 27, 27, 26, 26, 180, 180, 182, 182, 178,
	358, 358, 260, 260, 181, 181, 25, 25, 179, 179,
	157, 177, 177, 177, 6, 10, 10, 10, 10, 10,
	10, 16, 15, 13, 12, 11, 14, 5, 5, 5,
	5, 8, 8, 9, 68, 68, 96, 96, 354, 354,
	350, 350, 351, 351, 351, 352, 352, 353, 353, 4,
	291, 291, 291, 291, 291, 291, 330, 330, 330, 331,
	86, 86, 81, 81, 292, 292, 203, 332, 332, 299,
	299, 298, 298, 297, 297, 84, 84, 85, 85, 72,
	72, 59, 59, 304, 304, 304, 304, 310, 310, 281,
	281, 122, 122, 153, 153, 154, 154, 60, 60, 61,
	61, 61, 61, 61, 61, 338, 338, 340, 340, 339,
	83, 83, 79, 79, 80, 80, 80, 78, 78, 77,
	76, 76, 75, 74, 74, 74, 63, 63, 62, 62,
	62, 62, 62, 138, 138, 138, 64, 64, 346, 346,
	346, 285, 285, 285, 290, 290, 135, 135, 136, 136,
	134, 134, 65, 65, 66, 66, 66, 66, 133, 133,
	132, 67, 67, 73, 69, 69, 71, 71, 71, 71,
	143, 143, 142, 142, 142, 142, 89, 89, 141, 140,
	140, 140, 88, 88, 87, 87, 82, 82, 70, 70,
	139, 359, 359, 137, 166, 166, 166, 172, 172, 165,
	165, 165, 165, 165, 176, 171, 171, 167, 167, 168,
	168, 168, 3, 3, 3, 19, 19, 19, 19, 23,
	23, 348, 348, 17, 234, 234, 233, 233, 235, 235,
	235, 235, 229, 229, 230, 230, 230, 230, 231, 231,
	231, 232, 232, 232, 232, 228, 228, 227, 225, 225,
	225, 226, 226, 226, 226, 226, 226, 169, 169, 18,
	222, 222, 223, 223, 223, 224, 224, 216, 216, 216,
	216, 22, 220, 220, 221, 221, 221, 221, 221, 217,
	217, 219, 219, 215, 215, 215, 215, 215, 21, 214,
	214, 212, 212, 210, 210, 211, 211, 209, 209, 209,
	213, 213, 20, 286, 286, 256, 256, 259, 259, 266,
	266, 267, 267, 265, 265, 272, 272, 271, 271, 270,
	270, 269, 269, 268, 268, 263, 263, 262, 262, 257,
	257, 257, 257, 257, 258, 258, 261, 261, 264, 264,
	113, 113, 114, 114, 114, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 328, 328, 329, 116, 116, 116,
	120, 120, 120, 120, 120, 120, 115, 115, 117, 117,
	97, 97, 95, 95, 90, 90, 91, 91, 92, 92,
	93, 93, 94, 94, 94, 94, 94, 94, 242, 242,
	326, 326, 327, 327, 323, 323, 323, 325, 325, 325,
	325, 325, 324, 324, 98, 151, 151, 151, 170, 170,
	170, 150, 150, 150, 112, 112, 111, 111, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 241, 241, 184, 184, 185, 185, 130, 128, 128,
	129, 129, 129, 129, 126, 127, 125, 125, 125, 125,
	125, 124, 124, 123, 123, 123, 218, 218, 121, 121,
	119, 119, 119, 118, 118, 118, 273, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 195, 195, 200, 200, 337, 337, 336, 99, 99,
	99, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	108, 108, 108, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 296, 296,
	296, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 149, 349, 349, 349, 333, 333, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 147, 147,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 204, 204, 205, 205, 293, 293, 293,
	293, 293, 293, 294, 294, 295, 295, 295, 295, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 193, 144, 144,
	144, 206, 201, 201, 202, 202, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 198, 198, 198, 198,
	198, 190, 190, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 197, 197, 199, 199, 208, 208, 208, 207,
	207, 207, 207, 207, 207, 207, 110, 110, 110, 110,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	101, 101, 101, 101, 105, 105, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	106, 106, 106, 106, 104, 104, 104, 104, 104, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 103, 152, 152, 274, 274, 277,
	277, 275, 275, 276, 278, 278, 278, 279, 279, 279,
	280, 280, 280, 282, 282, 156, 156, 156, 162, 162,
	155, 155, 163, 163, 164, 164, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158,
}

var yyR2 = [...]int{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 14, 0, 2, 1, 3, 3,
	3, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 0,
	3, 0, 3, 0, 3, 0, 2, 1, 2, 3,
	4, 3, 3, 1, 0, 1, 1, 0, 1, 9,
	4, 7, 0, 3, 7, 4, 1, 3, 3, 3,
	1, 0, 1, 1, 1, 1, 3, 1, 4, 1,
	3, 1, 2, 1, 1, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	2, 1, 1, 1, 3, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 6,
	3, 1, 1, 1, 1, 1, 1, 1, 2, 4,
	6, 1, 4, 1, 3, 3, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 2, 2, 0,
	4, 2, 4, 1, 5, 3, 2, 1, 2, 2,
	4, 4, 5, 2, 1, 1, 2, 9, 7, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 2, 4, 3, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 1, 1, 1, 1, 6, 1, 7, 9, 0,
	2, 0, 1, 1, 2, 2, 2, 1, 4, 2,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 5, 1, 1,
	1, 5, 5, 0, 1, 1, 2, 2, 3, 6,
	7, 4, 4, 7, 8, 0, 2, 0, 2, 2,
	1, 1, 1, 1, 0, 1, 4, 5, 1, 3,
	1, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 4, 4, 6, 4, 4, 3, 1, 1, 2,
	2, 11, 8, 9, 1, 3, 2, 4, 0, 2,
	0, 1, 1, 1, 1, 0, 1, 0, 1, 4,
	2, 1, 5, 4, 4, 2, 0, 1, 3, 3,
	1, 3, 1, 3, 1, 3, 4, 0, 1, 0,
	1, 1, 3, 1, 1, 0, 4, 1, 3, 2,
	1, 0, 8, 0, 4, 7, 4, 0, 2, 0,
	2, 0, 2, 0, 4, 1, 3, 1, 1, 4,
	3, 4, 5, 4, 5, 2, 3, 1, 3, 6,
	0, 3, 0, 1, 2, 4, 4, 0, 1, 3,
	1, 3, 2, 0, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 1, 2, 2, 7, 7, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 2, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 3, 1, 1, 1, 4, 4, 4, 3,
	2, 2, 2, 3, 2, 3, 0, 2, 1, 1,
	2, 2, 0, 1, 2, 4, 1, 3, 1, 4,
	3, 0, 1, 2, 0, 1, 2, 1, 1, 0,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	11, 0, 1, 6, 0, 2, 1, 2, 2, 2,
	2, 2, 0, 1, 2, 2, 2, 2, 1, 3,
	2, 2, 2, 2, 2, 1, 3, 2, 1, 3,
	2, 0, 3, 3, 5, 5, 4, 1, 1, 4,
	1, 3, 1, 3, 2, 1, 1, 0, 1, 1,
	1, 11, 0, 2, 3, 2, 3, 1, 1, 1,
	3, 3, 4, 0, 2, 2, 2, 2, 5, 1,
	1, 0, 3, 0, 1, 1, 2, 4, 4, 4,
	0, 1, 10, 0, 1, 0, 6, 0, 4, 0,
	3, 1, 3, 4, 5, 0, 3, 1, 3, 2,
	3, 1, 2, 0, 6, 0, 2, 0, 2, 4,
	5, 4, 5, 1, 6, 5, 0, 3, 0, 1,
	0, 1, 1, 3, 2, 3, 3, 4, 4, 3,
	3, 3, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 4, 5, 4, 1, 3, 3, 0, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 0, 1, 1, 3, 1, 1,
	2, 1, 7, 7, 7, 7, 8, 5, 0, 1,
	0, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 0, 1, 3, 1, 3, 5, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 2, 1, 2,
	2, 1, 1, 2, 2, 2, 2, 2, 1, 5,
	6, 1, 2, 0, 1, 1, 2, 5, 0, 1,
	1, 1, 2, 2, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 2, 2, 2, 0, 3, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 3, 5, 2, 2, 2, 2, 1,
	1, 2, 5, 6, 6, 6, 1, 1, 1, 1,
	1, 0, 2, 0, 1, 1, 2, 4, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 2, 2, 2,
	0, 1, 1, 5, 4, 4, 5, 5, 5, 5,
	4, 5, 5, 5, 5, 5, 5, 5, 1, 1,
	1, 4, 4, 6, 8, 6, 4, 5, 5, 4,
	6, 6, 7, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 2, 3, 2, 4, 6, 2, 2, 4, 6,
	4, 2, 2, 0, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 3, 0, 1, 1, 3, 3, 3, 3, 3,
	2, 3, 4, 3, 4, 1, 3, 4, 3, 4,
	1, 1, 1, 3, 4, 4, 5, 3, 4, 5,
	6, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 1, 1, 3, 0, 1, 0,
	3, 0, 3, 3, 0, 3, 5, 0, 3, 5,
	0, 1, 1, 0, 1, 1, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -355, -2, -1, -3, -4, -5, -6, -44, -55,
	-57, -58, -24, -7, -54, -37, -38, -40, -46, -51,
	-52, -53, -60, -19, -18, -17, 9, -8, -9, -338,
	-10, -173, -174, -175, -356, -25, -26, -27, -29, -30,
	-31, -32, -33, -34, -35, -28, -36, 192, -39, 50,
	-41, -42, -43, -47, -48, -49, -50, 302, 308, 345,
	-61, -63, -20, -21, -22, -23, 188, 11, 418, -11,
	-14, -12, -13, -15, -16, 210, 209, 29, 269, 270,
	306, 208, 189, 10, 122, 123, 125, 126, 22, -62,
	55, 190, -64, 7, 464, -72, 30, -95, -170, 59,
	-158, -161, 421, 422, 423, 424, 425, 426, 427, 428,
	429, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 415, 227,
	251, 254, 261, 122, 141, 135, 163, 155, 130, 231,
	232, 66, 125, 374, 76, 359, 344, 128, 246, 248,
	250, 253, 233, 151, 146, 245, 229, 144, 234, 31,
	235, 168, 236, 237, 420, 355, 284, 378, 361, 258,
	342, 145, 356, 249, 358, 169, 173, 366, 308, 139,
	140, 363, 368, 167, 207, 34, 417, 219, 369, 171,
	166, 162, 377, 262, 260, 165, 138, 161, 230, 39,
	175, 174, 176, 338, 339, 340, 341, 238, 239, 296,
	365, 158, 147, 288, 131, 19, 372, 214, 360, 309,
	240, 255, 263, 170, 172, 221, 226, 419, 225, 259,
	370, 143, 218, 247, 213, 373, 132, 302, 311, 241,
	126, 252, 367, 376, 38, 324, 137, 129, 204, 123,
	223, 228, 242, 243, 244, 265, 264, 256, 159, 220,
	164, 136, 160, 124, 222, 375, 325, 463, 286, 327,
	157, 154, 224, 197, 371, 362, 127, 331, 326, 152,
	266, 460, 461, 462, 297, 283, 267, 268, 150, 211,
	-39, -9, -8, -62, -63, -177, 20, 342, -45, 343,
	192, 55, -170, -5, -4, -37, -60, -176, -170, 269,
	-176, 195, -170, -251, -222, -250, -223, -253, -224, -169,
	23, 189, 188, 222, 11, 190, 306, 196, 9, 7,
	307, 208, 10, 308, 310, 311, 314, 315, 316, 33,
	319, 320, 59, 62, -170, -251, -222, 226, 233, -77,
	-78, -138, 16, 6, -286, 327, 225, -216, -214, 317,
	205, 204, 77, 380, 194, -350, -351, 185, 186, 187,
	-340, 412, -339, -170, 413, -156, -357, -283, 362, 361,
	-181, 360, 353, 364, 355, 188, 76, 156, 153, 196,
	363, 34, 366, 367, 356, 327, -350, 127, 124, -238,
	82, 132, 131, -238, 225, 32, -244, 337, -243, -245,
	366, 367, 377, 60, 61, 365, -156, -170, 76, -78,
	-138, -77, -61, -63, -338, 327, 225, 196, 195, 380,
	269, -285, -346, 23, -290, 182, 183, 184, 24, 25,
	-1, -84, 217, -95, 121, -78, -77, -78, -150, -170,
	344, 91, -45, -45, 343, -341, -342, -343, -345, 192,
	343, 342, 121, 12, -176, 53, -95, 52, 56, 12,
	56, 55, 465, 60, 304, 318, 327, 305, 317, 197,
	225, 318, 225, 353, 197, 309, 312, 313, 354, 52,
	198, 52, -300, 377, -59, 30, -80, 18, -64, -63,
	17, 23, 24, -348, 195, 412, -212, 200, -212, 196,
	-212, -352, 134, 56, -340, -83, 55, -180, 99, -180,
	-358, 12, 101, 224, 223, 357, 354, -260, 358, 359,
	-181, -180, -180, -181, 195, 380, 22, 22, -284, 200,
	-353, 199, 370, 418, 130, 131, 132, -248, 23, 32,
	336, -222, 225, 56, 91, 20, -246, 91, 102, -245,
	-245, -245, -246, -246, -115, 32, -169, 118, 62, -115,
	32, 121, -79, -80, -64, -63, 57, 57, -284, -284,
	-284, -284, -284, -176, -65, -66, 109, -196, -170, 83,
	-198, 59, -191, 421, 422, 423, 424, 425, 426, 427,
	428, 429, 430, 431, 432, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 76, 342,
	296, 327, 152, 297, 150, 211, -192, -194, -319, -313,
	-189, 55, 107, 108, 115, 84, -193, -273, 27, 86,
	388, -145, -146, -147, -148, -149, -314, -312, 62, 67,
	70, 73, 74, 72, 71, 148, 69, 63, 120, -63,
	-333, -159, -289, -295, 194, -293, 153, 149, 9, 113,
	337, 118, -296, 457, 61, 60, 290, 291, 292, 380,
	287, 293, 200, 44, 294, 295, 298, 387, 299, 45,
	300, 289, 215, 301, 391, 390, 392, 384, 381, 379,
	382, 383, 385, 386, -65, -291, 35, -60, 55, 22,
	55, -170, -79, -59, -80, 121, 67, 62, -45, 57,
	56, -344, 73, 74, -347, 167, 159, -170, -56, 62,
	-3, -4, -5, -6, -24, -37, -60, -315, -313, 55,
	-252, 195, 303, 221, -250, 222, 308, 311, -228, -227,
	-225, -169, -223, -255, -150, -169, 354, -252, -228, -227,
	346, 459, -59, -196, -170, -76, -75, -196, 197, -212,
	-228, 83, -222, -168, 59, 60, 61, -170, -353, -339,
	26, -82, -170, -134, 13, -194, -134, -95, -180, -180,
	-182, -358, -178, -358, 354, -134, -134, -260, -179, -170,
	-212, -228, 327, 27, -69, -67, -70, -71, -73, -137,
	-139, -95, 55, 371, 372, 128, 131, 130, 378, -249,
	336, 23, -222, -243, -239, 62, 337, -227, -247, 52,
	118, -297, -196, 32, -246, -246, -246, -247, -247, 117,
	-170, -59, -228, -222, -170, -97, -95, -171, -168, -161,
	-133, 56, -132, 12, -165, 82, 79, 80, 81, -170,
	26, 62, 121, -196, 98, -207, 91, 92, 93, 94,
	95, 96, 97, 55, 55, 55, 55, 55, 55, 55,
	55, -205, 55, 55, 55, 55, 55, 55, 55, -205,
	55, 55, 55, 55, 55, 62, 62, 104, 103, 114,
	107, 108, 109, 110, 111, 112, 113, 105, 106, 101,
	83, 99, 100, 85, -63, -196, -202, -194, -194, -194,
	-194, -273, -200, -196, 55, -196, 55, 55, 55, -294,
	55, 55, -204, -205, 55, 62, 55, 55, 55, -194,
	55, 55, -133, -292, -203, -332, 458, -86, 57, -81,
	-170, -330, -331, -81, -85, -170, -59, -59, -163, -164,
	-155, -160, -167, -168, -161, 285, 193, 23, 82, 26,
	28, 290, 322, 85, 118, 17, 86, 153, 117, 292,
	388, 291, 188, 48, 390, 392, 391, 381, 379, 329,
	333, 335, 332, 380, 353, 32, 11, 29, 209, 24,
	25, 111, 190, 89, 90, 212, 27, 210, 74, 20,
	51, 12, 14, 15, 293, 328, 200, 199, 101, 346,
	196, 46, 9, 120, 30, 98, 330, 42, 78, 44,
	99, 18, 382, 383, 33, 345, 414, 216, 113, 294,
	295, 49, 83, 336, 72, 52, 79, 16, 47, 100,
	191, 387, 45, 334, 298, 300, 412, 299, 194, 364,
	7, 289, 389, 22, 208, 43, 195, 354, 88, 198,
	73, 215, 149, 6, 77, 10, 50, 53, 384, 385,
	386, 35, 87, 13, 301, 418, 337, 347, 348, 349,
	350, 351, 352, 177, 178, 179, 180, 181, 257, 203,
	201, 205, 206, 458, 459, 182, 183, 280, 282, 156,
	185, 186, 187, 217, 134, 20, -45, -342, 121, 56,
	-82, -254, 109, 59, 56, -226, 328, 465, 60, 57,
	56, -254, 198, 62, 62, 56, 19, 121, 56, -74,
	28, 29, -95, 200, -95, -229, -230, 334, 27, -215,
	53, -210, -211, -209, -213, 32, 12, -68, -96, -170,
	55, 57, 56, -196, -134, -134, -134, -180, -171, -182,
	-177, -182, -178, 121, -157, -170, -229, 55, 22, -140,
	-141, -142, -143, 42, 46, 48, 43, 44, 45, 49,
	22, 56, -359, 26, -166, -172, 26, -167, 62, -168,
	-161, -61, -63, 129, 132, 132, 131, -222, 198, 55,
	91, -247, -247, -247, 32, -169, 52, 56, -134, -66,
	-67, -69, -196, -196, -196, -196, -170, 62, -170, 109,
	-190, 83, 283, 72, 73, 74, -191, -208, 23, 267,
	268, -201, -202, -196, -144, 24, 23, -144, -144, -196,
	-144, 109, -202, -202, 57, 67, -334, -335, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 403, 294,
	289, 295, 293, 287, 301, 296, 297, 152, 410, 411,
	404, 405, 406, 407, 408, 409, -144, -144, -144, -144,
	-144, -196, -349, 281, 280, 282, -144, -144, -144, -144,
	-192, -192, -192, -192, -192, -192, -192, -192, -192, -192,
	-192, -192, -199, -206, -273, 55, 101, 99, 100, 85,
	-194, -192, -192, 57, 56, -337, -336, 87, -196, -334,
	-201, -196, -201, -201, 57, 57, -202, -201, -192, -201,
	-144, 62, -134, 56, 55, 57, 56, 35, 121, 56,
	91, 57, 56, 121, 344, -170, -313, 57, 12, 121,
	121, -227, 17, 418, -169, -150, 198, -228, -301, 199,
	387, -304, 358, -196, -196, -170, -75, -83, 83, 55,
	-234, 418, 336, 335, 331, -231, -232, 330, 332, 329,
	333, 52, 275, 276, 277, 278, -209, -156, 117, 236,
	-95, -68, -170, 12, 56, -354, 121, -1, -170, -134,
	-180, -180, -182, -170, -234, 57, -237, -236, -150, -70,
	-70, -70, -70, 42, 42, 42, 47, 42, 47, 42,
	-142, -237, -73, -170, -172, 57, 132, -228, -183, 62,
	-239, -95, -95, -136, 14, 121, -190, 283, 72, -273,
	57, 56, -196, -196, -196, 26, -202, 57, 57, 57,
	57, 12, -196, -196, -196, -196, -196, 57, 12, 12,
	-196, -196, -196, -196, -196, -202, -199, -194, -192, -192,
	-197, 212, 82, -196, -195, -336, 89, -196, 56, 53,
	57, 12, 57, 57, 57, 53, 57, 56, 57, -196,
	56, -136, -203, -299, -298, -297, 35, -60, -81, -292,
	-170, -331, -297, -170, -163, -160, -168, -161, 67, -228,
	109, 109, 59, -169, 337, -169, -228, -240, 418, 30,
	-310, 352, 347, 349, 121, 26, 27, -90, -91, -92,
	-98, -93, -150, -185, -94, 203, 201, 205, -327, 77,
	206, 257, 78, 196, -233, -235, 338, 339, 340, 341,
	82, -232, 62, 62, 62, 62, -95, -162, 91, -162,
	-162, -84, 53, 121, -67, -96, -170, 109, 57, -134,
	-134, -180, -187, -188, -186, 285, -287, 337, 328, -134,
	56, 91, -88, -87, 52, 53, -89, 52, -87, 42,
	42, -134, -83, 57, -135, 15, 17, -170, 109, -196,
	57, 57, 57, -99, -101, 324, 325, -105, -102, -104,
	-103, -107, -106, 153, 154, 118, 157, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 22, 211, 149,
	150, 151, 152, 169, 135, 155, 416, 177, 136, 178,
	137, 179, 138, 180, 139, 140, 181, 141, 144, 145,
	146, 143, 57, -196, 57, 57, 57, 57, 57, -196,
	-196, 12, 57, 57, 57, 57, 57, -197, 82, -194,
	-191, 57, 90, -196, 88, -100, -106, 118, 153, 211,
	152, 151, 149, 324, 325, -115, -196, -115, -192, 57,
	62, -135, 57, 56, -292, -169, 17, 26, -229, 308,
	195, -281, 460, -308, 347, 17, 17, -60, -95, 57,
	56, -101, -94, -170, 78, -326, -327, -212, -326, 78,
	55, -235, 67, 67, 67, 67, -232, 55, -115, -117,
	-169, 118, 62, -166, -67, -170, -134, -354, 121, -134,
	-186, 286, 33, 120, 288, 32, 284, 17, -78, -236,
	-196, -196, 55, -196, -196, -202, 57, -108, 140, 139,
	-108, -280, 325, 324, -274, -276, 55, -275, 55, -275,
	-274, -274, 55, 55, -274, -277, 55, -277, -274, -278,
	55, -278, -279, 55, -278, 57, 57, 57, -196, -191,
	-196, 57, -274, -275, -274, -277, -274, -108, -108, 57,
	57, 20, 57, 57, 57, -297, -169, -169, -240, 309,
	-95, -122, 461, 62, 17, 62, -306, 62, -83, -113,
	-114, -131, 322, 227, -213, 231, 66, 232, 344, 233,
	196, 235, 236, 237, 207, 238, 239, 240, 337, 241,
	242, 243, 244, 305, 6, 271, -92, -112, -111, -109,
	72, 83, 32, 322, -110, 66, 117, 250, 228, 251,
	-130, -184, 201, 77, 78, 310, -185, -323, -324, -170,
	-324, -170, -323, -323, -212, -196, -217, -219, -150, 55,
	-134, -134, 67, -288, -183, -79, -82, -282, 326, 67,
	67, -152, 62, -152, 67, 67, 67, 57, -196, -302,
	-260, -153, 462, 67, 62, 349, 26, -256, 217, 56,
	-131, -162, -162, -156, 117, -162, -162, -162, -162, 234,
	234, -162, -162, -162, -162, -162, -162, -162, -162, -162,
	-162, -162, -162, -162, -162, 55, -109, 72, -192, 62,
	-117, -118, 32, 249, 245, -119, 32, 229, 230, -121,
	55, 257, 78, 78, -95, 55, 53, 266, 55, 55,
	55, -324, 57, 57, 56, -274, -196, -78, 287, 57,
	57, 57, 57, 56, 57, 57, 57, 56, 57, 56,
	57, -309, 352, -305, -303, 347, 348, 349, 350, 55,
	17, -60, 17, -131, 67, 67, -162, -162, 67, 62,
	62, 62, -162, -162, 67, 62, -172, 67, 67, 67,
	67, 32, 62, -120, 32, 245, 249, 246, 247, 248,
	67, 32, 67, 32, 67, 32, -170, 55, -328, -329,
	62, 67, 55, -218, 55, -217, -325, 275, 276, 277,
	279, 278, -325, -217, -217, -217, 55, -242, -241, 258,
	83, -220, -219, -74, 57, -79, 62, 67, 67, -311,
	199, -307, 351, -303, 17, 349, 17, 17, -154, -170,
	-306, -257, 259, 260, -258, -264, 262, -115, -115, 62,
	62, -116, 228, -97, 57, 56, 91, 57, -196, -124,
	-123, 414, -217, 57, 57, 57, 57, -217, 258, -221,
	207, 66, 418, 273, 274, -74, 57, 57, -318, 55,
	67, -308, 17, -306, 17, -306, -306, 57, 56, -262,
	263, 55, -260, 55, -260, 78, 276, 229, 230, 57,
	-329, 62, 57, -128, -129, -126, -127, 52, 356, 255,
	256, 57, -220, -220, -220, -220, 57, -162, 62, 272,
	-322, 22, 57, -317, -316, -151, -312, -170, 352, 62,
	-306, -170, -259, 264, 67, -192, 55, -192, 55, -261,
	261, 55, -241, -127, 52, -126, 52, 11, 10, -130,
	67, -168, -321, -320, -319, 57, 56, 121, -266, 55,
	17, 57, -255, 57, -255, 55, 91, -192, -125, 252,
	253, 22, 131, -125, 56, 91, -316, -170, -267, -265,
	217, -258, 57, 57, -255, 67, 57, 72, 32, 254,
	-320, 32, -196, 121, 57, 56, 59, -263, 265, 57,
	-170, -265, -268, 35, 67, -272, -269, 55, -131, 219,
	-272, -131, -271, -270, 264, 220, 57, 56, 59, 55,
	-270, -269, -202, 57,
}

var yyDef = [...]int{
	23, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 502, 503, 504, 0, 317, 318, 0,
	304, 0, 0, 0, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 236, 0, 185, 184,
	164, 165, 166, 124, 125, 126, 127, 0, 0, 0,
	387, -2, 505, 506, 507, 508, -2, 330, 0, 305,
	306, 307, 308, 309, 310, 225, 226, 227, 222, 223,
	224, -2, 0, 330, 177, 0, 169, 169, 0, 407,
	0, 0, 418, 431, 23, 365, 0, 370, 682, 718,
	719, 720, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425,
	1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435,
	1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445,
	1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1246, 1247,
	1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257,
	1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267,
	1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
	1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
	1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
	1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317,
	1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
	1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
	1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347,
	1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357,
	1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367,
	1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377,
	1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
	1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397,
	1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
	186, 319, 320, 407, 407, 208, 0, 1288, 212, 0,
	0, 0, 301, 204, 205, 206, 207, 0, 494, 0,
	201, 0, 183, 0, 0, 85, 550, 87, 552, 0,
	91, 93, 94, -2, 98, 99, 100, 101, 102, 103,
	104, 0, 106, 1296, 108, 1356, 111, 112, 113, 0,
	122, 123, -2, -2, 547, 0, 0, 1344, 67, -2,
	0, 0, 0, 423, 511, 581, 581, 0, 581, 594,
	558, 559, 560, 579, 580, 335, 331, 332, 333, 334,
	395, 0, 397, 400, 285, 285, 0, 0, 276, 277,
	0, 294, 285, 285, 294, 0, 1085, 0, 0, 268,
	269, 270, 274, 275, 295, 239, 337, 178, 179, 168,
	0, 173, 0, 167, 1346, 0, 138, 0, 143, 0,
	1295, 1360, 1310, 0, 0, 1328, 0, 162, -2, 402,
	0, 408, 0, 407, 0, 239, 239, 239, 239, 239,
	0, 0, 0, 432, 433, 428, 429, 430, 434, 435,
	3, 0, 0, 369, 0, 402, -2, 0, 209, 721,
	0, 0, 213, 214, 0, 0, 228, 0, 231, 217,
	218, 219, 0, 0, 203, 0, 0, 81, 0, 0,
	0, 0, 0, 554, 92, 121, 95, 96, 0, 116,
	118, 120, 119, 105, 117, 107, 109, 110, 115, 81,
	0, 0, 0, 68, 390, 0, 371, 0, 420, 422,
	0, 424, 425, 0, 581, 512, 0, 0, 0, 0,
	0, 337, 336, 0, 396, 0, 0, 440, 0, 440,
	0, 290, 291, 285, 285, 278, 287, 0, 292, 293,
	0, 440, 440, 0, 0, 581, 1086, 1087, 0, 0,
	0, 338, 0, 0, 171, 0, 176, 128, 133, 131,
	132, 134, 0, 0, 0, 0, 0, 160, 161, 0,
	0, 0, 0, 0, 151, 154, 676, 677, 548, 155,
	156, 0, 371, 403, 419, 421, 416, 417, 0, 0,
	0, 0, 0, 316, 448, 442, 444, 489, 31, 0,
	975, 718, 980, -2, 1419, 1420, 1421, 1422, 1423, 1424,
	1425, -2, 1427, -2, -2, 1430, 1431, 1432, 1434, -2,
	-2, -2, -2, -2, -2, 1441, -2, -2, -2, 1445,
	1446, -2, -2, 1449, 1450, 1451, 1452, 1453, -2, -2,
	-2, -2, -2, -2, -2, -2, 991, 789, 790, 791,
	792, 0, 0, 0, 0, 0, 799, 800, 0, 813,
	0, 806, 807, 808, 809, 810, 43, 44, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 938, 776,
	0, 0, 0, 923, 0, 913, 0, 951, 0, 0,
	0, 0, 0, 0, 45, 46, 929, 931, 932, 934,
	935, 936, 937, 940, 941, 942, 945, 946, 947, 948,
	949, 950, 953, 955, 925, 926, 927, 928, 917, 918,
	919, 920, 921, 922, 448, 339, 357, 341, 0, 346,
	0, 683, 371, 393, 371, 0, 210, 0, 215, 0,
	0, 230, 232, 233, 234, 220, 221, 302, 199, 200,
	192, 193, 194, 195, 196, 197, 198, 202, 41, 0,
	0, 82, 83, 84, 86, 97, 0, 0, 75, 535,
	541, 538, 551, 0, 89, 553, 114, 0, 70, 0,
	0, 0, 391, 404, 31, 409, 410, 413, 0, 0,
	522, 0, 549, 573, 499, 500, 501, -2, 0, 398,
	0, 0, 476, 265, 0, 286, 266, 440, 440, 440,
	285, 0, 287, 0, 287, 281, 282, 0, 296, 298,
	0, 522, 1387, 240, 453, 0, 454, 455, 451, 478,
	481, 484, 0, 180, 181, 0, 0, 175, 0, 0,
	135, 136, 137, 144, 139, 141, 0, 0, 145, 157,
	158, 159, 363, 364, 0, 0, 0, 149, 150, 0,
	163, 389, 311, 312, 0, 314, 680, 315, 495, 496,
	440, 0, 449, 0, 445, 0, 0, 0, 0, 490,
	0, 492, 0, 970, 0, 0, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 962, 958, 958, 958, 0, 958, 0,
	0, 898, 0, 0, 958, 958, 958, 958, 958, 899,
	0, 958, 958, 958, 958, 912, 906, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 964, 0, 795, 796, 797,
	798, 801, 0, 814, 0, 0, 962, 962, 962, 901,
	0, 0, 903, 914, 0, 907, 962, 0, 962, 911,
	958, 0, 440, 340, 354, 0, 358, 0, 0, 350,
	352, 345, 347, 0, 0, 367, 392, 394, 722, 0,
	1092, -2, 1094, -2, -2, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240,
	1241, 1242, 1243, 1244, 1245, 0, 216, 229, 0, 0,
	0, 0, 76, 80, 0, 537, 0, 0, 540, 88,
	0, 0, 0, 64, 373, 0, 0, 0, 0, 412,
	414, 415, 400, 0, 0, 514, 523, 0, 582, 0,
	0, 578, -2, 585, 0, 591, 0, 0, 324, 328,
	23, 401, 0, 441, 267, 271, 272, 440, 288, 285,
	289, 285, 287, 0, 297, 300, 514, 0, 0, 0,
	0, 0, 0, 469, 0, 0, 468, 0, 0, 0,
	0, 0, 0, 482, 483, 485, 0, 487, 488, 497,
	498, 0, 407, 182, 170, 172, 0, 130, 0, 0,
	0, 146, 147, 148, 152, 153, 0, 0, 438, 443,
	450, 453, 966, 967, 968, 969, 491, 493, 32, 446,
	971, 0, 973, 976, 981, 982, 978, 0, 996, -2,
	-2, 0, 963, 964, 0, 959, 960, 0, 0, 0,
	0, 0, 0, 0, 915, 0, 0, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 0, 0, 0, 0,
	0, 0, 0, 864, 865, 866, 0, 0, 0, 0,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 983, 994, 995, 0, 0, 0, 0, 0,
	992, 987, 0, 793, 0, 811, 815, 0, 0, 957,
	0, 964, 0, 0, 924, 902, 0, 0, 0, 0,
	0, 0, 438, 357, 359, 0, 0, 357, 0, 0,
	0, 366, 0, 0, 0, 303, 42, 235, 0, 0,
	0, 536, 0, 0, 539, 90, 0, 72, 0, 65,
	66, 377, 0, 405, 406, 32, 411, 0, 0, 684,
	513, 0, 524, 525, 526, 527, 528, 0, 0, 0,
	0, 0, 574, 575, 576, 577, 586, 1088, 1088, 1088,
	365, 0, -2, 0, 0, 326, 0, 0, 477, 279,
	440, 440, 285, 299, 241, 0, 440, 189, 0, 472,
	466, 0, 459, 470, 471, 462, 0, 464, 0, 460,
	461, 440, 452, 400, 486, 480, 174, 129, 0, 253,
	140, 313, 681, 436, 0, 0, 972, 974, 977, 979,
	851, 0, 0, 0, 0, 0, 0, 840, 834, 835,
	916, 0, 0, 0, 0, 0, 0, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 984, 992, 988, 0,
	985, 0, 0, 965, 0, 816, 0, 0, 0, 0,
	852, 0, 856, 900, 904, 0, 908, 0, 910, 0,
	0, 436, 355, 0, 360, 361, 357, 344, 351, 343,
	353, 348, 349, 368, 723, 1093, 1090, 1091, 211, 74,
	77, 78, 79, 542, 0, 543, 522, 71, 0, 0,
	379, 53, 0, 0, 0, 0, 0, 0, 685, 686,
	688, 689, 0, 0, 691, 745, 0, 700, 581, 700,
	0, 0, 702, 703, 515, 516, 0, 0, 0, 0,
	0, 530, 531, 532, 533, 534, 0, 0, 1089, 0,
	0, 484, 0, 0, 440, 325, 328, 329, 399, 283,
	280, 440, 237, 242, 243, 0, 247, 0, 0, 407,
	0, 0, 456, 473, 0, 0, 457, 0, 458, 463,
	465, 188, 479, 142, 426, 0, 0, 33, 447, 965,
	836, 837, 838, 0, 818, 830, 830, 1080, 1021, 1022,
	1023, 1067, 1025, 1071, 1071, 1067, 1067, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 0, 0, 1044, 1067,
	1069, 1069, 1067, 1064, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1074, 1074,
	1077, 1074, 839, 0, 858, 841, 842, 845, 843, 0,
	0, 0, 857, 846, 847, 833, 961, 986, 0, 993,
	989, 794, 802, 812, 0, 0, 821, 1067, 1071, 824,
	1067, 1069, 1067, 830, 830, 0, 0, 0, 0, 844,
	0, 427, 356, 0, 342, 546, 0, 0, 72, 0,
	0, 381, 0, 378, 0, 0, 0, 509, 400, -2,
	0, -2, 690, 746, 712, 712, 701, 712, 712, 581,
	0, 517, 518, 519, 520, 521, 529, 0, 587, 588,
	678, 679, 589, 440, 440, -2, 322, 327, 0, 284,
	244, 245, 246, 0, 249, 250, 252, 0, 402, 190,
	191, 474, 0, 467, 437, 439, 803, 819, 831, 832,
	820, 1083, 1081, 1082, 1024, 1068, 0, 1049, 0, 1050,
	1051, 1052, 0, 0, 1045, 1046, 0, 1047, 1048, 1040,
	0, 1041, 1042, 0, 1043, 855, 860, 861, 0, 990,
	817, 804, 822, 823, 825, 826, 827, 828, 829, 805,
	853, 0, 905, 909, 863, 362, 544, 545, 69, 73,
	55, 383, 0, 380, 0, 374, 376, 63, 0, 595,
	-2, 632, 1088, 1088, 0, 1088, 1088, 1088, 1088, 0,
	0, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
	1088, 1088, 1088, 1088, 1088, 0, 687, 714, -2, 726,
	728, 0, 0, 731, 732, 0, 0, 0, 0, 768,
	738, 0, 0, 1008, 1009, 0, 744, 0, 704, 713,
	0, 713, 0, 0, 712, 0, 0, 569, 1067, 0,
	407, 323, 0, 251, 238, 187, 0, 1020, 1084, 0,
	0, 0, 1065, 0, 0, 0, 0, 862, 0, 49,
	0, 372, 0, 382, 54, 0, 0, 592, 0, 590,
	634, 0, 0, 1088, 1088, 0, 0, 0, 0, 1088,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 727, 729, 730, 733,
	734, 735, 773, 774, 775, 736, 770, 771, 772, 737,
	0, 0, 1006, 1007, 766, 0, 0, 0, 0, 0,
	0, 0, 698, 562, 0, 413, 0, 402, 248, 475,
	1073, 1072, 1062, 0, 1063, 1070, 1075, 0, 1078, 0,
	854, 47, 51, 56, 57, 0, 0, 0, 0, 0,
	0, 510, 628, 633, 635, 636, 0, 0, 639, 640,
	641, 642, 0, 0, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 670, 671, 672, 673, 674, 675,
	655, 656, 657, 658, 659, 660, 667, 0, 0, 664,
	0, 0, 0, 761, 0, 0, 705, 707, 708, 709,
	710, 711, 706, 0, 0, 0, 0, 697, 699, 741,
	0, 561, 570, 571, 413, 321, 1066, 0, 0, 34,
	0, 53, 0, 58, 0, 0, 0, 0, 0, 385,
	375, 617, 0, 0, 623, 0, 629, 637, 638, 643,
	644, 661, 0, 0, 663, 0, 0, 769, 0, 748,
	762, 0, 0, 562, 562, 562, 562, 0, 742, 563,
	1088, 0, 0, 567, 568, 572, 1076, 1079, 25, 0,
	0, 50, 0, 59, 0, 61, 62, 384, 0, 597,
	0, 0, 0, 0, 0, 626, 0, 668, 669, 662,
	665, 666, 739, 747, 749, 750, 751, 0, 763, 764,
	765, 767, 692, 693, 694, 695, 0, 0, 565, 0,
	24, 0, 35, 0, 37, 39, 40, 715, 48, 52,
	60, 386, 599, 0, 618, 0, 0, 0, 0, 0,
	0, 0, 740, 752, 0, 753, 0, 0, 0, 696,
	564, 566, 26, 27, 0, 36, 0, 0, 596, 0,
	628, 619, 0, 621, 0, 0, 0, 0, 754, 756,
	757, 0, 0, 755, 0, 0, 38, 716, 0, 601,
	0, 615, 620, 622, 0, 627, 625, 758, 760, 759,
	28, 29, 30, 0, 600, 0, 613, 598, 0, 624,
	717, 602, -2, 0, 616, 603, -2, 0, 611, 0,
	604, 612, 0, 607, 0, 0, 606, 0, -2, 0,
	608, -2, 0, 614,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 84, 3, 3, 3, 112, 104, 3,
	55, 57, 109, 107, 56, 108, 121, 110, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 464,
	92, 91, 93, 3, 465, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 114, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 115,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 85,
	86, 87, 88, 89, 90, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 105, 106, 111, 113, 116, 117,
	118, 119, 120, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:518
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:524
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:550
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:554
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 24:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:560
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				File:              yyDollar[5].str,
				DuplicateHandling: yyDollar[6].duplicateKeyUnion(),
				Table:             yyDollar[9].tableNameUnion(),
				Fields:            yyDollar[10].fieldsUnion(),
				Lines:             yyDollar[11].linesUnion(),
				IgnoredLines:      uint64(yyDollar[12].int64ValUnion()),
				ColumnList:        yyDollar[13].loadColumnsUnion(),
				Assignments:       yyDollar[14].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:575
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:579
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:585
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:589
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:595
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:602
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:611
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:615
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:619
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:624
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:628
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:632
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:638
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:647
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:658
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:662
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:668
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:672
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:678
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:682
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:688
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:712
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//        	yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:731
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:735
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:740
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:744
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:752
		{
			yyVAL.str = ""
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:756
		{
			yyVAL.str = yyDollar[3].str
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:761
		{
			yyVAL.str = "\n"
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:765
		{
			yyVAL.str = yyDollar[3].str
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:770
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:774
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:798
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:802
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:808
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:814
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:832
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:849
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:872
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:876
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:880
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:885
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:889
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:895
		{
			yyLOCAL = &tree.Grant{
				Privileges:  yyDollar[2].privilegesUnion(),
				ObjType:     yyDollar[4].objectTypeUnion(),
				Level:       yyDollar[5].privilegeLevelUnion(),
				Users:       yyDollar[7].usersUnion(),
				GrantOption: yyDollar[9].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:905
		{
			yyLOCAL = &tree.Grant{
				IsGrantRole:      true,
				RolesInGrantRole: yyDollar[2].rolesUnion(),
				Users:            yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:913
		{
			yyLOCAL = &tree.Grant{
				IsProxy:     true,
				ProxyUser:   yyDollar[4].userUnion(),
				Users:       yyDollar[6].usersUnion(),
				GrantOption: yyDollar[7].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:923
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:927
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:937
		{
			yyLOCAL = &tree.Revoke{
				Privileges: yyDollar[2].privilegesUnion(),
				ObjType:    yyDollar[4].objectTypeUnion(),
				Level:      yyDollar[5].privilegeLevelUnion(),
				Users:      yyDollar[7].usersUnion(),
				Roles:      nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:947
		{
			yyLOCAL = &tree.Revoke{
				IsRevokeRole:      true,
				RolesInRevokeRole: yyDollar[2].rolesUnion(),
				Users:             yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:957
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:963
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_GLOBAL,
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:969
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
				DbName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:976
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				DbName:  yyDollar[1].str,
				TabName: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:984
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:992
		{
			yyLOCAL = tree.OBJECT_TYPE_NONE
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:996
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1000
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1004
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1010
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1014
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1020
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1027
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1036
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1040
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1046
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1050
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1054
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1058
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1062
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1066
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1070
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1074
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1078
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1082
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1086
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1090
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1094
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1098
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1102
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1106
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1110
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1114
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1118
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1122
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1126
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1130
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1134
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1138
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1142
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1146
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1150
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1154
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1158
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1162
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1166
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1170
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1174
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1186
		{
			yyLOCAL = yyDollar[3].setRoleUnion()
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1192
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1200
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL_EXCEPT, Roles: yyDollar[3].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1204
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_DEFAULT, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1208
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1212
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1216
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1222
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1226
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1230
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1236
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1242
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1246
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:1253
		{
			yyVAL.str = yyDollar[3].str
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1259
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1263
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1269
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1277
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1286
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1294
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1302
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1325
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1348
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1355
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1362
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     yyDollar[1].str,
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1370
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1377
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1384
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1393
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1397
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1401
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1407
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1411
		{
			yyVAL.str = yyDollar[1].str
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1418
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1429
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1435
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1440
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1444
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1448
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1452
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1456
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1460
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1464
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1468
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1474
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1478
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1482
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1486
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1491
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1496
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1502
		{
			yyLOCAL = &tree.Use{Name: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1506
		{
			yyLOCAL = &tree.Use{}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1513
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1520
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1531
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: yyDollar[4].tableExprsUnion(),
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1542
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1546
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1552
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1564
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1570
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1574
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1580
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1584
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1590
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1599
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1605
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1610
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1615
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1619
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1623
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1627
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1635
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1643
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1653
		{
			explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
			explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1685
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1689
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:1695
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1701
		{
			yyVAL.str = yyDollar[1].str
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1706
		{
			yyVAL.str = "true"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1707
		{
			yyVAL.str = "false"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1708
		{
			yyVAL.str = yyDollar[1].str
		}
	case 235:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1713
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1723
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: false,
				Users:      yyDollar[4].usersUnion(),
				TlsOpts:    yyDollar[5].tlsOptionsUnion(),
				ResOpts:    yyDollar[6].resourceOptionsUnion(),
				MiscOpts:   yyDollar[7].userMiscOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1734
		{
			auth := &tree.User{
				AuthString: yyDollar[9].str,
				ByAuth:     true,
			}
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: true,
				UserFunc:   auth,
			}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1747
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1751
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1756
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1760
		{
			yyLOCAL = yyDollar[1].userMiscOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1766
		{
			yyLOCAL = []tree.UserMiscOption{yyDollar[1].userMiscOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1770
		{
			yyLOCAL = append(yyDollar[1].userMiscOptionsUnion(), yyDollar[2].userMiscOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1776
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1780
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1784
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1788
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1792
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1796
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1802
		{
			yyVAL.item = nil
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1807
		{
			yyVAL.item = nil
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1829
		{
			yyLOCAL = &tree.ShowTarget{Target: yyDollar[2].str, Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1833
		{
			yyLOCAL = &tree.ShowTarget{Target: "charset", Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1839
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: *yyDollar[4].tableNameUnion(),
				Where:     yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1853
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1863
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1872
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1876
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1880
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1886
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1892
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1898
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1904
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1914
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1926
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1930
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1936
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1948
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1961
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1965
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1970
		{
			yyVAL.str = ""
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:1974
		{
			yyVAL.str = yyDollar[2].str
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1980
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1993
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1997
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2003
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2007
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2013
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2017
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2026
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2030
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2034
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].str, yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2051
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2060
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2069
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].str),
				TableName: *yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2079
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2085
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].str), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2091
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2099
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2104
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2111
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2127
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: yyDollar[7].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2140
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: yyDollar[8].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2151
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2155
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:2161
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:2166
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2173
		{
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2175
		{
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2178
		{
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2187
		{
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2191
		{
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2196
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2205
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2212
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2218
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2226
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2233
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2240
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2259
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2263
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2267
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:2273
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2282
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2286
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2292
		{
			yyVAL.str = yyDollar[1].str
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2296
		{
			yyVAL.str = yyDollar[3].str
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2302
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2306
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2312
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2317
		{
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2321
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2328
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2332
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2339
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2344
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2348
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2354
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2358
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2364
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2368
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2373
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2377
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2390
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2397
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2404
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2422
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2441
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2447
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2454
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2458
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2471
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2475
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2480
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2484
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2491
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2496
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2503
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2509
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2513
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Ep: yyDollar[3].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2517
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2521
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2525
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2529
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2535
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2542
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2551
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2555
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:2561
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].str), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2569
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2573
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2578
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2582
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2588
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2592
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2596
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2601
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2605
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2611
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2617
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2621
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:2627
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2632
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2636
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2640
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2647
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2651
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2657
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2661
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2671
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2681
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2691
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2703
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2711
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2719
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2729
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2740
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2758
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2762
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2766
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2775
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2779
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2784
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2788
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2793
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2797
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2803
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2807
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2813
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2817
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: tree.UnrestrictedIdentifier(yyDollar[2].str)}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2821
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2825
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].str, yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2830
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2838
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2844
		{
			yyLOCAL = &tree.From{
				Tables: yyDollar[2].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2852
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2856
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2869
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2878
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2888
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2897
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2907
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2911
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2921
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2925
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2929
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2933
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2939
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2943
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2949
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2955
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2959
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2963
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2969
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2973
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2979
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2983
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2989
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2993
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2999
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:3003
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[3].str),
					Cols:  yyDollar[4].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:3016
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3021
		{
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3022
		{
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:3026
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3038
		{
			yyVAL.str = ""
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3042
		{
			yyVAL.str = yyDollar[1].str
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3046
		{
			yyVAL.str = yyDollar[2].str
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3055
		{
			yyVAL.str = ""
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3059
		{
			yyVAL.str = yyDollar[1].str
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3063
		{
			yyVAL.str = yyDollar[2].str
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3067
		{
			yyVAL.str = yyDollar[1].str
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3071
		{
			yyVAL.str = yyDollar[2].str
		}
	case 509:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3104
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3114
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[8].tableNameUnion(),
				ColNames:    yyDollar[9].identifierListUnion(),
				AsSource:    yyDollar[11].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3125
		{
		}
	case 513:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3130
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Users:       yyDollar[4].usersUnion(),
				TlsOpts:     yyDollar[5].tlsOptionsUnion(),
				ResOpts:     yyDollar[6].resourceOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3140
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3144
		{
			yyLOCAL = yyDollar[2].resourceOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3150
		{
			yyLOCAL = []tree.ResourceOption{yyDollar[1].resourceOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3154
		{
			yyLOCAL = append(yyDollar[1].resourceOptionsUnion(), yyDollar[2].resourceOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3160
		{
			yyLOCAL = &tree.ResourceOptionMaxQueriesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3164
		{
			yyLOCAL = &tree.ResourceOptionMaxUpdatesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3168
		{
			yyLOCAL = &tree.ResourceOptionMaxConnectionPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3172
		{
			yyLOCAL = &tree.ResourceOptionMaxUserConnections{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3178
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3185
		{
			t := &tree.TlsOptionNone{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3190
		{
			t := &tree.TlsOptionSSL{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3195
		{
			t := &tree.TlsOptionX509{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3200
		{
			yyLOCAL = yyDollar[2].tlsOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3206
		{
			yyLOCAL = []tree.TlsOption{yyDollar[1].tlsOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3210
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[3].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3214
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[2].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3220
		{
			yyLOCAL = &tree.TlsOptionIssuer{Issuer: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3224
		{
			yyLOCAL = &tree.TlsOptionSubject{Subject: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3228
		{
			yyLOCAL = &tree.TlsOptionCipher{Cipher: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3232
		{
			yyLOCAL = &tree.TlsOptionSan{San: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3238
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3242
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3248
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthPlugin: yyDollar[2].authRecordUnion().AuthPlugin,
				AuthString: yyDollar[2].authRecordUnion().AuthString,
				HashString: yyDollar[2].authRecordUnion().HashString,
				ByAuth:     yyDollar[2].authRecordUnion().ByAuth,
			}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3261
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3265
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3269
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3274
		{
			yyLOCAL = &tree.AuthRecord{}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3278
		{
			yyLOCAL = &tree.AuthRecord{
				AuthString: yyDollar[3].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3285
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3291
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				AuthString: yyDollar[5].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3299
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				HashString: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3306
		{
			yyLOCAL = &tree.AuthRecord{
				HashString: yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3318
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3327
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3331
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3337
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: "%"}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3341
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3345
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3354
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3358
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3362
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3366
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3372
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].str),
				Table:       *yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3391
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3395
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3417
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3421
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3425
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3429
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3433
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3439
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3443
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3449
		{
			// Order is parsed but just ignored as MySQL did.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3454
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3459
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3463
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3467
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3471
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3475
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3481
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:   yyDollar[3].ifNotExistsUnion(),
				Name:          tree.Identifier(yyDollar[4].str),
				CreateOptions: yyDollar[5].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3495
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3499
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3504
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3508
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3514
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3518
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3524
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3528
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3532
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3537
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3541
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3547
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3559
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3563
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3568
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3572
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3582
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3586
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3595
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3599
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3605
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3609
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3615
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3624
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3634
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3638
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3644
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3648
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3654
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3661
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3670
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3674
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3679
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3683
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3688
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3692
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3702
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3706
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3717
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3725
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3733
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3741
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3752
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3762
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3772
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3776
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3781
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3785
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3790
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3794
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3800
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3804
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3808
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3814
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3818
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3822
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3826
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3830
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3834
		{
			yyLOCAL = tree.NewTableOptionComment(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3838
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3842
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3846
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3850
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3854
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3858
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3862
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3866
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3870
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3874
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3878
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3882
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3886
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3890
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3894
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3898
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3902
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3906
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3910
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3914
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3918
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].str, yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3922
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3926
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3933
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3937
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:3943
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3948
		{
			yyVAL.str = ""
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3952
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3956
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3962
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3966
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3970
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3974
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3978
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3982
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3996
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:4000
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4009
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4014
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4020
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4027
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4031
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4037
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4041
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4047
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.Name = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4057
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4063
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4072
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4081
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invail the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4104
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4113
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4123
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4131
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4137
		{
			yyVAL.str = ""
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4141
		{
			yyVAL.str = yyDollar[1].str
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4151
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4157
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4163
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4177
		{
			yyVAL.str = ""
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:4184
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4190
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4194
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4198
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4209
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4213
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4217
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4222
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4226
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4232
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4236
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4242
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4246
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4250
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4254
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4258
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4262
		{
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4266
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4270
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4274
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4278
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4282
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4286
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4290
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4300
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4304
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4309
		{
			yyVAL.str = ""
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4313
		{
			yyVAL.str = yyDollar[1].str
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4319
		{
			yyVAL.str = ""
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4323
		{
			yyVAL.str = yyDollar[2].str
		}
	case 747:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:4329
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4340
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4350
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4357
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4364
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4371
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4380
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4386
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4392
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4396
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4400
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4404
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4408
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4413
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4420
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4424
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4428
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4433
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4437
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4442
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4446
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:4462
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4468
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4472
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4476
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4480
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4484
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4488
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4492
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4496
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4500
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4504
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4508
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4512
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4516
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4522
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4526
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4530
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4534
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4538
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4542
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4546
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4550
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4554
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4558
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4562
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4566
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4571
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4579
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4583
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4587
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4596
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4600
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4604
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4608
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4612
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4617
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4621
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4626
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4630
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4636
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4640
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:4646
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4656
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4673
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4690
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4703
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4716
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4728
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4742
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4757
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4772
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4789
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4804
		{
		}
	case 833:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4810
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4819
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4827
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4835
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4844
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4853
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4862
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[4].exprsUnion(),
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4871
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4880
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4889
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4898
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4907
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4916
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4925
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4934
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4950
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4958
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4966
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4974
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4982
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			timeUinit := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4991
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4999
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5008
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5017
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5025
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5033
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5042
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5052
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			a1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			a2 := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{a1, a2},
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5073
		{
			yyVAL.str = yyDollar[1].str
		}
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5109
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5121
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5135
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5143
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5150
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5157
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5169
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5177
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5188
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5197
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5206
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5214
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5224
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5232
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5240
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5250
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5254
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5260
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5264
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5283
		{
		}
	case 924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5285
		{
		}
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5325
		{
			name := tree.SetUnresolvedName("interval")
			arg2 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5335
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5339
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5343
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:5349
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5354
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5358
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5364
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5368
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5375
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5379
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5383
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5391
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5395
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5399
		{
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5403
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5407
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5412
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5417
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5423
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5427
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5431
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5435
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5442
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5446
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5452
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5456
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5460
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5464
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5468
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5472
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5476
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5480
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5486
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5490
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5496
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5500
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5507
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5511
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5515
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5521
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5525
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5529
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5533
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5537
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5541
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5545
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5551
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5555
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5559
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5563
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5569
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5573
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5586
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5591
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5595
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5599
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5603
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_hexnum)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5617
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5621
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_bit)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5635
		{
			yyLOCAL = tree.NewParamExpr(yyp)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5641
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5652
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5657
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5663
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5675
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5687
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5699
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5712
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5725
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5738
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5751
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5764
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5777
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5790
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5803
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5816
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5829
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5844
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5867
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 53 {
				yylex.Error("For float(M), M must between 0 and 53.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5904
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 18 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5952
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5969
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5981
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5996
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6016
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6036
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6052
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6065
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6078
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6091
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6104
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6116
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6128
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6140
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6152
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6164
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6176
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6188
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6200
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6212
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6225
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6240
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6263
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6268
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6274
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6281
		{
			yyLOCAL = 6
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6285
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6290
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6294
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6300
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6306
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6313
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6320
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6329
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 10, // this is the default precision for decimal
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6336
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6343
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6352
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6356
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6360
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6366
		{
		}
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6368
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6378
		{
			yyVAL.str = ""
		}
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6382
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
