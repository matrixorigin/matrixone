// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const SNAPSHOTS = 57437
const INTEGRAL = 57438
const HEX = 57439
const FLOAT = 57440
const HEXNUM = 57441
const BIT_LITERAL = 57442
const NULL = 57443
const TRUE = 57444
const FALSE = 57445
const LOWER_THAN_CHARSET = 57446
const CHARSET = 57447
const UNIQUE = 57448
const KEY = 57449
const OR = 57450
const PIPE_CONCAT = 57451
const XOR = 57452
const AND = 57453
const NOT = 57454
const BETWEEN = 57455
const CASE = 57456
const WHEN = 57457
const THEN = 57458
const ELSE = 57459
const END = 57460
const ELSEIF = 57461
const LOWER_THAN_EQ = 57462
const LE = 57463
const GE = 57464
const NE = 57465
const NULL_SAFE_EQUAL = 57466
const IS = 57467
const LIKE = 57468
const REGEXP = 57469
const IN = 57470
const ASSIGNMENT = 57471
const ILIKE = 57472
const SHIFT_LEFT = 57473
const SHIFT_RIGHT = 57474
const DIV = 57475
const MOD = 57476
const UNARY = 57477
const COLLATE = 57478
const BINARY = 57479
const UNDERSCORE_BINARY = 57480
const INTERVAL = 57481
const OUT = 57482
const INOUT = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const WORK = 57489
const CONSISTENT = 57490
const SNAPSHOT = 57491
const CHAIN = 57492
const NO = 57493
const RELEASE = 57494
const PRIORITY = 57495
const QUICK = 57496
const BIT = 57497
const TINYINT = 57498
const SMALLINT = 57499
const MEDIUMINT = 57500
const INT = 57501
const INTEGER = 57502
const BIGINT = 57503
const INTNUM = 57504
const REAL = 57505
const DOUBLE = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const DECIMAL_VALUE = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const UUID = 57531
const VECF32 = 57532
const VECF64 = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const INT1 = 57542
const INT2 = 57543
const INT3 = 57544
const INT4 = 57545
const INT8 = 57546
const S3OPTION = 57547
const STAGEOPTION = 57548
const SQL_SMALL_RESULT = 57549
const SQL_BIG_RESULT = 57550
const SQL_BUFFER_RESULT = 57551
const LOW_PRIORITY = 57552
const HIGH_PRIORITY = 57553
const DELAYED = 57554
const CREATE = 57555
const ALTER = 57556
const DROP = 57557
const RENAME = 57558
const ANALYZE = 57559
const ADD = 57560
const RETURNS = 57561
const SCHEMA = 57562
const TABLE = 57563
const SEQUENCE = 57564
const INDEX = 57565
const VIEW = 57566
const TO = 57567
const IGNORE = 57568
const IF = 57569
const PRIMARY = 57570
const COLUMN = 57571
const CONSTRAINT = 57572
const SPATIAL = 57573
const FULLTEXT = 57574
const FOREIGN = 57575
const KEY_BLOCK_SIZE = 57576
const SHOW = 57577
const DESCRIBE = 57578
const EXPLAIN = 57579
const DATE = 57580
const ESCAPE = 57581
const REPAIR = 57582
const OPTIMIZE = 57583
const TRUNCATE = 57584
const MAXVALUE = 57585
const PARTITION = 57586
const REORGANIZE = 57587
const LESS = 57588
const THAN = 57589
const PROCEDURE = 57590
const TRIGGER = 57591
const STATUS = 57592
const VARIABLES = 57593
const ROLE = 57594
const PROXY = 57595
const AVG_ROW_LENGTH = 57596
const STORAGE = 57597
const DISK = 57598
const MEMORY = 57599
const CHECKSUM = 57600
const COMPRESSION = 57601
const DATA = 57602
const DIRECTORY = 57603
const DELAY_KEY_WRITE = 57604
const ENCRYPTION = 57605
const ENGINE = 57606
const MAX_ROWS = 57607
const MIN_ROWS = 57608
const PACK_KEYS = 57609
const ROW_FORMAT = 57610
const STATS_AUTO_RECALC = 57611
const STATS_PERSISTENT = 57612
const STATS_SAMPLE_PAGES = 57613
const DYNAMIC = 57614
const COMPRESSED = 57615
const REDUNDANT = 57616
const COMPACT = 57617
const FIXED = 57618
const COLUMN_FORMAT = 57619
const AUTO_RANDOM = 57620
const ENGINE_ATTRIBUTE = 57621
const SECONDARY_ENGINE_ATTRIBUTE = 57622
const INSERT_METHOD = 57623
const RESTRICT = 57624
const CASCADE = 57625
const ACTION = 57626
const PARTIAL = 57627
const SIMPLE = 57628
const CHECK = 57629
const ENFORCED = 57630
const RANGE = 57631
const LIST = 57632
const ALGORITHM = 57633
const LINEAR = 57634
const PARTITIONS = 57635
const SUBPARTITION = 57636
const SUBPARTITIONS = 57637
const CLUSTER = 57638
const TYPE = 57639
const ANY = 57640
const SOME = 57641
const EXTERNAL = 57642
const LOCALFILE = 57643
const URL = 57644
const PREPARE = 57645
const DEALLOCATE = 57646
const RESET = 57647
const EXTENSION = 57648
const INCREMENT = 57649
const CYCLE = 57650
const MINVALUE = 57651
const PUBLICATION = 57652
const SUBSCRIPTIONS = 57653
const PUBLICATIONS = 57654
const PROPERTIES = 57655
const PARSER = 57656
const VISIBLE = 57657
const INVISIBLE = 57658
const BTREE = 57659
const HASH = 57660
const RTREE = 57661
const BSI = 57662
const IVFFLAT = 57663
const MASTER = 57664
const ZONEMAP = 57665
const LEADING = 57666
const BOTH = 57667
const TRAILING = 57668
const UNKNOWN = 57669
const LISTS = 57670
const OP_TYPE = 57671
const REINDEX = 57672
const EXPIRE = 57673
const ACCOUNT = 57674
const ACCOUNTS = 57675
const UNLOCK = 57676
const DAY = 57677
const NEVER = 57678
const PUMP = 57679
const MYSQL_COMPATIBILITY_MODE = 57680
const MODIFY = 57681
const CHANGE = 57682
const SECOND = 57683
const ASCII = 57684
const COALESCE = 57685
const COLLATION = 57686
const HOUR = 57687
const MICROSECOND = 57688
const MINUTE = 57689
const MONTH = 57690
const QUARTER = 57691
const REPEAT = 57692
const REVERSE = 57693
const ROW_COUNT = 57694
const WEEK = 57695
const REVOKE = 57696
const FUNCTION = 57697
const PRIVILEGES = 57698
const TABLESPACE = 57699
const EXECUTE = 57700
const SUPER = 57701
const GRANT = 57702
const OPTION = 57703
const REFERENCES = 57704
const REPLICATION = 57705
const SLAVE = 57706
const CLIENT = 57707
const USAGE = 57708
const RELOAD = 57709
const FILE = 57710
const TEMPORARY = 57711
const ROUTINE = 57712
const EVENT = 57713
const SHUTDOWN = 57714
const NULLX = 57715
const AUTO_INCREMENT = 57716
const APPROXNUM = 57717
const SIGNED = 57718
const UNSIGNED = 57719
const ZEROFILL = 57720
const ENGINES = 57721
const LOW_CARDINALITY = 57722
const AUTOEXTEND_SIZE = 57723
const ADMIN_NAME = 57724
const RANDOM = 57725
const SUSPEND = 57726
const ATTRIBUTE = 57727
const HISTORY = 57728
const REUSE = 57729
const CURRENT = 57730
const OPTIONAL = 57731
const FAILED_LOGIN_ATTEMPTS = 57732
const PASSWORD_LOCK_TIME = 57733
const UNBOUNDED = 57734
const SECONDARY = 57735
const RESTRICTED = 57736
const USER = 57737
const IDENTIFIED = 57738
const CIPHER = 57739
const ISSUER = 57740
const X509 = 57741
const SUBJECT = 57742
const SAN = 57743
const REQUIRE = 57744
const SSL = 57745
const NONE = 57746
const PASSWORD = 57747
const SHARED = 57748
const EXCLUSIVE = 57749
const MAX_QUERIES_PER_HOUR = 57750
const MAX_UPDATES_PER_HOUR = 57751
const MAX_CONNECTIONS_PER_HOUR = 57752
const MAX_USER_CONNECTIONS = 57753
const FORMAT = 57754
const VERBOSE = 57755
const CONNECTION = 57756
const TRIGGERS = 57757
const PROFILES = 57758
const LOAD = 57759
const INLINE = 57760
const INFILE = 57761
const TERMINATED = 57762
const OPTIONALLY = 57763
const ENCLOSED = 57764
const ESCAPED = 57765
const STARTING = 57766
const LINES = 57767
const ROWS = 57768
const IMPORT = 57769
const DISCARD = 57770
const JSONTYPE = 57771
const MODUMP = 57772
const OVER = 57773
const PRECEDING = 57774
const FOLLOWING = 57775
const GROUPS = 57776
const DATABASES = 57777
const TABLES = 57778
const SEQUENCES = 57779
const EXTENDED = 57780
const FULL = 57781
const PROCESSLIST = 57782
const FIELDS = 57783
const COLUMNS = 57784
const OPEN = 57785
const ERRORS = 57786
const WARNINGS = 57787
const INDEXES = 57788
const SCHEMAS = 57789
const NODE = 57790
const LOCKS = 57791
const ROLES = 57792
const TABLE_NUMBER = 57793
const COLUMN_NUMBER = 57794
const TABLE_VALUES = 57795
const TABLE_SIZE = 57796
const NAMES = 57797
const GLOBAL = 57798
const PERSIST = 57799
const SESSION = 57800
const ISOLATION = 57801
const LEVEL = 57802
const READ = 57803
const WRITE = 57804
const ONLY = 57805
const REPEATABLE = 57806
const COMMITTED = 57807
const UNCOMMITTED = 57808
const SERIALIZABLE = 57809
const LOCAL = 57810
const EVENTS = 57811
const PLUGINS = 57812
const CURRENT_TIMESTAMP = 57813
const DATABASE = 57814
const CURRENT_TIME = 57815
const LOCALTIME = 57816
const LOCALTIMESTAMP = 57817
const UTC_DATE = 57818
const UTC_TIME = 57819
const UTC_TIMESTAMP = 57820
const REPLACE = 57821
const CONVERT = 57822
const SEPARATOR = 57823
const TIMESTAMPDIFF = 57824
const CURRENT_DATE = 57825
const CURRENT_USER = 57826
const CURRENT_ROLE = 57827
const SECOND_MICROSECOND = 57828
const MINUTE_MICROSECOND = 57829
const MINUTE_SECOND = 57830
const HOUR_MICROSECOND = 57831
const HOUR_SECOND = 57832
const HOUR_MINUTE = 57833
const DAY_MICROSECOND = 57834
const DAY_SECOND = 57835
const DAY_MINUTE = 57836
const DAY_HOUR = 57837
const YEAR_MONTH = 57838
const SQL_TSI_HOUR = 57839
const SQL_TSI_DAY = 57840
const SQL_TSI_WEEK = 57841
const SQL_TSI_MONTH = 57842
const SQL_TSI_QUARTER = 57843
const SQL_TSI_YEAR = 57844
const SQL_TSI_SECOND = 57845
const SQL_TSI_MINUTE = 57846
const RECURSIVE = 57847
const CONFIG = 57848
const DRAINER = 57849
const SOURCE = 57850
const STREAM = 57851
const HEADERS = 57852
const CONNECTOR = 57853
const CONNECTORS = 57854
const DAEMON = 57855
const PAUSE = 57856
const CANCEL = 57857
const TASK = 57858
const RESUME = 57859
const MATCH = 57860
const AGAINST = 57861
const BOOLEAN = 57862
const LANGUAGE = 57863
const WITH = 57864
const QUERY = 57865
const EXPANSION = 57866
const WITHOUT = 57867
const VALIDATION = 57868
const UPGRADE = 57869
const RETRY = 57870
const ADDDATE = 57871
const BIT_AND = 57872
const BIT_OR = 57873
const BIT_XOR = 57874
const CAST = 57875
const COUNT = 57876
const APPROX_COUNT = 57877
const APPROX_COUNT_DISTINCT = 57878
const SERIAL_EXTRACT = 57879
const APPROX_PERCENTILE = 57880
const CURDATE = 57881
const CURTIME = 57882
const DATE_ADD = 57883
const DATE_SUB = 57884
const EXTRACT = 57885
const GROUP_CONCAT = 57886
const MAX = 57887
const MID = 57888
const MIN = 57889
const NOW = 57890
const POSITION = 57891
const SESSION_USER = 57892
const STD = 57893
const STDDEV = 57894
const MEDIAN = 57895
const CLUSTER_CENTERS = 57896
const KMEANS = 57897
const STDDEV_POP = 57898
const STDDEV_SAMP = 57899
const SUBDATE = 57900
const SUBSTR = 57901
const SUBSTRING = 57902
const SUM = 57903
const SYSDATE = 57904
const SYSTEM_USER = 57905
const TRANSLATE = 57906
const TRIM = 57907
const VARIANCE = 57908
const VAR_POP = 57909
const VAR_SAMP = 57910
const AVG = 57911
const RANK = 57912
const ROW_NUMBER = 57913
const DENSE_RANK = 57914
const BIT_CAST = 57915
const BITMAP_BIT_POSITION = 57916
const BITMAP_BUCKET_NUMBER = 57917
const BITMAP_COUNT = 57918
const BITMAP_CONSTRUCT_AGG = 57919
const BITMAP_OR_AGG = 57920
const NEXTVAL = 57921
const SETVAL = 57922
const CURRVAL = 57923
const LASTVAL = 57924
const ARROW = 57925
const ROW = 57926
const OUTFILE = 57927
const HEADER = 57928
const MAX_FILE_SIZE = 57929
const FORCE_QUOTE = 57930
const PARALLEL = 57931
const STRICT = 57932
const UNUSED = 57933
const BINDINGS = 57934
const DO = 57935
const DECLARE = 57936
const LOOP = 57937
const WHILE = 57938
const LEAVE = 57939
const ITERATE = 57940
const UNTIL = 57941
const CALL = 57942
const PREV = 57943
const SLIDING = 57944
const FILL = 57945
const SPBEGIN = 57946
const BACKEND = 57947
const SERVERS = 57948
const HANDLER = 57949
const PERCENT = 57950
const SAMPLE = 57951
const MO_TS = 57952
const KILL = 57953
const BACKUP = 57954
const FILESYSTEM = 57955
const PARALLELISM = 57956
const RESTORE = 57957
const QUERY_RESULT = 57958

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12132

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 123,
	11, 741,
	22, 741,
	-2, 734,
	-1, 144,
	238, 1142,
	240, 1041,
	-2, 1088,
	-1, 169,
	43, 564,
	240, 564,
	267, 571,
	268, 571,
	463, 564,
	-2, 601,
	-1, 211,
	637, 1900,
	-2, 477,
	-1, 512,
	637, 2019,
	-2, 365,
	-1, 570,
	637, 2078,
	-2, 363,
	-1, 571,
	637, 2079,
	-2, 364,
	-1, 572,
	637, 2080,
	-2, 366,
	-1, 704,
	319, 151,
	435, 151,
	436, 151,
	-2, 1805,
	-1, 770,
	82, 1592,
	-2, 1955,
	-1, 771,
	82, 1610,
	-2, 1926,
	-1, 775,
	82, 1611,
	-2, 1954,
	-1, 808,
	82, 1519,
	-2, 2151,
	-1, 809,
	82, 1520,
	-2, 2150,
	-1, 810,
	82, 1521,
	-2, 2140,
	-1, 811,
	82, 2112,
	-2, 2133,
	-1, 812,
	82, 2113,
	-2, 2134,
	-1, 813,
	82, 2114,
	-2, 2142,
	-1, 814,
	82, 2115,
	-2, 2122,
	-1, 815,
	82, 2116,
	-2, 2131,
	-1, 816,
	82, 2117,
	-2, 2143,
	-1, 817,
	82, 2118,
	-2, 2144,
	-1, 818,
	82, 2119,
	-2, 2149,
	-1, 819,
	82, 2120,
	-2, 2154,
	-1, 820,
	82, 2121,
	-2, 2155,
	-1, 821,
	82, 1588,
	-2, 1993,
	-1, 822,
	82, 1589,
	-2, 1789,
	-1, 823,
	82, 1590,
	-2, 2002,
	-1, 824,
	82, 1591,
	-2, 1798,
	-1, 826,
	82, 1594,
	-2, 1806,
	-1, 827,
	82, 1595,
	-2, 2026,
	-1, 829,
	82, 1598,
	-2, 1825,
	-1, 831,
	82, 1600,
	-2, 2038,
	-1, 832,
	82, 1601,
	-2, 2037,
	-1, 833,
	82, 1602,
	-2, 1869,
	-1, 834,
	82, 1603,
	-2, 1950,
	-1, 837,
	82, 1606,
	-2, 2049,
	-1, 839,
	82, 1608,
	-2, 2052,
	-1, 840,
	82, 1609,
	-2, 2054,
	-1, 841,
	82, 1612,
	-2, 2062,
	-1, 842,
	82, 1613,
	-2, 1935,
	-1, 843,
	82, 1614,
	-2, 1980,
	-1, 844,
	82, 1615,
	-2, 1945,
	-1, 845,
	82, 1616,
	-2, 1970,
	-1, 856,
	82, 1497,
	-2, 2145,
	-1, 857,
	82, 1498,
	-2, 2146,
	-1, 858,
	82, 1499,
	-2, 2147,
	-1, 947,
	458, 601,
	459, 601,
	-2, 565,
	-1, 995,
	124, 1789,
	135, 1789,
	155, 1789,
	-2, 1763,
	-1, 1111,
	22, 768,
	-2, 717,
	-1, 1217,
	11, 741,
	22, 741,
	-2, 1377,
	-1, 1299,
	22, 768,
	-2, 717,
	-1, 1630,
	82, 1663,
	-2, 1952,
	-1, 1631,
	82, 1664,
	-2, 1953,
	-1, 1788,
	83, 918,
	-2, 924,
	-1, 2222,
	107, 1080,
	151, 1080,
	190, 1080,
	193, 1080,
	280, 1080,
	-2, 1073,
	-1, 2374,
	11, 741,
	22, 741,
	-2, 861,
	-1, 2406,
	83, 1749,
	156, 1749,
	-2, 1937,
	-1, 2407,
	83, 1749,
	156, 1749,
	-2, 1936,
	-1, 2408,
	83, 1725,
	156, 1725,
	-2, 1923,
	-1, 2409,
	83, 1726,
	156, 1726,
	-2, 1928,
	-1, 2410,
	83, 1727,
	156, 1727,
	-2, 1857,
	-1, 2411,
	83, 1728,
	156, 1728,
	-2, 1851,
	-1, 2412,
	83, 1729,
	156, 1729,
	-2, 1779,
	-1, 2413,
	83, 1730,
	156, 1730,
	-2, 1925,
	-1, 2414,
	83, 1731,
	156, 1731,
	-2, 1855,
	-1, 2415,
	83, 1732,
	156, 1732,
	-2, 1850,
	-1, 2416,
	83, 1733,
	156, 1733,
	-2, 1839,
	-1, 2417,
	83, 1749,
	156, 1749,
	-2, 1840,
	-1, 2418,
	83, 1749,
	156, 1749,
	-2, 1841,
	-1, 2420,
	83, 1738,
	156, 1738,
	-2, 1970,
	-1, 2421,
	83, 1716,
	156, 1716,
	-2, 1955,
	-1, 2422,
	83, 1747,
	156, 1747,
	-2, 1926,
	-1, 2423,
	83, 1747,
	156, 1747,
	-2, 1954,
	-1, 2424,
	83, 1747,
	156, 1747,
	-2, 1807,
	-1, 2425,
	83, 1745,
	156, 1745,
	-2, 1945,
	-1, 2426,
	83, 1742,
	156, 1742,
	-2, 1830,
	-1, 2427,
	82, 1697,
	83, 1697,
	156, 1697,
	393, 1697,
	394, 1697,
	395, 1697,
	-2, 1778,
	-1, 2428,
	82, 1698,
	83, 1698,
	156, 1698,
	393, 1698,
	394, 1698,
	395, 1698,
	-2, 1780,
	-1, 2429,
	82, 1699,
	83, 1699,
	156, 1699,
	393, 1699,
	394, 1699,
	395, 1699,
	-2, 1998,
	-1, 2430,
	82, 1701,
	83, 1701,
	156, 1701,
	393, 1701,
	394, 1701,
	395, 1701,
	-2, 1927,
	-1, 2431,
	82, 1703,
	83, 1703,
	156, 1703,
	393, 1703,
	394, 1703,
	395, 1703,
	-2, 1909,
	-1, 2432,
	82, 1705,
	83, 1705,
	156, 1705,
	393, 1705,
	394, 1705,
	395, 1705,
	-2, 1856,
	-1, 2433,
	82, 1707,
	83, 1707,
	156, 1707,
	393, 1707,
	394, 1707,
	395, 1707,
	-2, 1835,
	-1, 2434,
	82, 1708,
	83, 1708,
	156, 1708,
	393, 1708,
	394, 1708,
	395, 1708,
	-2, 1836,
	-1, 2435,
	82, 1710,
	83, 1710,
	156, 1710,
	393, 1710,
	394, 1710,
	395, 1710,
	-2, 1777,
	-1, 2436,
	83, 1752,
	156, 1752,
	393, 1752,
	394, 1752,
	395, 1752,
	-2, 1812,
	-1, 2437,
	83, 1752,
	156, 1752,
	393, 1752,
	394, 1752,
	395, 1752,
	-2, 1826,
	-1, 2438,
	83, 1755,
	156, 1755,
	393, 1755,
	394, 1755,
	395, 1755,
	-2, 1808,
	-1, 2439,
	83, 1755,
	156, 1755,
	393, 1755,
	394, 1755,
	395, 1755,
	-2, 1872,
	-1, 2440,
	83, 1752,
	156, 1752,
	393, 1752,
	394, 1752,
	395, 1752,
	-2, 1893,
	-1, 2643,
	107, 1080,
	151, 1080,
	190, 1080,
	193, 1080,
	280, 1080,
	-2, 1074,
	-1, 2661,
	80, 661,
	156, 661,
	-2, 1257,
	-1, 3063,
	193, 1080,
	304, 1345,
	-2, 1317,
	-1, 3229,
	107, 1080,
	151, 1080,
	190, 1080,
	193, 1080,
	-2, 1198,
	-1, 3231,
	107, 1080,
	151, 1080,
	190, 1080,
	193, 1080,
	-2, 1198,
	-1, 3243,
	80, 661,
	156, 661,
	-2, 1257,
	-1, 3265,
	193, 1080,
	304, 1345,
	-2, 1318,
	-1, 3405,
	107, 1080,
	151, 1080,
	190, 1080,
	193, 1080,
	-2, 1199,
	-1, 3432,
	83, 1160,
	156, 1160,
	-2, 1080,
	-1, 3564,
	83, 1160,
	156, 1160,
	-2, 1080,
	-1, 3716,
	83, 1164,
	156, 1164,
	-2, 1080,
	-1, 3764,
	83, 1165,
	156, 1165,
	-2, 1080,
}

const yyPrivate = 57344

const yyLast = 48839

var yyAct = [...]int{
	737, 714, 3810, 739, 3784, 2691, 200, 1873, 3720, 3803,
	3250, 3726, 1610, 3082, 708, 3344, 3621, 3727, 3564, 3719,
	3647, 3049, 3604, 723, 3678, 716, 3151, 3598, 3460, 3542,
	2685, 2495, 3152, 3279, 1252, 3563, 1447, 3392, 1606, 3625,
	3393, 3390, 605, 3488, 767, 1112, 2688, 1524, 994, 3348,
	1384, 3533, 37, 1390, 623, 1821, 629, 629, 3605, 3339,
	59, 3607, 629, 646, 655, 3412, 3216, 655, 3266, 2664,
	1657, 2270, 1106, 3402, 3019, 1613, 3374, 1965, 2980, 3058,
	712, 3407, 3232, 3149, 2797, 2798, 3008, 2796, 3204, 2780,
	3078, 2714, 3067, 3060, 3234, 3107, 3191, 2859, 2077, 2530,
	2035, 3137, 1930, 667, 2368, 2273, 2819, 1962, 2402, 2404,
	663, 3117, 1671, 2793, 2632, 652, 2991, 2987, 1833, 2985,
	706, 2694, 2983, 3028, 2982, 2252, 185, 2233, 2981, 122,
	2644, 2978, 1440, 1102, 1980, 3066, 2200, 2186, 36, 2963,
	2185, 2350, 2906, 711, 2060, 2832, 1520, 922, 2474, 2036,
	2043, 2008, 1763, 2073, 2044, 2456, 1528, 2842, 1958, 1525,
	2369, 2072, 1933, 2357, 1355, 2620, 2615, 2716, 2656, 2696,
	2352, 2232, 196, 8, 605, 195, 7, 988, 2271, 1797,
	1931, 2400, 6, 2074, 1051, 1604, 1487, 1863, 2222, 715,
	622, 1456, 2212, 1557, 1426, 705, 2563, 2084, 713, 1373,
	200, 1664, 200, 1361, 1042, 1043, 1644, 1832, 1595, 2266,
	1513, 629, 1036, 1037, 2107, 724, 27, 1041, 956, 604,
	2042, 16, 2024, 1494, 2039, 14, 1125, 1998, 1539, 1603,
	641, 987, 1793, 660, 1796, 15, 2376, 1425, 1003, 669,
	921, 1479, 33, 638, 860, 23, 1385, 2353, 670, 1672,
	2562, 100, 1423, 24, 17, 10, 186, 1393, 176, 898,
	919, 904, 1253, 1297, 182, 1369, 666, 1486, 942, 1549,
	3527, 2598, 654, 1185, 1186, 1187, 1184, 2081, 2598, 651,
	1039, 2598, 2378, 1357, 647, 3420, 2876, 3246, 649, 2875,
	1548, 3035, 1107, 1536, 2091, 3219, 2253, 862, 650, 1185,
	1186, 1187, 1184, 863, 2518, 648, 2459, 1000, 1185, 1186,
	1187, 1184, 1324, 1108, 3144, 1776, 1002, 2462, 634, 2457,
	2460, 1035, 1501, 1497, 1035, 1034, 1038, 184, 1040, 624,
	2184, 625, 1316, 2956, 2953, 2958, 2955, 3795, 1407, 658,
	1035, 1770, 1312, 1499, 3337, 2590, 2588, 2855, 2853, 2013,
	3593, 3269, 3495, 3489, 3340, 1107, 3150, 8, 2057, 3609,
	7, 1185, 1186, 1187, 1184, 2038, 861, 1033, 2933, 1394,
	1247, 2030, 2311, 1535, 872, 1185, 1186, 1187, 1184, 1147,
	926, 3375, 3379, 183, 2512, 1319, 2592, 2504, 630, 3281,
	2078, 3233, 2224, 1534, 3515, 3701, 3658, 183, 1466, 1465,
	1464, 183, 3272, 3549, 1006, 2223, 1004, 183, 55, 172,
	145, 1005, 665, 3267, 707, 1543, 2931, 2089, 3289, 3290,
	183, 183, 1330, 2650, 3268, 183, 1347, 183, 183, 55,
	172, 145, 2217, 183, 55, 172, 145, 1609, 1555, 2791,
	1778, 183, 55, 172, 145, 1540, 1320, 3550, 2395, 924,
	925, 851, 177, 850, 852, 853, 3517, 854, 855, 2394,
	966, 3273, 183, 55, 172, 145, 1542, 1182, 1552, 2878,
	2648, 2826, 2827, 2867, 998, 121, 177, 2825, 1403, 183,
	999, 1404, 1578, 873, 1942, 1596, 1975, 1381, 1600, 1554,
	177, 1427, 1123, 1429, 177, 3053, 177, 177, 1943, 1944,
	2382, 1162, 177, 2381, 1163, 1566, 2383, 707, 1780, 1781,
	177, 2475, 1599, 2617, 965, 2957, 2954, 3051, 1391, 1392,
	2651, 1847, 1175, 2618, 1389, 1612, 1120, 121, 1388, 1391,
	1392, 177, 1165, 1180, 3730, 3731, 2303, 997, 996, 3612,
	3691, 3361, 3612, 968, 1155, 3611, 967, 1157, 177, 3611,
	3690, 3610, 3689, 1329, 3698, 3288, 3610, 2274, 3680, 2173,
	3694, 3153, 3751, 3788, 3789, 3680, 3683, 1406, 3599, 3600,
	3601, 3602, 2616, 2499, 1117, 1158, 3596, 2860, 2861, 3492,
	2862, 1616, 3277, 952, 3153, 1128, 2093, 3618, 1500, 1498,
	1949, 927, 2593, 3166, 2896, 1591, 1601, 3205, 2085, 910,
	1953, 1959, 2344, 2735, 3274, 3278, 3276, 3275, 3000, 2211,
	1167, 3384, 1160, 1168, 3212, 2021, 2509, 3291, 929, 1598,
	1507, 1506, 2607, 3696, 144, 1587, 181, 629, 629, 3507,
	2894, 3508, 3002, 2623, 2992, 3703, 3704, 1150, 629, 1116,
	3338, 1170, 3283, 3284, 1177, 168, 169, 3502, 3699, 3700,
	1178, 1179, 2309, 701, 2854, 1151, 703, 655, 655, 975,
	629, 702, 2784, 2997, 2998, 3524, 2347, 2346, 3519, 3520,
	2090, 3381, 2605, 875, 3692, 1161, 3513, 3195, 3360, 2999,
	1153, 951, 949, 2216, 1379, 3510, 3362, 2351, 3729, 3291,
	2068, 1416, 1156, 1159, 1172, 652, 652, 1615, 1614, 621,
	1128, 3270, 3306, 948, 2591, 1003, 1331, 3282, 2606, 876,
	3303, 3081, 3759, 1045, 923, 3029, 3509, 3017, 1152, 3079,
	3080, 1166, 3055, 1225, 1188, 928, 961, 3554, 3640, 1405,
	1550, 3635, 1218, 1173, 1174, 2996, 1597, 1973, 1974, 1547,
	1315, 1228, 2657, 3296, 657, 3507, 3546, 3508, 2289, 957,
	3526, 3169, 1164, 656, 2269, 2292, 2789, 2219, 2900, 1171,
	1115, 2597, 2079, 3626, 1109, 2964, 1236, 1108, 1142, 1116,
	2079, 1108, 1108, 2079, 1000, 2096, 2098, 2099, 1003, 3642,
	1130, 1129, 3251, 1002, 1169, 958, 962, 1692, 3648, 1622,
	1625, 1626, 3050, 2690, 1256, 1154, 3258, 1368, 3307, 2877,
	1623, 3510, 3084, 971, 969, 945, 970, 943, 947, 965,
	3821, 3617, 2291, 944, 941, 940, 3451, 946, 931, 932,
	930, 933, 934, 935, 936, 2874, 963, 1035, 964, 2080,
	1035, 1035, 3509, 1035, 2112, 1108, 1035, 3287, 1035, 959,
	960, 2092, 3702, 3351, 3548, 1122, 1133, 1000, 2994, 653,
	2686, 2687, 2321, 2690, 653, 2290, 1002, 3440, 3649, 651,
	651, 2458, 653, 3806, 647, 647, 2397, 2320, 649, 649,
	2629, 1391, 1392, 1119, 1121, 1502, 955, 1318, 650, 650,
	2276, 3518, 954, 653, 3555, 648, 648, 1327, 623, 861,
	1257, 1131, 976, 1391, 1392, 1130, 1129, 950, 1436, 1111,
	3380, 2589, 2513, 3547, 664, 1295, 2897, 1380, 1300, 146,
	1139, 56, 1779, 3286, 972, 1435, 56, 1221, 1222, 1223,
	1224, 922, 1140, 146, 56, 178, 179, 146, 180, 1135,
	1136, 1141, 1110, 146, 2764, 1960, 3503, 912, 999, 913,
	3504, 1226, 2622, 3003, 2993, 56, 146, 146, 3056, 1366,
	1688, 146, 1365, 146, 146, 3568, 1685, 1364, 1104, 146,
	1687, 1684, 1686, 1690, 1691, 2276, 2279, 146, 1689, 3695,
	2341, 2342, 629, 3534, 1418, 953, 3385, 974, 629, 1950,
	3521, 605, 605, 2736, 1592, 2737, 2738, 3059, 146, 1952,
	605, 605, 1387, 3083, 1451, 1451, 3718, 629, 2626, 2627,
	3807, 3079, 3080, 1103, 3446, 146, 1383, 1382, 2952, 2837,
	2838, 1219, 2312, 2625, 3235, 2269, 2097, 2275, 3335, 655,
	1480, 623, 2277, 1325, 1216, 1490, 1490, 2821, 2823, 665,
	1624, 1453, 1449, 1449, 3677, 1424, 200, 966, 3614, 1489,
	1489, 3156, 1268, 1269, 1458, 605, 3370, 2995, 1147, 2286,
	3075, 2968, 3503, 2505, 973, 2386, 3606, 2538, 3461, 3462,
	3463, 3467, 3465, 3466, 3464, 2636, 2639, 2640, 2641, 2637,
	2638, 2307, 2082, 1928, 1339, 2899, 2278, 1345, 1328, 2601,
	1344, 3015, 1343, 1342, 3567, 1094, 1090, 1091, 1092, 1093,
	977, 2543, 1417, 2542, 2541, 2539, 1532, 2280, 1508, 659,
	3198, 1537, 2275, 2269, 2274, 3442, 2272, 2277, 1546, 3441,
	2279, 3076, 1695, 1696, 1697, 1698, 1699, 1700, 1693, 1694,
	968, 3453, 1332, 967, 1445, 1446, 1299, 2733, 1301, 2108,
	3192, 3804, 3805, 1576, 1146, 1375, 1376, 916, 917, 918,
	2094, 2095, 2908, 2907, 1352, 2755, 2756, 1451, 914, 1451,
	1116, 1333, 2194, 2193, 2603, 1541, 1556, 2192, 1431, 1433,
	2540, 2278, 1553, 1003, 1323, 1783, 966, 1443, 1444, 1784,
	1003, 1321, 1322, 3371, 3717, 652, 2969, 2676, 2276, 2279,
	1782, 1354, 2765, 2767, 2768, 2769, 2766, 1586, 2191, 911,
	1026, 1031, 1032, 2189, 2822, 1777, 877, 2333, 1617, 1618,
	1619, 1620, 1621, 1334, 1335, 1336, 1337, 1338, 1360, 1340,
	3016, 1481, 878, 1395, 1367, 1346, 1398, 1451, 3413, 1522,
	1523, 1377, 1503, 1362, 1408, 1409, 1571, 1572, 3817, 1396,
	1397, 1434, 1399, 1400, 1670, 1401, 3447, 3448, 1545, 3822,
	1662, 2280, 1113, 3687, 1666, 1667, 1668, 1669, 1719, 968,
	1530, 1527, 967, 1703, 1531, 1658, 2285, 1183, 2214, 3114,
	2283, 1713, 634, 1511, 1459, 1514, 1515, 2366, 2754, 3157,
	1362, 1611, 1472, 3034, 1147, 2477, 1516, 1517, 3829, 1632,
	1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642,
	1643, 1478, 1492, 1491, 3812, 1655, 1656, 3110, 2544, 2545,
	2602, 2087, 1608, 1370, 1374, 1374, 1374, 3801, 3766, 2203,
	2280, 966, 3077, 1765, 1116, 2275, 2269, 2274, 1575, 2272,
	2277, 978, 1593, 3201, 3168, 1785, 1574, 1589, 1370, 1370,
	1480, 2264, 2204, 2205, 1627, 1794, 1451, 1799, 1800, 651,
	1802, 1418, 629, 1728, 647, 3738, 1761, 629, 649, 2663,
	1451, 1584, 1704, 1565, 922, 2306, 1581, 1822, 650, 1559,
	1580, 2367, 2178, 3732, 1451, 648, 1564, 3813, 2142, 1567,
	1418, 2141, 881, 2213, 2278, 646, 1764, 1826, 3714, 2662,
	3767, 3767, 1028, 1029, 1030, 1602, 1585, 1183, 1583, 1582,
	1579, 2504, 2367, 2248, 968, 1846, 1607, 967, 3668, 1145,
	3643, 1842, 1718, 2001, 1853, 1853, 3631, 1418, 3114, 1418,
	1418, 1653, 1654, 629, 629, 3587, 1794, 1923, 3739, 3586,
	1451, 1926, 1927, 880, 1940, 3088, 1646, 883, 882, 3581,
	3086, 2962, 2121, 740, 750, 1772, 3530, 2960, 605, 3580,
	1451, 3579, 1801, 741, 1183, 742, 746, 749, 745, 743,
	744, 3715, 1850, 1594, 3578, 1765, 3558, 2367, 1144, 1803,
	1765, 1765, 1185, 1186, 1187, 1184, 3557, 2840, 629, 1794,
	1451, 3530, 1985, 2087, 629, 629, 629, 663, 663, 3632,
	1185, 1186, 1187, 1184, 1995, 1996, 1997, 3529, 3588, 2609,
	2003, 2594, 2237, 1767, 3312, 3260, 1875, 200, 747, 3225,
	200, 200, 3530, 200, 1921, 2494, 3184, 3180, 2120, 1976,
	2011, 2482, 3530, 2014, 3530, 2397, 2017, 2078, 2663, 2019,
	1733, 1941, 752, 123, 2262, 1856, 2247, 3530, 123, 2087,
	748, 865, 866, 867, 868, 1145, 1709, 1710, 1711, 2087,
	1954, 1762, 1999, 1719, 1719, 2046, 2183, 1768, 2177, 1725,
	1113, 3096, 1726, 1968, 1969, 1719, 1719, 1824, 1825, 2816,
	3530, 1823, 2062, 2569, 1946, 2561, 1948, 2397, 3261, 1739,
	1740, 1789, 3226, 2176, 1984, 2061, 1966, 1967, 1839, 3185,
	3181, 1838, 635, 2149, 1605, 123, 2520, 2069, 1760, 1971,
	1844, 1822, 1147, 1961, 1819, 1451, 2076, 1845, 1541, 1353,
	1848, 1849, 2502, 1003, 1818, 2490, 1003, 2056, 1987, 1988,
	1989, 1701, 1702, 1661, 1705, 1003, 1857, 1858, 1835, 2048,
	1437, 652, 1720, 2012, 3097, 2484, 2015, 2016, 3814, 2018,
	1829, 1834, 2367, 1836, 1837, 1727, 1183, 1729, 1183, 1730,
	1731, 1732, 2479, 1790, 1791, 1792, 2070, 1843, 1920, 1830,
	1831, 1852, 1854, 2052, 1925, 1805, 1806, 1807, 1808, 1183,
	1929, 3246, 865, 866, 867, 868, 1840, 1841, 1945, 1955,
	1947, 2471, 1000, 2469, 2467, 2237, 2111, 2465, 2480, 870,
	2116, 1002, 2236, 2844, 1000, 2665, 1851, 2507, 2506, 1185,
	1186, 1187, 1184, 1002, 3211, 1296, 2498, 2041, 2485, 1983,
	1001, 1982, 2179, 1185, 1186, 1187, 1184, 123, 1003, 2041,
	1990, 1991, 2256, 2137, 3477, 2480, 2156, 2009, 1855, 2007,
	2122, 2128, 123, 2067, 123, 2155, 2006, 2140, 1993, 2135,
	2131, 1561, 2105, 2106, 1370, 2929, 1233, 1132, 1100, 1462,
	2130, 2129, 2026, 2086, 2472, 1568, 2470, 2466, 1374, 2118,
	2466, 2152, 1095, 2058, 3310, 2237, 2157, 2158, 2159, 1216,
	1374, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170,
	2171, 1970, 1200, 1798, 2047, 2178, 2055, 1000, 2188, 2053,
	2190, 3030, 1708, 1707, 3636, 651, 1002, 1814, 706, 1183,
	647, 629, 629, 629, 649, 3039, 2066, 2891, 1183, 2065,
	1183, 1827, 2071, 1183, 650, 1402, 629, 629, 629, 629,
	870, 648, 2064, 1183, 1183, 3414, 2087, 3238, 1569, 2234,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1200, 3637, 2240,
	1418, 1441, 3236, 879, 1652, 1938, 1203, 1204, 1205, 1206,
	1207, 1200, 1442, 1358, 2100, 1708, 1707, 1359, 2103, 2104,
	1649, 1651, 1648, 1371, 1650, 2102, 1418, 1798, 3031, 3415,
	3823, 3239, 3792, 2304, 1646, 2114, 3528, 3499, 3444, 2109,
	3443, 3429, 3386, 2298, 1412, 1413, 3237, 1415, 3218, 1419,
	1420, 1421, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1189,
	3115, 628, 628, 1745, 3106, 3101, 3098, 636, 3045, 1439,
	3010, 2786, 3032, 2634, 2599, 1358, 2517, 1605, 2483, 1359,
	2388, 2051, 1467, 1468, 1469, 1470, 1471, 2050, 1473, 1474,
	1475, 1476, 1477, 2049, 2305, 1349, 1483, 1484, 1485, 1853,
	1348, 1118, 2457, 3142, 1665, 2527, 2371, 2371, 1940, 2371,
	2451, 2101, 1198, 1208, 1209, 1201, 1202, 1203, 1204, 1205,
	1206, 1207, 1200, 2172, 2174, 2175, 1738, 605, 605, 2010,
	2846, 1765, 2180, 1765, 884, 1116, 1185, 1186, 1187, 1184,
	1372, 1451, 629, 1665, 2258, 2115, 1786, 3145, 2255, 3456,
	2257, 1765, 1765, 2197, 1495, 3688, 2010, 629, 3435, 2268,
	1256, 2267, 1184, 1116, 2441, 623, 2215, 3455, 1003, 1438,
	1490, 2863, 1940, 1187, 1184, 2446, 2725, 2448, 2723, 2392,
	2702, 200, 2700, 3382, 1489, 1208, 1209, 1201, 1202, 1203,
	1204, 1205, 1206, 1207, 1200, 2261, 3387, 3388, 2150, 2151,
	3209, 2153, 3820, 1723, 2242, 2243, 2776, 2241, 2160, 1235,
	2375, 2373, 2774, 2377, 2245, 2246, 636, 2582, 1724, 2583,
	2254, 2487, 1234, 3797, 2384, 3796, 2385, 3742, 1185, 1186,
	1187, 1184, 3713, 2772, 2486, 3712, 2489, 1000, 2500, 2461,
	3383, 2761, 2076, 3638, 2389, 2390, 1002, 2281, 2282, 1451,
	2287, 1451, 3583, 1451, 3571, 3561, 1257, 3210, 1116, 1185,
	1186, 1187, 1184, 2775, 3819, 3551, 2519, 2244, 3143, 2773,
	2910, 3490, 2250, 3417, 2445, 2251, 1185, 1186, 1187, 1184,
	1185, 1186, 1187, 1184, 2405, 2529, 3416, 3252, 2348, 2510,
	2771, 2399, 1451, 2547, 3240, 2496, 2497, 2249, 2760, 3208,
	2528, 3001, 2633, 2534, 1431, 1433, 2379, 2452, 2554, 2887,
	2548, 2549, 3217, 1451, 1185, 1186, 1187, 1184, 2551, 2552,
	2858, 2857, 2553, 2453, 1185, 1186, 1187, 1184, 2546, 2119,
	1449, 2759, 1495, 2393, 2557, 123, 123, 1001, 2758, 2757,
	2396, 1185, 1186, 1187, 1184, 1185, 1186, 1187, 1184, 2555,
	1496, 1449, 2922, 2749, 2743, 2442, 2444, 2742, 2741, 2740,
	2600, 2595, 1617, 1765, 2473, 2182, 2558, 2559, 1185, 1186,
	1187, 1184, 2443, 1116, 2029, 2028, 2027, 1116, 2023, 2514,
	2022, 2450, 1979, 1978, 1451, 1977, 1562, 2630, 2631, 2535,
	1374, 2133, 3108, 1314, 1923, 2556, 2986, 2531, 3816, 2531,
	3522, 3523, 2661, 2516, 1185, 1186, 1187, 1184, 2667, 3815,
	1217, 2921, 3345, 1098, 2511, 1185, 1186, 1187, 1184, 3790,
	2492, 3758, 3757, 3754, 2525, 2503, 2586, 2678, 701, 2501,
	3675, 703, 2671, 2672, 2508, 3620, 702, 1116, 1185, 1186,
	1187, 1184, 3391, 3603, 3594, 2699, 3575, 3570, 2649, 3569,
	3525, 3491, 1116, 1116, 1116, 1853, 1003, 2132, 1116, 3437,
	2709, 2710, 2711, 2712, 1116, 2719, 2125, 2720, 2721, 1097,
	2722, 3398, 2724, 3723, 2645, 2537, 3368, 2524, 3624, 3365,
	3364, 2646, 3343, 2719, 1185, 1186, 1187, 1184, 2521, 2522,
	3341, 3366, 3320, 3319, 2610, 2371, 3655, 3316, 2405, 3314,
	1185, 1186, 1187, 1184, 3354, 1185, 1186, 1187, 1184, 2777,
	2658, 2781, 3247, 2668, 1875, 3207, 3206, 605, 1185, 1186,
	1187, 1184, 1923, 3203, 3193, 1116, 1940, 1940, 1940, 1940,
	3177, 1185, 1186, 1187, 1184, 3175, 3103, 1116, 1940, 3094,
	2680, 2371, 2612, 3093, 2614, 3011, 2973, 1986, 2697, 2972,
	2967, 2187, 2697, 2901, 2898, 2856, 1302, 1451, 2611, 1185,
	1186, 1187, 1184, 2628, 2830, 2693, 2770, 1706, 629, 629,
	2762, 2752, 2750, 2660, 2705, 2706, 2564, 2565, 8, 2708,
	2704, 7, 2570, 2746, 2652, 2715, 2745, 2310, 2666, 2744,
	2313, 2314, 2315, 2316, 2317, 2318, 2319, 2596, 2679, 2322,
	2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332,
	3353, 2334, 2335, 2336, 2337, 2338, 2701, 2339, 2670, 2695,
	2682, 2812, 2493, 2673, 200, 2707, 807, 806, 3651, 200,
	2032, 2025, 628, 1105, 1775, 1774, 1563, 1185, 1186, 1187,
	1184, 1264, 2850, 1114, 2852, 1260, 2799, 2117, 1259, 1101,
	2739, 1719, 874, 1719, 3512, 2751, 2873, 3511, 2799, 3500,
	3300, 3367, 3352, 1765, 183, 1138, 172, 145, 1765, 2886,
	3231, 3230, 3229, 3200, 3189, 1451, 3187, 3186, 2893, 2061,
	2782, 3183, 2677, 3182, 2787, 2841, 1605, 1185, 1186, 1187,
	1184, 3176, 1460, 3174, 2785, 2669, 635, 3158, 3148, 2811,
	2813, 2815, 2868, 2814, 2674, 2675, 2800, 2801, 2802, 2803,
	1003, 3147, 3133, 2879, 2904, 3172, 3132, 2831, 2828, 2925,
	3040, 1003, 1185, 1186, 1187, 1184, 1764, 2976, 123, 2959,
	2927, 2872, 2920, 177, 3772, 2912, 2911, 2905, 2926, 2839,
	1522, 1523, 1185, 1186, 1187, 1184, 1185, 1186, 1187, 1184,
	2847, 2608, 2870, 2468, 2464, 2851, 2698, 2463, 2161, 2915,
	2154, 2917, 2880, 2148, 2924, 2147, 1530, 1527, 2146, 2145,
	1531, 2143, 2139, 2970, 2138, 2136, 2848, 2971, 2845, 2890,
	2895, 2849, 2127, 2124, 1116, 2123, 2031, 1758, 1515, 1757,
	2989, 1185, 1186, 1187, 1184, 123, 1756, 2864, 1516, 1517,
	3005, 2866, 123, 2871, 1722, 2869, 629, 1721, 2881, 2883,
	1712, 2923, 2882, 183, 1463, 123, 1461, 2692, 3020, 1116,
	2580, 1798, 629, 3741, 1116, 1116, 1254, 123, 2889, 2902,
	3650, 3589, 3577, 1940, 2234, 3572, 3038, 2903, 1185, 1186,
	1187, 1184, 1510, 3471, 3454, 3450, 2909, 1185, 1186, 1187,
	1184, 3428, 3411, 3328, 3326, 2298, 3298, 2918, 2919, 2916,
	3297, 3294, 3293, 3259, 3014, 3256, 3254, 3065, 3770, 3068,
	3220, 3068, 3068, 3023, 1521, 1512, 1116, 2961, 3027, 1003,
	1526, 1003, 177, 1529, 1518, 1356, 1003, 2778, 3072, 2703,
	2975, 2654, 2653, 2647, 3089, 2645, 3085, 2613, 2581, 2523,
	2478, 2387, 1451, 1451, 3048, 2340, 2966, 2965, 2235, 2206,
	3052, 3054, 1003, 2181, 1647, 177, 2974, 3087, 2619, 2913,
	2914, 1992, 2824, 1199, 1198, 1208, 1209, 1201, 1202, 1203,
	1204, 1205, 1206, 1207, 1200, 3036, 1788, 1771, 3090, 3091,
	1449, 1449, 3006, 3007, 3013, 1590, 1544, 1519, 1000, 629,
	3022, 1313, 1298, 1294, 2989, 3025, 3026, 1002, 1293, 3064,
	1292, 3037, 1418, 3033, 1291, 1923, 1923, 1290, 3073, 3042,
	1289, 1288, 1287, 3047, 3063, 1286, 2268, 1414, 2267, 1285,
	1284, 2934, 2935, 1422, 1283, 1282, 1281, 2936, 2937, 2938,
	2939, 2579, 2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947,
	2948, 2949, 1457, 3562, 3074, 1280, 3069, 3070, 1279, 1278,
	1277, 1116, 2731, 2732, 1276, 2547, 3667, 2578, 1185, 1186,
	1187, 1184, 1275, 1274, 3146, 2577, 1273, 2747, 2748, 1272,
	1271, 1199, 1198, 1208, 1209, 1201, 1202, 1203, 1204, 1205,
	1206, 1207, 1200, 3041, 1185, 1186, 1187, 1184, 3043, 3044,
	2144, 2783, 1185, 1186, 1187, 1184, 1270, 1199, 1198, 1208,
	1209, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1200, 1267,
	629, 3100, 3099, 3105, 3104, 2576, 1266, 1265, 3111, 3112,
	3109, 2575, 1263, 3095, 3122, 1262, 1261, 1258, 3102, 1251,
	1250, 1248, 3728, 2574, 1247, 3126, 1246, 3129, 3130, 3131,
	2573, 1245, 1185, 1186, 1187, 1184, 2572, 3171, 1185, 1186,
	1187, 1184, 1244, 1243, 3173, 1242, 1939, 3141, 1241, 3135,
	1185, 1186, 1187, 1184, 2571, 1240, 1239, 1185, 1186, 1187,
	1184, 3046, 2405, 1185, 1186, 1187, 1184, 1238, 3159, 1237,
	3196, 1232, 1231, 1415, 1230, 3188, 2568, 1229, 1149, 3160,
	3161, 1185, 1186, 1187, 1184, 1099, 3118, 3119, 3665, 3165,
	3124, 3663, 3164, 3661, 3295, 2239, 3178, 2221, 1137, 3121,
	2635, 3113, 2398, 1185, 1186, 1187, 1184, 2034, 1148, 2808,
	3170, 3123, 2806, 3330, 2809, 3071, 3125, 2807, 3224, 123,
	2531, 3331, 123, 123, 1211, 123, 1215, 2805, 2804, 2810,
	3199, 2363, 2364, 3433, 2371, 1940, 3243, 3202, 1003, 2491,
	2481, 2354, 1212, 1214, 1210, 1003, 1213, 1199, 1198, 1208,
	1209, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1200, 1350,
	3262, 2308, 3194, 1116, 108, 1001, 58, 2567, 123, 2885,
	3329, 2566, 3065, 1816, 1817, 3190, 1116, 1001, 2359, 2362,
	2363, 2364, 2360, 57, 2361, 2365, 3009, 1116, 3061, 3309,
	3062, 123, 2560, 1451, 1185, 1186, 1187, 1184, 1185, 1186,
	1187, 1184, 3214, 3215, 1811, 1812, 1813, 3305, 3245, 3162,
	3163, 1923, 3136, 1912, 1504, 1116, 2476, 1765, 2515, 1185,
	1186, 1187, 1184, 1558, 631, 1538, 632, 2496, 2497, 3311,
	1765, 1449, 3253, 3325, 3255, 3292, 3327, 3242, 3241, 2196,
	1994, 1143, 3249, 633, 200, 3285, 2550, 2984, 2359, 2362,
	2363, 2364, 2360, 3333, 2361, 2365, 2977, 1116, 2681, 3322,
	2655, 2260, 3332, 2230, 3299, 1820, 3781, 3304, 3301, 1787,
	1217, 3574, 2727, 1185, 1186, 1187, 1184, 1804, 3308, 2728,
	2729, 2730, 1809, 3092, 3263, 2526, 2349, 3313, 2345, 3315,
	1660, 1924, 3318, 3324, 1708, 1707, 3369, 3302, 3321, 1411,
	3323, 1410, 1116, 1309, 1310, 1307, 1308, 1176, 2715, 3128,
	3317, 2833, 1185, 1186, 1187, 1184, 3350, 1185, 1186, 1187,
	1184, 1116, 1451, 1451, 1305, 1306, 2195, 3020, 1303, 1304,
	2063, 1363, 1341, 1386, 3748, 3746, 2799, 3406, 3138, 3406,
	3244, 3346, 3706, 3685, 3684, 3347, 3682, 3627, 1859, 1860,
	3248, 3590, 3485, 3400, 3401, 1116, 3422, 1116, 3396, 3484,
	1449, 1658, 3423, 3342, 3179, 3155, 3154, 3425, 3139, 3427,
	3336, 2293, 2263, 1560, 1451, 2843, 1362, 3197, 2799, 3378,
	3377, 2888, 3403, 3376, 3774, 3773, 1113, 2223, 2126, 1317,
	1003, 1134, 629, 3397, 1116, 1116, 3773, 3774, 1116, 1116,
	3426, 3399, 3452, 1981, 3134, 3410, 3409, 1378, 3373, 1981,
	1981, 1981, 1658, 3245, 3473, 3421, 2048, 865, 866, 867,
	868, 66, 1113, 187, 3, 3468, 2, 1822, 3793, 3482,
	3794, 3458, 3459, 1, 3434, 3469, 3470, 3292, 3486, 3487,
	3430, 3431, 3394, 2587, 3438, 1769, 1311, 3285, 869, 864,
	3436, 1451, 1428, 2380, 1199, 1198, 1208, 1209, 1201, 1202,
	1203, 1204, 1205, 1206, 1207, 1200, 2110, 1972, 1455, 1773,
	871, 2817, 3514, 3479, 2818, 3127, 1611, 2820, 1611, 2604,
	2083, 2788, 3480, 3506, 3474, 3478, 2343, 3498, 2210, 1449,
	1199, 1198, 1208, 1209, 1201, 1202, 1203, 1204, 1205, 1206,
	1207, 1200, 3004, 3497, 1351, 915, 1714, 3493, 1573, 1025,
	3532, 1127, 3543, 3537, 1570, 3394, 3394, 1126, 3501, 3394,
	3394, 3505, 1124, 1663, 3424, 3355, 754, 3356, 2037, 1116,
	2779, 2753, 3481, 3334, 3780, 3809, 3740, 3783, 1588, 738,
	3566, 3560, 3531, 3676, 3595, 3418, 3419, 3744, 3597, 3496,
	2088, 1181, 2865, 938, 795, 765, 3538, 3535, 3350, 3539,
	2374, 1249, 3540, 1551, 3552, 1003, 1185, 1186, 1187, 1184,
	3556, 2932, 1116, 3363, 2930, 1027, 764, 1451, 1199, 1198,
	1208, 1209, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1200,
	3213, 2624, 2836, 3545, 1024, 939, 2020, 3573, 3592, 3494,
	1505, 1509, 2259, 3553, 3646, 3432, 3057, 2689, 1533, 3582,
	3641, 3257, 3359, 3584, 3613, 1449, 3616, 3357, 3358, 671,
	1951, 603, 985, 3472, 1939, 1236, 3608, 2033, 672, 2238,
	3697, 1116, 3576, 123, 895, 2220, 896, 3591, 888, 2643,
	2642, 1628, 1190, 1645, 3628, 1692, 2950, 2951, 1227, 710,
	1611, 3221, 3222, 3223, 2113, 2621, 3280, 3227, 3228, 2829,
	65, 64, 63, 3623, 62, 2002, 208, 756, 207, 3619,
	3389, 3622, 3645, 3672, 3785, 736, 735, 734, 1116, 733,
	3630, 732, 731, 2358, 2356, 2355, 1451, 3652, 1935, 3670,
	3673, 1934, 2000, 3394, 3018, 3660, 3662, 3664, 3666, 2718,
	3644, 2713, 1864, 3639, 1862, 2288, 3674, 2295, 3653, 1861,
	3725, 3656, 3657, 3449, 2763, 3659, 3349, 1810, 2284, 1881,
	2734, 1878, 3669, 1877, 1449, 3681, 2207, 2208, 2209, 3679,
	1451, 2726, 3445, 3543, 3439, 1909, 3541, 3405, 3264, 3265,
	3271, 2225, 2226, 2227, 2228, 2229, 1050, 1046, 1048, 3716,
	1049, 1047, 3394, 2536, 2265, 3724, 3705, 2979, 3707, 3710,
	3711, 2202, 3709, 2201, 2199, 3721, 3708, 2198, 1449, 1734,
	1735, 1736, 1737, 1326, 3615, 1741, 1742, 1743, 1744, 1746,
	1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 3693,
	3733, 3372, 3734, 3753, 3735, 2403, 3736, 2401, 3747, 3394,
	3749, 3750, 3737, 1096, 3745, 3743, 3120, 1116, 1688, 3116,
	2045, 3752, 3608, 2059, 1685, 2884, 1936, 1932, 1687, 1684,
	1686, 1690, 1691, 2790, 3566, 3516, 1689, 1815, 889, 3762,
	2218, 161, 51, 3721, 105, 3764, 3763, 3768, 3765, 3771,
	3779, 1022, 3787, 159, 3769, 3786, 50, 94, 123, 93,
	3775, 3776, 3777, 3778, 104, 157, 49, 192, 123, 191,
	3798, 194, 1116, 193, 3791, 1910, 190, 2454, 2455, 189,
	1493, 188, 3645, 3800, 3799, 3686, 3802, 3408, 859, 40,
	39, 38, 3721, 3811, 3808, 34, 13, 183, 55, 172,
	145, 12, 35, 22, 21, 1577, 20, 26, 32, 31,
	1912, 116, 115, 30, 114, 173, 3818, 1457, 113, 112,
	111, 110, 164, 1023, 3787, 3825, 174, 3786, 3824, 29,
	19, 44, 1981, 43, 3811, 3826, 42, 9, 3760, 103,
	3830, 101, 28, 102, 99, 121, 97, 95, 3828, 77,
	76, 3565, 75, 3475, 90, 89, 88, 3476, 87, 86,
	109, 1887, 85, 83, 84, 937, 177, 74, 73, 1673,
	1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683,
	1695, 1696, 1697, 1698, 1699, 1700, 1693, 1694, 1939, 1939,
	1939, 1939, 72, 1611, 1017, 1012, 1007, 1011, 1015, 71,
	1939, 683, 682, 689, 679, 70, 92, 98, 96, 81,
	91, 82, 80, 686, 687, 79, 688, 692, 78, 69,
	673, 68, 1020, 67, 143, 142, 1010, 141, 140, 1903,
	697, 139, 183, 55, 172, 145, 137, 138, 136, 135,
	134, 133, 132, 127, 128, 131, 129, 130, 45, 46,
	173, 47, 48, 153, 152, 154, 156, 164, 158, 155,
	160, 174, 150, 148, 151, 149, 147, 60, 11, 106,
	18, 25, 4, 701, 0, 0, 703, 1018, 0, 0,
	121, 702, 0, 0, 1021, 0, 123, 0, 0, 0,
	0, 123, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 1008, 0, 0, 1891,
	0, 0, 123, 0, 144, 170, 181, 171, 107, 0,
	1897, 0, 0, 123, 3585, 0, 0, 0, 0, 1019,
	0, 0, 0, 0, 0, 0, 169, 163, 162, 0,
	1885, 1919, 0, 61, 1886, 1888, 1890, 0, 1892, 1893,
	1894, 1898, 1899, 1900, 1902, 1905, 1906, 1907, 0, 0,
	0, 0, 0, 0, 0, 1895, 1904, 1896, 0, 1009,
	0, 0, 0, 0, 0, 0, 0, 2659, 127, 128,
	0, 129, 130, 0, 0, 3629, 0, 0, 0, 0,
	3633, 3634, 0, 0, 0, 0, 0, 0, 0, 1911,
	0, 0, 0, 0, 165, 166, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 674, 676,
	675, 3654, 0, 0, 0, 0, 0, 0, 681, 0,
	0, 0, 0, 0, 0, 175, 0, 0, 0, 0,
	685, 0, 0, 1908, 0, 0, 1016, 700, 2928, 144,
	170, 181, 171, 107, 678, 117, 0, 0, 668, 168,
	1884, 118, 0, 0, 0, 0, 0, 1883, 0, 0,
	0, 169, 163, 162, 0, 0, 0, 0, 61, 0,
	0, 1001, 1013, 123, 0, 1014, 0, 0, 123, 0,
	0, 1901, 0, 0, 0, 1939, 0, 0, 0, 0,
	1889, 0, 1199, 1198, 1208, 1209, 1201, 1202, 1203, 1204,
	1205, 1206, 1207, 1200, 123, 0, 0, 0, 119, 1199,
	1198, 1208, 1209, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
	1200, 54, 0, 0, 0, 0, 0, 0, 0, 165,
	166, 167, 0, 2834, 2835, 3755, 3756, 912, 0, 913,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 680, 684, 690, 0, 691, 693, 0,
	175, 694, 695, 696, 0, 0, 698, 699, 0, 0,
	56, 0, 0, 0, 0, 893, 0, 0, 0, 0,
	117, 0, 0, 0, 168, 0, 118, 0, 0, 907,
	0, 903, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 0, 0, 146, 0, 0, 0, 0, 52, 0,
	0, 0, 0, 0, 0, 1910, 0, 0, 0, 0,
	1871, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 885, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 0,
	1912, 1880, 0, 0, 0, 0, 0, 0, 0, 0,
	1913, 1914, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 41, 0, 0, 0, 0,
	0, 53, 0, 0, 0, 5, 1879, 0, 0, 0,
	0, 0, 124, 125, 0, 56, 126, 0, 0, 0,
	0, 1887, 0, 0, 0, 0, 0, 0, 909, 0,
	902, 0, 677, 0, 0, 0, 0, 0, 0, 906,
	905, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 887, 0, 146, 0,
	894, 0, 0, 52, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 3012, 0, 0, 0, 0, 0, 0, 0, 1903,
	0, 0, 0, 0, 0, 0, 0, 3024, 0, 911,
	0, 0, 0, 0, 900, 0, 0, 0, 899, 0,
	123, 0, 0, 0, 886, 0, 0, 123, 892, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	41, 0, 0, 0, 0, 0, 53, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 0, 124, 125, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	1870, 1872, 1869, 1692, 1866, 0, 0, 1939, 0, 1891,
	0, 0, 0, 0, 0, 0, 0, 910, 0, 0,
	1897, 0, 0, 0, 0, 0, 0, 0, 1882, 0,
	1865, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1885, 1919, 0, 891, 1886, 1888, 1890, 0, 1892, 1893,
	1894, 1898, 1899, 1900, 1902, 1905, 1906, 1907, 0, 0,
	0, 0, 0, 0, 1981, 1895, 1904, 1896, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1874, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1911,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	908, 0, 0, 0, 0, 1867, 1868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1908, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 897,
	1884, 0, 0, 0, 0, 0, 1688, 1883, 0, 0,
	0, 0, 1685, 0, 0, 0, 1687, 1684, 1686, 1690,
	1691, 0, 0, 0, 1689, 3167, 0, 0, 0, 0,
	0, 1901, 0, 0, 0, 0, 0, 0, 0, 0,
	1889, 0, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 772, 1916, 1915, 0, 0, 0, 0, 0,
	0, 371, 0, 496, 529, 518, 601, 484, 0, 0,
	0, 0, 0, 0, 725, 0, 0, 0, 311, 0,
	0, 341, 533, 515, 525, 516, 501, 502, 503, 510,
	321, 504, 505, 506, 476, 507, 477, 508, 509, 763,
	532, 483, 402, 355, 550, 549, 1876, 0, 830, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	717, 0, 0, 753, 807, 806, 740, 750, 0, 0,
	284, 206, 478, 597, 480, 479, 741, 0, 742, 746,
	749, 745, 743, 744, 0, 822, 0, 0, 1918, 0,
	0, 1917, 709, 721, 0, 726, 0, 1673, 1674, 1675,
	1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1695, 1696,
	1697, 1698, 1699, 1700, 1693, 1694, 0, 0, 0, 718,
	719, 0, 0, 0, 0, 773, 0, 720, 0, 0,
	768, 747, 751, 0, 0, 0, 0, 274, 407, 424,
	285, 398, 437, 290, 405, 280, 370, 394, 0, 0,
	276, 422, 404, 352, 331, 332, 275, 123, 389, 309,
	323, 306, 368, 748, 771, 775, 305, 844, 769, 432,
	278, 0, 431, 367, 418, 423, 353, 347, 277, 420,
	351, 346, 335, 313, 845, 336, 337, 327, 379, 345,
	380, 328, 357, 356, 358, 0, 0, 0, 0, 0,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 766, 0, 594, 0, 434,
	0, 0, 828, 0, 0, 0, 406, 0, 0, 338,
	0, 0, 0, 770, 0, 392, 373, 841, 0, 0,
	390, 343, 419, 381, 425, 408, 433, 386, 382, 269,
	409, 308, 354, 281, 283, 303, 310, 312, 314, 315,
	363, 364, 376, 397, 410, 411, 412, 307, 291, 391,
	292, 325, 293, 270, 299, 297, 300, 399, 301, 272,
	377, 416, 0, 320, 387, 350, 273, 349, 378, 415,
	414, 282, 441, 447, 448, 537, 0, 453, 617, 618,
	619, 462, 467, 468, 469, 471, 472, 473, 474, 538,
	555, 522, 492, 455, 546, 489, 493, 494, 558, 1716,
	1715, 1717, 446, 339, 340, 0, 318, 266, 267, 612,
	826, 369, 560, 593, 485, 0, 840, 821, 823, 824,
	827, 831, 832, 833, 834, 835, 837, 839, 843, 611,
	0, 539, 554, 615, 553, 608, 375, 3457, 396, 551,
	498, 0, 543, 517, 0, 544, 513, 548, 0, 487,
	0, 403, 427, 439, 456, 459, 488, 573, 574, 575,
	271, 458, 577, 578, 579, 580, 581, 582, 583, 576,
	842, 520, 497, 523, 438, 500, 499, 0, 0, 534,
	774, 535, 536, 359, 360, 361, 362, 829, 561, 289,
	457, 385, 0, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 526, 527, 524, 620, 0, 584, 585, 0,
	0, 451, 452, 317, 324, 470, 326, 288, 374, 319,
	436, 333, 0, 463, 528, 464, 587, 590, 588, 589,
	366, 329, 330, 400, 334, 344, 388, 435, 372, 393,
	286, 426, 401, 348, 514, 541, 851, 825, 850, 852,
	853, 849, 854, 855, 836, 730, 0, 781, 847, 846,
	848, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 568, 567, 566, 565, 564, 563, 562,
	0, 0, 511, 413, 298, 260, 294, 295, 302, 609,
	606, 417, 610, 0, 268, 491, 342, 0, 383, 316,
	556, 557, 0, 0, 814, 788, 789, 790, 727, 791,
	785, 786, 728, 787, 815, 779, 811, 812, 755, 782,
	792, 810, 793, 813, 816, 817, 856, 857, 799, 783,
	232, 858, 796, 818, 809, 808, 794, 780, 819, 820,
	762, 757, 797, 798, 784, 802, 803, 804, 729, 776,
	777, 778, 800, 801, 758, 759, 760, 761, 0, 0,
	0, 442, 443, 444, 466, 0, 428, 490, 607, 0,
	0, 0, 0, 0, 0, 0, 540, 552, 586, 0,
	595, 596, 598, 600, 805, 602, 772, 613, 481, 482,
	614, 592, 0, 722, 0, 371, 0, 496, 529, 518,
	601, 484, 0, 0, 0, 0, 0, 0, 725, 0,
	0, 0, 311, 1766, 0, 341, 533, 515, 525, 516,
	501, 502, 503, 510, 321, 504, 505, 506, 476, 507,
	477, 508, 509, 763, 532, 483, 402, 355, 550, 549,
	0, 0, 830, 838, 0, 0, 0, 0, 0, 0,
	0, 1963, 0, 0, 717, 0, 0, 753, 807, 806,
	740, 750, 0, 0, 284, 206, 478, 597, 480, 479,
	741, 0, 742, 746, 749, 745, 743, 744, 0, 822,
	0, 0, 0, 0, 0, 0, 709, 721, 0, 726,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 718, 719, 0, 0, 0, 0, 773,
	0, 720, 0, 0, 1964, 747, 751, 0, 0, 0,
	0, 274, 407, 424, 285, 398, 437, 290, 405, 280,
	370, 394, 0, 0, 276, 422, 404, 352, 331, 332,
	275, 0, 389, 309, 323, 306, 368, 748, 771, 775,
	305, 844, 769, 432, 278, 0, 431, 367, 418, 423,
	353, 347, 277, 420, 351, 346, 335, 313, 845, 336,
	337, 327, 379, 345, 380, 328, 357, 356, 358, 0,
	0, 0, 0, 0, 460, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 591, 766,
	0, 594, 0, 434, 0, 0, 828, 0, 0, 0,
	406, 0, 0, 338, 0, 0, 0, 770, 0, 392,
	373, 841, 0, 0, 390, 343, 419, 381, 425, 408,
	433, 386, 382, 269, 409, 308, 354, 281, 283, 303,
	310, 312, 314, 315, 363, 364, 376, 397, 410, 411,
	412, 307, 291, 391, 292, 325, 293, 270, 299, 297,
	300, 399, 301, 272, 377, 416, 0, 320, 387, 350,
	273, 349, 378, 415, 414, 282, 441, 447, 448, 537,
	0, 453, 617, 618, 619, 462, 467, 468, 469, 471,
	472, 473, 474, 538, 555, 522, 492, 455, 546, 489,
	493, 494, 558, 0, 0, 0, 446, 339, 340, 0,
	318, 266, 267, 612, 826, 369, 560, 593, 485, 0,
	840, 821, 823, 824, 827, 831, 832, 833, 834, 835,
	837, 839, 843, 611, 0, 539, 554, 615, 553, 608,
	375, 0, 396, 551, 498, 0, 543, 517, 0, 544,
	513, 548, 0, 487, 0, 403, 427, 439, 456, 459,
	488, 573, 574, 575, 271, 458, 577, 578, 579, 580,
	581, 582, 583, 576, 842, 520, 497, 523, 438, 500,
	499, 0, 0, 534, 774, 535, 536, 359, 360, 361,
	362, 829, 561, 289, 457, 385, 0, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 526, 527, 524, 620,
	0, 584, 585, 0, 0, 451, 452, 317, 324, 470,
	326, 288, 374, 319, 436, 333, 0, 463, 528, 464,
	587, 590, 588, 589, 366, 329, 330, 400, 334, 344,
	388, 435, 372, 393, 286, 426, 401, 348, 514, 541,
	851, 825, 850, 852, 853, 849, 854, 855, 836, 730,
	0, 781, 847, 846, 848, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 568, 567, 566,
	565, 564, 563, 562, 0, 0, 511, 413, 298, 260,
	294, 295, 302, 609, 606, 417, 610, 0, 268, 491,
	342, 0, 383, 316, 556, 557, 0, 0, 814, 788,
	789, 790, 727, 791, 785, 786, 728, 787, 815, 779,
	811, 812, 755, 782, 792, 810, 793, 813, 816, 817,
	856, 857, 799, 783, 232, 858, 796, 818, 809, 808,
	794, 780, 819, 820, 762, 757, 797, 798, 784, 802,
	803, 804, 729, 776, 777, 778, 800, 801, 758, 759,
	760, 761, 0, 0, 0, 442, 443, 444, 466, 0,
	428, 490, 607, 0, 0, 0, 0, 0, 0, 0,
	540, 552, 586, 0, 595, 596, 598, 600, 805, 602,
	0, 613, 481, 482, 614, 592, 0, 722, 183, 772,
	0, 0, 0, 0, 0, 0, 0, 0, 371, 0,
	496, 529, 518, 601, 484, 0, 0, 0, 0, 0,
	0, 725, 0, 0, 0, 311, 0, 0, 341, 533,
	515, 525, 516, 501, 502, 503, 510, 321, 504, 505,
	506, 476, 507, 477, 508, 509, 1220, 532, 483, 402,
	355, 550, 549, 0, 0, 830, 838, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	753, 807, 806, 740, 750, 0, 0, 284, 206, 478,
	597, 480, 479, 741, 0, 742, 746, 749, 745, 743,
	744, 0, 822, 0, 0, 0, 0, 0, 0, 709,
	721, 0, 726, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 718, 719, 0, 0,
	0, 0, 773, 0, 720, 0, 0, 768, 747, 751,
	0, 0, 0, 0, 274, 407, 424, 285, 398, 437,
	290, 405, 280, 370, 394, 0, 0, 276, 422, 404,
	352, 331, 332, 275, 0, 389, 309, 323, 306, 368,
	748, 771, 775, 305, 844, 769, 432, 278, 0, 431,
	367, 418, 423, 353, 347, 277, 420, 351, 346, 335,
	313, 845, 336, 337, 327, 379, 345, 380, 328, 357,
	356, 358, 0, 0, 0, 0, 0, 460, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 591, 766, 0, 594, 0, 434, 0, 0, 828,
	0, 0, 0, 406, 0, 0, 338, 0, 0, 0,
	770, 0, 392, 373, 841, 0, 0, 390, 343, 419,
	381, 425, 408, 433, 386, 382, 269, 409, 308, 354,
	281, 283, 303, 310, 312, 314, 315, 363, 364, 376,
	397, 410, 411, 412, 307, 291, 391, 292, 325, 293,
	270, 299, 297, 300, 399, 301, 272, 377, 416, 0,
	320, 387, 350, 273, 349, 378, 415, 414, 282, 441,
	447, 448, 537, 0, 453, 617, 618, 619, 462, 467,
	468, 469, 471, 472, 473, 474, 538, 555, 522, 492,
	455, 546, 489, 493, 494, 558, 0, 0, 0, 446,
	339, 340, 0, 318, 266, 267, 612, 826, 369, 560,
	593, 485, 0, 840, 821, 823, 824, 827, 831, 832,
	833, 834, 835, 837, 839, 843, 611, 0, 539, 554,
	615, 553, 608, 375, 0, 396, 551, 498, 0, 543,
	517, 0, 544, 513, 548, 0, 487, 0, 403, 427,
	439, 456, 459, 488, 573, 574, 575, 271, 458, 577,
	578, 579, 580, 581, 582, 583, 576, 842, 520, 497,
	523, 438, 500, 499, 0, 0, 534, 774, 535, 536,
	359, 360, 361, 362, 829, 561, 289, 457, 385, 0,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 526,
	527, 524, 620, 0, 584, 585, 0, 0, 451, 452,
	317, 324, 470, 326, 288, 374, 319, 436, 333, 0,
	463, 528, 464, 587, 590, 588, 589, 366, 329, 330,
	400, 334, 344, 388, 435, 372, 393, 286, 426, 401,
	348, 514, 541, 851, 825, 850, 852, 853, 849, 854,
	855, 836, 730, 0, 781, 847, 846, 848, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	568, 567, 566, 565, 564, 563, 562, 0, 0, 511,
	413, 298, 260, 294, 295, 302, 609, 606, 417, 610,
	0, 268, 491, 342, 146, 383, 316, 556, 557, 0,
	0, 814, 788, 789, 790, 727, 791, 785, 786, 728,
	787, 815, 779, 811, 812, 755, 782, 792, 810, 793,
	813, 816, 817, 856, 857, 799, 783, 232, 858, 796,
	818, 809, 808, 794, 780, 819, 820, 762, 757, 797,
	798, 784, 802, 803, 804, 729, 776, 777, 778, 800,
	801, 758, 759, 760, 761, 0, 0, 0, 442, 443,
	444, 466, 0, 428, 490, 607, 0, 0, 0, 0,
	0, 0, 0, 540, 552, 586, 0, 595, 596, 598,
	600, 805, 602, 772, 613, 481, 482, 614, 592, 0,
	722, 0, 371, 0, 496, 529, 518, 601, 484, 0,
	0, 0, 0, 0, 0, 725, 0, 0, 0, 311,
	3827, 0, 341, 533, 515, 525, 516, 501, 502, 503,
	510, 321, 504, 505, 506, 476, 507, 477, 508, 509,
	763, 532, 483, 402, 355, 550, 549, 0, 0, 830,
	838, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 717, 0, 0, 753, 807, 806, 740, 750, 0,
	0, 284, 206, 478, 597, 480, 479, 741, 0, 742,
	746, 749, 745, 743, 744, 0, 822, 0, 0, 0,
	0, 0, 0, 709, 721, 0, 726, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	718, 719, 0, 0, 0, 0, 773, 0, 720, 0,
	0, 768, 747, 751, 0, 0, 0, 0, 274, 407,
	424, 285, 398, 437, 290, 405, 280, 370, 394, 0,
	0, 276, 422, 404, 352, 331, 332, 275, 0, 389,
	309, 323, 306, 368, 748, 771, 775, 305, 844, 769,
	432, 278, 0, 431, 367, 418, 423, 353, 347, 277,
	420, 351, 346, 335, 313, 845, 336, 337, 327, 379,
	345, 380, 328, 357, 356, 358, 0, 0, 0, 0,
	0, 460, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 766, 0, 594, 0,
	434, 0, 0, 828, 0, 0, 0, 406, 0, 0,
	338, 0, 0, 0, 770, 0, 392, 373, 841, 0,
	0, 390, 343, 419, 381, 425, 408, 433, 386, 382,
	269, 409, 308, 354, 281, 283, 303, 310, 312, 314,
	315, 363, 364, 376, 397, 410, 411, 412, 307, 291,
	391, 292, 325, 293, 270, 299, 297, 300, 399, 301,
	272, 377, 416, 0, 320, 387, 350, 273, 349, 378,
	415, 414, 282, 441, 447, 448, 537, 0, 453, 617,
	618, 619, 462, 467, 468, 469, 471, 472, 473, 474,
	538, 555, 522, 492, 455, 546, 489, 493, 494, 558,
	0, 0, 0, 446, 339, 340, 0, 318, 266, 267,
	612, 826, 369, 560, 593, 485, 0, 840, 821, 823,
	824, 827, 831, 832, 833, 834, 835, 837, 839, 843,
	611, 0, 539, 554, 615, 553, 608, 375, 0, 396,
	551, 498, 0, 543, 517, 0, 544, 513, 548, 0,
	487, 0, 403, 427, 439, 456, 459, 488, 573, 574,
	575, 271, 458, 577, 578, 579, 580, 581, 582, 583,
	576, 842, 520, 497, 523, 438, 500, 499, 0, 0,
	534, 774, 535, 536, 359, 360, 361, 362, 829, 561,
	289, 457, 385, 0, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 526, 527, 524, 620, 0, 584, 585,
	0, 0, 451, 452, 317, 324, 470, 326, 288, 374,
	319, 436, 333, 0, 463, 528, 464, 587, 590, 588,
	589, 366, 329, 330, 400, 334, 344, 388, 435, 372,
	393, 286, 426, 401, 348, 514, 541, 851, 825, 850,
	852, 853, 849, 854, 855, 836, 730, 0, 781, 847,
	846, 848, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 569, 568, 567, 566, 565, 564, 563,
	562, 0, 0, 511, 413, 298, 260, 294, 295, 302,
	609, 606, 417, 610, 0, 268, 491, 342, 0, 383,
	316, 556, 557, 0, 0, 814, 788, 789, 790, 727,
	791, 785, 786, 728, 787, 815, 779, 811, 812, 755,
	782, 792, 810, 793, 813, 816, 817, 856, 857, 799,
	783, 232, 858, 796, 818, 809, 808, 794, 780, 819,
	820, 762, 757, 797, 798, 784, 802, 803, 804, 729,
	776, 777, 778, 800, 801, 758, 759, 760, 761, 0,
	0, 0, 442, 443, 444, 466, 0, 428, 490, 607,
	0, 0, 0, 0, 0, 0, 0, 540, 552, 586,
	0, 595, 596, 598, 600, 805, 602, 772, 613, 481,
	482, 614, 592, 0, 722, 0, 371, 0, 496, 529,
	518, 601, 484, 0, 0, 0, 0, 0, 0, 725,
	0, 0, 0, 311, 0, 0, 341, 533, 515, 525,
	516, 501, 502, 503, 510, 321, 504, 505, 506, 476,
	507, 477, 508, 509, 763, 532, 483, 402, 355, 550,
	549, 0, 0, 830, 838, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 717, 0, 0, 753, 807,
	806, 740, 750, 0, 0, 284, 206, 478, 597, 480,
	479, 741, 0, 742, 746, 749, 745, 743, 744, 0,
	822, 0, 0, 0, 0, 0, 0, 709, 721, 0,
	726, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 718, 719, 0, 0, 0, 0,
	773, 0, 720, 0, 0, 768, 747, 751, 0, 0,
	0, 0, 274, 407, 424, 285, 398, 437, 290, 405,
	280, 370, 394, 0, 0, 276, 422, 404, 352, 331,
	332, 275, 0, 389, 309, 323, 306, 368, 748, 771,
	775, 305, 844, 769, 432, 278, 0, 431, 367, 418,
	423, 353, 347, 277, 420, 351, 346, 335, 313, 845,
	336, 337, 327, 379, 345, 380, 328, 357, 356, 358,
	0, 0, 0, 0, 0, 460, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	766, 0, 594, 0, 434, 0, 0, 828, 0, 0,
	0, 406, 0, 0, 338, 0, 0, 0, 770, 0,
	392, 373, 841, 3722, 0, 390, 343, 419, 381, 425,
	408, 433, 386, 382, 269, 409, 308, 354, 281, 283,
	303, 310, 312, 314, 315, 363, 364, 376, 397, 410,
	411, 412, 307, 291, 391, 292, 325, 293, 270, 299,
	297, 300, 399, 301, 272, 377, 416, 0, 320, 387,
	350, 273, 349, 378, 415, 414, 282, 441, 447, 448,
	537, 0, 453, 617, 618, 619, 462, 467, 468, 469,
	471, 472, 473, 474, 538, 555, 522, 492, 455, 546,
	489, 493, 494, 558, 0, 0, 0, 446, 339, 340,
	0, 318, 266, 267, 612, 826, 369, 560, 593, 485,
	0, 840, 821, 823, 824, 827, 831, 832, 833, 834,
	835, 837, 839, 843, 611, 0, 539, 554, 615, 553,
	608, 375, 0, 396, 551, 498, 0, 543, 517, 0,
	544, 513, 548, 0, 487, 0, 403, 427, 439, 456,
	459, 488, 573, 574, 575, 271, 458, 577, 578, 579,
	580, 581, 582, 583, 576, 842, 520, 497, 523, 438,
	500, 499, 0, 0, 534, 774, 535, 536, 359, 360,
	361, 362, 829, 561, 289, 457, 385, 0, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 526, 527, 524,
	620, 0, 584, 585, 0, 0, 451, 452, 317, 324,
	470, 326, 288, 374, 319, 436, 333, 0, 463, 528,
	464, 587, 590, 588, 589, 366, 329, 330, 400, 334,
	344, 388, 435, 372, 393, 286, 426, 401, 348, 514,
	541, 851, 825, 850, 852, 853, 849, 854, 855, 836,
	730, 0, 781, 847, 846, 848, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 568, 567,
	566, 565, 564, 563, 562, 0, 0, 511, 413, 298,
	260, 294, 295, 302, 609, 606, 417, 610, 0, 268,
	491, 342, 0, 383, 316, 556, 557, 0, 0, 814,
	788, 789, 790, 727, 791, 785, 786, 728, 787, 815,
	779, 811, 812, 755, 782, 792, 810, 793, 813, 816,
	817, 856, 857, 799, 783, 232, 858, 796, 818, 809,
	808, 794, 780, 819, 820, 762, 757, 797, 798, 784,
	802, 803, 804, 729, 776, 777, 778, 800, 801, 758,
	759, 760, 761, 0, 0, 0, 442, 443, 444, 466,
	0, 428, 490, 607, 0, 0, 0, 0, 0, 0,
	0, 540, 552, 586, 0, 595, 596, 598, 600, 805,
	602, 772, 613, 481, 482, 614, 592, 0, 722, 0,
	371, 0, 496, 529, 518, 601, 484, 0, 0, 0,
	0, 0, 0, 725, 0, 0, 0, 311, 1766, 0,
	341, 533, 515, 525, 516, 501, 502, 503, 510, 321,
	504, 505, 506, 476, 507, 477, 508, 509, 763, 532,
	483, 402, 355, 550, 549, 0, 0, 830, 838, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 717,
	0, 0, 753, 807, 806, 740, 750, 0, 0, 284,
	206, 478, 597, 480, 479, 741, 0, 742, 746, 749,
	745, 743, 744, 0, 822, 0, 0, 0, 0, 0,
	0, 709, 721, 0, 726, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 718, 719,
	0, 0, 0, 0, 773, 0, 720, 0, 0, 768,
	747, 751, 0, 0, 0, 0, 274, 407, 424, 285,
	398, 437, 290, 405, 280, 370, 394, 0, 0, 276,
	422, 404, 352, 331, 332, 275, 0, 389, 309, 323,
	306, 368, 748, 771, 775, 305, 844, 769, 432, 278,
	0, 431, 367, 418, 423, 353, 347, 277, 420, 351,
	346, 335, 313, 845, 336, 337, 327, 379, 345, 380,
	328, 357, 356, 358, 0, 0, 0, 0, 0, 460,
	461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 766, 0, 594, 0, 434, 0,
	0, 828, 0, 0, 0, 406, 0, 0, 338, 0,
	0, 0, 770, 0, 392, 373, 841, 0, 0, 390,
	343, 419, 381, 425, 408, 433, 386, 382, 269, 409,
	308, 354, 281, 283, 303, 310, 312, 314, 315, 363,
	364, 376, 397, 410, 411, 412, 307, 291, 391, 292,
	325, 293, 270, 299, 297, 300, 399, 301, 272, 377,
	416, 0, 320, 387, 350, 273, 349, 378, 415, 414,
	282, 441, 447, 448, 537, 0, 453, 617, 618, 619,
	462, 467, 468, 469, 471, 472, 473, 474, 538, 555,
	522, 492, 455, 546, 489, 493, 494, 558, 0, 0,
	0, 446, 339, 340, 0, 318, 266, 267, 612, 826,
	369, 560, 593, 485, 0, 840, 821, 823, 824, 827,
	831, 832, 833, 834, 835, 837, 839, 843, 611, 0,
	539, 554, 615, 553, 608, 375, 0, 396, 551, 498,
	0, 543, 517, 0, 544, 513, 548, 0, 487, 0,
	403, 427, 439, 456, 459, 488, 573, 574, 575, 271,
	458, 577, 578, 579, 580, 581, 582, 583, 576, 842,
	520, 497, 523, 438, 500, 499, 0, 0, 534, 774,
	535, 536, 359, 360, 361, 362, 829, 561, 289, 457,
	385, 0, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 526, 527, 524, 620, 0, 584, 585, 0, 0,
	451, 452, 317, 324, 470, 326, 288, 374, 319, 436,
	333, 0, 463, 528, 464, 587, 590, 588, 589, 366,
	329, 330, 400, 334, 344, 388, 435, 372, 393, 286,
	426, 401, 348, 514, 541, 851, 825, 850, 852, 853,
	849, 854, 855, 836, 730, 0, 781, 847, 846, 848,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 568, 567, 566, 565, 564, 563, 562, 0,
	0, 511, 413, 298, 260, 294, 295, 302, 609, 606,
	417, 610, 0, 268, 491, 342, 0, 383, 316, 556,
	557, 0, 0, 814, 788, 789, 790, 727, 791, 785,
	786, 728, 787, 815, 779, 811, 812, 755, 782, 792,
	810, 793, 813, 816, 817, 856, 857, 799, 783, 232,
	858, 796, 818, 809, 808, 794, 780, 819, 820, 762,
	757, 797, 798, 784, 802, 803, 804, 729, 776, 777,
	778, 800, 801, 758, 759, 760, 761, 0, 0, 0,
	442, 443, 444, 466, 0, 428, 490, 607, 0, 0,
	0, 0, 0, 0, 0, 540, 552, 586, 0, 595,
	596, 598, 600, 805, 602, 772, 613, 481, 482, 614,
	592, 0, 722, 0, 371, 0, 496, 529, 518, 601,
	484, 0, 0, 0, 0, 0, 0, 725, 0, 0,
	0, 311, 0, 0, 341, 533, 515, 525, 516, 501,
	502, 503, 510, 321, 504, 505, 506, 476, 507, 477,
	508, 509, 763, 532, 483, 402, 355, 550, 549, 0,
	0, 830, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 717, 0, 0, 753, 807, 806, 740,
	750, 0, 0, 284, 206, 478, 597, 480, 479, 741,
	0, 742, 746, 749, 745, 743, 744, 0, 822, 0,
	0, 0, 0, 0, 0, 709, 721, 0, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 718, 719, 1488, 0, 0, 0, 773, 0,
	720, 0, 0, 768, 747, 751, 0, 0, 0, 0,
	274, 407, 424, 285, 398, 437, 290, 405, 280, 370,
	394, 0, 0, 276, 422, 404, 352, 331, 332, 275,
	0, 389, 309, 323, 306, 368, 748, 771, 775, 305,
	844, 769, 432, 278, 0, 431, 367, 418, 423, 353,
	347, 277, 420, 351, 346, 335, 313, 845, 336, 337,
	327, 379, 345, 380, 328, 357, 356, 358, 0, 0,
	0, 0, 0, 460, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 766, 0,
	594, 0, 434, 0, 0, 828, 0, 0, 0, 406,
	0, 0, 338, 0, 0, 0, 770, 0, 392, 373,
	841, 0, 0, 390, 343, 419, 381, 425, 408, 433,
	386, 382, 269, 409, 308, 354, 281, 283, 303, 310,
	312, 314, 315, 363, 364, 376, 397, 410, 411, 412,
	307, 291, 391, 292, 325, 293, 270, 299, 297, 300,
	399, 301, 272, 377, 416, 0, 320, 387, 350, 273,
	349, 378, 415, 414, 282, 441, 447, 448, 537, 0,
	453, 617, 618, 619, 462, 467, 468, 469, 471, 472,
	473, 474, 538, 555, 522, 492, 455, 546, 489, 493,
	494, 558, 0, 0, 0, 446, 339, 340, 0, 318,
	266, 267, 612, 826, 369, 560, 593, 485, 0, 840,
	821, 823, 824, 827, 831, 832, 833, 834, 835, 837,
	839, 843, 611, 0, 539, 554, 615, 553, 608, 375,
	0, 396, 551, 498, 0, 543, 517, 0, 544, 513,
	548, 0, 487, 0, 403, 427, 439, 456, 459, 488,
	573, 574, 575, 271, 458, 577, 578, 579, 580, 581,
	582, 583, 576, 842, 520, 497, 523, 438, 500, 499,
	0, 0, 534, 774, 535, 536, 359, 360, 361, 362,
	829, 561, 289, 457, 385, 0, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 527, 524, 620, 0,
	584, 585, 0, 0, 451, 452, 317, 324, 470, 326,
	288, 374, 319, 436, 333, 0, 463, 528, 464, 587,
	590, 588, 589, 366, 329, 330, 400, 334, 344, 388,
	435, 372, 393, 286, 426, 401, 348, 514, 541, 851,
	825, 850, 852, 853, 849, 854, 855, 836, 730, 0,
	781, 847, 846, 848, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 568, 567, 566, 565,
	564, 563, 562, 0, 0, 511, 413, 298, 260, 294,
	295, 302, 609, 606, 417, 610, 0, 268, 491, 342,
	0, 383, 316, 556, 557, 0, 0, 814, 788, 789,
	790, 727, 791, 785, 786, 728, 787, 815, 779, 811,
	812, 755, 782, 792, 810, 793, 813, 816, 817, 856,
	857, 799, 783, 232, 858, 796, 818, 809, 808, 794,
	780, 819, 820, 762, 757, 797, 798, 784, 802, 803,
	804, 729, 776, 777, 778, 800, 801, 758, 759, 760,
	761, 0, 0, 0, 442, 443, 444, 466, 0, 428,
	490, 607, 0, 0, 0, 0, 0, 0, 0, 540,
	552, 586, 0, 595, 596, 598, 600, 805, 602, 0,
	613, 481, 482, 614, 592, 772, 722, 0, 2134, 0,
	0, 0, 0, 0, 371, 0, 496, 529, 518, 601,
	484, 0, 0, 0, 0, 0, 0, 725, 0, 0,
	0, 311, 0, 0, 341, 533, 515, 525, 516, 501,
	502, 503, 510, 321, 504, 505, 506, 476, 507, 477,
	508, 509, 763, 532, 483, 402, 355, 550, 549, 0,
	0, 830, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 717, 0, 0, 753, 807, 806, 740,
	750, 0, 0, 284, 206, 478, 597, 480, 479, 741,
	0, 742, 746, 749, 745, 743, 744, 0, 822, 0,
	0, 0, 0, 0, 0, 709, 721, 0, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 718, 719, 0, 0, 0, 0, 773, 0,
	720, 0, 0, 768, 747, 751, 0, 0, 0, 0,
	274, 407, 424, 285, 398, 437, 290, 405, 280, 370,
	394, 0, 0, 276, 422, 404, 352, 331, 332, 275,
	0, 389, 309, 323, 306, 368, 748, 771, 775, 305,
	844, 769, 432, 278, 0, 431, 367, 418, 423, 353,
	347, 277, 420, 351, 346, 335, 313, 845, 336, 337,
	327, 379, 345, 380, 328, 357, 356, 358, 0, 0,
	0, 0, 0, 460, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 766, 0,
	594, 0, 434, 0, 0, 828, 0, 0, 0, 406,
	0, 0, 338, 0, 0, 0, 770, 0, 392, 373,
	841, 0, 0, 390, 343, 419, 381, 425, 408, 433,
	386, 382, 269, 409, 308, 354, 281, 283, 303, 310,
	312, 314, 315, 363, 364, 376, 397, 410, 411, 412,
	307, 291, 391, 292, 325, 293, 270, 299, 297, 300,
	399, 301, 272, 377, 416, 0, 320, 387, 350, 273,
	349, 378, 415, 414, 282, 441, 447, 448, 537, 0,
	453, 617, 618, 619, 462, 467, 468, 469, 471, 472,
	473, 474, 538, 555, 522, 492, 455, 546, 489, 493,
	494, 558, 0, 0, 0, 446, 339, 340, 0, 318,
	266, 267, 612, 826, 369, 560, 593, 485, 0, 840,
	821, 823, 824, 827, 831, 832, 833, 834, 835, 837,
	839, 843, 611, 0, 539, 554, 615, 553, 608, 375,
	0, 396, 551, 498, 0, 543, 517, 0, 544, 513,
	548, 0, 487, 0, 403, 427, 439, 456, 459, 488,
	573, 574, 575, 271, 458, 577, 578, 579, 580, 581,
	582, 583, 576, 842, 520, 497, 523, 438, 500, 499,
	0, 0, 534, 774, 535, 536, 359, 360, 361, 362,
	829, 561, 289, 457, 385, 0, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 527, 524, 620, 0,
	584, 585, 0, 0, 451, 452, 317, 324, 470, 326,
	288, 374, 319, 436, 333, 0, 463, 528, 464, 587,
	590, 588, 589, 366, 329, 330, 400, 334, 344, 388,
	435, 372, 393, 286, 426, 401, 348, 514, 541, 851,
	825, 850, 852, 853, 849, 854, 855, 836, 730, 0,
	781, 847, 846, 848, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 568, 567, 566, 565,
	564, 563, 562, 0, 0, 511, 413, 298, 260, 294,
	295, 302, 609, 606, 417, 610, 0, 268, 491, 342,
	0, 383, 316, 556, 557, 0, 0, 814, 788, 789,
	790, 727, 791, 785, 786, 728, 787, 815, 779, 811,
	812, 755, 782, 792, 810, 793, 813, 816, 817, 856,
	857, 799, 783, 232, 858, 796, 818, 809, 808, 794,
	780, 819, 820, 762, 757, 797, 798, 784, 802, 803,
	804, 729, 776, 777, 778, 800, 801, 758, 759, 760,
	761, 0, 0, 0, 442, 443, 444, 466, 0, 428,
	490, 607, 0, 0, 0, 0, 0, 0, 0, 540,
	552, 586, 0, 595, 596, 598, 600, 805, 602, 772,
	613, 481, 482, 614, 592, 0, 722, 0, 371, 0,
	496, 529, 518, 601, 484, 0, 0, 0, 0, 0,
	0, 725, 0, 0, 0, 311, 0, 0, 341, 533,
	515, 525, 516, 501, 502, 503, 510, 321, 504, 505,
	506, 476, 507, 477, 508, 509, 763, 532, 483, 402,
	355, 550, 549, 0, 0, 830, 838, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	753, 807, 806, 740, 750, 0, 0, 284, 206, 478,
	597, 480, 479, 741, 0, 742, 746, 749, 745, 743,
	744, 0, 822, 0, 0, 0, 0, 0, 0, 709,
	721, 0, 726, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 718, 719, 1759, 0,
	0, 0, 773, 0, 720, 0, 0, 768, 747, 751,
	0, 0, 0, 0, 274, 407, 424, 285, 398, 437,
	290, 405, 280, 370, 394, 0, 0, 276, 422, 404,
	352, 331, 332, 275, 0, 389, 309, 323, 306, 368,
	748, 771, 775, 305, 844, 769, 432, 278, 0, 431,
	367, 418, 423, 353, 347, 277, 420, 351, 346, 335,
	313, 845, 336, 337, 327, 379, 345, 380, 328, 357,
	356, 358, 0, 0, 0, 0, 0, 460, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 591, 766, 0, 594, 0, 434, 0, 0, 828,
	0, 0, 0, 406, 0, 0, 338, 0, 0, 0,
	770, 0, 392, 373, 841, 0, 0, 390, 343, 419,
	381, 425, 408, 433, 386, 382, 269, 409, 308, 354,
	281, 283, 303, 310, 312, 314, 315, 363, 364, 376,
	397, 410, 411, 412, 307, 291, 391, 292, 325, 293,
	270, 299, 297, 300, 399, 301, 272, 377, 416, 0,
	320, 387, 350, 273, 349, 378, 415, 414, 282, 441,
	447, 448, 537, 0, 453, 617, 618, 619, 462, 467,
	468, 469, 471, 472, 473, 474, 538, 555, 522, 492,
	455, 546, 489, 493, 494, 558, 0, 0, 0, 446,
	339, 340, 0, 318, 266, 267, 612, 826, 369, 560,
	593, 485, 0, 840, 821, 823, 824, 827, 831, 832,
	833, 834, 835, 837, 839, 843, 611, 0, 539, 554,
	615, 553, 608, 375, 0, 396, 551, 498, 0, 543,
	517, 0, 544, 513, 548, 0, 487, 0, 403, 427,
	439, 456, 459, 488, 573, 574, 575, 271, 458, 577,
	578, 579, 580, 581, 582, 583, 576, 842, 520, 497,
	523, 438, 500, 499, 0, 0, 534, 774, 535, 536,
	359, 360, 361, 362, 829, 561, 289, 457, 385, 0,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 526,
	527, 524, 620, 0, 584, 585, 0, 0, 451, 452,
	317, 324, 470, 326, 288, 374, 319, 436, 333, 0,
	463, 528, 464, 587, 590, 588, 589, 366, 329, 330,
	400, 334, 344, 388, 435, 372, 393, 286, 426, 401,
	348, 514, 541, 851, 825, 850, 852, 853, 849, 854,
	855, 836, 730, 0, 781, 847, 846, 848, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	568, 567, 566, 565, 564, 563, 562, 0, 0, 511,
	413, 298, 260, 294, 295, 302, 609, 606, 417, 610,
	0, 268, 491, 342, 0, 383, 316, 556, 557, 0,
	0, 814, 788, 789, 790, 727, 791, 785, 786, 728,
	787, 815, 779, 811, 812, 755, 782, 792, 810, 793,
	813, 816, 817, 856, 857, 799, 783, 232, 858, 796,
	818, 809, 808, 794, 780, 819, 820, 762, 757, 797,
	798, 784, 802, 803, 804, 729, 776, 777, 778, 800,
	801, 758, 759, 760, 761, 0, 0, 0, 442, 443,
	444, 466, 0, 428, 490, 607, 0, 0, 0, 0,
	0, 0, 0, 540, 552, 586, 0, 595, 596, 598,
	600, 805, 602, 772, 613, 481, 482, 614, 592, 0,
	722, 0, 371, 0, 496, 529, 518, 601, 484, 0,
	0, 0, 0, 0, 0, 725, 0, 0, 0, 311,
	0, 0, 341, 533, 515, 525, 516, 501, 502, 503,
	510, 321, 504, 505, 506, 476, 507, 477, 508, 509,
	763, 532, 483, 402, 355, 550, 549, 0, 0, 830,
	838, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 717, 0, 0, 753, 807, 806, 740, 750, 0,
	0, 284, 206, 478, 597, 480, 479, 741, 0, 742,
	746, 749, 745, 743, 744, 0, 822, 0, 0, 0,
	0, 0, 0, 709, 721, 0, 726, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	718, 719, 0, 0, 0, 0, 773, 0, 720, 0,
	0, 768, 747, 751, 0, 0, 0, 0, 274, 407,
	424, 285, 398, 437, 290, 405, 280, 370, 394, 0,
	0, 276, 422, 404, 352, 331, 332, 275, 0, 389,
	309, 323, 306, 368, 748, 771, 775, 305, 844, 769,
	432, 278, 0, 431, 367, 418, 423, 353, 347, 277,
	420, 351, 346, 335, 313, 845, 336, 337, 327, 379,
	345, 380, 328, 357, 356, 358, 0, 0, 0, 0,
	0, 460, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 766, 0, 594, 0,
	434, 0, 0, 828, 0, 0, 0, 406, 0, 0,
	338, 0, 0, 0, 770, 0, 392, 373, 841, 0,
	0, 390, 343, 419, 381, 425, 408, 433, 386, 382,
	269, 409, 308, 354, 281, 283, 303, 310, 312, 314,
	315, 363, 364, 376, 397, 410, 411, 412, 307, 291,
	391, 292, 325, 293, 270, 299, 297, 300, 399, 301,
	272, 377, 416, 0, 320, 387, 350, 273, 349, 378,
	415, 414, 282, 441, 447, 448, 537, 0, 453, 617,
	618, 619, 462, 467, 468, 469, 471, 472, 473, 474,
	538, 555, 522, 492, 455, 546, 489, 493, 494, 558,
	0, 0, 0, 446, 339, 340, 0, 318, 266, 267,
	612, 826, 369, 560, 593, 485, 0, 840, 821, 823,
	824, 827, 831, 832, 833, 834, 835, 837, 839, 843,
	611, 0, 539, 554, 615, 553, 608, 375, 0, 396,
	551, 498, 0, 543, 517, 0, 544, 513, 548, 0,
	487, 0, 403, 427, 439, 456, 459, 488, 573, 574,
	575, 271, 458, 577, 578, 579, 580, 581, 582, 583,
	576, 842, 520, 497, 523, 438, 500, 499, 0, 0,
	534, 774, 535, 536, 359, 360, 361, 362, 829, 561,
	289, 457, 385, 0, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 526, 527, 524, 620, 0, 584, 585,
	0, 0, 451, 452, 317, 324, 470, 326, 288, 374,
	319, 436, 333, 0, 463, 528, 464, 587, 590, 588,
	589, 366, 329, 330, 400, 334, 344, 388, 435, 372,
	393, 286, 426, 401, 348, 514, 541, 851, 825, 850,
	852, 853, 849, 854, 855, 836, 730, 0, 781, 847,
	846, 848, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 569, 568, 567, 566, 565, 564, 563,
	562, 0, 0, 511, 413, 298, 260, 294, 295, 302,
	609, 606, 417, 610, 0, 268, 491, 342, 0, 383,
	316, 556, 557, 0, 0, 814, 788, 789, 790, 727,
	791, 785, 786, 728, 787, 815, 779, 811, 812, 755,
	782, 792, 810, 793, 813, 816, 817, 856, 857, 799,
	783, 232, 858, 796, 818, 809, 808, 794, 780, 819,
	820, 762, 757, 797, 798, 784, 802, 803, 804, 729,
	776, 777, 778, 800, 801, 758, 759, 760, 761, 0,
	0, 0, 442, 443, 444, 466, 0, 428, 490, 607,
	0, 0, 0, 0, 0, 0, 0, 540, 552, 586,
	0, 595, 596, 598, 600, 805, 602, 772, 613, 481,
	482, 614, 592, 0, 722, 0, 371, 0, 496, 529,
	518, 601, 484, 0, 0, 0, 0, 0, 0, 725,
	0, 0, 0, 311, 0, 0, 341, 533, 515, 525,
	516, 501, 502, 503, 510, 321, 504, 505, 506, 476,
	507, 477, 508, 509, 763, 532, 483, 402, 355, 550,
	549, 0, 0, 830, 838, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 717, 0, 0, 753, 807,
	806, 740, 750, 0, 0, 284, 206, 478, 597, 480,
	479, 2584, 0, 2585, 746, 749, 745, 743, 744, 0,
	822, 0, 0, 0, 0, 0, 0, 709, 721, 0,
	726, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 718, 719, 0, 0, 0, 0,
	773, 0, 720, 0, 0, 768, 747, 751, 0, 0,
	0, 0, 274, 407, 424, 285, 398, 437, 290, 405,
	280, 370, 394, 0, 0, 276, 422, 404, 352, 331,
	332, 275, 0, 389, 309, 323, 306, 368, 748, 771,
	775, 305, 844, 769, 432, 278, 0, 431, 367, 418,
	423, 353, 347, 277, 420, 351, 346, 335, 313, 845,
	336, 337, 327, 379, 345, 380, 328, 357, 356, 358,
	0, 0, 0, 0, 0, 460, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	766, 0, 594, 0, 434, 0, 0, 828, 0, 0,
	0, 406, 0, 0, 338, 0, 0, 0, 770, 0,
	392, 373, 841, 0, 0, 390, 343, 419, 381, 425,
	408, 433, 386, 382, 269, 409, 308, 354, 281, 283,
	303, 310, 312, 314, 315, 363, 364, 376, 397, 410,
	411, 412, 307, 291, 391, 292, 325, 293, 270, 299,
	297, 300, 399, 301, 272, 377, 416, 0, 320, 387,
	350, 273, 349, 378, 415, 414, 282, 441, 447, 448,
	537, 0, 453, 617, 618, 619, 462, 467, 468, 469,
	471, 472, 473, 474, 538, 555, 522, 492, 455, 546,
	489, 493, 494, 558, 0, 0, 0, 446, 339, 340,
	0, 318, 266, 267, 612, 826, 369, 560, 593, 485,
	0, 840, 821, 823, 824, 827, 831, 832, 833, 834,
	835, 837, 839, 843, 611, 0, 539, 554, 615, 553,
	608, 375, 0, 396, 551, 498, 0, 543, 517, 0,
	544, 513, 548, 0, 487, 0, 403, 427, 439, 456,
	459, 488, 573, 574, 575, 271, 458, 577, 578, 579,
	580, 581, 582, 583, 576, 842, 520, 497, 523, 438,
	500, 499, 0, 0, 534, 774, 535, 536, 359, 360,
	361, 362, 829, 561, 289, 457, 385, 0, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 526, 527, 524,
	620, 0, 584, 585, 0, 0, 451, 452, 317, 324,
	470, 326, 288, 374, 319, 436, 333, 0, 463, 528,
	464, 587, 590, 588, 589, 366, 329, 330, 400, 334,
	344, 388, 435, 372, 393, 286, 426, 401, 348, 514,
	541, 851, 825, 850, 852, 853, 849, 854, 855, 836,
	730, 0, 781, 847, 846, 848, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 568, 567,
	566, 565, 564, 563, 562, 0, 0, 511, 413, 298,
	260, 294, 295, 302, 609, 606, 417, 610, 0, 268,
	491, 342, 0, 383, 316, 556, 557, 0, 0, 814,
	788, 789, 790, 727, 791, 785, 786, 728, 787, 815,
	779, 811, 812, 755, 782, 792, 810, 793, 813, 816,
	817, 856, 857, 799, 783, 232, 858, 796, 818, 809,
	808, 794, 780, 819, 820, 762, 757, 797, 798, 784,
	802, 803, 804, 729, 776, 777, 778, 800, 801, 758,
	759, 760, 761, 0, 0, 0, 442, 443, 444, 466,
	0, 428, 490, 607, 0, 0, 0, 0, 0, 0,
	0, 540, 552, 586, 0, 595, 596, 598, 600, 805,
	602, 772, 613, 481, 482, 614, 592, 0, 722, 0,
	371, 0, 496, 529, 518, 601, 484, 0, 0, 1629,
	0, 0, 0, 725, 0, 0, 0, 311, 0, 0,
	341, 533, 515, 525, 516, 501, 502, 503, 510, 321,
	504, 505, 506, 476, 507, 477, 508, 509, 763, 532,
	483, 402, 355, 550, 549, 0, 0, 830, 838, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 717,
	0, 0, 753, 807, 806, 740, 750, 0, 0, 284,
	206, 478, 597, 480, 479, 741, 0, 742, 746, 749,
	745, 743, 744, 0, 822, 0, 0, 0, 0, 0,
	0, 0, 721, 0, 726, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 718, 719,
	0, 0, 0, 0, 773, 0, 720, 0, 0, 768,
	747, 751, 0, 0, 0, 0, 274, 407, 424, 285,
	398, 437, 290, 405, 280, 370, 394, 0, 0, 276,
	422, 404, 352, 331, 332, 275, 0, 389, 309, 323,
	306, 368, 748, 771, 775, 305, 844, 769, 432, 278,
	0, 431, 367, 418, 423, 353, 347, 277, 420, 351,
	346, 335, 313, 845, 336, 337, 327, 379, 345, 380,
	328, 357, 356, 358, 0, 0, 0, 0, 0, 460,
	461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 766, 0, 594, 0, 434, 0,
	0, 828, 0, 0, 0, 406, 0, 0, 338, 0,
	0, 0, 770, 0, 392, 373, 841, 0, 0, 390,
	343, 419, 381, 425, 408, 433, 386, 382, 269, 409,
	308, 354, 281, 283, 303, 310, 312, 314, 315, 363,
	364, 376, 397, 410, 411, 412, 307, 291, 391, 292,
	325, 293, 270, 299, 297, 300, 399, 301, 272, 377,
	416, 0, 320, 387, 350, 273, 349, 378, 415, 414,
	282, 441, 1630, 1631, 537, 0, 453, 617, 618, 619,
	462, 467, 468, 469, 471, 472, 473, 474, 538, 555,
	522, 492, 455, 546, 489, 493, 494, 558, 0, 0,
	0, 446, 339, 340, 0, 318, 266, 267, 612, 826,
	369, 560, 593, 485, 0, 840, 821, 823, 824, 827,
	831, 832, 833, 834, 835, 837, 839, 843, 611, 0,
	539, 554, 615, 553, 608, 375, 0, 396, 551, 498,
	0, 543, 517, 0, 544, 513, 548, 0, 487, 0,
	403, 427, 439, 456, 459, 488, 573, 574, 575, 271,
	458, 577, 578, 579, 580, 581, 582, 583, 576, 842,
	520, 497, 523, 438, 500, 499, 0, 0, 534, 774,
	535, 536, 359, 360, 361, 362, 829, 561, 289, 457,
	385, 0, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 526, 527, 524, 620, 0, 584, 585, 0, 0,
	451, 452, 317, 324, 470, 326, 288, 374, 319, 436,
	333, 0, 463, 528, 464, 587, 590, 588, 589, 366,
	329, 330, 400, 334, 344, 388, 435, 372, 393, 286,
	426, 401, 348, 514, 541, 851, 825, 850, 852, 853,
	849, 854, 855, 836, 730, 0, 781, 847, 846, 848,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 568, 567, 566, 565, 564, 563, 562, 0,
	0, 511, 413, 298, 260, 294, 295, 302, 609, 606,
	417, 610, 0, 268, 491, 342, 0, 383, 316, 556,
	557, 0, 0, 814, 788, 789, 790, 727, 791, 785,
	786, 728, 787, 815, 779, 811, 812, 755, 782, 792,
	810, 793, 813, 816, 817, 856, 857, 799, 783, 232,
	858, 796, 818, 809, 808, 794, 780, 819, 820, 762,
	757, 797, 798, 784, 802, 803, 804, 729, 776, 777,
	778, 800, 801, 758, 759, 760, 761, 0, 0, 0,
	442, 443, 444, 466, 0, 428, 490, 607, 0, 0,
	0, 0, 0, 0, 0, 540, 552, 586, 0, 595,
	596, 598, 600, 805, 602, 772, 613, 481, 482, 614,
	592, 0, 722, 0, 371, 0, 496, 529, 518, 601,
	484, 0, 0, 0, 0, 0, 0, 725, 0, 0,
	0, 311, 0, 0, 341, 533, 515, 525, 516, 501,
	502, 503, 510, 321, 504, 505, 506, 476, 507, 477,
	508, 509, 763, 532, 483, 402, 355, 550, 549, 0,
	0, 830, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 717, 0, 0, 753, 807, 806, 740,
	750, 0, 0, 284, 206, 478, 597, 480, 479, 741,
	0, 742, 746, 749, 745, 743, 744, 0, 822, 0,
	0, 0, 0, 0, 0, 0, 721, 0, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 718, 719, 0, 0, 0, 0, 773, 0,
	720, 0, 0, 768, 747, 751, 0, 0, 0, 0,
	274, 407, 424, 285, 398, 437, 290, 405, 280, 370,
	394, 0, 0, 276, 422, 404, 352, 331, 332, 275,
	0, 389, 309, 323, 306, 368, 748, 771, 775, 305,
	844, 769, 432, 278, 0, 431, 367, 418, 423, 353,
	347, 277, 420, 351, 346, 335, 313, 845, 336, 337,
	327, 379, 345, 380, 328, 357, 356, 358, 0, 0,
	0, 0, 0, 460, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 766, 0,
	594, 0, 434, 0, 0, 828, 0, 0, 0, 406,
	0, 0, 338, 0, 0, 0, 770, 0, 392, 373,
	841, 0, 0, 390, 343, 419, 381, 425, 408, 433,
	386, 382, 269, 409, 308, 354, 281, 283, 303, 310,
	312, 314, 315, 363, 364, 376, 397, 410, 411, 412,
	307, 291, 391, 292, 325, 293, 270, 299, 297, 300,
	399, 301, 272, 377, 416, 0, 320, 387, 350, 273,
	349, 378, 415, 414, 282, 441, 447, 448, 537, 0,
	453, 617, 618, 619, 462, 467, 468, 469, 471, 472,
	473, 474, 538, 555, 522, 492, 455, 546, 489, 493,
	494, 558, 0, 0, 0, 446, 339, 340, 0, 318,
	266, 267, 612, 826, 369, 560, 593, 485, 0, 840,
	821, 823, 824, 827, 831, 832, 833, 834, 835, 837,
	839, 843, 611, 0, 539, 554, 615, 553, 608, 375,
	0, 396, 551, 498, 0, 543, 517, 0, 544, 513,
	548, 0, 487, 0, 403, 427, 439, 456, 459, 488,
	573, 574, 575, 271, 458, 577, 578, 579, 580, 581,
	582, 583, 576, 842, 520, 497, 523, 438, 500, 499,
	0, 0, 534, 774, 535, 536, 359, 360, 361, 362,
	829, 561, 289, 457, 385, 0, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 527, 524, 620, 0,
	584, 585, 0, 0, 451, 452, 317, 324, 470, 326,
	288, 374, 319, 436, 333, 0, 463, 528, 464, 587,
	590, 588, 589, 366, 329, 330, 400, 334, 344, 388,
	435, 372, 393, 286, 426, 401, 348, 514, 541, 851,
	825, 850, 852, 853, 849, 854, 855, 836, 730, 0,
	781, 847, 846, 848, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 568, 567, 566, 565,
	564, 563, 562, 0, 0, 511, 413, 298, 260, 294,
	295, 302, 609, 606, 417, 610, 0, 268, 491, 342,
	0, 383, 316, 556, 557, 0, 0, 814, 788, 789,
	790, 727, 791, 785, 786, 728, 787, 815, 779, 811,
	812, 755, 782, 792, 810, 793, 813, 816, 817, 856,
	857, 799, 783, 232, 858, 796, 818, 809, 808, 794,
	780, 819, 820, 762, 757, 797, 798, 784, 802, 803,
	804, 729, 776, 777, 778, 800, 801, 758, 759, 760,
	761, 0, 0, 0, 442, 443, 444, 466, 0, 428,
	490, 607, 0, 0, 0, 0, 0, 0, 0, 540,
	552, 586, 0, 595, 596, 598, 600, 805, 602, 772,
	613, 481, 482, 614, 592, 0, 722, 0, 371, 0,
	496, 529, 518, 601, 484, 0, 0, 0, 0, 0,
	0, 725, 0, 0, 0, 311, 0, 0, 341, 533,
	515, 525, 516, 501, 502, 503, 510, 321, 504, 505,
	506, 476, 507, 477, 508, 509, 763, 532, 483, 402,
	355, 550, 549, 0, 0, 830, 838, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	753, 807, 806, 740, 750, 0, 0, 284, 206, 478,
	597, 480, 479, 741, 0, 742, 746, 749, 745, 743,
	744, 0, 822, 0, 0, 0, 0, 0, 0, 709,
	721, 0, 726, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 718, 719, 0, 0,
	0, 0, 773, 0, 720, 0, 0, 768, 747, 751,
	0, 0, 0, 0, 274, 407, 424, 285, 398, 437,
	290, 405, 280, 370, 394, 0, 0, 276, 422, 404,
	352, 331, 332, 275, 0, 389, 309, 323, 306, 368,
	748, 771, 775, 305, 844, 769, 432, 278, 0, 431,
	367, 418, 423, 353, 347, 277, 420, 351, 346, 335,
	313, 845, 336, 337, 327, 379, 345, 380, 328, 357,
	356, 358, 0, 0, 0, 0, 0, 460, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 591, 766, 0, 594, 0, 434, 0, 0, 828,
	0, 0, 0, 406, 0, 0, 338, 0, 0, 0,
	770, 0, 392, 373, 841, 0, 0, 390, 343, 419,
	381, 425, 408, 433, 386, 382, 269, 409, 308, 354,
	281, 283, 303, 310, 312, 314, 315, 363, 364, 376,
	397, 410, 411, 412, 307, 291, 391, 292, 325, 293,
	270, 299, 297, 300, 399, 301, 272, 377, 416, 0,
	320, 387, 350, 273, 349, 378, 415, 414, 282, 441,
	447, 448, 537, 0, 453, 617, 618, 619, 462, 467,
	468, 469, 471, 472, 473, 474, 538, 555, 522, 492,
	455, 546, 489, 493, 494, 558, 0, 0, 0, 446,
	339, 340, 0, 318, 266, 267, 612, 826, 369, 560,
	593, 485, 0, 840, 821, 823, 824, 827, 831, 832,
	833, 834, 835, 837, 839, 843, 611, 0, 539, 554,
	615, 553, 608, 375, 0, 396, 551, 498, 0, 543,
	517, 0, 544, 513, 548, 0, 487, 0, 403, 427,
	439, 456, 459, 488, 573, 574, 575, 271, 458, 577,
	578, 579, 580, 581, 582, 583, 576, 842, 520, 497,
	523, 438, 500, 499, 0, 0, 534, 774, 535, 536,
	359, 360, 361, 362, 829, 561, 289, 457, 385, 0,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 526,
	527, 524, 620, 0, 584, 585, 0, 0, 451, 452,
	317, 324, 470, 326, 288, 374, 319, 436, 333, 0,
	463, 528, 464, 587, 590, 588, 589, 366, 329, 330,
	400, 334, 344, 388, 435, 372, 393, 286, 426, 401,
	348, 514, 541, 851, 825, 850, 852, 853, 849, 854,
	855, 836, 730, 0, 781, 847, 846, 848, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	568, 567, 566, 565, 564, 563, 562, 0, 0, 511,
	413, 298, 260, 294, 295, 302, 609, 606, 417, 610,
	0, 268, 491, 342, 0, 383, 316, 556, 557, 0,
	0, 814, 788, 789, 790, 727, 791, 785, 786, 728,
	787, 815, 779, 811, 812, 755, 782, 792, 810, 793,
	813, 816, 817, 856, 857, 799, 783, 232, 858, 796,
	818, 809, 808, 794, 780, 819, 820, 762, 757, 797,
	798, 784, 802, 803, 804, 729, 776, 777, 778, 800,
	801, 758, 759, 760, 761, 0, 0, 0, 442, 443,
	444, 466, 0, 428, 490, 607, 0, 0, 0, 0,
	0, 0, 0, 540, 552, 586, 0, 595, 596, 598,
	600, 805, 602, 0, 613, 481, 482, 614, 592, 0,
	722, 183, 55, 172, 145, 0, 0, 0, 0, 0,
	0, 371, 0, 496, 529, 518, 601, 484, 0, 173,
	0, 0, 0, 0, 0, 0, 164, 0, 311, 0,
	174, 341, 533, 515, 525, 516, 501, 502, 503, 510,
	321, 504, 505, 506, 476, 507, 477, 508, 509, 121,
	532, 483, 402, 355, 550, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	177, 0, 0, 205, 0, 0, 0, 0, 0, 0,
	284, 206, 478, 597, 480, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 407, 424,
	285, 398, 437, 290, 405, 280, 370, 394, 0, 0,
	276, 422, 404, 352, 331, 332, 275, 0, 389, 309,
	323, 306, 368, 0, 421, 449, 305, 440, 0, 432,
	278, 0, 431, 367, 418, 423, 353, 347, 277, 420,
	351, 346, 335, 313, 465, 336, 337, 327, 379, 345,
	380, 328, 357, 356, 358, 0, 0, 0, 0, 0,
	460, 461, 0, 0, 0, 0, 0, 0, 144, 170,
	181, 171, 107, 0, 591, 0, 0, 594, 0, 434,
	0, 0, 198, 0, 0, 0, 406, 0, 0, 338,
	169, 163, 162, 450, 0, 392, 373, 210, 0, 0,
	390, 343, 419, 381, 425, 408, 433, 386, 382, 269,
	409, 308, 354, 281, 283, 303, 310, 312, 314, 315,
	363, 364, 376, 397, 410, 411, 412, 307, 291, 391,
	292, 325, 293, 270, 299, 297, 300, 399, 301, 272,
	377, 416, 0, 320, 387, 350, 273, 349, 378, 415,
	414, 282, 441, 447, 448, 537, 0, 453, 570, 571,
	572, 462, 467, 468, 469, 471, 472, 473, 474, 538,
	555, 522, 492, 455, 546, 489, 493, 494, 558, 0,
	0, 0, 446, 339, 340, 0, 318, 266, 267, 429,
	304, 369, 560, 593, 485, 0, 547, 486, 495, 296,
	519, 531, 530, 365, 445, 201, 542, 545, 475, 211,
	0, 539, 554, 512, 553, 212, 375, 0, 396, 551,
	498, 0, 543, 517, 0, 544, 513, 548, 0, 487,
	0, 403, 427, 439, 456, 459, 488, 573, 574, 575,
	271, 458, 577, 578, 579, 580, 581, 582, 583, 576,
	430, 520, 497, 523, 438, 500, 499, 0, 0, 534,
	454, 535, 536, 359, 360, 361, 362, 322, 561, 289,
	457, 385, 119, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 526, 527, 524, 209, 0, 584, 585, 0,
	0, 451, 452, 317, 324, 470, 326, 288, 374, 319,
	436, 333, 0, 463, 528, 464, 587, 590, 588, 589,
	366, 329, 330, 400, 334, 344, 388, 435, 372, 393,
	286, 426, 401, 348, 514, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 568, 567, 566, 565, 564, 563, 562,
	0, 0, 511, 413, 298, 260, 294, 295, 302, 384,
	279, 417, 395, 0, 268, 491, 342, 146, 383, 316,
	556, 557, 52, 0, 216, 217, 218, 219, 220, 221,
	222, 223, 261, 224, 225, 226, 227, 228, 229, 230,
	233, 234, 235, 236, 237, 238, 239, 240, 559, 231,
	232, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 0, 0, 0, 262, 263,
	264, 265, 0, 0, 256, 257, 258, 259, 0, 0,
	0, 442, 443, 444, 466, 0, 428, 490, 213, 41,
	199, 202, 204, 203, 0, 53, 540, 552, 586, 5,
	595, 596, 598, 600, 599, 602, 124, 214, 481, 482,
	215, 592, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 371, 0, 496, 529, 518, 601, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 311,
	0, 0, 341, 533, 515, 525, 516, 501, 502, 503,
	510, 321, 504, 505, 506, 476, 507, 477, 508, 509,
	121, 532, 483, 402, 355, 550, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 284, 206, 478, 597, 480, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 2276, 2279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 407,
	424, 285, 398, 437, 290, 405, 280, 370, 394, 0,
	0, 276, 422, 404, 352, 331, 332, 275, 0, 389,
	309, 323, 306, 368, 0, 421, 449, 305, 440, 0,
	432, 278, 0, 431, 367, 418, 423, 353, 347, 277,
	420, 351, 346, 335, 313, 465, 336, 337, 327, 379,
	345, 380, 328, 357, 356, 358, 0, 0, 0, 0,
	0, 460, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 0, 0, 594, 2280,
	434, 0, 0, 0, 2275, 0, 2274, 406, 2272, 2277,
	338, 0, 0, 0, 450, 0, 392, 373, 616, 0,
	0, 390, 343, 419, 381, 425, 408, 433, 386, 382,
	269, 409, 308, 354, 281, 283, 303, 310, 312, 314,
	315, 363, 364, 376, 397, 410, 411, 412, 307, 291,
	391, 292, 325, 293, 270, 299, 297, 300, 399, 301,
	272, 377, 416, 2278, 320, 387, 350, 273, 349, 378,
	415, 414, 282, 441, 447, 448, 537, 0, 453, 617,
	618, 619, 462, 467, 468, 469, 471, 472, 473, 474,
	538, 555, 522, 492, 455, 546, 489, 493, 494, 558,
	0, 0, 0, 446, 339, 340, 0, 318, 266, 267,
	612, 304, 369, 560, 593, 485, 0, 547, 486, 495,
	296, 519, 531, 530, 365, 445, 0, 542, 545, 475,
	611, 0, 539, 554, 615, 553, 608, 375, 0, 396,
	551, 498, 0, 543, 517, 0, 544, 513, 548, 0,
	487, 0, 403, 427, 439, 456, 459, 488, 573, 574,
	575, 271, 458, 577, 578, 579, 580, 581, 582, 583,
	576, 430, 520, 497, 523, 438, 500, 499, 0, 0,
	534, 454, 535, 536, 359, 360, 361, 362, 322, 561,
	289, 457, 385, 0, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 526, 527, 524, 620, 0, 584, 585,
	0, 0, 451, 452, 317, 324, 470, 326, 288, 374,
	319, 436, 333, 0, 463, 528, 464, 587, 590, 588,
	589, 366, 329, 330, 400, 334, 344, 388, 435, 372,
	393, 286, 426, 401, 348, 514, 541, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 569, 568, 567, 566, 565, 564, 563,
	562, 0, 0, 511, 413, 298, 260, 294, 295, 302,
	609, 606, 417, 610, 0, 268, 491, 342, 146, 383,
	316, 556, 557, 0, 0, 216, 217, 218, 219, 220,
	221, 222, 223, 261, 224, 225, 226, 227, 228, 229,
	230, 233, 234, 235, 236, 237, 238, 239, 240, 559,
	231, 232, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 0, 0, 0, 262,
	263, 264, 265, 0, 0, 256, 257, 258, 259, 0,
	0, 0, 442, 443, 444, 466, 0, 428, 490, 607,
	0, 0, 0, 0, 0, 0, 0, 540, 552, 586,
	0, 595, 596, 598, 600, 599, 602, 0, 613, 481,
	482, 614, 592, 371, 0, 496, 529, 518, 601, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 341, 533, 515, 525, 516, 501, 502,
	503, 510, 321, 504, 505, 506, 476, 507, 477, 508,
	509, 0, 532, 483, 402, 355, 550, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1255, 0, 0, 205, 0, 0, 740, 750,
	0, 0, 284, 206, 478, 597, 480, 479, 741, 0,
	742, 746, 749, 745, 743, 744, 0, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 0, 274,
	407, 424, 285, 398, 437, 290, 405, 280, 370, 394,
	0, 0, 276, 422, 404, 352, 331, 332, 275, 0,
	389, 309, 323, 306, 368, 748, 421, 449, 305, 440,
	0, 432, 278, 0, 431, 367, 418, 423, 353, 347,
	277, 420, 351, 346, 335, 313, 465, 336, 337, 327,
	379, 345, 380, 328, 357, 356, 358, 0, 0, 0,
	0, 0, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 591, 0, 0, 594,
	0, 434, 0, 0, 0, 0, 0, 0, 406, 0,
	0, 338, 0, 0, 0, 450, 0, 392, 373, 616,
	0, 0, 390, 343, 419, 381, 425, 408, 433, 386,
	382, 269, 409, 308, 354, 281, 283, 303, 310, 312,
	314, 315, 363, 364, 376, 397, 410, 411, 412, 307,
	291, 391, 292, 325, 293, 270, 299, 297, 300, 399,
	301, 272, 377, 416, 0, 320, 387, 350, 273, 349,
	378, 415, 414, 282, 441, 447, 448, 537, 0, 453,
	617, 618, 619, 462, 467, 468, 469, 471, 472, 473,
	474, 538, 555, 522, 492, 455, 546, 489, 493, 494,
	558, 0, 0, 0, 446, 339, 340, 0, 318, 266,
	267, 612, 304, 369, 560, 593, 485, 0, 547, 486,
	495, 296, 519, 531, 530, 365, 445, 0, 542, 545,
	475, 611, 0, 539, 554, 615, 553, 608, 375, 0,
	396, 551, 498, 0, 543, 517, 0, 544, 513, 548,
	0, 487, 0, 403, 427, 439, 456, 459, 488, 573,
	574, 575, 271, 458, 577, 578, 579, 580, 581, 582,
	583, 576, 430, 520, 497, 523, 438, 500, 499, 0,
	0, 534, 454, 535, 536, 359, 360, 361, 362, 322,
	561, 289, 457, 385, 0, 521, 0, 0, 0, 0,
	0, 0, 0, 0, 526, 527, 524, 620, 0, 584,
	585, 0, 0, 451, 452, 317, 324, 470, 326, 288,
	374, 319, 436, 333, 0, 463, 528, 464, 587, 590,
	588, 589, 366, 329, 330, 400, 334, 344, 388, 435,
	372, 393, 286, 426, 401, 348, 514, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 568, 567, 566, 565, 564,
	563, 562, 0, 0, 511, 413, 298, 260, 294, 295,
	302, 609, 606, 417, 610, 0, 268, 491, 342, 0,
	383, 316, 556, 557, 0, 0, 216, 217, 218, 219,
	220, 221, 222, 223, 261, 224, 225, 226, 227, 228,
	229, 230, 233, 234, 235, 236, 237, 238, 239, 240,
	559, 231, 232, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 0, 0, 0,
	262, 263, 264, 265, 0, 0, 256, 257, 258, 259,
	0, 0, 0, 442, 443, 444, 466, 0, 428, 490,
	607, 0, 0, 0, 0, 0, 0, 0, 540, 552,
	586, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	481, 482, 614, 592, 183, 55, 172, 145, 0, 0,
	0, 0, 0, 0, 371, 639, 496, 529, 518, 601,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 0, 0, 341, 533, 515, 525, 516, 501,
	502, 503, 510, 321, 504, 505, 506, 476, 507, 477,
	508, 509, 0, 532, 483, 402, 355, 550, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 645, 0,
	0, 0, 0, 644, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 284, 206, 478, 597, 480, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 407, 424, 285, 398, 437, 290, 405, 280, 370,
	394, 0, 0, 276, 422, 404, 352, 331, 332, 275,
	0, 389, 309, 323, 306, 368, 0, 421, 449, 305,
	440, 0, 432, 278, 0, 431, 367, 418, 423, 353,
	347, 277, 420, 351, 346, 335, 313, 465, 336, 337,
	327, 379, 345, 380, 328, 357, 356, 358, 0, 0,
	0, 0, 0, 460, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 643, 0, 591, 0, 0,
	594, 0, 434, 0, 0, 0, 0, 0, 0, 406,
	0, 0, 338, 0, 0, 0, 450, 0, 392, 373,
	616, 0, 0, 390, 343, 419, 381, 425, 408, 433,
	386, 382, 269, 409, 308, 354, 281, 283, 303, 310,
	312, 314, 315, 363, 364, 376, 397, 410, 411, 412,
	307, 291, 391, 292, 325, 293, 270, 299, 297, 300,
	399, 301, 272, 377, 416, 0, 320, 387, 350, 273,
	349, 378, 415, 414, 282, 441, 447, 448, 537, 0,
	453, 617, 618, 619, 462, 467, 468, 469, 471, 472,
	473, 474, 538, 555, 522, 492, 455, 546, 489, 493,
	494, 558, 0, 0, 0, 446, 339, 340, 0, 318,
	266, 267, 612, 304, 369, 560, 593, 485, 0, 547,
	486, 495, 296, 519, 531, 530, 365, 445, 0, 542,
	545, 475, 611, 0, 539, 554, 615, 553, 608, 375,
	0, 396, 551, 498, 0, 543, 517, 0, 544, 513,
	548, 0, 487, 0, 403, 427, 439, 456, 459, 488,
	573, 574, 575, 271, 458, 577, 578, 579, 580, 581,
	582, 583, 576, 430, 520, 497, 523, 438, 500, 499,
	0, 0, 534, 454, 535, 536, 359, 360, 361, 362,
	640, 642, 289, 457, 385, 653, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 527, 524, 620, 0,
	584, 585, 0, 0, 451, 452, 317, 324, 470, 326,
	288, 374, 319, 436, 333, 0, 463, 528, 464, 587,
	590, 588, 589, 366, 329, 330, 400, 334, 344, 388,
	435, 372, 393, 286, 426, 401, 348, 514, 541, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	255, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 568, 567, 566, 565,
	564, 563, 562, 0, 0, 511, 413, 298, 260, 294,
	295, 302, 609, 606, 417, 610, 0, 268, 491, 342,
	146, 383, 316, 556, 557, 0, 0, 216, 217, 218,
	219, 220, 221, 222, 223, 261, 224, 225, 226, 227,
	228, 229, 230, 233, 234, 235, 236, 237, 238, 239,
	240, 559, 231, 232, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 0, 0,
	0, 262, 263, 264, 265, 0, 0, 256, 257, 258,
	259, 0, 0, 0, 442, 443, 444, 466, 0, 428,
	490, 607, 0, 0, 0, 0, 0, 0, 0, 540,
	552, 586, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 481, 482, 614, 592, 371, 0, 496, 529, 518,
	601, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 341, 533, 515, 525, 516,
	501, 502, 503, 510, 321, 504, 505, 506, 476, 507,
	477, 508, 509, 0, 532, 483, 402, 355, 550, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 284, 206, 478, 597, 480, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 287,
	2276, 2279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 407, 424, 285, 398, 437, 290, 405, 280,
	370, 394, 0, 0, 276, 422, 404, 352, 331, 332,
	275, 0, 389, 309, 323, 306, 368, 0, 421, 449,
	305, 440, 0, 432, 278, 0, 431, 367, 418, 423,
	353, 347, 277, 420, 351, 346, 335, 313, 465, 336,
	337, 327, 379, 345, 380, 328, 357, 356, 358, 0,
	0, 0, 0, 0, 460, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 594, 2280, 434, 0, 0, 0, 2275, 0, 2274,
	406, 2272, 2277, 338, 0, 0, 0, 450, 0, 392,
	373, 616, 0, 0, 390, 343, 419, 381, 425, 408,
	433, 386, 382, 269, 409, 308, 354, 281, 283, 303,
	310, 312, 314, 315, 363, 364, 376, 397, 410, 411,
	412, 307, 291, 391, 292, 325, 293, 270, 299, 297,
	300, 399, 301, 272, 377, 416, 2278, 320, 387, 350,
	273, 349, 378, 415, 414, 282, 441, 447, 448, 537,
	0, 453, 617, 618, 619, 462, 467, 468, 469, 471,
	472, 473, 474, 538, 555, 522, 492, 455, 546, 489,
	493, 494, 558, 0, 0, 0, 446, 339, 340, 0,
	318, 266, 267, 612, 304, 369, 560, 593, 485, 0,
	547, 486, 495, 296, 519, 531, 530, 365, 445, 0,
	542, 545, 475, 611, 0, 539, 554, 615, 553, 608,
	375, 0, 396, 551, 498, 0, 543, 517, 0, 544,
	513, 548, 0, 487, 0, 403, 427, 439, 456, 459,
	488, 573, 574, 575, 271, 458, 577, 578, 579, 580,
	581, 582, 583, 576, 430, 520, 497, 523, 438, 500,
	499, 0, 0, 534, 454, 535, 536, 359, 360, 361,
	362, 322, 561, 289, 457, 385, 0, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 526, 527, 524, 620,
	0, 584, 585, 0, 0, 451, 452, 317, 324, 470,
	326, 288, 374, 319, 436, 333, 0, 463, 528, 464,
	587, 590, 588, 589, 366, 329, 330, 400, 334, 344,
	388, 435, 372, 393, 286, 426, 401, 348, 514, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 568, 567, 566,
	565, 564, 563, 562, 0, 0, 511, 413, 298, 260,
	294, 295, 302, 609, 606, 417, 610, 0, 268, 491,
	342, 0, 383, 316, 556, 557, 0, 0, 216, 217,
	218, 219, 220, 221, 222, 223, 261, 224, 225, 226,
	227, 228, 229, 230, 233, 234, 235, 236, 237, 238,
	239, 240, 559, 231, 232, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 0,
	0, 0, 262, 263, 264, 265, 0, 0, 256, 257,
	258, 259, 0, 0, 0, 442, 443, 444, 466, 0,
	428, 490, 607, 0, 0, 0, 0, 0, 0, 0,
	540, 552, 586, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 481, 482, 614, 592, 371, 0, 496, 529,
	518, 601, 484, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 311, 0, 0, 341, 533, 515, 525,
	516, 501, 502, 503, 510, 321, 504, 505, 506, 476,
	507, 477, 508, 509, 0, 532, 483, 402, 355, 550,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 284, 206, 478, 597, 480,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1054, 0, 0, 0, 0,
	0, 0, 274, 407, 424, 285, 398, 437, 290, 405,
	280, 370, 394, 0, 0, 2427, 2430, 2431, 2432, 2433,
	2434, 2435, 0, 2440, 2436, 2437, 2438, 2439, 0, 2422,
	2423, 2424, 2425, 1052, 2406, 2428, 0, 2407, 367, 2408,
	2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416, 2419, 2420,
	2417, 2418, 2426, 379, 345, 380, 328, 357, 356, 358,
	1079, 1081, 1083, 1085, 1088, 460, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	0, 0, 594, 0, 434, 0, 0, 0, 0, 0,
	0, 406, 0, 0, 338, 0, 0, 0, 2421, 0,
	392, 373, 616, 0, 0, 390, 343, 419, 381, 425,
	408, 433, 386, 382, 269, 409, 308, 354, 281, 283,
	303, 310, 312, 314, 315, 363, 364, 376, 397, 410,
	411, 412, 307, 291, 391, 292, 325, 293, 270, 299,
	297, 300, 399, 301, 272, 377, 416, 0, 320, 387,
	350, 273, 349, 378, 415, 414, 282, 441, 447, 448,
	537, 0, 453, 617, 618, 619, 462, 467, 468, 469,
	471, 472, 473, 474, 538, 555, 522, 492, 455, 546,
	489, 493, 494, 558, 0, 0, 0, 446, 339, 340,
	0, 318, 266, 267, 612, 304, 369, 560, 593, 485,
	0, 547, 486, 495, 296, 519, 531, 530, 365, 445,
	0, 542, 545, 475, 611, 0, 539, 554, 615, 553,
	608, 375, 0, 396, 551, 498, 0, 543, 517, 0,
	544, 513, 548, 0, 487, 0, 403, 427, 439, 456,
	459, 488, 573, 574, 575, 271, 458, 577, 578, 579,
	580, 581, 582, 583, 576, 430, 520, 497, 523, 438,
	500, 499, 0, 0, 534, 454, 535, 536, 359, 360,
	361, 362, 322, 561, 289, 457, 385, 0, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 526, 527, 524,
	620, 0, 584, 585, 0, 0, 451, 452, 317, 324,
	470, 326, 288, 374, 319, 436, 333, 0, 463, 528,
	464, 587, 590, 588, 589, 366, 329, 330, 400, 334,
	344, 388, 435, 372, 393, 286, 426, 401, 348, 514,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 568, 567,
	566, 565, 564, 563, 562, 0, 0, 511, 413, 298,
	260, 294, 295, 302, 609, 606, 417, 610, 0, 268,
	2429, 342, 0, 383, 316, 556, 557, 0, 0, 216,
	217, 218, 219, 220, 221, 222, 223, 261, 224, 225,
	226, 227, 228, 229, 230, 233, 234, 235, 236, 237,
	238, 239, 240, 559, 231, 232, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	0, 0, 0, 262, 263, 264, 265, 0, 0, 256,
	257, 258, 259, 0, 0, 0, 442, 443, 444, 466,
	0, 428, 490, 607, 0, 0, 0, 0, 0, 0,
	0, 540, 552, 586, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 481, 482, 614, 592, 371, 0, 496,
	529, 518, 601, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 341, 533, 515,
	525, 516, 501, 502, 503, 510, 321, 504, 505, 506,
	476, 507, 477, 508, 509, 0, 532, 483, 402, 355,
	550, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 284, 206, 478, 597,
	480, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 287, 0, 2297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 407, 424, 285, 398, 437, 290,
	405, 280, 370, 394, 0, 0, 276, 422, 404, 352,
	331, 332, 275, 0, 389, 309, 323, 306, 368, 0,
	421, 449, 305, 440, 0, 432, 278, 0, 431, 367,
	418, 423, 353, 347, 277, 420, 351, 346, 335, 313,
	465, 336, 337, 327, 379, 345, 380, 328, 357, 356,
	358, 0, 0, 0, 0, 0, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 0, 0, 594, 2296, 434, 0, 0, 0, 2302,
	2299, 2301, 406, 0, 2300, 338, 0, 0, 0, 450,
	0, 392, 373, 616, 0, 2294, 390, 343, 419, 381,
	425, 408, 433, 386, 382, 269, 409, 308, 354, 281,
	283, 303, 310, 312, 314, 315, 363, 364, 376, 397,
	410, 411, 412, 307, 291, 391, 292, 325, 293, 270,
	299, 297, 300, 399, 301, 272, 377, 416, 0, 320,
	387, 350, 273, 349, 378, 415, 414, 282, 441, 447,
	448, 537, 0, 453, 617, 618, 619, 462, 467, 468,
	469, 471, 472, 473, 474, 538, 555, 522, 492, 455,
	546, 489, 493, 494, 558, 0, 0, 0, 446, 339,
	340, 0, 318, 266, 267, 612, 304, 369, 560, 593,
	485, 0, 547, 486, 495, 296, 519, 531, 530, 365,
	445, 0, 542, 545, 475, 611, 0, 539, 554, 615,
	553, 608, 375, 0, 396, 551, 498, 0, 543, 517,
	0, 544, 513, 548, 0, 487, 0, 403, 427, 439,
	456, 459, 488, 573, 574, 575, 271, 458, 577, 578,
	579, 580, 581, 582, 583, 576, 430, 520, 497, 523,
	438, 500, 499, 0, 0, 534, 454, 535, 536, 359,
	360, 361, 362, 322, 561, 289, 457, 385, 0, 521,
	0, 0, 0, 0, 0, 0, 0, 0, 526, 527,
	524, 620, 0, 584, 585, 0, 0, 451, 452, 317,
	324, 470, 326, 288, 374, 319, 436, 333, 0, 463,
	528, 464, 587, 590, 588, 589, 366, 329, 330, 400,
	334, 344, 388, 435, 372, 393, 286, 426, 401, 348,
	514, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 568,
	567, 566, 565, 564, 563, 562, 0, 0, 511, 413,
	298, 260, 294, 295, 302, 609, 606, 417, 610, 0,
	268, 491, 342, 0, 383, 316, 556, 557, 0, 0,
	216, 217, 218, 219, 220, 221, 222, 223, 261, 224,
	225, 226, 227, 228, 229, 230, 233, 234, 235, 236,
	237, 238, 239, 240, 559, 231, 232, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 0, 0, 0, 262, 263, 264, 265, 0, 0,
	256, 257, 258, 259, 0, 0, 0, 442, 443, 444,
	466, 0, 428, 490, 607, 0, 0, 0, 0, 0,
	0, 0, 540, 552, 586, 0, 595, 596, 598, 600,
	599, 602, 0, 613, 481, 482, 614, 592, 371, 0,
	496, 529, 518, 601, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 311, 0, 0, 341, 533,
	515, 525, 516, 501, 502, 503, 510, 321, 504, 505,
	506, 476, 507, 477, 508, 509, 0, 532, 483, 402,
	355, 550, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 284, 206, 478,
	597, 480, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 0, 2297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 407, 424, 285, 398, 437,
	290, 405, 280, 370, 394, 0, 0, 276, 422, 404,
	352, 331, 332, 275, 0, 389, 309, 323, 306, 368,
	0, 421, 449, 305, 440, 0, 432, 278, 0, 431,
	367, 418, 423, 353, 347, 277, 420, 351, 346, 335,
	313, 465, 336, 337, 327, 379, 345, 380, 328, 357,
	356, 358, 0, 0, 0, 0, 0, 460, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 591, 0, 0, 594, 2296, 434, 0, 0, 0,
	2302, 2299, 2301, 406, 0, 2300, 338, 0, 0, 0,
	450, 0, 392, 373, 616, 0, 0, 390, 343, 419,
	381, 425, 408, 433, 386, 382, 269, 409, 308, 354,
	281, 283, 303, 310, 312, 314, 315, 363, 364, 376,
	397, 410, 411, 412, 307, 291, 391, 292, 325, 293,
	270, 299, 297, 300, 399, 301, 272, 377, 416, 0,
	320, 387, 350, 273, 349, 378, 415, 414, 282, 441,
	447, 448, 537, 0, 453, 617, 618, 619, 462, 467,
	468, 469, 471, 472, 473, 474, 538, 555, 522, 492,
	455, 546, 489, 493, 494, 558, 0, 0, 0, 446,
	339, 340, 0, 318, 266, 267, 612, 304, 369, 560,
	593, 485, 0, 547, 486, 495, 296, 519, 531, 530,
	365, 445, 0, 542, 545, 475, 611, 0, 539, 554,
	615, 553, 608, 375, 0, 396, 551, 498, 0, 543,
	517, 0, 544, 513, 548, 0, 487, 0, 403, 427,
	439, 456, 459, 488, 573, 574, 575, 271, 458, 577,
	578, 579, 580, 581, 582, 583, 576, 430, 520, 497,
	523, 438, 500, 499, 0, 0, 534, 454, 535, 536,
	359, 360, 361, 362, 322, 561, 289, 457, 385, 0,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 526,
	527, 524, 620, 0, 584, 585, 0, 0, 451, 452,
	317, 324, 470, 326, 288, 374, 319, 436, 333, 0,
	463, 528, 464, 587, 590, 588, 589, 366, 329, 330,
	400, 334, 344, 388, 435, 372, 393, 286, 426, 401,
	348, 514, 541, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	568, 567, 566, 565, 564, 563, 562, 0, 0, 511,
	413, 298, 260, 294, 295, 302, 609, 606, 417, 610,
	0, 268, 491, 342, 0, 383, 316, 556, 557, 0,
	0, 216, 217, 218, 219, 220, 221, 222, 223, 261,
	224, 225, 226, 227, 228, 229, 230, 233, 234, 235,
	236, 237, 238, 239, 240, 559, 231, 232, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 0, 0, 0, 262, 263, 264, 265, 0,
	0, 256, 257, 258, 259, 0, 0, 0, 442, 443,
	444, 466, 0, 428, 490, 607, 0, 0, 0, 0,
	0, 0, 0, 540, 552, 586, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 481, 482, 614, 592, 371,
	0, 496, 529, 518, 601, 484, 0, 0, 0, 0,
	0, 2004, 0, 0, 0, 0, 311, 0, 0, 341,
	533, 515, 525, 516, 501, 502, 503, 510, 321, 504,
	505, 506, 476, 507, 477, 508, 509, 0, 532, 483,
	402, 355, 550, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 2005, 0, 0, 0, 284, 206,
	478, 597, 480, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 287, 0, 0, 1185, 1186, 1187, 1184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 407, 424, 285, 398,
	437, 290, 405, 280, 370, 394, 0, 0, 276, 422,
	404, 352, 331, 332, 275, 0, 389, 309, 323, 306,
	368, 0, 421, 449, 305, 440, 0, 432, 278, 0,
	431, 367, 418, 423, 353, 347, 277, 420, 351, 346,
	335, 313, 465, 336, 337, 327, 379, 345, 380, 328,
	357, 356, 358, 0, 0, 0, 0, 0, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 591, 0, 0, 594, 0, 434, 0, 0,
	0, 0, 0, 0, 406, 0, 0, 338, 0, 0,
	0, 450, 0, 392, 373, 616, 0, 0, 390, 343,
	419, 381, 425, 408, 433, 386, 382, 269, 409, 308,
	354, 281, 283, 303, 310, 312, 314, 315, 363, 364,
	376, 397, 410, 411, 412, 307, 291, 391, 292, 325,
	293, 270, 299, 297, 300, 399, 301, 272, 377, 416,
	0, 320, 387, 350, 273, 349, 378, 415, 414, 282,
	441, 447, 448, 537, 0, 453, 617, 618, 619, 462,
	467, 468, 469, 471, 472, 473, 474, 538, 555, 522,
	492, 455, 546, 489, 493, 494, 558, 0, 0, 0,
	446, 339, 340, 0, 318, 266, 267, 612, 304, 369,
	560, 593, 485, 0, 547, 486, 495, 296, 519, 531,
	530, 365, 445, 0, 542, 545, 475, 611, 0, 539,
	554, 615, 553, 608, 375, 0, 396, 551, 498, 0,
	543, 517, 0, 544, 513, 548, 0, 487, 0, 403,
	427, 439, 456, 459, 488, 573, 574, 575, 271, 458,
	577, 578, 579, 580, 581, 582, 583, 576, 430, 520,
	497, 523, 438, 500, 499, 0, 0, 534, 454, 535,
	536, 359, 360, 361, 362, 322, 561, 289, 457, 385,
	0, 521, 0, 0, 0, 0, 0, 0, 0, 0,
	526, 527, 524, 620, 0, 584, 585, 0, 0, 451,
	452, 317, 324, 470, 326, 288, 374, 319, 436, 333,
	0, 463, 528, 464, 587, 590, 588, 589, 366, 329,
	330, 400, 334, 344, 388, 435, 372, 393, 286, 426,
	401, 348, 514, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	569, 568, 567, 566, 565, 564, 563, 562, 0, 0,
	511, 413, 298, 260, 294, 295, 302, 609, 606, 417,
	610, 0, 268, 491, 342, 0, 383, 316, 556, 557,
	0, 0, 216, 217, 218, 219, 220, 221, 222, 223,
	261, 224, 225, 226, 227, 228, 229, 230, 233, 234,
	235, 236, 237, 238, 239, 240, 559, 231, 232, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 0, 0, 0, 262, 263, 264, 265,
	0, 0, 256, 257, 258, 259, 0, 0, 0, 442,
	443, 444, 466, 0, 428, 490, 607, 0, 0, 0,
	0, 0, 0, 0, 540, 552, 586, 0, 595, 596,
	598, 600, 599, 602, 183, 613, 481, 482, 614, 592,
	0, 0, 0, 0, 371, 0, 496, 529, 518, 601,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 0, 0, 341, 533, 515, 525, 516, 501,
	502, 503, 510, 321, 504, 505, 506, 476, 507, 477,
	508, 509, 121, 532, 483, 402, 355, 550, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 2054, 0, 205, 0, 0, 0,
	0, 0, 0, 284, 206, 478, 597, 480, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 407, 424, 285, 398, 437, 290, 405, 280, 370,
	394, 0, 0, 276, 422, 404, 352, 331, 332, 275,
	0, 389, 309, 323, 306, 368, 0, 421, 449, 305,
	440, 0, 432, 278, 0, 431, 367, 418, 423, 353,
	347, 277, 420, 351, 346, 335, 313, 465, 336, 337,
	327, 379, 345, 380, 328, 357, 356, 358, 0, 0,
	0, 0, 0, 460, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	594, 0, 434, 0, 0, 0, 0, 0, 0, 406,
	0, 0, 338, 0, 0, 0, 450, 0, 392, 373,
	616, 0, 0, 390, 343, 419, 381, 425, 408, 433,
	386, 382, 269, 409, 308, 354, 281, 283, 303, 310,
	312, 314, 315, 363, 364, 376, 397, 410, 411, 412,
	307, 291, 391, 292, 325, 293, 270, 299, 297, 300,
	399, 301, 272, 377, 416, 0, 320, 387, 350, 273,
	349, 378, 415, 414, 282, 441, 447, 448, 537, 0,
	453, 617, 618, 619, 462, 467, 468, 469, 471, 472,
	473, 474, 538, 555, 522, 492, 455, 546, 489, 493,
	494, 558, 0, 0, 0, 446, 339, 340, 0, 318,
	266, 267, 612, 304, 369, 560, 593, 485, 0, 547,
	486, 495, 296, 519, 531, 530, 365, 445, 0, 542,
	545, 475, 611, 0, 539, 554, 615, 553, 608, 375,
	0, 396, 551, 498, 0, 543, 517, 0, 544, 513,
	548, 0, 487, 0, 403, 427, 439, 456, 459, 488,
	573, 574, 575, 271, 458, 577, 578, 579, 580, 581,
	582, 583, 576, 430, 520, 497, 523, 438, 500, 499,
	0, 0, 534, 454, 535, 536, 359, 360, 361, 362,
	322, 561, 289, 457, 385, 0, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 527, 524, 620, 0,
	584, 585, 0, 0, 451, 452, 317, 324, 470, 326,
	288, 374, 319, 436, 333, 0, 463, 528, 464, 587,
	590, 588, 589, 366, 329, 330, 400, 334, 344, 388,
	435, 372, 393, 286, 426, 401, 348, 514, 541, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 568, 567, 566, 565,
	564, 563, 562, 0, 0, 511, 413, 298, 260, 294,
	295, 302, 609, 606, 417, 610, 0, 268, 491, 342,
	146, 383, 316, 556, 557, 0, 0, 216, 217, 218,
	219, 220, 221, 222, 223, 261, 224, 225, 226, 227,
	228, 229, 230, 233, 234, 235, 236, 237, 238, 239,
	240, 559, 231, 232, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 0, 0,
	0, 262, 263, 264, 265, 0, 0, 256, 257, 258,
	259, 0, 0, 0, 442, 443, 444, 466, 0, 428,
	490, 607, 0, 0, 0, 0, 0, 0, 0, 540,
	552, 586, 0, 595, 596, 598, 600, 599, 602, 183,
	613, 481, 482, 614, 592, 0, 0, 0, 0, 371,
	0, 496, 529, 518, 601, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 341,
	533, 515, 525, 516, 501, 502, 503, 510, 321, 504,
	505, 506, 476, 507, 477, 508, 509, 121, 532, 483,
	402, 355, 550, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 2040,
	0, 205, 0, 0, 0, 0, 0, 0, 284, 206,
	478, 597, 480, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 407, 424, 285, 398,
	437, 290, 405, 280, 370, 394, 0, 0, 276, 422,
	404, 352, 331, 332, 275, 0, 389, 309, 323, 306,
	368, 0, 421, 449, 305, 440, 0, 432, 278, 0,
	431, 367, 418, 423, 353, 347, 277, 420, 351, 346,
	335, 313, 465, 336, 337, 327, 379, 345, 380, 328,
	357, 356, 358, 0, 0, 0, 0, 0, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 591, 0, 0, 594, 0, 434, 0, 0,
	0, 0, 0, 0, 406, 0, 0, 338, 0, 0,
	0, 450, 0, 392, 373, 616, 0, 0, 390, 343,
	419, 381, 425, 408, 433, 386, 382, 269, 409, 308,
	354, 281, 283, 303, 310, 312, 314, 315, 363, 364,
	376, 397, 410, 411, 412, 307, 291, 391, 292, 325,
	293, 270, 299, 297, 300, 399, 301, 272, 377, 416,
	0, 320, 387, 350, 273, 349, 378, 415, 414, 282,
	441, 447, 448, 537, 0, 453, 617, 618, 619, 462,
	467, 468, 469, 471, 472, 473, 474, 538, 555, 522,
	492, 455, 546, 489, 493, 494, 558, 0, 0, 0,
	446, 339, 340, 0, 318, 266, 267, 612, 304, 369,
	560, 593, 485, 0, 547, 486, 495, 296, 519, 531,
	530, 365, 445, 0, 542, 545, 475, 611, 0, 539,
	554, 615, 553, 608, 375, 0, 396, 551, 498, 0,
	543, 517, 0, 544, 513, 548, 0, 487, 0, 403,
	427, 439, 456, 459, 488, 573, 574, 575, 271, 458,
	577, 578, 579, 580, 581, 582, 583, 576, 430, 520,
	497, 523, 438, 500, 499, 0, 0, 534, 454, 535,
	536, 359, 360, 361, 362, 322, 561, 289, 457, 385,
	0, 521, 0, 0, 0, 0, 0, 0, 0, 0,
	526, 527, 524, 620, 0, 584, 585, 0, 0, 451,
	452, 317, 324, 470, 326, 288, 374, 319, 436, 333,
	0, 463, 528, 464, 587, 590, 588, 589, 366, 329,
	330, 400, 334, 344, 388, 435, 372, 393, 286, 426,
	401, 348, 514, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	569, 568, 567, 566, 565, 564, 563, 562, 0, 0,
	511, 413, 298, 260, 294, 295, 302, 609, 606, 417,
	610, 0, 268, 491, 342, 146, 383, 316, 556, 557,
	0, 0, 216, 217, 218, 219, 220, 221, 222, 223,
	261, 224, 225, 226, 227, 228, 229, 230, 233, 234,
	235, 236, 237, 238, 239, 240, 559, 231, 232, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 0, 0, 0, 262, 263, 264, 265,
	0, 0, 256, 257, 258, 259, 0, 0, 0, 442,
	443, 444, 466, 0, 428, 490, 607, 0, 0, 0,
	0, 0, 0, 0, 540, 552, 586, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 481, 482, 614, 592,
	371, 0, 496, 529, 518, 601, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 311, 984, 0,
	341, 533, 515, 525, 516, 501, 502, 503, 510, 321,
	504, 505, 506, 476, 507, 477, 508, 509, 0, 532,
	483, 402, 355, 550, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 991, 992, 0, 0, 0, 0, 284,
	206, 478, 597, 480, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 995, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 407, 979, 285,
	398, 437, 290, 405, 280, 370, 394, 0, 0, 276,
	422, 404, 352, 331, 332, 275, 0, 389, 309, 323,
	306, 368, 0, 421, 449, 305, 440, 968, 432, 278,
	967, 431, 367, 418, 423, 353, 347, 277, 420, 351,
	346, 335, 313, 465, 336, 337, 327, 379, 345, 380,
	328, 357, 356, 358, 0, 0, 0, 0, 0, 460,
	461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 594, 0, 434, 0,
	0, 0, 0, 0, 0, 406, 0, 0, 338, 0,
	0, 0, 450, 0, 392, 373, 616, 0, 0, 390,
	343, 419, 381, 425, 408, 433, 982, 382, 269, 409,
	308, 354, 281, 283, 303, 310, 312, 314, 315, 363,
	364, 376, 397, 410, 411, 412, 307, 291, 391, 292,
	325, 293, 270, 299, 297, 300, 399, 301, 272, 377,
	416, 0, 320, 387, 350, 273, 349, 378, 415, 414,
	282, 441, 447, 448, 537, 0, 453, 617, 618, 619,
	462, 467, 468, 469, 471, 472, 473, 474, 538, 555,
	522, 492, 455, 546, 489, 493, 494, 558, 0, 0,
	0, 446, 339, 340, 0, 318, 266, 267, 612, 304,
	369, 560, 593, 485, 0, 547, 486, 495, 296, 519,
	531, 530, 365, 445, 0, 542, 545, 475, 611, 0,
	539, 554, 615, 553, 608, 375, 0, 396, 551, 498,
	0, 543, 517, 0, 544, 513, 548, 0, 487, 0,
	403, 427, 439, 456, 459, 488, 573, 574, 575, 271,
	458, 577, 578, 579, 580, 581, 582, 983, 576, 430,
	520, 497, 523, 438, 500, 499, 0, 0, 534, 986,
	535, 536, 359, 360, 361, 362, 322, 561, 289, 457,
	385, 0, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 526, 527, 524, 620, 0, 584, 585, 0, 0,
	451, 452, 317, 324, 470, 326, 288, 374, 319, 436,
	333, 0, 463, 528, 464, 587, 590, 588, 589, 993,
	980, 989, 981, 334, 344, 388, 435, 372, 393, 286,
	426, 401, 990, 514, 541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 568, 567, 566, 565, 564, 563, 562, 0,
	0, 511, 413, 298, 260, 294, 295, 302, 609, 606,
	417, 610, 0, 268, 491, 342, 0, 383, 316, 556,
	557, 0, 0, 216, 217, 218, 219, 220, 221, 222,
	223, 261, 224, 225, 226, 227, 228, 229, 230, 233,
	234, 235, 236, 237, 238, 239, 240, 559, 231, 232,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 0, 0, 0, 262, 263, 264,
	265, 0, 0, 256, 257, 258, 259, 0, 0, 0,
	442, 443, 444, 466, 0, 428, 490, 607, 0, 0,
	0, 0, 0, 0, 0, 540, 552, 586, 0, 595,
	596, 598, 600, 599, 602, 183, 613, 481, 482, 614,
	592, 0, 0, 0, 0, 371, 0, 496, 529, 518,
	601, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 341, 533, 515, 525, 516,
	501, 502, 503, 510, 321, 504, 505, 506, 476, 507,
	477, 508, 509, 121, 532, 483, 402, 355, 550, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1937, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 284, 206, 478, 597, 480, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 407, 424, 285, 398, 437, 290, 405, 280,
	370, 394, 0, 0, 276, 422, 404, 352, 331, 332,
	275, 0, 389, 309, 323, 306, 368, 0, 421, 449,
	305, 440, 0, 432, 278, 0, 431, 367, 418, 423,
	353, 347, 277, 420, 351, 346, 335, 313, 465, 336,
	337, 327, 379, 345, 380, 328, 357, 356, 358, 0,
	0, 0, 0, 0, 460, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 594, 0, 434, 0, 0, 0, 0, 0, 0,
	406, 0, 0, 338, 0, 0, 0, 450, 0, 392,
	373, 616, 0, 0, 390, 343, 419, 381, 425, 408,
	433, 386, 382, 269, 409, 308, 354, 281, 283, 303,
	310, 312, 314, 315, 363, 364, 376, 397, 410, 411,
	412, 307, 291, 391, 292, 325, 293, 270, 299, 297,
	300, 399, 301, 272, 377, 416, 0, 320, 387, 350,
	273, 349, 378, 415, 414, 282, 441, 447, 448, 537,
	0, 453, 617, 618, 619, 462, 467, 468, 469, 471,
	472, 473, 474, 538, 555, 522, 492, 455, 546, 489,
	493, 494, 558, 0, 0, 0, 446, 339, 340, 0,
	318, 266, 267, 612, 304, 369, 560, 593, 485, 0,
	547, 486, 495, 296, 519, 531, 530, 365, 445, 0,
	542, 545, 475, 611, 0, 539, 554, 615, 553, 608,
	375, 0, 396, 551, 498, 0, 543, 517, 0, 544,
	513, 548, 0, 487, 0, 403, 427, 439, 456, 459,
	488, 573, 574, 575, 271, 458, 577, 578, 579, 580,
	581, 582, 583, 576, 430, 520, 497, 523, 438, 500,
	499, 0, 0, 534, 454, 535, 536, 359, 360, 361,
	362, 322, 561, 289, 457, 385, 0, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 526, 527, 524, 620,
	0, 584, 585, 0, 0, 451, 452, 317, 324, 470,
	326, 288, 374, 319, 436, 333, 0, 463, 528, 464,
	587, 590, 588, 589, 366, 329, 330, 400, 334, 344,
	388, 435, 372, 393, 286, 426, 401, 348, 514, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 568, 567, 566,
	565, 564, 563, 562, 0, 0, 511, 413, 298, 260,
	294, 295, 302, 609, 606, 417, 610, 0, 268, 491,
	342, 146, 383, 316, 556, 557, 0, 0, 216, 217,
	218, 219, 220, 221, 222, 223, 261, 224, 225, 226,
	227, 228, 229, 230, 233, 234, 235, 236, 237, 238,
	239, 240, 559, 231, 232, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 0,
	0, 0, 262, 263, 264, 265, 0, 0, 256, 257,
	258, 259, 0, 0, 0, 442, 443, 444, 466, 0,
	428, 490, 607, 0, 0, 0, 0, 0, 0, 0,
	540, 552, 586, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 481, 482, 614, 592, 371, 0, 496, 529,
	518, 601, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 311, 0, 0, 341, 533, 515, 525,
	516, 501, 502, 503, 510, 321, 504, 505, 506, 476,
	507, 477, 508, 509, 0, 532, 483, 402, 355, 550,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 991,
	992, 0, 0, 0, 0, 284, 206, 478, 597, 480,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	995, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 407, 424, 285, 398, 437, 290, 405,
	280, 370, 394, 0, 0, 276, 422, 404, 352, 331,
	332, 275, 0, 389, 309, 323, 306, 368, 0, 421,
	449, 305, 440, 968, 432, 278, 967, 431, 367, 418,
	423, 353, 347, 277, 420, 351, 346, 335, 313, 465,
	336, 337, 327, 379, 345, 380, 328, 357, 356, 358,
	0, 0, 0, 0, 0, 460, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	0, 0, 594, 0, 434, 0, 0, 0, 0, 0,
	0, 406, 0, 0, 338, 0, 0, 0, 450, 0,
	392, 373, 616, 0, 0, 390, 343, 419, 381, 425,
	408, 433, 386, 382, 269, 409, 308, 354, 281, 283,
	303, 310, 312, 314, 315, 363, 364, 376, 397, 410,
	411, 412, 307, 291, 391, 292, 325, 293, 270, 299,
	297, 300, 399, 301, 272, 377, 416, 0, 320, 387,
	350, 273, 349, 378, 415, 414, 282, 441, 447, 448,
	537, 0, 453, 617, 618, 619, 462, 467, 468, 469,
	471, 472, 473, 474, 538, 555, 522, 492, 455, 546,
	489, 493, 494, 558, 0, 0, 0, 446, 339, 340,
	0, 318, 266, 267, 612, 304, 369, 560, 593, 485,
	0, 547, 486, 495, 296, 519, 531, 530, 365, 445,
	0, 542, 545, 475, 611, 0, 539, 554, 615, 553,
	608, 375, 0, 396, 551, 498, 0, 543, 517, 0,
	544, 513, 548, 0, 487, 0, 403, 427, 439, 456,
	459, 488, 573, 574, 575, 271, 458, 577, 578, 579,
	580, 581, 582, 583, 576, 430, 520, 497, 523, 438,
	500, 499, 0, 0, 534, 454, 535, 536, 359, 360,
	361, 362, 322, 561, 289, 457, 385, 0, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 526, 527, 524,
	620, 0, 584, 585, 0, 0, 451, 452, 317, 324,
	470, 326, 288, 374, 319, 436, 333, 0, 463, 528,
	464, 587, 590, 588, 589, 993, 1956, 989, 1957, 334,
	344, 388, 435, 372, 393, 286, 426, 401, 990, 514,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 568, 567,
	566, 565, 564, 563, 562, 0, 0, 511, 413, 298,
	260, 294, 295, 302, 609, 606, 417, 610, 0, 268,
	491, 342, 0, 383, 316, 556, 557, 0, 0, 216,
	217, 218, 219, 220, 221, 222, 223, 261, 224, 225,
	226, 227, 228, 229, 230, 233, 234, 235, 236, 237,
	238, 239, 240, 559, 231, 232, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	0, 0, 0, 262, 263, 264, 265, 0, 0, 256,
	257, 258, 259, 0, 0, 0, 442, 443, 444, 466,
	0, 428, 490, 607, 0, 0, 0, 0, 0, 0,
	0, 540, 552, 586, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 481, 482, 614, 592, 371, 0, 496,
	529, 518, 601, 484, 0, 0, 2792, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 341, 533, 515,
	525, 516, 501, 502, 503, 510, 321, 504, 505, 506,
	476, 507, 477, 508, 509, 0, 532, 483, 402, 355,
	550, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 284, 206, 478, 597,
	480, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 407, 424, 285, 398, 437, 290,
	405, 280, 370, 394, 0, 0, 276, 422, 404, 352,
	331, 332, 275, 0, 389, 309, 323, 306, 368, 0,
	421, 449, 305, 440, 0, 432, 278, 0, 431, 367,
	418, 423, 353, 347, 277, 420, 351, 346, 335, 313,
	465, 336, 337, 327, 379, 345, 380, 328, 357, 356,
	358, 0, 0, 0, 0, 0, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 2795, 0, 0, 2794,
	591, 0, 0, 594, 0, 434, 0, 0, 0, 0,
	0, 0, 406, 0, 0, 338, 0, 0, 0, 450,
	0, 392, 373, 616, 0, 0, 390, 343, 419, 381,
	425, 408, 433, 386, 382, 269, 409, 308, 354, 281,
	283, 303, 310, 312, 314, 315, 363, 364, 376, 397,
	410, 411, 412, 307, 291, 391, 292, 325, 293, 270,
	299, 297, 300, 399, 301, 272, 377, 416, 0, 320,
	387, 350, 273, 349, 378, 415, 414, 282, 441, 447,
	448, 537, 0, 453, 617, 618, 619, 462, 467, 468,
	469, 471, 472, 473, 474, 538, 555, 522, 492, 455,
	546, 489, 493, 494, 558, 0, 0, 0, 446, 339,
	340, 0, 318, 266, 267, 612, 304, 369, 560, 593,
	485, 0, 547, 486, 495, 296, 519, 531, 530, 365,
	445, 0, 542, 545, 475, 611, 0, 539, 554, 615,
	553, 608, 375, 0, 396, 551, 498, 0, 543, 517,
	0, 544, 513, 548, 0, 487, 0, 403, 427, 439,
	456, 459, 488, 573, 574, 575, 271, 458, 577, 578,
	579, 580, 581, 582, 583, 576, 430, 520, 497, 523,
	438, 500, 499, 0, 0, 534, 454, 535, 536, 359,
	360, 361, 362, 322, 561, 289, 457, 385, 0, 521,
	0, 0, 0, 0, 0, 0, 0, 0, 526, 527,
	524, 620, 0, 584, 585, 0, 0, 451, 452, 317,
	324, 470, 326, 288, 374, 319, 436, 333, 0, 463,
	528, 464, 587, 590, 588, 589, 366, 329, 330, 400,
	334, 344, 388, 435, 372, 393, 286, 426, 401, 348,
	514, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 568,
	567, 566, 565, 564, 563, 562, 0, 0, 511, 413,
	298, 260, 294, 295, 302, 609, 606, 417, 610, 0,
	268, 491, 342, 0, 383, 316, 556, 557, 0, 0,
	216, 217, 218, 219, 220, 221, 222, 223, 261, 224,
	225, 226, 227, 228, 229, 230, 233, 234, 235, 236,
	237, 238, 239, 240, 559, 231, 232, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 0, 0, 0, 262, 263, 264, 265, 0, 0,
	256, 257, 258, 259, 0, 0, 0, 442, 443, 444,
	466, 0, 428, 490, 607, 0, 0, 0, 0, 0,
	0, 0, 540, 552, 586, 0, 595, 596, 598, 600,
	599, 602, 0, 613, 481, 482, 614, 592, 371, 0,
	496, 529, 518, 601, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 311, 1454, 0, 341, 533,
	515, 525, 516, 501, 502, 503, 510, 321, 504, 505,
	506, 476, 507, 477, 508, 509, 0, 532, 483, 402,
	355, 550, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 1452, 0, 0, 0, 284, 206, 478,
	597, 480, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	0, 0, 0, 0, 274, 407, 424, 285, 398, 437,
	290, 405, 280, 370, 394, 0, 0, 276, 422, 404,
	352, 331, 332, 275, 0, 389, 309, 323, 306, 368,
	0, 421, 449, 305, 440, 0, 432, 278, 0, 431,
	367, 418, 423, 353, 347, 277, 420, 351, 346, 335,
	313, 465, 336, 337, 327, 379, 345, 380, 328, 357,
	356, 358, 0, 0, 0, 0, 0, 460, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 591, 0, 0, 594, 0, 434, 0, 0, 0,
	0, 0, 0, 406, 0, 0, 338, 0, 0, 0,
	450, 0, 392, 373, 616, 0, 0, 390, 343, 419,
	381, 425, 408, 433, 386, 382, 269, 409, 308, 354,
	281, 283, 303, 310, 312, 314, 315, 363, 364, 376,
	397, 410, 411, 412, 307, 291, 391, 292, 325, 293,
	270, 299, 297, 300, 399, 301, 272, 377, 416, 0,
	320, 387, 350, 273, 349, 378, 415, 414, 282, 441,
	447, 448, 537, 0, 453, 617, 618, 619, 462, 467,
	468, 469, 471, 472, 473, 474, 538, 555, 522, 492,
	455, 546, 489, 493, 494, 558, 0, 0, 0, 446,
	339, 340, 0, 318, 266, 267, 612, 304, 369, 560,
	593, 485, 0, 547, 486, 495, 296, 519, 531, 530,
	365, 445, 0, 542, 545, 475, 611, 0, 539, 554,
	615, 553, 608, 375, 0, 396, 551, 498, 0, 543,
	517, 0, 544, 513, 548, 0, 487, 0, 403, 427,
	439, 456, 459, 488, 573, 574, 575, 271, 458, 577,
	578, 579, 580, 581, 582, 583, 576, 430, 520, 497,
	523, 438, 500, 499, 0, 0, 534, 454, 535, 536,
	359, 360, 361, 362, 322, 561, 289, 457, 385, 0,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 526,
	527, 524, 620, 0, 584, 585, 0, 0, 451, 452,
	317, 324, 470, 326, 288, 374, 319, 436, 333, 0,
	463, 528, 464, 587, 590, 588, 589, 366, 329, 330,
	400, 334, 344, 388, 435, 372, 393, 286, 426, 401,
	348, 514, 541, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	568, 567, 566, 565, 564, 563, 562, 0, 0, 511,
	413, 298, 260, 294, 295, 302, 609, 606, 417, 610,
	0, 268, 491, 342, 0, 383, 316, 556, 557, 0,
	0, 216, 217, 218, 219, 220, 221, 222, 223, 261,
	224, 225, 226, 227, 228, 229, 230, 233, 234, 235,
	236, 237, 238, 239, 240, 559, 231, 232, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 0, 0, 0, 262, 263, 264, 265, 0,
	0, 256, 257, 258, 259, 0, 0, 0, 442, 443,
	444, 466, 0, 428, 490, 607, 0, 0, 0, 0,
	0, 0, 0, 540, 552, 586, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 481, 482, 614, 592, 371,
	0, 496, 529, 518, 601, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 1448, 0, 341,
	533, 515, 525, 516, 501, 502, 503, 510, 321, 504,
	505, 506, 476, 507, 477, 508, 509, 0, 532, 483,
	402, 355, 550, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 1452, 0, 0, 0, 284, 206,
	478, 597, 480, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1450, 0,
	0, 0, 0, 0, 0, 274, 407, 424, 285, 398,
	437, 290, 405, 280, 370, 394, 0, 0, 276, 422,
	404, 352, 331, 332, 275, 0, 389, 309, 323, 306,
	368, 0, 421, 449, 305, 440, 0, 432, 278, 0,
	431, 367, 418, 423, 353, 347, 277, 420, 351, 346,
	335, 313, 465, 336, 337, 327, 379, 345, 380, 328,
	357, 356, 358, 0, 0, 0, 0, 0, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 591, 0, 0, 594, 0, 434, 0, 0,
	0, 0, 0, 0, 406, 0, 0, 338, 0, 0,
	0, 450, 0, 392, 373, 616, 0, 0, 390, 343,
	419, 381, 425, 408, 433, 386, 382, 269, 409, 308,
	354, 281, 283, 303, 310, 312, 314, 315, 363, 364,
	376, 397, 410, 411, 412, 307, 291, 391, 292, 325,
	293, 270, 299, 297, 300, 399, 301, 272, 377, 416,
	0, 320, 387, 350, 273, 349, 378, 415, 414, 282,
	441, 447, 448, 537, 0, 453, 617, 618, 619, 462,
	467, 468, 469, 471, 472, 473, 474, 538, 555, 522,
	492, 455, 546, 489, 493, 494, 558, 0, 0, 0,
	446, 339, 340, 0, 318, 266, 267, 612, 304, 369,
	560, 593, 485, 0, 547, 486, 495, 296, 519, 531,
	530, 365, 445, 0, 542, 545, 475, 611, 0, 539,
	554, 615, 553, 608, 375, 0, 396, 551, 498, 0,
	543, 517, 0, 544, 513, 548, 0, 487, 0, 403,
	427, 439, 456, 459, 488, 573, 574, 575, 271, 458,
	577, 578, 579, 580, 581, 582, 583, 576, 430, 520,
	497, 523, 438, 500, 499, 0, 0, 534, 454, 535,
	536, 359, 360, 361, 362, 322, 561, 289, 457, 385,
	0, 521, 0, 0, 0, 0, 0, 0, 0, 0,
	526, 527, 524, 620, 0, 584, 585, 0, 0, 451,
	452, 317, 324, 470, 326, 288, 374, 319, 436, 333,
	0, 463, 528, 464, 587, 590, 588, 589, 366, 329,
	330, 400, 334, 344, 388, 435, 372, 393, 286, 426,
	401, 348, 514, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	569, 568, 567, 566, 565, 564, 563, 562, 0, 0,
	511, 413, 298, 260, 294, 295, 302, 609, 606, 417,
	610, 0, 268, 491, 342, 0, 383, 316, 556, 557,
	0, 0, 216, 217, 218, 219, 220, 221, 222, 223,
	261, 224, 225, 226, 227, 228, 229, 230, 233, 234,
	235, 236, 237, 238, 239, 240, 559, 231, 232, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 0, 0, 0, 262, 263, 264, 265,
	0, 0, 256, 257, 258, 259, 0, 0, 0, 442,
	443, 444, 466, 0, 428, 490, 607, 0, 0, 0,
	0, 0, 0, 0, 540, 552, 586, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 481, 482, 614, 592,
	371, 0, 496, 529, 518, 601, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 311, 0, 0,
	341, 533, 515, 525, 516, 501, 502, 503, 510, 321,
	504, 505, 506, 476, 507, 477, 508, 509, 0, 532,
	483, 402, 355, 550, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3782, 0, 205, 807, 0, 0, 0, 0, 0, 284,
	206, 478, 597, 480, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 407, 424, 285,
	398, 437, 290, 405, 280, 370, 394, 0, 0, 276,
	422, 404, 352, 331, 332, 275, 0, 389, 309, 323,
	306, 368, 0, 421, 449, 305, 440, 0, 432, 278,
	0, 431, 367, 418, 423, 353, 347, 277, 420, 351,
	346, 335, 313, 465, 336, 337, 327, 379, 345, 380,
	328, 357, 356, 358, 0, 0, 0, 0, 0, 460,
	461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 594, 0, 434, 0,
	0, 0, 0, 0, 0, 406, 0, 0, 338, 0,
	0, 0, 450, 0, 392, 373, 616, 0, 0, 390,
	343, 419, 381, 425, 408, 433, 386, 382, 269, 409,
	308, 354, 281, 283, 303, 310, 312, 314, 315, 363,
	364, 376, 397, 410, 411, 412, 307, 291, 391, 292,
	325, 293, 270, 299, 297, 300, 399, 301, 272, 377,
	416, 0, 320, 387, 350, 273, 349, 378, 415, 414,
	282, 441, 447, 448, 537, 0, 453, 617, 618, 619,
	462, 467, 468, 469, 471, 472, 473, 474, 538, 555,
	522, 492, 455, 546, 489, 493, 494, 558, 0, 0,
	0, 446, 339, 340, 0, 318, 266, 267, 612, 304,
	369, 560, 593, 485, 0, 547, 486, 495, 296, 519,
	531, 530, 365, 445, 0, 542, 545, 475, 611, 0,
	539, 554, 615, 553, 608, 375, 0, 396, 551, 498,
	0, 543, 517, 0, 544, 513, 548, 0, 487, 0,
	403, 427, 439, 456, 459, 488, 573, 574, 575, 271,
	458, 577, 578, 579, 580, 581, 582, 583, 576, 430,
	520, 497, 523, 438, 500, 499, 0, 0, 534, 454,
	535, 536, 359, 360, 361, 362, 322, 561, 289, 457,
	385, 0, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 526, 527, 524, 620, 0, 584, 585, 0, 0,
	451, 452, 317, 324, 470, 326, 288, 374, 319, 436,
	333, 0, 463, 528, 464, 587, 590, 588, 589, 366,
	329, 330, 400, 334, 344, 388, 435, 372, 393, 286,
	426, 401, 348, 514, 541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 568, 567, 566, 565, 564, 563, 562, 0,
	0, 511, 413, 298, 260, 294, 295, 302, 609, 606,
	417, 610, 0, 268, 491, 342, 0, 383, 316, 556,
	557, 0, 0, 216, 217, 218, 219, 220, 221, 222,
	223, 261, 224, 225, 226, 227, 228, 229, 230, 233,
	234, 235, 236, 237, 238, 239, 240, 559, 231, 232,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 0, 0, 0, 262, 263, 264,
	265, 0, 0, 256, 257, 258, 259, 0, 0, 0,
	442, 443, 444, 466, 0, 428, 490, 607, 0, 0,
	0, 0, 0, 0, 0, 540, 552, 586, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 481, 482, 614,
	592, 371, 0, 496, 529, 518, 601, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 341, 533, 515, 525, 516, 501, 502, 503, 510,
	321, 504, 505, 506, 476, 507, 477, 508, 509, 0,
	532, 483, 402, 355, 550, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 0, 0, 1452, 0, 0, 0,
	284, 206, 478, 597, 480, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1450, 0, 0, 0, 0, 0, 0, 274, 407, 424,
	285, 398, 437, 290, 405, 280, 370, 394, 0, 0,
	276, 422, 404, 352, 331, 332, 275, 0, 389, 309,
	323, 306, 368, 0, 421, 449, 305, 440, 0, 432,
	278, 0, 431, 367, 418, 423, 353, 347, 277, 420,
	351, 346, 335, 313, 465, 336, 337, 327, 379, 345,
	380, 328, 357, 356, 358, 0, 0, 0, 0, 0,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 0, 0, 594, 0, 434,
	0, 0, 0, 0, 0, 0, 406, 0, 0, 338,
	0, 0, 0, 450, 0, 392, 373, 616, 0, 0,
	390, 343, 419, 381, 425, 408, 433, 386, 382, 269,
	409, 308, 354, 281, 283, 303, 310, 312, 314, 315,
	363, 364, 376, 397, 410, 411, 412, 307, 291, 391,
	292, 325, 293, 270, 299, 297, 300, 399, 301, 272,
	377, 416, 0, 320, 387, 350, 273, 349, 378, 415,
	414, 282, 441, 447, 448, 537, 0, 453, 617, 618,
	619, 462, 467, 468, 469, 471, 472, 473, 474, 538,
	555, 522, 492, 455, 546, 489, 493, 494, 558, 0,
	0, 0, 446, 339, 340, 0, 318, 266, 267, 612,
	304, 369, 560, 593, 485, 0, 547, 486, 495, 296,
	519, 531, 530, 365, 445, 0, 542, 545, 475, 611,
	0, 539, 554, 615, 553, 608, 375, 0, 396, 551,
	498, 0, 543, 517, 0, 544, 513, 548, 0, 487,
	0, 403, 427, 439, 456, 459, 488, 573, 574, 575,
	271, 458, 577, 578, 579, 580, 581, 582, 583, 576,
	430, 520, 497, 523, 438, 500, 499, 0, 0, 534,
	454, 535, 536, 359, 360, 361, 362, 322, 561, 289,
	457, 385, 0, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 526, 527, 524, 620, 0, 584, 585, 0,
	0, 451, 452, 317, 324, 470, 326, 288, 374, 319,
	436, 333, 0, 463, 528, 464, 587, 590, 588, 589,
	366, 329, 330, 400, 334, 344, 388, 435, 372, 393,
	286, 426, 401, 348, 514, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 568, 567, 566, 565, 564, 563, 562,
	0, 0, 511, 413, 298, 260, 294, 295, 302, 609,
	606, 417, 610, 0, 268, 491, 342, 0, 383, 316,
	556, 557, 0, 0, 216, 217, 218, 219, 220, 221,
	222, 223, 261, 224, 225, 226, 227, 228, 229, 230,
	233, 234, 235, 236, 237, 238, 239, 240, 559, 231,
	232, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 0, 0, 0, 262, 263,
	264, 265, 0, 0, 256, 257, 258, 259, 0, 0,
	0, 442, 443, 444, 466, 0, 428, 490, 607, 0,
	0, 0, 0, 0, 0, 0, 540, 552, 586, 0,
	595, 596, 598, 600, 599, 602, 0, 613, 481, 482,
	614, 592, 371, 0, 496, 529, 518, 601, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 311,
	0, 0, 341, 533, 515, 525, 516, 501, 502, 503,
	510, 321, 504, 505, 506, 476, 507, 477, 508, 509,
	0, 532, 483, 402, 355, 550, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 1452, 0, 0,
	0, 284, 206, 478, 597, 480, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1659, 0, 0, 0, 0, 0, 0, 274, 407,
	424, 285, 398, 437, 290, 405, 280, 370, 394, 0,
	0, 276, 422, 404, 352, 331, 332, 275, 0, 389,
	309, 323, 306, 368, 0, 421, 449, 305, 440, 0,
	432, 278, 0, 431, 367, 418, 423, 353, 347, 277,
	420, 351, 346, 335, 313, 465, 336, 337, 327, 379,
	345, 380, 328, 357, 356, 358, 0, 0, 0, 0,
	0, 460, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 0, 0, 594, 0,
	434, 0, 0, 0, 0, 0, 0, 406, 0, 0,
	338, 0, 0, 0, 450, 0, 392, 373, 616, 0,
	0, 390, 343, 419, 381, 425, 408, 433, 386, 382,
	269, 409, 308, 354, 281, 283, 303, 310, 312, 314,
	315, 363, 364, 376, 397, 410, 411, 412, 307, 291,
	391, 292, 325, 293, 270, 299, 297, 300, 399, 301,
	272, 377, 416, 0, 320, 387, 350, 273, 349, 378,
	415, 414, 282, 441, 447, 448, 537, 0, 453, 617,
	618, 619, 462, 467, 468, 469, 471, 472, 473, 474,
	538, 555, 522, 492, 455, 546, 489, 493, 494, 558,
	0, 0, 0, 446, 339, 340, 0, 318, 266, 267,
	612, 304, 369, 560, 593, 485, 0, 547, 486, 495,
	296, 519, 531, 530, 365, 445, 0, 542, 545, 475,
	611, 0, 539, 554, 615, 553, 608, 375, 0, 396,
	551, 498, 0, 543, 517, 0, 544, 513, 548, 0,
	487, 0, 403, 427, 439, 456, 459, 488, 573, 574,
	575, 271, 458, 577, 578, 579, 580, 581, 582, 583,
	576, 430, 520, 497, 523, 438, 500, 499, 0, 0,
	534, 454, 535, 536, 359, 360, 361, 362, 322, 561,
	289, 457, 385, 0, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 526, 527, 524, 620, 0, 584, 585,
	0, 0, 451, 452, 317, 324, 470, 326, 288, 374,
	319, 436, 333, 0, 463, 528, 464, 587, 590, 588,
	589, 366, 329, 330, 400, 334, 344, 388, 435, 372,
	393, 286, 426, 401, 348, 514, 541, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 569, 568, 567, 566, 565, 564, 563,
	562, 0, 0, 511, 413, 298, 260, 294, 295, 302,
	609, 606, 417, 610, 0, 268, 491, 342, 0, 383,
	316, 556, 557, 0, 0, 216, 217, 218, 219, 220,
	221, 222, 223, 261, 224, 225, 226, 227, 228, 229,
	230, 233, 234, 235, 236, 237, 238, 239, 240, 559,
	231, 232, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 0, 0, 0, 262,
	263, 264, 265, 0, 0, 256, 257, 258, 259, 0,
	0, 0, 442, 443, 444, 466, 0, 428, 490, 607,
	0, 0, 0, 0, 0, 0, 0, 540, 552, 586,
	0, 595, 596, 598, 600, 599, 602, 0, 613, 481,
	482, 614, 592, 371, 0, 496, 529, 518, 601, 484,
	0, 0, 0, 0, 0, 2370, 0, 0, 0, 0,
	311, 0, 0, 341, 533, 515, 525, 516, 501, 502,
	503, 510, 321, 504, 505, 506, 476, 507, 477, 508,
	509, 0, 532, 483, 402, 355, 550, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 0, 0, 2372, 0,
	0, 0, 284, 206, 478, 597, 480, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	407, 424, 285, 398, 437, 290, 405, 280, 370, 394,
	0, 0, 276, 422, 404, 352, 331, 332, 275, 0,
	389, 309, 323, 306, 368, 0, 421, 449, 305, 440,
	0, 432, 278, 0, 431, 367, 418, 423, 353, 347,
	277, 420, 351, 346, 335, 313, 465, 336, 337, 327,
	379, 345, 380, 328, 357, 356, 358, 0, 0, 0,
	0, 0, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 591, 0, 0, 594,
	0, 434, 0, 0, 0, 0, 0, 0, 406, 0,
	0, 338, 0, 0, 0, 450, 0, 392, 373, 616,
	0, 0, 390, 343, 419, 381, 425, 408, 433, 386,
	382, 269, 409, 308, 354, 281, 283, 303, 310, 312,
	314, 315, 363, 364, 376, 397, 410, 411, 412, 307,
	291, 391, 292, 325, 293, 270, 299, 297, 300, 399,
	301, 272, 377, 416, 0, 320, 387, 350, 273, 349,
	378, 415, 414, 282, 441, 447, 448, 537, 0, 453,
	617, 618, 619, 462, 467, 468, 469, 471, 472, 473,
	474, 538, 555, 522, 492, 455, 546, 489, 493, 494,
	558, 0, 0, 0, 446, 339, 340, 0, 318, 266,
	267, 612, 304, 369, 560, 593, 485, 0, 547, 486,
	495, 296, 519, 531, 530, 365, 445, 0, 542, 545,
	475, 611, 0, 539, 554, 615, 553, 608, 375, 0,
	396, 551, 498, 0, 543, 517, 0, 544, 513, 548,
	0, 487, 0, 403, 427, 439, 456, 459, 488, 573,
	574, 575, 271, 458, 577, 578, 579, 580, 581, 582,
	583, 576, 430, 520, 497, 523, 438, 500, 499, 0,
	0, 534, 454, 535, 536, 359, 360, 361, 362, 322,
	561, 289, 457, 385, 0, 521, 0, 0, 0, 0,
	0, 0, 0, 0, 526, 527, 524, 620, 0, 584,
	585, 0, 0, 451, 452, 317, 324, 470, 326, 288,
	374, 319, 436, 333, 0, 463, 528, 464, 587, 590,
	588, 589, 366, 329, 330, 400, 334, 344, 388, 435,
	372, 393, 286, 426, 401, 348, 514, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 568, 567, 566, 565, 564,
	563, 562, 0, 0, 511, 413, 298, 260, 294, 295,
	302, 609, 606, 417, 610, 0, 268, 491, 342, 0,
	383, 316, 556, 557, 0, 0, 216, 217, 218, 219,
	220, 221, 222, 223, 261, 224, 225, 226, 227, 228,
	229, 230, 233, 234, 235, 236, 237, 238, 239, 240,
	559, 231, 232, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 0, 0, 0,
	262, 263, 264, 265, 0, 0, 256, 257, 258, 259,
	0, 0, 0, 442, 443, 444, 466, 0, 428, 490,
	607, 0, 0, 0, 0, 0, 0, 0, 540, 552,
	586, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	481, 482, 614, 592, 371, 0, 496, 529, 518, 601,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 0, 0, 341, 533, 515, 525, 516, 501,
	502, 503, 510, 321, 504, 505, 506, 476, 507, 477,
	508, 509, 0, 532, 483, 402, 355, 550, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 2988,
	2990, 0, 0, 284, 206, 478, 597, 480, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 407, 424, 285, 398, 437, 290, 405, 280, 370,
	394, 0, 0, 276, 422, 404, 352, 331, 332, 275,
	0, 389, 309, 323, 306, 368, 0, 421, 449, 305,
	440, 0, 432, 278, 0, 431, 367, 418, 423, 353,
	347, 277, 420, 351, 346, 335, 313, 465, 336, 337,
	327, 379, 345, 380, 328, 357, 356, 358, 0, 0,
	0, 0, 0, 460, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	594, 0, 434, 0, 0, 0, 0, 0, 0, 406,
	0, 0, 338, 0, 0, 0, 450, 0, 392, 373,
	616, 0, 0, 390, 343, 419, 381, 425, 408, 433,
	386, 382, 269, 409, 308, 354, 281, 283, 303, 310,
	312, 314, 315, 363, 364, 376, 397, 410, 411, 412,
	307, 291, 391, 292, 325, 293, 270, 299, 297, 300,
	399, 301, 272, 377, 416, 0, 320, 387, 350, 273,
	349, 378, 415, 414, 282, 441, 447, 448, 537, 0,
	453, 617, 618, 619, 462, 467, 468, 469, 471, 472,
	473, 474, 538, 555, 522, 492, 455, 546, 489, 493,
	494, 558, 0, 0, 0, 446, 339, 340, 0, 318,
	266, 267, 612, 304, 369, 560, 593, 485, 0, 547,
	486, 495, 296, 519, 531, 530, 365, 445, 0, 542,
	545, 475, 611, 0, 539, 554, 615, 553, 608, 375,
	0, 396, 551, 498, 0, 543, 517, 0, 544, 513,
	548, 0, 487, 0, 403, 427, 439, 456, 459, 488,
	573, 574, 575, 271, 458, 577, 578, 579, 580, 581,
	582, 583, 576, 430, 520, 497, 523, 438, 500, 499,
	0, 0, 534, 454, 535, 536, 359, 360, 361, 362,
	322, 561, 289, 457, 385, 0, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 527, 524, 620, 0,
	584, 585, 0, 0, 451, 452, 317, 324, 470, 326,
	288, 374, 319, 436, 333, 0, 463, 528, 464, 587,
	590, 588, 589, 366, 329, 330, 400, 334, 344, 388,
	435, 372, 393, 286, 426, 401, 348, 514, 541, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 568, 567, 566, 565,
	564, 563, 562, 0, 0, 511, 413, 298, 260, 294,
	295, 302, 609, 606, 417, 610, 0, 268, 491, 342,
	0, 383, 316, 556, 557, 0, 0, 216, 217, 218,
	219, 220, 221, 222, 223, 261, 224, 225, 226, 227,
	228, 229, 230, 233, 234, 235, 236, 237, 238, 239,
	240, 559, 231, 232, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 0, 0,
	0, 262, 263, 264, 265, 0, 0, 256, 257, 258,
	259, 0, 0, 0, 442, 443, 444, 466, 0, 428,
	490, 607, 0, 0, 0, 0, 0, 0, 0, 540,
	552, 586, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 481, 482, 614, 592, 371, 0, 496, 529, 518,
	601, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 2391, 0, 341, 533, 515, 525, 516,
	501, 502, 503, 510, 321, 504, 505, 506, 476, 507,
	477, 508, 509, 0, 532, 483, 402, 355, 550, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	1452, 0, 0, 0, 284, 206, 478, 597, 480, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 407, 424, 285, 398, 437, 290, 405, 280,
	370, 394, 0, 0, 276, 422, 404, 352, 331, 332,
	275, 0, 389, 309, 323, 306, 368, 0, 421, 449,
	305, 440, 0, 432, 278, 0, 431, 367, 418, 423,
	353, 347, 277, 420, 351, 346, 335, 313, 465, 336,
	337, 327, 379, 345, 380, 328, 357, 356, 358, 0,
	0, 0, 0, 0, 460, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 594, 0, 434, 0, 0, 0, 0, 0, 0,
	406, 0, 0, 338, 0, 0, 0, 450, 0, 392,
	373, 616, 0, 0, 390, 343, 419, 381, 425, 408,
	433, 386, 382, 269, 409, 308, 354, 281, 283, 303,
	310, 312, 314, 315, 363, 364, 376, 397, 410, 411,
	412, 307, 291, 391, 292, 325, 293, 270, 299, 297,
	300, 399, 301, 272, 377, 416, 0, 320, 387, 350,
	273, 349, 378, 415, 414, 282, 441, 447, 448, 537,
	0, 453, 617, 618, 619, 462, 467, 468, 469, 471,
	472, 473, 474, 538, 555, 522, 492, 455, 546, 489,
	493, 494, 558, 0, 0, 0, 446, 339, 340, 0,
	318, 266, 267, 612, 304, 369, 560, 593, 485, 0,
	547, 486, 495, 296, 519, 531, 530, 365, 445, 0,
	542, 545, 475, 611, 0, 539, 554, 615, 553, 608,
	375, 0, 396, 551, 498, 0, 543, 517, 0, 544,
	513, 548, 0, 487, 0, 403, 427, 439, 456, 459,
	488, 573, 574, 575, 271, 458, 577, 578, 579, 580,
	581, 582, 583, 576, 430, 520, 497, 523, 438, 500,
	499, 0, 0, 534, 454, 535, 536, 359, 360, 361,
	362, 322, 561, 289, 457, 385, 0, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 526, 527, 524, 620,
	0, 584, 585, 0, 0, 451, 452, 317, 324, 470,
	326, 288, 374, 319, 436, 333, 0, 463, 528, 464,
	587, 590, 588, 589, 366, 329, 330, 400, 334, 344,
	388, 435, 372, 393, 286, 426, 401, 348, 514, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 568, 567, 566,
	565, 564, 563, 562, 0, 0, 511, 413, 298, 260,
	294, 295, 302, 609, 606, 417, 610, 0, 268, 491,
	342, 0, 383, 316, 556, 557, 0, 0, 216, 217,
	218, 219, 220, 221, 222, 223, 261, 224, 225, 226,
	227, 228, 229, 230, 233, 234, 235, 236, 237, 238,
	239, 240, 559, 231, 232, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 0,
	0, 0, 262, 263, 264, 265, 0, 0, 256, 257,
	258, 259, 0, 0, 0, 442, 443, 444, 466, 0,
	428, 490, 607, 0, 0, 0, 0, 0, 0, 0,
	540, 552, 586, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 481, 482, 614, 592, 371, 0, 496, 529,
	518, 601, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 311, 0, 0, 341, 533, 515, 525,
	516, 501, 502, 503, 510, 321, 504, 505, 506, 476,
	507, 477, 508, 509, 0, 532, 483, 402, 355, 550,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 284, 206, 478, 597, 480,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 407, 424, 285, 398, 437, 290, 405,
	280, 370, 394, 0, 0, 276, 422, 404, 352, 331,
	332, 275, 0, 389, 309, 323, 306, 368, 0, 421,
	449, 305, 440, 0, 432, 278, 0, 431, 367, 418,
	423, 353, 347, 277, 420, 351, 346, 335, 313, 465,
	336, 337, 327, 379, 345, 380, 328, 357, 356, 358,
	0, 0, 0, 0, 0, 460, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	0, 0, 594, 0, 434, 0, 626, 0, 0, 0,
	0, 406, 0, 0, 338, 0, 0, 0, 450, 0,
	392, 373, 616, 0, 0, 390, 343, 419, 381, 425,
	408, 433, 386, 382, 269, 409, 308, 354, 281, 283,
	303, 310, 312, 314, 315, 363, 364, 376, 397, 410,
	411, 412, 307, 291, 391, 292, 325, 293, 270, 299,
	297, 300, 399, 301, 272, 377, 416, 0, 320, 387,
	350, 273, 349, 378, 415, 414, 282, 441, 447, 448,
	537, 0, 453, 617, 618, 619, 462, 467, 468, 469,
	471, 472, 473, 474, 538, 555, 522, 492, 455, 546,
	489, 493, 494, 558, 0, 0, 0, 446, 339, 340,
	0, 318, 266, 267, 612, 304, 369, 560, 593, 485,
	0, 547, 486, 495, 296, 519, 531, 530, 365, 445,
	0, 542, 545, 475, 611, 0, 539, 554, 615, 553,
	608, 375, 0, 396, 551, 498, 0, 543, 517, 0,
	544, 513, 548, 0, 487, 0, 403, 427, 439, 456,
	459, 488, 573, 574, 575, 271, 458, 577, 578, 579,
	580, 581, 582, 583, 576, 430, 520, 497, 523, 438,
	500, 499, 0, 0, 534, 454, 535, 536, 359, 360,
	361, 362, 322, 561, 289, 457, 385, 0, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 526, 527, 524,
	620, 0, 584, 585, 0, 0, 451, 452, 317, 324,
	470, 326, 288, 374, 319, 436, 333, 0, 463, 528,
	464, 587, 590, 588, 589, 366, 329, 330, 400, 334,
	344, 388, 435, 372, 393, 286, 426, 401, 348, 514,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 568, 567,
	566, 565, 564, 563, 562, 0, 0, 511, 413, 298,
	260, 294, 295, 302, 609, 606, 417, 610, 0, 268,
	491, 342, 0, 383, 316, 556, 557, 0, 0, 216,
	217, 218, 219, 220, 221, 222, 223, 261, 224, 225,
	226, 227, 228, 229, 230, 233, 234, 235, 236, 237,
	238, 239, 240, 559, 231, 232, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	0, 0, 0, 262, 263, 264, 265, 0, 0, 256,
	257, 258, 259, 0, 0, 0, 442, 443, 444, 466,
	0, 428, 490, 607, 0, 0, 0, 0, 0, 0,
	0, 540, 552, 586, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 481, 482, 614, 592, 371, 0, 496,
	529, 518, 601, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 341, 533, 515,
	525, 516, 501, 502, 503, 510, 321, 504, 505, 506,
	476, 507, 477, 508, 509, 0, 532, 483, 402, 355,
	550, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	807, 0, 0, 0, 0, 0, 284, 206, 478, 597,
	480, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 407, 424, 285, 398, 437, 290,
	405, 280, 370, 394, 0, 0, 276, 422, 404, 352,
	331, 332, 275, 0, 389, 309, 323, 306, 368, 0,
	421, 449, 305, 440, 0, 432, 278, 0, 431, 367,
	418, 423, 353, 347, 277, 420, 351, 346, 335, 313,
	465, 336, 337, 327, 379, 345, 380, 328, 357, 356,
	358, 0, 0, 0, 0, 0, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 0, 0, 594, 0, 434, 0, 0, 0, 0,
	0, 0, 406, 0, 0, 338, 0, 0, 0, 450,
	0, 392, 373, 616, 0, 0, 390, 343, 419, 381,
	425, 408, 433, 386, 382, 269, 409, 308, 354, 281,
	283, 303, 310, 312, 314, 315, 363, 364, 376, 397,
	410, 411, 412, 307, 291, 391, 292, 325, 293, 270,
	299, 297, 300, 399, 301, 272, 377, 416, 0, 320,
	387, 350, 273, 349, 378, 415, 414, 282, 441, 447,
	448, 537, 0, 453, 617, 618, 619, 462, 467, 468,
	469, 471, 472, 473, 474, 538, 555, 522, 492, 455,
	546, 489, 493, 494, 558, 0, 0, 0, 446, 339,
	340, 0, 318, 266, 267, 612, 304, 369, 560, 593,
	485, 0, 547, 486, 495, 296, 519, 531, 530, 365,
	445, 0, 542, 545, 475, 611, 0, 539, 554, 615,
	553, 608, 375, 0, 396, 551, 498, 0, 543, 517,
	0, 544, 513, 548, 0, 487, 0, 403, 427, 439,
	456, 459, 488, 573, 574, 575, 271, 458, 577, 578,
	579, 580, 581, 582, 583, 576, 430, 520, 497, 523,
	438, 500, 499, 0, 0, 534, 454, 535, 536, 359,
	360, 361, 362, 322, 561, 289, 457, 385, 0, 521,
	0, 0, 0, 0, 0, 0, 0, 0, 526, 527,
	524, 620, 0, 584, 585, 0, 0, 451, 452, 317,
	324, 470, 326, 288, 374, 319, 436, 333, 0, 463,
	528, 464, 587, 590, 588, 589, 366, 329, 330, 400,
	334, 344, 388, 435, 372, 393, 286, 426, 401, 348,
	514, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 568,
	567, 566, 565, 564, 563, 562, 0, 0, 511, 413,
	298, 260, 294, 295, 302, 609, 606, 417, 610, 0,
	268, 491, 342, 0, 383, 316, 556, 557, 0, 0,
	216, 217, 218, 219, 220, 221, 222, 223, 261, 224,
	225, 226, 227, 228, 229, 230, 233, 234, 235, 236,
	237, 238, 239, 240, 559, 231, 232, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 0, 0, 0, 262, 263, 264, 265, 0, 0,
	256, 257, 258, 259, 0, 0, 0, 442, 443, 444,
	466, 0, 428, 490, 607, 0, 0, 0, 0, 0,
	0, 0, 540, 552, 586, 0, 595, 596, 598, 600,
	599, 602, 0, 613, 481, 482, 614, 592, 371, 0,
	496, 529, 518, 601, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 311, 0, 0, 341, 533,
	515, 525, 516, 501, 502, 503, 510, 321, 504, 505,
	506, 476, 507, 477, 508, 509, 0, 532, 483, 402,
	355, 550, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3761, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 284, 206, 478,
	597, 480, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 407, 424, 285, 398, 437,
	290, 405, 280, 370, 394, 0, 0, 276, 422, 404,
	352, 331, 332, 275, 0, 389, 309, 323, 306, 368,
	0, 421, 449, 305, 440, 0, 432, 278, 0, 431,
	367, 418, 423, 353, 347, 277, 420, 351, 346, 335,
	313, 465, 336, 337, 327, 379, 345, 380, 328, 357,
	356, 358, 0, 0, 0, 0, 0, 460, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 591, 0, 0, 594, 0, 434, 0, 0, 0,
	0, 0, 0, 406, 0, 0, 338, 0, 0, 0,
	450, 0, 392, 373, 616, 0, 0, 390, 343, 419,
	381, 425, 408, 433, 386, 382, 269, 409, 308, 354,
	281, 283, 303, 310, 312, 314, 315, 363, 364, 376,
	397, 410, 411, 412, 307, 291, 391, 292, 325, 293,
	270, 299, 297, 300, 399, 301, 272, 377, 416, 0,
	320, 387, 350, 273, 349, 378, 415, 414, 282, 441,
	447, 448, 537, 0, 453, 617, 618, 619, 462, 467,
	468, 469, 471, 472, 473, 474, 538, 555, 522, 492,
	455, 546, 489, 493, 494, 558, 0, 0, 0, 446,
	339, 340, 0, 318, 266, 267, 612, 304, 369, 560,
	593, 485, 0, 547, 486, 495, 296, 519, 531, 530,
	365, 445, 0, 542, 545, 475, 611, 0, 539, 554,
	615, 553, 608, 375, 0, 396, 551, 498, 0, 543,
	517, 0, 544, 513, 548, 0, 487, 0, 403, 427,
	439, 456, 459, 488, 573, 574, 575, 271, 458, 577,
	578, 579, 580, 581, 582, 583, 576, 430, 520, 497,
	523, 438, 500, 499, 0, 0, 534, 454, 535, 536,
	359, 360, 361, 362, 322, 561, 289, 457, 385, 0,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 526,
	527, 524, 620, 0, 584, 585, 0, 0, 451, 452,
	317, 324, 470, 326, 288, 374, 319, 436, 333, 0,
	463, 528, 464, 587, 590, 588, 589, 366, 329, 330,
	400, 334, 344, 388, 435, 372, 393, 286, 426, 401,
	348, 514, 541, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	568, 567, 566, 565, 564, 563, 562, 0, 0, 511,
	413, 298, 260, 294, 295, 302, 609, 606, 417, 610,
	0, 268, 491, 342, 0, 383, 316, 556, 557, 0,
	0, 216, 217, 218, 219, 220, 221, 222, 223, 261,
	224, 225, 226, 227, 228, 229, 230, 233, 234, 235,
	236, 237, 238, 239, 240, 559, 231, 232, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 0, 0, 0, 262, 263, 264, 265, 0,
	0, 256, 257, 258, 259, 0, 0, 0, 442, 443,
	444, 466, 0, 428, 490, 607, 0, 0, 0, 0,
	0, 0, 0, 540, 552, 586, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 481, 482, 614, 592, 371,
	0, 496, 529, 518, 601, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 341,
	533, 515, 525, 516, 501, 502, 503, 510, 321, 504,
	505, 506, 476, 507, 477, 508, 509, 0, 532, 483,
	402, 355, 550, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 3544, 0, 0, 0, 284, 206,
	478, 597, 480, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 407, 424, 285, 398,
	437, 290, 405, 280, 370, 394, 0, 0, 276, 422,
	404, 352, 331, 332, 275, 0, 389, 309, 323, 306,
	368, 0, 421, 449, 305, 440, 0, 432, 278, 0,
	431, 367, 418, 423, 353, 347, 277, 420, 351, 346,
	335, 313, 465, 336, 337, 327, 379, 345, 380, 328,
	357, 356, 358, 0, 0, 0, 0, 0, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 591, 0, 0, 594, 0, 434, 0, 0,
	0, 0, 0, 0, 406, 0, 0, 338, 0, 0,
	0, 450, 0, 392, 373, 616, 0, 0, 390, 343,
	419, 381, 425, 408, 433, 386, 382, 269, 409, 308,
	354, 281, 283, 303, 310, 312, 314, 315, 363, 364,
	376, 397, 410, 411, 412, 307, 291, 391, 292, 325,
	293, 270, 299, 297, 300, 399, 301, 272, 377, 416,
	0, 320, 387, 350, 273, 349, 378, 415, 414, 282,
	441, 447, 448, 537, 0, 453, 617, 618, 619, 462,
	467, 468, 469, 471, 472, 473, 474, 538, 555, 522,
	492, 455, 546, 489, 493, 494, 558, 0, 0, 0,
	446, 339, 340, 0, 318, 266, 267, 612, 304, 369,
	560, 593, 485, 0, 547, 486, 495, 296, 519, 531,
	530, 365, 445, 0, 542, 545, 475, 611, 0, 539,
	554, 615, 553, 608, 375, 0, 396, 551, 498, 0,
	543, 517, 0, 544, 513, 548, 0, 487, 0, 403,
	427, 439, 456, 459, 488, 573, 574, 575, 271, 458,
	577, 578, 579, 580, 581, 582, 583, 576, 430, 520,
	497, 523, 438, 500, 499, 0, 0, 534, 454, 535,
	536, 359, 360, 361, 362, 322, 561, 289, 457, 385,
	0, 521, 0, 0, 0, 0, 0, 0, 0, 0,
	526, 527, 524, 620, 0, 584, 585, 0, 0, 451,
	452, 317, 324, 470, 326, 288, 374, 319, 436, 333,
	0, 463, 528, 464, 587, 590, 588, 589, 366, 329,
	330, 400, 334, 344, 388, 435, 372, 393, 286, 426,
	401, 348, 514, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	569, 568, 567, 566, 565, 564, 563, 562, 0, 0,
	511, 413, 298, 260, 294, 295, 302, 609, 606, 417,
	610, 0, 268, 491, 342, 0, 383, 316, 556, 557,
	0, 0, 216, 217, 218, 219, 220, 221, 222, 223,
	261, 224, 225, 226, 227, 228, 229, 230, 233, 234,
	235, 236, 237, 238, 239, 240, 559, 231, 232, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 0, 0, 0, 262, 263, 264, 265,
	0, 0, 256, 257, 258, 259, 0, 0, 0, 442,
	443, 444, 466, 0, 428, 490, 607, 0, 0, 0,
	0, 0, 0, 0, 540, 552, 586, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 481, 482, 614, 592,
	371, 0, 496, 529, 518, 601, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 311, 0, 0,
	341, 533, 515, 525, 516, 501, 502, 503, 510, 321,
	504, 505, 506, 476, 507, 477, 508, 509, 0, 532,
	483, 402, 355, 550, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 284,
	206, 478, 597, 480, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 407, 424, 285,
	398, 437, 290, 405, 280, 370, 394, 0, 0, 276,
	422, 404, 352, 331, 332, 275, 0, 389, 309, 323,
	306, 368, 0, 421, 449, 305, 440, 0, 432, 278,
	0, 431, 367, 418, 423, 353, 347, 277, 420, 351,
	346, 335, 313, 465, 336, 337, 327, 379, 345, 380,
	328, 357, 356, 358, 0, 0, 0, 0, 0, 460,
	461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 594, 0, 434, 0,
	0, 0, 3671, 0, 0, 406, 0, 0, 338, 0,
	0, 0, 450, 0, 392, 373, 616, 0, 0, 390,
	343, 419, 381, 425, 408, 433, 386, 382, 269, 409,
	308, 354, 281, 283, 303, 310, 312, 314, 315, 363,
	364, 376, 397, 410, 411, 412, 307, 291, 391, 292,
	325, 293, 270, 299, 297, 300, 399, 301, 272, 377,
	416, 0, 320, 387, 350, 273, 349, 378, 415, 414,
	282, 441, 447, 448, 537, 0, 453, 617, 618, 619,
	462, 467, 468, 469, 471, 472, 473, 474, 538, 555,
	522, 492, 455, 546, 489, 493, 494, 558, 0, 0,
	0, 446, 339, 340, 0, 318, 266, 267, 612, 304,
	369, 560, 593, 485, 0, 547, 486, 495, 296, 519,
	531, 530, 365, 445, 0, 542, 545, 475, 611, 0,
	539, 554, 615, 553, 608, 375, 0, 396, 551, 498,
	0, 543, 517, 0, 544, 513, 548, 0, 487, 0,
	403, 427, 439, 456, 459, 488, 573, 574, 575, 271,
	458, 577, 578, 579, 580, 581, 582, 583, 576, 430,
	520, 497, 523, 438, 500, 499, 0, 0, 534, 454,
	535, 536, 359, 360, 361, 362, 322, 561, 289, 457,
	385, 0, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 526, 527, 524, 620, 0, 584, 585, 0, 0,
	451, 452, 317, 324, 470, 326, 288, 374, 319, 436,
	333, 0, 463, 528, 464, 587, 590, 588, 589, 366,
	329, 330, 400, 334, 344, 388, 435, 372, 393, 286,
	426, 401, 348, 514, 541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 568, 567, 566, 565, 564, 563, 562, 0,
	0, 511, 413, 298, 260, 294, 295, 302, 609, 606,
	417, 610, 0, 268, 491, 342, 0, 383, 316, 556,
	557, 0, 0, 216, 217, 218, 219, 220, 221, 222,
	223, 261, 224, 225, 226, 227, 228, 229, 230, 233,
	234, 235, 236, 237, 238, 239, 240, 559, 231, 232,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 0, 0, 0, 262, 263, 264,
	265, 0, 0, 256, 257, 258, 259, 0, 0, 0,
	442, 443, 444, 466, 0, 428, 490, 607, 0, 0,
	0, 0, 0, 0, 0, 540, 552, 586, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 481, 482, 614,
	592, 371, 0, 496, 529, 518, 601, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 341, 533, 515, 525, 516, 501, 502, 503, 510,
	321, 504, 505, 506, 476, 507, 477, 508, 509, 0,
	532, 483, 402, 355, 550, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3395, 0, 0, 205, 0, 0, 0, 0, 0, 0,
	284, 206, 478, 597, 480, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 407, 424,
	285, 398, 437, 290, 405, 280, 370, 394, 0, 0,
	276, 422, 404, 352, 331, 332, 275, 0, 389, 309,
	323, 306, 368, 0, 421, 449, 305, 440, 0, 432,
	278, 0, 431, 367, 418, 423, 353, 347, 277, 420,
	351, 346, 335, 313, 465, 336, 337, 327, 379, 345,
	380, 328, 357, 356, 358, 0, 0, 0, 0, 0,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 0, 0, 594, 0, 434,
	0, 0, 0, 0, 0, 0, 406, 0, 0, 338,
	0, 0, 0, 450, 0, 392, 373, 616, 0, 0,
	390, 343, 419, 381, 425, 408, 433, 386, 382, 269,
	409, 308, 354, 281, 283, 303, 310, 312, 314, 315,
	363, 364, 376, 397, 410, 411, 412, 307, 291, 391,
	292, 325, 293, 270, 299, 297, 300, 399, 301, 272,
	377, 416, 0, 320, 387, 350, 273, 349, 378, 415,
	414, 282, 441, 447, 448, 537, 0, 453, 617, 618,
	619, 462, 467, 468, 469, 471, 472, 473, 474, 538,
	555, 522, 492, 455, 546, 489, 493, 494, 558, 0,
	0, 0, 446, 339, 340, 0, 318, 266, 267, 612,
	304, 369, 560, 593, 485, 0, 547, 486, 495, 296,
	519, 531, 530, 365, 445, 0, 542, 545, 475, 611,
	0, 539, 554, 615, 553, 608, 375, 0, 396, 551,
	498, 0, 543, 517, 0, 544, 513, 548, 0, 487,
	0, 403, 427, 439, 456, 459, 488, 573, 574, 575,
	271, 458, 577, 578, 579, 580, 581, 582, 583, 576,
	430, 520, 497, 523, 438, 500, 499, 0, 0, 534,
	454, 535, 536, 359, 360, 361, 362, 322, 561, 289,
	457, 385, 0, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 526, 527, 524, 620, 0, 584, 585, 0,
	0, 451, 452, 317, 324, 470, 326, 288, 374, 319,
	436, 333, 0, 463, 528, 464, 587, 590, 588, 589,
	366, 329, 330, 400, 334, 344, 388, 435, 372, 393,
	286, 426, 401, 348, 514, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 568, 567, 566, 565, 564, 563, 562,
	0, 0, 511, 413, 298, 260, 294, 295, 302, 609,
	606, 417, 610, 0, 268, 491, 342, 0, 383, 316,
	556, 557, 0, 0, 216, 217, 218, 219, 220, 221,
	222, 223, 261, 224, 225, 226, 227, 228, 229, 230,
	233, 234, 235, 236, 237, 238, 239, 240, 559, 231,
	232, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 0, 0, 0, 262, 263,
	264, 265, 0, 0, 256, 257, 258, 259, 0, 0,
	0, 442, 443, 444, 466, 0, 428, 490, 607, 0,
	0, 0, 0, 0, 0, 0, 540, 552, 586, 0,
	595, 596, 598, 600, 599, 602, 0, 613, 481, 482,
	614, 592, 371, 0, 496, 529, 518, 601, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 311,
	0, 0, 341, 533, 515, 525, 516, 501, 502, 503,
	510, 321, 504, 505, 506, 476, 507, 477, 508, 509,
	0, 532, 483, 402, 355, 550, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3559, 0, 205, 0, 0, 0, 0, 0,
	0, 284, 206, 478, 597, 480, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 407,
	424, 285, 398, 437, 290, 405, 280, 370, 394, 0,
	0, 276, 422, 404, 352, 331, 332, 275, 0, 389,
	309, 323, 306, 368, 0, 421, 449, 305, 440, 0,
	432, 278, 0, 431, 367, 418, 423, 353, 347, 277,
	420, 351, 346, 335, 313, 465, 336, 337, 327, 379,
	345, 380, 328, 357, 356, 358, 0, 0, 0, 0,
	0, 460, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 0, 0, 594, 0,
	434, 0, 0, 0, 0, 0, 0, 406, 0, 0,
	338, 0, 0, 0, 450, 0, 392, 373, 616, 0,
	0, 390, 343, 419, 381, 425, 408, 433, 386, 382,
	269, 409, 308, 354, 281, 283, 303, 310, 312, 314,
	315, 363, 364, 376, 397, 410, 411, 412, 307, 291,
	391, 292, 325, 293, 270, 299, 297, 300, 399, 301,
	272, 377, 416, 0, 320, 387, 350, 273, 349, 378,
	415, 414, 282, 441, 447, 448, 537, 0, 453, 617,
	618, 619, 462, 467, 468, 469, 471, 472, 473, 474,
	538, 555, 522, 492, 455, 546, 489, 493, 494, 558,
	0, 0, 0, 446, 339, 340, 0, 318, 266, 267,
	612, 304, 369, 560, 593, 485, 0, 547, 486, 495,
	296, 519, 531, 530, 365, 445, 0, 542, 545, 475,
	611, 0, 539, 554, 615, 553, 608, 375, 0, 396,
	551, 498, 0, 543, 517, 0, 544, 513, 548, 0,
	487, 0, 403, 427, 439, 456, 459, 488, 573, 574,
	575, 271, 458, 577, 578, 579, 580, 581, 582, 583,
	576, 430, 520, 497, 523, 438, 500, 499, 0, 0,
	534, 454, 535, 536, 359, 360, 361, 362, 322, 561,
	289, 457, 385, 0, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 526, 527, 524, 620, 0, 584, 585,
	0, 0, 451, 452, 317, 324, 470, 326, 288, 374,
	319, 436, 333, 0, 463, 528, 464, 587, 590, 588,
	589, 366, 329, 330, 400, 334, 344, 388, 435, 372,
	393, 286, 426, 401, 348, 514, 541, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 569, 568, 567, 566, 565, 564, 563,
	562, 0, 0, 511, 413, 298, 260, 294, 295, 302,
	609, 606, 417, 610, 0, 268, 491, 342, 0, 383,
	316, 556, 557, 0, 0, 216, 217, 218, 219, 220,
	221, 222, 223, 261, 224, 225, 226, 227, 228, 229,
	230, 233, 234, 235, 236, 237, 238, 239, 240, 559,
	231, 232, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 0, 0, 0, 262,
	263, 264, 265, 0, 0, 256, 257, 258, 259, 0,
	0, 0, 442, 443, 444, 466, 0, 428, 490, 607,
	0, 0, 0, 0, 0, 0, 0, 540, 552, 586,
	0, 595, 596, 598, 600, 599, 602, 0, 613, 481,
	482, 614, 592, 371, 0, 496, 529, 518, 601, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 341, 533, 515, 525, 516, 501, 502,
	503, 510, 321, 504, 505, 506, 476, 507, 477, 508,
	509, 0, 532, 483, 402, 355, 550, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 0, 0, 0, 0,
	0, 0, 284, 206, 478, 597, 480, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	407, 424, 285, 398, 437, 290, 405, 280, 370, 394,
	0, 0, 276, 422, 404, 352, 331, 332, 275, 0,
	389, 309, 323, 306, 368, 0, 421, 449, 305, 440,
	0, 432, 278, 0, 431, 367, 418, 423, 353, 347,
	277, 420, 351, 346, 335, 313, 465, 336, 337, 327,
	379, 345, 380, 328, 357, 356, 358, 0, 0, 0,
	0, 0, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 591, 0, 0, 594,
	0, 434, 0, 0, 0, 3483, 0, 0, 406, 0,
	0, 338, 0, 0, 0, 450, 0, 392, 373, 616,
	0, 0, 390, 343, 419, 381, 425, 408, 433, 386,
	382, 269, 409, 308, 354, 281, 283, 303, 310, 312,
	314, 315, 363, 364, 376, 397, 410, 411, 412, 307,
	291, 391, 292, 325, 293, 270, 299, 297, 300, 399,
	301, 272, 377, 416, 0, 320, 387, 350, 273, 349,
	378, 415, 414, 282, 441, 447, 448, 537, 0, 453,
	617, 618, 619, 462, 467, 468, 469, 471, 472, 473,
	474, 538, 555, 522, 492, 455, 546, 489, 493, 494,
	558, 0, 0, 0, 446, 339, 340, 0, 318, 266,
	267, 612, 304, 369, 560, 593, 485, 0, 547, 486,
	495, 296, 519, 531, 530, 365, 445, 0, 542, 545,
	475, 611, 0, 539, 554, 615, 553, 608, 375, 0,
	396, 551, 498, 0, 543, 517, 0, 544, 513, 548,
	0, 487, 0, 403, 427, 439, 456, 459, 488, 573,
	574, 575, 271, 458, 577, 578, 579, 580, 581, 582,
	583, 576, 430, 520, 497, 523, 438, 500, 499, 0,
	0, 534, 454, 535, 536, 359, 360, 361, 362, 322,
	561, 289, 457, 385, 0, 521, 0, 0, 0, 0,
	0, 0, 0, 0, 526, 527, 524, 620, 0, 584,
	585, 0, 0, 451, 452, 317, 324, 470, 326, 288,
	374, 319, 436, 333, 0, 463, 528, 464, 587, 590,
	588, 589, 366, 329, 330, 400, 334, 344, 388, 435,
	372, 393, 286, 426, 401, 348, 514, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 568, 567, 566, 565, 564,
	563, 562, 0, 0, 511, 413, 298, 260, 294, 295,
	302, 609, 606, 417, 610, 0, 268, 491, 342, 0,
	383, 316, 556, 557, 0, 0, 216, 217, 218, 219,
	220, 221, 222, 223, 261, 224, 225, 226, 227, 228,
	229, 230, 233, 234, 235, 236, 237, 238, 239, 240,
	559, 231, 232, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 0, 0, 0,
	262, 263, 264, 265, 0, 0, 256, 257, 258, 259,
	0, 0, 0, 442, 443, 444, 466, 0, 428, 490,
	607, 0, 0, 0, 0, 0, 0, 0, 540, 552,
	586, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	481, 482, 614, 592, 371, 0, 496, 529, 518, 601,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 0, 0, 341, 533, 515, 525, 516, 501,
	502, 503, 510, 321, 504, 505, 506, 476, 507, 477,
	508, 509, 0, 532, 483, 402, 355, 550, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 3021,
	0, 0, 0, 284, 206, 478, 597, 480, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 407, 424, 285, 398, 437, 290, 405, 280, 370,
	394, 0, 0, 276, 422, 404, 352, 331, 332, 275,
	0, 389, 309, 323, 306, 368, 0, 421, 449, 305,
	440, 0, 432, 278, 0, 431, 367, 418, 423, 353,
	347, 277, 420, 351, 346, 335, 313, 465, 336, 337,
	327, 379, 345, 380, 328, 357, 356, 358, 0, 0,
	0, 0, 0, 460, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	594, 0, 434, 0, 0, 0, 0, 0, 0, 406,
	0, 0, 338, 0, 0, 0, 450, 0, 392, 373,
	616, 0, 0, 390, 343, 419, 381, 425, 408, 433,
	386, 382, 269, 409, 308, 354, 281, 283, 303, 310,
	312, 314, 315, 363, 364, 376, 397, 410, 411, 412,
	307, 291, 391, 292, 325, 293, 270, 299, 297, 300,
	399, 301, 272, 377, 416, 0, 320, 387, 350, 273,
	349, 378, 415, 414, 282, 441, 447, 448, 537, 0,
	453, 617, 618, 619, 462, 467, 468, 469, 471, 472,
	473, 474, 538, 555, 522, 492, 455, 546, 489, 493,
	494, 558, 0, 0, 0, 446, 339, 340, 0, 318,
	266, 267, 612, 304, 369, 560, 593, 485, 0, 547,
	486, 495, 296, 519, 531, 530, 365, 445, 0, 542,
	545, 475, 611, 0, 539, 554, 615, 553, 608, 375,
	0, 396, 551, 498, 0, 543, 517, 0, 544, 513,
	548, 0, 487, 0, 403, 427, 439, 456, 459, 488,
	573, 574, 575, 271, 458, 577, 578, 579, 580, 581,
	582, 583, 576, 430, 520, 497, 523, 438, 500, 499,
	0, 0, 534, 454, 535, 536, 359, 360, 361, 362,
	322, 561, 289, 457, 385, 0, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 527, 524, 620, 0,
	584, 585, 0, 0, 451, 452, 317, 324, 470, 326,
	288, 374, 319, 436, 333, 0, 463, 528, 464, 587,
	590, 588, 589, 366, 329, 330, 400, 334, 344, 388,
	435, 372, 393, 286, 426, 401, 348, 514, 541, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 568, 567, 566, 565,
	564, 563, 562, 0, 0, 511, 413, 298, 260, 294,
	295, 302, 609, 606, 417, 610, 0, 268, 491, 342,
	0, 383, 316, 556, 557, 0, 0, 216, 217, 218,
	219, 220, 221, 222, 223, 261, 224, 225, 226, 227,
	228, 229, 230, 233, 234, 235, 236, 237, 238, 239,
	240, 559, 231, 232, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 0, 0,
	0, 262, 263, 264, 265, 0, 0, 256, 257, 258,
	259, 0, 0, 0, 442, 443, 444, 466, 0, 428,
	490, 607, 0, 0, 0, 0, 0, 0, 0, 540,
	552, 586, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 481, 482, 614, 592, 371, 0, 496, 529, 518,
	601, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 341, 533, 515, 525, 516,
	501, 502, 503, 510, 321, 504, 505, 506, 476, 507,
	477, 508, 509, 0, 532, 483, 402, 355, 550, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 284, 206, 478, 597, 480, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3039, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 407, 424, 285, 398, 437, 290, 405, 280,
	370, 394, 0, 0, 276, 422, 404, 352, 331, 332,
	275, 0, 389, 309, 323, 306, 368, 0, 421, 449,
	305, 440, 0, 432, 278, 0, 431, 367, 418, 423,
	353, 347, 277, 420, 351, 346, 335, 313, 465, 336,
	337, 327, 379, 345, 380, 328, 357, 356, 358, 0,
	0, 0, 0, 0, 460, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 594, 0, 434, 0, 0, 0, 0, 0, 0,
	406, 0, 0, 338, 0, 0, 0, 450, 0, 392,
	373, 616, 0, 0, 390, 343, 419, 381, 425, 408,
	433, 386, 382, 269, 409, 308, 354, 281, 283, 303,
	310, 312, 314, 315, 363, 364, 376, 397, 410, 411,
	412, 307, 291, 391, 292, 325, 293, 270, 299, 297,
	300, 399, 301, 272, 377, 416, 0, 320, 387, 350,
	273, 349, 378, 415, 414, 282, 441, 447, 448, 537,
	0, 453, 617, 618, 619, 462, 467, 468, 469, 471,
	472, 473, 474, 538, 555, 522, 492, 455, 546, 489,
	493, 494, 558, 0, 0, 0, 446, 339, 340, 0,
	318, 266, 267, 612, 304, 369, 560, 593, 485, 0,
	547, 486, 495, 296, 519, 531, 530, 365, 445, 0,
	542, 545, 475, 611, 0, 539, 554, 615, 553, 608,
	375, 0, 396, 551, 498, 0, 543, 517, 0, 544,
	513, 548, 0, 487, 0, 403, 427, 439, 456, 459,
	488, 573, 574, 575, 271, 458, 577, 578, 579, 580,
	581, 582, 583, 576, 430, 520, 497, 523, 438, 500,
	499, 0, 0, 534, 454, 535, 536, 359, 360, 361,
	362, 322, 561, 289, 457, 385, 0, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 526, 527, 524, 620,
	0, 584, 585, 0, 0, 451, 452, 317, 324, 470,
	326, 288, 374, 319, 436, 333, 0, 463, 528, 464,
	587, 590, 588, 589, 366, 329, 330, 400, 334, 344,
	388, 435, 372, 393, 286, 426, 401, 348, 514, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 568, 567, 566,
	565, 564, 563, 562, 0, 0, 511, 413, 298, 260,
	294, 295, 302, 609, 606, 417, 610, 0, 268, 491,
	342, 0, 383, 316, 556, 557, 0, 0, 216, 217,
	218, 219, 220, 221, 222, 223, 261, 224, 225, 226,
	227, 228, 229, 230, 233, 234, 235, 236, 237, 238,
	239, 240, 559, 231, 232, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 0,
	0, 0, 262, 263, 264, 265, 0, 0, 256, 257,
	258, 259, 0, 0, 0, 442, 443, 444, 466, 0,
	428, 490, 607, 0, 0, 0, 0, 0, 0, 0,
	540, 552, 586, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 481, 482, 614, 592, 371, 0, 496, 529,
	518, 601, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 311, 0, 0, 341, 533, 515, 525,
	516, 501, 502, 503, 510, 321, 504, 505, 506, 476,
	507, 477, 508, 509, 0, 532, 483, 402, 355, 550,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1937, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 284, 206, 478, 597, 480,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 407, 424, 285, 398, 437, 290, 405,
	280, 370, 394, 0, 0, 276, 422, 404, 352, 331,
	332, 275, 0, 389, 309, 323, 306, 368, 0, 421,
	449, 305, 440, 0, 432, 278, 0, 431, 367, 418,
	423, 353, 347, 277, 420, 351, 346, 335, 313, 465,
	336, 337, 327, 379, 345, 380, 328, 357, 356, 358,
	0, 0, 0, 0, 0, 460, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	0, 0, 594, 0, 434, 0, 0, 0, 0, 0,
	0, 406, 0, 0, 338, 0, 0, 0, 450, 0,
	392, 373, 616, 0, 0, 390, 343, 419, 381, 425,
	408, 433, 386, 382, 269, 409, 308, 354, 281, 283,
	303, 310, 312, 314, 315, 363, 364, 376, 397, 410,
	411, 412, 307, 291, 391, 292, 325, 293, 270, 299,
	297, 300, 399, 301, 272, 377, 416, 0, 320, 387,
	350, 273, 349, 378, 415, 414, 282, 441, 447, 448,
	537, 0, 453, 617, 618, 619, 462, 467, 468, 469,
	471, 472, 473, 474, 538, 555, 522, 492, 455, 546,
	489, 493, 494, 558, 0, 0, 0, 446, 339, 340,
	0, 318, 266, 267, 612, 304, 369, 560, 593, 485,
	0, 547, 486, 495, 296, 519, 531, 530, 365, 445,
	0, 542, 545, 475, 611, 0, 539, 554, 615, 553,
	608, 375, 0, 396, 551, 498, 0, 543, 517, 0,
	544, 513, 548, 0, 487, 0, 403, 427, 439, 456,
	459, 488, 573, 574, 575, 271, 458, 577, 578, 579,
	580, 581, 582, 583, 576, 430, 520, 497, 523, 438,
	500, 499, 0, 0, 534, 454, 535, 536, 359, 360,
	361, 362, 322, 561, 289, 457, 385, 0, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 526, 527, 524,
	620, 0, 584, 585, 0, 0, 451, 452, 317, 324,
	470, 326, 288, 374, 319, 436, 333, 0, 463, 528,
	464, 587, 590, 588, 589, 366, 329, 330, 400, 334,
	344, 388, 435, 372, 393, 286, 426, 401, 348, 514,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 568, 567,
	566, 565, 564, 563, 562, 0, 0, 511, 413, 298,
	260, 294, 295, 302, 609, 606, 417, 610, 0, 268,
	491, 342, 0, 383, 316, 556, 557, 0, 0, 216,
	217, 218, 219, 220, 221, 222, 223, 261, 224, 225,
	226, 227, 228, 229, 230, 233, 234, 235, 236, 237,
	238, 239, 240, 559, 231, 232, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	0, 0, 0, 262, 263, 264, 265, 0, 0, 256,
	257, 258, 259, 0, 0, 0, 442, 443, 444, 466,
	0, 428, 490, 607, 0, 0, 0, 0, 0, 0,
	0, 540, 552, 586, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 481, 482, 614, 592, 371, 0, 496,
	529, 518, 601, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 341, 533, 515,
	525, 516, 501, 502, 503, 510, 321, 504, 505, 506,
	476, 507, 477, 508, 509, 0, 532, 483, 402, 355,
	550, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 284, 206, 478, 597,
	480, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 407, 424, 285, 398, 437, 290,
	405, 280, 370, 394, 0, 0, 276, 422, 404, 352,
	331, 332, 275, 0, 389, 309, 323, 306, 368, 0,
	421, 449, 305, 440, 0, 432, 278, 0, 431, 367,
	418, 423, 353, 347, 277, 420, 351, 346, 335, 313,
	465, 336, 337, 327, 379, 345, 380, 328, 357, 356,
	358, 0, 0, 0, 0, 0, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 0, 0, 594, 0, 434, 0, 0, 0, 0,
	0, 0, 406, 0, 0, 338, 0, 0, 0, 450,
	0, 392, 373, 616, 0, 0, 390, 343, 419, 381,
	425, 408, 433, 386, 382, 269, 409, 308, 354, 281,
	283, 303, 310, 312, 314, 315, 363, 364, 376, 397,
	410, 411, 412, 307, 291, 391, 292, 325, 293, 270,
	299, 297, 300, 399, 301, 272, 377, 416, 0, 320,
	387, 350, 273, 349, 378, 415, 414, 282, 441, 447,
	448, 537, 0, 453, 617, 618, 619, 462, 467, 468,
	469, 471, 472, 473, 474, 538, 555, 522, 492, 455,
	546, 489, 493, 494, 558, 0, 0, 0, 446, 339,
	340, 0, 318, 266, 267, 612, 304, 369, 560, 593,
	485, 0, 547, 486, 495, 296, 519, 531, 530, 365,
	445, 0, 542, 545, 475, 611, 0, 539, 554, 615,
	553, 608, 375, 0, 396, 551, 498, 0, 543, 517,
	0, 544, 513, 548, 0, 487, 0, 403, 427, 439,
	456, 459, 488, 573, 574, 575, 271, 458, 577, 578,
	579, 580, 581, 582, 583, 576, 430, 520, 497, 523,
	438, 500, 499, 0, 0, 534, 454, 535, 536, 359,
	360, 361, 362, 322, 561, 289, 457, 385, 0, 521,
	0, 0, 0, 0, 0, 0, 0, 0, 526, 527,
	524, 620, 0, 584, 585, 0, 0, 451, 452, 317,
	324, 470, 326, 288, 374, 319, 436, 333, 0, 463,
	528, 464, 587, 590, 588, 589, 366, 329, 330, 400,
	334, 344, 388, 435, 372, 393, 286, 426, 401, 348,
	514, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 568,
	567, 566, 565, 564, 563, 562, 0, 0, 511, 413,
	298, 260, 294, 295, 302, 609, 606, 417, 610, 0,
	268, 491, 342, 0, 383, 316, 556, 557, 0, 0,
	216, 217, 218, 219, 220, 221, 222, 223, 261, 224,
	225, 226, 227, 228, 229, 230, 233, 234, 235, 236,
	237, 238, 239, 240, 559, 231, 232, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 0, 0, 0, 262, 263, 264, 265, 0, 0,
	256, 257, 258, 259, 0, 0, 0, 442, 443, 444,
	466, 0, 428, 490, 607, 0, 0, 0, 0, 0,
	0, 0, 540, 552, 586, 0, 595, 596, 598, 600,
	599, 602, 0, 613, 481, 482, 614, 592, 371, 0,
	496, 529, 518, 601, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 311, 0, 0, 341, 533,
	515, 525, 516, 501, 502, 503, 510, 321, 504, 505,
	506, 476, 507, 477, 508, 509, 0, 532, 483, 402,
	355, 550, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 284, 206, 478,
	597, 480, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2892, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 407, 424, 285, 398, 437,
	290, 405, 280, 370, 394, 0, 0, 276, 422, 404,
	352, 331, 332, 275, 0, 389, 309, 323, 306, 368,
	0, 421, 449, 305, 440, 0, 432, 278, 0, 431,
	367, 418, 423, 353, 347, 277, 420, 351, 346, 335,
	313, 465, 336, 337, 327, 379, 345, 380, 328, 357,
	356, 358, 0, 0, 0, 0, 0, 460, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 591, 0, 0, 594, 0, 434, 0, 0, 0,
	0, 0, 0, 406, 0, 0, 338, 0, 0, 0,
	450, 0, 392, 373, 616, 0, 0, 390, 343, 419,
	381, 425, 408, 433, 386, 382, 269, 409, 308, 354,
	281, 283, 303, 310, 312, 314, 315, 363, 364, 376,
	397, 410, 411, 412, 307, 291, 391, 292, 325, 293,
	270, 299, 297, 300, 399, 301, 272, 377, 416, 0,
	320, 387, 350, 273, 349, 378, 415, 414, 282, 441,
	447, 448, 537, 0, 453, 617, 618, 619, 462, 467,
	468, 469, 471, 472, 473, 474, 538, 555, 522, 492,
	455, 546, 489, 493, 494, 558, 0, 0, 0, 446,
	339, 340, 0, 318, 266, 267, 612, 304, 369, 560,
	593, 485, 0, 547, 486, 495, 296, 519, 531, 530,
	365, 445, 0, 542, 545, 475, 611, 0, 539, 554,
	615, 553, 608, 375, 0, 396, 551, 498, 0, 543,
	517, 0, 544, 513, 548, 0, 487, 0, 403, 427,
	439, 456, 459, 488, 573, 574, 575, 271, 458, 577,
	578, 579, 580, 581, 582, 583, 576, 430, 520, 497,
	523, 438, 500, 499, 0, 0, 534, 454, 535, 536,
	359, 360, 361, 362, 322, 561, 289, 457, 385, 0,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 526,
	527, 524, 620, 0, 584, 585, 0, 0, 451, 452,
	317, 324, 470, 326, 288, 374, 319, 436, 333, 0,
	463, 528, 464, 587, 590, 588, 589, 366, 329, 330,
	400, 334, 344, 388, 435, 372, 393, 286, 426, 401,
	348, 514, 541, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	568, 567, 566, 565, 564, 563, 562, 0, 0, 511,
	413, 298, 260, 294, 295, 302, 609, 606, 417, 610,
	0, 268, 491, 342, 0, 383, 316, 556, 557, 0,
	0, 216, 217, 218, 219, 220, 221, 222, 223, 261,
	224, 225, 226, 227, 228, 229, 230, 233, 234, 235,
	236, 237, 238, 239, 240, 559, 231, 232, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 0, 0, 0, 262, 263, 264, 265, 0,
	0, 256, 257, 258, 259, 0, 0, 0, 442, 443,
	444, 466, 0, 428, 490, 607, 0, 0, 0, 0,
	0, 0, 0, 540, 552, 586, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 481, 482, 614, 592, 371,
	0, 496, 529, 518, 601, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 341,
	533, 515, 525, 516, 501, 502, 503, 510, 321, 504,
	505, 506, 476, 507, 477, 508, 509, 0, 532, 483,
	402, 355, 550, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 1452, 0, 0, 0, 284, 206,
	478, 597, 480, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 407, 424, 285, 398,
	437, 290, 405, 280, 370, 394, 0, 0, 276, 422,
	404, 352, 331, 332, 275, 0, 389, 309, 323, 306,
	368, 0, 421, 449, 305, 440, 0, 432, 278, 0,
	431, 367, 418, 423, 353, 347, 277, 420, 351, 346,
	335, 313, 465, 336, 337, 327, 379, 345, 380, 328,
	357, 356, 358, 0, 0, 0, 0, 0, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 591, 0, 0, 594, 0, 434, 0, 0,
	0, 0, 0, 0, 406, 0, 0, 338, 0, 0,
	0, 450, 0, 392, 373, 616, 0, 0, 390, 343,
	419, 381, 425, 408, 433, 386, 382, 269, 409, 308,
	354, 281, 283, 303, 310, 312, 314, 315, 363, 364,
	376, 397, 410, 411, 412, 307, 291, 391, 292, 325,
	293, 270, 299, 297, 300, 399, 301, 272, 377, 416,
	0, 320, 387, 350, 273, 349, 378, 415, 414, 282,
	441, 447, 448, 537, 0, 453, 617, 618, 619, 462,
	467, 468, 469, 471, 472, 473, 474, 538, 555, 522,
	492, 455, 546, 489, 493, 494, 558, 0, 0, 0,
	446, 339, 340, 0, 318, 266, 267, 612, 304, 369,
	560, 593, 485, 0, 547, 486, 495, 296, 519, 531,
	530, 365, 445, 0, 542, 545, 475, 611, 0, 539,
	554, 615, 553, 608, 375, 0, 396, 551, 498, 0,
	543, 517, 0, 544, 513, 548, 0, 487, 0, 403,
	427, 439, 456, 459, 488, 573, 574, 575, 271, 458,
	577, 578, 579, 580, 581, 582, 583, 576, 430, 520,
	497, 523, 438, 500, 499, 0, 0, 534, 454, 535,
	536, 359, 360, 361, 362, 322, 561, 289, 457, 385,
	0, 521, 0, 0, 0, 0, 0, 0, 0, 0,
	526, 527, 524, 620, 0, 584, 585, 0, 0, 451,
	452, 317, 324, 470, 326, 288, 374, 319, 436, 333,
	0, 463, 528, 464, 587, 590, 588, 589, 366, 329,
	330, 400, 334, 344, 388, 435, 372, 393, 286, 426,
	401, 348, 514, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	569, 568, 567, 566, 565, 564, 563, 562, 0, 0,
	511, 413, 298, 260, 294, 295, 302, 609, 606, 417,
	610, 0, 268, 491, 342, 0, 383, 316, 556, 557,
	0, 0, 216, 217, 218, 219, 220, 221, 222, 223,
	261, 224, 225, 226, 227, 228, 229, 230, 233, 234,
	235, 236, 237, 238, 239, 240, 559, 231, 232, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 0, 0, 0, 262, 263, 264, 265,
	0, 0, 256, 257, 258, 259, 0, 0, 0, 442,
	443, 444, 466, 0, 428, 490, 607, 0, 0, 0,
	0, 0, 0, 0, 540, 552, 586, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 481, 482, 614, 592,
	371, 0, 496, 529, 518, 601, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 311, 0, 0,
	341, 533, 515, 525, 516, 501, 502, 503, 510, 321,
	504, 505, 506, 476, 507, 477, 508, 509, 0, 532,
	483, 402, 355, 550, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 0, 2372, 0, 0, 0, 284,
	206, 478, 597, 480, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 407, 424, 285,
	398, 437, 290, 405, 280, 370, 394, 0, 0, 276,
	422, 404, 352, 331, 332, 275, 0, 389, 309, 323,
	306, 368, 0, 421, 449, 305, 440, 0, 432, 278,
	0, 431, 367, 418, 423, 353, 347, 277, 420, 351,
	346, 335, 313, 465, 336, 337, 327, 379, 345, 380,
	328, 357, 356, 358, 0, 0, 0, 0, 0, 460,
	461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 594, 0, 434, 0,
	0, 0, 0, 0, 0, 406, 0, 0, 338, 0,
	0, 0, 450, 0, 392, 373, 616, 0, 0, 390,
	343, 419, 381, 425, 408, 433, 386, 382, 269, 409,
	308, 354, 281, 283, 303, 310, 312, 314, 315, 363,
	364, 376, 397, 410, 411, 412, 307, 291, 391, 292,
	325, 293, 270, 299, 297, 300, 399, 301, 272, 377,
	416, 0, 320, 387, 350, 273, 349, 378, 415, 414,
	282, 441, 447, 448, 537, 0, 453, 617, 618, 619,
	462, 467, 468, 469, 471, 472, 473, 474, 538, 555,
	522, 492, 455, 546, 489, 493, 494, 558, 0, 0,
	0, 446, 339, 340, 0, 318, 266, 267, 612, 304,
	369, 560, 593, 485, 0, 547, 486, 495, 296, 519,
	531, 530, 365, 445, 0, 542, 545, 475, 611, 0,
	539, 554, 615, 553, 608, 375, 0, 396, 551, 498,
	0, 543, 517, 0, 544, 513, 548, 0, 487, 0,
	403, 427, 439, 456, 459, 488, 573, 574, 575, 271,
	458, 577, 578, 579, 580, 581, 582, 583, 576, 430,
	520, 497, 523, 438, 500, 499, 0, 0, 534, 454,
	535, 536, 359, 360, 361, 362, 322, 561, 289, 457,
	385, 0, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 526, 527, 524, 620, 0, 584, 585, 0, 0,
	451, 452, 317, 324, 470, 326, 288, 374, 319, 436,
	333, 0, 463, 528, 464, 587, 590, 588, 589, 366,
	329, 330, 400, 334, 344, 388, 435, 372, 393, 286,
	426, 401, 348, 514, 541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 568, 567, 566, 565, 564, 563, 562, 0,
	0, 511, 413, 298, 260, 294, 295, 302, 609, 606,
	417, 610, 0, 268, 491, 342, 0, 383, 316, 556,
	557, 0, 0, 216, 217, 218, 219, 220, 221, 222,
	223, 261, 224, 225, 226, 227, 228, 229, 230, 233,
	234, 235, 236, 237, 238, 239, 240, 559, 231, 232,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 0, 0, 0, 262, 263, 264,
	265, 0, 0, 256, 257, 258, 259, 0, 0, 0,
	442, 443, 444, 466, 0, 428, 490, 607, 0, 0,
	0, 0, 0, 0, 0, 540, 552, 586, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 481, 482, 614,
	592, 371, 0, 496, 529, 518, 601, 484, 0, 0,
	2717, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 341, 533, 515, 525, 516, 501, 502, 503, 510,
	321, 504, 505, 506, 476, 507, 477, 508, 509, 0,
	532, 483, 402, 355, 550, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 0, 0, 0, 0, 0, 0,
	284, 206, 478, 597, 480, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 407, 424,
	285, 398, 437, 290, 405, 280, 370, 394, 0, 0,
	276, 422, 404, 352, 331, 332, 275, 0, 389, 309,
	323, 306, 368, 0, 421, 449, 305, 440, 0, 432,
	278, 0, 431, 367, 418, 423, 353, 347, 277, 420,
	351, 346, 335, 313, 465, 336, 337, 327, 379, 345,
	380, 328, 357, 356, 358, 0, 0, 0, 0, 0,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 0, 0, 594, 0, 434,
	0, 0, 0, 0, 0, 0, 406, 0, 0, 338,
	0, 0, 0, 450, 0, 392, 373, 616, 0, 0,
	390, 343, 419, 381, 425, 408, 433, 386, 382, 269,
	409, 308, 354, 281, 283, 303, 310, 312, 314, 315,
	363, 364, 376, 397, 410, 411, 412, 307, 291, 391,
	292, 325, 293, 270, 299, 297, 300, 399, 301, 272,
	377, 416, 0, 320, 387, 350, 273, 349, 378, 415,
	414, 282, 441, 447, 448, 537, 0, 453, 617, 618,
	619, 462, 467, 468, 469, 471, 472, 473, 474, 538,
	555, 522, 492, 455, 546, 489, 493, 494, 558, 0,
	0, 0, 446, 339, 340, 0, 318, 266, 267, 612,
	304, 369, 560, 593, 485, 0, 547, 486, 495, 296,
	519, 531, 530, 365, 445, 0, 542, 545, 475, 611,
	0, 539, 554, 615, 553, 608, 375, 0, 396, 551,
	498, 0, 543, 517, 0, 544, 513, 548, 0, 487,
	0, 403, 427, 439, 456, 459, 488, 573, 574, 575,
	271, 458, 577, 578, 579, 580, 581, 582, 583, 576,
	430, 520, 497, 523, 438, 500, 499, 0, 0, 534,
	454, 535, 536, 359, 360, 361, 362, 322, 561, 289,
	457, 385, 0, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 526, 527, 524, 620, 0, 584, 585, 0,
	0, 451, 452, 317, 324, 470, 326, 288, 374, 319,
	436, 333, 0, 463, 528, 464, 587, 590, 588, 589,
	366, 329, 330, 400, 334, 344, 388, 435, 372, 393,
	286, 426, 401, 348, 514, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 568, 567, 566, 565, 564, 563, 562,
	0, 0, 511, 413, 298, 260, 294, 295, 302, 609,
	606, 417, 610, 0, 268, 491, 342, 0, 383, 316,
	556, 557, 0, 0, 216, 217, 218, 219, 220, 221,
	222, 223, 261, 224, 225, 226, 227, 228, 229, 230,
	233, 234, 235, 236, 237, 238, 239, 240, 559, 231,
	232, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 0, 0, 0, 262, 263,
	264, 265, 0, 0, 256, 257, 258, 259, 0, 0,
	0, 442, 443, 444, 466, 0, 428, 490, 607, 0,
	0, 0, 0, 0, 0, 0, 540, 552, 586, 0,
	595, 596, 598, 600, 599, 602, 0, 613, 481, 482,
	614, 592, 371, 0, 496, 529, 518, 601, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 311,
	0, 0, 341, 533, 515, 525, 516, 501, 502, 503,
	510, 321, 504, 505, 506, 476, 507, 477, 508, 509,
	0, 532, 483, 402, 355, 550, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 284, 206, 478, 597, 480, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2075, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 407,
	424, 285, 398, 437, 290, 405, 280, 370, 394, 0,
	0, 276, 422, 404, 352, 331, 332, 275, 0, 389,
	309, 323, 306, 368, 0, 421, 449, 305, 440, 0,
	432, 278, 0, 431, 367, 418, 423, 353, 347, 277,
	420, 351, 346, 335, 313, 465, 336, 337, 327, 379,
	345, 380, 328, 357, 356, 358, 0, 0, 0, 0,
	0, 460, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 0, 0, 594, 0,
	434, 0, 0, 0, 0, 0, 0, 406, 0, 0,
	338, 0, 0, 0, 450, 0, 392, 373, 616, 0,
	0, 390, 343, 419, 381, 425, 408, 433, 386, 382,
	269, 409, 308, 354, 281, 283, 303, 310, 312, 314,
	315, 363, 364, 376, 397, 410, 411, 412, 307, 291,
	391, 292, 325, 293, 270, 299, 297, 300, 399, 301,
	272, 377, 416, 0, 320, 387, 350, 273, 349, 378,
	415, 414, 282, 441, 447, 448, 537, 0, 453, 617,
	618, 619, 462, 467, 468, 469, 471, 472, 473, 474,
	538, 555, 522, 492, 455, 546, 489, 493, 494, 558,
	0, 0, 0, 446, 339, 340, 0, 318, 266, 267,
	612, 304, 369, 560, 593, 485, 0, 547, 486, 495,
	296, 519, 531, 530, 365, 445, 0, 542, 545, 475,
	611, 0, 539, 554, 615, 553, 608, 375, 0, 396,
	551, 498, 0, 543, 517, 0, 544, 513, 548, 0,
	487, 0, 403, 427, 439, 456, 459, 488, 573, 574,
	575, 271, 458, 577, 578, 579, 580, 581, 582, 583,
	576, 430, 520, 497, 523, 438, 500, 499, 0, 0,
	534, 454, 535, 536, 359, 360, 361, 362, 322, 561,
	289, 457, 385, 0, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 526, 527, 524, 620, 0, 584, 585,
	0, 0, 451, 452, 317, 324, 470, 326, 288, 374,
	319, 436, 333, 0, 463, 528, 464, 587, 590, 588,
	589, 366, 329, 330, 400, 334, 344, 388, 435, 372,
	393, 286, 426, 401, 348, 514, 541, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 569, 568, 567, 566, 565, 564, 563,
	562, 0, 0, 511, 413, 298, 260, 294, 295, 302,
	609, 606, 417, 610, 0, 268, 491, 342, 0, 383,
	316, 556, 557, 0, 0, 216, 217, 218, 219, 220,
	221, 222, 223, 261, 224, 225, 226, 227, 228, 229,
	230, 233, 234, 235, 236, 237, 238, 239, 240, 559,
	231, 232, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 0, 0, 0, 262,
	263, 264, 265, 0, 0, 256, 257, 258, 259, 0,
	0, 0, 442, 443, 444, 466, 0, 428, 490, 607,
	0, 0, 0, 0, 0, 0, 0, 540, 552, 586,
	0, 595, 596, 598, 600, 599, 602, 0, 613, 481,
	482, 614, 592, 371, 0, 496, 529, 518, 601, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 341, 533, 515, 525, 516, 501, 502,
	503, 510, 321, 504, 505, 506, 476, 507, 477, 508,
	509, 0, 532, 483, 402, 355, 550, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 0, 0, 2488, 0,
	0, 0, 284, 206, 478, 597, 480, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	407, 424, 285, 398, 437, 290, 405, 280, 370, 394,
	0, 0, 276, 422, 404, 352, 331, 332, 275, 0,
	389, 309, 323, 306, 368, 0, 421, 449, 305, 440,
	0, 432, 278, 0, 431, 367, 418, 423, 353, 347,
	277, 420, 351, 346, 335, 313, 465, 336, 337, 327,
	379, 345, 380, 328, 357, 356, 358, 0, 0, 0,
	0, 0, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 591, 0, 0, 594,
	0, 434, 0, 0, 0, 0, 0, 0, 406, 0,
	0, 338, 0, 0, 0, 450, 0, 392, 373, 616,
	0, 0, 390, 343, 419, 381, 425, 408, 433, 386,
	382, 269, 409, 308, 354, 281, 283, 303, 310, 312,
	314, 315, 363, 364, 376, 397, 410, 411, 412, 307,
	291, 391, 292, 325, 293, 270, 299, 297, 300, 399,
	301, 272, 377, 416, 0, 320, 387, 350, 273, 349,
	378, 415, 414, 282, 441, 447, 448, 537, 0, 453,
	617, 618, 619, 462, 467, 468, 469, 471, 472, 473,
	474, 538, 555, 522, 492, 455, 546, 489, 493, 494,
	558, 0, 0, 0, 446, 339, 340, 0, 318, 266,
	267, 612, 304, 369, 560, 593, 485, 0, 547, 486,
	495, 296, 519, 531, 530, 365, 445, 0, 542, 545,
	475, 611, 0, 539, 554, 615, 553, 608, 375, 0,
	396, 551, 498, 0, 543, 517, 0, 544, 513, 548,
	0, 487, 0, 403, 427, 439, 456, 459, 488, 573,
	574, 575, 271, 458, 577, 578, 579, 580, 581, 582,
	583, 576, 430, 520, 497, 523, 438, 500, 499, 0,
	0, 534, 454, 535, 536, 359, 360, 361, 362, 322,
	561, 289, 457, 385, 0, 521, 0, 0, 0, 0,
	0, 0, 0, 0, 526, 527, 524, 620, 0, 584,
	585, 0, 0, 451, 452, 317, 324, 470, 326, 288,
	374, 319, 436, 333, 0, 463, 528, 464, 587, 590,
	588, 589, 366, 329, 330, 400, 334, 344, 388, 435,
	372, 393, 286, 426, 401, 348, 514, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 568, 567, 566, 565, 564,
	563, 562, 0, 0, 511, 413, 298, 260, 294, 295,
	302, 609, 606, 417, 610, 0, 268, 491, 342, 0,
	383, 316, 556, 557, 0, 0, 216, 217, 218, 219,
	220, 221, 222, 223, 261, 224, 225, 226, 227, 228,
	229, 230, 233, 234, 235, 236, 237, 238, 239, 240,
	559, 231, 232, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 0, 0, 0,
	262, 263, 264, 265, 0, 0, 256, 257, 258, 259,
	0, 0, 0, 442, 443, 444, 466, 0, 428, 490,
	607, 0, 0, 0, 0, 0, 0, 0, 540, 552,
	586, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	481, 482, 614, 592, 371, 0, 496, 529, 518, 601,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 0, 0, 341, 533, 515, 525, 516, 501,
	502, 503, 510, 321, 504, 505, 506, 476, 507, 477,
	508, 509, 0, 532, 483, 402, 355, 550, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 284, 206, 478, 597, 480, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 407, 424, 285, 398, 437, 290, 405, 280, 370,
	394, 0, 0, 276, 422, 404, 352, 331, 332, 275,
	0, 389, 309, 323, 306, 368, 0, 421, 449, 305,
	440, 0, 432, 278, 0, 431, 367, 418, 423, 353,
	347, 277, 420, 351, 346, 335, 313, 465, 336, 337,
	327, 379, 345, 380, 328, 357, 356, 358, 0, 0,
	0, 0, 0, 460, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	594, 0, 434, 0, 0, 0, 0, 0, 0, 406,
	0, 0, 338, 0, 0, 0, 450, 0, 392, 373,
	616, 0, 0, 390, 343, 419, 381, 425, 408, 433,
	386, 382, 269, 409, 308, 354, 281, 283, 303, 310,
	312, 314, 315, 363, 364, 376, 397, 410, 411, 412,
	307, 291, 391, 292, 325, 293, 270, 299, 297, 300,
	399, 301, 272, 377, 416, 0, 320, 387, 350, 273,
	349, 378, 415, 414, 282, 441, 447, 448, 537, 0,
	453, 617, 618, 619, 462, 467, 468, 469, 471, 472,
	473, 474, 538, 555, 522, 492, 455, 546, 489, 493,
	494, 558, 0, 0, 0, 446, 339, 340, 0, 318,
	266, 267, 612, 304, 369, 560, 593, 485, 0, 547,
	486, 495, 296, 519, 531, 530, 365, 445, 0, 542,
	545, 475, 611, 0, 539, 554, 615, 553, 608, 375,
	0, 396, 551, 498, 0, 543, 517, 0, 544, 513,
	548, 0, 487, 0, 403, 427, 439, 456, 459, 488,
	573, 574, 575, 271, 458, 577, 578, 579, 580, 581,
	582, 583, 576, 430, 520, 497, 523, 438, 500, 499,
	0, 0, 534, 454, 535, 536, 359, 360, 361, 362,
	322, 561, 289, 457, 385, 0, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 527, 524, 620, 0,
	584, 585, 0, 0, 451, 452, 317, 324, 470, 326,
	288, 374, 319, 436, 333, 0, 463, 528, 464, 587,
	590, 588, 589, 366, 329, 330, 400, 334, 344, 388,
	435, 372, 393, 286, 426, 401, 348, 514, 541, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 568, 567, 566, 565,
	564, 563, 562, 0, 0, 511, 413, 298, 260, 294,
	295, 302, 609, 606, 417, 610, 0, 268, 491, 342,
	0, 383, 316, 556, 557, 0, 0, 216, 217, 218,
	219, 220, 221, 222, 223, 261, 224, 225, 226, 227,
	228, 229, 230, 233, 234, 235, 236, 237, 238, 239,
	240, 559, 231, 232, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 0, 0,
	0, 262, 263, 264, 265, 0, 0, 256, 257, 258,
	259, 0, 0, 0, 442, 443, 444, 466, 0, 428,
	490, 607, 0, 0, 0, 0, 0, 0, 0, 540,
	552, 586, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 481, 482, 614, 592, 371, 0, 496, 529, 518,
	601, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 341, 533, 515, 525, 516,
	501, 502, 503, 510, 321, 504, 505, 506, 476, 507,
	477, 508, 509, 0, 532, 483, 402, 355, 550, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	2447, 0, 0, 0, 284, 206, 478, 597, 480, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 407, 424, 285, 398, 437, 290, 405, 280,
	370, 394, 0, 0, 276, 422, 404, 352, 331, 332,
	275, 0, 389, 309, 323, 306, 368, 0, 421, 449,
	305, 440, 0, 432, 278, 0, 431, 367, 418, 423,
	353, 347, 277, 420, 351, 346, 335, 313, 465, 336,
	337, 327, 379, 345, 380, 328, 357, 356, 358, 0,
	0, 0, 0, 0, 460, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 594, 0, 434, 0, 0, 0, 0, 0, 0,
	406, 0, 0, 338, 0, 0, 0, 450, 0, 392,
	373, 616, 0, 0, 390, 343, 419, 381, 425, 408,
	433, 386, 382, 269, 409, 308, 354, 281, 283, 303,
	310, 312, 314, 315, 363, 364, 376, 397, 410, 411,
	412, 307, 291, 391, 292, 325, 293, 270, 299, 297,
	300, 399, 301, 272, 377, 416, 0, 320, 387, 350,
	273, 349, 378, 415, 414, 282, 441, 447, 448, 537,
	0, 453, 617, 618, 619, 462, 467, 468, 469, 471,
	472, 473, 474, 538, 555, 522, 492, 455, 546, 489,
	493, 494, 558, 0, 0, 0, 446, 339, 340, 0,
	318, 266, 267, 612, 304, 369, 560, 593, 485, 0,
	547, 486, 495, 296, 519, 531, 530, 365, 445, 0,
	542, 545, 475, 611, 0, 539, 554, 615, 553, 608,
	375, 0, 396, 551, 498, 0, 543, 517, 0, 544,
	513, 548, 0, 487, 0, 403, 427, 439, 456, 459,
	488, 573, 574, 575, 271, 458, 577, 578, 579, 580,
	581, 582, 583, 576, 430, 520, 497, 523, 438, 500,
	499, 0, 0, 534, 454, 535, 536, 359, 360, 361,
	362, 322, 561, 289, 457, 385, 0, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 526, 527, 524, 620,
	0, 584, 585, 0, 0, 451, 452, 317, 324, 470,
	326, 288, 374, 319, 436, 333, 0, 463, 528, 464,
	587, 590, 588, 589, 366, 329, 330, 400, 334, 344,
	388, 435, 372, 393, 286, 426, 401, 348, 514, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 568, 567, 566,
	565, 564, 563, 562, 0, 0, 511, 413, 298, 260,
	294, 295, 302, 609, 606, 417, 610, 0, 268, 491,
	342, 0, 383, 316, 556, 557, 0, 0, 216, 217,
	218, 219, 220, 221, 222, 223, 261, 224, 225, 226,
	227, 228, 229, 230, 233, 234, 235, 236, 237, 238,
	239, 240, 559, 231, 232, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 0,
	0, 0, 262, 263, 264, 265, 0, 0, 256, 257,
	258, 259, 0, 0, 0, 442, 443, 444, 466, 0,
	428, 490, 607, 0, 0, 0, 0, 0, 0, 0,
	540, 552, 586, 0, 595, 596, 598, 600, 599, 602,
	2231, 613, 481, 482, 614, 592, 371, 0, 496, 529,
	518, 601, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 311, 0, 0, 341, 533, 515, 525,
	516, 501, 502, 503, 510, 321, 504, 505, 506, 476,
	507, 477, 508, 509, 0, 532, 483, 402, 355, 550,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 284, 206, 478, 597, 480,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 407, 424, 285, 398, 437, 290, 405,
	280, 370, 394, 0, 0, 276, 422, 404, 352, 331,
	332, 275, 0, 389, 309, 323, 306, 368, 0, 421,
	449, 305, 440, 0, 432, 278, 0, 431, 367, 418,
	423, 353, 347, 277, 420, 351, 346, 335, 313, 465,
	336, 337, 327, 379, 345, 380, 328, 357, 356, 358,
	0, 0, 0, 0, 0, 460, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	0, 0, 594, 0, 434, 0, 0, 0, 0, 0,
	0, 406, 0, 0, 338, 0, 0, 0, 450, 0,
	392, 373, 616, 0, 0, 390, 343, 419, 381, 425,
	408, 433, 386, 382, 269, 409, 308, 354, 281, 283,
	303, 310, 312, 314, 315, 363, 364, 376, 397, 410,
	411, 412, 307, 291, 391, 292, 325, 293, 270, 299,
	297, 300, 399, 301, 272, 377, 416, 0, 320, 387,
	350, 273, 349, 378, 415, 414, 282, 441, 447, 448,
	537, 0, 453, 617, 618, 619, 462, 467, 468, 469,
	471, 472, 473, 474, 538, 555, 522, 492, 455, 546,
	489, 493, 494, 558, 0, 0, 0, 446, 339, 340,
	0, 318, 266, 267, 612, 304, 369, 560, 593, 485,
	0, 547, 486, 495, 296, 519, 531, 530, 365, 445,
	0, 542, 545, 475, 611, 0, 539, 554, 615, 553,
	608, 375, 0, 396, 551, 498, 0, 543, 517, 0,
	544, 513, 548, 0, 487, 0, 403, 427, 439, 456,
	459, 488, 573, 574, 575, 271, 458, 577, 578, 579,
	580, 581, 582, 583, 576, 430, 520, 497, 523, 438,
	500, 499, 0, 0, 534, 454, 535, 536, 359, 360,
	361, 362, 322, 561, 289, 457, 385, 0, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 526, 527, 524,
	620, 0, 584, 585, 0, 0, 451, 452, 317, 324,
	470, 326, 288, 374, 319, 436, 333, 0, 463, 528,
	464, 587, 590, 588, 589, 366, 329, 330, 400, 334,
	344, 388, 435, 372, 393, 286, 426, 401, 348, 514,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 568, 567,
	566, 565, 564, 563, 562, 0, 0, 511, 413, 298,
	260, 294, 295, 302, 609, 606, 417, 610, 0, 268,
	491, 342, 0, 383, 316, 556, 557, 0, 0, 216,
	217, 218, 219, 220, 221, 222, 223, 261, 224, 225,
	226, 227, 228, 229, 230, 233, 234, 235, 236, 237,
	238, 239, 240, 559, 231, 232, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	0, 0, 0, 262, 263, 264, 265, 0, 0, 256,
	257, 258, 259, 0, 0, 0, 442, 443, 444, 466,
	0, 428, 490, 607, 0, 0, 0, 0, 0, 0,
	0, 540, 552, 586, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 481, 482, 614, 592, 371, 0, 496,
	529, 518, 601, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 341, 533, 515,
	525, 516, 501, 502, 503, 510, 321, 504, 505, 506,
	476, 507, 477, 508, 509, 0, 532, 483, 402, 355,
	550, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 1795, 0, 0, 284, 206, 478, 597,
	480, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 407, 424, 285, 398, 437, 290,
	405, 280, 370, 394, 0, 0, 276, 422, 404, 352,
	331, 332, 275, 0, 389, 309, 323, 306, 368, 0,
	421, 449, 305, 440, 0, 432, 278, 0, 431, 367,
	418, 423, 353, 347, 277, 420, 351, 346, 335, 313,
	465, 336, 337, 327, 379, 345, 380, 328, 357, 356,
	358, 0, 0, 0, 0, 0, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 0, 0, 594, 0, 434, 0, 0, 0, 0,
	0, 0, 406, 0, 0, 338, 0, 0, 0, 450,
	0, 392, 373, 616, 0, 0, 390, 343, 419, 381,
	425, 408, 433, 386, 382, 269, 409, 308, 354, 281,
	283, 303, 310, 312, 314, 315, 363, 364, 376, 397,
	410, 411, 412, 307, 291, 391, 292, 325, 293, 270,
	299, 297, 300, 399, 301, 272, 377, 416, 0, 320,
	387, 350, 273, 349, 378, 415, 414, 282, 441, 447,
	448, 537, 0, 453, 617, 618, 619, 462, 467, 468,
	469, 471, 472, 473, 474, 538, 555, 522, 492, 455,
	546, 489, 493, 494, 558, 0, 0, 0, 446, 339,
	340, 0, 318, 266, 267, 612, 304, 369, 560, 593,
	485, 0, 547, 486, 495, 296, 519, 531, 530, 365,
	445, 0, 542, 545, 475, 611, 0, 539, 554, 615,
	553, 608, 375, 0, 396, 551, 498, 0, 543, 517,
	0, 544, 513, 548, 0, 487, 0, 403, 427, 439,
	456, 459, 488, 573, 574, 575, 271, 458, 577, 578,
	579, 580, 581, 582, 583, 576, 430, 520, 497, 523,
	438, 500, 499, 0, 0, 534, 454, 535, 536, 359,
	360, 361, 362, 322, 561, 289, 457, 385, 0, 521,
	0, 0, 0, 0, 0, 0, 0, 0, 526, 527,
	524, 620, 0, 584, 585, 0, 0, 451, 452, 317,
	324, 470, 326, 288, 374, 319, 436, 333, 0, 463,
	528, 464, 587, 590, 588, 589, 366, 329, 330, 400,
	334, 344, 388, 435, 372, 393, 286, 426, 401, 348,
	514, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 568,
	567, 566, 565, 564, 563, 562, 0, 0, 511, 413,
	298, 260, 294, 295, 302, 609, 606, 417, 610, 0,
	268, 491, 342, 0, 383, 316, 556, 557, 0, 0,
	216, 217, 218, 219, 220, 221, 222, 223, 261, 224,
	225, 226, 227, 228, 229, 230, 233, 234, 235, 236,
	237, 238, 239, 240, 559, 231, 232, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 0, 0, 0, 262, 263, 264, 265, 0, 0,
	256, 257, 258, 259, 0, 0, 0, 442, 443, 444,
	466, 0, 428, 490, 607, 0, 0, 0, 0, 0,
	0, 0, 540, 552, 586, 0, 595, 596, 598, 600,
	599, 602, 0, 613, 481, 482, 614, 592, 371, 0,
	496, 529, 518, 601, 484, 0, 1922, 0, 0, 0,
	0, 0, 0, 0, 0, 311, 0, 0, 341, 533,
	515, 525, 516, 501, 502, 503, 510, 321, 504, 505,
	506, 476, 507, 477, 508, 509, 0, 532, 483, 402,
	355, 550, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 284, 206, 478,
	597, 480, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 407, 424, 285, 398, 437,
	290, 405, 280, 370, 394, 0, 0, 276, 422, 404,
	352, 331, 332, 275, 0, 389, 309, 323, 306, 368,
	0, 421, 449, 305, 440, 0, 432, 278, 0, 431,
	367, 418, 423, 353, 347, 277, 420, 351, 346, 335,
	313, 465, 336, 337, 327, 379, 345, 380, 328, 357,
	356, 358, 0, 0, 0, 0, 0, 460, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 591, 0, 0, 594, 0, 434, 0, 0, 0,
	0, 0, 0, 406, 0, 0, 338, 0, 0, 0,
	450, 0, 392, 373, 616, 0, 0, 390, 343, 419,
	381, 425, 408, 433, 386, 382, 269, 409, 308, 354,
	281, 283, 303, 310, 312, 314, 315, 363, 364, 376,
	397, 410, 411, 412, 307, 291, 391, 292, 325, 293,
	270, 299, 297, 300, 399, 301, 272, 377, 416, 0,
	320, 387, 350, 273, 349, 378, 415, 414, 282, 441,
	447, 448, 537, 0, 453, 617, 618, 619, 462, 467,
	468, 469, 471, 472, 473, 474, 538, 555, 522, 492,
	455, 546, 489, 493, 494, 558, 0, 0, 0, 446,
	339, 340, 0, 318, 266, 267, 612, 304, 369, 560,
	593, 485, 0, 547, 486, 495, 296, 519, 531, 530,
	365, 445, 0, 542, 545, 475, 611, 0, 539, 554,
	615, 553, 608, 375, 0, 396, 551, 498, 0, 543,
	517, 0, 544, 513, 548, 0, 487, 0, 403, 427,
	439, 456, 459, 488, 573, 574, 575, 271, 458, 577,
	578, 579, 580, 581, 582, 583, 576, 430, 520, 497,
	523, 438, 500, 499, 0, 0, 534, 454, 535, 536,
	359, 360, 361, 362, 322, 561, 289, 457, 385, 0,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 526,
	527, 524, 620, 0, 584, 585, 0, 0, 451, 452,
	317, 324, 470, 326, 288, 374, 319, 436, 333, 0,
	463, 528, 464, 587, 590, 588, 589, 366, 329, 330,
	400, 334, 344, 388, 435, 372, 393, 286, 426, 401,
	348, 514, 541, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	568, 567, 566, 565, 564, 563, 562, 0, 0, 511,
	413, 298, 260, 294, 295, 302, 609, 606, 417, 610,
	0, 268, 491, 342, 0, 383, 316, 556, 557, 0,
	0, 216, 217, 218, 219, 220, 221, 222, 223, 261,
	224, 225, 226, 227, 228, 229, 230, 233, 234, 235,
	236, 237, 238, 239, 240, 559, 231, 232, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 0, 0, 0, 262, 263, 264, 265, 0,
	0, 256, 257, 258, 259, 0, 0, 0, 442, 443,
	444, 466, 0, 428, 490, 607, 0, 0, 0, 0,
	0, 0, 0, 540, 552, 586, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 481, 482, 614, 592, 371,
	0, 496, 529, 518, 601, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 341,
	533, 515, 525, 516, 501, 502, 503, 510, 321, 504,
	505, 506, 476, 507, 477, 508, 509, 0, 532, 483,
	402, 355, 550, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 1452, 0, 0, 0, 284, 206,
	478, 597, 480, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 407, 424, 285, 398,
	437, 290, 405, 280, 370, 394, 0, 0, 276, 422,
	404, 352, 331, 332, 275, 0, 389, 309, 323, 306,
	368, 0, 421, 449, 305, 440, 0, 432, 278, 0,
	431, 367, 418, 423, 353, 347, 277, 420, 351, 346,
	335, 313, 465, 336, 337, 327, 379, 345, 380, 328,
	357, 356, 358, 0, 0, 0, 0, 0, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 591, 0, 0, 594, 0, 434, 0, 0,
	0, 0, 0, 0, 406, 0, 0, 338, 0, 0,
	0, 450, 0, 392, 373, 616, 0, 0, 390, 343,
	419, 381, 425, 408, 433, 1828, 382, 269, 409, 308,
	354, 281, 283, 303, 310, 312, 314, 315, 363, 364,
	376, 397, 410, 411, 412, 307, 291, 391, 292, 325,
	293, 270, 299, 297, 300, 399, 301, 272, 377, 416,
	0, 320, 387, 350, 273, 349, 378, 415, 414, 282,
	441, 447, 448, 537, 0, 453, 617, 618, 619, 462,
	467, 468, 469, 471, 472, 473, 474, 538, 555, 522,
	492, 455, 546, 489, 493, 494, 558, 0, 0, 0,
	446, 339, 340, 0, 318, 266, 267, 612, 304, 369,
	560, 593, 485, 0, 547, 486, 495, 296, 519, 531,
	530, 365, 445, 0, 542, 545, 475, 611, 0, 539,
	554, 615, 553, 608, 375, 0, 396, 551, 498, 0,
	543, 517, 0, 544, 513, 548, 0, 487, 0, 403,
	427, 439, 456, 459, 488, 573, 574, 575, 271, 458,
	577, 578, 579, 580, 581, 582, 583, 576, 430, 520,
	497, 523, 438, 500, 499, 0, 0, 534, 454, 535,
	536, 359, 360, 361, 362, 322, 561, 289, 457, 385,
	0, 521, 0, 0, 0, 0, 0, 0, 0, 0,
	526, 527, 524, 620, 0, 584, 585, 0, 0, 451,
	452, 317, 324, 470, 326, 288, 374, 319, 436, 333,
	0, 463, 528, 464, 587, 590, 588, 589, 366, 329,
	330, 400, 334, 344, 388, 435, 372, 393, 286, 426,
	401, 348, 514, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	569, 568, 567, 566, 565, 564, 563, 562, 0, 0,
	511, 413, 298, 260, 294, 295, 302, 609, 606, 417,
	610, 0, 268, 491, 342, 0, 383, 316, 556, 557,
	0, 0, 216, 217, 218, 219, 220, 221, 222, 223,
	261, 224, 225, 226, 227, 228, 229, 230, 233, 234,
	235, 236, 237, 238, 239, 240, 559, 231, 232, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 0, 0, 0, 262, 263, 264, 265,
	0, 0, 256, 257, 258, 259, 0, 0, 0, 442,
	443, 444, 466, 0, 428, 490, 607, 0, 0, 0,
	0, 0, 0, 0, 540, 552, 586, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 481, 482, 614, 592,
	371, 0, 496, 529, 518, 601, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 311, 0, 0,
	341, 533, 515, 525, 516, 501, 502, 503, 510, 321,
	504, 505, 506, 476, 507, 477, 508, 509, 0, 532,
	483, 402, 355, 550, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 284,
	206, 478, 597, 480, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 407, 424, 285,
	398, 437, 290, 405, 280, 370, 394, 0, 0, 276,
	422, 404, 352, 331, 332, 275, 0, 389, 309, 323,
	306, 368, 0, 421, 449, 305, 440, 0, 432, 278,
	0, 431, 367, 418, 423, 353, 347, 277, 420, 351,
	346, 335, 313, 465, 336, 337, 327, 379, 345, 380,
	328, 357, 356, 358, 0, 0, 0, 0, 0, 460,
	461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 594, 0, 434, 0,
	0, 1482, 0, 0, 0, 406, 0, 0, 338, 0,
	0, 0, 450, 0, 392, 373, 616, 0, 0, 390,
	343, 419, 381, 425, 408, 433, 386, 382, 269, 409,
	308, 354, 281, 283, 303, 310, 312, 314, 315, 363,
	364, 376, 397, 410, 411, 412, 307, 291, 391, 292,
	325, 293, 270, 299, 297, 300, 399, 301, 272, 377,
	416, 0, 320, 387, 350, 273, 349, 378, 415, 414,
	282, 441, 447, 448, 537, 0, 453, 617, 618, 619,
	462, 467, 468, 469, 471, 472, 473, 474, 538, 555,
	522, 492, 455, 546, 489, 493, 494, 558, 0, 0,
	0, 446, 339, 340, 0, 318, 266, 267, 612, 304,
	369, 560, 593, 485, 0, 547, 486, 495, 296, 519,
	531, 530, 365, 445, 0, 542, 545, 475, 611, 0,
	539, 554, 615, 553, 608, 375, 0, 396, 551, 498,
	0, 543, 517, 0, 544, 513, 548, 0, 487, 0,
	403, 427, 439, 456, 459, 488, 573, 574, 575, 271,
	458, 577, 578, 579, 580, 581, 582, 583, 576, 430,
	520, 497, 523, 438, 500, 499, 0, 0, 534, 454,
	535, 536, 359, 360, 361, 362, 322, 561, 289, 457,
	385, 0, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 526, 527, 524, 620, 0, 584, 585, 0, 0,
	451, 452, 317, 324, 470, 326, 288, 374, 319, 436,
	333, 0, 463, 528, 464, 587, 590, 588, 589, 366,
	329, 330, 400, 334, 344, 388, 435, 372, 393, 286,
	426, 401, 348, 514, 541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 568, 567, 566, 565, 564, 563, 562, 0,
	0, 511, 413, 298, 260, 294, 295, 302, 609, 606,
	417, 610, 0, 268, 491, 342, 0, 383, 316, 556,
	557, 0, 0, 216, 217, 218, 219, 220, 221, 222,
	223, 261, 224, 225, 226, 227, 228, 229, 230, 233,
	234, 235, 236, 237, 238, 239, 240, 559, 231, 232,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 0, 0, 0, 262, 263, 264,
	265, 0, 0, 256, 257, 258, 259, 0, 0, 0,
	442, 443, 444, 466, 0, 428, 490, 607, 0, 0,
	0, 0, 0, 0, 0, 540, 552, 586, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 481, 482, 614,
	592, 371, 0, 496, 529, 518, 601, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 627, 311, 0,
	0, 341, 533, 515, 525, 516, 501, 502, 503, 510,
	321, 504, 505, 506, 476, 507, 477, 508, 509, 0,
	532, 483, 402, 355, 550, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 0, 0, 0, 0, 0, 0,
	284, 206, 478, 597, 480, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 407, 424,
	285, 398, 437, 290, 405, 280, 370, 394, 0, 0,
	276, 422, 404, 352, 331, 332, 275, 0, 389, 309,
	323, 306, 368, 0, 421, 449, 305, 440, 0, 432,
	278, 0, 431, 367, 418, 423, 353, 347, 277, 420,
	351, 346, 335, 313, 465, 336, 337, 327, 379, 345,
	380, 328, 357, 356, 358, 0, 0, 0, 0, 0,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 0, 0, 594, 0, 434,
	0, 0, 0, 0, 0, 0, 406, 0, 0, 338,
	0, 0, 0, 450, 0, 392, 373, 616, 0, 0,
	390, 343, 419, 381, 425, 408, 433, 386, 382, 269,
	409, 308, 354, 281, 283, 303, 310, 312, 314, 315,
	363, 364, 376, 397, 410, 411, 412, 307, 291, 391,
	292, 325, 293, 270, 299, 297, 300, 399, 301, 272,
	377, 416, 0, 320, 387, 350, 273, 349, 378, 415,
	414, 282, 441, 447, 448, 537, 0, 453, 617, 618,
	619, 462, 467, 468, 469, 471, 472, 473, 474, 538,
	555, 522, 492, 455, 546, 489, 493, 494, 558, 0,
	0, 0, 446, 339, 340, 0, 318, 266, 267, 612,
	304, 369, 560, 593, 485, 0, 547, 486, 495, 296,
	519, 531, 530, 365, 445, 0, 542, 545, 475, 611,
	0, 539, 554, 615, 553, 608, 375, 0, 396, 551,
	498, 0, 543, 517, 0, 544, 513, 548, 0, 487,
	0, 403, 427, 439, 456, 459, 488, 573, 574, 575,
	271, 458, 577, 578, 579, 580, 581, 582, 583, 576,
	430, 520, 497, 523, 438, 500, 499, 0, 0, 534,
	454, 535, 536, 359, 360, 361, 362, 322, 561, 289,
	457, 385, 0, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 526, 527, 524, 620, 0, 584, 585, 0,
	0, 451, 452, 317, 324, 470, 326, 288, 374, 319,
	436, 333, 0, 463, 528, 464, 587, 590, 588, 589,
	366, 329, 330, 400, 334, 344, 388, 435, 372, 393,
	286, 426, 401, 348, 514, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 568, 567, 566, 565, 564, 563, 562,
	0, 0, 511, 413, 298, 260, 294, 295, 302, 609,
	606, 417, 610, 0, 268, 491, 342, 0, 383, 316,
	556, 557, 0, 0, 216, 217, 218, 219, 220, 221,
	222, 223, 261, 224, 225, 226, 227, 228, 229, 230,
	233, 234, 235, 236, 237, 238, 239, 240, 559, 231,
	232, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 0, 0, 0, 262, 263,
	264, 265, 0, 0, 256, 257, 258, 259, 0, 0,
	0, 442, 443, 444, 466, 0, 428, 490, 607, 0,
	0, 0, 0, 0, 0, 0, 540, 552, 586, 0,
	595, 596, 598, 600, 599, 602, 0, 613, 481, 482,
	614, 592, 371, 0, 496, 529, 518, 601, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 311,
	0, 0, 341, 533, 515, 525, 516, 501, 502, 503,
	510, 321, 504, 505, 506, 476, 507, 477, 508, 509,
	0, 532, 483, 402, 355, 550, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 284, 206, 478, 597, 480, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 407,
	424, 285, 398, 437, 290, 405, 280, 370, 394, 0,
	0, 276, 422, 404, 352, 331, 332, 275, 0, 389,
	309, 323, 306, 368, 0, 421, 449, 305, 440, 0,
	432, 278, 0, 431, 367, 418, 423, 353, 347, 277,
	420, 351, 346, 335, 313, 465, 336, 337, 327, 379,
	345, 380, 328, 357, 356, 358, 0, 0, 0, 0,
	0, 460, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 0, 637, 594, 0,
	434, 0, 0, 0, 0, 0, 0, 406, 0, 0,
	338, 0, 0, 0, 450, 0, 392, 373, 616, 0,
	0, 390, 343, 419, 381, 425, 408, 433, 386, 382,
	269, 409, 308, 354, 281, 283, 303, 310, 312, 314,
	315, 363, 364, 376, 397, 410, 411, 412, 307, 291,
	391, 292, 325, 293, 270, 299, 297, 300, 399, 301,
	272, 377, 416, 0, 320, 387, 350, 273, 349, 378,
	415, 414, 282, 441, 447, 448, 537, 0, 453, 617,
	618, 619, 462, 467, 468, 469, 471, 472, 473, 474,
	538, 555, 522, 492, 455, 546, 489, 493, 494, 558,
	0, 0, 0, 446, 339, 340, 0, 318, 266, 267,
	612, 304, 369, 560, 593, 485, 0, 547, 486, 495,
	296, 519, 531, 530, 365, 445, 0, 542, 545, 475,
	611, 0, 539, 554, 615, 553, 608, 375, 0, 396,
	551, 498, 0, 543, 517, 0, 544, 513, 548, 0,
	487, 0, 403, 427, 439, 456, 459, 488, 573, 574,
	575, 271, 458, 577, 578, 579, 580, 581, 582, 583,
	576, 430, 520, 497, 523, 438, 500, 499, 0, 0,
	534, 454, 535, 536, 359, 360, 361, 362, 322, 561,
	289, 457, 385, 0, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 526, 527, 524, 620, 0, 584, 585,
	0, 0, 451, 452, 317, 324, 470, 326, 288, 374,
	319, 436, 333, 0, 463, 528, 464, 587, 590, 588,
	589, 366, 329, 330, 400, 334, 344, 388, 435, 372,
	393, 286, 426, 401, 348, 514, 541, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 569, 568, 567, 566, 565, 564, 563,
	562, 0, 0, 511, 413, 298, 260, 294, 295, 302,
	609, 606, 417, 610, 0, 268, 491, 342, 0, 383,
	316, 556, 557, 0, 0, 216, 217, 218, 219, 220,
	221, 222, 223, 261, 224, 225, 226, 227, 228, 229,
	230, 233, 234, 235, 236, 237, 238, 239, 240, 559,
	231, 232, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 0, 0, 0, 262,
	263, 264, 265, 0, 0, 256, 257, 258, 259, 0,
	0, 0, 442, 443, 444, 466, 0, 428, 490, 607,
	0, 0, 0, 0, 0, 0, 0, 540, 552, 586,
	0, 595, 596, 598, 600, 599, 602, 0, 613, 481,
	482, 614, 592, 371, 0, 496, 529, 518, 601, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 341, 533, 515, 525, 516, 501, 502,
	503, 510, 321, 504, 505, 506, 476, 507, 477, 508,
	509, 0, 532, 483, 402, 355, 550, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 0, 0, 0, 0,
	0, 0, 284, 206, 478, 597, 480, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	407, 424, 285, 398, 437, 290, 405, 280, 370, 394,
	0, 0, 276, 422, 404, 352, 331, 332, 275, 0,
	389, 309, 323, 306, 368, 0, 421, 449, 305, 440,
	0, 432, 278, 0, 431, 367, 418, 423, 353, 347,
	277, 420, 351, 346, 335, 313, 465, 336, 337, 327,
	379, 345, 380, 328, 357, 356, 358, 0, 0, 0,
	0, 0, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 591, 0, 0, 594,
	0, 434, 0, 0, 0, 0, 0, 0, 406, 0,
	0, 338, 0, 0, 0, 450, 0, 392, 373, 616,
	0, 0, 390, 343, 419, 381, 425, 408, 433, 386,
	382, 269, 409, 308, 354, 281, 283, 303, 310, 312,
	314, 315, 363, 364, 376, 397, 410, 411, 412, 307,
	291, 391, 292, 325, 293, 270, 299, 297, 300, 399,
	301, 272, 377, 416, 0, 320, 387, 350, 273, 349,
	378, 415, 414, 282, 441, 447, 448, 537, 0, 453,
	617, 618, 619, 462, 467, 468, 469, 471, 472, 473,
	474, 538, 555, 522, 492, 455, 546, 489, 493, 494,
	558, 0, 0, 0, 446, 339, 340, 0, 318, 266,
	267, 612, 304, 369, 560, 593, 485, 0, 547, 486,
	495, 296, 519, 531, 530, 365, 445, 0, 542, 545,
	475, 611, 0, 539, 554, 615, 553, 608, 375, 0,
	396, 551, 498, 0, 543, 517, 0, 544, 513, 548,
	0, 487, 0, 403, 427, 439, 456, 459, 488, 573,
	574, 575, 271, 458, 577, 578, 579, 580, 581, 582,
	583, 576, 430, 520, 497, 523, 438, 500, 499, 0,
	0, 534, 454, 535, 536, 359, 360, 361, 362, 322,
	561, 289, 457, 385, 0, 521, 0, 0, 0, 0,
	0, 0, 0, 0, 526, 527, 524, 620, 0, 584,
	585, 0, 0, 451, 452, 317, 324, 470, 326, 288,
	374, 319, 436, 333, 0, 463, 528, 464, 587, 590,
	588, 589, 366, 329, 330, 400, 334, 344, 388, 435,
	372, 393, 286, 426, 401, 348, 514, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 568, 567, 566, 565, 564,
	563, 562, 920, 0, 511, 413, 298, 260, 294, 295,
	302, 609, 606, 417, 610, 0, 268, 491, 342, 0,
	383, 316, 556, 557, 0, 0, 216, 217, 218, 219,
	220, 221, 222, 223, 261, 224, 225, 226, 227, 228,
	229, 230, 233, 234, 235, 236, 237, 238, 239, 240,
	559, 231, 232, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 0, 0, 0,
	262, 263, 264, 265, 0, 0, 256, 257, 258, 259,
	0, 0, 0, 442, 443, 444, 466, 0, 428, 490,
	607, 0, 0, 0, 0, 0, 0, 0, 540, 552,
	586, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	481, 482, 614, 592, 371, 0, 496, 529, 518, 601,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 0, 0, 341, 533, 515, 525, 516, 501,
	502, 503, 510, 321, 504, 505, 506, 476, 507, 477,
	508, 509, 0, 532, 483, 402, 355, 550, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 284, 206, 478, 597, 480, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 407, 424, 285, 398, 437, 290, 405, 280, 370,
	394, 0, 0, 276, 422, 404, 352, 331, 332, 275,
	0, 389, 309, 323, 306, 368, 0, 421, 449, 305,
	440, 0, 432, 278, 0, 431, 367, 418, 423, 353,
	347, 277, 420, 351, 346, 335, 313, 465, 336, 337,
	327, 379, 345, 380, 328, 357, 356, 358, 0, 0,
	0, 0, 0, 460, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	594, 0, 434, 0, 0, 0, 0, 0, 0, 406,
	0, 0, 338, 0, 0, 0, 450, 0, 392, 373,
	616, 0, 0, 390, 343, 419, 381, 425, 408, 433,
	386, 382, 269, 409, 308, 354, 281, 283, 303, 310,
	312, 314, 315, 363, 364, 376, 397, 410, 411, 412,
	307, 291, 391, 292, 325, 293, 270, 299, 297, 300,
	399, 301, 272, 377, 416, 0, 320, 387, 350, 273,
	349, 378, 415, 414, 282, 441, 447, 448, 537, 0,
	453, 617, 618, 619, 462, 467, 468, 469, 471, 472,
	473, 474, 538, 555, 522, 492, 455, 546, 489, 493,
	494, 558, 0, 0, 0, 446, 339, 340, 0, 318,
	266, 267, 612, 304, 369, 560, 593, 485, 0, 547,
	486, 495, 296, 519, 531, 530, 365, 445, 0, 542,
	545, 475, 611, 0, 539, 554, 615, 553, 608, 375,
	0, 396, 551, 498, 0, 543, 517, 0, 544, 513,
	548, 0, 487, 0, 403, 427, 439, 456, 459, 488,
	573, 574, 575, 271, 458, 577, 578, 579, 580, 581,
	582, 583, 576, 430, 520, 497, 523, 438, 500, 499,
	0, 0, 534, 454, 535, 536, 359, 360, 361, 362,
	322, 561, 289, 457, 385, 0, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 527, 524, 620, 0,
	584, 585, 0, 0, 451, 452, 317, 324, 470, 326,
	288, 374, 319, 436, 333, 0, 463, 528, 464, 587,
	590, 588, 589, 366, 329, 330, 400, 334, 344, 388,
	435, 372, 393, 286, 426, 401, 348, 514, 541, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 568, 567, 566, 565,
	564, 563, 562, 0, 0, 511, 413, 298, 260, 294,
	295, 302, 609, 606, 417, 610, 0, 268, 491, 342,
	0, 383, 316, 556, 557, 0, 0, 216, 217, 218,
	219, 220, 221, 222, 223, 261, 224, 225, 226, 227,
	228, 229, 230, 233, 234, 235, 236, 237, 238, 239,
	240, 559, 231, 232, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 0, 0,
	0, 262, 263, 264, 265, 0, 0, 256, 257, 258,
	259, 0, 0, 0, 442, 443, 444, 466, 0, 428,
	490, 607, 0, 0, 0, 0, 0, 0, 0, 540,
	552, 586, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 481, 482, 614, 592, 371, 0, 496, 529, 518,
	601, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 341, 533, 515, 525, 516,
	501, 502, 503, 510, 321, 504, 505, 506, 476, 507,
	477, 508, 509, 0, 532, 483, 402, 355, 550, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 284, 206, 478, 597, 480, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 407, 1432, 285, 398, 437, 290, 405, 280,
	370, 394, 0, 0, 276, 422, 404, 352, 331, 332,
	275, 0, 389, 309, 323, 306, 368, 0, 421, 449,
	305, 440, 0, 432, 278, 0, 431, 367, 418, 423,
	353, 347, 277, 420, 351, 346, 335, 313, 465, 336,
	337, 327, 379, 345, 380, 328, 357, 356, 358, 0,
	0, 0, 0, 0, 460, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 594, 0, 434, 0, 0, 0, 0, 0, 0,
	406, 0, 0, 338, 0, 0, 0, 450, 0, 392,
	373, 616, 0, 0, 390, 343, 419, 381, 425, 408,
	433, 386, 382, 269, 409, 308, 354, 281, 283, 303,
	310, 312, 314, 315, 363, 364, 376, 397, 410, 411,
	412, 307, 291, 391, 292, 325, 293, 270, 299, 297,
	300, 399, 301, 272, 377, 416, 0, 320, 387, 350,
	273, 349, 378, 415, 414, 282, 441, 447, 448, 537,
	0, 453, 617, 618, 619, 462, 467, 468, 469, 471,
	472, 473, 474, 538, 555, 522, 492, 455, 546, 489,
	493, 494, 558, 0, 0, 0, 446, 339, 340, 0,
	318, 266, 267, 612, 304, 369, 560, 593, 485, 0,
	547, 486, 495, 296, 519, 531, 530, 365, 445, 0,
	542, 545, 475, 611, 0, 539, 554, 615, 553, 608,
	375, 0, 396, 551, 498, 0, 543, 517, 0, 544,
	513, 548, 0, 487, 0, 403, 427, 439, 456, 459,
	488, 573, 574, 575, 271, 458, 577, 578, 579, 580,
	581, 582, 583, 576, 430, 520, 497, 523, 438, 500,
	499, 0, 0, 534, 454, 535, 536, 359, 360, 361,
	362, 322, 561, 289, 457, 385, 0, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 526, 527, 524, 620,
	0, 584, 585, 0, 0, 451, 452, 317, 324, 470,
	326, 288, 374, 319, 436, 333, 0, 463, 528, 464,
	587, 590, 588, 589, 366, 329, 330, 400, 334, 344,
	388, 435, 372, 393, 286, 426, 401, 348, 514, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 568, 567, 566,
	565, 564, 563, 562, 0, 0, 511, 413, 298, 260,
	294, 295, 302, 609, 606, 417, 610, 0, 268, 491,
	342, 0, 383, 316, 556, 557, 0, 0, 216, 217,
	218, 219, 220, 221, 222, 223, 261, 224, 225, 226,
	227, 228, 229, 230, 233, 234, 235, 236, 237, 238,
	239, 240, 559, 231, 232, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 0,
	0, 0, 262, 263, 264, 265, 0, 0, 256, 257,
	258, 259, 0, 0, 0, 442, 443, 444, 466, 0,
	428, 490, 607, 0, 0, 0, 0, 0, 0, 0,
	540, 552, 586, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 481, 482, 614, 592, 371, 0, 496, 529,
	518, 601, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 311, 0, 0, 341, 533, 515, 525,
	516, 501, 502, 503, 510, 321, 504, 505, 506, 476,
	507, 477, 508, 509, 0, 532, 483, 402, 355, 550,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 284, 206, 478, 597, 480,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 407, 1430, 285, 398, 437, 290, 405,
	280, 370, 394, 0, 0, 276, 422, 404, 352, 331,
	332, 275, 0, 389, 309, 323, 306, 368, 0, 421,
	449, 305, 440, 0, 432, 278, 0, 431, 367, 418,
	423, 353, 347, 277, 420, 351, 346, 335, 313, 465,
	336, 337, 327, 379, 345, 380, 328, 357, 356, 358,
	0, 0, 0, 0, 0, 460, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	0, 0, 594, 0, 434, 0, 0, 0, 0, 0,
	0, 406, 0, 0, 338, 0, 0, 0, 450, 0,
	392, 373, 616, 0, 0, 390, 343, 419, 381, 425,
	408, 433, 386, 382, 269, 409, 308, 354, 281, 283,
	303, 310, 312, 314, 315, 363, 364, 376, 397, 410,
	411, 412, 307, 291, 391, 292, 325, 293, 270, 299,
	297, 300, 399, 301, 272, 377, 416, 0, 320, 387,
	350, 273, 349, 378, 415, 414, 282, 441, 447, 448,
	537, 0, 453, 617, 618, 619, 462, 467, 468, 469,
	471, 472, 473, 474, 538, 555, 522, 492, 455, 546,
	489, 493, 494, 558, 0, 0, 0, 446, 339, 340,
	0, 318, 266, 267, 612, 304, 369, 560, 593, 485,
	0, 547, 486, 495, 296, 519, 531, 530, 365, 445,
	0, 542, 545, 475, 611, 0, 539, 554, 615, 553,
	608, 375, 0, 396, 551, 498, 0, 543, 517, 0,
	544, 513, 548, 0, 487, 0, 403, 427, 439, 456,
	459, 488, 573, 574, 575, 271, 458, 577, 578, 579,
	580, 581, 582, 583, 576, 430, 520, 497, 523, 438,
	500, 499, 0, 0, 534, 454, 535, 536, 359, 360,
	361, 362, 322, 561, 289, 457, 385, 0, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 526, 527, 524,
	620, 0, 584, 585, 0, 0, 451, 452, 317, 324,
	470, 326, 288, 374, 319, 436, 333, 0, 463, 528,
	464, 587, 590, 588, 589, 366, 329, 330, 400, 334,
	344, 388, 435, 372, 393, 286, 426, 401, 348, 514,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 568, 567,
	566, 565, 564, 563, 562, 0, 0, 511, 413, 298,
	260, 294, 295, 302, 609, 606, 417, 610, 0, 268,
	491, 342, 0, 383, 316, 556, 557, 0, 0, 216,
	217, 218, 219, 220, 221, 222, 223, 261, 224, 225,
	226, 227, 228, 229, 230, 233, 234, 235, 236, 237,
	238, 239, 240, 559, 231, 232, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	0, 0, 0, 262, 263, 264, 265, 0, 0, 256,
	257, 258, 259, 0, 0, 0, 442, 443, 444, 466,
	0, 428, 490, 607, 0, 0, 0, 0, 0, 0,
	0, 540, 552, 586, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 481, 482, 614, 592, 371, 0, 496,
	529, 518, 601, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 341, 533, 515,
	525, 516, 501, 502, 503, 510, 321, 504, 505, 506,
	476, 507, 477, 508, 509, 0, 532, 483, 402, 355,
	550, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 284, 206, 478, 597,
	480, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 407, 424, 285, 398, 437, 290,
	405, 280, 370, 394, 0, 0, 276, 422, 404, 352,
	331, 332, 275, 0, 389, 309, 323, 306, 368, 0,
	421, 449, 305, 440, 0, 432, 278, 0, 431, 367,
	418, 423, 353, 347, 277, 420, 351, 346, 335, 313,
	465, 336, 337, 327, 379, 345, 380, 328, 357, 356,
	358, 0, 0, 0, 0, 0, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 0, 0, 594, 0, 434, 0, 0, 0, 0,
	0, 0, 406, 0, 0, 338, 0, 0, 0, 450,
	0, 392, 373, 616, 0, 0, 390, 343, 419, 381,
	425, 408, 433, 386, 382, 269, 409, 308, 354, 281,
	283, 704, 310, 312, 314, 315, 363, 364, 376, 397,
	410, 411, 412, 307, 291, 391, 292, 325, 293, 270,
	299, 297, 300, 399, 301, 272, 377, 416, 0, 320,
	387, 350, 273, 349, 378, 415, 414, 282, 441, 447,
	448, 537, 0, 453, 617, 618, 619, 462, 467, 468,
	469, 471, 472, 473, 474, 538, 555, 522, 492, 455,
	546, 489, 493, 494, 558, 0, 0, 0, 446, 339,
	340, 0, 318, 266, 267, 612, 304, 369, 560, 593,
	485, 0, 547, 486, 495, 296, 519, 531, 530, 365,
	445, 0, 542, 545, 475, 611, 0, 539, 554, 615,
	553, 608, 375, 0, 396, 551, 498, 0, 543, 517,
	0, 544, 513, 548, 0, 487, 0, 403, 427, 439,
	456, 459, 488, 573, 574, 575, 271, 458, 577, 578,
	579, 580, 581, 582, 583, 576, 430, 520, 497, 523,
	438, 500, 499, 0, 0, 534, 454, 535, 536, 359,
	360, 361, 362, 322, 561, 289, 457, 385, 0, 521,
	0, 0, 0, 0, 0, 0, 0, 0, 526, 527,
	524, 620, 0, 584, 585, 0, 0, 451, 452, 317,
	324, 470, 326, 288, 374, 319, 436, 333, 0, 463,
	528, 464, 587, 590, 588, 589, 366, 329, 330, 400,
	334, 344, 388, 435, 372, 393, 286, 426, 401, 348,
	514, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 568,
	567, 566, 565, 564, 563, 562, 0, 0, 511, 413,
	298, 260, 294, 295, 302, 609, 606, 417, 610, 0,
	268, 491, 342, 0, 383, 316, 556, 557, 0, 0,
	216, 217, 218, 219, 220, 221, 222, 223, 261, 224,
	225, 226, 227, 228, 229, 230, 233, 234, 235, 236,
	237, 238, 239, 240, 559, 231, 232, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 0, 0, 0, 262, 263, 264, 265, 0, 0,
	256, 257, 258, 259, 0, 0, 0, 442, 443, 444,
	466, 0, 428, 490, 607, 0, 0, 0, 0, 0,
	0, 0, 540, 552, 586, 0, 595, 596, 598, 600,
	599, 602, 0, 613, 481, 482, 614, 592, 371, 0,
	496, 529, 518, 601, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 311, 0, 0, 341, 533,
	515, 525, 516, 501, 502, 503, 510, 321, 504, 505,
	506, 476, 507, 477, 508, 509, 0, 532, 483, 402,
	355, 550, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 284, 206, 478,
	597, 480, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 407, 424, 285, 398, 437,
	290, 405, 280, 370, 394, 0, 0, 276, 422, 404,
	352, 331, 332, 275, 0, 389, 309, 323, 306, 368,
	0, 421, 449, 305, 440, 0, 432, 278, 0, 431,
	367, 418, 423, 353, 347, 277, 420, 351, 346, 335,
	313, 465, 336, 337, 327, 379, 345, 380, 328, 357,
	356, 358, 0, 0, 0, 0, 0, 460, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 591, 0, 0, 594, 0, 434, 0, 0, 0,
	0, 0, 0, 406, 0, 0, 338, 0, 0, 0,
	450, 0, 392, 373, 616, 0, 0, 390, 343, 419,
	381, 425, 408, 433, 661, 382, 269, 409, 308, 354,
	281, 283, 303, 310, 312, 314, 315, 363, 364, 376,
	397, 410, 411, 412, 307, 291, 391, 292, 325, 293,
	270, 299, 297, 300, 399, 301, 272, 377, 416, 0,
	320, 387, 350, 273, 349, 378, 415, 414, 282, 441,
	447, 448, 537, 0, 453, 617, 618, 619, 462, 467,
	468, 469, 471, 472, 473, 474, 538, 555, 522, 492,
	455, 546, 489, 493, 494, 558, 0, 0, 0, 446,
	339, 340, 0, 318, 266, 267, 612, 304, 369, 560,
	593, 485, 0, 547, 486, 495, 296, 519, 531, 530,
	365, 445, 0, 542, 545, 475, 611, 0, 539, 554,
	615, 553, 608, 375, 0, 396, 551, 498, 0, 543,
	517, 0, 544, 513, 548, 0, 487, 0, 403, 427,
	439, 456, 459, 488, 573, 574, 575, 271, 458, 577,
	578, 579, 580, 581, 582, 662, 576, 430, 520, 497,
	523, 438, 500, 499, 0, 0, 534, 454, 535, 536,
	359, 360, 361, 362, 322, 561, 289, 457, 385, 0,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 526,
	527, 524, 620, 0, 584, 585, 0, 0, 451, 452,
	317, 324, 470, 326, 288, 374, 319, 436, 333, 0,
	463, 528, 464, 587, 590, 588, 589, 366, 329, 330,
	400, 334, 344, 388, 435, 372, 393, 286, 426, 401,
	348, 514, 541, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	568, 567, 566, 565, 564, 563, 562, 0, 0, 511,
	413, 298, 260, 294, 295, 302, 609, 606, 417, 610,
	0, 268, 491, 342, 0, 383, 316, 556, 557, 0,
	0, 216, 217, 218, 219, 220, 221, 222, 223, 261,
	224, 225, 226, 227, 228, 229, 230, 233, 234, 235,
	236, 237, 238, 239, 240, 559, 231, 232, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 0, 0, 0, 262, 263, 264, 265, 1068,
	0, 256, 257, 258, 259, 0, 0, 1910, 442, 443,
	444, 466, 1871, 428, 490, 607, 0, 0, 0, 0,
	0, 0, 0, 540, 552, 586, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 481, 482, 614, 592, 0,
	0, 0, 1912, 1880, 0, 0, 0, 0, 0, 0,
	0, 0, 1913, 1914, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1887, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1054, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1076, 1080, 1082, 1084, 1086, 1087, 1089, 0, 1094, 1090,
	1091, 1092, 1093, 0, 1071, 1072, 1073, 1074, 1052, 1053,
	1077, 1903, 1055, 0, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1067, 1069, 1065, 1066, 1075, 0, 0,
	0, 0, 0, 0, 0, 1079, 1081, 1083, 1085, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1070, 0, 0, 0, 0, 0, 0,
	0, 0, 1870, 2684, 1869, 0, 2683, 0, 0, 0,
	0, 1891, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1897, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1885, 1919, 0, 0, 1886, 1888, 1890, 0,
	1892, 1893, 1894, 1898, 1899, 1900, 1902, 1905, 1906, 1907,
	0, 0, 0, 0, 0, 0, 0, 1895, 1904, 1896,
	0, 0, 0, 0, 0, 0, 1068, 0, 0, 1874,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1911, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1867, 1868, 0,
	0, 2532, 2533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1908, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1884, 0, 0, 683, 682, 689, 679, 1883,
	0, 0, 0, 1068, 0, 0, 0, 686, 687, 0,
	688, 692, 0, 0, 673, 0, 0, 0, 0, 0,
	0, 0, 0, 1901, 697, 0, 0, 1054, 0, 0,
	0, 1044, 1889, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1916, 1915, 1076, 1080, 1082,
	1084, 1086, 1087, 1089, 0, 1094, 1090, 1091, 1092, 1093,
	0, 1071, 1072, 1073, 1074, 1052, 1053, 1077, 0, 1055,
	0, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1067, 1069, 1065, 1066, 1075, 0, 0, 0, 0, 0,
	0, 0, 1079, 1081, 1083, 1085, 1088, 0, 1876, 0,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1054, 0, 0, 0, 0, 0,
	1070, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1918, 0, 0, 1917, 1076, 1080, 1082, 1084, 1086, 1087,
	1089, 0, 1094, 1090, 1091, 1092, 1093, 0, 1071, 1072,
	1073, 1074, 1052, 1053, 1077, 0, 1055, 0, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1067, 1069, 1065,
	1066, 1075, 683, 682, 689, 679, 0, 0, 0, 1079,
	1081, 1083, 1085, 1088, 686, 687, 1910, 688, 692, 0,
	0, 673, 0, 183, 0, 0, 0, 0, 0, 0,
	0, 697, 674, 676, 675, 0, 0, 0, 0, 0,
	0, 0, 681, 0, 0, 3404, 0, 1070, 0, 0,
	0, 1912, 0, 0, 685, 0, 0, 0, 0, 0,
	0, 700, 0, 0, 0, 0, 0, 0, 678, 0,
	0, 0, 0, 0, 701, 0, 0, 703, 0, 0,
	0, 0, 702, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1887, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1903, 0, 0, 1910, 0, 0, 0, 680, 684, 690,
	0, 691, 693, 0, 0, 694, 695, 696, 0, 0,
	698, 699, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1912, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 674,
	676, 675, 0, 0, 0, 0, 0, 0, 0, 681,
	0, 0, 1078, 1910, 0, 0, 0, 0, 0, 0,
	0, 685, 0, 0, 0, 0, 0, 0, 700, 0,
	1891, 0, 0, 0, 0, 678, 0, 0, 0, 1887,
	0, 1897, 0, 0, 0, 0, 0, 0, 1912, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1885, 1919, 0, 0, 1886, 1888, 1890, 0, 1892,
	1893, 1894, 1898, 1899, 1900, 1902, 1905, 1906, 1907, 0,
	0, 0, 0, 0, 0, 0, 1895, 1904, 1896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1887,
	0, 0, 0, 3536, 0, 0, 0, 1903, 0, 1078,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1911, 0, 0, 0, 0, 0, 677, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 680, 684, 690, 0, 691, 693,
	0, 0, 694, 695, 696, 0, 0, 698, 699, 0,
	0, 0, 0, 0, 1908, 0, 0, 1903, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1884, 0, 0, 0, 0, 0, 1891, 1883, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1897, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1901, 0, 0, 0, 0, 0, 1885, 1919,
	0, 1889, 1886, 1888, 1890, 0, 1892, 1893, 1894, 1898,
	1899, 1900, 1902, 1905, 1906, 1907, 0, 0, 0, 0,
	0, 0, 0, 1895, 1904, 1896, 0, 1891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1897, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1911, 1885, 1919,
	0, 0, 1886, 1888, 1890, 0, 1892, 1893, 1894, 1898,
	1899, 1900, 1902, 1905, 1906, 1907, 0, 0, 0, 0,
	0, 0, 0, 1895, 1904, 1896, 0, 0, 0, 0,
	0, 0, 0, 677, 0, 0, 0, 0, 0, 0,
	0, 1908, 0, 0, 0, 0, 0, 0, 0, 146,
	0, 0, 0, 0, 0, 0, 0, 1911, 1884, 0,
	0, 0, 0, 0, 0, 1883, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1901,
	0, 0, 0, 0, 0, 0, 0, 0, 1889, 0,
	0, 1908, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1884, 0,
	0, 0, 0, 0, 0, 1883, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1901,
	0, 0, 0, 0, 0, 0, 0, 0, 1889,
}

var yyPact = [...]int{
	3774, -1000, -1000, -1000, -307, 13368, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 44561, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 350, 44561, -304, 27453, 42728, -1000, -1000, 2481,
	-1000, 43339, 15221, 44561, 433, 424, 44561, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 861, -1000, 47005,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 785, 3878, 46394,
	10289, -235, -1000, 1525, -57, 2394, 360, 1032, 1051, 1259,
	1259, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4181, 910, 43950, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 353,
	565, 852, 910, 20117, 85, 84, 1525, 414, -124, -119,
	-126, 3647, -1000, 1158, 3909, 204, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10289, 10289, 13368,
	-357, 13368, 10289, 44561, 44561, -1000, -1000, -1000, -1000, -304,
	43339, 785, 3878, 10289, 2394, 360, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -119,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -124, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -126, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 84,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 47875, -1000, 1597, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2211, 2903, 1583, 2391, 742, 42728, 44561, -1000, 137,
	742, -1000, -1000, -1000, 1525, 3311, -1000, 44561, 44561, 143,
	1807, -1000, 449, 415, 466, 270, 1582, -1000, -1000, -1000,
	-1000, -1000, -1000, 569, 3274, -1000, 44561, 44561, 2918, 44561,
	-1000, 2173, 653, -1000, 48169, 3105, 1379, 892, 2929, -1000,
	-1000, 2896, -1000, 264, 306, 263, 372, 345, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 281, -1000, 3180, -1000, -1000,
	266, -1000, -1000, 269, -1000, -1000, -1000, 80, -1000, -1000,
	-1000, -1000, -1000, -1000, -18, -1000, -1000, 1101, 2000, 10289,
	1758, -1000, 2910, 1608, -1000, -1000, -1000, 5985, 12131, 12131,
	12131, 12131, 44561, -1000, -1000, 2663, 10289, 2895, 2892, 2890,
	2889, -1000, -1000, -1000, -1000, -1000, -1000, 1581, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1951, -1000, -1000,
	-1000, 12745, -1000, 2887, 2885, 2874, 2873, 2866, 2863, 2861,
	2860, 2849, 2844, 2842, 2839, 2838, 2837, 2574, 14600, 2835,
	2390, 2387, 2834, 2833, 2830, 2383, 2825, 2824, 2817, 2574,
	2574, 2804, 2778, 2777, 2774, 2771, 2770, 2762, 2758, 2757,
	2756, 2753, 2734, 2733, 2732, 2728, 2727, 2723, 2720, 2719,
	2718, 2715, 2712, 2708, 2706, 2701, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1539,
	-1000, 2700, 3275, 2630, -1000, 3196, 3192, 3173, 3171, -277,
	2699, 2125, -1000, -1000, 110, 3272, 44561, -1000, -93, -1000,
	-1000, 1004, -1000, 995, -1000, 779, 44561, 44561, 181, 881,
	779, 779, 779, 779, 779, 834, 779, 3208, 845, 844,
	842, 839, 779, -70, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1806, 1801, 3000, 973, -1000, -1000, -1000, -1000, 1443,
	44561, -1000, 2633, 1711, 1711, 3258, 3207, 690, 685, 682,
	1711, 490, -1000, 1836, 1836, 1836, 1836, 1711, 444, 739,
	3211, 3211, 71, 1836, 58, 1711, 1711, 58, 1711, 1711,
	-1000, 1773, 240, -285, -1000, -1000, -1000, -1000, 1836, 1836,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3170, 3168, 785,
	785, 44561, 168, 44561, 785, 785, 785, 44561, 792, 15,
	45783, 45172, 2173, 646, 629, 1464, 1875, -1000, 1707, 44561,
	44561, 1707, 1707, 23176, 22565, -1000, 44561, -1000, 3275, 2630,
	2563, 1656, 2561, 2630, -133, -134, -135, 785, 785, 785,
	785, 785, 213, 785, 785, 785, 785, 785, 44561, 44561,
	42117, 785, 785, 785, 8441, 8441, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 13368, 2044, 2061, 202, -24,
	-294, 265, -1000, -1000, 44561, 3073, 227, -1000, -1000, -1000,
	2590, -1000, 2623, 2623, 2623, 2623, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2623, 2623, 2632, 2695, -1000,
	-1000, 2622, 2622, 2622, 2590, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2628, 2628, 2631, 2631, 2628, 44561, -146, -1000, -1000, 10289,
	44561, 3086, 384, 2694, 742, -1000, -1000, 44561, 103, 407,
	3275, 3084, 3211, 3252, -1000, -1000, 1576, 2118, 2378, -1000,
	270, -1000, 428, 270, 1662, -1000, 1122, -1000, -1000, -1000,
	-1000, -1000, 44561, -18, 394, -1000, -1000, 2370, 2693, -1000,
	563, 1243, 1436, -1000, 247, 47982, 35396, 2173, 35396, 44561,
	-1000, -1000, -1000, -1000, -1000, -1000, 72, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 262, -1000, 10289, 10289, 10289, 10289, 10289, -1000, 686,
	11517, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12131, 12131,
	12131, 12131, 12131, 12131, 12131, 12131, 12131, 12131, 12131, 12131,
	2662, 1718, 12131, 12131, 12131, 12131, 25009, 1656, 3107, 1457,
	288, 1608, 1608, 1608, 1608, 10289, -1000, 1816, 2000, 10289,
	10289, 10289, 10289, 44561, -1000, -1000, 3356, 10289, 10289, 4364,
	10289, 3162, 10289, 10289, 10289, 2557, 4748, 44561, 10289, -1000,
	2554, 2551, -1000, -1000, 1950, 10289, -1000, -1000, 10289, -1000,
	-1000, 10289, 12131, 10289, -1000, 10289, 10289, 10289, -1000, -1000,
	598, 3162, 3162, 3162, 1813, 10289, 10289, 3162, 3162, 3162,
	1750, 3162, 3162, 3162, 3162, 3162, 3162, 3162, 3162, 3162,
	3162, 2543, 2536, 2534, 9675, 3211, -235, -1000, 7827, 3084,
	3211, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -279, 2685, 44561, 2377, 2376, -320, 1029, 423, 29,
	1015, 997, 1002, -1000, 44561, 1862, 3134, -1000, 2684, 44561,
	779, 779, 779, -1000, 40284, 35396, 44561, 44561, 2173, 44561,
	44561, 44561, 779, 779, 779, 779, 44561, -1000, 3051, 35396,
	3017, 792, -1000, 44561, 1443, 3130, 44561, 3258, 12131, 12131,
	-1000, -1000, 10289, 41506, 1836, 1711, 1711, -1000, -1000, 44561,
	-1000, -1000, -1000, 1836, 44561, 1836, 1836, 3258, 1836, -1000,
	-1000, -1000, 1711, 1711, -1000, -1000, 10289, -1000, -1000, 1836,
	1836, -1000, -1000, 3258, 44561, 68, 3258, 3258, 60, -1000,
	-1000, -1000, 1711, 44561, 44561, 779, 44561, -1000, 44561, 44561,
	-1000, -1000, 44561, 44561, 4319, 40284, 40895, 3160, -1000, 35396,
	44561, 44561, 831, 33563, -1000, 1365, -1000, 7, -1000, 19,
	15, 1707, 15, 1707, -1000, 558, 568, 21343, 513, 35396,
	5362, -1000, -1000, 1707, 1707, 5362, 5362, 1620, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1433, -1000, 259, 3211, -1000,
	-1000, -1000, -1000, -1000, 2117, 2115, 2114, 44561, 40284, 35396,
	2173, 44561, 785, 44561, 44561, 44561, 44561, 44561, -1000, 2669,
	1573, -1000, 3104, 44561, 44561, 44561, 1386, -1000, -1000, 18276,
	1571, 1386, -1000, 1866, -1000, 10289, 13368, -263, 10289, 13368,
	13368, 10289, 13368, -1000, 10289, 220, -1000, -1000, -1000, -1000,
	2112, -1000, 2110, -1000, -1000, -1000, -1000, -1000, 2373, 2373,
	-1000, 2108, -1000, -1000, -1000, -1000, 2107, -1000, -1000, 2106,
	-1000, -1000, -1000, -1000, -174, 2533, 1101, -1000, 2372, 2928,
	-236, -1000, 19506, 44561, 44561, 384, -322, -1000, 1799, 1793,
	1787, -1000, -236, -1000, 18891, 44561, 3211, -1000, -244, 3084,
	10289, 44561, -1000, 3206, -1000, -1000, 270, -1000, 420, 351,
	-1000, -1000, -1000, -1000, -1000, -1000, 1568, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 341, 1431, -1000,
	44561, -1000, -1000, 247, 35396, 37229, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 234, -1000, -1000, 191, -1000, 830, 185,
	1660, -1000, -1000, 174, 206, 157, 918, 2000, -1000, 1891,
	1891, 1879, -1000, 672, -1000, -1000, -1000, -1000, 2663, -1000,
	-1000, -1000, 1876, 1804, -1000, 1693, 1693, 1624, 1624, 1624,
	1624, 1624, 1679, 1679, -1000, -1000, -1000, 5985, 2662, 12131,
	12131, 12131, 12131, 873, 873, 4072, 3253, -1000, -1000, -1000,
	-1000, 10289, 198, 1855, -1000, 10289, 2442, 1593, 2124, 1352,
	1565, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2532, 2530, 2279, 3271, 2529, 10289, -1000, -1000, 1658,
	1657, 1647, -1000, 2204, 9061, -1000, -1000, -1000, 2522, 1558,
	2521, -1000, -1000, -1000, 2519, 1644, 1288, 2518, 2724, 2516,
	2515, 2512, 2510, 1427, 10289, 10289, 10289, 10289, 2507, 1642,
	1633, 10289, 10289, 10289, 10289, 2505, 10289, 10289, 10289, 10289,
	10289, 10289, 10289, 10289, 10289, 10289, 111, 111, 111, 1417,
	1392, -1000, -1000, 1619, -1000, 2000, -1000, -1000, 3084, -1000,
	2661, 2097, 1390, -1000, -1000, -301, 2293, 44561, 1027, 44561,
	-1000, -1000, 1022, 988, 984, 3202, 3103, 44561, 1175, 2657,
	44561, 44561, 44561, 210, -1000, -1000, 1217, -1000, 185, 194,
	438, 1118, 2917, 3270, -147, 44561, 44561, 44561, 44561, 3128,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 39673, -1000,
	2656, 1599, -1000, -1000, 1608, 1608, 2000, 2915, 44561, 44561,
	3258, 3258, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1836,
	3258, 3258, 1370, 1711, 1836, -1000, -1000, 1836, -339, -1000,
	1836, -1000, -339, 1557, -339, 44561, -1000, -1000, -1000, 3126,
	2633, 1368, -1000, -1000, -1000, 3251, 1070, 769, 769, 1014,
	508, 3250, 17054, -1000, 1739, 1204, 829, 3018, 278, -1000,
	1739, -171, 751, 1739, 1739, 1739, 1739, 1739, 1739, 1739,
	589, 574, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739,
	1739, 1739, 1739, 1036, 1739, 1739, 1739, 1739, 1739, -1000,
	1739, 2653, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 697,
	203, 3157, 312, -1000, 311, 1217, 3155, 338, 44561, 3010,
	1236, -1000, -1000, -1000, -1000, 25620, 25620, 20732, 25620, -1000,
	200, 15, 22, -1000, -1000, 1365, 5362, 1365, 5362, -1000,
	-1000, 813, -1000, -1000, 1118, -1000, 44561, 44561, -1000, -1000,
	2649, 1786, -1000, -1000, 14600, -1000, 5362, 5362, -1000, -1000,
	26842, 44561, -1000, -26, -1000, -31, 3084, -1000, -1000, -1000,
	1359, -1000, -1000, 1361, 1118, 2923, 44561, 1359, 1359, 1359,
	-1000, -1000, 16443, 44561, 44561, -1000, -1000, -1000, 3258, 8441,
	-1000, 33563, -1000, -1000, 39062, -1000, 38451, 3258, 1819, -1000,
	13368, 2034, 197, -1000, 251, -310, 199, 1948, 196, 2000,
	-1000, -1000, 2504, 2501, 1594, -1000, 1591, 2500, 1590, 1588,
	2096, -1000, 53, -1000, 3076, 1119, -1000, 2648, -1000, 1559,
	2979, -1000, 1355, -1000, 1784, 1542, -1000, -1000, -1000, 10289,
	37840, 10289, 1119, 1522, 2978, 1355, 3084, 2364, -1000, 1349,
	-1000, 2088, 1541, 142, -1000, -1000, -1000, 44561, 785, 2370,
	1519, 37229, 1235, -1000, 811, 1533, 1532, -1000, 35396, 239,
	35396, -1000, 35396, -1000, -1000, 363, -1000, 44561, 3079, -1000,
	-1000, -1000, 2293, 1782, -331, 44561, -1000, -1000, -1000, -1000,
	-1000, 1503, -1000, 873, 873, 4072, 2616, -1000, 12131, -1000,
	12131, 3102, -1000, 1814, -1000, 10289, 1996, 47568, 10289, 47568,
	905, 24398, 44561, -1000, -1000, 10289, 10289, -1000, 3063, -1000,
	-1000, -1000, -1000, 10289, 10289, 2135, -1000, 44561, -1000, -1000,
	-1000, -1000, 24398, -1000, 12131, -1000, -1000, -1000, -1000, 10289,
	1231, 1231, 3009, 1482, 111, 111, 111, 2988, 2984, 2893,
	1480, 111, 2871, 2853, 2847, 2840, 2828, 2822, 2772, 2764,
	2738, 2567, -1000, 2646, -1000, -1000, 1949, 10903, 7827, -1000,
	-1000, 283, 1335, 2093, 2339, 125, -1000, 1780, -1000, 44561,
	1062, -1000, -1000, -1000, 985, 359, -1000, 237, 2498, 1333,
	-1000, -1000, 44561, -1000, -1000, -1000, 16443, 2633, 2645, 2633,
	112, 1739, 591, 35396, 601, -1000, 44561, 44561, 2037, 1779,
	2921, 731, 3072, 44561, 2641, 388, 2640, 2639, 3125, 418,
	47972, 44561, 1362, -1000, 1530, 3909, -1000, 44561, -1000, 2173,
	-1000, 1711, -1000, -1000, 3258, -1000, -1000, 10289, 10289, 3258,
	1711, 1711, -1000, 1011, 1836, -1000, 44561, -1000, -1000, 418,
	47972, 3123, 47601, 544, 2565, -1000, 44561, -1000, -1000, -1000,
	772, -1000, 1001, 779, 44561, 1903, 1001, 1901, 2637, -1000,
	-1000, 44561, 44561, 44561, 44561, -1000, -1000, 44561, -1000, 44561,
	44561, 44561, 44561, 44561, 36618, -1000, 44561, 44561, -1000, 44561,
	1899, 44561, 1897, 3131, -1000, 1739, 1739, 934, -1000, -1000,
	562, -1000, 36618, 2091, 2090, 2089, 2086, 2331, 2328, 2325,
	1739, 1739, 2085, 2314, 36007, 2313, 1100, 2071, 2070, 2063,
	2030, 2312, 893, -1000, 2308, 2022, 2001, 1995, 44561, 2635,
	2253, -1000, -1000, 112, 1739, 307, 44561, 1777, 591, 437,
	-50, 21954, -1000, -1000, 44561, 33563, 33563, 33563, 33563, -1000,
	2960, 2959, -1000, 2944, 2941, 2961, 44561, 33563, 2633, -1000,
	36007, -1000, -1000, -1000, 1656, 1476, 3080, 951, 10289, -1000,
	-1000, -1, -11, -1000, -1000, -1000, 35396, 2306, 513, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3187, 44561, 44561, 710,
	2486, 1311, -1000, -1000, -1000, 47972, 2623, 2623, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2623, 2623, 2632,
	-1000, -1000, 2622, 2622, 2622, 2590, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2628, 2628, 2631, 2631,
	2628, -1000, -1000, 3256, -1000, 1301, -1000, -1000, 1528, -1000,
	3256, 1843, -313, 13368, 1839, 1810, -1000, 10289, 13368, 10289,
	-264, 287, -266, -1000, -1000, -1000, 2297, -1000, -1000, -1000,
	2053, -1000, 2052, -1000, 135, 141, 1892, -236, 7827, 412,
	44561, -236, 44561, 7827, -1000, 44561, 189, -347, -350, 163,
	408, -236, 3187, 53, 10289, 3025, -1000, -1000, 44561, 2041,
	-1000, -1000, -1000, 3264, 35396, 2173, 1654, 34785, -1000, 252,
	-1000, 231, 506, 2296, -1000, 837, 122, 2295, 2293, -1000,
	-1000, -1000, -1000, 12131, 1608, -1000, -1000, -1000, 2000, 10289,
	2484, -1000, 966, 966, 2065, 2483, 2482, -1000, 2623, 2623,
	-1000, 2590, 2622, 2590, 966, 966, 2479, -1000, 2158, 2558,
	-1000, 2511, 2466, 10289, -1000, 2477, 4055, 1579, -82, -204,
	111, 111, -1000, -1000, -1000, -1000, 111, 111, 111, 111,
	-1000, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 747, -109, -289, -110, -290, -1000, 2476, 1281, -1000,
	-1000, -1000, -1000, -1000, 4364, 1275, 451, 451, 2293, 2292,
	809, 1010, 44561, -1000, -1000, -1000, 44561, 2291, 2288, 1175,
	47972, 2474, 3121, 15832, 3112, 2134, -1000, -1000, -1000, 26231,
	542, -1000, -1000, -1000, 694, 260, 2033, 534, -1000, 44561,
	338, 338, 3034, 1776, 2287, 44561, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3072, -1000, 930, 390, 32341, 13989, -1000,
	370, 44561, -1000, 15832, 15832, 370, 389, 1760, -1000, 742,
	1193, 136, 33563, 44561, -1000, 32952, 2467, -1000, 1118, 3258,
	-1000, 2000, 2000, -339, 3258, 3258, 1774, 1711, -1000, 389,
	-1000, 370, -1000, 857, 17665, 482, 435, 413, -1000, 613,
	-1000, -1000, 726, 3043, 47972, -1000, 44561, -1000, 44561, -1000,
	44561, 44561, 779, 10289, 3043, 44561, 808, -1000, 1080, 387,
	373, 688, 688, 1274, -1000, 3090, -1000, -1000, 1269, -1000,
	-1000, -1000, -1000, 44561, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 24398, 24398, 3152, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2285, 2281, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 44561, 1468,
	-1000, 1772, 2134, 26231, 1771, 1707, 2278, 542, 2037, 1770,
	2130, 44561, -1000, 1141, 44561, 44561, -1000, 1252, -1000, 1766,
	2907, 2920, 2907, -1000, -1000, -1000, -1000, 2943, -1000, 2922,
	-1000, -1000, 1252, -1000, -1000, -1000, -1000, -1000, 951, -1000,
	3185, 1001, 1001, 1001, 2463, -1000, -1000, -1000, 1235, 2459,
	-1000, -1000, -1000, 3289, -1000, -1000, -1000, -1000, -1000, -1000,
	16443, 3071, 3218, 3247, 34174, 3218, -1000, -313, 1812, -1000,
	1979, 193, 1856, 44561, -1000, -1000, -1000, 2458, 2445, -247,
	147, 3245, 3244, 1026, -1000, 2444, 1206, -236, -1000, -1000,
	1119, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -236, -1000,
	1119, -1000, 135, -1000, -1000, 3064, -1000, -1000, 2173, -1000,
	223, -1000, -1000, -1000, -1000, -1000, -1000, 171, -1000, 44561,
	-1000, 1168, 115, -1000, 2000, -1000, -1000, -1000, -1000, -1000,
	47568, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10289, -1000, -1000, -1000, 2462, -1000, -1000, 10289,
	2440, 2277, 2438, 2272, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3275, -1000, 3243, 1424, 2430, 2428, 1423, 2424, 2423, -1000,
	10289, 2421, 4364, 943, 2266, 943, -1000, -1000, 328, 44561,
	3260, -1000, -1000, -1000, -1000, -1000, 864, 370, 2420, 1167,
	-1000, -1000, -1000, -1000, 370, -1000, 2265, 184, -1000, -1000,
	-1000, -1000, 2258, 2257, 2031, -1000, -1000, 1989, 1540, 209,
	-1000, -1000, -1000, -1000, -1000, -1000, 2130, 2130, 2050, 1754,
	-340, -1000, 2618, -1000, 1739, 1739, 1739, 44561, 1416, -1000,
	1739, 1739, 2419, -1000, -1000, 2418, 2417, -148, 754, 1734,
	1719, -1000, 2026, 25620, 33563, 32952, 1205, -1000, 1506, -1000,
	-1000, -1000, -1000, -1000, -1000, 2254, 3258, 754, -1000, 471,
	2019, 12131, 2614, 12131, 2613, 488, 2611, 1412, -1000, 44561,
	-1000, -1000, 44561, 310, 2610, -1000, 2609, 2914, 429, 2608,
	2604, 44561, 2407, -1000, 3043, 44561, 669, 3066, -1000, -1000,
	-1000, 357, -1000, -1000, 493, -1000, 44561, -1000, 44561, -1000,
	1603, -1000, 24398, -1000, -1000, 1411, -1000, 2253, 2241, -1000,
	184, 2239, 5362, -1000, -1000, 3034, 2235, -1000, 2234, -1000,
	44561, 1141, 1141, 3275, 44561, 7827, -1000, -1000, 10289, 2602,
	-1000, 10289, -1000, -1000, -1000, -1000, -1000, 2601, 3002, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1345, -1000, 10289, 10289,
	-1000, -1000, 774, 13368, -269, 273, -1000, -1000, -1000, -250,
	2232, -1000, -1000, 3242, 2224, 2154, 44561, -1000, -1000, 1119,
	1119, -247, -1000, -1000, 1118, -1000, -1000, 1059, 566, -1000,
	2409, 2357, -1000, 2251, 111, -1000, 111, -1000, 235, 10289,
	-1000, 2222, -1000, -1000, -1000, 2221, -1000, -1000, 2238, -1000,
	2408, -1000, 2218, -1000, -1000, 44561, 804, 1007, 47972, -158,
	-148, 15832, -158, -1000, -1000, 361, -1000, -1000, 319, -1000,
	-1000, 1972, 570, -1000, -1000, -1000, -1000, 1748, 1922, 2184,
	30508, 24398, 25009, 2213, -1000, -1000, 32341, 1345, 1345, 48190,
	262, 48407, -1000, 2600, 1058, 1717, -1000, 2018, -1000, 2005,
	-1000, 3258, 1205, 132, -1000, -1000, 1652, -351, -1000, 1058,
	2565, 3241, -1000, 3341, 44561, 3217, 44561, 2599, 1747, 12131,
	-1000, 726, 2972, -1000, -1000, 310, -1000, -1000, 1885, 12131,
	-1000, -1000, 2201, 25009, 816, 1746, 1744, 963, 2593, -1000,
	512, 3287, -1000, -1000, -1000, 928, 2592, -1000, 1888, 1870,
	-1000, 44561, -1000, 30508, 30508, 724, 724, 30508, 30508, 2591,
	688, -1000, -1000, 12131, -1000, -1000, 1739, -1000, -1000, -1000,
	1739, 1563, -1000, -1000, -1000, -1000, -1000, -1000, 2050, -1000,
	-1000, -1000, 3211, -1000, -1000, 2000, 44561, 2000, 31730, -1000,
	3238, 3231, -1000, 2000, 1101, -1000, -313, 44561, 44561, -252,
	2003, -1000, 2193, 140, -1000, -1000, 1103, -250, -254, 60,
	24398, 1743, -1000, -1000, -1000, -1000, -1000, 2406, -1000, 531,
	-1000, -1000, -1000, 1101, 2404, 2401, -1000, -1000, -1000, -1000,
	327, 44561, -144, -1000, -1000, 396, -1000, -1000, -1000, 580,
	2142, -1000, -1000, 313, -1000, -1000, 2192, -1000, -1000, 114,
	-1000, 1742, 1404, -1000, 2590, 10289, -1000, -1000, -1000, -1000,
	-1000, -1000, 712, -1000, 370, 48347, -1000, 1204, -1000, 1059,
	712, 29286, 578, 305, -1000, 1997, -1000, -1000, 3275, -1000,
	-1000, 559, -1000, 484, -1000, 1383, -1000, 1373, 31119, 1987,
	2750, -1000, 3759, 821, -1000, -1000, 4072, -1000, -1000, -1000,
	-1000, -1000, -1000, 2191, 2189, -1000, -1000, -1000, -1000, -1000,
	1986, 2583, -37, 3140, 2188, -1000, -1000, 2580, 1371, 1358,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1356,
	1346, 30508, -1000, -1000, 4072, 1984, 24398, 1739, -1000, -1000,
	1336, 1332, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2579,
	-1000, -1000, 3230, -252, -257, 2186, 134, 131, -1000, 2185,
	-1000, -1000, 647, -242, 107, 96, 93, -1000, -1000, -1000,
	10289, -1000, -1000, 44561, 796, 44561, 507, -1000, -1000, -1000,
	-1000, 165, -1000, -1000, -1000, -1000, -1000, 2184, 2177, -1000,
	30508, 3090, 2225, 450, 3226, -1000, 48407, -1000, 1739, -1000,
	450, 1323, -1000, 1739, 1739, -1000, 406, -1000, 1686, -1000,
	1975, -1000, 3211, -1000, 403, -1000, 467, -1000, -1000, -1000,
	1317, -1000, -1000, -1000, 3759, 477, -1000, 594, 2578, -1000,
	-1000, 2375, 10289, 2574, 1739, 2243, -139, 30508, 2913, 2911,
	2908, 2766, 1315, -1000, -1000, 24398, -1000, -1000, 29897, 44561,
	2154, -1000, -1000, 2172, -1000, 791, 124, 131, -1000, 3225,
	127, 3223, 3222, 1087, 1872, -1000, 102, 100, 90, -1000,
	-1000, -1000, -1000, -1000, 325, 525, -1000, 245, -1000, -1000,
	-1000, 303, -1000, -1000, 3090, -1000, 3221, 544, -1000, 24398,
	-1000, -1000, 29286, 1345, 1345, -1000, -1000, 1967, -1000, -1000,
	-1000, -1000, 1964, -1000, -1000, -1000, 1295, -1000, 44561, 914,
	7213, -1000, 2220, -1000, 44561, -1000, 2843, -1000, 232, 1280,
	303, 724, 303, 724, 303, 724, 303, 724, 238, -1000,
	-1000, -1000, 1262, -1000, -1000, -1000, 2571, 1959, 147, 117,
	3214, -1000, 2154, 3213, 2154, 2154, -1000, 116, 647, -1000,
	-1000, -1000, 44561, 2165, -1000, -1000, -1000, -1000, 1739, 1739,
	2164, 2163, 381, -1000, -1000, -1000, 28675, 482, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 477, 48407, -1000, 7213, 1225,
	-1000, 2000, -1000, 688, -1000, -1000, 2619, 2485, 3269, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 44561,
	3135, 23787, 121, -1000, -1000, -1000, 2161, -1000, 2154, -1000,
	-1000, 1738, -1000, -1000, -287, 1957, 1955, -1000, -1000, 44561,
	-1000, 44561, 471, -1000, 48407, 1224, -1000, 7213, -1000, -1000,
	3282, -1000, 3280, 832, 832, 303, 303, 303, 303, -1000,
	-1000, 44561, -1000, 1211, -1000, -1000, -1000, 1473, -1000, -1000,
	-1000, -1000, 2151, -1000, -1000, 2140, -1000, -1000, -1000, 1145,
	2565, -1000, -1000, -1000, -1000, -1000, 1991, 509, -1000, 1083,
	-1000, 1736, -1000, 28064, 44561, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 44561, 6599, -1000, 1123, -1000, -1000, 2000, 44561,
	-1000,
}

var yyPgo = [...]int{
	0, 182, 3323, 256, 175, 3962, 126, 255, 225, 221,
	254, 3961, 3960, 3959, 3958, 3083, 3066, 3957, 3956, 3955,
	3954, 3953, 3952, 3950, 3949, 3948, 3946, 3945, 3944, 3943,
	3942, 3941, 3939, 3938, 3935, 3932, 3931, 3930, 3929, 3928,
	3927, 3926, 3921, 3918, 3917, 3915, 3914, 253, 3913, 3911,
	3909, 3908, 3905, 3902, 3901, 3900, 3899, 3898, 3897, 3896,
	3895, 3889, 3882, 3858, 3857, 3855, 3854, 3853, 3852, 3849,
	3848, 3846, 3845, 3844, 3842, 3840, 3839, 3837, 3836, 251,
	3834, 3833, 216, 3832, 3064, 3831, 3829, 3827, 3826, 3823,
	3821, 3820, 230, 3819, 3811, 3810, 3809, 3808, 3804, 3803,
	3802, 3801, 3799, 3798, 242, 3797, 3796, 3795, 3794, 245,
	3793, 235, 3792, 172, 138, 3791, 3786, 3785, 3781, 3780,
	3779, 3778, 244, 193, 75, 3777, 49, 3775, 3771, 223,
	3770, 151, 3769, 155, 3768, 3767, 3766, 3763, 3761, 3759,
	3757, 3756, 3755, 3754, 3749, 3747, 3746, 3743, 3734, 3732,
	3731, 3730, 95, 3728, 261, 3727, 76, 3725, 188, 141,
	3723, 52, 129, 258, 1522, 264, 267, 186, 171, 102,
	3717, 331, 3716, 180, 236, 162, 31, 3715, 144, 3713,
	263, 45, 50, 246, 154, 55, 164, 133, 3710, 224,
	113, 111, 3709, 3706, 145, 3703, 241, 181, 3697, 108,
	3695, 3691, 3689, 3674, 3673, 195, 190, 3667, 3664, 136,
	3663, 3661, 72, 131, 3657, 78, 124, 178, 122, 3654,
	1835, 127, 134, 128, 99, 3653, 109, 3651, 3650, 3648,
	3647, 184, 3646, 3645, 142, 68, 3640, 3639, 3638, 73,
	3637, 82, 3636, 36, 3635, 70, 3634, 3632, 3631, 3623,
	3621, 3620, 3619, 3618, 3617, 3616, 3614, 3613, 59, 3612,
	3611, 9, 11, 17, 3610, 33, 3609, 187, 3607, 3605,
	170, 3604, 3602, 93, 91, 3601, 90, 167, 3599, 7,
	29, 74, 3594, 3592, 227, 203, 101, 157, 3591, 303,
	3588, 3585, 3584, 163, 3583, 2397, 3582, 3581, 3579, 3577,
	3576, 3575, 121, 3574, 1, 222, 43, 3573, 137, 140,
	3570, 41, 48, 118, 207, 139, 96, 3568, 3567, 3566,
	536, 209, 104, 38, 0, 3565, 233, 160, 3564, 3562,
	3561, 272, 3560, 243, 199, 247, 283, 268, 257, 3559,
	3556, 71, 125, 3555, 165, 25, 61, 143, 80, 23,
	198, 3554, 14, 8, 214, 3549, 206, 3548, 373, 19,
	293, 149, 3547, 3546, 34, 262, 3543, 3542, 3541, 130,
	3540, 3539, 312, 81, 3538, 3536, 3535, 3534, 37, 3532,
	40, 16, 3530, 103, 3529, 248, 3528, 437, 153, 185,
	179, 161, 229, 234, 85, 84, 3527, 1833, 158, 98,
	13, 3523, 231, 3522, 177, 132, 3521, 107, 3520, 239,
	266, 208, 3519, 183, 12, 51, 39, 30, 46, 10,
	250, 196, 3518, 3517, 22, 58, 3512, 53, 3511, 21,
	3510, 3508, 3507, 79, 5, 3506, 3505, 18, 20, 3504,
	35, 215, 168, 123, 94, 65, 3503, 3502, 47, 210,
	3501, 146, 159, 156, 3500, 83, 3499, 3498, 3496, 3495,
	904, 3494, 259, 3493, 3492, 3491, 3490, 3476, 3475, 3474,
	3471, 228, 3463, 100, 44, 3461, 3455, 3454, 3453, 77,
	152, 3452, 3451, 3450, 3449, 27, 148, 3448, 15, 3447,
	26, 24, 32, 3444, 97, 3443, 3, 189, 3439, 3438,
	4, 3437, 3436, 2, 3435, 3434, 135, 3432, 92, 28,
	169, 105, 3431, 3430, 89, 220, 150, 3428, 3426, 112,
	249, 201, 3423, 60, 240, 260, 3422, 226, 3417, 3414,
	3411, 3409, 3408, 3406, 1148, 3405, 3404, 252, 69, 87,
	3402, 232, 117, 3388, 3386, 88, 166, 119, 116, 66,
	86, 3381, 114, 197, 3380, 192, 3379, 3377, 3375, 106,
	3374, 3371, 3370, 3369, 191, 3368, 3367, 194, 237, 3353,
	3352, 297, 3349, 3348, 3346, 3345, 3343, 3333, 3330, 3328,
	3326, 3321, 265, 369, 3307,
}

//line mysql_sql.y:12132
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 577, 580, 580, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 119, 119, 315, 315, 316,
	316, 149, 556, 556, 120, 120, 120, 120, 120, 120,
	120, 118, 562, 562, 562, 563, 563, 115, 138, 137,
	140, 140, 139, 139, 136, 136, 132, 135, 135, 134,
	134, 133, 128, 130, 130, 129, 131, 131, 116, 104,
	117, 505, 505, 504, 504, 503, 503, 456, 456, 457,
	457, 304, 304, 304, 502, 502, 502, 501, 501, 500,
	500, 499, 499, 497, 497, 498, 496, 495, 495, 495,
	493, 493, 493, 489, 489, 491, 490, 490, 492, 484,
	484, 487, 487, 485, 485, 485, 485, 488, 483, 483,
	483, 482, 482, 103, 103, 103, 399, 399, 102, 102,
	413, 413, 413, 413, 413, 411, 411, 411, 411, 411,
	411, 410, 410, 409, 409, 414, 414, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 93, 93,
	93, 93, 93, 98, 98, 98, 568, 568, 567, 567,
	569, 569, 569, 569, 570, 570, 96, 96, 96, 97,
	408, 408, 408, 94, 95, 95, 398, 398, 403, 403,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 407, 407, 407, 405, 405, 404, 404,
	406, 406, 87, 87, 87, 90, 89, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 88, 88, 88, 88,
	88, 88, 83, 83, 83, 83, 83, 82, 82, 84,
	84, 395, 395, 394, 99, 99, 100, 565, 565, 564,
	566, 566, 566, 566, 101, 107, 107, 107, 107, 107,
	107, 107, 107, 106, 106, 109, 109, 108, 110, 92,
	92, 92, 92, 92, 92, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 530, 530,
	530, 532, 532, 329, 330, 581, 332, 328, 328, 328,
	526, 526, 527, 528, 529, 529, 529, 105, 14, 195,
	195, 431, 431, 11, 11, 11, 11, 11, 11, 11,
	11, 13, 81, 86, 86, 86, 266, 266, 271, 271,
	272, 272, 272, 277, 277, 278, 278, 267, 267, 267,
	267, 267, 267, 267, 267, 267, 267, 267, 267, 267,
	267, 267, 267, 267, 267, 267, 267, 267, 267, 253,
	253, 253, 248, 248, 248, 248, 249, 249, 250, 250,
	251, 251, 251, 251, 252, 252, 321, 321, 273, 273,
	273, 275, 275, 274, 270, 268, 268, 268, 268, 268,
	268, 268, 269, 269, 269, 269, 276, 276, 79, 85,
	85, 85, 544, 544, 80, 555, 555, 460, 460, 344,
	344, 343, 343, 343, 343, 343, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 343, 343, 465, 466, 339,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 54, 57, 58, 53, 53, 53, 384, 384,
	52, 582, 582, 314, 314, 67, 66, 56, 68, 69,
	70, 71, 72, 73, 51, 65, 65, 65, 65, 65,
	65, 65, 65, 76, 478, 478, 584, 584, 584, 74,
	75, 459, 459, 459, 64, 63, 62, 61, 60, 60,
	50, 50, 49, 49, 55, 144, 59, 145, 145, 336,
	336, 336, 338, 338, 334, 342, 342, 583, 583, 427,
	427, 337, 337, 48, 48, 48, 48, 77, 335, 335,
	313, 333, 333, 333, 12, 12, 10, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 26, 27, 29, 392, 392, 389, 28, 20,
	19, 19, 23, 22, 18, 18, 21, 24, 25, 25,
	9, 9, 9, 9, 15, 15, 16, 168, 168, 221,
	221, 538, 538, 534, 534, 535, 535, 535, 536, 536,
	537, 537, 111, 472, 472, 472, 472, 472, 472, 8,
	8, 190, 190, 471, 471, 471, 471, 471, 471, 396,
	396, 396, 515, 515, 515, 516, 189, 189, 184, 184,
	473, 473, 361, 517, 517, 481, 481, 480, 480, 479,
	479, 187, 187, 188, 188, 171, 171, 123, 123, 486,
	486, 486, 486, 494, 494, 455, 455, 258, 258, 306,
	306, 307, 307, 161, 161, 162, 162, 162, 162, 162,
	162, 571, 571, 572, 573, 574, 574, 575, 575, 575,
	576, 576, 576, 576, 576, 523, 523, 525, 525, 524,
	186, 186, 182, 182, 183, 183, 183, 181, 181, 180,
	179, 179, 178, 176, 176, 176, 177, 177, 177, 194,
	194, 164, 164, 164, 163, 163, 163, 163, 163, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 165, 165, 531, 531, 531, 461, 461, 461, 468,
	468, 286, 286, 287, 287, 285, 285, 166, 166, 167,
	167, 167, 167, 284, 284, 283, 169, 169, 175, 174,
	174, 170, 170, 170, 170, 294, 294, 293, 293, 293,
	293, 114, 121, 121, 122, 193, 193, 292, 291, 291,
	291, 192, 192, 191, 191, 185, 185, 173, 173, 173,
	173, 290, 172, 288, 561, 561, 560, 560, 559, 557,
	557, 557, 558, 558, 558, 558, 507, 507, 507, 507,
	507, 322, 322, 322, 327, 327, 325, 325, 325, 325,
	325, 331, 7, 7, 7, 7, 7, 7, 7, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 39, 204, 205, 40, 206, 206, 207, 207,
	208, 208, 209, 210, 211, 211, 211, 211, 38, 196,
	196, 197, 197, 198, 198, 199, 200, 200, 200, 203,
	201, 202, 202, 579, 579, 578, 37, 37, 30, 153,
	153, 154, 154, 154, 156, 156, 254, 254, 254, 155,
	155, 157, 157, 157, 539, 541, 541, 543, 542, 542,
	542, 545, 545, 545, 545, 545, 546, 546, 546, 546,
	547, 547, 31, 141, 141, 146, 550, 550, 550, 549,
	549, 551, 551, 552, 552, 310, 310, 311, 311, 151,
	152, 152, 148, 143, 159, 159, 159, 159, 159, 160,
	160, 142, 147, 150, 540, 548, 548, 548, 393, 393,
	390, 391, 391, 388, 387, 387, 387, 554, 554, 553,
	553, 553, 323, 323, 32, 383, 383, 385, 386, 386,
	386, 377, 377, 377, 377, 36, 381, 381, 382, 382,
	382, 382, 382, 382, 382, 378, 378, 380, 380, 376,
	376, 376, 376, 376, 376, 376, 35, 158, 158, 375,
	375, 372, 372, 370, 370, 371, 371, 369, 369, 369,
	373, 373, 43, 78, 44, 45, 46, 42, 374, 374,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	125, 124, 124, 124, 124, 124, 127, 127, 309, 309,
	308, 308, 126, 255, 255, 41, 233, 233, 447, 447,
	442, 442, 442, 442, 442, 463, 463, 463, 443, 443,
	443, 444, 444, 444, 446, 446, 446, 445, 445, 445,
	445, 445, 462, 462, 464, 464, 464, 415, 415, 416,
	416, 416, 419, 419, 434, 434, 435, 435, 433, 433,
	440, 440, 439, 439, 438, 438, 437, 437, 436, 436,
	436, 436, 430, 430, 429, 429, 417, 417, 417, 417,
	417, 418, 418, 418, 428, 428, 432, 432, 282, 282,
	281, 281, 241, 241, 242, 242, 280, 280, 239, 239,
	240, 240, 240, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 513, 513,
	514, 244, 244, 256, 256, 256, 256, 256, 256, 243,
	243, 245, 245, 222, 222, 220, 220, 212, 212, 212,
	212, 212, 212, 213, 213, 214, 214, 215, 215, 215,
	219, 219, 218, 218, 218, 218, 216, 216, 217, 217,
	217, 217, 217, 217, 401, 401, 510, 510, 511, 511,
	506, 506, 506, 509, 509, 509, 509, 509, 509, 509,
	512, 512, 512, 508, 508, 223, 303, 303, 303, 324,
	324, 324, 324, 326, 302, 302, 302, 238, 238, 237,
	237, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 400, 400, 340, 340, 341, 341, 265,
	264, 264, 264, 264, 264, 262, 263, 261, 261, 261,
	261, 261, 260, 260, 259, 259, 259, 379, 379, 257,
	257, 247, 247, 247, 246, 246, 246, 441, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 350, 350, 350, 350, 350, 350, 350, 350, 350,
	350, 350, 350, 350, 350, 350, 350, 350, 350, 350,
	350, 350, 350, 350, 350, 350, 350, 300, 300, 300,
	301, 301, 301, 301, 301, 301, 301, 301, 351, 351,
	357, 357, 522, 522, 521, 224, 224, 224, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 234, 234, 234,
	424, 424, 424, 424, 425, 425, 425, 425, 426, 426,
	426, 422, 422, 423, 423, 362, 363, 363, 469, 469,
	470, 470, 420, 420, 421, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 477, 477, 477,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 533, 533, 533, 518,
	518, 518, 519, 519, 519, 519, 519, 519, 519, 519,
	519, 519, 519, 519, 520, 520, 520, 520, 520, 520,
	520, 520, 520, 520, 520, 520, 520, 520, 520, 520,
	520, 298, 298, 298, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 364, 364, 365, 365, 474, 474, 474, 474,
	474, 474, 475, 475, 476, 476, 476, 476, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 349, 295, 295,
	295, 366, 358, 358, 359, 359, 360, 360, 352, 352,
	352, 352, 352, 352, 353, 353, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 354, 354,
	356, 356, 368, 368, 368, 367, 367, 367, 367, 367,
	367, 367, 236, 236, 236, 236, 346, 346, 346, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 226, 226, 226, 226, 230, 230, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 231, 231, 231, 231, 231, 229, 229, 229, 229,
	229, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 112,
	113, 113, 228, 305, 305, 448, 448, 451, 451, 449,
	449, 450, 452, 452, 452, 453, 453, 453, 454, 454,
	454, 458, 458, 312, 312, 312, 320, 320, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 8, 8, 0, 2, 0,
	2, 6, 1, 2, 5, 6, 8, 10, 9, 11,
	13, 4, 0, 1, 1, 0, 1, 5, 2, 2,
	6, 9, 6, 9, 4, 7, 8, 0, 1, 1,
	2, 4, 6, 1, 2, 4, 0, 2, 10, 11,
	2, 0, 2, 1, 3, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 3,
	0, 3, 3, 0, 1, 3, 0, 1, 3, 0,
	2, 1, 2, 3, 4, 3, 3, 1, 0, 1,
	1, 0, 1, 8, 5, 7, 0, 3, 8, 5,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 1, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 4, 1, 3, 3, 1,
	2, 2, 2, 1, 2, 2, 3, 4, 4, 6,
	1, 1, 1, 2, 4, 6, 1, 4, 1, 3,
	3, 4, 4, 4, 4, 3, 3, 2, 4, 4,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 2, 2, 0, 1, 4,
	2, 4, 1, 5, 3, 2, 1, 2, 2, 4,
	4, 5, 2, 1, 3, 4, 4, 1, 2, 9,
	7, 1, 3, 3, 1, 1, 3, 1, 3, 2,
	1, 2, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 2, 4, 3, 3, 1,
	1, 1, 1, 1, 1, 2, 3, 4, 7, 2,
	3, 3, 4, 5, 3, 4, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 1, 1, 1, 1, 6, 4, 1,
	1, 0, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 10, 7, 4, 4, 5, 1, 3, 1, 6,
	3, 3, 3, 1, 1, 1, 3, 2, 4, 5,
	5, 6, 5, 5, 3, 2, 2, 1, 3, 4,
	3, 7, 5, 8, 2, 2, 1, 3, 2, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 0, 1,
	2, 1, 3, 2, 1, 2, 2, 1, 2, 3,
	2, 2, 3, 6, 3, 3, 1, 1, 7, 7,
	8, 8, 0, 4, 7, 0, 3, 0, 2, 0,
	1, 1, 1, 1, 4, 2, 2, 3, 3, 4,
	5, 3, 4, 4, 2, 2, 2, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 3, 2, 5, 5, 0, 2,
	7, 0, 1, 0, 1, 5, 5, 3, 3, 2,
	4, 4, 4, 4, 4, 1, 1, 1, 3, 3,
	1, 1, 1, 6, 0, 1, 1, 1, 1, 5,
	5, 0, 1, 1, 3, 3, 3, 4, 7, 7,
	5, 4, 7, 8, 3, 3, 2, 3, 4, 0,
	2, 2, 0, 2, 2, 0, 5, 1, 1, 1,
	1, 0, 1, 5, 5, 5, 4, 3, 1, 3,
	1, 1, 3, 5, 2, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 4, 1, 3, 1, 4, 6,
	6, 4, 4, 4, 4, 4, 3, 6, 3, 5,
	1, 1, 2, 2, 11, 8, 9, 1, 3, 2,
	4, 0, 2, 0, 1, 1, 1, 1, 0, 1,
	0, 1, 4, 2, 1, 5, 4, 4, 2, 5,
	5, 1, 3, 2, 1, 5, 4, 4, 2, 0,
	5, 4, 0, 1, 3, 3, 1, 3, 1, 3,
	1, 3, 4, 0, 1, 0, 1, 1, 3, 1,
	1, 0, 4, 1, 3, 2, 1, 0, 8, 0,
	4, 7, 4, 0, 2, 0, 2, 0, 2, 0,
	4, 1, 3, 1, 1, 6, 4, 5, 7, 4,
	5, 0, 1, 3, 8, 0, 6, 0, 4, 6,
	1, 1, 1, 1, 1, 2, 3, 1, 3, 6,
	0, 3, 0, 1, 2, 4, 4, 0, 1, 3,
	1, 3, 3, 0, 1, 1, 0, 2, 2, 0,
	2, 3, 3, 3, 1, 3, 3, 3, 3, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 7, 7, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 2, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 3, 1, 1,
	1, 4, 4, 4, 3, 2, 2, 2, 3, 2,
	3, 4, 1, 3, 4, 0, 2, 1, 1, 2,
	2, 0, 1, 2, 4, 1, 3, 1, 3, 2,
	3, 1, 4, 3, 0, 1, 1, 2, 5, 2,
	2, 2, 0, 2, 3, 3, 0, 1, 3, 1,
	3, 0, 1, 2, 1, 1, 0, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 1, 7, 1, 3, 0, 1,
	1, 3, 1, 3, 0, 1, 1, 1, 14, 1,
	3, 0, 1, 1, 3, 1, 1, 2, 4, 1,
	1, 1, 1, 0, 1, 2, 9, 9, 7, 1,
	2, 3, 3, 3, 0, 4, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 4, 1, 1,
	1, 3, 3, 4, 3, 3, 0, 1, 1, 1,
	0, 2, 7, 8, 8, 8, 0, 3, 3, 0,
	3, 0, 3, 0, 5, 1, 3, 0, 3, 3,
	0, 2, 9, 7, 0, 2, 2, 3, 3, 0,
	2, 4, 4, 4, 1, 0, 2, 2, 1, 3,
	2, 1, 3, 2, 1, 3, 2, 0, 1, 3,
	4, 3, 1, 1, 4, 1, 3, 1, 1, 1,
	1, 0, 1, 1, 1, 11, 0, 2, 3, 3,
	2, 2, 3, 1, 1, 1, 3, 3, 4, 0,
	2, 2, 2, 2, 2, 2, 6, 0, 4, 1,
	1, 0, 3, 0, 1, 1, 2, 4, 4, 4,
	0, 1, 8, 2, 4, 4, 4, 9, 0, 2,
	11, 9, 11, 8, 6, 9, 7, 10, 7, 6,
	2, 2, 9, 4, 5, 3, 0, 4, 1, 3,
	0, 3, 6, 0, 2, 10, 0, 2, 0, 2,
	0, 3, 2, 4, 3, 0, 2, 1, 0, 2,
	3, 0, 2, 3, 0, 2, 1, 0, 3, 2,
	4, 3, 0, 1, 0, 1, 1, 0, 6, 0,
	3, 5, 0, 4, 0, 3, 1, 3, 4, 5,
	0, 3, 1, 3, 2, 3, 1, 2, 0, 4,
	6, 5, 0, 2, 0, 2, 4, 5, 4, 5,
	1, 5, 6, 5, 0, 3, 0, 1, 1, 3,
	3, 3, 0, 4, 1, 3, 3, 3, 0, 1,
	1, 3, 2, 3, 3, 3, 4, 4, 3, 3,
	3, 3, 4, 4, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 5, 4, 1, 3,
	3, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 4, 0, 2, 5,
	5, 5, 5, 0, 1, 1, 3, 1, 1, 1,
	1, 1, 7, 9, 7, 9, 2, 1, 7, 9,
	7, 9, 8, 5, 0, 1, 0, 1, 1, 1,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 3, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	2, 1, 2, 2, 1, 1, 2, 2, 2, 3,
	3, 2, 2, 1, 5, 6, 4, 1, 1, 1,
	5, 4, 1, 1, 2, 0, 1, 1, 2, 5,
	0, 1, 1, 2, 2, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 2, 2, 2, 0, 3, 0,
	3, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 3, 5, 2, 2, 2, 2,
	4, 1, 1, 2, 5, 6, 8, 6, 6, 6,
	1, 1, 1, 1, 1, 1, 3, 4, 4, 4,
	7, 9, 7, 7, 7, 9, 7, 7, 0, 2,
	0, 1, 1, 2, 4, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 2, 2, 2, 0, 1, 1,
	1, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 5, 0, 1, 3, 0, 1, 0, 2,
	0, 2, 0, 1, 6, 8, 8, 6, 6, 5,
	5, 5, 6, 6, 6, 6, 5, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 1, 1, 1,
	4, 4, 6, 8, 6, 4, 5, 4, 4, 4,
	3, 4, 6, 6, 7, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 8, 4, 2, 3, 2, 4, 2,
	2, 4, 6, 2, 2, 4, 6, 4, 2, 4,
	4, 4, 0, 1, 2, 3, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 3, 0, 1, 1, 3, 1, 3, 3, 3,
	3, 3, 2, 1, 1, 1, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 1, 3, 4, 4,
	5, 4, 5, 3, 4, 5, 6, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	2, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 4, 4, 1, 2,
	3, 5, 1, 1, 3, 0, 1, 0, 3, 0,
	3, 3, 0, 3, 5, 0, 3, 5, 0, 1,
	1, 0, 1, 1, 2, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int{
	-1000, -577, -580, -2, -5, 621, -1, -4, -113, -87,
	-7, -14, -115, -116, -8, -111, -9, -10, -12, -91,
	-106, -108, -110, -109, -47, -11, -105, -82, -83, -93,
	-99, -102, -103, -104, -117, -112, -114, -161, -118, -119,
	-120, 611, -88, -89, -90, -33, -32, -31, -30, -141,
	-146, -149, 544, 617, 447, 14, 496, -15, -16, -523,
	-17, 259, -328, -329, -330, -332, -581, -48, -49, -50,
	-60, -61, -62, -63, -64, -74, -75, -76, -51, -52,
	-53, -56, -54, -67, -66, -68, -69, -70, -71, -72,
	-73, -55, -59, -144, -145, -77, -57, -78, -58, -80,
	-79, -85, -81, -86, -143, -148, -13, 234, -84, 76,
	-94, -95, -96, -97, -98, -100, -101, 371, 377, 434,
	610, 61, -162, -164, 628, 629, 632, 159, 160, 162,
	163, -34, -35, -36, -37, -38, -39, -41, -40, -42,
	-43, -44, -45, -46, 230, 16, 539, -18, -21, -19,
	-22, -20, -28, -29, -27, -24, -26, -142, -25, -147,
	-23, -150, 254, 253, 38, 320, 321, 322, 375, 252,
	231, 233, 15, 31, 42, 351, -163, 82, 531, 532,
	534, 232, -165, 13, 634, -6, -3, -2, -128, -132,
	-136, -139, -140, -137, -138, -4, -113, 117, 244, 612,
	-324, 367, 613, 615, 614, 85, 93, -317, -319, 447,
	259, 371, 377, 610, 629, 632, 546, 547, 548, 549,
	550, 551, 552, 553, 555, 556, 557, 558, 559, 560,
	561, 571, 572, 562, 563, 564, 565, 566, 567, 568,
	569, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 499, 596, 597, 598, 599,
	527, 554, 590, 591, 592, 593, 349, 350, 536, 271,
	295, 402, 301, 308, 159, 178, 172, 200, 192, 532,
	167, 275, 313, 276, 92, 162, 482, 107, 459, 431,
	165, 290, 292, 294, 528, 529, 361, 297, 526, 296,
	298, 300, 530, 277, 352, 188, 183, 289, 273, 181,
	278, 40, 279, 205, 280, 281, 541, 455, 348, 461,
	305, 52, 429, 182, 456, 293, 458, 209, 213, 473,
	474, 176, 177, 463, 476, 204, 207, 208, 251, 345,
	346, 43, 538, 263, 477, 211, 203, 199, 485, 309,
	307, 202, 175, 198, 274, 65, 215, 214, 216, 425,
	426, 427, 428, 282, 283, 365, 472, 195, 184, 353,
	168, 23, 480, 258, 460, 378, 284, 302, 310, 210,
	212, 265, 270, 540, 531, 433, 269, 306, 478, 180,
	262, 291, 257, 481, 169, 534, 380, 285, 163, 299,
	475, 484, 64, 393, 174, 166, 248, 160, 267, 272,
	286, 287, 288, 525, 312, 311, 303, 533, 196, 264,
	201, 186, 173, 197, 161, 266, 483, 394, 608, 351,
	412, 194, 191, 268, 241, 479, 462, 164, 416, 395,
	189, 314, 603, 604, 605, 366, 344, 315, 316, 187,
	255, 453, 454, 319, 422, 335, 396, 432, 403, 397,
	222, 223, 323, 465, 467, 206, 606, 324, 325, 326,
	457, 327, 328, 329, 330, 370, 56, 58, 94, 97,
	96, 630, 631, 63, 29, 356, 359, 391, 398, 337,
	609, 537, 334, 338, 339, 360, 25, 414, 382, 418,
	417, 48, 49, 50, 53, 54, 55, 57, 59, 60,
	51, 524, 375, 388, 486, 45, 47, 385, 27, 362,
	413, 435, 333, 415, 446, 46, 444, 445, 466, 26,
	364, 363, 62, 44, 421, 423, 424, 317, 331, 373,
	618, 487, 368, 384, 387, 369, 336, 358, 389, 67,
	66, 381, 619, 376, 374, 332, 542, 543, 340, 570,
	354, 430, 521, 520, 519, 518, 517, 516, 515, 514,
	320, 321, 322, 399, 400, 401, 411, 404, 405, 406,
	407, 408, 409, 410, 449, 450, 620, 468, 470, 471,
	469, 236, 633, 355, 239, 622, 623, 95, 624, 626,
	625, 28, 627, -406, -404, -324, 532, 610, 377, 531,
	534, 371, 351, 629, 632, 375, 259, 320, 321, 322,
	447, 349, -206, -324, 633, -171, 243, 39, -220, -324,
	-171, -84, -16, -15, -163, -164, -220, 238, -333, 24,
	429, -92, 430, 234, 82, 77, -324, -9, -104, -8,
	-111, -82, -161, 434, -331, -324, 320, 320, -331, 238,
	-326, 269, 410, -324, -460, 244, -410, -383, 270, -409,
	-385, -412, -386, 32, 230, 232, 231, 544, 266, 16,
	375, 240, 14, 13, 376, 252, 25, 26, 28, 15,
	377, 379, 29, 380, 383, 384, 385, 42, 388, 389,
	259, 85, 93, 88, 277, -205, -324, -360, -352, 114,
	-355, -347, -348, -350, -304, -497, -345, 82, 141, 142,
	149, 115, 635, -349, -441, 36, 117, 550, 554, 590,
	497, -296, -297, -298, -299, -300, -301, -324, -498, -496,
	88, 98, 100, 104, 105, 103, 101, 153, 185, 102,
	89, 154, -164, 85, -518, 560, -318, 583, 596, 597,
	598, 599, 582, 61, -467, -476, 237, -474, 152, 190,
	255, 186, 14, 147, 422, 187, 591, 592, 593, 557,
	579, 499, 561, 571, 586, 552, 553, 555, 547, 548,
	549, 551, 562, 564, 578, -477, 574, 584, 585, 570,
	594, 595, 587, 588, 589, 626, 87, 86, 577, 576,
	563, 558, 559, 565, 546, 556, 566, 567, 575, 580,
	581, 359, 107, 360, 361, 489, 352, 362, 244, 429,
	70, 363, 364, 365, 366, 367, 496, 368, 71, 369,
	358, 259, 412, 370, 189, 206, 501, 500, 502, 493,
	490, 488, 491, 492, 494, 495, 568, 569, 573, -121,
	-122, 601, -571, -289, -572, 6, 7, 8, 9, -573,
	154, -562, 431, 540, 88, 313, 349, 164, 161, -397,
	164, 113, 169, 168, -397, 166, 323, 265, -374, -153,
	349, 412, 327, 94, 269, -377, -375, 528, -462, 317,
	313, 289, 239, 110, -154, 249, 248, 108, 489, 237,
	386, 308, 56, 58, -534, -535, 227, 228, 229, -525,
	522, -524, -324, 361, 96, 97, 27, 238, 372, 265,
	467, 465, 466, 468, 469, 470, 471, -65, -478, -459,
	462, 461, -337, 454, 460, 452, 464, 455, 350, 329,
	544, 328, 230, 622, 529, 523, -312, 396, 432, 486,
	487, 373, 433, 473, 475, 456, 107, 193, 190, 239,
	241, 238, 349, 489, 412, 94, 327, 238, -534, 161,
	473, 475, 269, 410, 41, -403, 422, -402, -404, 474,
	485, 86, 87, 472, -312, 107, 453, 453, -571, -289,
	-162, -164, -114, -523, 530, 530, 530, 239, 349, 412,
	269, 240, 238, 525, 528, 241, 489, 237, 320, 372,
	265, 327, 94, 166, -461, -531, 32, -468, 224, 225,
	226, 33, 34, -1, 121, 634, -352, -352, -6, 637,
	-6, -352, -324, -324, 156, -226, -230, -227, -229, -228,
	-232, -231, 190, 191, 152, 194, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 207, 208, 205, 31, 206,
	255, 186, 187, 188, 189, 209, 172, 192, 537, 217,
	173, 218, 174, 219, 175, 220, 176, 177, 221, 178,
	181, 182, 183, 184, 180, 155, -195, 88, 32, 82,
	155, 88, -187, 261, -171, -220, -212, 155, 635, -187,
	-571, -180, -181, 11, -220, -302, -324, 431, 124, -92,
	77, -92, 430, 77, -526, -527, -528, -530, 234, 430,
	429, -109, 155, 277, 17, -331, -331, 80, -220, -385,
	269, -410, -383, 36, 79, 156, 242, 156, 79, 82,
	373, 349, 412, 374, 489, 238, 386, 241, 269, 387,
	349, 412, 238, 241, 489, 269, 349, 238, 241, 412,
	269, 387, 349, 452, 453, 241, 27, 378, 381, 382,
	453, -482, 485, 156, 113, 110, 111, 112, -352, 131,
	-367, 124, 125, 126, 127, 128, 129, 130, 138, 137,
	148, 141, 142, 143, 144, 145, 146, 147, 139, 140,
	134, 114, 132, 136, 133, 116, 151, -164, -352, -360,
	61, -350, -350, -350, -350, -324, -441, -357, -352, 82,
	82, 82, 82, 155, 101, 88, -352, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, -475,
	82, 82, -364, -365, 82, 82, -345, -302, 82, 88,
	88, 82, 82, 82, 88, 82, 82, 82, -365, -365,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, -181, 156, -180, 82, -180,
	-181, -165, -164, 32, 33, 32, 33, 32, 33, 32,
	33, -574, 619, 82, 98, 630, 222, 17, -324, 478,
	539, 167, 168, 169, -372, 244, -204, -324, -206, 372,
	241, 525, 241, -154, -372, -372, -372, -372, -372, 240,
	-372, 24, 238, 238, 238, 238, -372, 496, 124, 124,
	59, -536, 171, 156, -525, -186, 82, -336, 132, 136,
	-336, -285, 18, 24, 267, 267, 267, -336, 307, -582,
	-583, 17, 134, -334, -583, -334, -334, -336, -584, 240,
	463, 43, 268, 267, -182, -183, 22, -182, 457, 453,
	-427, 458, 459, -338, -583, -337, -336, -336, -337, -336,
	-336, -336, 32, 238, 241, 489, 327, 623, -582, -582,
	31, 31, -460, -460, -220, -460, 523, -313, -324, -460,
	-460, -460, -220, -537, 243, -568, -567, 476, -570, 478,
	161, -404, 161, -404, -385, 269, 269, 156, 124, 24,
	-405, 124, 135, -404, -404, -405, -405, -243, 41, -323,
	152, -324, 88, -243, 41, -565, -564, -220, -181, -165,
	-164, 83, 83, 83, 533, 533, 533, -460, -460, -460,
	-460, -460, -462, -460, -460, -460, -460, -460, -331, -196,
	-324, -206, 244, -460, -460, -460, -166, -167, 143, -352,
	-324, -166, -3, -130, -129, 118, 119, 121, 613, 367,
	612, 616, 610, -404, 41, -454, 394, 393, -448, -450,
	82, -449, 82, -449, -449, -449, -449, -449, 82, 82,
	-451, 82, -451, -451, -448, -452, 82, -452, -453, 82,
	-453, -452, -324, -431, 539, -358, -360, -324, 39, -471,
	61, -161, 82, 31, 82, -187, -324, 636, 187, 166,
	627, -472, 61, -161, 82, 31, -181, -123, 39, -183,
	21, 155, 98, 88, -109, -92, 77, -109, 83, 156,
	-529, 104, 105, -532, 204, 196, -324, -107, 88, -7,
	-8, -9, -10, -47, -82, -79, -161, 231, -499, -497,
	82, 32, 421, 79, 17, -411, 238, 489, 372, 265,
	241, 349, -409, -392, -389, -387, -323, -385, -388, -387,
	-414, -302, 453, -124, 436, 435, 319, -352, -352, -352,
	-352, -352, 103, 114, 344, 104, 105, -347, -368, 32,
	315, 316, -348, -348, -348, -348, -348, -348, -348, -348,
	-348, -348, -348, -348, -356, -366, -441, 82, 134, 132,
	136, 133, 116, -350, -350, -348, -348, -245, -323, 152,
	83, 156, -352, -522, -521, 118, -352, -352, -352, -352,
	-324, -519, -520, 503, 504, 505, 506, 507, 508, 509,
	510, 511, 512, 513, 363, 358, 364, 362, 352, 370,
	365, 366, 189, 520, 521, 514, 515, 516, 517, 518,
	519, -358, -358, -352, -519, -358, -295, 33, 32, -360,
	-360, -360, 83, -352, -533, 342, 341, 343, -184, -324,
	-358, 83, 83, 83, 98, -360, -360, -358, -348, -358,
	-358, -358, -358, -520, -295, -295, -295, -295, 143, -360,
	-360, -295, -295, -295, -295, 143, -295, -295, -295, -295,
	-295, -295, -295, -295, -295, -295, 83, 83, 83, 143,
	-360, -182, -122, -480, -479, -352, 41, -123, -183, -575,
	620, 82, -302, -563, 88, 88, 635, 166, 17, 489,
	479, 480, 165, 168, 167, -324, 114, 35, 82, -196,
	-372, -372, -372, -541, -324, 89, -393, -390, -387, -324,
	-324, -383, -324, -313, -220, -372, -372, -372, -372, -220,
	-254, 53, 54, 55, -387, -155, 56, 57, -537, -524,
	35, -185, -324, -285, -350, -350, -352, -387, 269, -582,
	-336, -336, -314, -313, -338, -333, -338, -338, -285, -334,
	-336, -336, -352, -338, -334, -285, -324, 453, -285, -285,
	-427, -336, -335, -324, -335, -372, -313, -314, -314, -220,
	-220, -266, -271, -267, -272, 261, 235, 356, 357, 233,
	231, 11, 232, -279, 308, -373, 497, -249, -250, 77,
	42, -252, 259, 398, 391, 271, 275, 92, 276, 431,
	277, 240, 279, 280, 281, 296, 298, 251, 282, 283,
	284, 422, 285, 160, 297, 286, 287, 288, 374, -244,
	6, 330, 41, 51, 52, 445, 444, 542, 539, 272,
	-541, -539, 31, -324, 31, -393, -324, -324, 242, -174,
	-169, -173, -170, -175, -288, -290, -172, 82, -220, -164,
	-324, 156, 477, 479, 480, -568, -405, -568, -405, 32,
	421, -408, 421, 32, -383, -402, 473, 475, -398, 88,
	422, -388, -407, 79, 152, -479, -405, -405, -407, -407,
	151, 156, -566, 478, 479, 227, -182, 98, 98, 98,
	-222, -220, -541, -392, -383, -324, -460, -222, -222, -222,
	-326, -326, 82, 155, 36, -324, -324, -324, -284, 156,
	-283, 17, -325, -324, 35, 88, 155, -284, -131, -129,
	120, -352, -6, 612, -352, -6, -6, -352, -6, -352,
	-458, 395, 98, 98, -305, 88, -305, 98, 98, 98,
	545, 83, 88, -396, 79, -473, -361, -517, 601, -189,
	83, -184, -515, -516, -184, -188, -324, -471, -212, 124,
	124, 124, -473, -189, 83, -515, -182, 602, -123, -179,
	-178, -352, -324, 24, -109, -92, -527, 155, 349, 156,
	-185, -411, -391, -388, -413, 143, -324, -399, 156, 539,
	638, 86, 242, -554, -553, 413, 83, 156, -483, 243,
	496, 88, 635, 429, 222, 223, 103, 344, 104, 105,
	-441, -360, -356, -350, -350, -348, -348, -354, 256, -354,
	113, -352, 636, -351, -521, 120, -352, 35, 156, 35,
	156, 80, 155, 83, 83, 17, 17, 83, -352, 83,
	83, 83, 83, 17, 17, -352, 83, 155, 83, 83,
	83, 83, 80, 83, 156, 83, 83, 83, 83, 156,
	-360, -360, -352, -360, 83, 83, 83, -352, -352, -352,
	-360, 83, -352, -352, -352, -352, -352, -352, -352, -352,
	-352, -352, -421, 448, -421, -421, 156, 156, 156, 83,
	-123, 82, 98, 156, 631, -309, -308, 88, -324, 166,
	-324, 166, 169, 169, 168, 24, 36, -205, -207, -208,
	-209, -210, -211, 134, 157, 158, 82, -220, -220, -220,
	-543, 399, -555, 156, 41, -553, 489, 238, -151, 319,
	-376, 80, -158, 17, 539, -220, -220, -220, -220, -233,
	35, 17, -168, -221, -324, 82, 83, 156, -384, 80,
	-324, -314, -285, -285, -338, -285, -285, 156, 23, -336,
	-338, -338, -342, 635, -334, -342, 155, -342, -313, -447,
	35, -186, 156, 21, 261, -219, -321, -216, -218, 246,
	-341, -217, 249, -511, 247, 245, 108, 250, 304, 109,
	240, -321, -321, 246, -253, 242, 35, -321, -269, 240,
	347, 304, 247, 21, 261, -268, 240, 109, -324, 246,
	250, 247, 245, -320, 124, -312, 151, 242, 43, 374,
	-320, 543, 261, -320, -320, -320, -320, -320, -320, -320,
	278, 278, -320, -320, -320, -320, -320, -320, -320, -320,
	-320, -320, -320, 161, -320, -320, -320, -320, -320, -320,
	82, 273, 274, -544, 399, 31, 355, 355, -555, 31,
	-159, 349, -270, -335, 31, -291, -292, -293, -294, 68,
	72, 74, 69, 70, 71, 75, 31, 156, -322, -327,
	35, -324, 88, -322, -164, -169, -174, -322, 82, -567,
	-569, 481, 478, 484, -407, -407, 242, 82, 124, -407,
	-407, 41, -323, -564, 485, 479, -123, 156, 79, -222,
	-197, -198, -199, -200, -226, -302, 191, 194, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 207, 208, 205,
	206, 255, 186, 187, 188, 189, 209, 172, 192, 537,
	173, 174, 175, 176, 177, 178, 181, 182, 183, 184,
	180, -324, -206, -285, -167, -169, -324, 88, -324, 143,
	-285, 121, -6, 119, -135, -134, -133, 122, 610, 616,
	121, 121, 121, 83, 83, 83, 156, 83, 83, 83,
	156, 83, 156, 98, -486, 458, 40, 156, 82, 83,
	156, 61, 156, 124, 83, 156, -352, -324, 88, -352,
	83, 61, -123, 88, 156, -176, 37, 38, 155, 431,
	-324, -497, 83, -413, 156, 242, 155, 155, -389, 377,
	-323, -391, 21, 539, -302, 39, -309, 124, 635, -324,
	83, -354, -354, 113, -350, -347, 83, 121, -352, 119,
	-224, -226, 393, 394, -352, -224, -225, -231, 152, 190,
	255, 189, 188, 186, 393, 394, -243, -324, -352, -352,
	83, -352, -352, 17, -324, -243, -348, -352, -181, -181,
	83, 83, -420, -421, -420, -420, 83, 83, 83, 83,
	-420, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 82, 98, 100, 98, 100, -479, -576, 63, 618,
	62, 421, 103, 309, 156, 98, 88, 636, 156, 124,
	-324, 17, 238, 169, -556, 313, 349, 385, 83, 156,
	-302, -197, -186, 82, -186, -546, 460, 401, 411, -320,
	-344, -343, 351, 42, -465, 422, 407, 408, -390, 269,
	-324, -324, -552, 95, 124, 79, 334, 338, 339, 335,
	336, 337, -370, -371, -369, -373, -539, 82, 82, -161,
	35, 132, -158, 82, 82, 35, -442, 324, -226, -220,
	-168, -324, 17, 156, -538, 155, -1, -324, -383, -336,
	-285, -352, -352, -285, -336, -336, 166, -338, -324, -442,
	-226, 35, -267, 235, 232, -417, 306, 307, -418, -432,
	309, -434, 82, -223, -302, -217, -510, -511, -372, -324,
	109, -510, 109, 82, -223, -302, -302, -270, -302, -324,
	-324, -324, -324, -275, -274, -302, -277, 32, -278, -324,
	-324, -324, -324, 109, -324, 109, -248, 41, 48, 49,
	50, -320, -320, 193, -251, 41, 421, 423, 424, -277,
	98, 98, 98, 98, 88, 88, 88, -320, -320, 98,
	88, -327, 88, -512, 168, 45, 46, 98, 98, 98,
	98, 41, 88, -256, 41, 289, 293, 290, 291, 292,
	88, 98, 41, 98, 41, 98, 41, -324, 82, -513,
	-514, 88, -546, -320, 355, -404, 124, -344, -551, 319,
	-160, 489, 32, -190, 235, 232, -539, -395, -394, -302,
	-173, -173, -173, -173, 68, 68, 68, 73, 68, 73,
	68, -293, -395, -175, -186, -327, 83, -561, -560, -559,
	-557, 76, 243, 77, -358, 478, 482, 483, -391, -339,
	88, -398, -194, 24, -220, -220, -464, 299, 300, 83,
	156, -226, -287, 19, 155, -287, 117, -6, -131, -133,
	-352, -6, -352, 612, 367, 613, 88, 98, 98, -494,
	442, 437, 439, 109, -361, -481, -480, 61, -161, -184,
	-473, -516, -479, -324, 636, 636, 636, 636, 61, -161,
	-473, -194, -486, -178, -177, 44, -324, 98, 17, -388,
	-383, 143, 143, -324, 378, -399, 88, 400, 88, 238,
	636, 88, -309, -347, -352, 83, -234, 177, 176, -234,
	35, 83, 83, -449, -449, -448, -451, -448, -234, -234,
	83, 83, 24, 83, 83, 83, -352, 83, 83, 156,
	-469, 498, -470, 572, -420, -420, -420, -420, -420, -420,
	-420, -420, -420, -420, -420, -420, -420, -420, -420, -420,
	-363, -362, 261, 443, 625, 625, 443, 625, 625, 83,
	156, -519, 156, -315, 314, -315, -308, 88, 242, 166,
	-324, -324, 88, 88, -209, -226, 83, 35, -213, -214,
	-215, -223, -216, -218, 35, -547, 92, -542, 88, -324,
	89, -548, 92, 402, 154, 353, 41, 403, 404, 419,
	348, 98, 98, 409, -540, -324, -159, -159, -550, 52,
	124, 88, -220, -369, -312, 151, 280, 327, -282, -281,
	-324, 88, -213, -161, -220, -213, -213, -161, -443, 326,
	21, 98, 142, -187, 80, 155, -169, -221, -324, 143,
	83, -285, -342, -285, -285, 124, -336, -443, -161, -429,
	310, 82, -427, 82, -427, 109, 335, -435, -433, 261,
	-273, 45, 47, -226, -508, -324, -506, -508, -324, -506,
	-506, -372, -352, -273, -223, 242, 31, 232, -276, 332,
	333, 338, -400, 305, 114, -400, 156, -176, 156, -324,
	-243, -243, 31, 88, 88, -222, 83, 156, 124, -547,
	-542, 124, -405, 88, -548, -552, 124, -152, 92, -313,
	156, -190, -190, -285, 156, 124, -192, -191, 79, 80,
	-193, 79, -191, 68, 68, -285, -559, -558, 24, -511,
	-511, -511, 83, 83, 15, -199, 41, -286, 20, 21,
	143, -286, 121, 119, 121, 121, -324, 83, 83, -455,
	603, -490, -492, 437, 21, 21, 15, 243, 83, -473,
	-473, -494, 45, 46, -383, -399, 422, -220, 156, 636,
	-224, -352, 83, -352, 83, 88, 83, 88, -181, 21,
	83, 156, 83, 83, 83, 156, 83, 83, -352, 83,
	-519, -316, 187, 88, -316, 349, -324, 17, 236, -161,
	83, 156, -161, 88, -545, 413, 88, 88, 98, 41,
	98, 154, 405, -466, -152, -152, -549, 92, 124, 635,
	82, -320, -320, -320, -324, 83, 156, -320, -320, 83,
	83, 83, -241, 539, -444, 260, 98, 142, 98, 142,
	98, -322, -169, -324, -285, -538, 155, 88, -285, -444,
	-419, 311, 98, -348, 82, -348, 82, -428, 308, 82,
	83, 156, -324, -302, -238, -237, -235, 103, 114, 41,
	391, -236, 92, 151, 294, 297, 296, 272, 295, -265,
	-340, 79, 397, 332, 333, -373, 603, 527, 245, 108,
	109, 379, -341, 82, 82, 80, 314, 82, 82, -508,
	83, -273, -302, 41, -276, 41, 345, 305, -274, -324,
	151, -243, 83, -514, 88, -545, 88, -407, -550, 88,
	88, -539, -181, -394, -479, -352, 82, -352, 82, 68,
	11, 19, -345, -352, -360, 244, -6, 613, 367, -258,
	604, 88, 21, 88, -488, 88, -395, -455, -126, -255,
	-312, 277, 83, 83, 83, -420, -420, -423, -422, -426,
	443, 306, 451, -360, 88, 88, 83, 83, 88, -324,
	242, 166, -201, -226, -156, 539, -241, -215, -156, 21,
	539, 352, 41, 98, 41, 406, 124, 104, 105, -310,
	-311, 88, -378, -380, -302, 82, -243, -245, 88, -281,
	-345, -345, -239, -161, 35, -240, -279, -373, -125, -124,
	-239, 82, -445, 160, 98, 142, 98, 98, -285, -285,
	636, -445, -434, 21, 83, -414, 83, -414, 82, 124,
	-348, -433, -436, 61, -235, 103, -348, 88, -245, -246,
	41, 293, 289, 124, 124, -247, 41, 273, 274, -257,
	82, 304, 15, 193, 82, 109, 109, -220, -378, -378,
	-509, 334, 335, 336, 340, 338, 339, 337, -509, -378,
	-378, 82, -401, -400, -348, -320, -320, 151, -549, -182,
	-185, -507, -324, 245, 21, 21, -324, -324, -306, 605,
	98, 88, 439, -258, -456, 606, -484, -427, -243, 124,
	83, -425, 116, 405, 409, -346, -349, 98, 100, 185,
	154, 83, 83, 349, -324, 538, -157, 60, 485, 88,
	89, 400, 88, 89, 352, 88, 636, 156, 124, 83,
	156, -448, -352, -415, 261, -161, 156, -279, -312, -126,
	-415, -242, -280, -324, 88, -463, 168, 325, 539, 98,
	142, 98, -181, -446, 168, 325, -418, 83, 83, 83,
	-414, 98, 83, -440, -437, 82, -279, 263, 134, 88,
	88, 98, 82, -474, 31, 88, -379, 82, 83, 83,
	83, 83, -378, 98, -243, -320, 83, 83, 156, 82,
	21, -306, -457, 607, 88, -493, 442, -487, -485, 437,
	438, 439, 440, 88, -424, -425, 409, -346, -349, 601,
	449, 449, 449, -324, 242, -203, -324, 304, 422, -311,
	88, -381, -380, -176, 83, -416, 313, 21, -279, -320,
	-416, 83, 156, -320, -320, 325, 98, 142, 98, -182,
	325, -430, 312, 83, -440, -279, -439, -438, 311, 264,
	82, 83, -352, -364, -320, 83, -260, -259, 535, -378,
	-381, 80, -381, 80, -381, 80, -381, 80, 83, -243,
	-324, 245, -307, -324, -488, 88, -495, 243, -491, -492,
	441, -485, 21, 439, 21, 21, -127, 156, 113, 450,
	450, 450, 349, -202, 35, 444, 378, -382, 251, 345,
	346, 92, 539, 332, 333, -176, 21, -417, -243, -280,
	-345, -345, 98, 98, 83, 156, -324, 260, 82, -359,
	-353, -352, 260, 83, -324, -264, -262, -263, 79, 456,
	302, 303, 83, -509, -509, -509, -509, -265, 83, 156,
	-502, 82, 98, -490, -489, -491, 21, -488, 21, -488,
	-488, 446, -424, -324, 88, -320, -320, 88, 88, 331,
	-302, 82, -429, -438, -437, -359, 83, 156, -400, -263,
	79, -262, 79, 16, 15, -381, -381, -381, -381, -324,
	-505, 31, 83, -501, -500, -303, -496, -324, 442, 443,
	88, -488, 124, -579, -578, 624, 98, 98, -324, -414,
	-419, 83, -353, -261, 299, 300, 31, 168, -261, -504,
	-503, -304, 83, 156, 155, 88, 88, 83, -434, 103,
	41, 301, 156, 124, -500, -324, -503, 41, -352, 155,
	-324,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 0, 282, 283, 284, 892, 893, 894, 895, 896,
	897, 898, 0, 0, 0, 0, 0, 650, 651, 0,
	616, 0, 0, 0, 0, 0, 0, 500, 501, 502,
	503, 504, 505, 506, 507, 508, 509, 510, 511, 512,
	513, 514, 515, 516, 517, 518, 519, 520, 521, 522,
	523, 524, 525, 526, 527, 528, 529, 530, 531, 383,
	384, 385, 386, 387, 388, 389, 390, 0, 307, 303,
	228, 229, 230, 231, 232, 314, 315, 477, 0, 0,
	0, 0, 733, -2, 72, 0, 0, 296, 0, 287,
	287, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, -2, 663, 0, 617, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 367, 368, 369, 363, 364, 366, 365, -2,
	0, 0, 663, 0, 0, 0, 741, 0, 0, 0,
	0, 0, 784, 806, 23, 0, 7, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 0, 0, 19,
	0, 19, 0, 0, 0, 1309, 1310, 1311, 1312, 2092,
	2062, -2, 1834, 1811, 1986, 1987, 2122, 2123, 2124, 2125,
	2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135,
	2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145,
	2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155,
	2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165,
	2166, 2167, 2168, 2169, 2170, 2171, 1768, 1769, 1770, 1771,
	1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,
	1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1812,
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832,
	1833, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843,
	1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873,
	1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883,
	1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893,
	1894, 1895, 1896, 1897, 1898, 1899, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
	1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
	1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
	1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
	1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
	1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964,
	1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974,
	1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
	1985, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
	1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
	2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
	2017, 2018, -2, 2020, 2021, 2022, 2023, 2024, 2025, 2026,
	2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036,
	2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,
	2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
	2057, 2058, 2059, 2060, 2061, 2063, 2064, 2065, 2066, 2067,
	2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077,
	-2, -2, -2, 2081, 2082, 2083, 2084, 2085, 2086, 2087,
	2088, 2089, 2090, 2091, 2093, 2094, 2095, 2096, 2097, 2098,
	2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
	2109, 2110, 2111, 0, 280, 278, 1781, 1811, 1834, 1888,
	1899, 1900, 1934, 1986, 1987, 2019, 2062, 2078, 2079, 2080,
	2092, 0, 0, 916, 0, 711, 0, 0, 716, 1257,
	711, 308, 652, 653, 741, 767, 614, 0, 345, 0,
	1825, 349, 2069, 0, 0, 0, 611, 339, 340, 341,
	342, 343, 344, 0, 0, 891, 0, 0, 335, 0,
	302, 1890, 2091, 1313, 0, 0, 0, 0, 0, 171,
	1035, 173, 1037, 177, 185, 0, 0, 0, 190, 191,
	194, 195, 196, 197, 198, 0, 202, 0, 204, 207,
	0, 209, 210, 0, 213, 214, 215, 0, 225, 226,
	227, 1038, 1039, 1040, -2, 100, 914, 1739, 1626, 0,
	1633, 1646, 1657, 1390, 1391, 1392, 1393, 0, 0, 0,
	0, 0, 0, 1401, 1402, 0, 1430, 2126, 2167, 2168,
	0, 1410, 1411, 1412, 1413, 1414, 1415, 111, 123, 124,
	1679, 1680, 1681, 1682, 1683, 1684, 1685, 0, 1687, 1688,
	1689, 1597, 1377, 1309, 0, 2135, 0, 2157, 2162, 2163,
	2164, 2165, 2156, 0, 0, 1582, 0, 1572, 0, 0,
	-2, -2, 0, 0, 1959, -2, 2169, 2170, 2171, 2132,
	2153, 2161, 2136, 2137, 2160, 2128, 2129, 2130, 2123, 2124,
	2125, 2127, 2139, 2141, 2152, 0, 2148, 2158, 2159, 2067,
	0, 0, 0, 0, 0, 2108, 125, 126, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1593, -2, -2, 1596, -2,
	1599, -2, -2, -2, -2, 1604, 1605, -2, 1607, -2,
	-2, -2, -2, -2, -2, -2, 1584, 1585, 1586, 1587,
	1576, 1577, 1578, 1579, 1580, 1581, -2, -2, -2, 767,
	842, 0, 767, 0, 742, 789, 792, 795, 798, 745,
	0, 0, 73, 74, 0, 0, 0, 297, 298, 286,
	288, 0, 292, 0, 285, 1071, 0, 0, 0, 0,
	1071, 1071, 1071, 1071, 1071, 0, 1071, 0, 0, 0,
	0, 0, 1071, 0, 949, 1042, 1043, 1044, 1069, 1070,
	1143, 0, 0, 0, 668, 664, 665, 666, 667, 755,
	0, 757, 760, 589, 589, 815, 535, 0, 0, 0,
	589, 0, 549, 541, 0, 0, 0, 589, 0, 0,
	762, 762, 0, 592, 601, 589, 589, -2, 589, 589,
	586, 589, 0, 0, 1083, 555, 556, 557, 541, 541,
	560, 561, 562, 572, 573, 602, 1763, 0, 0, 477,
	477, 0, 477, 0, 477, 477, 477, 0, 670, 1929,
	1832, 1905, 1890, 2091, 0, 253, 1959, 258, 0, 1833,
	1852, 0, 0, 1870, 0, -2, 0, 324, 767, 0,
	0, 741, 0, 0, 0, 0, 0, 477, 477, 477,
	477, 477, 1142, 477, 477, 477, 477, 477, 0, 0,
	0, 477, 477, 477, 0, 0, 807, 808, 803, 804,
	805, 809, 810, 5, 6, 19, 0, 0, 0, 0,
	0, 0, 79, 78, 0, 1740, 1758, 1692, 1693, 1694,
	1745, 1696, 1749, 1749, 1749, 1749, 1725, 1726, 1727, 1728,
	1729, 1730, 1731, 1732, 1733, 1749, 1749, 0, 0, 1738,
	1716, 1747, 1747, 1747, 1745, 1742, 1697, 1698, 1699, 1700,
	1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710,
	1752, 1752, 1755, 1755, 1752, 0, 381, 379, 380, 1622,
	0, 0, 0, 0, 711, 715, 1255, 0, 0, 0,
	767, -2, 0, 0, 615, 346, 1314, 0, 0, 350,
	0, 351, 0, 0, 0, 370, 0, 373, 358, 359,
	360, 354, 0, 151, 0, 337, 338, 0, 0, 304,
	0, 0, 0, 478, 0, 0, 0, 0, 0, 0,
	182, 178, 186, 189, 199, 206, 0, 218, 220, 223,
	179, 187, 192, 193, 200, 221, 180, 183, 184, 188,
	222, 224, 181, 201, 205, 219, 203, 208, 211, 212,
	217, 0, 152, 0, 0, 0, 0, 0, 1632, 0,
	0, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 1626, 0,
	0, 1396, 1397, 1398, 1399, 0, 1403, 0, 1431, 0,
	0, 0, 0, 0, 1686, 1690, 0, 1622, 1622, 0,
	1622, 1618, 0, 0, 0, 0, 0, 0, 1622, 1555,
	0, 0, 1557, 1573, 0, 0, 1559, 1560, 0, 1563,
	1564, 1622, 0, 1622, 1568, 1622, 1622, 1622, 1551, 1552,
	0, 1618, 1618, 1618, 1618, 0, 0, 1618, 1618, 1618,
	1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
	1618, 0, 0, 0, 0, 762, 0, 768, 0, -2,
	0, 786, 788, 790, 791, 793, 794, 796, 797, 799,
	800, 747, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 290, 0, 295, 0, 0, 0, 913, 0, 0,
	1071, 1071, 1071, 950, 0, 0, 0, 0, 0, 0,
	0, 0, 1071, 1071, 1071, 1071, 0, 1089, 0, 0,
	0, 670, 669, 0, 756, 0, 0, 815, 0, 0,
	533, 534, 0, 0, 541, 589, 589, 547, 548, 543,
	542, 597, 598, 592, 0, 592, 592, 815, 0, 566,
	567, 568, 589, 589, 574, 763, 0, 575, 576, 592,
	0, 599, 600, 815, 0, 0, 815, 815, 0, 584,
	585, 587, 589, 0, 0, 1071, 0, 607, 543, 543,
	1764, 1765, 0, 0, 1080, 0, 0, 0, 610, 0,
	0, 0, 0, 0, 671, 233, 236, 0, 239, 0,
	1929, 0, 1929, 0, 246, 0, 0, 0, 0, 0,
	0, 276, 277, 0, 0, 0, 0, 267, 270, 1249,
	1250, 1032, 1033, 271, 272, 316, 317, 0, 762, 785,
	787, 781, 782, 783, 0, 0, 0, 0, 0, 0,
	0, 0, 477, 0, 0, 0, 0, 0, 646, 0,
	929, 648, 0, 0, 0, 0, 823, 817, 819, 886,
	111, 823, 8, 96, 93, 0, 19, 0, 0, 19,
	19, 0, 19, 281, 0, 1761, 1759, 1760, 1695, 1746,
	0, 1721, 0, 1722, 1723, 1724, 1734, 1735, 0, 0,
	1717, 0, 1718, 1719, 1720, 1711, 0, 1712, 1713, 0,
	1714, 1715, 279, 378, 0, 0, 1623, 917, 0, 689,
	703, 684, 0, 692, 0, 0, 1257, 1258, 0, 0,
	0, 672, 703, 674, 0, 692, 762, 739, 0, 717,
	0, 0, 347, 0, 355, 352, 0, 356, 0, 0,
	372, 374, 375, 376, 361, 362, 612, 333, 334, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 336, 121,
	0, 305, 306, 0, 0, 0, 165, 166, 167, 168,
	169, 170, 172, 156, 635, 637, 1024, 1036, 0, 1027,
	0, 175, 216, 148, 0, 0, 0, 1627, 1628, 1629,
	1630, 1631, 1636, 0, 1638, 1640, 1642, 1644, 0, 1662,
	-2, -2, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
	1386, 1387, 1388, 1389, 1647, 1660, 1661, 0, 0, 0,
	0, 0, 0, 1658, 1658, 1653, 0, 1416, 1251, 1252,
	1394, 0, 0, 1428, 1432, 0, 0, 0, 0, 0,
	112, 1617, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529,
	1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539,
	1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549,
	1550, 0, 0, 1626, 0, 0, 0, 1619, 1620, 0,
	0, 0, 1510, 0, 0, 1516, 1517, 1518, 0, 698,
	0, 1583, 1556, 1574, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 841, 843, 0, 707, 709, 710, 736, 717, 743,
	0, 0, 0, 71, 76, 0, 1110, 0, 0, 0,
	299, 300, 0, 0, 294, 0, 0, 0, -2, 0,
	0, 0, 0, 0, 965, 966, 475, 1018, 0, 0,
	0, 1034, 1059, 1067, 0, 0, 0, 0, 0, 1116,
	951, 956, 957, 958, 952, 953, 959, 960, 0, 758,
	0, 0, 855, 532, 590, 591, 816, 538, 1890, 543,
	815, 815, 550, 544, 551, 594, 552, 553, 554, 592,
	815, 815, 764, 589, 592, 577, 593, 592, 595, 581,
	0, 588, 595, 608, 595, 0, 606, 558, 559, 1118,
	760, 393, 394, 396, 398, 0, 446, 446, 446, 429,
	446, 0, 0, 417, 1766, 0, 0, 0, 0, 426,
	1766, 0, 0, 1766, 1766, 1766, 1766, 1766, 1766, 1766,
	0, 0, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766,
	1766, 1766, 1766, 0, 1766, 1766, 1766, 1766, 1766, 1235,
	1766, 0, 1081, 436, 437, 438, 439, 444, 445, 0,
	472, 0, 0, 964, 0, 475, 0, 1004, 0, 828,
	0, 829, 830, 826, 857, 881, 881, 0, 881, 861,
	1257, 0, 0, 244, 245, 234, 0, 235, 0, 247,
	248, 0, 250, 251, 252, 259, 1832, 1905, 254, 256,
	0, 0, 260, 273, 274, 275, 0, 0, 265, 266,
	0, 0, 319, 320, 322, 0, 717, 1084, 1085, 1086,
	632, 1253, 633, 634, 638, 0, 0, 641, 642, 643,
	644, 645, 931, 0, 0, 1011, 1012, 1013, 815, 0,
	824, 0, 820, 887, 0, 889, 0, 815, 0, 94,
	19, 0, 87, 84, 0, 0, 0, 0, 0, 1741,
	1691, 1762, 0, 0, 0, 1743, 0, 0, 0, 0,
	0, 77, 719, 679, 0, 683, 700, 0, 704, 0,
	0, 696, 688, 693, 0, 0, 713, 680, 1256, 0,
	0, 0, 673, 0, 0, 678, 717, 0, 740, 769,
	770, 773, 1315, 0, 357, 353, 371, 0, 477, 0,
	0, 0, 159, 1021, 0, 160, 164, 154, 0, 0,
	0, 1026, 0, 1023, 1028, 0, 174, 0, 0, 149,
	150, 1101, 1110, 0, 0, 0, 1637, 1639, 1641, 1643,
	1645, 0, 1648, 1658, 1658, 1654, 0, 1649, 0, 1651,
	0, 1627, 1400, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 1501, 0, 0, 1505, 0, 1507,
	1508, 1509, 1511, 0, 0, 0, 1515, 0, 1554, 1575,
	1558, 1561, 0, 1565, 0, 1567, 1569, 1570, 1571, 0,
	767, 767, 0, 0, 1472, 1472, 1472, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1417, 0, 1418, 1419, 0, 0, 0, 844,
	737, 0, 0, 0, 0, 0, 1108, 0, 64, 0,
	0, 301, 289, 291, 0, 0, 1072, 0, 0, 919,
	920, 922, 0, 925, 926, 927, 931, 760, 0, 760,
	976, 1766, 479, 0, 0, 1020, 0, 0, 993, 0,
	0, 0, -2, 0, 0, 1067, 0, 0, 0, 1120,
	0, 0, 0, 657, 661, 23, 761, 0, 536, 0,
	537, 589, 545, 546, 815, 569, 570, 0, 0, 815,
	589, 589, 580, 0, 592, 603, 0, 604, 605, 1120,
	0, 0, 1080, 1186, 1154, 407, 0, 1270, 1271, 447,
	0, 1277, 1286, 1071, 1347, 0, 1286, 0, 0, 1288,
	1289, 0, 0, 0, 0, 430, 431, 0, 416, 0,
	0, 0, 0, 0, 0, 415, 0, 0, 457, 0,
	0, 0, 0, 0, 1767, 1766, 1766, 0, 424, 425,
	0, 428, 0, 0, 0, 0, 0, 0, 0, 0,
	1766, 1766, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1226, 0, 0, 0, 0, 0, 0,
	0, 1241, 1242, 976, 1766, 0, 0, 0, 479, 991,
	1009, 0, 395, 454, 0, 0, 0, 0, 0, 848,
	0, 0, 847, 0, 0, 0, 0, 0, 760, 882,
	0, 884, 885, 859, -2, 0, 828, 864, 1622, 237,
	238, 0, 0, 243, 261, 263, 0, 0, 0, 262,
	264, 268, 269, 318, 321, 323, 779, 0, 0, 1144,
	0, 932, 933, 935, 936, 0, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1816,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 930, 649, 813, 818, 825, 888, 890, 112, 821,
	813, 0, 97, 19, 96, 88, 89, 0, 19, 0,
	0, 0, 0, 1751, 1750, 1736, 0, 1737, 1748, 1753,
	0, 1756, 0, 382, 723, 0, 0, 703, 705, 0,
	0, 703, 0, 0, 712, 0, 0, 0, 0, 0,
	0, 703, 779, 719, 0, 776, 774, 775, 0, 0,
	613, 122, 377, 0, 0, 0, 0, 0, 636, 0,
	1025, 156, 0, 0, 176, 0, 0, 0, 1110, 1105,
	1621, 1650, 1652, 0, 1659, 1655, 1395, 1404, 1429, 0,
	0, 1435, 1447, 1447, 0, 0, 0, 1438, 1749, 1749,
	1441, 1745, 1747, 1745, 1447, 1447, 0, 113, 0, 0,
	1506, 0, 0, 0, 699, 0, 0, 0, 1468, 1470,
	1472, 1472, 1479, 1473, 1480, 1481, 1472, 1472, 1472, 1472,
	1486, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
	1472, 1466, 0, 0, 1680, 1681, 708, 0, 0, 750,
	751, 752, 753, 754, 0, 0, 57, 57, 1110, 0,
	65, 0, 0, 293, 61, 62, 0, 0, 0, 924,
	0, 0, 0, 1263, 0, 980, 977, 978, 979, 0,
	1015, 480, 481, 482, 483, 0, 0, 0, 1019, 0,
	1004, 1004, 986, 0, 0, 0, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, -2, 1075, 0, 0, 0, 1263, 1094,
	0, 0, 1099, 1263, 1263, 0, 1128, 0, 1117, 711,
	0, -2, 0, 0, 659, 0, 0, 856, 539, 815,
	563, 765, 766, 595, 815, 815, 0, 589, 609, 1128,
	1119, 0, 397, 446, 0, 1174, 0, 0, 1180, 0,
	1187, 400, 0, 448, 0, 1276, 1303, 1287, 1303, 1348,
	1303, 1303, 1071, 0, 448, 0, 0, 418, 0, 0,
	0, 0, 0, 414, 451, 773, 401, 403, 404, 405,
	455, 456, 458, 0, 460, 461, 420, 432, 433, 434,
	435, 0, 0, 0, 427, 440, 441, 442, 443, 402,
	1203, 1204, 1205, 1208, 1209, 1210, 1211, 0, 0, 1214,
	1215, 1216, 1217, 1218, 1300, 1301, 1302, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1243, 1244, 1245, 1246, 1247, 1248,
	1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 0, 0,
	1238, 0, 980, 0, 0, 0, 0, 1015, 993, 0,
	1000, 0, 1005, 1006, 0, 0, 681, 815, 311, 0,
	851, 845, 0, 834, 849, 850, 837, 0, 839, 0,
	835, 836, 815, 827, 858, 883, 860, 863, 865, 866,
	872, 0, 0, 0, 0, 240, 241, 242, 249, 0,
	499, 255, 735, 0, 1254, 639, 640, 1145, 1146, 647,
	0, 937, 811, 0, 0, 811, 92, 95, 0, 90,
	0, 0, 0, 0, 82, 80, 1744, 0, 0, 725,
	136, 0, 0, 0, 701, 0, 706, 703, 687, 697,
	686, 694, 695, 714, 1259, 1260, 1261, 1262, 703, 677,
	676, 738, 723, 771, 772, 0, 1316, 348, 0, 1022,
	156, 161, 162, 163, 157, 155, 1029, 0, 1031, 0,
	1103, 0, 0, 1656, 1434, 1405, 1436, 1448, 1449, 1437,
	0, 1407, 1408, 1439, 1440, 1442, 1443, 1444, 1445, 1446,
	1409, 1502, 0, 1504, 1512, 1513, 0, 1562, 1566, 0,
	0, 0, 0, 0, 1477, 1478, 1482, 1483, 1484, 1485,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
	767, 1467, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 59, 0, 59, 1109, 1111, 0, 0,
	0, 63, 912, 915, 921, 923, 0, 0, 0, 1264,
	1265, 1267, 1268, 1269, 0, 948, 0, 0, 968, 969,
	970, 982, 0, 0, 0, 485, 486, 0, 0, 0,
	498, 494, 495, 496, 476, 1014, 1000, 1000, 989, 0,
	0, 999, 0, 1076, 1766, 1766, 1766, 0, 0, 1188,
	1766, 1766, 0, 1096, 1098, 0, 0, 1192, 1131, 0,
	0, 1122, 0, 881, 0, 0, 815, 658, 661, 662,
	759, 540, 578, 582, 579, 0, 815, 1131, 392, 1152,
	0, 0, 0, 0, 0, 1184, 0, 0, 1156, 0,
	419, 449, 0, -2, 0, 1304, 0, 1290, 1304, 0,
	0, 1303, 0, 408, 448, 0, 0, 0, 462, 466,
	467, 0, 464, 1343, 0, 465, 0, 453, 0, 459,
	1206, 1207, 0, 1212, 1213, 0, 1237, 0, 0, 468,
	0, 0, 0, 469, 474, 986, 0, 1003, 0, 1010,
	0, 1007, 1008, 767, 0, 0, 831, 852, 0, 0,
	832, 0, 833, 838, 840, 310, 867, 0, 0, 869,
	870, 871, 862, 257, 780, 934, 0, 801, 0, 0,
	822, 802, 0, 19, 0, 0, 85, 1754, 1757, 727,
	0, 724, 137, 0, 0, 0, 0, 691, 702, 685,
	675, 725, 777, 778, 158, 153, 1030, 1113, 0, 1104,
	0, 0, 1514, 0, 1472, 1469, 1472, 1471, 1463, 0,
	1420, 0, 1422, 1423, 1424, 0, 1426, 1427, 0, 746,
	0, 55, 0, 58, 56, 0, 66, 0, 0, 954,
	1192, 0, 954, 981, 967, 0, 1016, 1017, 0, 487,
	488, 0, 491, 497, 983, 984, 985, 0, 0, 997,
	0, 0, 0, 0, 1068, 1082, 0, 0, 0, -2,
	0, -2, 1093, 0, 1137, 0, 1129, 0, 1121, 0,
	1124, 815, 815, -2, 655, 660, 0, 0, 583, 1137,
	1154, 0, 1175, 0, 0, 0, 0, 0, 0, 0,
	1155, 0, 1168, 450, 1305, -2, 1319, 1321, 0, 1081,
	1324, 1325, 0, 0, 0, 0, 0, 0, 1369, 1333,
	0, 0, 1337, 1338, 1339, 0, 0, 1342, 0, 1674,
	1675, 0, 1346, 0, 0, 0, 0, 0, 0, 0,
	1284, 409, 410, 0, 412, 413, 1766, 1344, 452, 406,
	1766, 422, 1236, 1239, 1240, 473, 470, 471, 989, 992,
	1001, 682, 762, 312, 313, 853, 0, 846, 876, 873,
	0, 0, 938, 812, 814, 86, 91, 0, 0, 729,
	0, 726, 0, 720, 722, 147, 690, 727, 107, 139,
	0, 0, 1406, 1503, 1553, 1475, 1476, 0, 1464, 0,
	1458, 1459, 1460, 1465, 0, 0, 749, 744, 60, 68,
	0, 0, 0, 940, 947, 961, 1087, 1266, 946, 0,
	0, 484, 489, 0, 492, 493, 0, 987, 988, 0,
	995, 0, 0, 1055, 1745, 0, 1077, 1078, 1079, 1189,
	1190, 1191, 1147, 1095, 0, -2, 1200, 0, 1091, 1113,
	1147, 0, 1125, 0, 1132, 0, 1130, 1123, 767, 656,
	596, 1134, 399, 1186, 1176, 0, 1178, 0, 0, 0,
	0, 1157, -2, 0, 1320, 1322, 1323, 1326, 1327, 1328,
	1374, 1375, 1376, 0, 0, 1331, 1371, 1372, 1373, 1332,
	0, 0, 0, 0, 0, 1672, 1673, 1367, 0, 0,
	1291, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1292, 0,
	0, 0, 1283, 1285, 411, 0, 0, 1766, 1002, 309,
	0, 0, 877, 879, 874, 875, 81, 83, 98, 0,
	728, 138, 0, 729, 109, 0, 130, 0, 1114, 0,
	1474, 1461, 0, 0, 0, 0, 0, 1676, 1677, 1678,
	0, 1421, 1425, 0, 67, 0, 0, 962, 963, 971,
	972, 0, 974, 975, 490, 990, 994, 997, 0, 1046,
	0, 773, 0, 1149, 0, 1097, 1080, 1202, 1766, 1100,
	1149, 0, 1194, 1766, 1766, 1115, 0, 1127, 0, 1139,
	0, 1133, 762, 391, 0, 1136, 1172, 1177, 1179, 1181,
	0, 1185, 1183, 1158, -2, 0, 1166, 0, 0, 1329,
	1330, 0, 0, 1572, 1766, 0, 1362, 0, 1046, 1046,
	1046, 1046, 0, 463, 421, 0, 854, 868, 0, 0,
	0, 718, 99, 0, 108, 127, 0, 140, 141, 0,
	0, 0, 0, 1106, 0, 1450, 0, 0, 0, 1454,
	1455, 1456, 1457, 69, 0, 0, 939, 0, 973, 996,
	998, 1045, 1056, 1057, 773, 1090, 0, 1186, 1201, 0,
	1092, 1193, 0, 0, 0, 1126, 1138, 0, 1141, 654,
	1135, 1153, 0, 1182, 1159, 1167, 0, 1162, 0, 0,
	0, 1370, 0, 1336, 0, 1341, 1350, 1363, 0, 0,
	1272, 0, 1274, 0, 1278, 0, 1280, 0, 0, 423,
	878, 880, 0, 731, 721, 110, 114, 0, 136, 133,
	0, 142, 0, 0, 0, 0, 1102, 0, 0, 1451,
	1452, 1453, 0, 0, 941, 942, 955, 1047, 1766, 1766,
	0, 0, 0, 1053, 1054, 1058, 0, 1174, 1206, 1195,
	1196, 1197, 1140, 1173, 1161, 0, -2, 1169, 0, 0,
	1624, 1634, 1635, 1334, 1340, 1349, 1351, 1352, 0, 1364,
	1365, 1366, 1368, 1046, 1046, 1046, 1046, 1282, 730, 0,
	101, 0, 0, 131, 132, 134, 0, 143, 0, 145,
	146, 0, 1462, 70, 943, 0, 0, 1050, 1051, 0,
	1150, 0, 1152, 1163, -2, 0, 1171, 0, 1335, 1353,
	0, 1354, 0, 0, 0, 1273, 1275, 1279, 1281, 732,
	1112, 0, 115, 0, 117, 119, 120, 1306, 128, 129,
	135, 144, 0, 928, 944, 0, 1048, 1049, 1052, 0,
	1154, 1170, 1625, 1355, 1357, 1358, 0, 0, 1356, 102,
	103, 0, 116, 0, 0, 1107, 945, 1151, 1148, 1359,
	1361, 1360, 0, 0, 118, 1307, 104, 105, 106, 0,
	1308,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 115, 3, 3, 3, 146, 138, 3,
	82, 83, 143, 141, 156, 142, 155, 144, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 637, 634,
	125, 124, 126, 3, 638, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 148, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 635, 137, 636, 149,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 116, 117, 118, 119, 120, 121, 122, 123, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 139,
	140, 145, 147, 150, 151, 152, 153, 154, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:814
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:821
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:827
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:835
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:841
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:845
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:860
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:864
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:870
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:875
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:879
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:912
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:922
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:933
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:945
		{
			yyVAL.str = ""
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:949
		{
			yyVAL.str = yyDollar[2].str
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:954
		{
			yyVAL.str = ""
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:958
		{
			yyVAL.str = yyDollar[2].str
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:966
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:976
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:986
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:999
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1007
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1015
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1024
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1034
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1043
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELDATABASE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[11].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1053
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELTABLE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:     tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[10].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[13].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1066
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1086
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1092
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1099
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1107
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1113
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1122
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1132
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1140
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1148
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1156
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1166
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1174
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1184
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1191
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1200
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1210
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1214
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1220
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1224
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1230
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1239
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1249
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1253
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1259
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1268
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1272
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1278
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1299
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1313
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1320
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1324
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1330
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1334
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1340
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1347
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1355
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1359
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1371
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1375
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1389
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1393
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1398
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1405
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1409
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1413
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1419
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1428
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1439
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1443
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1449
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1453
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1459
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1463
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1469
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1493
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1512
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1516
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1520
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1525
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1529
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1538
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1548
		{
			yyVAL.str = ""
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1555
		{
			yyVAL.str = yyDollar[3].str
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1560
		{
			yyVAL.str = "\n"
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1567
		{
			yyVAL.str = yyDollar[3].str
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1572
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1576
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1604
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1608
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1614
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1622
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1642
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1661
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1686
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1690
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1694
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1699
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1703
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1709
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1722
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1733
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1746
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1750
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1760
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1773
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1786
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1792
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1798
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1806
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1816
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1826
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1830
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1834
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1838
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1842
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1846
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1853
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1857
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1863
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1870
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1879
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1883
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1889
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1893
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1897
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1901
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1905
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1909
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1913
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1917
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1921
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1925
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1929
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1933
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1937
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1941
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1945
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1949
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1953
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1957
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1961
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1965
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1969
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1973
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1977
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1981
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1985
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1989
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1993
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1997
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2001
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2005
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2009
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2013
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2017
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2021
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2025
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2029
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2033
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2037
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2041
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2045
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2049
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2053
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2057
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2061
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2065
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2069
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2073
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2077
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2081
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2085
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2089
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2102
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2109
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2116
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2126
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2130
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2136
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2143
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2151
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2155
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2159
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2163
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2169
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2173
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2179
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2186
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2193
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2202
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2232
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2236
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2240
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2246
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2252
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2256
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2263
		{
			yyVAL.str = yyDollar[3].str
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2269
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2273
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2279
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2287
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2296
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2305
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2313
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2321
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2344
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2367
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2374
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2381
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2389
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2396
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2403
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2412
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2416
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2420
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2426
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2430
		{
			yyVAL.str = yyDollar[1].str
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2436
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2440
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2446
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2450
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2461
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2467
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2472
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2476
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2480
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2484
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2488
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2492
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2496
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2500
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2504
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2510
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2514
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2518
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2522
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2527
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2532
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2538
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2551
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2564
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2577
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2590
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2606
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2613
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2624
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2635
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2639
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2645
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2655
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2661
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2665
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2671
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2677
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2681
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2685
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2689
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2695
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2708
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2714
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2718
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2724
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2728
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2734
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2740
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2751
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2757
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2761
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2765
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2769
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2773
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2777
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2785
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2793
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2803
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2815
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2819
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2827
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2835
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2874
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2878
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2884
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2890
		{
			yyVAL.str = yyDollar[1].str
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2895
		{
			yyVAL.str = "true"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2896
		{
			yyVAL.str = "false"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2897
		{
			yyVAL.str = yyDollar[1].str
		}
	case 377:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2902
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2908
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2917
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2924
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2932
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2936
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2959
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2982
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2992
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2999
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3006
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[5].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3016
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3020
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3026
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3030
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3054
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3064
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3080
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3098
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3102
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3108
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3112
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3118
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3124
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3132
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3142
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3150
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3160
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3170
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3180
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3187
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3191
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3195
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3199
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3203
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3210
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3216
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3220
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3224
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3228
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3232
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3236
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3240
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3244
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3249
		{
			yyVAL.str = ""
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3280
		{
			yyVAL.str = ""
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3284
		{
			yyVAL.str = string("COLUMN")
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3289
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3295
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3301
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3309
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3313
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3319
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3327
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3334
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3340
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3346
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3352
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3358
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3365
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3372
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3380
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3386
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3398
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3404
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3412
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3416
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3423
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3441
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3455
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3469
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3482
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3488
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3499
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3512
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3516
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3524
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3528
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3533
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3537
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3553
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3557
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3561
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3565
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3572
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3576
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3580
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3584
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3591
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3595
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3602
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3606
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3610
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3614
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3621
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3628
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3634
		{
			yyVAL.item = nil
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3639
		{
			yyVAL.item = nil
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3682
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3691
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3699
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3707
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3711
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3715
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				&tree.Role{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3726
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3730
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3736
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3741
		{
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3745
		{
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3750
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3760
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3770
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3778
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3784
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3790
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3796
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3802
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3808
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3814
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3823
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3827
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3831
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3835
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3839
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3843
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3847
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3851
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3857
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3866
		{
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3868
		{
		}
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3877
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3887
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3896
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3900
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3904
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3910
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3916
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3922
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3928
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3937
		{
			yyLOCAL = &tree.ShowTables{
				Open:         false,
				Full:         yyDollar[2].fullOptUnion(),
				DBName:       yyDollar[4].str,
				Like:         yyDollar[5].comparisionExprUnion(),
				Where:        yyDollar[6].whereUnion(),
				SnapshotName: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3948
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3960
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:         yyDollar[3].comparisionExprUnion(),
				Where:        yyDollar[4].whereUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3968
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3974
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3986
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4000
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4006
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4012
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4019
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4023
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4028
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4032
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4036
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4041
		{
			yyVAL.str = ""
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4045
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4051
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4056
		{
			yyVAL.str = ""
		}
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
//line mysql_sql.y:4060
		{
			yyVAL.str = yyDollar[4].str
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4075
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4079
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4085
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4093
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4100
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4104
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4110
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4116
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4121
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4129
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4135
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4140
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4146
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4152
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4156
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4182
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4190
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4198
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4206
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4210
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4216
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4229
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4237
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4246
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4252
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4260
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4268
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4276
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4282
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4290
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4296
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4304
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4310
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4320
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4325
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4332
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4348
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4361
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4372
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4376
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4382
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4388
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4397
		{
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4399
		{
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4402
		{
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4411
		{
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4415
		{
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4420
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4429
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4436
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4442
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4450
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4457
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4464
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4484
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4492
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4502
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4506
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4512
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4519
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4525
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4533
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4540
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4547
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4566
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4570
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4574
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4579
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4583
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4587
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4593
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4602
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4606
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4612
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4616
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4622
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4626
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4632
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4637
		{
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4641
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4648
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4652
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4659
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4664
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4668
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4674
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4678
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4684
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4688
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4693
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4697
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4710
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4721
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4732
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4754
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4777
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4785
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4794
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4798
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4811
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4815
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4820
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4824
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4831
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4836
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4843
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4849
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4853
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4857
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4861
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4865
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4869
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4874
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4878
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4884
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4894
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4909
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4913
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4927
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4931
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4937
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4946
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4950
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4954
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4958
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4962
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4968
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4975
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4984
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4988
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4994
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5002
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5006
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5011
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5015
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5021
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5025
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5029
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5034
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5038
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5044
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5050
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5054
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5060
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5065
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5069
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5073
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5078
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5082
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5086
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5091
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5095
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5103
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5107
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5111
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5125
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5129
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5139
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5149
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5159
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5171
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5179
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5187
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5196
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5204
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5212
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5220
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5228
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5236
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5244
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5252
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5260
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5270
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5281
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5295
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5299
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5303
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5308
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5312
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5316
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5325
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5329
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5334
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5338
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5343
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5347
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5353
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5357
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5363
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5367
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5371
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5375
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5380
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5388
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5394
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5402
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5410
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5420
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5426
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5435
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5444
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5453
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5463
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5467
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5477
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 838:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5481
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5485
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5489
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 841:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5495
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5505
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5509
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5515
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5521
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5525
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5531
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5537
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5541
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5545
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 851:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5551
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5555
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5561
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5565
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5571
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5575
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5581
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5585
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5595
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5608
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5614
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5620
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5634
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5645
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5652
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5656
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5662
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5672
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5676
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5680
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5685
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5689
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5693
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5697
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5702
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5706
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5710
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5714
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5718
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5723
		{
			yyVAL.str = ""
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5727
		{
			yyVAL.str = yyDollar[1].str
		}
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5731
		{
			yyVAL.str = yyDollar[2].str
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5737
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5741
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 886:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5746
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5750
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5754
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5758
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5762
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5768
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 912:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5808
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5821
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5827
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 915:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5833
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5846
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5851
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5858
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5865
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5869
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5875
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5881
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5886
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5890
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5894
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5898
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5905
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5938
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5943
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5950
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5957
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5961
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5967
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5973
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5977
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5981
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5987
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5993
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5999
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6003
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6009
		{
			yyVAL.str = ""
		}
	case 945:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6016
		{
			yyVAL.str = yyDollar[2].str
		}
	case 946:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6022
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6037
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6054
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6071
		{
			yyVAL.str = yyDollar[1].str
		}
	case 950:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6075
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6081
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6085
		{
			yyVAL.str = "DEFINER = "
		}
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6089
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 954:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6094
		{
			yyVAL.str = ""
		}
	case 955:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6098
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 961:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6112
		{
			yyVAL.str = ""
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6120
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6126
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6131
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6137
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6150
		{
			var Str = yyDollar[1].str
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6155
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6160
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6166
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6173
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6180
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6187
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6194
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6202
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6208
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6215
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6222
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6230
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6236
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6245
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6262
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var Table = tree.Identifier("")
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6279
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier("")
			var Table = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6298
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6316
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6322
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6329
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6337
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6343
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6351
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6357
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6365
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6371
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6380
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6384
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6389
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6393
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6400
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1000:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6405
		{
			yyVAL.str = ""
		}
	case 1001:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6409
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1002:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6415
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6428
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var comment = yyDollar[7].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, comment)
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6438
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6442
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6448
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6454
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6460
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6467
		{
			yyVAL.str = ""
		}
	case 1010:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6471
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1011:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6477
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6485
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6493
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6501
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1015:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6506
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6518
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6529
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6638
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6642
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6648
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6661
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6665
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6671
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6684
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6688
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6692
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6697
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6701
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6707
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6714
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6720
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6729
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1034:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6736
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6747
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6751
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6757
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6766
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6770
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6774
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6779
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6783
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6787
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6791
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6797
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6828
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6832
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6858
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6864
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6876
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6882
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6888
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6894
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6900
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6908
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6912
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6918
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6932
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6946
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6950
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6954
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6958
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6962
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6966
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6970
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6976
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6991
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6995
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7006
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7010
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7015
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7019
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7025
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7029
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7035
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7044
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7053
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7059
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7063
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7069
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7080
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7086
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7104
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7122
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7140
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7156
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7160
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7169
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7181
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7190
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7202
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7212
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7222
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7233
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7243
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7254
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7262
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7273
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7280
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7290
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7303
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7311
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7320
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7329
		{
			yyVAL.str = ""
		}
	case 1107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7333
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7339
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7343
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7348
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7352
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7359
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7371
		{
			yyVAL.str = ""
		}
	case 1114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7375
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1115:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7381
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7402
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7416
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7420
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7424
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7430
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7434
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7441
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7448
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7455
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7462
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7466
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7470
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7474
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7478
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7485
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7492
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7496
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7503
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7510
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7514
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7520
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7526
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7530
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7537
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7544
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7551
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7558
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7562
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7567
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7571
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7575
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7580
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7584
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7597
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7601
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7609
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7617
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7621
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7633
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7637
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7643
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7647
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7653
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7666
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7680
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7684
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7690
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7694
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7700
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7709
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7720
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7724
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7729
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7733
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7739
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7744
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7752
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7756
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7766
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7770
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7781
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7789
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7797
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7805
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7816
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7825
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7835
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7845
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7849
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7854
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7858
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7864
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7868
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7874
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7883
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7893
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7897
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7903
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7907
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7913
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7922
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7932
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7936
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7942
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7946
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7950
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7956
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7960
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7964
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7968
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7972
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7976
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7980
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7985
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7989
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7993
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7997
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8001
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8005
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8009
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8013
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8017
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8021
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8025
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8029
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8033
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8039
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8045
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8049
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8053
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8057
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8061
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8067
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8073
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8079
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8085
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8091
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8097
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8101
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8105
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8109
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8116
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8120
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8126
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8137
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8141
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8147
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8151
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8155
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8159
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8163
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8167
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8181
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8185
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8194
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8200
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8208
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8212
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8216
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8223
		{
			var Str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8231
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8238
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8246
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8253
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8257
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8263
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8267
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8271
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8277
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8281
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8287
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8300
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8313
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8352
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8392
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8406
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8412
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8425
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8438
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8451
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8464
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8479
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8489
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8495
		{
			yyVAL.str = ""
		}
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8499
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8509
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8515
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8521
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8542
		{
			yyVAL.str = ""
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8546
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8552
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8558
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8562
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8567
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8575
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8579
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8583
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8587
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8593
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8599
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8603
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8608
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8615
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8619
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8625
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8629
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8635
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8639
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8643
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8647
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8651
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8655
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8660
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8664
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8668
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8672
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8676
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8680
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8684
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8688
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8692
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8696
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8710
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8714
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8718
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8722
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8726
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8730
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8736
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8740
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8745
		{
			yyVAL.str = ""
		}
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8749
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8755
		{
			yyVAL.str = ""
		}
	case 1348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8759
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1349:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8765
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8782
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8789
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8796
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8803
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8810
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8819
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8825
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8831
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8835
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8839
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8843
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8847
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8852
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8859
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8863
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8867
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8872
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8876
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8881
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8885
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8901
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8907
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8911
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8915
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8919
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8923
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8927
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8931
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8935
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8939
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8943
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8947
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8951
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8955
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8961
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8965
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8969
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8973
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8977
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8981
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8985
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8989
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8993
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8997
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9039
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9043
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9047
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9052
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9060
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9064
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9068
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9072
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9076
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9086
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9090
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9094
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9098
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9102
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9106
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9110
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9116
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9125
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9134
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9145
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9155
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9165
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9174
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9184
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9194
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9204
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9213
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9223
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9227
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9232
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9236
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9242
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9246
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9252
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9261
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1436:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9273
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9290
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9307
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9320
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9333
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9345
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9359
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9374
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9389
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9406
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9421
		{
		}
	case 1451:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9428
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9432
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9436
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9442
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9446
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9450
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9454
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9460
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9464
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9468
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9474
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9482
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9492
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9496
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9503
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9508
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9512
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9517
		{
			yyVAL.str = ","
		}
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9521
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9526
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9530
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1472:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9535
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9542
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9568
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9580
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9592
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9603
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9614
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9625
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9635
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9645
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9656
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9667
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9678
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9689
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9700
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9711
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9722
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9733
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9744
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9755
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9766
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9777
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9788
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9799
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9817
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9826
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9835
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9844
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9853
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9864
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9873
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9883
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9892
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9901
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9910
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9919
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9931
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9942
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9955
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9967
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9990
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10026
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10039
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10052
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10064
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10073
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10081
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10089
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10102
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10111
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10122
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10133
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10142
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10154
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10164
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10174
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10183
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10194
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10203
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10213
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10222
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10231
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10241
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10245
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10251
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10255
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10274
		{
		}
	case 1583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10276
		{
		}
	case 1617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10317
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10329
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10333
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10337
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10343
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10348
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10352
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10358
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10362
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10368
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10372
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10379
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10383
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10387
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10396
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10400
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10404
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10409
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10413
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10419
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10423
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10427
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10431
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10435
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10439
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10443
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10447
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10451
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10455
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10463
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10467
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10471
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10475
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10479
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10483
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10487
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10491
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10495
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10499
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10505
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10509
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10515
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10519
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10526
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10530
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10534
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10540
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10544
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10548
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10552
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10556
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10560
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10564
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10570
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10574
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10578
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10582
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10588
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10601
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10606
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10612
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10616
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10629
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10634
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10638
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10642
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10646
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10650
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10657
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10661
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10665
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10669
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10676
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10687
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10692
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10698
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10710
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10722
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10734
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10747
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10760
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10773
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10786
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10799
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10812
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10825
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10838
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10851
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10864
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10879
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10906
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10948
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10984
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11020
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11037
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11049
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11069
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11089
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11109
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11125
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11138
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11151
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11164
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11177
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11189
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11201
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11213
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11225
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11237
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11249
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11261
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11273
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11285
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11298
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11311
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11324
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11337
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11352
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11360
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11369
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11379
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11402
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11407
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11413
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11420
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11424
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11429
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11433
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11439
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11445
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11452
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11459
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11468
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11475
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11482
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11491
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11495
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11499
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11505
		{
		}
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11507
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11517
		{
			yyVAL.str = ""
		}
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11521
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
