// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const SNAPSHOTS = 57437
const INTEGRAL = 57438
const HEX = 57439
const FLOAT = 57440
const HEXNUM = 57441
const BIT_LITERAL = 57442
const NULL = 57443
const TRUE = 57444
const FALSE = 57445
const LOWER_THAN_CHARSET = 57446
const CHARSET = 57447
const UNIQUE = 57448
const KEY = 57449
const OR = 57450
const PIPE_CONCAT = 57451
const XOR = 57452
const AND = 57453
const NOT = 57454
const BETWEEN = 57455
const CASE = 57456
const WHEN = 57457
const THEN = 57458
const ELSE = 57459
const END = 57460
const ELSEIF = 57461
const LOWER_THAN_EQ = 57462
const LE = 57463
const GE = 57464
const NE = 57465
const NULL_SAFE_EQUAL = 57466
const IS = 57467
const LIKE = 57468
const REGEXP = 57469
const IN = 57470
const ASSIGNMENT = 57471
const ILIKE = 57472
const SHIFT_LEFT = 57473
const SHIFT_RIGHT = 57474
const DIV = 57475
const MOD = 57476
const UNARY = 57477
const COLLATE = 57478
const BINARY = 57479
const UNDERSCORE_BINARY = 57480
const INTERVAL = 57481
const OUT = 57482
const INOUT = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const WORK = 57489
const CONSISTENT = 57490
const SNAPSHOT = 57491
const CHAIN = 57492
const NO = 57493
const RELEASE = 57494
const PRIORITY = 57495
const QUICK = 57496
const BIT = 57497
const TINYINT = 57498
const SMALLINT = 57499
const MEDIUMINT = 57500
const INT = 57501
const INTEGER = 57502
const BIGINT = 57503
const INTNUM = 57504
const REAL = 57505
const DOUBLE = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const DECIMAL_VALUE = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const UUID = 57531
const VECF32 = 57532
const VECF64 = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const INT1 = 57542
const INT2 = 57543
const INT3 = 57544
const INT4 = 57545
const INT8 = 57546
const S3OPTION = 57547
const STAGEOPTION = 57548
const SQL_SMALL_RESULT = 57549
const SQL_BIG_RESULT = 57550
const SQL_BUFFER_RESULT = 57551
const LOW_PRIORITY = 57552
const HIGH_PRIORITY = 57553
const DELAYED = 57554
const CREATE = 57555
const ALTER = 57556
const DROP = 57557
const RENAME = 57558
const ANALYZE = 57559
const ADD = 57560
const RETURNS = 57561
const SCHEMA = 57562
const TABLE = 57563
const SEQUENCE = 57564
const INDEX = 57565
const VIEW = 57566
const TO = 57567
const IGNORE = 57568
const IF = 57569
const PRIMARY = 57570
const COLUMN = 57571
const CONSTRAINT = 57572
const SPATIAL = 57573
const FULLTEXT = 57574
const FOREIGN = 57575
const KEY_BLOCK_SIZE = 57576
const SHOW = 57577
const DESCRIBE = 57578
const EXPLAIN = 57579
const DATE = 57580
const ESCAPE = 57581
const REPAIR = 57582
const OPTIMIZE = 57583
const TRUNCATE = 57584
const MAXVALUE = 57585
const PARTITION = 57586
const REORGANIZE = 57587
const LESS = 57588
const THAN = 57589
const PROCEDURE = 57590
const TRIGGER = 57591
const STATUS = 57592
const VARIABLES = 57593
const ROLE = 57594
const PROXY = 57595
const AVG_ROW_LENGTH = 57596
const STORAGE = 57597
const DISK = 57598
const MEMORY = 57599
const CHECKSUM = 57600
const COMPRESSION = 57601
const DATA = 57602
const DIRECTORY = 57603
const DELAY_KEY_WRITE = 57604
const ENCRYPTION = 57605
const ENGINE = 57606
const MAX_ROWS = 57607
const MIN_ROWS = 57608
const PACK_KEYS = 57609
const ROW_FORMAT = 57610
const STATS_AUTO_RECALC = 57611
const STATS_PERSISTENT = 57612
const STATS_SAMPLE_PAGES = 57613
const DYNAMIC = 57614
const COMPRESSED = 57615
const REDUNDANT = 57616
const COMPACT = 57617
const FIXED = 57618
const COLUMN_FORMAT = 57619
const AUTO_RANDOM = 57620
const ENGINE_ATTRIBUTE = 57621
const SECONDARY_ENGINE_ATTRIBUTE = 57622
const INSERT_METHOD = 57623
const RESTRICT = 57624
const CASCADE = 57625
const ACTION = 57626
const PARTIAL = 57627
const SIMPLE = 57628
const CHECK = 57629
const ENFORCED = 57630
const RANGE = 57631
const LIST = 57632
const ALGORITHM = 57633
const LINEAR = 57634
const PARTITIONS = 57635
const SUBPARTITION = 57636
const SUBPARTITIONS = 57637
const CLUSTER = 57638
const TYPE = 57639
const ANY = 57640
const SOME = 57641
const EXTERNAL = 57642
const LOCALFILE = 57643
const URL = 57644
const PREPARE = 57645
const DEALLOCATE = 57646
const RESET = 57647
const EXTENSION = 57648
const INCREMENT = 57649
const CYCLE = 57650
const MINVALUE = 57651
const PUBLICATION = 57652
const SUBSCRIPTIONS = 57653
const PUBLICATIONS = 57654
const PROPERTIES = 57655
const PARSER = 57656
const VISIBLE = 57657
const INVISIBLE = 57658
const BTREE = 57659
const HASH = 57660
const RTREE = 57661
const BSI = 57662
const IVFFLAT = 57663
const MASTER = 57664
const ZONEMAP = 57665
const LEADING = 57666
const BOTH = 57667
const TRAILING = 57668
const UNKNOWN = 57669
const LISTS = 57670
const OP_TYPE = 57671
const REINDEX = 57672
const EXPIRE = 57673
const ACCOUNT = 57674
const ACCOUNTS = 57675
const UNLOCK = 57676
const DAY = 57677
const NEVER = 57678
const PUMP = 57679
const MYSQL_COMPATIBILITY_MODE = 57680
const MODIFY = 57681
const CHANGE = 57682
const SECOND = 57683
const ASCII = 57684
const COALESCE = 57685
const COLLATION = 57686
const HOUR = 57687
const MICROSECOND = 57688
const MINUTE = 57689
const MONTH = 57690
const QUARTER = 57691
const REPEAT = 57692
const REVERSE = 57693
const ROW_COUNT = 57694
const WEEK = 57695
const REVOKE = 57696
const FUNCTION = 57697
const PRIVILEGES = 57698
const TABLESPACE = 57699
const EXECUTE = 57700
const SUPER = 57701
const GRANT = 57702
const OPTION = 57703
const REFERENCES = 57704
const REPLICATION = 57705
const SLAVE = 57706
const CLIENT = 57707
const USAGE = 57708
const RELOAD = 57709
const FILE = 57710
const TEMPORARY = 57711
const ROUTINE = 57712
const EVENT = 57713
const SHUTDOWN = 57714
const NULLX = 57715
const AUTO_INCREMENT = 57716
const APPROXNUM = 57717
const SIGNED = 57718
const UNSIGNED = 57719
const ZEROFILL = 57720
const ENGINES = 57721
const LOW_CARDINALITY = 57722
const AUTOEXTEND_SIZE = 57723
const ADMIN_NAME = 57724
const RANDOM = 57725
const SUSPEND = 57726
const ATTRIBUTE = 57727
const HISTORY = 57728
const REUSE = 57729
const CURRENT = 57730
const OPTIONAL = 57731
const FAILED_LOGIN_ATTEMPTS = 57732
const PASSWORD_LOCK_TIME = 57733
const UNBOUNDED = 57734
const SECONDARY = 57735
const RESTRICTED = 57736
const USER = 57737
const IDENTIFIED = 57738
const CIPHER = 57739
const ISSUER = 57740
const X509 = 57741
const SUBJECT = 57742
const SAN = 57743
const REQUIRE = 57744
const SSL = 57745
const NONE = 57746
const PASSWORD = 57747
const SHARED = 57748
const EXCLUSIVE = 57749
const MAX_QUERIES_PER_HOUR = 57750
const MAX_UPDATES_PER_HOUR = 57751
const MAX_CONNECTIONS_PER_HOUR = 57752
const MAX_USER_CONNECTIONS = 57753
const FORMAT = 57754
const VERBOSE = 57755
const CONNECTION = 57756
const TRIGGERS = 57757
const PROFILES = 57758
const LOAD = 57759
const INLINE = 57760
const INFILE = 57761
const TERMINATED = 57762
const OPTIONALLY = 57763
const ENCLOSED = 57764
const ESCAPED = 57765
const STARTING = 57766
const LINES = 57767
const ROWS = 57768
const IMPORT = 57769
const DISCARD = 57770
const JSONTYPE = 57771
const MODUMP = 57772
const OVER = 57773
const PRECEDING = 57774
const FOLLOWING = 57775
const GROUPS = 57776
const DATABASES = 57777
const TABLES = 57778
const SEQUENCES = 57779
const EXTENDED = 57780
const FULL = 57781
const PROCESSLIST = 57782
const FIELDS = 57783
const COLUMNS = 57784
const OPEN = 57785
const ERRORS = 57786
const WARNINGS = 57787
const INDEXES = 57788
const SCHEMAS = 57789
const NODE = 57790
const LOCKS = 57791
const ROLES = 57792
const TABLE_NUMBER = 57793
const COLUMN_NUMBER = 57794
const TABLE_VALUES = 57795
const TABLE_SIZE = 57796
const NAMES = 57797
const GLOBAL = 57798
const PERSIST = 57799
const SESSION = 57800
const ISOLATION = 57801
const LEVEL = 57802
const READ = 57803
const WRITE = 57804
const ONLY = 57805
const REPEATABLE = 57806
const COMMITTED = 57807
const UNCOMMITTED = 57808
const SERIALIZABLE = 57809
const LOCAL = 57810
const EVENTS = 57811
const PLUGINS = 57812
const CURRENT_TIMESTAMP = 57813
const DATABASE = 57814
const CURRENT_TIME = 57815
const LOCALTIME = 57816
const LOCALTIMESTAMP = 57817
const UTC_DATE = 57818
const UTC_TIME = 57819
const UTC_TIMESTAMP = 57820
const REPLACE = 57821
const CONVERT = 57822
const SEPARATOR = 57823
const TIMESTAMPDIFF = 57824
const CURRENT_DATE = 57825
const CURRENT_USER = 57826
const CURRENT_ROLE = 57827
const SECOND_MICROSECOND = 57828
const MINUTE_MICROSECOND = 57829
const MINUTE_SECOND = 57830
const HOUR_MICROSECOND = 57831
const HOUR_SECOND = 57832
const HOUR_MINUTE = 57833
const DAY_MICROSECOND = 57834
const DAY_SECOND = 57835
const DAY_MINUTE = 57836
const DAY_HOUR = 57837
const YEAR_MONTH = 57838
const SQL_TSI_HOUR = 57839
const SQL_TSI_DAY = 57840
const SQL_TSI_WEEK = 57841
const SQL_TSI_MONTH = 57842
const SQL_TSI_QUARTER = 57843
const SQL_TSI_YEAR = 57844
const SQL_TSI_SECOND = 57845
const SQL_TSI_MINUTE = 57846
const RECURSIVE = 57847
const CONFIG = 57848
const DRAINER = 57849
const SOURCE = 57850
const STREAM = 57851
const HEADERS = 57852
const CONNECTOR = 57853
const CONNECTORS = 57854
const DAEMON = 57855
const PAUSE = 57856
const CANCEL = 57857
const TASK = 57858
const RESUME = 57859
const MATCH = 57860
const AGAINST = 57861
const BOOLEAN = 57862
const LANGUAGE = 57863
const WITH = 57864
const QUERY = 57865
const EXPANSION = 57866
const WITHOUT = 57867
const VALIDATION = 57868
const UPGRADE = 57869
const RETRY = 57870
const ADDDATE = 57871
const BIT_AND = 57872
const BIT_OR = 57873
const BIT_XOR = 57874
const CAST = 57875
const COUNT = 57876
const APPROX_COUNT = 57877
const APPROX_COUNT_DISTINCT = 57878
const SERIAL_EXTRACT = 57879
const APPROX_PERCENTILE = 57880
const CURDATE = 57881
const CURTIME = 57882
const DATE_ADD = 57883
const DATE_SUB = 57884
const EXTRACT = 57885
const GROUP_CONCAT = 57886
const MAX = 57887
const MID = 57888
const MIN = 57889
const NOW = 57890
const POSITION = 57891
const SESSION_USER = 57892
const STD = 57893
const STDDEV = 57894
const MEDIAN = 57895
const CLUSTER_CENTERS = 57896
const KMEANS = 57897
const STDDEV_POP = 57898
const STDDEV_SAMP = 57899
const SUBDATE = 57900
const SUBSTR = 57901
const SUBSTRING = 57902
const SUM = 57903
const SYSDATE = 57904
const SYSTEM_USER = 57905
const TRANSLATE = 57906
const TRIM = 57907
const VARIANCE = 57908
const VAR_POP = 57909
const VAR_SAMP = 57910
const AVG = 57911
const RANK = 57912
const ROW_NUMBER = 57913
const DENSE_RANK = 57914
const BIT_CAST = 57915
const BITMAP_BIT_POSITION = 57916
const BITMAP_BUCKET_NUMBER = 57917
const BITMAP_COUNT = 57918
const BITMAP_CONSTRUCT_AGG = 57919
const BITMAP_OR_AGG = 57920
const NEXTVAL = 57921
const SETVAL = 57922
const CURRVAL = 57923
const LASTVAL = 57924
const ARROW = 57925
const ROW = 57926
const OUTFILE = 57927
const HEADER = 57928
const MAX_FILE_SIZE = 57929
const FORCE_QUOTE = 57930
const PARALLEL = 57931
const UNUSED = 57932
const BINDINGS = 57933
const DO = 57934
const DECLARE = 57935
const LOOP = 57936
const WHILE = 57937
const LEAVE = 57938
const ITERATE = 57939
const UNTIL = 57940
const CALL = 57941
const PREV = 57942
const SLIDING = 57943
const FILL = 57944
const SPBEGIN = 57945
const BACKEND = 57946
const SERVERS = 57947
const HANDLER = 57948
const PERCENT = 57949
const SAMPLE = 57950
const KILL = 57951
const BACKUP = 57952
const FILESYSTEM = 57953
const PARALLELISM = 57954
const QUERY_RESULT = 57955

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:11894

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 122,
	11, 723,
	22, 723,
	-2, 716,
	-1, 142,
	238, 1117,
	240, 1017,
	-2, 1064,
	-1, 167,
	43, 548,
	240, 548,
	267, 555,
	268, 555,
	463, 548,
	-2, 583,
	-1, 208,
	634, 1870,
	-2, 461,
	-1, 508,
	634, 1988,
	-2, 350,
	-1, 566,
	634, 2047,
	-2, 348,
	-1, 567,
	634, 2048,
	-2, 349,
	-1, 568,
	634, 2049,
	-2, 351,
	-1, 697,
	319, 137,
	435, 137,
	436, 137,
	-2, 1775,
	-1, 763,
	82, 1562,
	-2, 1925,
	-1, 764,
	82, 1580,
	-2, 1896,
	-1, 768,
	82, 1581,
	-2, 1924,
	-1, 801,
	82, 1489,
	-2, 2119,
	-1, 802,
	82, 1490,
	-2, 2118,
	-1, 803,
	82, 1491,
	-2, 2108,
	-1, 804,
	82, 2080,
	-2, 2101,
	-1, 805,
	82, 2081,
	-2, 2102,
	-1, 806,
	82, 2082,
	-2, 2110,
	-1, 807,
	82, 2083,
	-2, 2090,
	-1, 808,
	82, 2084,
	-2, 2099,
	-1, 809,
	82, 2085,
	-2, 2111,
	-1, 810,
	82, 2086,
	-2, 2112,
	-1, 811,
	82, 2087,
	-2, 2117,
	-1, 812,
	82, 2088,
	-2, 2122,
	-1, 813,
	82, 2089,
	-2, 2123,
	-1, 814,
	82, 1558,
	-2, 1962,
	-1, 815,
	82, 1559,
	-2, 1759,
	-1, 816,
	82, 1560,
	-2, 1971,
	-1, 817,
	82, 1561,
	-2, 1768,
	-1, 819,
	82, 1564,
	-2, 1776,
	-1, 820,
	82, 1565,
	-2, 1995,
	-1, 822,
	82, 1568,
	-2, 1795,
	-1, 824,
	82, 1570,
	-2, 2007,
	-1, 825,
	82, 1571,
	-2, 2006,
	-1, 826,
	82, 1572,
	-2, 1839,
	-1, 827,
	82, 1573,
	-2, 1920,
	-1, 830,
	82, 1576,
	-2, 2018,
	-1, 832,
	82, 1578,
	-2, 2021,
	-1, 833,
	82, 1579,
	-2, 2023,
	-1, 834,
	82, 1582,
	-2, 2031,
	-1, 835,
	82, 1583,
	-2, 1905,
	-1, 836,
	82, 1584,
	-2, 1950,
	-1, 837,
	82, 1585,
	-2, 1915,
	-1, 838,
	82, 1586,
	-2, 1940,
	-1, 849,
	82, 1467,
	-2, 2113,
	-1, 850,
	82, 1468,
	-2, 2114,
	-1, 851,
	82, 1469,
	-2, 2115,
	-1, 938,
	458, 583,
	459, 583,
	-2, 549,
	-1, 985,
	124, 1759,
	135, 1759,
	155, 1759,
	-2, 1733,
	-1, 1100,
	22, 750,
	-2, 699,
	-1, 1206,
	11, 723,
	22, 723,
	-2, 1347,
	-1, 1288,
	22, 750,
	-2, 699,
	-1, 1611,
	82, 1633,
	-2, 1922,
	-1, 1612,
	82, 1634,
	-2, 1923,
	-1, 1766,
	83, 900,
	-2, 906,
	-1, 2192,
	107, 1056,
	151, 1056,
	190, 1056,
	193, 1056,
	280, 1056,
	-2, 1049,
	-1, 2338,
	11, 723,
	22, 723,
	-2, 843,
	-1, 2370,
	83, 1719,
	156, 1719,
	-2, 1907,
	-1, 2371,
	83, 1719,
	156, 1719,
	-2, 1906,
	-1, 2372,
	83, 1695,
	156, 1695,
	-2, 1893,
	-1, 2373,
	83, 1696,
	156, 1696,
	-2, 1898,
	-1, 2374,
	83, 1697,
	156, 1697,
	-2, 1827,
	-1, 2375,
	83, 1698,
	156, 1698,
	-2, 1821,
	-1, 2376,
	83, 1699,
	156, 1699,
	-2, 1749,
	-1, 2377,
	83, 1700,
	156, 1700,
	-2, 1895,
	-1, 2378,
	83, 1701,
	156, 1701,
	-2, 1825,
	-1, 2379,
	83, 1702,
	156, 1702,
	-2, 1820,
	-1, 2380,
	83, 1703,
	156, 1703,
	-2, 1809,
	-1, 2381,
	83, 1719,
	156, 1719,
	-2, 1810,
	-1, 2382,
	83, 1719,
	156, 1719,
	-2, 1811,
	-1, 2384,
	83, 1708,
	156, 1708,
	-2, 1940,
	-1, 2385,
	83, 1686,
	156, 1686,
	-2, 1925,
	-1, 2386,
	83, 1717,
	156, 1717,
	-2, 1896,
	-1, 2387,
	83, 1717,
	156, 1717,
	-2, 1924,
	-1, 2388,
	83, 1717,
	156, 1717,
	-2, 1777,
	-1, 2389,
	83, 1715,
	156, 1715,
	-2, 1915,
	-1, 2390,
	83, 1712,
	156, 1712,
	-2, 1800,
	-1, 2391,
	82, 1667,
	83, 1667,
	156, 1667,
	393, 1667,
	394, 1667,
	395, 1667,
	-2, 1748,
	-1, 2392,
	82, 1668,
	83, 1668,
	156, 1668,
	393, 1668,
	394, 1668,
	395, 1668,
	-2, 1750,
	-1, 2393,
	82, 1669,
	83, 1669,
	156, 1669,
	393, 1669,
	394, 1669,
	395, 1669,
	-2, 1967,
	-1, 2394,
	82, 1671,
	83, 1671,
	156, 1671,
	393, 1671,
	394, 1671,
	395, 1671,
	-2, 1897,
	-1, 2395,
	82, 1673,
	83, 1673,
	156, 1673,
	393, 1673,
	394, 1673,
	395, 1673,
	-2, 1879,
	-1, 2396,
	82, 1675,
	83, 1675,
	156, 1675,
	393, 1675,
	394, 1675,
	395, 1675,
	-2, 1826,
	-1, 2397,
	82, 1677,
	83, 1677,
	156, 1677,
	393, 1677,
	394, 1677,
	395, 1677,
	-2, 1805,
	-1, 2398,
	82, 1678,
	83, 1678,
	156, 1678,
	393, 1678,
	394, 1678,
	395, 1678,
	-2, 1806,
	-1, 2399,
	82, 1680,
	83, 1680,
	156, 1680,
	393, 1680,
	394, 1680,
	395, 1680,
	-2, 1747,
	-1, 2400,
	83, 1722,
	156, 1722,
	393, 1722,
	394, 1722,
	395, 1722,
	-2, 1782,
	-1, 2401,
	83, 1722,
	156, 1722,
	393, 1722,
	394, 1722,
	395, 1722,
	-2, 1796,
	-1, 2402,
	83, 1725,
	156, 1725,
	393, 1725,
	394, 1725,
	395, 1725,
	-2, 1778,
	-1, 2403,
	83, 1725,
	156, 1725,
	393, 1725,
	394, 1725,
	395, 1725,
	-2, 1842,
	-1, 2404,
	83, 1722,
	156, 1722,
	393, 1722,
	394, 1722,
	395, 1722,
	-2, 1863,
	-1, 2600,
	107, 1056,
	151, 1056,
	190, 1056,
	193, 1056,
	280, 1056,
	-2, 1050,
	-1, 2617,
	80, 643,
	156, 643,
	-2, 1230,
	-1, 3006,
	193, 1056,
	304, 1315,
	-2, 1287,
	-1, 3162,
	107, 1056,
	151, 1056,
	190, 1056,
	193, 1056,
	-2, 1173,
	-1, 3164,
	107, 1056,
	151, 1056,
	190, 1056,
	193, 1056,
	-2, 1173,
	-1, 3176,
	80, 643,
	156, 643,
	-2, 1231,
	-1, 3197,
	193, 1056,
	304, 1315,
	-2, 1288,
	-1, 3332,
	107, 1056,
	151, 1056,
	190, 1056,
	193, 1056,
	-2, 1174,
	-1, 3358,
	83, 1135,
	156, 1135,
	-2, 1056,
	-1, 3486,
	83, 1135,
	156, 1135,
	-2, 1056,
	-1, 3632,
	83, 1139,
	156, 1139,
	-2, 1056,
	-1, 3679,
	83, 1140,
	156, 1140,
	-2, 1056,
}

const yyPrivate = 57344

const yyLast = 47816

var yyAct = [...]int{
	730, 707, 3725, 732, 3699, 2646, 197, 3718, 1851, 3636,
	3642, 3182, 3539, 1591, 3275, 3025, 3643, 3635, 3486, 2992,
	716, 3524, 3595, 3386, 3092, 3565, 3211, 1433, 3464, 2456,
	2640, 3518, 1241, 3093, 3485, 1371, 709, 3319, 3543, 3320,
	3317, 600, 3414, 760, 2643, 3279, 3455, 1510, 984, 3525,
	1101, 3270, 3527, 617, 1377, 623, 623, 1799, 2236, 3149,
	1587, 623, 640, 649, 3339, 1638, 649, 3001, 3329, 2964,
	2620, 1594, 3301, 3165, 3198, 2927, 3090, 2753, 2752, 2754,
	2953, 1939, 3334, 2736, 1942, 2670, 3021, 3138, 3167, 3010,
	3003, 2746, 1652, 2491, 2815, 2366, 2051, 2332, 3078, 58,
	1915, 1907, 37, 2775, 2239, 3058, 182, 2749, 2937, 654,
	2012, 2589, 2932, 2203, 2934, 2930, 2929, 660, 2973, 699,
	1957, 2928, 3009, 2171, 2316, 2160, 1426, 1092, 2859, 2047,
	2035, 2601, 121, 704, 2649, 2438, 2925, 2788, 2021, 1744,
	2020, 2420, 2798, 2013, 2159, 913, 1506, 1985, 1910, 1514,
	1908, 2321, 2578, 36, 2573, 622, 622, 1511, 2672, 1499,
	1342, 630, 2651, 1841, 646, 1935, 2237, 2612, 2046, 193,
	8, 600, 1311, 192, 7, 2368, 6, 2333, 1830, 2202,
	2364, 1775, 1041, 1585, 708, 2048, 1473, 1442, 1540, 616,
	2058, 1412, 2081, 2232, 745, 122, 2183, 197, 1645, 197,
	122, 1032, 1033, 698, 1576, 2524, 717, 1625, 623, 1114,
	2019, 1811, 2016, 1348, 2001, 1525, 947, 1975, 1480, 1810,
	977, 27, 1411, 705, 16, 2340, 1774, 912, 14, 1584,
	1409, 15, 1465, 1653, 2523, 662, 1356, 1344, 635, 663,
	1360, 632, 24, 17, 33, 23, 853, 1372, 1687, 10,
	1590, 173, 183, 629, 1472, 889, 122, 179, 910, 648,
	933, 895, 1286, 706, 1242, 659, 1174, 1175, 1176, 1173,
	1174, 1175, 1176, 1173, 993, 2055, 1174, 1175, 1176, 1173,
	3449, 2559, 2559, 645, 2559, 1029, 641, 2342, 3179, 2980,
	643, 2065, 1096, 644, 3152, 3085, 2479, 2426, 2424, 2423,
	978, 2025, 1380, 1028, 2421, 1030, 642, 990, 630, 1757,
	628, 1487, 1483, 1024, 1025, 1025, 181, 618, 1522, 855,
	856, 2158, 1305, 2909, 2906, 652, 1381, 1025, 992, 2911,
	2908, 3710, 1394, 2551, 2549, 3201, 619, 1751, 1301, 1485,
	3268, 599, 1174, 1175, 1176, 1173, 1174, 1175, 1176, 1173,
	2811, 8, 2809, 1990, 3421, 7, 3415, 3271, 1023, 3091,
	1096, 2032, 3529, 2015, 1236, 854, 2886, 2007, 180, 991,
	2277, 865, 180, 3213, 2553, 3471, 122, 1136, 1306, 3302,
	2465, 180, 54, 169, 143, 2052, 3204, 3166, 180, 3617,
	2607, 122, 624, 122, 1521, 180, 180, 3199, 180, 2194,
	180, 180, 3221, 3222, 180, 54, 169, 143, 3200, 1520,
	3306, 2473, 3439, 3576, 1529, 1452, 1538, 1451, 1450, 3472,
	2831, 180, 54, 169, 143, 996, 180, 54, 169, 143,
	658, 994, 180, 54, 169, 143, 2823, 2605, 700, 1307,
	995, 174, 1317, 120, 1526, 3205, 1535, 2884, 120, 2063,
	174, 1334, 2187, 2358, 1171, 1390, 1561, 174, 1391, 3441,
	1144, 2782, 2783, 1146, 174, 1528, 2359, 1537, 1549, 174,
	174, 2781, 844, 174, 843, 845, 846, 1919, 847, 848,
	866, 1413, 1952, 1415, 903, 1112, 904, 2608, 1920, 1921,
	174, 1147, 2575, 988, 989, 174, 1109, 2346, 1368, 2439,
	2345, 174, 2576, 2347, 2910, 2907, 1758, 1759, 1376, 1378,
	1379, 1825, 1375, 1378, 1379, 3646, 3647, 956, 3292, 1164,
	1593, 1169, 884, 987, 986, 3532, 3608, 1577, 3532, 700,
	1581, 3531, 3607, 3531, 1151, 3530, 898, 1152, 894, 3220,
	2147, 2240, 3610, 2996, 1393, 3530, 3606, 3667, 3614, 3703,
	3704, 2574, 3516, 2816, 1580, 3519, 3520, 3521, 3522, 3094,
	3597, 2067, 3600, 3597, 1597, 1154, 3209, 2994, 2817, 3418,
	2818, 1140, 3094, 1316, 2460, 1106, 3536, 1117, 3139, 1936,
	2554, 3107, 2059, 1486, 1484, 2946, 3146, 2691, 3206, 3210,
	3208, 3207, 2310, 1926, 876, 3311, 1142, 1930, 142, 1572,
	178, 2182, 1998, 1493, 1492, 901, 2938, 1673, 1145, 1148,
	2565, 1167, 1168, 3223, 1139, 2470, 1117, 3612, 2847, 3443,
	167, 623, 623, 166, 2269, 1166, 3215, 3216, 2275, 3619,
	3620, 2948, 623, 1105, 1141, 3269, 2810, 2581, 1582, 2740,
	2943, 2944, 3615, 3616, 3446, 1149, 2313, 2849, 2312, 2317,
	694, 649, 649, 696, 623, 3291, 2945, 3308, 695, 1161,
	2563, 1579, 615, 3293, 3238, 900, 3024, 893, 3674, 3645,
	3022, 3023, 2962, 3223, 2974, 2998, 897, 896, 2942, 3558,
	1596, 1595, 3235, 2255, 2613, 3202, 3553, 3476, 2745, 2235,
	2258, 3214, 2552, 878, 651, 1366, 2564, 885, 3468, 650,
	2189, 3535, 2064, 2645, 3183, 3544, 1392, 966, 1150, 1403,
	3228, 1143, 1603, 1606, 1607, 3560, 1214, 892, 3566, 2993,
	3190, 622, 1095, 1604, 1355, 3239, 1318, 3377, 1304, 2361,
	1162, 1163, 1103, 1950, 1951, 3736, 902, 2287, 993, 646,
	646, 891, 2070, 2072, 2073, 890, 2286, 2257, 3282, 1122,
	2587, 877, 1098, 1422, 1127, 883, 2720, 3448, 3110, 2853,
	2053, 2558, 1105, 2053, 3027, 2025, 1097, 1104, 2053, 1097,
	1669, 990, 1119, 1118, 1035, 1131, 1666, 881, 1578, 3366,
	1668, 1665, 1667, 1671, 1672, 1153, 2307, 2308, 1670, 2830,
	2256, 2940, 992, 2086, 2641, 2642, 1421, 2645, 1245, 2026,
	3372, 1370, 1369, 1353, 3433, 1025, 3434, 1025, 1025, 1129,
	993, 1119, 1118, 1025, 901, 1352, 3470, 1351, 3456, 3567,
	3168, 3219, 1025, 1025, 2054, 647, 2235, 3266, 903, 3002,
	904, 122, 122, 991, 3097, 2066, 3618, 1097, 1111, 1093,
	882, 2422, 647, 990, 3477, 1488, 3634, 647, 2905, 2278,
	3490, 962, 960, 647, 961, 3469, 3721, 3594, 645, 645,
	3436, 641, 641, 1312, 992, 643, 643, 658, 644, 644,
	2252, 1410, 2793, 2794, 3018, 1108, 1110, 2466, 1314, 617,
	1136, 642, 642, 854, 3442, 1120, 1205, 55, 2550, 2350,
	2273, 3435, 1100, 2056, 144, 1128, 1246, 3218, 144, 175,
	176, 2999, 177, 1284, 55, 1206, 1289, 144, 1326, 55,
	1124, 1125, 913, 1937, 144, 55, 2939, 899, 1367, 1378,
	1379, 144, 144, 1130, 144, 1215, 144, 144, 3307, 2474,
	144, 3444, 1676, 1677, 1678, 1679, 1680, 1681, 1674, 1675,
	967, 2242, 2949, 1378, 1379, 2245, 2580, 144, 1099, 989,
	2852, 3611, 144, 1605, 3132, 3026, 888, 1094, 144, 2850,
	3312, 1156, 963, 623, 1157, 1405, 1135, 2692, 1374, 2693,
	2694, 600, 600, 3022, 3023, 1210, 1211, 1212, 1213, 3489,
	600, 600, 1927, 2071, 1437, 1437, 1929, 623, 1573, 1332,
	2941, 2082, 1159, 3722, 701, 3387, 3388, 3389, 3393, 3391,
	3392, 3390, 2584, 2585, 2721, 2723, 2724, 2725, 2722, 649,
	1466, 617, 1439, 1319, 1331, 1476, 1476, 2583, 2593, 2596,
	2597, 2598, 2594, 2595, 3633, 965, 197, 3368, 1330, 1208,
	957, 3367, 3373, 3374, 1329, 600, 653, 1257, 1258, 1444,
	2777, 2779, 3019, 3379, 1435, 1435, 957, 907, 908, 909,
	2689, 1291, 2068, 2069, 1321, 1322, 1323, 1324, 1325, 905,
	1327, 957, 3098, 1401, 2861, 2860, 1333, 3433, 1315, 3434,
	1339, 2561, 1155, 2163, 2960, 872, 2246, 2251, 2241, 1310,
	902, 2249, 1761, 2243, 1762, 3428, 1518, 1443, 1494, 1760,
	2272, 1523, 2162, 2242, 2245, 2711, 2712, 1532, 1016, 1021,
	1022, 868, 964, 2165, 2164, 1308, 1309, 2299, 1431, 1432,
	1160, 3429, 869, 959, 1290, 3526, 958, 3340, 1288, 1554,
	1555, 2979, 1559, 3436, 3719, 3720, 871, 3737, 2174, 959,
	874, 873, 958, 2185, 3604, 1158, 1437, 2244, 1437, 1105,
	3732, 1349, 1320, 2618, 959, 2116, 1172, 958, 2115, 1978,
	1539, 2175, 2176, 1347, 3435, 3727, 1349, 3055, 1136, 1354,
	2441, 3051, 3135, 2242, 2245, 3716, 1364, 1362, 1363, 3109,
	1341, 3681, 1574, 1133, 1383, 1384, 1404, 1386, 1387, 2152,
	1388, 2465, 3654, 3648, 1446, 3031, 1395, 1396, 629, 1026,
	1027, 2330, 993, 3029, 1031, 1527, 1382, 2619, 993, 1385,
	1467, 1536, 1497, 2961, 1500, 1501, 1437, 2778, 1102, 1508,
	1509, 1558, 1420, 2061, 646, 1502, 1503, 2915, 2710, 1557,
	122, 1172, 1531, 1651, 2913, 2246, 1568, 2331, 3728, 968,
	2241, 2235, 2240, 1516, 2238, 2243, 3630, 1700, 3682, 1513,
	1102, 3586, 1517, 3020, 3682, 628, 2230, 1445, 2184, 1134,
	1134, 1357, 1361, 1361, 1361, 3655, 3452, 3561, 1458, 3549,
	2796, 1174, 1175, 1176, 1173, 3509, 1639, 1589, 1464, 2567,
	1477, 1417, 1419, 1592, 3508, 2555, 1357, 1357, 1478, 2331,
	1429, 1430, 2619, 858, 859, 860, 861, 122, 1976, 2244,
	1018, 1019, 1020, 122, 3055, 2246, 1174, 1175, 1176, 1173,
	2241, 2235, 2240, 1105, 2238, 2243, 122, 2882, 3503, 3631,
	3502, 1570, 1763, 1608, 3452, 2455, 2331, 1466, 122, 2446,
	1742, 1685, 1772, 1437, 1777, 1778, 3501, 1780, 1781, 623,
	2061, 2361, 3550, 645, 623, 1489, 641, 1437, 3510, 2052,
	643, 913, 2092, 644, 1800, 1567, 1575, 2207, 1564, 1542,
	1548, 1437, 1563, 1172, 1918, 1547, 642, 1405, 1550, 2244,
	1448, 2218, 640, 3500, 2228, 3480, 1566, 1565, 3479, 3451,
	1583, 3244, 1745, 1562, 3429, 1699, 1588, 2157, 3430, 3192,
	3158, 3452, 1824, 3452, 3125, 1285, 1586, 858, 859, 860,
	861, 1831, 1831, 2151, 1405, 3121, 1405, 1405, 2150, 3452,
	623, 623, 2123, 1899, 1899, 3039, 1627, 1437, 1904, 1905,
	1917, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621,
	1622, 1623, 1624, 2772, 600, 2530, 1437, 1636, 1637, 1782,
	2043, 863, 1948, 2522, 1787, 2481, 3452, 1753, 2061, 1340,
	1828, 2061, 3452, 1779, 2361, 1642, 1423, 3744, 1174, 1175,
	1176, 1173, 3193, 3159, 623, 1899, 1437, 3126, 1962, 3729,
	623, 623, 623, 1967, 1968, 1634, 1635, 3145, 3122, 2463,
	1972, 1973, 1974, 3179, 2451, 1709, 1980, 1748, 3040, 2800,
	1953, 1898, 1900, 197, 1853, 1136, 197, 197, 2621, 197,
	1768, 1769, 1770, 1714, 2217, 1189, 2331, 3403, 1172, 2468,
	1837, 1838, 1783, 1784, 1785, 1786, 1172, 3242, 1172, 1715,
	1716, 1717, 1718, 1945, 1946, 1722, 1723, 1724, 1725, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1700,
	1700, 2023, 1743, 1959, 2467, 863, 1205, 1749, 1700, 1700,
	1931, 2448, 2207, 2459, 1923, 2037, 1925, 2444, 2223, 1767,
	1690, 1691, 1692, 2443, 1958, 1938, 1943, 1944, 1801, 2111,
	1958, 1958, 1958, 1706, 2096, 1833, 1707, 2435, 1797, 1796,
	1832, 2042, 1800, 1776, 1961, 2031, 1437, 2050, 1816, 2433,
	1964, 1965, 1966, 1720, 1721, 2431, 2429, 1792, 1807, 1989,
	1808, 1809, 1992, 1993, 1823, 1995, 2206, 1826, 1827, 1983,
	1970, 1805, 1741, 1813, 1916, 1834, 1817, 1818, 1819, 1802,
	1803, 2153, 1544, 2130, 2449, 1835, 1836, 2129, 1822, 1222,
	2114, 1682, 1683, 2105, 1686, 1947, 2444, 1829, 993, 2044,
	2104, 993, 1701, 1903, 1527, 1906, 2103, 993, 2060, 1922,
	2436, 1924, 2095, 1551, 1932, 1708, 2027, 1710, 1121, 1711,
	1712, 1713, 2434, 1090, 646, 1012, 1085, 1776, 2430, 2430,
	2984, 990, 2844, 1812, 657, 1814, 1815, 2018, 2975, 2207,
	990, 3554, 1174, 1175, 1176, 1173, 2018, 122, 1357, 1821,
	122, 122, 992, 122, 2152, 1960, 1172, 3738, 1389, 870,
	1172, 992, 1361, 1172, 1358, 1984, 1172, 1177, 1986, 1689,
	1688, 1689, 1688, 1172, 1361, 1207, 1586, 3707, 3341, 1172,
	2270, 2061, 3450, 1345, 1217, 3555, 1552, 1346, 2094, 3171,
	2003, 3169, 3425, 991, 3370, 1425, 122, 1013, 993, 1427,
	3369, 2033, 991, 1192, 1193, 1194, 1195, 1196, 1189, 1225,
	1428, 733, 743, 3355, 3313, 2976, 122, 2024, 3151, 2030,
	2028, 734, 3342, 735, 739, 742, 738, 736, 737, 3056,
	3049, 990, 2041, 3172, 3044, 3170, 699, 3041, 2955, 623,
	623, 623, 2742, 645, 2591, 2560, 641, 2421, 2478, 2045,
	643, 2447, 992, 644, 623, 623, 623, 623, 1345, 2977,
	2040, 1987, 1346, 3083, 2352, 2039, 642, 2204, 1007, 1002,
	997, 1001, 1005, 1336, 1633, 1335, 740, 2210, 1405, 1107,
	1726, 1359, 1719, 2488, 2415, 1646, 2074, 2089, 875, 2802,
	1630, 1632, 1629, 1206, 1631, 1424, 1010, 1481, 2083, 1987,
	1000, 1646, 1764, 3382, 1405, 3605, 1627, 2076, 741, 1174,
	1175, 1176, 1173, 2088, 1174, 1175, 1176, 1173, 1176, 1173,
	3086, 2264, 1173, 3381, 2819, 2425, 2079, 2080, 1187, 1197,
	1198, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1189, 2178,
	2179, 2180, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1189,
	2681, 1008, 2679, 2657, 2195, 2196, 2197, 2198, 1011, 2499,
	1174, 1175, 1176, 1173, 2077, 2078, 2655, 3361, 1224, 3084,
	3314, 3315, 2271, 1174, 1175, 1176, 1173, 2543, 3309, 2544,
	998, 1223, 2490, 2335, 2335, 1917, 2335, 1084, 1080, 1081,
	1082, 1083, 3712, 2504, 1704, 2503, 2502, 2500, 1174, 1175,
	1176, 1173, 2875, 1009, 600, 600, 3735, 2417, 2154, 1705,
	3711, 3658, 1105, 2146, 2148, 2149, 3143, 2075, 1437, 623,
	1197, 1198, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1189,
	2234, 2233, 3629, 3628, 623, 3310, 3556, 2186, 3505, 2168,
	1105, 2405, 617, 999, 3493, 3483, 3473, 1476, 1245, 1917,
	3416, 2732, 2410, 3344, 2412, 3343, 3184, 3173, 197, 3142,
	2947, 2874, 2501, 1174, 1175, 1176, 1173, 2863, 3734, 2227,
	2840, 2730, 1482, 3144, 2728, 2348, 2717, 2349, 2356, 1475,
	1475, 2337, 2107, 2341, 993, 2814, 2339, 2813, 1174, 1175,
	1176, 1173, 2212, 2213, 2715, 2353, 2354, 2211, 1174, 1175,
	1176, 1173, 2215, 2216, 2124, 2125, 1481, 2127, 2731, 2247,
	2248, 2714, 2253, 2461, 2134, 2224, 2050, 990, 2713, 1443,
	1006, 2705, 2699, 1437, 2698, 1437, 2697, 1437, 2729, 2219,
	3150, 2727, 1105, 2716, 1958, 2457, 2458, 2696, 992, 2222,
	2480, 2556, 1174, 1175, 1176, 1173, 1246, 2437, 2106, 2156,
	2409, 2006, 2093, 2005, 2363, 2004, 1003, 2000, 1999, 1004,
	1956, 1955, 1533, 2590, 2416, 1954, 1437, 2508, 1545, 1303,
	2314, 2747, 2933, 3731, 2369, 1174, 1175, 1176, 1173, 2338,
	2343, 2514, 2515, 3730, 3276, 2471, 694, 1437, 3705, 696,
	2214, 3673, 3672, 2507, 695, 2220, 3669, 1088, 2221, 3538,
	2505, 2506, 1174, 1175, 1176, 1173, 2357, 3318, 1174, 1175,
	1176, 1173, 2360, 3523, 2516, 1180, 1181, 1182, 1183, 1184,
	1185, 1186, 1178, 3514, 3497, 1361, 1435, 1174, 1175, 1176,
	1173, 2406, 3492, 2408, 3491, 3447, 3445, 1598, 1599, 1600,
	1601, 1602, 3417, 1916, 1105, 2519, 2520, 1435, 1105, 3363,
	3325, 3296, 122, 1087, 3295, 1437, 3274, 2496, 2588, 2407,
	2099, 3272, 3251, 3248, 1899, 3246, 2475, 2737, 2414, 3141,
	3140, 3137, 2617, 3118, 1174, 1175, 1176, 1173, 2623, 1643,
	3116, 2477, 3050, 1647, 1648, 1649, 1650, 3639, 2486, 3046,
	2453, 3037, 1684, 3036, 2633, 2472, 2956, 2920, 2462, 2919,
	1694, 2464, 2917, 1105, 1417, 1419, 2469, 2547, 2161, 2854,
	2851, 2654, 2812, 2786, 1174, 1175, 1176, 1173, 1105, 1105,
	1105, 1831, 2726, 2718, 1105, 2708, 2665, 2666, 2667, 2668,
	1105, 2675, 2706, 2676, 2677, 2702, 2678, 2492, 2680, 2492,
	2482, 2483, 2603, 2701, 2700, 2602, 2557, 2498, 2454, 2675,
	800, 799, 1746, 1174, 1175, 1176, 1173, 3542, 2009, 2002,
	1756, 2335, 2647, 1755, 1546, 993, 2091, 1253, 2606, 1249,
	1248, 1091, 2615, 1586, 867, 2733, 3573, 3569, 2568, 3438,
	3437, 1853, 2369, 600, 1174, 1175, 1176, 1173, 1899, 1105,
	1917, 1917, 1917, 1917, 3426, 3298, 180, 2624, 169, 143,
	3283, 1105, 1917, 3164, 3163, 2335, 3162, 3134, 3130, 2570,
	3128, 2572, 2517, 2652, 1804, 3127, 2485, 2652, 3124, 3123,
	3117, 1437, 3115, 3099, 2648, 3089, 3088, 3074, 2569, 3073,
	2985, 2923, 623, 623, 2525, 2526, 2586, 2912, 1820, 2659,
	2531, 1174, 1175, 1176, 1173, 8, 2614, 2880, 2873, 7,
	2865, 2616, 2622, 2660, 2661, 2864, 3297, 2858, 2664, 2795,
	122, 2566, 2637, 2634, 2671, 174, 3687, 2432, 2428, 2427,
	122, 2135, 2635, 2650, 2128, 2656, 2122, 2121, 2768, 2120,
	2119, 3285, 2653, 1174, 1175, 1176, 1173, 2117, 197, 2113,
	2112, 1746, 2110, 197, 2101, 2098, 1746, 1746, 2626, 2663,
	2097, 2008, 1739, 2629, 1738, 1776, 1737, 2695, 1174, 1175,
	1176, 1173, 1703, 1702, 1693, 1700, 1449, 1700, 1447, 2625,
	2829, 180, 3657, 2755, 1243, 3568, 3511, 3499, 2630, 2631,
	2839, 3494, 2790, 2791, 2738, 2755, 1437, 2743, 2707, 2846,
	2756, 2757, 2758, 2759, 1496, 3397, 1988, 3380, 3376, 1991,
	2769, 2767, 1994, 2276, 3354, 1996, 2279, 2280, 2281, 2282,
	2283, 2284, 2285, 2770, 3338, 2288, 2289, 2290, 2291, 2292,
	2293, 2294, 2295, 2296, 2297, 2298, 3259, 2300, 2301, 2302,
	2303, 2304, 2771, 2305, 1916, 1916, 1916, 1916, 2787, 2784,
	174, 3257, 3230, 3229, 2803, 2632, 1916, 1745, 3226, 2807,
	3225, 1501, 2828, 3191, 1508, 1509, 3188, 3186, 2036, 3153,
	1507, 1502, 1503, 993, 1498, 2797, 2824, 3284, 1512, 1515,
	2868, 993, 2870, 1516, 2832, 1504, 2826, 2801, 1343, 1513,
	2734, 2805, 1517, 2833, 2658, 2918, 2804, 2610, 2609, 2848,
	3232, 2604, 1105, 2571, 1174, 1175, 1176, 1173, 2936, 2542,
	2442, 2351, 2822, 2825, 2843, 2820, 2836, 2827, 2951, 2306,
	2835, 2834, 2205, 623, 2177, 2842, 2155, 1174, 1175, 1176,
	1173, 1628, 174, 1969, 1766, 2965, 1105, 1752, 1571, 623,
	1105, 1105, 122, 2741, 3685, 3113, 1530, 122, 2856, 1917,
	2204, 1505, 2983, 2862, 2855, 1399, 1400, 1302, 1402, 1287,
	1406, 1407, 1408, 1283, 2871, 2872, 1282, 2085, 122, 1281,
	2264, 2090, 1174, 1175, 1176, 1173, 122, 1280, 2914, 1279,
	2869, 2959, 3008, 1278, 3011, 1277, 3011, 3011, 1276, 2866,
	2867, 1105, 1453, 1454, 1455, 1456, 1457, 1275, 1459, 1460,
	1461, 1462, 1463, 1274, 1273, 1272, 1469, 1470, 1471, 1271,
	3032, 1270, 2102, 2602, 3028, 2916, 1269, 1268, 1437, 1437,
	2109, 2921, 1267, 2957, 1266, 1265, 2995, 2997, 1264, 1263,
	1262, 3030, 1261, 1260, 1259, 993, 1256, 993, 1255, 2969,
	2968, 993, 2126, 2952, 2972, 3033, 3034, 2131, 2132, 2133,
	2981, 1254, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143,
	2144, 2145, 2958, 2982, 1252, 623, 993, 2780, 990, 2991,
	2936, 3007, 2967, 2978, 2922, 1251, 2970, 2971, 1435, 1435,
	3016, 1899, 1899, 2990, 2234, 2233, 2887, 2888, 1250, 992,
	1247, 1240, 2889, 2890, 2891, 2892, 1239, 2893, 2894, 2895,
	2896, 2897, 2898, 2899, 2900, 2901, 2902, 2318, 3012, 3013,
	1237, 1236, 3017, 1235, 1188, 1187, 1197, 1198, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1189, 1234, 1105, 3585, 2878,
	991, 2508, 122, 2118, 1233, 1232, 122, 2577, 1231, 1230,
	3087, 1229, 1228, 1916, 2323, 2326, 2327, 2328, 2324, 2877,
	2325, 2329, 1227, 1226, 1221, 3006, 1174, 1175, 1176, 1173,
	3014, 122, 3644, 2876, 1220, 1958, 1219, 1218, 1138, 2986,
	1089, 3059, 3060, 3583, 2987, 2988, 1174, 1175, 1176, 1173,
	3581, 3042, 3047, 623, 3043, 3038, 3048, 3579, 3052, 3053,
	1174, 1175, 1176, 1173, 3063, 3227, 2209, 2191, 3045, 1126,
	2989, 3062, 2592, 2362, 2541, 2764, 2011, 1137, 3067, 2540,
	2765, 3065, 3070, 3071, 3072, 2762, 2539, 3064, 2761, 2760,
	2763, 3359, 3076, 2452, 2538, 1337, 2687, 2688, 2537, 2445,
	3082, 1174, 1175, 1176, 1173, 107, 1174, 1175, 1176, 1173,
	57, 2703, 2704, 1174, 1175, 1176, 1173, 2536, 1746, 2954,
	1746, 1174, 1175, 1176, 1173, 1174, 1175, 1176, 1173, 2838,
	3102, 2369, 1794, 1795, 3100, 2739, 3103, 3104, 1746, 1746,
	3106, 2274, 3101, 56, 1174, 1175, 1176, 1173, 2535, 2766,
	3261, 2327, 2328, 3108, 3119, 3237, 3077, 3111, 3262, 3105,
	1789, 1790, 1791, 3157, 625, 2683, 1200, 3054, 1204, 626,
	1890, 1475, 2684, 2685, 2686, 1174, 1175, 1176, 1173, 2335,
	1917, 3176, 3066, 2534, 1201, 1203, 1199, 1490, 1202, 1188,
	1187, 1197, 1198, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
	1189, 2440, 627, 3194, 2457, 2458, 1105, 3260, 3131, 2476,
	1174, 1175, 1176, 1173, 3004, 3008, 3005, 1541, 2533, 1105,
	2450, 1524, 2167, 1971, 993, 1132, 2931, 3133, 2924, 2636,
	1105, 993, 3241, 2611, 3136, 2226, 1437, 2200, 1165, 2492,
	2532, 1798, 1765, 3696, 3148, 1174, 1175, 1176, 1173, 1689,
	1688, 3496, 1899, 3035, 3178, 2315, 1105, 1298, 1299, 1296,
	1297, 1294, 1295, 3243, 2311, 3224, 1902, 1174, 1175, 1176,
	1173, 2323, 2326, 2327, 2328, 2324, 3174, 2325, 2329, 3181,
	1398, 3175, 2529, 1397, 2489, 197, 3069, 2495, 2789, 3217,
	1292, 1293, 2166, 2038, 2509, 2510, 1435, 1350, 1105, 1328,
	1373, 3664, 2512, 2513, 3231, 3253, 3236, 3662, 3233, 1174,
	1175, 1176, 1173, 3622, 3263, 3240, 3602, 3601, 2518, 122,
	3599, 2528, 3545, 1963, 3245, 3512, 122, 3249, 3411, 3250,
	3252, 3247, 3410, 3349, 3273, 3254, 1105, 3120, 2527, 3096,
	3195, 3255, 3095, 3080, 2259, 2229, 1598, 1746, 1174, 1175,
	1176, 1173, 3079, 3234, 1105, 1437, 1437, 3281, 1543, 2799,
	2965, 1349, 3689, 3688, 2671, 1174, 1175, 1176, 1173, 2841,
	3688, 3333, 2193, 3333, 1916, 3277, 2100, 1123, 3689, 3278,
	3378, 3075, 3323, 1102, 184, 3, 1365, 1105, 3348, 1105,
	2755, 3267, 65, 2, 3708, 3177, 3709, 3327, 3328, 1,
	3351, 2548, 3353, 3180, 1750, 1300, 1437, 862, 3303, 3305,
	2521, 3304, 2627, 2628, 2511, 1435, 1639, 857, 3185, 1414,
	3187, 3324, 2344, 1949, 623, 1441, 1105, 1105, 1754, 3326,
	1105, 1105, 2755, 3337, 864, 3336, 3484, 1174, 1175, 1176,
	1173, 1174, 1175, 1176, 1173, 2773, 3347, 3178, 3399, 2774,
	3068, 2776, 3394, 2562, 2057, 2744, 3224, 2487, 1800, 2309,
	3408, 3357, 993, 3384, 3385, 3330, 1639, 3395, 3396, 3412,
	3413, 3364, 3360, 2181, 1771, 1641, 2950, 1338, 906, 122,
	3217, 1695, 1437, 1556, 1174, 1175, 1176, 1173, 3321, 3405,
	1188, 1187, 1197, 1198, 1190, 1191, 1192, 1193, 1194, 1195,
	1196, 1189, 1174, 1175, 1176, 1173, 1015, 1116, 3300, 3424,
	3404, 3432, 1553, 1115, 1113, 3406, 3352, 858, 859, 860,
	861, 1592, 1102, 1592, 3383, 1644, 747, 2014, 2735, 2709,
	3419, 3407, 3695, 3724, 3656, 3423, 3698, 1569, 731, 3465,
	3427, 3459, 1435, 3431, 3593, 3515, 3660, 3517, 3422, 2062,
	3286, 1170, 3287, 2821, 929, 1105, 788, 122, 758, 1238,
	3321, 3321, 1534, 2885, 3321, 3321, 2883, 3488, 3482, 3453,
	1188, 1187, 1197, 1198, 1190, 1191, 1192, 1193, 1194, 1195,
	1196, 1189, 3461, 3460, 3462, 3281, 1017, 757, 3345, 3346,
	3147, 2582, 2792, 3467, 3478, 1014, 3474, 930, 1105, 3265,
	1997, 3420, 1491, 1437, 1495, 2225, 3475, 3564, 3358, 3000,
	2644, 1519, 3559, 3189, 3350, 3356, 2806, 3290, 2808, 3288,
	3289, 664, 3495, 1928, 598, 3362, 975, 3398, 2010, 665,
	3506, 993, 2208, 3613, 3457, 3504, 3498, 1746, 886, 3294,
	3534, 2190, 1746, 887, 879, 2600, 2599, 1609, 1179, 3528,
	2036, 1626, 2903, 1105, 2904, 1216, 703, 2087, 2579, 3400,
	3212, 2785, 3513, 1435, 64, 63, 62, 3546, 1188, 1187,
	1197, 1198, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1189,
	61, 1979, 205, 3541, 749, 2857, 204, 3316, 3590, 1592,
	3537, 3700, 3540, 729, 728, 3563, 727, 726, 2881, 725,
	1105, 3548, 724, 2322, 2320, 2319, 1912, 1911, 1437, 2879,
	3557, 3588, 3591, 3578, 3580, 3582, 3584, 1977, 2963, 2674,
	2669, 3562, 1842, 1840, 2662, 2254, 122, 3592, 3571, 2261,
	1839, 3641, 3321, 3574, 3575, 3587, 3375, 3577, 2719, 3280,
	1788, 2250, 1859, 2690, 1856, 1855, 2682, 3371, 1437, 3598,
	3596, 3465, 1188, 1187, 1197, 1198, 1190, 1191, 1192, 1193,
	1194, 1195, 1196, 1189, 3365, 1887, 3463, 3632, 1435, 3332,
	3196, 3197, 3621, 3640, 3203, 3624, 3623, 2199, 1040, 3625,
	1036, 1038, 1039, 1037, 3154, 3155, 3156, 3321, 3626, 3627,
	3160, 3161, 2497, 2231, 2926, 2173, 2172, 2170, 2169, 1313,
	3533, 3609, 3299, 3649, 2367, 3650, 2365, 3651, 1435, 3652,
	1086, 3061, 3057, 3653, 3663, 2022, 3665, 3666, 2034, 3661,
	3659, 2837, 1913, 1105, 1909, 2192, 3528, 3668, 3440, 1793,
	880, 2188, 159, 50, 3321, 104, 157, 49, 93, 92,
	103, 3488, 155, 3677, 48, 189, 188, 191, 190, 187,
	2418, 3679, 3680, 3015, 3686, 3683, 3694, 3678, 3702, 3684,
	2419, 3701, 3690, 3691, 3692, 3693, 186, 1479, 185, 3603,
	3335, 852, 39, 38, 34, 3713, 13, 1105, 12, 3706,
	35, 22, 21, 180, 54, 169, 143, 1560, 3563, 3715,
	3714, 20, 3717, 26, 32, 31, 115, 3723, 3726, 114,
	30, 170, 113, 112, 111, 110, 109, 29, 162, 19,
	43, 42, 171, 41, 9, 102, 100, 28, 101, 98,
	99, 3733, 96, 94, 76, 180, 54, 169, 143, 3702,
	3740, 120, 3701, 3739, 2484, 75, 74, 89, 88, 3726,
	3741, 87, 86, 170, 85, 3745, 108, 84, 82, 83,
	162, 928, 174, 73, 171, 72, 71, 3675, 1188, 1187,
	1197, 1198, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1189,
	70, 69, 91, 120, 97, 95, 80, 676, 675, 682,
	672, 90, 81, 1174, 1175, 1176, 1173, 79, 108, 679,
	680, 2084, 681, 685, 174, 78, 666, 77, 68, 67,
	66, 141, 140, 139, 138, 137, 690, 135, 136, 134,
	133, 1592, 132, 131, 130, 1188, 1187, 1197, 1198, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1189, 129, 44, 125,
	126, 45, 127, 128, 1188, 1187, 1197, 1198, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1189, 46, 47, 151, 694,
	150, 152, 696, 154, 156, 153, 158, 695, 148, 146,
	149, 147, 1673, 3401, 145, 59, 11, 3402, 105, 18,
	3112, 125, 126, 25, 127, 128, 4, 3114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 168, 178, 0, 106, 0, 0, 0, 3129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 161, 160, 0, 0, 0, 0, 60,
	0, 917, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 168, 178, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 161, 160, 0, 0, 0,
	0, 60, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 165, 0, 667, 669, 668, 0, 0, 0,
	915, 916, 0, 0, 674, 0, 0, 0, 0, 0,
	0, 957, 0, 0, 0, 0, 678, 0, 0, 0,
	0, 172, 0, 693, 0, 1669, 0, 0, 3507, 0,
	671, 1666, 163, 164, 165, 1668, 1665, 1667, 1671, 1672,
	1746, 116, 0, 1670, 0, 166, 0, 117, 0, 0,
	0, 1746, 0, 0, 3256, 0, 0, 3258, 0, 0,
	0, 0, 0, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3264, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 3547, 1673, 166, 0, 117,
	3551, 3552, 0, 0, 959, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	0, 3572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 943, 0, 0, 0, 0, 673,
	677, 683, 918, 684, 686, 0, 118, 687, 688, 689,
	0, 0, 691, 692, 0, 0, 0, 0, 0, 53,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 920,
	0, 0, 0, 0, 0, 0, 1654, 1655, 1656, 1657,
	1658, 1659, 1660, 1661, 1662, 1663, 1664, 1676, 1677, 1678,
	1679, 1680, 1681, 1674, 1675, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 55, 144,
	0, 0, 0, 0, 51, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 942, 940, 0, 0, 0, 0, 0, 3670,
	3671, 0, 0, 175, 176, 0, 177, 0, 0, 1669,
	0, 144, 0, 0, 939, 1666, 51, 0, 0, 1668,
	1665, 1667, 1671, 1672, 0, 914, 0, 1670, 0, 0,
	0, 0, 0, 0, 0, 0, 919, 952, 0, 119,
	40, 0, 0, 0, 0, 0, 52, 0, 0, 0,
	5, 0, 0, 0, 0, 0, 123, 124, 0, 0,
	948, 0, 0, 0, 0, 0, 0, 0, 670, 0,
	0, 0, 0, 0, 0, 0, 0, 3454, 0, 0,
	0, 119, 40, 0, 0, 0, 0, 0, 52, 0,
	0, 0, 0, 0, 0, 0, 949, 953, 123, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 936, 0, 934, 938,
	956, 0, 0, 0, 935, 932, 931, 0, 937, 922,
	923, 921, 924, 925, 926, 927, 0, 954, 0, 955,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	950, 951, 0, 0, 0, 0, 0, 0, 0, 0,
	1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663,
	1664, 1676, 1677, 1678, 1679, 1680, 1681, 1674, 1675, 0,
	0, 0, 0, 0, 0, 0, 0, 946, 0, 0,
	0, 1225, 0, 945, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 941, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3570,
	0, 0, 0, 0, 0, 0, 0, 0, 765, 0,
	0, 0, 0, 0, 0, 0, 0, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	718, 0, 0, 0, 307, 944, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 756, 528, 479, 398, 351,
	546, 545, 0, 0, 823, 831, 0, 0, 0, 0,
	0, 0, 0, 3637, 0, 0, 710, 0, 0, 746,
	800, 799, 733, 743, 0, 0, 280, 203, 474, 593,
	476, 475, 734, 0, 735, 739, 742, 738, 736, 737,
	0, 815, 0, 0, 0, 0, 0, 0, 702, 714,
	0, 719, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 711, 712, 0, 0, 3637,
	0, 766, 0, 713, 0, 0, 761, 740, 744, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 741,
	764, 768, 301, 837, 762, 428, 274, 3637, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	838, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 759, 0, 590, 0, 430, 0, 0, 821, 0,
	0, 0, 402, 3743, 0, 334, 0, 0, 0, 763,
	0, 388, 369, 834, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 611, 612, 613, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 1697, 1696, 1698, 442, 335,
	336, 0, 314, 262, 263, 607, 819, 365, 556, 589,
	481, 0, 833, 814, 816, 817, 820, 824, 825, 826,
	827, 828, 830, 832, 836, 606, 0, 535, 550, 609,
	549, 603, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 835, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 767, 531, 532, 355,
	356, 357, 358, 822, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 614, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 844, 818, 843, 845, 846, 842, 847, 848,
	829, 723, 0, 774, 840, 839, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 604, 601, 413, 605, 0,
	264, 487, 338, 0, 379, 312, 552, 553, 0, 0,
	807, 781, 782, 783, 720, 784, 778, 779, 721, 780,
	808, 772, 804, 805, 748, 775, 785, 803, 786, 806,
	809, 810, 849, 850, 792, 776, 228, 851, 789, 811,
	802, 801, 787, 773, 812, 813, 755, 750, 790, 791,
	777, 795, 796, 797, 722, 769, 770, 771, 793, 794,
	751, 752, 753, 754, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 602, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 798,
	765, 608, 477, 478, 588, 0, 715, 0, 0, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 718, 0, 0, 0, 307, 1747, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 756, 528, 479,
	398, 351, 546, 545, 0, 0, 823, 831, 0, 0,
	0, 0, 0, 0, 0, 1940, 0, 0, 710, 0,
	0, 746, 800, 799, 733, 743, 0, 0, 280, 203,
	474, 593, 476, 475, 734, 0, 735, 739, 742, 738,
	736, 737, 0, 815, 0, 0, 0, 0, 0, 0,
	702, 714, 0, 719, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 711, 712, 0,
	0, 0, 0, 766, 0, 713, 0, 0, 1941, 740,
	744, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 741, 764, 768, 301, 837, 762, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 838, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 759, 0, 590, 0, 430, 0, 0,
	821, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 763, 0, 388, 369, 834, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 611, 612, 613, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 607, 819, 365,
	556, 589, 481, 0, 833, 814, 816, 817, 820, 824,
	825, 826, 827, 828, 830, 832, 836, 606, 0, 535,
	550, 609, 549, 603, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 835, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 767, 531,
	532, 355, 356, 357, 358, 822, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 614, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 844, 818, 843, 845, 846, 842,
	847, 848, 829, 723, 0, 774, 840, 839, 841, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 604, 601, 413,
	605, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 807, 781, 782, 783, 720, 784, 778, 779,
	721, 780, 808, 772, 804, 805, 748, 775, 785, 803,
	786, 806, 809, 810, 849, 850, 792, 776, 228, 851,
	789, 811, 802, 801, 787, 773, 812, 813, 755, 750,
	790, 791, 777, 795, 796, 797, 722, 769, 770, 771,
	793, 794, 751, 752, 753, 754, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 602, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 798, 0, 608, 477, 478, 588, 0, 715, 180,
	765, 0, 0, 0, 0, 0, 0, 0, 0, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 718, 0, 0, 0, 307, 0, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 1209, 528, 479,
	398, 351, 546, 545, 0, 0, 823, 831, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 710, 0,
	0, 746, 800, 799, 733, 743, 0, 0, 280, 203,
	474, 593, 476, 475, 734, 0, 735, 739, 742, 738,
	736, 737, 0, 815, 0, 0, 0, 0, 0, 0,
	702, 714, 0, 719, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 711, 712, 0,
	0, 0, 0, 766, 0, 713, 0, 0, 761, 740,
	744, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 741, 764, 768, 301, 837, 762, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 838, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 759, 0, 590, 0, 430, 0, 0,
	821, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 763, 0, 388, 369, 834, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 611, 612, 613, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 607, 819, 365,
	556, 589, 481, 0, 833, 814, 816, 817, 820, 824,
	825, 826, 827, 828, 830, 832, 836, 606, 0, 535,
	550, 609, 549, 603, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 835, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 767, 531,
	532, 355, 356, 357, 358, 822, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 614, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 844, 818, 843, 845, 846, 842,
	847, 848, 829, 723, 0, 774, 840, 839, 841, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 604, 601, 413,
	605, 0, 264, 487, 338, 144, 379, 312, 552, 553,
	0, 0, 807, 781, 782, 783, 720, 784, 778, 779,
	721, 780, 808, 772, 804, 805, 748, 775, 785, 803,
	786, 806, 809, 810, 849, 850, 792, 776, 228, 851,
	789, 811, 802, 801, 787, 773, 812, 813, 755, 750,
	790, 791, 777, 795, 796, 797, 722, 769, 770, 771,
	793, 794, 751, 752, 753, 754, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 602, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 798, 765, 608, 477, 478, 588, 0, 715, 0,
	0, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 0, 0, 718, 0, 0, 0, 307, 3742,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 756,
	528, 479, 398, 351, 546, 545, 0, 0, 823, 831,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	710, 0, 0, 746, 800, 799, 733, 743, 0, 0,
	280, 203, 474, 593, 476, 475, 734, 0, 735, 739,
	742, 738, 736, 737, 0, 815, 0, 0, 0, 0,
	0, 0, 702, 714, 0, 719, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 711,
	712, 0, 0, 0, 0, 766, 0, 713, 0, 0,
	761, 740, 744, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 741, 764, 768, 301, 837, 762, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 838, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 759, 0, 590, 0, 430,
	0, 0, 821, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 763, 0, 388, 369, 834, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 611, 612,
	613, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 607,
	819, 365, 556, 589, 481, 0, 833, 814, 816, 817,
	820, 824, 825, 826, 827, 828, 830, 832, 836, 606,
	0, 535, 550, 609, 549, 603, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	835, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	767, 531, 532, 355, 356, 357, 358, 822, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 614, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 844, 818, 843, 845,
	846, 842, 847, 848, 829, 723, 0, 774, 840, 839,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 604,
	601, 413, 605, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 807, 781, 782, 783, 720, 784,
	778, 779, 721, 780, 808, 772, 804, 805, 748, 775,
	785, 803, 786, 806, 809, 810, 849, 850, 792, 776,
	228, 851, 789, 811, 802, 801, 787, 773, 812, 813,
	755, 750, 790, 791, 777, 795, 796, 797, 722, 769,
	770, 771, 793, 794, 751, 752, 753, 754, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 602, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 798, 765, 608, 477, 478, 588, 0,
	715, 0, 0, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 718, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 756, 528, 479, 398, 351, 546, 545, 0, 0,
	823, 831, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 710, 0, 0, 746, 800, 799, 733, 743,
	0, 0, 280, 203, 474, 593, 476, 475, 734, 0,
	735, 739, 742, 738, 736, 737, 0, 815, 0, 0,
	0, 0, 0, 0, 702, 714, 0, 719, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 711, 712, 0, 0, 0, 0, 766, 0, 713,
	0, 0, 761, 740, 744, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 741, 764, 768, 301, 837,
	762, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 838, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 759, 0, 590,
	0, 430, 0, 0, 821, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 763, 0, 388, 369, 834,
	3638, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	611, 612, 613, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 607, 819, 365, 556, 589, 481, 0, 833, 814,
	816, 817, 820, 824, 825, 826, 827, 828, 830, 832,
	836, 606, 0, 535, 550, 609, 549, 603, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 835, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 767, 531, 532, 355, 356, 357, 358, 822,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 614, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 844, 818,
	843, 845, 846, 842, 847, 848, 829, 723, 0, 774,
	840, 839, 841, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 604, 601, 413, 605, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 807, 781, 782, 783,
	720, 784, 778, 779, 721, 780, 808, 772, 804, 805,
	748, 775, 785, 803, 786, 806, 809, 810, 849, 850,
	792, 776, 228, 851, 789, 811, 802, 801, 787, 773,
	812, 813, 755, 750, 790, 791, 777, 795, 796, 797,
	722, 769, 770, 771, 793, 794, 751, 752, 753, 754,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 602,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 798, 765, 608, 477, 478,
	588, 0, 715, 0, 0, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 0, 718, 0,
	0, 0, 307, 1747, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 756, 528, 479, 398, 351, 546, 545,
	0, 0, 823, 831, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 710, 0, 0, 746, 800, 799,
	733, 743, 0, 0, 280, 203, 474, 593, 476, 475,
	734, 0, 735, 739, 742, 738, 736, 737, 0, 815,
	0, 0, 0, 0, 0, 0, 702, 714, 0, 719,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 711, 712, 0, 0, 0, 0, 766,
	0, 713, 0, 0, 761, 740, 744, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 741, 764, 768,
	301, 837, 762, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 838, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 759,
	0, 590, 0, 430, 0, 0, 821, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 763, 0, 388,
	369, 834, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 611, 612, 613, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 607, 819, 365, 556, 589, 481, 0,
	833, 814, 816, 817, 820, 824, 825, 826, 827, 828,
	830, 832, 836, 606, 0, 535, 550, 609, 549, 603,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 835, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 767, 531, 532, 355, 356, 357,
	358, 822, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 614,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	844, 818, 843, 845, 846, 842, 847, 848, 829, 723,
	0, 774, 840, 839, 841, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 604, 601, 413, 605, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 807, 781,
	782, 783, 720, 784, 778, 779, 721, 780, 808, 772,
	804, 805, 748, 775, 785, 803, 786, 806, 809, 810,
	849, 850, 792, 776, 228, 851, 789, 811, 802, 801,
	787, 773, 812, 813, 755, 750, 790, 791, 777, 795,
	796, 797, 722, 769, 770, 771, 793, 794, 751, 752,
	753, 754, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 602, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 798, 765, 608,
	477, 478, 588, 0, 715, 0, 0, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	718, 0, 0, 0, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 756, 528, 479, 398, 351,
	546, 545, 0, 0, 823, 831, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 710, 0, 0, 746,
	800, 799, 733, 743, 0, 0, 280, 203, 474, 593,
	476, 475, 734, 0, 735, 739, 742, 738, 736, 737,
	0, 815, 0, 0, 0, 0, 0, 0, 702, 714,
	0, 719, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 711, 712, 1474, 0, 0,
	0, 766, 0, 713, 0, 0, 761, 740, 744, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 741,
	764, 768, 301, 837, 762, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	838, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 759, 0, 590, 0, 430, 0, 0, 821, 0,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 763,
	0, 388, 369, 834, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 611, 612, 613, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 607, 819, 365, 556, 589,
	481, 0, 833, 814, 816, 817, 820, 824, 825, 826,
	827, 828, 830, 832, 836, 606, 0, 535, 550, 609,
	549, 603, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 835, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 767, 531, 532, 355,
	356, 357, 358, 822, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 614, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 844, 818, 843, 845, 846, 842, 847, 848,
	829, 723, 0, 774, 840, 839, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 604, 601, 413, 605, 0,
	264, 487, 338, 0, 379, 312, 552, 553, 0, 0,
	807, 781, 782, 783, 720, 784, 778, 779, 721, 780,
	808, 772, 804, 805, 748, 775, 785, 803, 786, 806,
	809, 810, 849, 850, 792, 776, 228, 851, 789, 811,
	802, 801, 787, 773, 812, 813, 755, 750, 790, 791,
	777, 795, 796, 797, 722, 769, 770, 771, 793, 794,
	751, 752, 753, 754, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 602, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 798,
	0, 608, 477, 478, 588, 765, 715, 0, 2108, 0,
	0, 0, 0, 0, 367, 0, 492, 525, 514, 597,
	480, 0, 0, 0, 0, 0, 0, 718, 0, 0,
	0, 307, 0, 0, 337, 529, 511, 521, 512, 497,
	498, 499, 506, 317, 500, 501, 502, 472, 503, 473,
	504, 505, 756, 528, 479, 398, 351, 546, 545, 0,
	0, 823, 831, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 710, 0, 0, 746, 800, 799, 733,
	743, 0, 0, 280, 203, 474, 593, 476, 475, 734,
	0, 735, 739, 742, 738, 736, 737, 0, 815, 0,
	0, 0, 0, 0, 0, 702, 714, 0, 719, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 711, 712, 0, 0, 0, 0, 766, 0,
	713, 0, 0, 761, 740, 744, 0, 0, 0, 0,
	270, 403, 420, 281, 394, 433, 286, 401, 276, 366,
	390, 0, 0, 272, 418, 400, 348, 327, 328, 271,
	0, 385, 305, 319, 302, 364, 741, 764, 768, 301,
	837, 762, 428, 274, 0, 427, 363, 414, 419, 349,
	343, 273, 416, 347, 342, 331, 309, 838, 332, 333,
	323, 375, 341, 376, 324, 353, 352, 354, 0, 0,
	0, 0, 0, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 587, 759, 0,
	590, 0, 430, 0, 0, 821, 0, 0, 0, 402,
	0, 0, 334, 0, 0, 0, 763, 0, 388, 369,
	834, 0, 0, 386, 339, 415, 377, 421, 404, 429,
	382, 378, 265, 405, 304, 350, 277, 279, 299, 306,
	308, 310, 311, 359, 360, 372, 393, 406, 407, 408,
	303, 287, 387, 288, 321, 289, 266, 295, 293, 296,
	395, 297, 268, 373, 412, 0, 316, 383, 346, 269,
	345, 374, 411, 410, 278, 437, 443, 444, 533, 0,
	449, 611, 612, 613, 458, 463, 464, 465, 467, 468,
	469, 470, 534, 551, 518, 488, 451, 542, 485, 489,
	490, 554, 0, 0, 0, 442, 335, 336, 0, 314,
	262, 263, 607, 819, 365, 556, 589, 481, 0, 833,
	814, 816, 817, 820, 824, 825, 826, 827, 828, 830,
	832, 836, 606, 0, 535, 550, 609, 549, 603, 371,
	0, 392, 547, 494, 0, 539, 513, 0, 540, 509,
	544, 0, 483, 0, 399, 423, 435, 452, 455, 484,
	569, 570, 571, 267, 454, 573, 574, 575, 576, 577,
	578, 579, 572, 835, 516, 493, 519, 434, 496, 495,
	0, 0, 530, 767, 531, 532, 355, 356, 357, 358,
	822, 557, 285, 453, 381, 0, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 522, 523, 520, 614, 0,
	580, 581, 0, 0, 447, 448, 313, 320, 466, 322,
	284, 370, 315, 432, 329, 0, 459, 524, 460, 583,
	586, 584, 585, 362, 325, 326, 396, 330, 340, 384,
	431, 368, 389, 282, 422, 397, 344, 510, 537, 844,
	818, 843, 845, 846, 842, 847, 848, 829, 723, 0,
	774, 840, 839, 841, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 564, 563, 562, 561,
	560, 559, 558, 0, 0, 507, 409, 294, 256, 290,
	291, 298, 604, 601, 413, 605, 0, 264, 487, 338,
	0, 379, 312, 552, 553, 0, 0, 807, 781, 782,
	783, 720, 784, 778, 779, 721, 780, 808, 772, 804,
	805, 748, 775, 785, 803, 786, 806, 809, 810, 849,
	850, 792, 776, 228, 851, 789, 811, 802, 801, 787,
	773, 812, 813, 755, 750, 790, 791, 777, 795, 796,
	797, 722, 769, 770, 771, 793, 794, 751, 752, 753,
	754, 0, 0, 0, 438, 439, 440, 462, 424, 486,
	602, 0, 0, 0, 0, 0, 0, 0, 536, 548,
	582, 0, 591, 592, 594, 596, 798, 765, 608, 477,
	478, 588, 0, 715, 0, 0, 367, 0, 492, 525,
	514, 597, 480, 0, 0, 0, 0, 0, 0, 718,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 756, 528, 479, 398, 351, 546,
	545, 0, 0, 823, 831, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 710, 0, 0, 746, 800,
	799, 733, 743, 0, 0, 280, 203, 474, 593, 476,
	475, 734, 0, 735, 739, 742, 738, 736, 737, 0,
	815, 0, 0, 0, 0, 0, 0, 702, 714, 0,
	719, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 711, 712, 1740, 0, 0, 0,
	766, 0, 713, 0, 0, 761, 740, 744, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 741, 764,
	768, 301, 837, 762, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 838,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	759, 0, 590, 0, 430, 0, 0, 821, 0, 0,
	0, 402, 0, 0, 334, 0, 0, 0, 763, 0,
	388, 369, 834, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 611, 612, 613, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 607, 819, 365, 556, 589, 481,
	0, 833, 814, 816, 817, 820, 824, 825, 826, 827,
	828, 830, 832, 836, 606, 0, 535, 550, 609, 549,
	603, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 835, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 767, 531, 532, 355, 356,
	357, 358, 822, 557, 285, 453, 381, 0, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	614, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 844, 818, 843, 845, 846, 842, 847, 848, 829,
	723, 0, 774, 840, 839, 841, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 604, 601, 413, 605, 0, 264,
	487, 338, 0, 379, 312, 552, 553, 0, 0, 807,
	781, 782, 783, 720, 784, 778, 779, 721, 780, 808,
	772, 804, 805, 748, 775, 785, 803, 786, 806, 809,
	810, 849, 850, 792, 776, 228, 851, 789, 811, 802,
	801, 787, 773, 812, 813, 755, 750, 790, 791, 777,
	795, 796, 797, 722, 769, 770, 771, 793, 794, 751,
	752, 753, 754, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 602, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 798, 765,
	608, 477, 478, 588, 0, 715, 0, 0, 367, 0,
	492, 525, 514, 597, 480, 0, 0, 0, 0, 0,
	0, 718, 0, 0, 0, 307, 0, 0, 337, 529,
	511, 521, 512, 497, 498, 499, 506, 317, 500, 501,
	502, 472, 503, 473, 504, 505, 756, 528, 479, 398,
	351, 546, 545, 0, 0, 823, 831, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 710, 0, 0,
	746, 800, 799, 733, 743, 0, 0, 280, 203, 474,
	593, 476, 475, 734, 0, 735, 739, 742, 738, 736,
	737, 0, 815, 0, 0, 0, 0, 0, 0, 702,
	714, 0, 719, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 711, 712, 0, 0,
	0, 0, 766, 0, 713, 0, 0, 761, 740, 744,
	0, 0, 0, 0, 270, 403, 420, 281, 394, 433,
	286, 401, 276, 366, 390, 0, 0, 272, 418, 400,
	348, 327, 328, 271, 0, 385, 305, 319, 302, 364,
	741, 764, 768, 301, 837, 762, 428, 274, 0, 427,
	363, 414, 419, 349, 343, 273, 416, 347, 342, 331,
	309, 838, 332, 333, 323, 375, 341, 376, 324, 353,
	352, 354, 0, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 759, 0, 590, 0, 430, 0, 0, 821,
	0, 0, 0, 402, 0, 0, 334, 0, 0, 0,
	763, 0, 388, 369, 834, 0, 0, 386, 339, 415,
	377, 421, 404, 429, 382, 378, 265, 405, 304, 350,
	277, 279, 299, 306, 308, 310, 311, 359, 360, 372,
	393, 406, 407, 408, 303, 287, 387, 288, 321, 289,
	266, 295, 293, 296, 395, 297, 268, 373, 412, 0,
	316, 383, 346, 269, 345, 374, 411, 410, 278, 437,
	443, 444, 533, 0, 449, 611, 612, 613, 458, 463,
	464, 465, 467, 468, 469, 470, 534, 551, 518, 488,
	451, 542, 485, 489, 490, 554, 0, 0, 0, 442,
	335, 336, 0, 314, 262, 263, 607, 819, 365, 556,
	589, 481, 0, 833, 814, 816, 817, 820, 824, 825,
	826, 827, 828, 830, 832, 836, 606, 0, 535, 550,
	609, 549, 603, 371, 0, 392, 547, 494, 0, 539,
	513, 0, 540, 509, 544, 0, 483, 0, 399, 423,
	435, 452, 455, 484, 569, 570, 571, 267, 454, 573,
	574, 575, 576, 577, 578, 579, 572, 835, 516, 493,
	519, 434, 496, 495, 0, 0, 530, 767, 531, 532,
	355, 356, 357, 358, 822, 557, 285, 453, 381, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 520, 614, 0, 580, 581, 0, 0, 447, 448,
	313, 320, 466, 322, 284, 370, 315, 432, 329, 0,
	459, 524, 460, 583, 586, 584, 585, 362, 325, 326,
	396, 330, 340, 384, 431, 368, 389, 282, 422, 397,
	344, 510, 537, 844, 818, 843, 845, 846, 842, 847,
	848, 829, 723, 0, 774, 840, 839, 841, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	564, 563, 562, 561, 560, 559, 558, 0, 0, 507,
	409, 294, 256, 290, 291, 298, 604, 601, 413, 605,
	0, 264, 487, 338, 0, 379, 312, 552, 553, 0,
	0, 807, 781, 782, 783, 720, 784, 778, 779, 721,
	780, 808, 772, 804, 805, 748, 775, 785, 803, 786,
	806, 809, 810, 849, 850, 792, 776, 228, 851, 789,
	811, 802, 801, 787, 773, 812, 813, 755, 750, 790,
	791, 777, 795, 796, 797, 722, 769, 770, 771, 793,
	794, 751, 752, 753, 754, 0, 0, 0, 438, 439,
	440, 462, 424, 486, 602, 0, 0, 0, 0, 0,
	0, 0, 536, 548, 582, 0, 591, 592, 594, 596,
	798, 765, 608, 477, 478, 588, 0, 715, 0, 0,
	367, 0, 492, 525, 514, 597, 480, 0, 0, 0,
	0, 0, 0, 718, 0, 0, 0, 307, 0, 0,
	337, 529, 511, 521, 512, 497, 498, 499, 506, 317,
	500, 501, 502, 472, 503, 473, 504, 505, 756, 528,
	479, 398, 351, 546, 545, 0, 0, 823, 831, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 710,
	0, 0, 746, 800, 799, 733, 743, 0, 0, 280,
	203, 474, 593, 476, 475, 2545, 0, 2546, 739, 742,
	738, 736, 737, 0, 815, 0, 0, 0, 0, 0,
	0, 702, 714, 0, 719, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 711, 712,
	0, 0, 0, 0, 766, 0, 713, 0, 0, 761,
	740, 744, 0, 0, 0, 0, 270, 403, 420, 281,
	394, 433, 286, 401, 276, 366, 390, 0, 0, 272,
	418, 400, 348, 327, 328, 271, 0, 385, 305, 319,
	302, 364, 741, 764, 768, 301, 837, 762, 428, 274,
	0, 427, 363, 414, 419, 349, 343, 273, 416, 347,
	342, 331, 309, 838, 332, 333, 323, 375, 341, 376,
	324, 353, 352, 354, 0, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 587, 759, 0, 590, 0, 430, 0,
	0, 821, 0, 0, 0, 402, 0, 0, 334, 0,
	0, 0, 763, 0, 388, 369, 834, 0, 0, 386,
	339, 415, 377, 421, 404, 429, 382, 378, 265, 405,
	304, 350, 277, 279, 299, 306, 308, 310, 311, 359,
	360, 372, 393, 406, 407, 408, 303, 287, 387, 288,
	321, 289, 266, 295, 293, 296, 395, 297, 268, 373,
	412, 0, 316, 383, 346, 269, 345, 374, 411, 410,
	278, 437, 443, 444, 533, 0, 449, 611, 612, 613,
	458, 463, 464, 465, 467, 468, 469, 470, 534, 551,
	518, 488, 451, 542, 485, 489, 490, 554, 0, 0,
	0, 442, 335, 336, 0, 314, 262, 263, 607, 819,
	365, 556, 589, 481, 0, 833, 814, 816, 817, 820,
	824, 825, 826, 827, 828, 830, 832, 836, 606, 0,
	535, 550, 609, 549, 603, 371, 0, 392, 547, 494,
	0, 539, 513, 0, 540, 509, 544, 0, 483, 0,
	399, 423, 435, 452, 455, 484, 569, 570, 571, 267,
	454, 573, 574, 575, 576, 577, 578, 579, 572, 835,
	516, 493, 519, 434, 496, 495, 0, 0, 530, 767,
	531, 532, 355, 356, 357, 358, 822, 557, 285, 453,
	381, 0, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 523, 520, 614, 0, 580, 581, 0, 0,
	447, 448, 313, 320, 466, 322, 284, 370, 315, 432,
	329, 0, 459, 524, 460, 583, 586, 584, 585, 362,
	325, 326, 396, 330, 340, 384, 431, 368, 389, 282,
	422, 397, 344, 510, 537, 844, 818, 843, 845, 846,
	842, 847, 848, 829, 723, 0, 774, 840, 839, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 564, 563, 562, 561, 560, 559, 558, 0,
	0, 507, 409, 294, 256, 290, 291, 298, 604, 601,
	413, 605, 0, 264, 487, 338, 0, 379, 312, 552,
	553, 0, 0, 807, 781, 782, 783, 720, 784, 778,
	779, 721, 780, 808, 772, 804, 805, 748, 775, 785,
	803, 786, 806, 809, 810, 849, 850, 792, 776, 228,
	851, 789, 811, 802, 801, 787, 773, 812, 813, 755,
	750, 790, 791, 777, 795, 796, 797, 722, 769, 770,
	771, 793, 794, 751, 752, 753, 754, 0, 0, 0,
	438, 439, 440, 462, 424, 486, 602, 0, 0, 0,
	0, 0, 0, 0, 536, 548, 582, 0, 591, 592,
	594, 596, 798, 765, 608, 477, 478, 588, 0, 715,
	0, 0, 367, 0, 492, 525, 514, 597, 480, 0,
	0, 1610, 0, 0, 0, 718, 0, 0, 0, 307,
	0, 0, 337, 529, 511, 521, 512, 497, 498, 499,
	506, 317, 500, 501, 502, 472, 503, 473, 504, 505,
	756, 528, 479, 398, 351, 546, 545, 0, 0, 823,
	831, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 710, 0, 0, 746, 800, 799, 733, 743, 0,
	0, 280, 203, 474, 593, 476, 475, 734, 0, 735,
	739, 742, 738, 736, 737, 0, 815, 0, 0, 0,
	0, 0, 0, 0, 714, 0, 719, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	711, 712, 0, 0, 0, 0, 766, 0, 713, 0,
	0, 761, 740, 744, 0, 0, 0, 0, 270, 403,
	420, 281, 394, 433, 286, 401, 276, 366, 390, 0,
	0, 272, 418, 400, 348, 327, 328, 271, 0, 385,
	305, 319, 302, 364, 741, 764, 768, 301, 837, 762,
	428, 274, 0, 427, 363, 414, 419, 349, 343, 273,
	416, 347, 342, 331, 309, 838, 332, 333, 323, 375,
	341, 376, 324, 353, 352, 354, 0, 0, 0, 0,
	0, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 759, 0, 590, 0,
	430, 0, 0, 821, 0, 0, 0, 402, 0, 0,
	334, 0, 0, 0, 763, 0, 388, 369, 834, 0,
	0, 386, 339, 415, 377, 421, 404, 429, 382, 378,
	265, 405, 304, 350, 277, 279, 299, 306, 308, 310,
	311, 359, 360, 372, 393, 406, 407, 408, 303, 287,
	387, 288, 321, 289, 266, 295, 293, 296, 395, 297,
	268, 373, 412, 0, 316, 383, 346, 269, 345, 374,
	411, 410, 278, 437, 1611, 1612, 533, 0, 449, 611,
	612, 613, 458, 463, 464, 465, 467, 468, 469, 470,
	534, 551, 518, 488, 451, 542, 485, 489, 490, 554,
	0, 0, 0, 442, 335, 336, 0, 314, 262, 263,
	607, 819, 365, 556, 589, 481, 0, 833, 814, 816,
	817, 820, 824, 825, 826, 827, 828, 830, 832, 836,
	606, 0, 535, 550, 609, 549, 603, 371, 0, 392,
	547, 494, 0, 539, 513, 0, 540, 509, 544, 0,
	483, 0, 399, 423, 435, 452, 455, 484, 569, 570,
	571, 267, 454, 573, 574, 575, 576, 577, 578, 579,
	572, 835, 516, 493, 519, 434, 496, 495, 0, 0,
	530, 767, 531, 532, 355, 356, 357, 358, 822, 557,
	285, 453, 381, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 522, 523, 520, 614, 0, 580, 581,
	0, 0, 447, 448, 313, 320, 466, 322, 284, 370,
	315, 432, 329, 0, 459, 524, 460, 583, 586, 584,
	585, 362, 325, 326, 396, 330, 340, 384, 431, 368,
	389, 282, 422, 397, 344, 510, 537, 844, 818, 843,
	845, 846, 842, 847, 848, 829, 723, 0, 774, 840,
	839, 841, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 564, 563, 562, 561, 560, 559,
	558, 0, 0, 507, 409, 294, 256, 290, 291, 298,
	604, 601, 413, 605, 0, 264, 487, 338, 0, 379,
	312, 552, 553, 0, 0, 807, 781, 782, 783, 720,
	784, 778, 779, 721, 780, 808, 772, 804, 805, 748,
	775, 785, 803, 786, 806, 809, 810, 849, 850, 792,
	776, 228, 851, 789, 811, 802, 801, 787, 773, 812,
	813, 755, 750, 790, 791, 777, 795, 796, 797, 722,
	769, 770, 771, 793, 794, 751, 752, 753, 754, 0,
	0, 0, 438, 439, 440, 462, 424, 486, 602, 0,
	0, 0, 0, 0, 0, 0, 536, 548, 582, 0,
	591, 592, 594, 596, 798, 765, 608, 477, 478, 588,
	0, 715, 0, 0, 367, 0, 492, 525, 514, 597,
	480, 0, 0, 0, 0, 0, 0, 718, 0, 0,
	0, 307, 0, 0, 337, 529, 511, 521, 512, 497,
	498, 499, 506, 317, 500, 501, 502, 472, 503, 473,
	504, 505, 756, 528, 479, 398, 351, 546, 545, 0,
	0, 823, 831, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 710, 0, 0, 746, 800, 799, 733,
	743, 0, 0, 280, 203, 474, 593, 476, 475, 734,
	0, 735, 739, 742, 738, 736, 737, 0, 815, 0,
	0, 0, 0, 0, 0, 0, 714, 0, 719, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 711, 712, 0, 0, 0, 0, 766, 0,
	713, 0, 0, 761, 740, 744, 0, 0, 0, 0,
	270, 403, 420, 281, 394, 433, 286, 401, 276, 366,
	390, 0, 0, 272, 418, 400, 348, 327, 328, 271,
	0, 385, 305, 319, 302, 364, 741, 764, 768, 301,
	837, 762, 428, 274, 0, 427, 363, 414, 419, 349,
	343, 273, 416, 347, 342, 331, 309, 838, 332, 333,
	323, 375, 341, 376, 324, 353, 352, 354, 0, 0,
	0, 0, 0, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 587, 759, 0,
	590, 0, 430, 0, 0, 821, 0, 0, 0, 402,
	0, 0, 334, 0, 0, 0, 763, 0, 388, 369,
	834, 0, 0, 386, 339, 415, 377, 421, 404, 429,
	382, 378, 265, 405, 304, 350, 277, 279, 299, 306,
	308, 310, 311, 359, 360, 372, 393, 406, 407, 408,
	303, 287, 387, 288, 321, 289, 266, 295, 293, 296,
	395, 297, 268, 373, 412, 0, 316, 383, 346, 269,
	345, 374, 411, 410, 278, 437, 443, 444, 533, 0,
	449, 611, 612, 613, 458, 463, 464, 465, 467, 468,
	469, 470, 534, 551, 518, 488, 451, 542, 485, 489,
	490, 554, 0, 0, 0, 442, 335, 336, 0, 314,
	262, 263, 607, 819, 365, 556, 589, 481, 0, 833,
	814, 816, 817, 820, 824, 825, 826, 827, 828, 830,
	832, 836, 606, 0, 535, 550, 609, 549, 603, 371,
	0, 392, 547, 494, 0, 539, 513, 0, 540, 509,
	544, 0, 483, 0, 399, 423, 435, 452, 455, 484,
	569, 570, 571, 267, 454, 573, 574, 575, 576, 577,
	578, 579, 572, 835, 516, 493, 519, 434, 496, 495,
	0, 0, 530, 767, 531, 532, 355, 356, 357, 358,
	822, 557, 285, 453, 381, 0, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 522, 523, 520, 614, 0,
	580, 581, 0, 0, 447, 448, 313, 320, 466, 322,
	284, 370, 315, 432, 329, 0, 459, 524, 460, 583,
	586, 584, 585, 362, 325, 326, 396, 330, 340, 384,
	431, 368, 389, 282, 422, 397, 344, 510, 537, 844,
	818, 843, 845, 846, 842, 847, 848, 829, 723, 0,
	774, 840, 839, 841, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 564, 563, 562, 561,
	560, 559, 558, 0, 0, 507, 409, 294, 256, 290,
	291, 298, 604, 601, 413, 605, 0, 264, 487, 338,
	0, 379, 312, 552, 553, 0, 0, 807, 781, 782,
	783, 720, 784, 778, 779, 721, 780, 808, 772, 804,
	805, 748, 775, 785, 803, 786, 806, 809, 810, 849,
	850, 792, 776, 228, 851, 789, 811, 802, 801, 787,
	773, 812, 813, 755, 750, 790, 791, 777, 795, 796,
	797, 722, 769, 770, 771, 793, 794, 751, 752, 753,
	754, 0, 0, 0, 438, 439, 440, 462, 424, 486,
	602, 0, 0, 0, 0, 0, 0, 0, 536, 548,
	582, 0, 591, 592, 594, 596, 798, 765, 608, 477,
	478, 588, 0, 715, 0, 0, 367, 0, 492, 525,
	514, 597, 480, 0, 0, 0, 0, 0, 0, 718,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 756, 528, 479, 398, 351, 546,
	545, 0, 0, 823, 831, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 746, 800,
	799, 733, 743, 0, 0, 280, 203, 474, 593, 476,
	475, 734, 0, 735, 739, 742, 738, 736, 737, 0,
	815, 0, 0, 0, 0, 0, 0, 702, 714, 0,
	719, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 711, 712, 0, 0, 0, 0,
	766, 0, 713, 0, 0, 761, 740, 744, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 741, 764,
	768, 301, 837, 762, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 838,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	759, 0, 590, 0, 430, 0, 0, 821, 0, 0,
	0, 402, 0, 0, 334, 0, 0, 0, 763, 0,
	388, 369, 834, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 611, 612, 613, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 607, 819, 365, 556, 589, 481,
	0, 833, 814, 816, 817, 820, 824, 825, 826, 827,
	828, 830, 832, 836, 606, 0, 535, 550, 609, 549,
	603, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 835, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 767, 531, 532, 355, 356,
	357, 358, 822, 557, 285, 453, 381, 0, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	614, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 844, 818, 843, 845, 846, 842, 847, 848, 829,
	723, 0, 774, 840, 839, 841, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 604, 601, 413, 605, 0, 264,
	487, 338, 0, 379, 312, 552, 553, 0, 0, 807,
	781, 782, 783, 720, 784, 778, 779, 721, 780, 808,
	772, 804, 805, 748, 775, 785, 803, 786, 806, 809,
	810, 849, 850, 792, 776, 228, 851, 789, 811, 802,
	801, 787, 773, 812, 813, 755, 750, 790, 791, 777,
	795, 796, 797, 722, 769, 770, 771, 793, 794, 751,
	752, 753, 754, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 602, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 798, 0,
	608, 477, 478, 588, 0, 715, 180, 54, 169, 143,
	0, 0, 0, 0, 0, 0, 367, 0, 492, 525,
	514, 597, 480, 0, 170, 0, 0, 0, 0, 0,
	0, 162, 0, 307, 0, 171, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 120, 528, 479, 398, 351, 546,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 174, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 280, 203, 474, 593, 476,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 0, 417,
	445, 301, 436, 0, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 461,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 142, 168, 178, 0, 106, 0, 587,
	0, 0, 590, 0, 430, 0, 0, 195, 0, 0,
	0, 402, 0, 0, 334, 167, 161, 160, 446, 0,
	388, 369, 207, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 566, 567, 568, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 425, 300, 365, 556, 589, 481,
	0, 543, 482, 491, 292, 515, 527, 526, 361, 441,
	198, 538, 541, 471, 208, 0, 535, 550, 508, 549,
	209, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 426, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 450, 531, 532, 355, 356,
	357, 358, 318, 557, 285, 453, 381, 118, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	206, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 380, 275, 413, 391, 0, 264,
	487, 338, 144, 379, 312, 552, 553, 51, 0, 212,
	213, 214, 215, 216, 217, 218, 219, 257, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 233,
	234, 235, 236, 555, 227, 228, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	0, 0, 0, 258, 259, 260, 261, 0, 0, 252,
	253, 254, 255, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 210, 40, 196, 199, 201, 200, 0, 52,
	536, 548, 582, 5, 591, 592, 594, 596, 595, 123,
	211, 477, 478, 588, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 367, 0, 492, 525, 514, 597,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 307, 0, 0, 337, 529, 511, 521, 512, 497,
	498, 499, 506, 317, 500, 501, 502, 472, 503, 473,
	504, 505, 120, 528, 479, 398, 351, 546, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 280, 203, 474, 593, 476, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 2242,
	2245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 403, 420, 281, 394, 433, 286, 401, 276, 366,
	390, 0, 0, 272, 418, 400, 348, 327, 328, 271,
	0, 385, 305, 319, 302, 364, 0, 417, 445, 301,
	436, 0, 428, 274, 0, 427, 363, 414, 419, 349,
	343, 273, 416, 347, 342, 331, 309, 461, 332, 333,
	323, 375, 341, 376, 324, 353, 352, 354, 0, 0,
	0, 0, 0, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 587, 0, 0,
	590, 2246, 430, 0, 0, 0, 2241, 0, 2240, 402,
	2238, 2243, 334, 0, 0, 0, 446, 0, 388, 369,
	610, 0, 0, 386, 339, 415, 377, 421, 404, 429,
	382, 378, 265, 405, 304, 350, 277, 279, 299, 306,
	308, 310, 311, 359, 360, 372, 393, 406, 407, 408,
	303, 287, 387, 288, 321, 289, 266, 295, 293, 296,
	395, 297, 268, 373, 412, 2244, 316, 383, 346, 269,
	345, 374, 411, 410, 278, 437, 443, 444, 533, 0,
	449, 611, 612, 613, 458, 463, 464, 465, 467, 468,
	469, 470, 534, 551, 518, 488, 451, 542, 485, 489,
	490, 554, 0, 0, 0, 442, 335, 336, 0, 314,
	262, 263, 607, 300, 365, 556, 589, 481, 0, 543,
	482, 491, 292, 515, 527, 526, 361, 441, 0, 538,
	541, 471, 606, 0, 535, 550, 609, 549, 603, 371,
	0, 392, 547, 494, 0, 539, 513, 0, 540, 509,
	544, 0, 483, 0, 399, 423, 435, 452, 455, 484,
	569, 570, 571, 267, 454, 573, 574, 575, 576, 577,
	578, 579, 572, 426, 516, 493, 519, 434, 496, 495,
	0, 0, 530, 450, 531, 532, 355, 356, 357, 358,
	318, 557, 285, 453, 381, 0, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 522, 523, 520, 614, 0,
	580, 581, 0, 0, 447, 448, 313, 320, 466, 322,
	284, 370, 315, 432, 329, 0, 459, 524, 460, 583,
	586, 584, 585, 362, 325, 326, 396, 330, 340, 384,
	431, 368, 389, 282, 422, 397, 344, 510, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 564, 563, 562, 561,
	560, 559, 558, 0, 0, 507, 409, 294, 256, 290,
	291, 298, 604, 601, 413, 605, 0, 264, 487, 338,
	144, 379, 312, 552, 553, 0, 0, 212, 213, 214,
	215, 216, 217, 218, 219, 257, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 233, 234, 235,
	236, 555, 227, 228, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 0, 0,
	0, 258, 259, 260, 261, 0, 0, 252, 253, 254,
	255, 0, 0, 0, 438, 439, 440, 462, 424, 486,
	602, 0, 0, 0, 0, 0, 0, 0, 536, 548,
	582, 0, 591, 592, 594, 596, 595, 0, 608, 477,
	478, 588, 367, 0, 492, 525, 514, 597, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	0, 0, 337, 529, 511, 521, 512, 497, 498, 499,
	506, 317, 500, 501, 502, 472, 503, 473, 504, 505,
	0, 528, 479, 398, 351, 546, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1244, 0, 0, 202, 0, 0, 733, 743, 0,
	0, 280, 203, 474, 593, 476, 475, 734, 0, 735,
	739, 742, 738, 736, 737, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 0, 0, 270, 403,
	420, 281, 394, 433, 286, 401, 276, 366, 390, 0,
	0, 272, 418, 400, 348, 327, 328, 271, 0, 385,
	305, 319, 302, 364, 741, 417, 445, 301, 436, 0,
	428, 274, 0, 427, 363, 414, 419, 349, 343, 273,
	416, 347, 342, 331, 309, 461, 332, 333, 323, 375,
	341, 376, 324, 353, 352, 354, 0, 0, 0, 0,
	0, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 0, 0, 590, 0,
	430, 0, 0, 0, 0, 0, 0, 402, 0, 0,
	334, 0, 0, 0, 446, 0, 388, 369, 610, 0,
	0, 386, 339, 415, 377, 421, 404, 429, 382, 378,
	265, 405, 304, 350, 277, 279, 299, 306, 308, 310,
	311, 359, 360, 372, 393, 406, 407, 408, 303, 287,
	387, 288, 321, 289, 266, 295, 293, 296, 395, 297,
	268, 373, 412, 0, 316, 383, 346, 269, 345, 374,
	411, 410, 278, 437, 443, 444, 533, 0, 449, 611,
	612, 613, 458, 463, 464, 465, 467, 468, 469, 470,
	534, 551, 518, 488, 451, 542, 485, 489, 490, 554,
	0, 0, 0, 442, 335, 336, 0, 314, 262, 263,
	607, 300, 365, 556, 589, 481, 0, 543, 482, 491,
	292, 515, 527, 526, 361, 441, 0, 538, 541, 471,
	606, 0, 535, 550, 609, 549, 603, 371, 0, 392,
	547, 494, 0, 539, 513, 0, 540, 509, 544, 0,
	483, 0, 399, 423, 435, 452, 455, 484, 569, 570,
	571, 267, 454, 573, 574, 575, 576, 577, 578, 579,
	572, 426, 516, 493, 519, 434, 496, 495, 0, 0,
	530, 450, 531, 532, 355, 356, 357, 358, 318, 557,
	285, 453, 381, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 522, 523, 520, 614, 0, 580, 581,
	0, 0, 447, 448, 313, 320, 466, 322, 284, 370,
	315, 432, 329, 0, 459, 524, 460, 583, 586, 584,
	585, 362, 325, 326, 396, 330, 340, 384, 431, 368,
	389, 282, 422, 397, 344, 510, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 564, 563, 562, 561, 560, 559,
	558, 0, 0, 507, 409, 294, 256, 290, 291, 298,
	604, 601, 413, 605, 0, 264, 487, 338, 0, 379,
	312, 552, 553, 0, 0, 212, 213, 214, 215, 216,
	217, 218, 219, 257, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 233, 234, 235, 236, 555,
	227, 228, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 0, 0, 0, 258,
	259, 260, 261, 0, 0, 252, 253, 254, 255, 0,
	0, 0, 438, 439, 440, 462, 424, 486, 602, 0,
	0, 0, 0, 0, 0, 0, 536, 548, 582, 0,
	591, 592, 594, 596, 595, 0, 608, 477, 478, 588,
	180, 54, 169, 143, 0, 0, 0, 0, 0, 0,
	367, 633, 492, 525, 514, 597, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 0, 0,
	337, 529, 511, 521, 512, 497, 498, 499, 506, 317,
	500, 501, 502, 472, 503, 473, 504, 505, 0, 528,
	479, 398, 351, 546, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 639, 0, 0, 0, 0, 638,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 280,
	203, 474, 593, 476, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 403, 420, 281,
	394, 433, 286, 401, 276, 366, 390, 0, 0, 272,
	418, 400, 348, 327, 328, 271, 0, 385, 305, 319,
	302, 364, 0, 417, 445, 301, 436, 0, 428, 274,
	0, 427, 363, 414, 419, 349, 343, 273, 416, 347,
	342, 331, 309, 461, 332, 333, 323, 375, 341, 376,
	324, 353, 352, 354, 0, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 637, 0, 587, 0, 0, 590, 0, 430, 0,
	0, 0, 0, 0, 0, 402, 0, 0, 334, 0,
	0, 0, 446, 0, 388, 369, 610, 0, 0, 386,
	339, 415, 377, 421, 404, 429, 382, 378, 265, 405,
	304, 350, 277, 279, 299, 306, 308, 310, 311, 359,
	360, 372, 393, 406, 407, 408, 303, 287, 387, 288,
	321, 289, 266, 295, 293, 296, 395, 297, 268, 373,
	412, 0, 316, 383, 346, 269, 345, 374, 411, 410,
	278, 437, 443, 444, 533, 0, 449, 611, 612, 613,
	458, 463, 464, 465, 467, 468, 469, 470, 534, 551,
	518, 488, 451, 542, 485, 489, 490, 554, 0, 0,
	0, 442, 335, 336, 0, 314, 262, 263, 607, 300,
	365, 556, 589, 481, 0, 543, 482, 491, 292, 515,
	527, 526, 361, 441, 0, 538, 541, 471, 606, 0,
	535, 550, 609, 549, 603, 371, 0, 392, 547, 494,
	0, 539, 513, 0, 540, 509, 544, 0, 483, 0,
	399, 423, 435, 452, 455, 484, 569, 570, 571, 267,
	454, 573, 574, 575, 576, 577, 578, 579, 572, 426,
	516, 493, 519, 434, 496, 495, 0, 0, 530, 450,
	531, 532, 355, 356, 357, 358, 634, 636, 285, 453,
	381, 647, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 523, 520, 614, 0, 580, 581, 0, 0,
	447, 448, 313, 320, 466, 322, 284, 370, 315, 432,
	329, 0, 459, 524, 460, 583, 586, 584, 585, 362,
	325, 326, 396, 330, 340, 384, 431, 368, 389, 282,
	422, 397, 344, 510, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 564, 563, 562, 561, 560, 559, 558, 0,
	0, 507, 409, 294, 256, 290, 291, 298, 604, 601,
	413, 605, 0, 264, 487, 338, 144, 379, 312, 552,
	553, 0, 0, 212, 213, 214, 215, 216, 217, 218,
	219, 257, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 233, 234, 235, 236, 555, 227, 228,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 0, 0, 0, 258, 259, 260,
	261, 0, 0, 252, 253, 254, 255, 0, 0, 0,
	438, 439, 440, 462, 424, 486, 602, 0, 0, 0,
	0, 0, 0, 0, 536, 548, 582, 0, 591, 592,
	594, 596, 595, 0, 608, 477, 478, 588, 367, 0,
	492, 525, 514, 597, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 307, 0, 0, 337, 529,
	511, 521, 512, 497, 498, 499, 506, 317, 500, 501,
	502, 472, 503, 473, 504, 505, 0, 528, 479, 398,
	351, 546, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 280, 203, 474,
	593, 476, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 2242, 2245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 403, 420, 281, 394, 433,
	286, 401, 276, 366, 390, 0, 0, 272, 418, 400,
	348, 327, 328, 271, 0, 385, 305, 319, 302, 364,
	0, 417, 445, 301, 436, 0, 428, 274, 0, 427,
	363, 414, 419, 349, 343, 273, 416, 347, 342, 331,
	309, 461, 332, 333, 323, 375, 341, 376, 324, 353,
	352, 354, 0, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 0, 0, 590, 2246, 430, 0, 0, 0,
	2241, 0, 2240, 402, 2238, 2243, 334, 0, 0, 0,
	446, 0, 388, 369, 610, 0, 0, 386, 339, 415,
	377, 421, 404, 429, 382, 378, 265, 405, 304, 350,
	277, 279, 299, 306, 308, 310, 311, 359, 360, 372,
	393, 406, 407, 408, 303, 287, 387, 288, 321, 289,
	266, 295, 293, 296, 395, 297, 268, 373, 412, 2244,
	316, 383, 346, 269, 345, 374, 411, 410, 278, 437,
	443, 444, 533, 0, 449, 611, 612, 613, 458, 463,
	464, 465, 467, 468, 469, 470, 534, 551, 518, 488,
	451, 542, 485, 489, 490, 554, 0, 0, 0, 442,
	335, 336, 0, 314, 262, 263, 607, 300, 365, 556,
	589, 481, 0, 543, 482, 491, 292, 515, 527, 526,
	361, 441, 0, 538, 541, 471, 606, 0, 535, 550,
	609, 549, 603, 371, 0, 392, 547, 494, 0, 539,
	513, 0, 540, 509, 544, 0, 483, 0, 399, 423,
	435, 452, 455, 484, 569, 570, 571, 267, 454, 573,
	574, 575, 576, 577, 578, 579, 572, 426, 516, 493,
	519, 434, 496, 495, 0, 0, 530, 450, 531, 532,
	355, 356, 357, 358, 318, 557, 285, 453, 381, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 520, 614, 0, 580, 581, 0, 0, 447, 448,
	313, 320, 466, 322, 284, 370, 315, 432, 329, 0,
	459, 524, 460, 583, 586, 584, 585, 362, 325, 326,
	396, 330, 340, 384, 431, 368, 389, 282, 422, 397,
	344, 510, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	564, 563, 562, 561, 560, 559, 558, 0, 0, 507,
	409, 294, 256, 290, 291, 298, 604, 601, 413, 605,
	0, 264, 487, 338, 0, 379, 312, 552, 553, 0,
	0, 212, 213, 214, 215, 216, 217, 218, 219, 257,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 233, 234, 235, 236, 555, 227, 228, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 0, 0, 0, 258, 259, 260, 261, 0,
	0, 252, 253, 254, 255, 0, 0, 0, 438, 439,
	440, 462, 424, 486, 602, 0, 0, 0, 0, 0,
	0, 0, 536, 548, 582, 0, 591, 592, 594, 596,
	595, 0, 608, 477, 478, 588, 367, 0, 492, 525,
	514, 597, 480, 0, 1058, 0, 0, 0, 0, 0,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 0, 528, 479, 398, 351, 546,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 280, 203, 474, 593, 476,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1044, 0, 0, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 2391, 2394, 2395, 2396, 2397,
	2398, 2399, 0, 2404, 2400, 2401, 2402, 2403, 0, 2386,
	2387, 2388, 2389, 1042, 2370, 2392, 0, 2371, 363, 2372,
	2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2383, 2384,
	2381, 2382, 2390, 375, 341, 376, 324, 353, 352, 354,
	1069, 1071, 1073, 1075, 1078, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	0, 0, 590, 0, 430, 0, 0, 0, 0, 0,
	0, 402, 0, 0, 334, 0, 0, 0, 2385, 0,
	388, 369, 610, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 611, 612, 613, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 607, 300, 365, 556, 589, 481,
	0, 543, 482, 491, 292, 515, 527, 526, 361, 441,
	0, 538, 541, 471, 606, 0, 535, 550, 609, 549,
	603, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 426, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 450, 531, 532, 355, 356,
	357, 358, 318, 557, 285, 453, 381, 0, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	614, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 604, 601, 413, 605, 0, 264,
	2393, 338, 0, 379, 312, 552, 553, 0, 0, 212,
	213, 214, 215, 216, 217, 218, 219, 257, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 233,
	234, 235, 236, 555, 227, 228, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	0, 0, 0, 258, 259, 260, 261, 0, 0, 252,
	253, 254, 255, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 602, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 595, 0,
	608, 477, 478, 588, 367, 0, 492, 525, 514, 597,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 307, 0, 0, 337, 529, 511, 521, 512, 497,
	498, 499, 506, 317, 500, 501, 502, 472, 503, 473,
	504, 505, 0, 528, 479, 398, 351, 546, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 280, 203, 474, 593, 476, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	2263, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 403, 420, 281, 394, 433, 286, 401, 276, 366,
	390, 0, 0, 272, 418, 400, 348, 327, 328, 271,
	0, 385, 305, 319, 302, 364, 0, 417, 445, 301,
	436, 0, 428, 274, 0, 427, 363, 414, 419, 349,
	343, 273, 416, 347, 342, 331, 309, 461, 332, 333,
	323, 375, 341, 376, 324, 353, 352, 354, 0, 0,
	0, 0, 0, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 587, 0, 0,
	590, 2262, 430, 0, 0, 0, 2268, 2265, 2267, 402,
	0, 2266, 334, 0, 0, 0, 446, 0, 388, 369,
	610, 0, 2260, 386, 339, 415, 377, 421, 404, 429,
	382, 378, 265, 405, 304, 350, 277, 279, 299, 306,
	308, 310, 311, 359, 360, 372, 393, 406, 407, 408,
	303, 287, 387, 288, 321, 289, 266, 295, 293, 296,
	395, 297, 268, 373, 412, 0, 316, 383, 346, 269,
	345, 374, 411, 410, 278, 437, 443, 444, 533, 0,
	449, 611, 612, 613, 458, 463, 464, 465, 467, 468,
	469, 470, 534, 551, 518, 488, 451, 542, 485, 489,
	490, 554, 0, 0, 0, 442, 335, 336, 0, 314,
	262, 263, 607, 300, 365, 556, 589, 481, 0, 543,
	482, 491, 292, 515, 527, 526, 361, 441, 0, 538,
	541, 471, 606, 0, 535, 550, 609, 549, 603, 371,
	0, 392, 547, 494, 0, 539, 513, 0, 540, 509,
	544, 0, 483, 0, 399, 423, 435, 452, 455, 484,
	569, 570, 571, 267, 454, 573, 574, 575, 576, 577,
	578, 579, 572, 426, 516, 493, 519, 434, 496, 495,
	0, 0, 530, 450, 531, 532, 355, 356, 357, 358,
	318, 557, 285, 453, 381, 0, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 522, 523, 520, 614, 0,
	580, 581, 0, 0, 447, 448, 313, 320, 466, 322,
	284, 370, 315, 432, 329, 0, 459, 524, 460, 583,
	586, 584, 585, 362, 325, 326, 396, 330, 340, 384,
	431, 368, 389, 282, 422, 397, 344, 510, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 564, 563, 562, 561,
	560, 559, 558, 0, 0, 507, 409, 294, 256, 290,
	291, 298, 604, 601, 413, 605, 0, 264, 487, 338,
	0, 379, 312, 552, 553, 0, 0, 212, 213, 214,
	215, 216, 217, 218, 219, 257, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 233, 234, 235,
	236, 555, 227, 228, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 0, 0,
	0, 258, 259, 260, 261, 0, 0, 252, 253, 254,
	255, 0, 0, 0, 438, 439, 440, 462, 424, 486,
	602, 0, 0, 0, 0, 0, 0, 0, 536, 548,
	582, 0, 591, 592, 594, 596, 595, 0, 608, 477,
	478, 588, 367, 0, 492, 525, 514, 597, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	0, 0, 337, 529, 511, 521, 512, 497, 498, 499,
	506, 317, 500, 501, 502, 472, 503, 473, 504, 505,
	0, 528, 479, 398, 351, 546, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 280, 203, 474, 593, 476, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 2263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 403,
	420, 281, 394, 433, 286, 401, 276, 366, 390, 0,
	0, 272, 418, 400, 348, 327, 328, 271, 0, 385,
	305, 319, 302, 364, 0, 417, 445, 301, 436, 0,
	428, 274, 0, 427, 363, 414, 419, 349, 343, 273,
	416, 347, 342, 331, 309, 461, 332, 333, 323, 375,
	341, 376, 324, 353, 352, 354, 0, 0, 0, 0,
	0, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 0, 0, 590, 2262,
	430, 0, 0, 0, 2268, 2265, 2267, 402, 0, 2266,
	334, 0, 0, 0, 446, 0, 388, 369, 610, 0,
	0, 386, 339, 415, 377, 421, 404, 429, 382, 378,
	265, 405, 304, 350, 277, 279, 299, 306, 308, 310,
	311, 359, 360, 372, 393, 406, 407, 408, 303, 287,
	387, 288, 321, 289, 266, 295, 293, 296, 395, 297,
	268, 373, 412, 0, 316, 383, 346, 269, 345, 374,
	411, 410, 278, 437, 443, 444, 533, 0, 449, 611,
	612, 613, 458, 463, 464, 465, 467, 468, 469, 470,
	534, 551, 518, 488, 451, 542, 485, 489, 490, 554,
	0, 0, 0, 442, 335, 336, 0, 314, 262, 263,
	607, 300, 365, 556, 589, 481, 0, 543, 482, 491,
	292, 515, 527, 526, 361, 441, 0, 538, 541, 471,
	606, 0, 535, 550, 609, 549, 603, 371, 0, 392,
	547, 494, 0, 539, 513, 0, 540, 509, 544, 0,
	483, 0, 399, 423, 435, 452, 455, 484, 569, 570,
	571, 267, 454, 573, 574, 575, 576, 577, 578, 579,
	572, 426, 516, 493, 519, 434, 496, 495, 0, 0,
	530, 450, 531, 532, 355, 356, 357, 358, 318, 557,
	285, 453, 381, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 522, 523, 520, 614, 0, 580, 581,
	0, 0, 447, 448, 313, 320, 466, 322, 284, 370,
	315, 432, 329, 0, 459, 524, 460, 583, 586, 584,
	585, 362, 325, 326, 396, 330, 340, 384, 431, 368,
	389, 282, 422, 397, 344, 510, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 564, 563, 562, 561, 560, 559,
	558, 0, 0, 507, 409, 294, 256, 290, 291, 298,
	604, 601, 413, 605, 0, 264, 487, 338, 0, 379,
	312, 552, 553, 0, 0, 212, 213, 214, 215, 216,
	217, 218, 219, 257, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 233, 234, 235, 236, 555,
	227, 228, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 0, 0, 0, 258,
	259, 260, 261, 0, 0, 252, 253, 254, 255, 0,
	0, 0, 438, 439, 440, 462, 424, 486, 602, 0,
	0, 0, 0, 0, 0, 0, 536, 548, 582, 0,
	591, 592, 594, 596, 595, 0, 608, 477, 478, 588,
	367, 0, 492, 525, 514, 597, 480, 0, 0, 0,
	0, 0, 1981, 0, 0, 0, 0, 307, 0, 0,
	337, 529, 511, 521, 512, 497, 498, 499, 506, 317,
	500, 501, 502, 472, 503, 473, 504, 505, 0, 528,
	479, 398, 351, 546, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 1982, 0, 0, 0, 280,
	203, 474, 593, 476, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 1174, 1175, 1176,
	1173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 403, 420, 281,
	394, 433, 286, 401, 276, 366, 390, 0, 0, 272,
	418, 400, 348, 327, 328, 271, 0, 385, 305, 319,
	302, 364, 0, 417, 445, 301, 436, 0, 428, 274,
	0, 427, 363, 414, 419, 349, 343, 273, 416, 347,
	342, 331, 309, 461, 332, 333, 323, 375, 341, 376,
	324, 353, 352, 354, 0, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 587, 0, 0, 590, 0, 430, 0,
	0, 0, 0, 0, 0, 402, 0, 0, 334, 0,
	0, 0, 446, 0, 388, 369, 610, 0, 0, 386,
	339, 415, 377, 421, 404, 429, 382, 378, 265, 405,
	304, 350, 277, 279, 299, 306, 308, 310, 311, 359,
	360, 372, 393, 406, 407, 408, 303, 287, 387, 288,
	321, 289, 266, 295, 293, 296, 395, 297, 268, 373,
	412, 0, 316, 383, 346, 269, 345, 374, 411, 410,
	278, 437, 443, 444, 533, 0, 449, 611, 612, 613,
	458, 463, 464, 465, 467, 468, 469, 470, 534, 551,
	518, 488, 451, 542, 485, 489, 490, 554, 0, 0,
	0, 442, 335, 336, 0, 314, 262, 263, 607, 300,
	365, 556, 589, 481, 0, 543, 482, 491, 292, 515,
	527, 526, 361, 441, 0, 538, 541, 471, 606, 0,
	535, 550, 609, 549, 603, 371, 0, 392, 547, 494,
	0, 539, 513, 0, 540, 509, 544, 0, 483, 0,
	399, 423, 435, 452, 455, 484, 569, 570, 571, 267,
	454, 573, 574, 575, 576, 577, 578, 579, 572, 426,
	516, 493, 519, 434, 496, 495, 0, 0, 530, 450,
	531, 532, 355, 356, 357, 358, 318, 557, 285, 453,
	381, 0, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 523, 520, 614, 0, 580, 581, 0, 0,
	447, 448, 313, 320, 466, 322, 284, 370, 315, 432,
	329, 0, 459, 524, 460, 583, 586, 584, 585, 362,
	325, 326, 396, 330, 340, 384, 431, 368, 389, 282,
	422, 397, 344, 510, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 564, 563, 562, 561, 560, 559, 558, 0,
	0, 507, 409, 294, 256, 290, 291, 298, 604, 601,
	413, 605, 0, 264, 487, 338, 0, 379, 312, 552,
	553, 0, 0, 212, 213, 214, 215, 216, 217, 218,
	219, 257, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 233, 234, 235, 236, 555, 227, 228,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 0, 0, 0, 258, 259, 260,
	261, 0, 0, 252, 253, 254, 255, 0, 0, 0,
	438, 439, 440, 462, 424, 486, 602, 0, 0, 0,
	0, 0, 0, 0, 536, 548, 582, 0, 591, 592,
	594, 596, 595, 180, 608, 477, 478, 588, 0, 0,
	0, 0, 0, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 120, 528, 479, 398, 351, 546, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 2029, 0, 202, 0, 0, 0, 0,
	0, 0, 280, 203, 474, 593, 476, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 0, 417, 445, 301, 436,
	0, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 461, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 590,
	0, 430, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 446, 0, 388, 369, 610,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	611, 612, 613, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 607, 300, 365, 556, 589, 481, 0, 543, 482,
	491, 292, 515, 527, 526, 361, 441, 0, 538, 541,
	471, 606, 0, 535, 550, 609, 549, 603, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 426, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 450, 531, 532, 355, 356, 357, 358, 318,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 614, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 604, 601, 413, 605, 0, 264, 487, 338, 144,
	379, 312, 552, 553, 0, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 257, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 233, 234, 235, 236,
	555, 227, 228, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 0, 0, 0,
	258, 259, 260, 261, 0, 0, 252, 253, 254, 255,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 602,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 595, 180, 608, 477, 478,
	588, 0, 0, 0, 0, 0, 367, 0, 492, 525,
	514, 597, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 120, 528, 479, 398, 351, 546,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 2017, 0, 202, 0,
	0, 0, 0, 0, 0, 280, 203, 474, 593, 476,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 0, 417,
	445, 301, 436, 0, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 461,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	0, 0, 590, 0, 430, 0, 0, 0, 0, 0,
	0, 402, 0, 0, 334, 0, 0, 0, 446, 0,
	388, 369, 610, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 611, 612, 613, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 607, 300, 365, 556, 589, 481,
	0, 543, 482, 491, 292, 515, 527, 526, 361, 441,
	0, 538, 541, 471, 606, 0, 535, 550, 609, 549,
	603, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 426, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 450, 531, 532, 355, 356,
	357, 358, 318, 557, 285, 453, 381, 0, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	614, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 604, 601, 413, 605, 0, 264,
	487, 338, 144, 379, 312, 552, 553, 0, 0, 212,
	213, 214, 215, 216, 217, 218, 219, 257, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 233,
	234, 235, 236, 555, 227, 228, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	0, 0, 0, 258, 259, 260, 261, 0, 0, 252,
	253, 254, 255, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 602, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 595, 0,
	608, 477, 478, 588, 367, 0, 492, 525, 514, 597,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 307, 974, 0, 337, 529, 511, 521, 512, 497,
	498, 499, 506, 317, 500, 501, 502, 472, 503, 473,
	504, 505, 0, 528, 479, 398, 351, 546, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 981, 982, 0,
	0, 0, 0, 280, 203, 474, 593, 476, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 403, 969, 281, 394, 433, 286, 401, 276, 366,
	390, 0, 0, 272, 418, 400, 348, 327, 328, 271,
	0, 385, 305, 319, 302, 364, 0, 417, 445, 301,
	436, 959, 428, 274, 958, 427, 363, 414, 419, 349,
	343, 273, 416, 347, 342, 331, 309, 461, 332, 333,
	323, 375, 341, 376, 324, 353, 352, 354, 0, 0,
	0, 0, 0, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 587, 0, 0,
	590, 0, 430, 0, 0, 0, 0, 0, 0, 402,
	0, 0, 334, 0, 0, 0, 446, 0, 388, 369,
	610, 0, 0, 386, 339, 415, 377, 421, 404, 429,
	972, 378, 265, 405, 304, 350, 277, 279, 299, 306,
	308, 310, 311, 359, 360, 372, 393, 406, 407, 408,
	303, 287, 387, 288, 321, 289, 266, 295, 293, 296,
	395, 297, 268, 373, 412, 0, 316, 383, 346, 269,
	345, 374, 411, 410, 278, 437, 443, 444, 533, 0,
	449, 611, 612, 613, 458, 463, 464, 465, 467, 468,
	469, 470, 534, 551, 518, 488, 451, 542, 485, 489,
	490, 554, 0, 0, 0, 442, 335, 336, 0, 314,
	262, 263, 607, 300, 365, 556, 589, 481, 0, 543,
	482, 491, 292, 515, 527, 526, 361, 441, 0, 538,
	541, 471, 606, 0, 535, 550, 609, 549, 603, 371,
	0, 392, 547, 494, 0, 539, 513, 0, 540, 509,
	544, 0, 483, 0, 399, 423, 435, 452, 455, 484,
	569, 570, 571, 267, 454, 573, 574, 575, 576, 577,
	578, 973, 572, 426, 516, 493, 519, 434, 496, 495,
	0, 0, 530, 976, 531, 532, 355, 356, 357, 358,
	318, 557, 285, 453, 381, 0, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 522, 523, 520, 614, 0,
	580, 581, 0, 0, 447, 448, 313, 320, 466, 322,
	284, 370, 315, 432, 329, 0, 459, 524, 460, 583,
	586, 584, 585, 983, 970, 979, 971, 330, 340, 384,
	431, 368, 389, 282, 422, 397, 980, 510, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 564, 563, 562, 561,
	560, 559, 558, 0, 0, 507, 409, 294, 256, 290,
	291, 298, 604, 601, 413, 605, 0, 264, 487, 338,
	0, 379, 312, 552, 553, 0, 0, 212, 213, 214,
	215, 216, 217, 218, 219, 257, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 233, 234, 235,
	236, 555, 227, 228, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 0, 0,
	0, 258, 259, 260, 261, 0, 0, 252, 253, 254,
	255, 0, 0, 0, 438, 439, 440, 462, 424, 486,
	602, 0, 0, 0, 0, 0, 0, 0, 536, 548,
	582, 0, 591, 592, 594, 596, 595, 180, 608, 477,
	478, 588, 0, 0, 0, 0, 0, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 120, 528, 479, 398, 351,
	546, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1914, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 280, 203, 474, 593,
	476, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 0,
	417, 445, 301, 436, 0, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	461, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 590, 0, 430, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 446,
	0, 388, 369, 610, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 611, 612, 613, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 607, 300, 365, 556, 589,
	481, 0, 543, 482, 491, 292, 515, 527, 526, 361,
	441, 0, 538, 541, 471, 606, 0, 535, 550, 609,
	549, 603, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 426, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 450, 531, 532, 355,
	356, 357, 358, 318, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 614, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 604, 601, 413, 605, 0,
	264, 487, 338, 144, 379, 312, 552, 553, 0, 0,
	212, 213, 214, 215, 216, 217, 218, 219, 257, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	233, 234, 235, 236, 555, 227, 228, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 0, 0, 0, 258, 259, 260, 261, 0, 0,
	252, 253, 254, 255, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 602, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 595,
	0, 608, 477, 478, 588, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 0, 528, 479, 398, 351, 546, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 981, 982,
	0, 0, 0, 0, 280, 203, 474, 593, 476, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 985,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 0, 417, 445,
	301, 436, 959, 428, 274, 958, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 461, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 590, 0, 430, 0, 0, 0, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 446, 0, 388,
	369, 610, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 611, 612, 613, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 607, 300, 365, 556, 589, 481, 0,
	543, 482, 491, 292, 515, 527, 526, 361, 441, 0,
	538, 541, 471, 606, 0, 535, 550, 609, 549, 603,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 426, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 450, 531, 532, 355, 356, 357,
	358, 318, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 614,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 983, 1933, 979, 1934, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 980, 510, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 604, 601, 413, 605, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 212, 213,
	214, 215, 216, 217, 218, 219, 257, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 233, 234,
	235, 236, 555, 227, 228, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 0,
	0, 0, 258, 259, 260, 261, 0, 0, 252, 253,
	254, 255, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 602, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 595, 0, 608,
	477, 478, 588, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 2748, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 0, 528, 479, 398, 351, 546, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 280, 203, 474, 593, 476, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 0, 417, 445, 301, 436,
	0, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 461, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 2751, 0, 0, 2750, 587, 0, 0, 590,
	0, 430, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 446, 0, 388, 369, 610,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	611, 612, 613, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 607, 300, 365, 556, 589, 481, 0, 543, 482,
	491, 292, 515, 527, 526, 361, 441, 0, 538, 541,
	471, 606, 0, 535, 550, 609, 549, 603, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 426, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 450, 531, 532, 355, 356, 357, 358, 318,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 614, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 604, 601, 413, 605, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 257, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 233, 234, 235, 236,
	555, 227, 228, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 0, 0, 0,
	258, 259, 260, 261, 0, 0, 252, 253, 254, 255,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 602,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 595, 0, 608, 477, 478,
	588, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 307, 1440,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 0,
	528, 479, 398, 351, 546, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 1438, 0, 0, 0,
	280, 203, 474, 593, 476, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 0, 0, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 0, 417, 445, 301, 436, 0, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 461, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 0, 0, 590, 0, 430,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 446, 0, 388, 369, 610, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 611, 612,
	613, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 607,
	300, 365, 556, 589, 481, 0, 543, 482, 491, 292,
	515, 527, 526, 361, 441, 0, 538, 541, 471, 606,
	0, 535, 550, 609, 549, 603, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	426, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	450, 531, 532, 355, 356, 357, 358, 318, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 614, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 604,
	601, 413, 605, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 257, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 233, 234, 235, 236, 555, 227,
	228, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 0, 0, 0, 258, 259,
	260, 261, 0, 0, 252, 253, 254, 255, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 602, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 595, 0, 608, 477, 478, 588, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 1434, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 0, 528, 479,
	398, 351, 546, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 1438, 0, 0, 0, 280, 203,
	474, 593, 476, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 0, 417, 445, 301, 436, 0, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 461, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 0, 0, 590, 0, 430, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 446, 0, 388, 369, 610, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 611, 612, 613, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 607, 300, 365,
	556, 589, 481, 0, 543, 482, 491, 292, 515, 527,
	526, 361, 441, 0, 538, 541, 471, 606, 0, 535,
	550, 609, 549, 603, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 426, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 450, 531,
	532, 355, 356, 357, 358, 318, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 614, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 604, 601, 413,
	605, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 212, 213, 214, 215, 216, 217, 218, 219,
	257, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 233, 234, 235, 236, 555, 227, 228, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 0, 0, 0, 258, 259, 260, 261,
	0, 0, 252, 253, 254, 255, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 602, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 595, 0, 608, 477, 478, 588, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 0, 528, 479, 398, 351,
	546, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3697, 0, 202,
	800, 0, 0, 0, 0, 0, 280, 203, 474, 593,
	476, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 0,
	417, 445, 301, 436, 0, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	461, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 590, 0, 430, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 446,
	0, 388, 369, 610, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 611, 612, 613, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 607, 300, 365, 556, 589,
	481, 0, 543, 482, 491, 292, 515, 527, 526, 361,
	441, 0, 538, 541, 471, 606, 0, 535, 550, 609,
	549, 603, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 426, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 450, 531, 532, 355,
	356, 357, 358, 318, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 614, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 604, 601, 413, 605, 0,
	264, 487, 338, 0, 379, 312, 552, 553, 0, 0,
	212, 213, 214, 215, 216, 217, 218, 219, 257, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	233, 234, 235, 236, 555, 227, 228, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 0, 0, 0, 258, 259, 260, 261, 0, 0,
	252, 253, 254, 255, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 602, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 595,
	0, 608, 477, 478, 588, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 0, 528, 479, 398, 351, 546, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	1438, 0, 0, 0, 280, 203, 474, 593, 476, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 0, 417, 445,
	301, 436, 0, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 461, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 590, 0, 430, 0, 0, 0, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 446, 0, 388,
	369, 610, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 611, 612, 613, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 607, 300, 365, 556, 589, 481, 0,
	543, 482, 491, 292, 515, 527, 526, 361, 441, 0,
	538, 541, 471, 606, 0, 535, 550, 609, 549, 603,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 426, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 450, 531, 532, 355, 356, 357,
	358, 318, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 614,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 604, 601, 413, 605, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 212, 213,
	214, 215, 216, 217, 218, 219, 257, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 233, 234,
	235, 236, 555, 227, 228, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 0,
	0, 0, 258, 259, 260, 261, 0, 0, 252, 253,
	254, 255, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 602, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 595, 0, 608,
	477, 478, 588, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 0, 528, 479, 398, 351, 546, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 1438, 0,
	0, 0, 280, 203, 474, 593, 476, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1640, 0, 0, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 0, 417, 445, 301, 436,
	0, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 461, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 590,
	0, 430, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 446, 0, 388, 369, 610,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	611, 612, 613, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 607, 300, 365, 556, 589, 481, 0, 543, 482,
	491, 292, 515, 527, 526, 361, 441, 0, 538, 541,
	471, 606, 0, 535, 550, 609, 549, 603, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 426, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 450, 531, 532, 355, 356, 357, 358, 318,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 614, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 604, 601, 413, 605, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 257, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 233, 234, 235, 236,
	555, 227, 228, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 0, 0, 0,
	258, 259, 260, 261, 0, 0, 252, 253, 254, 255,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 602,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 595, 0, 608, 477, 478,
	588, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 0, 2334, 0, 0, 0, 0, 307, 0,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 0,
	528, 479, 398, 351, 546, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 2336, 0, 0, 0,
	280, 203, 474, 593, 476, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 0, 417, 445, 301, 436, 0, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 461, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 0, 0, 590, 0, 430,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 446, 0, 388, 369, 610, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 611, 612,
	613, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 607,
	300, 365, 556, 589, 481, 0, 543, 482, 491, 292,
	515, 527, 526, 361, 441, 0, 538, 541, 471, 606,
	0, 535, 550, 609, 549, 603, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	426, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	450, 531, 532, 355, 356, 357, 358, 318, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 614, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 604,
	601, 413, 605, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 257, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 233, 234, 235, 236, 555, 227,
	228, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 0, 0, 0, 258, 259,
	260, 261, 0, 0, 252, 253, 254, 255, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 602, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 595, 0, 608, 477, 478, 588, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 2355, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 0, 528, 479,
	398, 351, 546, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 1438, 0, 0, 0, 280, 203,
	474, 593, 476, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 0, 417, 445, 301, 436, 0, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 461, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 0, 0, 590, 0, 430, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 446, 0, 388, 369, 610, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 611, 612, 613, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 607, 300, 365,
	556, 589, 481, 0, 543, 482, 491, 292, 515, 527,
	526, 361, 441, 0, 538, 541, 471, 606, 0, 535,
	550, 609, 549, 603, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 426, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 450, 531,
	532, 355, 356, 357, 358, 318, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 614, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 604, 601, 413,
	605, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 212, 213, 214, 215, 216, 217, 218, 219,
	257, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 233, 234, 235, 236, 555, 227, 228, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 0, 0, 0, 258, 259, 260, 261,
	0, 0, 252, 253, 254, 255, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 602, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 595, 0, 608, 477, 478, 588, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 621, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 0, 528, 479, 398, 351,
	546, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 280, 203, 474, 593,
	476, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 0,
	417, 445, 301, 436, 0, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	461, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 590, 0, 430, 0, 620, 0, 0,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 446,
	0, 388, 369, 610, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 611, 612, 613, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 607, 300, 365, 556, 589,
	481, 0, 543, 482, 491, 292, 515, 527, 526, 361,
	441, 0, 538, 541, 471, 606, 0, 535, 550, 609,
	549, 603, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 426, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 450, 531, 532, 355,
	356, 357, 358, 318, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 614, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 604, 601, 413, 605, 0,
	264, 487, 338, 0, 379, 312, 552, 553, 0, 0,
	212, 213, 214, 215, 216, 217, 218, 219, 257, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	233, 234, 235, 236, 555, 227, 228, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 0, 0, 0, 258, 259, 260, 261, 0, 0,
	252, 253, 254, 255, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 602, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 595,
	0, 608, 477, 478, 588, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 0, 528, 479, 398, 351, 546, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 800, 0,
	0, 0, 0, 0, 280, 203, 474, 593, 476, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 0, 417, 445,
	301, 436, 0, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 461, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 590, 0, 430, 0, 0, 0, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 446, 0, 388,
	369, 610, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 611, 612, 613, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 607, 300, 365, 556, 589, 481, 0,
	543, 482, 491, 292, 515, 527, 526, 361, 441, 0,
	538, 541, 471, 606, 0, 535, 550, 609, 549, 603,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 426, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 450, 531, 532, 355, 356, 357,
	358, 318, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 614,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 604, 601, 413, 605, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 212, 213,
	214, 215, 216, 217, 218, 219, 257, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 233, 234,
	235, 236, 555, 227, 228, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 0,
	0, 0, 258, 259, 260, 261, 0, 0, 252, 253,
	254, 255, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 602, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 595, 0, 608,
	477, 478, 588, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 0, 528, 479, 398, 351, 546, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3676, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 280, 203, 474, 593, 476, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 0, 417, 445, 301, 436,
	0, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 461, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 590,
	0, 430, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 446, 0, 388, 369, 610,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	611, 612, 613, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 607, 300, 365, 556, 589, 481, 0, 543, 482,
	491, 292, 515, 527, 526, 361, 441, 0, 538, 541,
	471, 606, 0, 535, 550, 609, 549, 603, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 426, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 450, 531, 532, 355, 356, 357, 358, 318,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 614, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 604, 601, 413, 605, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 257, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 233, 234, 235, 236,
	555, 227, 228, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 0, 0, 0,
	258, 259, 260, 261, 0, 0, 252, 253, 254, 255,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 602,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 595, 0, 608, 477, 478,
	588, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 307, 0,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 0,
	528, 479, 398, 351, 546, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 3466, 0, 0, 0,
	280, 203, 474, 593, 476, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 0, 417, 445, 301, 436, 0, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 461, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 0, 0, 590, 0, 430,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 446, 0, 388, 369, 610, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 611, 612,
	613, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 607,
	300, 365, 556, 589, 481, 0, 543, 482, 491, 292,
	515, 527, 526, 361, 441, 0, 538, 541, 471, 606,
	0, 535, 550, 609, 549, 603, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	426, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	450, 531, 532, 355, 356, 357, 358, 318, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 614, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 604,
	601, 413, 605, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 257, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 233, 234, 235, 236, 555, 227,
	228, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 0, 0, 0, 258, 259,
	260, 261, 0, 0, 252, 253, 254, 255, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 602, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 595, 0, 608, 477, 478, 588, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 0, 528, 479,
	398, 351, 546, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 280, 203,
	474, 593, 476, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 0, 417, 445, 301, 436, 0, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 461, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 0, 0, 590, 0, 430, 0, 0,
	0, 3589, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 446, 0, 388, 369, 610, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 611, 612, 613, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 607, 300, 365,
	556, 589, 481, 0, 543, 482, 491, 292, 515, 527,
	526, 361, 441, 0, 538, 541, 471, 606, 0, 535,
	550, 609, 549, 603, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 426, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 450, 531,
	532, 355, 356, 357, 358, 318, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 614, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 604, 601, 413,
	605, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 212, 213, 214, 215, 216, 217, 218, 219,
	257, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 233, 234, 235, 236, 555, 227, 228, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 0, 0, 0, 258, 259, 260, 261,
	0, 0, 252, 253, 254, 255, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 602, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 595, 0, 608, 477, 478, 588, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 0, 528, 479, 398, 351,
	546, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3322, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 280, 203, 474, 593,
	476, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 0,
	417, 445, 301, 436, 0, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	461, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 590, 0, 430, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 446,
	0, 388, 369, 610, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 611, 612, 613, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 607, 300, 365, 556, 589,
	481, 0, 543, 482, 491, 292, 515, 527, 526, 361,
	441, 0, 538, 541, 471, 606, 0, 535, 550, 609,
	549, 603, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 426, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 450, 531, 532, 355,
	356, 357, 358, 318, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 614, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 604, 601, 413, 605, 0,
	264, 487, 338, 0, 379, 312, 552, 553, 0, 0,
	212, 213, 214, 215, 216, 217, 218, 219, 257, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	233, 234, 235, 236, 555, 227, 228, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 0, 0, 0, 258, 259, 260, 261, 0, 0,
	252, 253, 254, 255, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 602, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 595,
	0, 608, 477, 478, 588, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 0, 528, 479, 398, 351, 546, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3481, 0, 202, 0, 0,
	0, 0, 0, 0, 280, 203, 474, 593, 476, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 0, 417, 445,
	301, 436, 0, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 461, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 590, 0, 430, 0, 0, 0, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 446, 0, 388,
	369, 610, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 611, 612, 613, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 607, 300, 365, 556, 589, 481, 0,
	543, 482, 491, 292, 515, 527, 526, 361, 441, 0,
	538, 541, 471, 606, 0, 535, 550, 609, 549, 603,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 426, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 450, 531, 532, 355, 356, 357,
	358, 318, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 614,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 604, 601, 413, 605, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 212, 213,
	214, 215, 216, 217, 218, 219, 257, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 233, 234,
	235, 236, 555, 227, 228, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 0,
	0, 0, 258, 259, 260, 261, 0, 0, 252, 253,
	254, 255, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 602, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 595, 0, 608,
	477, 478, 588, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 0, 528, 479, 398, 351, 546, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 280, 203, 474, 593, 476, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 0, 417, 445, 301, 436,
	0, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 461, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 590,
	0, 430, 0, 0, 0, 3409, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 446, 0, 388, 369, 610,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	611, 612, 613, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 607, 300, 365, 556, 589, 481, 0, 543, 482,
	491, 292, 515, 527, 526, 361, 441, 0, 538, 541,
	471, 606, 0, 535, 550, 609, 549, 603, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 426, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 450, 531, 532, 355, 356, 357, 358, 318,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 614, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 604, 601, 413, 605, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 257, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 233, 234, 235, 236,
	555, 227, 228, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 0, 0, 0,
	258, 259, 260, 261, 0, 0, 252, 253, 254, 255,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 602,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 595, 0, 608, 477, 478,
	588, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 307, 0,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 0,
	528, 479, 398, 351, 546, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 2966, 0, 0, 0,
	280, 203, 474, 593, 476, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 0, 417, 445, 301, 436, 0, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 461, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 0, 0, 590, 0, 430,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 446, 0, 388, 369, 610, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 611, 612,
	613, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 607,
	300, 365, 556, 589, 481, 0, 543, 482, 491, 292,
	515, 527, 526, 361, 441, 0, 538, 541, 471, 606,
	0, 535, 550, 609, 549, 603, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	426, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	450, 531, 532, 355, 356, 357, 358, 318, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 614, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 604,
	601, 413, 605, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 257, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 233, 234, 235, 236, 555, 227,
	228, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 0, 0, 0, 258, 259,
	260, 261, 0, 0, 252, 253, 254, 255, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 602, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 595, 0, 608, 477, 478, 588, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 0, 528, 479,
	398, 351, 546, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 280, 203,
	474, 593, 476, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2984,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 0, 417, 445, 301, 436, 0, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 461, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 0, 0, 590, 0, 430, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 446, 0, 388, 369, 610, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 611, 612, 613, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 607, 300, 365,
	556, 589, 481, 0, 543, 482, 491, 292, 515, 527,
	526, 361, 441, 0, 538, 541, 471, 606, 0, 535,
	550, 609, 549, 603, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 426, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 450, 531,
	532, 355, 356, 357, 358, 318, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 614, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 604, 601, 413,
	605, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 212, 213, 214, 215, 216, 217, 218, 219,
	257, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 233, 234, 235, 236, 555, 227, 228, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 0, 0, 0, 258, 259, 260, 261,
	0, 0, 252, 253, 254, 255, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 602, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 595, 0, 608, 477, 478, 588, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 0, 528, 479, 398, 351,
	546, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1914, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 280, 203, 474, 593,
	476, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 0,
	417, 445, 301, 436, 0, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	461, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 590, 0, 430, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 446,
	0, 388, 369, 610, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 611, 612, 613, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 607, 300, 365, 556, 589,
	481, 0, 543, 482, 491, 292, 515, 527, 526, 361,
	441, 0, 538, 541, 471, 606, 0, 535, 550, 609,
	549, 603, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 426, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 450, 531, 532, 355,
	356, 357, 358, 318, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 614, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 604, 601, 413, 605, 0,
	264, 487, 338, 0, 379, 312, 552, 553, 0, 0,
	212, 213, 214, 215, 216, 217, 218, 219, 257, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	233, 234, 235, 236, 555, 227, 228, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 0, 0, 0, 258, 259, 260, 261, 0, 0,
	252, 253, 254, 255, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 602, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 595,
	0, 608, 477, 478, 588, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 0, 528, 479, 398, 351, 546, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 280, 203, 474, 593, 476, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3081, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 0, 417, 445,
	301, 436, 0, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 461, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 590, 0, 430, 0, 0, 0, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 446, 0, 388,
	369, 610, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 611, 612, 613, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 607, 300, 365, 556, 589, 481, 0,
	543, 482, 491, 292, 515, 527, 526, 361, 441, 0,
	538, 541, 471, 606, 0, 535, 550, 609, 549, 603,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 426, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 450, 531, 532, 355, 356, 357,
	358, 318, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 614,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 604, 601, 413, 605, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 212, 213,
	214, 215, 216, 217, 218, 219, 257, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 233, 234,
	235, 236, 555, 227, 228, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 0,
	0, 0, 258, 259, 260, 261, 0, 0, 252, 253,
	254, 255, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 602, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 595, 0, 608,
	477, 478, 588, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 0, 528, 479, 398, 351, 546, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 2935, 0,
	0, 0, 280, 203, 474, 593, 476, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 0, 417, 445, 301, 436,
	0, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 461, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 590,
	0, 430, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 446, 0, 388, 369, 610,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	611, 612, 613, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 607, 300, 365, 556, 589, 481, 0, 543, 482,
	491, 292, 515, 527, 526, 361, 441, 0, 538, 541,
	471, 606, 0, 535, 550, 609, 549, 603, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 426, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 450, 531, 532, 355, 356, 357, 358, 318,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 614, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 604, 601, 413, 605, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 257, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 233, 234, 235, 236,
	555, 227, 228, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 0, 0, 0,
	258, 259, 260, 261, 0, 0, 252, 253, 254, 255,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 602,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 595, 0, 608, 477, 478,
	588, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 307, 0,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 0,
	528, 479, 398, 351, 546, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	280, 203, 474, 593, 476, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2845, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 0, 417, 445, 301, 436, 0, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 461, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 0, 0, 590, 0, 430,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 446, 0, 388, 369, 610, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 611, 612,
	613, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 607,
	300, 365, 556, 589, 481, 0, 543, 482, 491, 292,
	515, 527, 526, 361, 441, 0, 538, 541, 471, 606,
	0, 535, 550, 609, 549, 603, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	426, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	450, 531, 532, 355, 356, 357, 358, 318, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 614, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 604,
	601, 413, 605, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 257, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 233, 234, 235, 236, 555, 227,
	228, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 0, 0, 0, 258, 259,
	260, 261, 0, 0, 252, 253, 254, 255, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 602, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 595, 0, 608, 477, 478, 588, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 0, 528, 479,
	398, 351, 546, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 1438, 0, 0, 0, 280, 203,
	474, 593, 476, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 0, 417, 445, 301, 436, 0, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 461, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 0, 0, 590, 0, 430, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 446, 0, 388, 369, 610, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 611, 612, 613, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 607, 300, 365,
	556, 589, 481, 0, 543, 482, 491, 292, 515, 527,
	526, 361, 441, 0, 538, 541, 471, 606, 0, 535,
	550, 609, 549, 603, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 426, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 450, 531,
	532, 355, 356, 357, 358, 318, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 614, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 604, 601, 413,
	605, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 212, 213, 214, 215, 216, 217, 218, 219,
	257, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 233, 234, 235, 236, 555, 227, 228, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 0, 0, 0, 258, 259, 260, 261,
	0, 0, 252, 253, 254, 255, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 602, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 595, 0, 608, 477, 478, 588, 367, 0, 492,
	525, 514, 597, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 337, 529, 511,
	521, 512, 497, 498, 499, 506, 317, 500, 501, 502,
	472, 503, 473, 504, 505, 0, 528, 479, 398, 351,
	546, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 2336, 0, 0, 0, 280, 203, 474, 593,
	476, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 403, 420, 281, 394, 433, 286,
	401, 276, 366, 390, 0, 0, 272, 418, 400, 348,
	327, 328, 271, 0, 385, 305, 319, 302, 364, 0,
	417, 445, 301, 436, 0, 428, 274, 0, 427, 363,
	414, 419, 349, 343, 273, 416, 347, 342, 331, 309,
	461, 332, 333, 323, 375, 341, 376, 324, 353, 352,
	354, 0, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 590, 0, 430, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 334, 0, 0, 0, 446,
	0, 388, 369, 610, 0, 0, 386, 339, 415, 377,
	421, 404, 429, 382, 378, 265, 405, 304, 350, 277,
	279, 299, 306, 308, 310, 311, 359, 360, 372, 393,
	406, 407, 408, 303, 287, 387, 288, 321, 289, 266,
	295, 293, 296, 395, 297, 268, 373, 412, 0, 316,
	383, 346, 269, 345, 374, 411, 410, 278, 437, 443,
	444, 533, 0, 449, 611, 612, 613, 458, 463, 464,
	465, 467, 468, 469, 470, 534, 551, 518, 488, 451,
	542, 485, 489, 490, 554, 0, 0, 0, 442, 335,
	336, 0, 314, 262, 263, 607, 300, 365, 556, 589,
	481, 0, 543, 482, 491, 292, 515, 527, 526, 361,
	441, 0, 538, 541, 471, 606, 0, 535, 550, 609,
	549, 603, 371, 0, 392, 547, 494, 0, 539, 513,
	0, 540, 509, 544, 0, 483, 0, 399, 423, 435,
	452, 455, 484, 569, 570, 571, 267, 454, 573, 574,
	575, 576, 577, 578, 579, 572, 426, 516, 493, 519,
	434, 496, 495, 0, 0, 530, 450, 531, 532, 355,
	356, 357, 358, 318, 557, 285, 453, 381, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 523,
	520, 614, 0, 580, 581, 0, 0, 447, 448, 313,
	320, 466, 322, 284, 370, 315, 432, 329, 0, 459,
	524, 460, 583, 586, 584, 585, 362, 325, 326, 396,
	330, 340, 384, 431, 368, 389, 282, 422, 397, 344,
	510, 537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	563, 562, 561, 560, 559, 558, 0, 0, 507, 409,
	294, 256, 290, 291, 298, 604, 601, 413, 605, 0,
	264, 487, 338, 0, 379, 312, 552, 553, 0, 0,
	212, 213, 214, 215, 216, 217, 218, 219, 257, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	233, 234, 235, 236, 555, 227, 228, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 0, 0, 0, 258, 259, 260, 261, 0, 0,
	252, 253, 254, 255, 0, 0, 0, 438, 439, 440,
	462, 424, 486, 602, 0, 0, 0, 0, 0, 0,
	0, 536, 548, 582, 0, 591, 592, 594, 596, 595,
	0, 608, 477, 478, 588, 367, 0, 492, 525, 514,
	597, 480, 0, 0, 2673, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 337, 529, 511, 521, 512,
	497, 498, 499, 506, 317, 500, 501, 502, 472, 503,
	473, 504, 505, 0, 528, 479, 398, 351, 546, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 280, 203, 474, 593, 476, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 403, 420, 281, 394, 433, 286, 401, 276,
	366, 390, 0, 0, 272, 418, 400, 348, 327, 328,
	271, 0, 385, 305, 319, 302, 364, 0, 417, 445,
	301, 436, 0, 428, 274, 0, 427, 363, 414, 419,
	349, 343, 273, 416, 347, 342, 331, 309, 461, 332,
	333, 323, 375, 341, 376, 324, 353, 352, 354, 0,
	0, 0, 0, 0, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 590, 0, 430, 0, 0, 0, 0, 0, 0,
	402, 0, 0, 334, 0, 0, 0, 446, 0, 388,
	369, 610, 0, 0, 386, 339, 415, 377, 421, 404,
	429, 382, 378, 265, 405, 304, 350, 277, 279, 299,
	306, 308, 310, 311, 359, 360, 372, 393, 406, 407,
	408, 303, 287, 387, 288, 321, 289, 266, 295, 293,
	296, 395, 297, 268, 373, 412, 0, 316, 383, 346,
	269, 345, 374, 411, 410, 278, 437, 443, 444, 533,
	0, 449, 611, 612, 613, 458, 463, 464, 465, 467,
	468, 469, 470, 534, 551, 518, 488, 451, 542, 485,
	489, 490, 554, 0, 0, 0, 442, 335, 336, 0,
	314, 262, 263, 607, 300, 365, 556, 589, 481, 0,
	543, 482, 491, 292, 515, 527, 526, 361, 441, 0,
	538, 541, 471, 606, 0, 535, 550, 609, 549, 603,
	371, 0, 392, 547, 494, 0, 539, 513, 0, 540,
	509, 544, 0, 483, 0, 399, 423, 435, 452, 455,
	484, 569, 570, 571, 267, 454, 573, 574, 575, 576,
	577, 578, 579, 572, 426, 516, 493, 519, 434, 496,
	495, 0, 0, 530, 450, 531, 532, 355, 356, 357,
	358, 318, 557, 285, 453, 381, 0, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 523, 520, 614,
	0, 580, 581, 0, 0, 447, 448, 313, 320, 466,
	322, 284, 370, 315, 432, 329, 0, 459, 524, 460,
	583, 586, 584, 585, 362, 325, 326, 396, 330, 340,
	384, 431, 368, 389, 282, 422, 397, 344, 510, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 563, 562,
	561, 560, 559, 558, 0, 0, 507, 409, 294, 256,
	290, 291, 298, 604, 601, 413, 605, 0, 264, 487,
	338, 0, 379, 312, 552, 553, 0, 0, 212, 213,
	214, 215, 216, 217, 218, 219, 257, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 233, 234,
	235, 236, 555, 227, 228, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 0,
	0, 0, 258, 259, 260, 261, 0, 0, 252, 253,
	254, 255, 0, 0, 0, 438, 439, 440, 462, 424,
	486, 602, 0, 0, 0, 0, 0, 0, 0, 536,
	548, 582, 0, 591, 592, 594, 596, 595, 0, 608,
	477, 478, 588, 367, 0, 492, 525, 514, 597, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 337, 529, 511, 521, 512, 497, 498,
	499, 506, 317, 500, 501, 502, 472, 503, 473, 504,
	505, 0, 528, 479, 398, 351, 546, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 280, 203, 474, 593, 476, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2049, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	403, 420, 281, 394, 433, 286, 401, 276, 366, 390,
	0, 0, 272, 418, 400, 348, 327, 328, 271, 0,
	385, 305, 319, 302, 364, 0, 417, 445, 301, 436,
	0, 428, 274, 0, 427, 363, 414, 419, 349, 343,
	273, 416, 347, 342, 331, 309, 461, 332, 333, 323,
	375, 341, 376, 324, 353, 352, 354, 0, 0, 0,
	0, 0, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 590,
	0, 430, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 334, 0, 0, 0, 446, 0, 388, 369, 610,
	0, 0, 386, 339, 415, 377, 421, 404, 429, 382,
	378, 265, 405, 304, 350, 277, 279, 299, 306, 308,
	310, 311, 359, 360, 372, 393, 406, 407, 408, 303,
	287, 387, 288, 321, 289, 266, 295, 293, 296, 395,
	297, 268, 373, 412, 0, 316, 383, 346, 269, 345,
	374, 411, 410, 278, 437, 443, 444, 533, 0, 449,
	611, 612, 613, 458, 463, 464, 465, 467, 468, 469,
	470, 534, 551, 518, 488, 451, 542, 485, 489, 490,
	554, 0, 0, 0, 442, 335, 336, 0, 314, 262,
	263, 607, 300, 365, 556, 589, 481, 0, 543, 482,
	491, 292, 515, 527, 526, 361, 441, 0, 538, 541,
	471, 606, 0, 535, 550, 609, 549, 603, 371, 0,
	392, 547, 494, 0, 539, 513, 0, 540, 509, 544,
	0, 483, 0, 399, 423, 435, 452, 455, 484, 569,
	570, 571, 267, 454, 573, 574, 575, 576, 577, 578,
	579, 572, 426, 516, 493, 519, 434, 496, 495, 0,
	0, 530, 450, 531, 532, 355, 356, 357, 358, 318,
	557, 285, 453, 381, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 523, 520, 614, 0, 580,
	581, 0, 0, 447, 448, 313, 320, 466, 322, 284,
	370, 315, 432, 329, 0, 459, 524, 460, 583, 586,
	584, 585, 362, 325, 326, 396, 330, 340, 384, 431,
	368, 389, 282, 422, 397, 344, 510, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 563, 562, 561, 560,
	559, 558, 0, 0, 507, 409, 294, 256, 290, 291,
	298, 604, 601, 413, 605, 0, 264, 487, 338, 0,
	379, 312, 552, 553, 0, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 257, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 233, 234, 235, 236,
	555, 227, 228, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 0, 0, 0,
	258, 259, 260, 261, 0, 0, 252, 253, 254, 255,
	0, 0, 0, 438, 439, 440, 462, 424, 486, 602,
	0, 0, 0, 0, 0, 0, 0, 536, 548, 582,
	0, 591, 592, 594, 596, 595, 0, 608, 477, 478,
	588, 367, 0, 492, 525, 514, 597, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 307, 0,
	0, 337, 529, 511, 521, 512, 497, 498, 499, 506,
	317, 500, 501, 502, 472, 503, 473, 504, 505, 0,
	528, 479, 398, 351, 546, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	280, 203, 474, 593, 476, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2413, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 403, 420,
	281, 394, 433, 286, 401, 276, 366, 390, 0, 0,
	272, 418, 400, 348, 327, 328, 271, 0, 385, 305,
	319, 302, 364, 0, 417, 445, 301, 436, 0, 428,
	274, 0, 427, 363, 414, 419, 349, 343, 273, 416,
	347, 342, 331, 309, 461, 332, 333, 323, 375, 341,
	376, 324, 353, 352, 354, 0, 0, 0, 0, 0,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 0, 0, 590, 0, 430,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 334,
	0, 0, 0, 446, 0, 388, 369, 610, 0, 0,
	386, 339, 415, 377, 421, 404, 429, 382, 378, 265,
	405, 304, 350, 277, 279, 299, 306, 308, 310, 311,
	359, 360, 372, 393, 406, 407, 408, 303, 287, 387,
	288, 321, 289, 266, 295, 293, 296, 395, 297, 268,
	373, 412, 0, 316, 383, 346, 269, 345, 374, 411,
	410, 278, 437, 443, 444, 533, 0, 449, 611, 612,
	613, 458, 463, 464, 465, 467, 468, 469, 470, 534,
	551, 518, 488, 451, 542, 485, 489, 490, 554, 0,
	0, 0, 442, 335, 336, 0, 314, 262, 263, 607,
	300, 365, 556, 589, 481, 0, 543, 482, 491, 292,
	515, 527, 526, 361, 441, 0, 538, 541, 471, 606,
	0, 535, 550, 609, 549, 603, 371, 0, 392, 547,
	494, 0, 539, 513, 0, 540, 509, 544, 0, 483,
	0, 399, 423, 435, 452, 455, 484, 569, 570, 571,
	267, 454, 573, 574, 575, 576, 577, 578, 579, 572,
	426, 516, 493, 519, 434, 496, 495, 0, 0, 530,
	450, 531, 532, 355, 356, 357, 358, 318, 557, 285,
	453, 381, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 520, 614, 0, 580, 581, 0,
	0, 447, 448, 313, 320, 466, 322, 284, 370, 315,
	432, 329, 0, 459, 524, 460, 583, 586, 584, 585,
	362, 325, 326, 396, 330, 340, 384, 431, 368, 389,
	282, 422, 397, 344, 510, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 564, 563, 562, 561, 560, 559, 558,
	0, 0, 507, 409, 294, 256, 290, 291, 298, 604,
	601, 413, 605, 0, 264, 487, 338, 0, 379, 312,
	552, 553, 0, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 257, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 233, 234, 235, 236, 555, 227,
	228, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 0, 0, 0, 258, 259,
	260, 261, 0, 0, 252, 253, 254, 255, 0, 0,
	0, 438, 439, 440, 462, 424, 486, 602, 0, 0,
	0, 0, 0, 0, 0, 536, 548, 582, 0, 591,
	592, 594, 596, 595, 0, 608, 477, 478, 588, 367,
	0, 492, 525, 514, 597, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 337,
	529, 511, 521, 512, 497, 498, 499, 506, 317, 500,
	501, 502, 472, 503, 473, 504, 505, 0, 528, 479,
	398, 351, 546, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 2411, 0, 0, 0, 280, 203,
	474, 593, 476, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 403, 420, 281, 394,
	433, 286, 401, 276, 366, 390, 0, 0, 272, 418,
	400, 348, 327, 328, 271, 0, 385, 305, 319, 302,
	364, 0, 417, 445, 301, 436, 0, 428, 274, 0,
	427, 363, 414, 419, 349, 343, 273, 416, 347, 342,
	331, 309, 461, 332, 333, 323, 375, 341, 376, 324,
	353, 352, 354, 0, 0, 0, 0, 0, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 0, 0, 590, 0, 430, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 334, 0, 0,
	0, 446, 0, 388, 369, 610, 0, 0, 386, 339,
	415, 377, 421, 404, 429, 382, 378, 265, 405, 304,
	350, 277, 279, 299, 306, 308, 310, 311, 359, 360,
	372, 393, 406, 407, 408, 303, 287, 387, 288, 321,
	289, 266, 295, 293, 296, 395, 297, 268, 373, 412,
	0, 316, 383, 346, 269, 345, 374, 411, 410, 278,
	437, 443, 444, 533, 0, 449, 611, 612, 613, 458,
	463, 464, 465, 467, 468, 469, 470, 534, 551, 518,
	488, 451, 542, 485, 489, 490, 554, 0, 0, 0,
	442, 335, 336, 0, 314, 262, 263, 607, 300, 365,
	556, 589, 481, 0, 543, 482, 491, 292, 515, 527,
	526, 361, 441, 0, 538, 541, 471, 606, 0, 535,
	550, 609, 549, 603, 371, 0, 392, 547, 494, 0,
	539, 513, 0, 540, 509, 544, 0, 483, 0, 399,
	423, 435, 452, 455, 484, 569, 570, 571, 267, 454,
	573, 574, 575, 576, 577, 578, 579, 572, 426, 516,
	493, 519, 434, 496, 495, 0, 0, 530, 450, 531,
	532, 355, 356, 357, 358, 318, 557, 285, 453, 381,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 523, 520, 614, 0, 580, 581, 0, 0, 447,
	448, 313, 320, 466, 322, 284, 370, 315, 432, 329,
	0, 459, 524, 460, 583, 586, 584, 585, 362, 325,
	326, 396, 330, 340, 384, 431, 368, 389, 282, 422,
	397, 344, 510, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 564, 563, 562, 561, 560, 559, 558, 0, 0,
	507, 409, 294, 256, 290, 291, 298, 604, 601, 413,
	605, 0, 264, 487, 338, 0, 379, 312, 552, 553,
	0, 0, 212, 213, 214, 215, 216, 217, 218, 219,
	257, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 233, 234, 235, 236, 555, 227, 228, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 0, 0, 0, 258, 259, 260, 261,
	0, 0, 252, 253, 254, 255, 0, 0, 0, 438,
	439, 440, 462, 424, 486, 602, 0, 0, 0, 0,
	0, 0, 0, 536, 548, 582, 0, 591, 592, 594,
	596, 595, 2201, 608, 477, 478, 588, 0, 367, 0,
	492, 525, 514, 597, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 307, 0, 0, 337, 529,
	511, 521, 512, 497, 498, 499, 506, 317, 500, 501,
	502, 472, 503, 473, 504, 505, 0, 528, 479, 398,
	351, 546, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 280, 203, 474,
	593, 476, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 403, 420, 281, 394, 433,
	286, 401, 276, 366, 390, 0, 0, 272, 418, 400,
	348, 327, 328, 271, 0, 385, 305, 319, 302, 364,
	0, 417, 445, 301, 436, 0, 428, 274, 0, 427,
	363, 414, 419, 349, 343, 273, 416, 347, 342, 331,
	309, 461, 332, 333, 323, 375, 341, 376, 324, 353,
	352, 354, 0, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 0, 0, 590, 0, 430, 0, 0, 0,
	0, 0, 0, 402, 0, 0, 334, 0, 0, 0,
	446, 0, 388, 369, 610, 0, 0, 386, 339, 415,
	377, 421, 404, 429, 382, 378, 265, 405, 304, 350,
	277, 279, 299, 306, 308, 310, 311, 359, 360, 372,
	393, 406, 407, 408, 303, 287, 387, 288, 321, 289,
	266, 295, 293, 296, 395, 297, 268, 373, 412, 0,
	316, 383, 346, 269, 345, 374, 411, 410, 278, 437,
	443, 444, 533, 0, 449, 611, 612, 613, 458, 463,
	464, 465, 467, 468, 469, 470, 534, 551, 518, 488,
	451, 542, 485, 489, 490, 554, 0, 0, 0, 442,
	335, 336, 0, 314, 262, 263, 607, 300, 365, 556,
	589, 481, 0, 543, 482, 491, 292, 515, 527, 526,
	361, 441, 0, 538, 541, 471, 606, 0, 535, 550,
	609, 549, 603, 371, 0, 392, 547, 494, 0, 539,
	513, 0, 540, 509, 544, 0, 483, 0, 399, 423,
	435, 452, 455, 484, 569, 570, 571, 267, 454, 573,
	574, 575, 576, 577, 578, 579, 572, 426, 516, 493,
	519, 434, 496, 495, 0, 0, 530, 450, 531, 532,
	355, 356, 357, 358, 318, 557, 285, 453, 381, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 520, 614, 0, 580, 581, 0, 0, 447, 448,
	313, 320, 466, 322, 284, 370, 315, 432, 329, 0,
	459, 524, 460, 583, 586, 584, 585, 362, 325, 326,
	396, 330, 340, 384, 431, 368, 389, 282, 422, 397,
	344, 510, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	564, 563, 562, 561, 560, 559, 558, 0, 0, 507,
	409, 294, 256, 290, 291, 298, 604, 601, 413, 605,
	0, 264, 487, 338, 0, 379, 312, 552, 553, 0,
	0, 212, 213, 214, 215, 216, 217, 218, 219, 257,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 233, 234, 235, 236, 555, 227, 228, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 0, 0, 0, 258, 259, 260, 261, 0,
	0, 252, 253, 254, 255, 0, 0, 0, 438, 439,
	440, 462, 424, 486, 602, 0, 0, 0, 0, 0,
	0, 0, 536, 548, 582, 0, 591, 592, 594, 596,
	595, 0, 608, 477, 478, 588, 367, 0, 492, 525,
	514, 597, 480, 0, 1901, 0, 0, 0, 0, 0,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 0, 528, 479, 398, 351, 546,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 280, 203, 474, 593, 476,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 0, 417,
	445, 301, 436, 0, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 461,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	0, 0, 590, 0, 430, 0, 0, 0, 0, 0,
	0, 402, 0, 0, 334, 0, 0, 0, 446, 0,
	388, 369, 610, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 611, 612, 613, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 607, 300, 365, 556, 589, 481,
	0, 543, 482, 491, 292, 515, 527, 526, 361, 441,
	0, 538, 541, 471, 606, 0, 535, 550, 609, 549,
	603, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 426, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 450, 531, 532, 355, 356,
	357, 358, 318, 557, 285, 453, 381, 0, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	614, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 604, 601, 413, 605, 0, 264,
	487, 338, 0, 379, 312, 552, 553, 0, 0, 212,
	213, 214, 215, 216, 217, 218, 219, 257, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 233,
	234, 235, 236, 555, 227, 228, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	0, 0, 0, 258, 259, 260, 261, 0, 0, 252,
	253, 254, 255, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 602, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 595, 0,
	608, 477, 478, 588, 367, 0, 492, 525, 514, 597,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 307, 0, 0, 337, 529, 511, 521, 512, 497,
	498, 499, 506, 317, 500, 501, 502, 472, 503, 473,
	504, 505, 0, 528, 479, 398, 351, 546, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 1438,
	0, 0, 0, 280, 203, 474, 593, 476, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 403, 420, 281, 394, 433, 286, 401, 276, 366,
	390, 0, 0, 272, 418, 400, 348, 327, 328, 271,
	0, 385, 305, 319, 302, 364, 0, 417, 445, 301,
	436, 0, 428, 274, 0, 427, 363, 414, 419, 349,
	343, 273, 416, 347, 342, 331, 309, 461, 332, 333,
	323, 375, 341, 376, 324, 353, 352, 354, 0, 0,
	0, 0, 0, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 587, 0, 0,
	590, 0, 430, 0, 0, 0, 0, 0, 0, 402,
	0, 0, 334, 0, 0, 0, 446, 0, 388, 369,
	610, 0, 0, 386, 339, 415, 377, 421, 404, 429,
	1806, 378, 265, 405, 304, 350, 277, 279, 299, 306,
	308, 310, 311, 359, 360, 372, 393, 406, 407, 408,
	303, 287, 387, 288, 321, 289, 266, 295, 293, 296,
	395, 297, 268, 373, 412, 0, 316, 383, 346, 269,
	345, 374, 411, 410, 278, 437, 443, 444, 533, 0,
	449, 611, 612, 613, 458, 463, 464, 465, 467, 468,
	469, 470, 534, 551, 518, 488, 451, 542, 485, 489,
	490, 554, 0, 0, 0, 442, 335, 336, 0, 314,
	262, 263, 607, 300, 365, 556, 589, 481, 0, 543,
	482, 491, 292, 515, 527, 526, 361, 441, 0, 538,
	541, 471, 606, 0, 535, 550, 609, 549, 603, 371,
	0, 392, 547, 494, 0, 539, 513, 0, 540, 509,
	544, 0, 483, 0, 399, 423, 435, 452, 455, 484,
	569, 570, 571, 267, 454, 573, 574, 575, 576, 577,
	578, 579, 572, 426, 516, 493, 519, 434, 496, 495,
	0, 0, 530, 450, 531, 532, 355, 356, 357, 358,
	318, 557, 285, 453, 381, 0, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 522, 523, 520, 614, 0,
	580, 581, 0, 0, 447, 448, 313, 320, 466, 322,
	284, 370, 315, 432, 329, 0, 459, 524, 460, 583,
	586, 584, 585, 362, 325, 326, 396, 330, 340, 384,
	431, 368, 389, 282, 422, 397, 344, 510, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 564, 563, 562, 561,
	560, 559, 558, 0, 0, 507, 409, 294, 256, 290,
	291, 298, 604, 601, 413, 605, 0, 264, 487, 338,
	0, 379, 312, 552, 553, 0, 0, 212, 213, 214,
	215, 216, 217, 218, 219, 257, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 233, 234, 235,
	236, 555, 227, 228, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 0, 0,
	0, 258, 259, 260, 261, 0, 0, 252, 253, 254,
	255, 0, 0, 0, 438, 439, 440, 462, 424, 486,
	602, 0, 0, 0, 0, 0, 0, 0, 536, 548,
	582, 0, 591, 592, 594, 596, 595, 0, 608, 477,
	478, 588, 367, 0, 492, 525, 514, 597, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	0, 0, 337, 529, 511, 521, 512, 497, 498, 499,
	506, 317, 500, 501, 502, 472, 503, 473, 504, 505,
	0, 528, 479, 398, 351, 546, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 1773, 0,
	0, 280, 203, 474, 593, 476, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 403,
	420, 281, 394, 433, 286, 401, 276, 366, 390, 0,
	0, 272, 418, 400, 348, 327, 328, 271, 0, 385,
	305, 319, 302, 364, 0, 417, 445, 301, 436, 0,
	428, 274, 0, 427, 363, 414, 419, 349, 343, 273,
	416, 347, 342, 331, 309, 461, 332, 333, 323, 375,
	341, 376, 324, 353, 352, 354, 0, 0, 0, 0,
	0, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 0, 0, 590, 0,
	430, 0, 0, 0, 0, 0, 0, 402, 0, 0,
	334, 0, 0, 0, 446, 0, 388, 369, 610, 0,
	0, 386, 339, 415, 377, 421, 404, 429, 382, 378,
	265, 405, 304, 350, 277, 279, 299, 306, 308, 310,
	311, 359, 360, 372, 393, 406, 407, 408, 303, 287,
	387, 288, 321, 289, 266, 295, 293, 296, 395, 297,
	268, 373, 412, 0, 316, 383, 346, 269, 345, 374,
	411, 410, 278, 437, 443, 444, 533, 0, 449, 611,
	612, 613, 458, 463, 464, 465, 467, 468, 469, 470,
	534, 551, 518, 488, 451, 542, 485, 489, 490, 554,
	0, 0, 0, 442, 335, 336, 0, 314, 262, 263,
	607, 300, 365, 556, 589, 481, 0, 543, 482, 491,
	292, 515, 527, 526, 361, 441, 0, 538, 541, 471,
	606, 0, 535, 550, 609, 549, 603, 371, 0, 392,
	547, 494, 0, 539, 513, 0, 540, 509, 544, 0,
	483, 0, 399, 423, 435, 452, 455, 484, 569, 570,
	571, 267, 454, 573, 574, 575, 576, 577, 578, 579,
	572, 426, 516, 493, 519, 434, 496, 495, 0, 0,
	530, 450, 531, 532, 355, 356, 357, 358, 318, 557,
	285, 453, 381, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 522, 523, 520, 614, 0, 580, 581,
	0, 0, 447, 448, 313, 320, 466, 322, 284, 370,
	315, 432, 329, 0, 459, 524, 460, 583, 586, 584,
	585, 362, 325, 326, 396, 330, 340, 384, 431, 368,
	389, 282, 422, 397, 344, 510, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 564, 563, 562, 561, 560, 559,
	558, 0, 0, 507, 409, 294, 256, 290, 291, 298,
	604, 601, 413, 605, 0, 264, 487, 338, 0, 379,
	312, 552, 553, 0, 0, 212, 213, 214, 215, 216,
	217, 218, 219, 257, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 233, 234, 235, 236, 555,
	227, 228, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 0, 0, 0, 258,
	259, 260, 261, 0, 0, 252, 253, 254, 255, 0,
	0, 0, 438, 439, 440, 462, 424, 486, 602, 0,
	0, 0, 0, 0, 0, 0, 536, 548, 582, 0,
	591, 592, 594, 596, 595, 0, 608, 477, 478, 588,
	367, 0, 492, 525, 514, 597, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 0, 0,
	337, 529, 511, 521, 512, 497, 498, 499, 506, 317,
	500, 501, 502, 472, 503, 473, 504, 505, 0, 528,
	479, 398, 351, 546, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 280,
	203, 474, 593, 476, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 403, 420, 281,
	394, 433, 286, 401, 276, 366, 390, 0, 0, 272,
	418, 400, 348, 327, 328, 271, 0, 385, 305, 319,
	302, 364, 0, 417, 445, 301, 436, 0, 428, 274,
	0, 427, 363, 414, 419, 349, 343, 273, 416, 347,
	342, 331, 309, 461, 332, 333, 323, 375, 341, 376,
	324, 353, 352, 354, 0, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 587, 0, 0, 590, 0, 430, 0,
	0, 1468, 0, 0, 0, 402, 0, 0, 334, 0,
	0, 0, 446, 0, 388, 369, 610, 0, 0, 386,
	339, 415, 377, 421, 404, 429, 382, 378, 265, 405,
	304, 350, 277, 279, 299, 306, 308, 310, 311, 359,
	360, 372, 393, 406, 407, 408, 303, 287, 387, 288,
	321, 289, 266, 295, 293, 296, 395, 297, 268, 373,
	412, 0, 316, 383, 346, 269, 345, 374, 411, 410,
	278, 437, 443, 444, 533, 0, 449, 611, 612, 613,
	458, 463, 464, 465, 467, 468, 469, 470, 534, 551,
	518, 488, 451, 542, 485, 489, 490, 554, 0, 0,
	0, 442, 335, 336, 0, 314, 262, 263, 607, 300,
	365, 556, 589, 481, 0, 543, 482, 491, 292, 515,
	527, 526, 361, 441, 0, 538, 541, 471, 606, 0,
	535, 550, 609, 549, 603, 371, 0, 392, 547, 494,
	0, 539, 513, 0, 540, 509, 544, 0, 483, 0,
	399, 423, 435, 452, 455, 484, 569, 570, 571, 267,
	454, 573, 574, 575, 576, 577, 578, 579, 572, 426,
	516, 493, 519, 434, 496, 495, 0, 0, 530, 450,
	531, 532, 355, 356, 357, 358, 318, 557, 285, 453,
	381, 0, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 523, 520, 614, 0, 580, 581, 0, 0,
	447, 448, 313, 320, 466, 322, 284, 370, 315, 432,
	329, 0, 459, 524, 460, 583, 586, 584, 585, 362,
	325, 326, 396, 330, 340, 384, 431, 368, 389, 282,
	422, 397, 344, 510, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 564, 563, 562, 561, 560, 559, 558, 0,
	0, 507, 409, 294, 256, 290, 291, 298, 604, 601,
	413, 605, 0, 264, 487, 338, 0, 379, 312, 552,
	553, 0, 0, 212, 213, 214, 215, 216, 217, 218,
	219, 257, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 233, 234, 235, 236, 555, 227, 228,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 0, 0, 0, 258, 259, 260,
	261, 0, 0, 252, 253, 254, 255, 0, 0, 0,
	438, 439, 440, 462, 424, 486, 602, 0, 0, 0,
	0, 0, 0, 0, 536, 548, 582, 0, 591, 592,
	594, 596, 595, 0, 608, 477, 478, 588, 367, 0,
	492, 525, 514, 597, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 621, 307, 0, 0, 337, 529,
	511, 521, 512, 497, 498, 499, 506, 317, 500, 501,
	502, 472, 503, 473, 504, 505, 0, 528, 479, 398,
	351, 546, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 280, 203, 474,
	593, 476, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 403, 420, 281, 394, 433,
	286, 401, 276, 366, 390, 0, 0, 272, 418, 400,
	348, 327, 328, 271, 0, 385, 305, 319, 302, 364,
	0, 417, 445, 301, 436, 0, 428, 274, 0, 427,
	363, 414, 419, 349, 343, 273, 416, 347, 342, 331,
	309, 461, 332, 333, 323, 375, 341, 376, 324, 353,
	352, 354, 0, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 0, 0, 590, 0, 430, 0, 0, 0,
	0, 0, 0, 402, 0, 0, 334, 0, 0, 0,
	446, 0, 388, 369, 610, 0, 0, 386, 339, 415,
	377, 421, 404, 429, 382, 378, 265, 405, 304, 350,
	277, 279, 299, 306, 308, 310, 311, 359, 360, 372,
	393, 406, 407, 408, 303, 287, 387, 288, 321, 289,
	266, 295, 293, 296, 395, 297, 268, 373, 412, 0,
	316, 383, 346, 269, 345, 374, 411, 410, 278, 437,
	443, 444, 533, 0, 449, 611, 612, 613, 458, 463,
	464, 465, 467, 468, 469, 470, 534, 551, 518, 488,
	451, 542, 485, 489, 490, 554, 0, 0, 0, 442,
	335, 336, 0, 314, 262, 263, 607, 300, 365, 556,
	589, 481, 0, 543, 482, 491, 292, 515, 527, 526,
	361, 441, 0, 538, 541, 471, 606, 0, 535, 550,
	609, 549, 603, 371, 0, 392, 547, 494, 0, 539,
	513, 0, 540, 509, 544, 0, 483, 0, 399, 423,
	435, 452, 455, 484, 569, 570, 571, 267, 454, 573,
	574, 575, 576, 577, 578, 579, 572, 426, 516, 493,
	519, 434, 496, 495, 0, 0, 530, 450, 531, 532,
	355, 356, 357, 358, 318, 557, 285, 453, 381, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 520, 614, 0, 580, 581, 0, 0, 447, 448,
	313, 320, 466, 322, 284, 370, 315, 432, 329, 0,
	459, 524, 460, 583, 586, 584, 585, 362, 325, 326,
	396, 330, 340, 384, 431, 368, 389, 282, 422, 397,
	344, 510, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	564, 563, 562, 561, 560, 559, 558, 0, 0, 507,
	409, 294, 256, 290, 291, 298, 604, 601, 413, 605,
	0, 264, 487, 338, 0, 379, 312, 552, 553, 0,
	0, 212, 213, 214, 215, 216, 217, 218, 219, 257,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 233, 234, 235, 236, 555, 227, 228, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 0, 0, 0, 258, 259, 260, 261, 0,
	0, 252, 253, 254, 255, 0, 0, 0, 438, 439,
	440, 462, 424, 486, 602, 0, 0, 0, 0, 0,
	0, 0, 536, 548, 582, 0, 591, 592, 594, 596,
	595, 0, 608, 477, 478, 588, 367, 0, 492, 525,
	514, 597, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 0, 528, 479, 398, 351, 546,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 280, 203, 474, 593, 476,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 0, 417,
	445, 301, 436, 0, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 461,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	0, 631, 590, 0, 430, 0, 0, 0, 0, 0,
	0, 402, 0, 0, 334, 0, 0, 0, 446, 0,
	388, 369, 610, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	299, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 611, 612, 613, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 607, 300, 365, 556, 589, 481,
	0, 543, 482, 491, 292, 515, 527, 526, 361, 441,
	0, 538, 541, 471, 606, 0, 535, 550, 609, 549,
	603, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 426, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 450, 531, 532, 355, 356,
	357, 358, 318, 557, 285, 453, 381, 0, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	614, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 604, 601, 413, 605, 0, 264,
	487, 338, 0, 379, 312, 552, 553, 0, 0, 212,
	213, 214, 215, 216, 217, 218, 219, 257, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 233,
	234, 235, 236, 555, 227, 228, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	0, 0, 0, 258, 259, 260, 261, 0, 0, 252,
	253, 254, 255, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 602, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 595, 0,
	608, 477, 478, 588, 367, 0, 492, 525, 514, 597,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 307, 0, 0, 337, 529, 511, 521, 512, 497,
	498, 499, 506, 317, 500, 501, 502, 472, 503, 473,
	504, 505, 0, 528, 479, 398, 351, 546, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 280, 203, 474, 593, 476, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 403, 420, 281, 394, 433, 286, 401, 276, 366,
	390, 0, 0, 272, 418, 400, 348, 327, 328, 271,
	0, 385, 305, 319, 302, 364, 0, 417, 445, 301,
	436, 0, 428, 274, 0, 427, 363, 414, 419, 349,
	343, 273, 416, 347, 342, 331, 309, 461, 332, 333,
	323, 375, 341, 376, 324, 353, 352, 354, 0, 0,
	0, 0, 0, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 587, 0, 0,
	590, 0, 430, 0, 0, 0, 0, 0, 0, 402,
	0, 0, 334, 0, 0, 0, 446, 0, 388, 369,
	610, 0, 0, 386, 339, 415, 377, 421, 404, 429,
	382, 378, 265, 405, 304, 350, 277, 279, 299, 306,
	308, 310, 311, 359, 360, 372, 393, 406, 407, 408,
	303, 287, 387, 288, 321, 289, 266, 295, 293, 296,
	395, 297, 268, 373, 412, 0, 316, 383, 346, 269,
	345, 374, 411, 410, 278, 437, 443, 444, 533, 0,
	449, 611, 612, 613, 458, 463, 464, 465, 467, 468,
	469, 470, 534, 551, 518, 488, 451, 542, 485, 489,
	490, 554, 0, 0, 0, 442, 335, 336, 0, 314,
	262, 263, 607, 300, 365, 556, 589, 481, 0, 543,
	482, 491, 292, 515, 527, 526, 361, 441, 0, 538,
	541, 471, 606, 0, 535, 550, 609, 549, 603, 371,
	0, 392, 547, 494, 0, 539, 513, 0, 540, 509,
	544, 0, 483, 0, 399, 423, 435, 452, 455, 484,
	569, 570, 571, 267, 454, 573, 574, 575, 576, 577,
	578, 579, 572, 426, 516, 493, 519, 434, 496, 495,
	0, 0, 530, 450, 531, 532, 355, 356, 357, 358,
	318, 557, 285, 453, 381, 0, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 522, 523, 520, 614, 0,
	580, 581, 0, 0, 447, 448, 313, 320, 466, 322,
	284, 370, 315, 432, 329, 0, 459, 524, 460, 583,
	586, 584, 585, 362, 325, 326, 396, 330, 340, 384,
	431, 368, 389, 282, 422, 397, 344, 510, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 564, 563, 562, 561,
	560, 559, 558, 911, 0, 507, 409, 294, 256, 290,
	291, 298, 604, 601, 413, 605, 0, 264, 487, 338,
	0, 379, 312, 552, 553, 0, 0, 212, 213, 214,
	215, 216, 217, 218, 219, 257, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 233, 234, 235,
	236, 555, 227, 228, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 0, 0,
	0, 258, 259, 260, 261, 0, 0, 252, 253, 254,
	255, 0, 0, 0, 438, 439, 440, 462, 424, 486,
	602, 0, 0, 0, 0, 0, 0, 0, 536, 548,
	582, 0, 591, 592, 594, 596, 595, 0, 608, 477,
	478, 588, 367, 0, 492, 525, 514, 597, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	0, 0, 337, 529, 511, 521, 512, 497, 498, 499,
	506, 317, 500, 501, 502, 472, 503, 473, 504, 505,
	0, 528, 479, 398, 351, 546, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 280, 203, 474, 593, 476, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 403,
	420, 281, 394, 433, 286, 401, 276, 366, 390, 0,
	0, 272, 418, 400, 348, 327, 328, 271, 0, 385,
	305, 319, 302, 364, 0, 417, 445, 301, 436, 0,
	428, 274, 0, 427, 363, 414, 419, 349, 343, 273,
	416, 347, 342, 331, 309, 461, 332, 333, 323, 375,
	341, 376, 324, 353, 352, 354, 0, 0, 0, 0,
	0, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 0, 0, 590, 0,
	430, 0, 0, 0, 0, 0, 0, 402, 0, 0,
	334, 0, 0, 0, 446, 0, 388, 369, 610, 0,
	0, 386, 339, 415, 377, 421, 404, 429, 382, 378,
	265, 405, 304, 350, 277, 279, 299, 306, 308, 310,
	311, 359, 360, 372, 393, 406, 407, 408, 303, 287,
	387, 288, 321, 289, 266, 295, 293, 296, 395, 297,
	268, 373, 412, 0, 316, 383, 346, 269, 345, 374,
	411, 410, 278, 437, 443, 444, 533, 0, 449, 611,
	612, 613, 458, 463, 464, 465, 467, 468, 469, 470,
	534, 551, 518, 488, 451, 542, 485, 489, 490, 554,
	0, 0, 0, 442, 335, 336, 0, 314, 262, 263,
	607, 300, 365, 556, 589, 481, 0, 543, 482, 491,
	292, 515, 527, 526, 361, 441, 0, 538, 541, 471,
	606, 0, 535, 550, 609, 549, 603, 371, 0, 392,
	547, 494, 0, 539, 513, 0, 540, 509, 544, 0,
	483, 0, 399, 423, 435, 452, 455, 484, 569, 570,
	571, 267, 454, 573, 574, 575, 576, 577, 578, 579,
	572, 426, 516, 493, 519, 434, 496, 495, 0, 0,
	530, 450, 531, 532, 355, 356, 357, 358, 318, 557,
	285, 453, 381, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 522, 523, 520, 614, 0, 580, 581,
	0, 0, 447, 448, 313, 320, 466, 322, 284, 370,
	315, 432, 329, 0, 459, 524, 460, 583, 586, 584,
	585, 362, 325, 326, 396, 330, 340, 384, 431, 368,
	389, 282, 422, 397, 344, 510, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 564, 563, 562, 561, 560, 559,
	558, 0, 0, 507, 409, 294, 256, 290, 291, 298,
	604, 601, 413, 605, 0, 264, 487, 338, 0, 379,
	312, 552, 553, 0, 0, 212, 213, 214, 215, 216,
	217, 218, 219, 257, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 233, 234, 235, 236, 555,
	227, 228, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 0, 0, 0, 258,
	259, 260, 261, 0, 0, 252, 253, 254, 255, 0,
	0, 0, 438, 439, 440, 462, 424, 486, 602, 0,
	0, 0, 0, 0, 0, 0, 536, 548, 582, 0,
	591, 592, 594, 596, 595, 0, 608, 477, 478, 588,
	367, 0, 492, 525, 514, 597, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 0, 0,
	337, 529, 511, 521, 512, 497, 498, 499, 506, 317,
	500, 501, 502, 472, 503, 473, 504, 505, 0, 528,
	479, 398, 351, 546, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 280,
	203, 474, 593, 476, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 403, 1418, 281,
	394, 433, 286, 401, 276, 366, 390, 0, 0, 272,
	418, 400, 348, 327, 328, 271, 0, 385, 305, 319,
	302, 364, 0, 417, 445, 301, 436, 0, 428, 274,
	0, 427, 363, 414, 419, 349, 343, 273, 416, 347,
	342, 331, 309, 461, 332, 333, 323, 375, 341, 376,
	324, 353, 352, 354, 0, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 587, 0, 0, 590, 0, 430, 0,
	0, 0, 0, 0, 0, 402, 0, 0, 334, 0,
	0, 0, 446, 0, 388, 369, 610, 0, 0, 386,
	339, 415, 377, 421, 404, 429, 382, 378, 265, 405,
	304, 350, 277, 279, 299, 306, 308, 310, 311, 359,
	360, 372, 393, 406, 407, 408, 303, 287, 387, 288,
	321, 289, 266, 295, 293, 296, 395, 297, 268, 373,
	412, 0, 316, 383, 346, 269, 345, 374, 411, 410,
	278, 437, 443, 444, 533, 0, 449, 611, 612, 613,
	458, 463, 464, 465, 467, 468, 469, 470, 534, 551,
	518, 488, 451, 542, 485, 489, 490, 554, 0, 0,
	0, 442, 335, 336, 0, 314, 262, 263, 607, 300,
	365, 556, 589, 481, 0, 543, 482, 491, 292, 515,
	527, 526, 361, 441, 0, 538, 541, 471, 606, 0,
	535, 550, 609, 549, 603, 371, 0, 392, 547, 494,
	0, 539, 513, 0, 540, 509, 544, 0, 483, 0,
	399, 423, 435, 452, 455, 484, 569, 570, 571, 267,
	454, 573, 574, 575, 576, 577, 578, 579, 572, 426,
	516, 493, 519, 434, 496, 495, 0, 0, 530, 450,
	531, 532, 355, 356, 357, 358, 318, 557, 285, 453,
	381, 0, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 523, 520, 614, 0, 580, 581, 0, 0,
	447, 448, 313, 320, 466, 322, 284, 370, 315, 432,
	329, 0, 459, 524, 460, 583, 586, 584, 585, 362,
	325, 326, 396, 330, 340, 384, 431, 368, 389, 282,
	422, 397, 344, 510, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 564, 563, 562, 561, 560, 559, 558, 0,
	0, 507, 409, 294, 256, 290, 291, 298, 604, 601,
	413, 605, 0, 264, 487, 338, 0, 379, 312, 552,
	553, 0, 0, 212, 213, 214, 215, 216, 217, 218,
	219, 257, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 233, 234, 235, 236, 555, 227, 228,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 0, 0, 0, 258, 259, 260,
	261, 0, 0, 252, 253, 254, 255, 0, 0, 0,
	438, 439, 440, 462, 424, 486, 602, 0, 0, 0,
	0, 0, 0, 0, 536, 548, 582, 0, 591, 592,
	594, 596, 595, 0, 608, 477, 478, 588, 367, 0,
	492, 525, 514, 597, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 307, 0, 0, 337, 529,
	511, 521, 512, 497, 498, 499, 506, 317, 500, 501,
	502, 472, 503, 473, 504, 505, 0, 528, 479, 398,
	351, 546, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 280, 203, 474,
	593, 476, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 403, 1416, 281, 394, 433,
	286, 401, 276, 366, 390, 0, 0, 272, 418, 400,
	348, 327, 328, 271, 0, 385, 305, 319, 302, 364,
	0, 417, 445, 301, 436, 0, 428, 274, 0, 427,
	363, 414, 419, 349, 343, 273, 416, 347, 342, 331,
	309, 461, 332, 333, 323, 375, 341, 376, 324, 353,
	352, 354, 0, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 0, 0, 590, 0, 430, 0, 0, 0,
	0, 0, 0, 402, 0, 0, 334, 0, 0, 0,
	446, 0, 388, 369, 610, 0, 0, 386, 339, 415,
	377, 421, 404, 429, 382, 378, 265, 405, 304, 350,
	277, 279, 299, 306, 308, 310, 311, 359, 360, 372,
	393, 406, 407, 408, 303, 287, 387, 288, 321, 289,
	266, 295, 293, 296, 395, 297, 268, 373, 412, 0,
	316, 383, 346, 269, 345, 374, 411, 410, 278, 437,
	443, 444, 533, 0, 449, 611, 612, 613, 458, 463,
	464, 465, 467, 468, 469, 470, 534, 551, 518, 488,
	451, 542, 485, 489, 490, 554, 0, 0, 0, 442,
	335, 336, 0, 314, 262, 263, 607, 300, 365, 556,
	589, 481, 0, 543, 482, 491, 292, 515, 527, 526,
	361, 441, 0, 538, 541, 471, 606, 0, 535, 550,
	609, 549, 603, 371, 0, 392, 547, 494, 0, 539,
	513, 0, 540, 509, 544, 0, 483, 0, 399, 423,
	435, 452, 455, 484, 569, 570, 571, 267, 454, 573,
	574, 575, 576, 577, 578, 579, 572, 426, 516, 493,
	519, 434, 496, 495, 0, 0, 530, 450, 531, 532,
	355, 356, 357, 358, 318, 557, 285, 453, 381, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 520, 614, 0, 580, 581, 0, 0, 447, 448,
	313, 320, 466, 322, 284, 370, 315, 432, 329, 0,
	459, 524, 460, 583, 586, 584, 585, 362, 325, 326,
	396, 330, 340, 384, 431, 368, 389, 282, 422, 397,
	344, 510, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	564, 563, 562, 561, 560, 559, 558, 0, 0, 507,
	409, 294, 256, 290, 291, 298, 604, 601, 413, 605,
	0, 264, 487, 338, 0, 379, 312, 552, 553, 0,
	0, 212, 213, 214, 215, 216, 217, 218, 219, 257,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 233, 234, 235, 236, 555, 227, 228, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 0, 0, 0, 258, 259, 260, 261, 0,
	0, 252, 253, 254, 255, 0, 0, 0, 438, 439,
	440, 462, 424, 486, 602, 0, 0, 0, 0, 0,
	0, 0, 536, 548, 582, 0, 591, 592, 594, 596,
	595, 0, 608, 477, 478, 588, 367, 0, 492, 525,
	514, 597, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 307, 0, 0, 337, 529, 511, 521,
	512, 497, 498, 499, 506, 317, 500, 501, 502, 472,
	503, 473, 504, 505, 0, 528, 479, 398, 351, 546,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 280, 203, 474, 593, 476,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 403, 420, 281, 394, 433, 286, 401,
	276, 366, 390, 0, 0, 272, 418, 400, 348, 327,
	328, 271, 0, 385, 305, 319, 302, 364, 0, 417,
	445, 301, 436, 0, 428, 274, 0, 427, 363, 414,
	419, 349, 343, 273, 416, 347, 342, 331, 309, 461,
	332, 333, 323, 375, 341, 376, 324, 353, 352, 354,
	0, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	0, 0, 590, 0, 430, 0, 0, 0, 0, 0,
	0, 402, 0, 0, 334, 0, 0, 0, 446, 0,
	388, 369, 610, 0, 0, 386, 339, 415, 377, 421,
	404, 429, 382, 378, 265, 405, 304, 350, 277, 279,
	697, 306, 308, 310, 311, 359, 360, 372, 393, 406,
	407, 408, 303, 287, 387, 288, 321, 289, 266, 295,
	293, 296, 395, 297, 268, 373, 412, 0, 316, 383,
	346, 269, 345, 374, 411, 410, 278, 437, 443, 444,
	533, 0, 449, 611, 612, 613, 458, 463, 464, 465,
	467, 468, 469, 470, 534, 551, 518, 488, 451, 542,
	485, 489, 490, 554, 0, 0, 0, 442, 335, 336,
	0, 314, 262, 263, 607, 300, 365, 556, 589, 481,
	0, 543, 482, 491, 292, 515, 527, 526, 361, 441,
	0, 538, 541, 471, 606, 0, 535, 550, 609, 549,
	603, 371, 0, 392, 547, 494, 0, 539, 513, 0,
	540, 509, 544, 0, 483, 0, 399, 423, 435, 452,
	455, 484, 569, 570, 571, 267, 454, 573, 574, 575,
	576, 577, 578, 579, 572, 426, 516, 493, 519, 434,
	496, 495, 0, 0, 530, 450, 531, 532, 355, 356,
	357, 358, 318, 557, 285, 453, 381, 0, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 523, 520,
	614, 0, 580, 581, 0, 0, 447, 448, 313, 320,
	466, 322, 284, 370, 315, 432, 329, 0, 459, 524,
	460, 583, 586, 584, 585, 362, 325, 326, 396, 330,
	340, 384, 431, 368, 389, 282, 422, 397, 344, 510,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 564, 563,
	562, 561, 560, 559, 558, 0, 0, 507, 409, 294,
	256, 290, 291, 298, 604, 601, 413, 605, 0, 264,
	487, 338, 0, 379, 312, 552, 553, 0, 0, 212,
	213, 214, 215, 216, 217, 218, 219, 257, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 233,
	234, 235, 236, 555, 227, 228, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	0, 0, 0, 258, 259, 260, 261, 0, 0, 252,
	253, 254, 255, 0, 0, 0, 438, 439, 440, 462,
	424, 486, 602, 0, 0, 0, 0, 0, 0, 0,
	536, 548, 582, 0, 591, 592, 594, 596, 595, 0,
	608, 477, 478, 588, 367, 0, 492, 525, 514, 597,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 307, 0, 0, 337, 529, 511, 521, 512, 497,
	498, 499, 506, 317, 500, 501, 502, 472, 503, 473,
	504, 505, 0, 528, 479, 398, 351, 546, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 280, 203, 474, 593, 476, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 403, 420, 281, 394, 433, 286, 401, 276, 366,
	390, 0, 0, 272, 418, 400, 348, 327, 328, 271,
	0, 385, 305, 319, 302, 364, 0, 417, 445, 301,
	436, 0, 428, 274, 0, 427, 363, 414, 419, 349,
	343, 273, 416, 347, 342, 331, 309, 461, 332, 333,
	323, 375, 341, 376, 324, 353, 352, 354, 0, 0,
	0, 0, 0, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 587, 0, 0,
	590, 0, 430, 0, 0, 0, 0, 0, 0, 402,
	0, 0, 334, 0, 0, 0, 446, 0, 388, 369,
	610, 0, 0, 386, 339, 415, 377, 421, 404, 429,
	655, 378, 265, 405, 304, 350, 277, 279, 299, 306,
	308, 310, 311, 359, 360, 372, 393, 406, 407, 408,
	303, 287, 387, 288, 321, 289, 266, 295, 293, 296,
	395, 297, 268, 373, 412, 0, 316, 383, 346, 269,
	345, 374, 411, 410, 278, 437, 443, 444, 533, 0,
	449, 611, 612, 613, 458, 463, 464, 465, 467, 468,
	469, 470, 534, 551, 518, 488, 451, 542, 485, 489,
	490, 554, 0, 0, 0, 442, 335, 336, 0, 314,
	262, 263, 607, 300, 365, 556, 589, 481, 0, 543,
	482, 491, 292, 515, 527, 526, 361, 441, 0, 538,
	541, 471, 606, 0, 535, 550, 609, 549, 603, 371,
	0, 392, 547, 494, 0, 539, 513, 0, 540, 509,
	544, 0, 483, 0, 399, 423, 435, 452, 455, 484,
	569, 570, 571, 267, 454, 573, 574, 575, 576, 577,
	578, 656, 572, 426, 516, 493, 519, 434, 496, 495,
	0, 0, 530, 450, 531, 532, 355, 356, 357, 358,
	318, 557, 285, 453, 381, 0, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 522, 523, 520, 614, 0,
	580, 581, 0, 0, 447, 448, 313, 320, 466, 322,
	284, 370, 315, 432, 329, 0, 459, 524, 460, 583,
	586, 584, 585, 362, 325, 326, 396, 330, 340, 384,
	431, 368, 389, 282, 422, 397, 344, 510, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 564, 563, 562, 561,
	560, 559, 558, 0, 0, 507, 409, 294, 256, 290,
	291, 298, 604, 601, 413, 605, 0, 264, 487, 338,
	0, 379, 312, 552, 553, 0, 0, 212, 213, 214,
	215, 216, 217, 218, 219, 257, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 233, 234, 235,
	236, 555, 227, 228, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 0, 0,
	0, 258, 259, 260, 261, 0, 0, 252, 253, 254,
	255, 0, 0, 0, 438, 439, 440, 462, 424, 486,
	602, 1888, 0, 0, 0, 0, 1849, 0, 536, 548,
	582, 0, 591, 592, 594, 596, 595, 0, 608, 477,
	478, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 1890, 1858, 0, 0,
	0, 0, 0, 0, 0, 0, 1891, 1892, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1857, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1865, 0, 0,
	0, 676, 675, 682, 672, 0, 0, 1888, 0, 0,
	0, 0, 1849, 679, 680, 0, 681, 685, 0, 0,
	666, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	690, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1890, 1858, 0, 0, 0, 0, 0, 0,
	0, 0, 1891, 1892, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1881, 1044, 0, 0, 0,
	0, 0, 0, 694, 0, 0, 696, 0, 1857, 0,
	0, 695, 0, 0, 0, 0, 1066, 1070, 1072, 1074,
	1076, 1077, 1079, 1865, 1084, 1080, 1081, 1082, 1083, 0,
	1061, 1062, 1063, 1064, 1042, 1043, 1067, 0, 1045, 0,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057,
	1059, 1055, 1056, 1065, 0, 0, 0, 0, 0, 0,
	0, 1069, 1071, 1073, 1075, 1078, 1848, 1850, 1847, 0,
	1844, 0, 0, 0, 0, 1869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1875, 0, 0, 0,
	0, 1881, 0, 0, 1860, 0, 1843, 0, 0, 1060,
	0, 0, 0, 0, 0, 0, 1863, 1897, 0, 0,
	1864, 1866, 1868, 0, 1870, 1871, 1872, 1876, 1877, 1878,
	1880, 1883, 1884, 1885, 0, 0, 0, 0, 0, 0,
	0, 1873, 1882, 1874, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1852, 0, 0, 0, 0, 667, 669,
	668, 0, 0, 0, 0, 0, 0, 0, 674, 0,
	0, 0, 1848, 2639, 1847, 1889, 2638, 0, 0, 0,
	678, 1869, 0, 0, 0, 0, 0, 693, 0, 0,
	0, 0, 1875, 0, 671, 0, 0, 0, 661, 0,
	0, 1845, 1846, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1863, 1897, 0, 0, 1864, 1866, 1868, 1886,
	1870, 1871, 1872, 1876, 1877, 1878, 1880, 1883, 1884, 1885,
	0, 0, 0, 0, 0, 0, 1862, 1873, 1882, 1874,
	0, 0, 0, 1861, 0, 0, 0, 2493, 2494, 1852,
	0, 0, 0, 1058, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1879, 0, 0,
	0, 1889, 0, 0, 0, 0, 1867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1894,
	1893, 0, 0, 0, 0, 0, 0, 1845, 1846, 0,
	0, 0, 0, 673, 677, 683, 0, 684, 686, 0,
	0, 687, 688, 689, 0, 1886, 691, 692, 0, 0,
	0, 0, 676, 675, 682, 672, 0, 0, 0, 0,
	0, 0, 1862, 0, 679, 680, 0, 681, 685, 1861,
	0, 666, 1854, 1058, 0, 0, 0, 0, 0, 0,
	0, 690, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1879, 0, 0, 0, 0, 0, 0,
	0, 0, 1867, 0, 1044, 0, 0, 0, 1034, 0,
	1888, 0, 0, 0, 1896, 1894, 1893, 1895, 0, 0,
	0, 1068, 0, 0, 1066, 1070, 1072, 1074, 1076, 1077,
	1079, 0, 1084, 1080, 1081, 1082, 1083, 0, 1061, 1062,
	1063, 1064, 1042, 1043, 1067, 1890, 1045, 0, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1059, 1055,
	1056, 1065, 0, 0, 0, 0, 0, 0, 1854, 1069,
	1071, 1073, 1075, 1078, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3487, 0, 0, 0,
	0, 0, 1888, 0, 1044, 0, 1865, 0, 0, 180,
	0, 0, 670, 0, 0, 0, 0, 1060, 0, 0,
	1896, 0, 0, 1895, 1066, 1070, 1072, 1074, 1076, 1077,
	1079, 3331, 1084, 1080, 1081, 1082, 1083, 1890, 1061, 1062,
	1063, 1064, 1042, 1043, 1067, 0, 1045, 0, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1059, 1055,
	1056, 1065, 0, 0, 0, 0, 0, 0, 0, 1069,
	1071, 1073, 1075, 1078, 1881, 0, 0, 1888, 174, 667,
	669, 668, 0, 0, 0, 0, 0, 0, 1865, 674,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 678, 0, 0, 0, 0, 0, 1060, 693, 0,
	0, 0, 1890, 0, 0, 671, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1869, 0, 1881, 0, 0, 0,
	0, 0, 0, 1865, 0, 1875, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1863, 1897, 0, 0, 1864,
	1866, 1868, 0, 1870, 1871, 1872, 1876, 1877, 1878, 1880,
	1883, 1884, 1885, 0, 0, 0, 0, 0, 0, 0,
	1873, 1882, 1874, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 673, 677, 683, 3458, 684, 686,
	1888, 1881, 687, 688, 689, 0, 1869, 691, 692, 0,
	0, 0, 0, 0, 1889, 0, 0, 1875, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1890, 0, 1863, 1897, 0,
	0, 1864, 1866, 1868, 0, 1870, 1871, 1872, 1876, 1877,
	1878, 1880, 1883, 1884, 1885, 0, 0, 0, 1886, 0,
	0, 0, 1873, 1882, 1874, 0, 0, 0, 0, 1068,
	0, 0, 0, 0, 0, 1862, 0, 0, 0, 0,
	0, 1869, 1861, 0, 0, 0, 1865, 0, 0, 0,
	0, 0, 1875, 0, 0, 0, 1889, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1879, 0, 0, 0,
	0, 0, 1863, 1897, 0, 1867, 1864, 1866, 1868, 0,
	1870, 1871, 1872, 1876, 1877, 1878, 1880, 1883, 1884, 1885,
	0, 0, 0, 0, 0, 0, 0, 1873, 1882, 1874,
	1886, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1881, 0, 0, 1862, 0, 1068,
	0, 0, 0, 670, 1861, 0, 0, 0, 0, 0,
	0, 1889, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1879, 0,
	0, 0, 0, 0, 0, 0, 0, 1867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1886, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1862, 0, 1869, 0, 0, 0, 0, 1861,
	0, 0, 0, 0, 0, 1875, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1879, 0, 1863, 1897, 0, 0, 1864,
	1866, 1868, 1867, 1870, 1871, 1872, 1876, 1877, 1878, 1880,
	1883, 1884, 1885, 0, 0, 0, 0, 0, 0, 0,
	1873, 1882, 1874, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1889, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1862, 0, 0, 0, 0,
	0, 0, 1861, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1879, 0, 0, 0,
	0, 0, 0, 0, 0, 1867,
}

var yyPact = [...]int{
	3670, -1000, -1000, -1000, -315, 13073, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	43509, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 313, 43509, -313, 26484, 41685, -1000, -1000, 2313, -1000,
	42293, 14917, 43509, 379, 374, 43509, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 798, -1000, 45941, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 623, 46628, 45333, 10005,
	-236, -1000, 1381, -60, 2216, 937, 951, 962, 962, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 428, 820, 42901, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3904, 613, 820,
	19791, 71, 70, 1381, 387, -99, -90, -105, 1561, -1000,
	1066, 3712, 192, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10005, 10005, 13073, -349, 13073, 10005,
	43509, 43509, -1000, -1000, -1000, -1000, -313, 42293, 623, 46628,
	10005, 2216, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -90, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-99, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -105, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 70, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 46922, -1000,
	1501, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2095, 2758, 1498, 2213, 578,
	41685, 43509, -1000, 137, 578, -1000, -1000, -1000, 1381, 3311,
	-1000, 43509, 43509, 144, 1685, -1000, 419, 408, 382, 248,
	1493, -1000, -1000, -1000, -1000, -1000, -1000, 472, 3160, -1000,
	43509, 43509, 2789, 43509, -1000, 2031, 540, 3764, 2989, 1094,
	724, 2798, -1000, -1000, 2756, -1000, 241, 222, 296, 723,
	310, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 278, -1000,
	3011, -1000, -1000, 247, -1000, -1000, 230, -1000, -1000, -1000,
	68, -1000, -1000, -1000, -1000, -1000, -1000, -31, -1000, -1000,
	990, 2022, 10005, 2021, -1000, 2852, 1385, -1000, -1000, -1000,
	5716, 11841, 11841, 11841, 11841, 43509, -1000, -1000, 2520, 10005,
	2755, 2754, 2752, 2742, -1000, -1000, -1000, -1000, -1000, -1000,
	1464, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1810, -1000, -1000, -1000, 12453, -1000, 2741, 2740, 2730, 2729,
	2727, 2726, 2723, 2722, 2714, 2701, 2699, 2698, 2684, 2679,
	2372, 14299, 2678, 2212, 2211, 2676, 2663, 2652, 2209, 2639,
	2626, 2624, 2372, 2372, 2622, 2621, 2620, 2618, 2617, 2616,
	2613, 2612, 2610, 2605, 2604, 2599, 2597, 2593, 2592, 2591,
	2585, 2576, 2573, 2571, 2567, 2565, 2557, 2554, 2551, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1229, -1000, 2547, 3172, 2438, -1000, 3058, 3029,
	3027, 3025, -280, 2545, 2001, -1000, -1000, 100, -1000, -100,
	-1000, -1000, 938, -1000, 910, -1000, 619, 43509, 43509, 201,
	772, 619, 619, 619, 619, 619, 668, 619, 3075, 796,
	790, 776, 751, 619, -45, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1681, 1679, 2836, 899, -1000, -1000, -1000, -1000,
	1283, 43509, -1000, 2476, 1581, 1581, 3143, 3073, 550, 548,
	536, 1581, 417, -1000, 1677, 1677, 1677, 1677, 1581, 455,
	534, 3078, 3078, 55, 1677, 61, 1581, 1581, 61, 1581,
	1581, -1000, 1656, 217, -290, -1000, -1000, -1000, -1000, 1677,
	1677, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3052, 3049,
	623, 623, 43509, 186, 43509, 623, 623, 623, 628, 5,
	44725, 44117, 2031, 527, 484, 1290, 1701, -1000, 1605, 43509,
	43509, 1605, 1605, 22836, 22228, -1000, 43509, -1000, 3172, 2438,
	2365, 1277, 2363, 2438, -115, -116, -118, 623, 623, 623,
	623, 623, 219, 623, 623, 623, 623, 623, 43509, 43509,
	41077, 623, 623, 623, 8164, 8164, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 13073, 1918, 1883, 191, -28,
	-304, 236, -1000, -1000, 43509, 2946, 210, -1000, -1000, -1000,
	2392, -1000, 2462, 2462, 2462, 2462, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2462, 2462, 2473, 2539, -1000,
	-1000, 2458, 2458, 2458, 2392, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2466, 2466, 2467, 2467, 2466, 43509, -130, -1000, -1000, 10005,
	43509, 2982, 383, 2534, 578, -1000, 43509, 10005, 385, 3172,
	2978, 3078, 3137, -1000, -1000, 1457, 2000, 2206, -1000, 248,
	-1000, 391, 248, 1560, -1000, 1015, -1000, -1000, -1000, -1000,
	-1000, 43509, -31, 368, -1000, -1000, 2194, 2526, -1000, 567,
	1093, 1329, -1000, 289, 47009, 34996, 2031, 34996, 43509, -1000,
	-1000, -1000, -1000, -1000, -1000, 67, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	245, -1000, 10005, 10005, 10005, 10005, 10005, -1000, 609, 11229,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11841, 11841, 11841,
	11841, 11841, 11841, 11841, 11841, 11841, 11841, 11841, 11841, 2519,
	1688, 11841, 11841, 11841, 11841, 24660, 1277, 3192, 1289, 282,
	1385, 1385, 1385, 1385, 10005, -1000, 1713, 2022, 10005, 10005,
	10005, 10005, 43509, -1000, -1000, 3673, 10005, 10005, 3897, 10005,
	3017, 10005, 10005, 10005, 2361, 4484, 43509, 10005, -1000, 2360,
	2359, -1000, -1000, 1841, 10005, -1000, -1000, 10005, -1000, -1000,
	10005, 11841, 10005, -1000, 10005, 10005, 10005, -1000, -1000, 418,
	3017, 3017, 3017, 1669, 10005, 10005, 3017, 3017, 3017, 1667,
	3017, 3017, 3017, 3017, 3017, 3017, 3017, 3017, 3017, 3017,
	2353, 2351, 2349, 9393, 3078, -236, -1000, 7552, 2978, 3078,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-282, 2525, 43509, 2205, 2202, -323, 27, 924, 914, 917,
	-1000, 43509, 1718, 3007, -1000, 2522, 43509, 619, 619, 619,
	-1000, 40469, 34996, 43509, 43509, 2031, 43509, 43509, 43509, 619,
	619, 619, 619, 43509, -1000, 2907, 34996, 2876, 628, -1000,
	43509, 1283, 3006, 43509, 3143, 11841, 11841, -1000, -1000, 10005,
	39861, 1677, 1581, 1581, -1000, -1000, 43509, -1000, -1000, -1000,
	1677, 43509, 1677, 1677, 3143, 1677, -1000, -1000, -1000, 1581,
	1581, -1000, -1000, 10005, -1000, -1000, 1677, 1677, -1000, -1000,
	3143, 43509, 58, 3143, 3143, 51, -1000, -1000, -1000, 1581,
	43509, 43509, 619, 43509, -1000, 43509, 43509, -1000, -1000, 43509,
	43509, 46545, 43509, 39253, 3035, -1000, 34996, 43509, 43509, 32564,
	-1000, 1198, -1000, 0, -1000, 9, 5, 1605, 5, 1605,
	-1000, 561, 565, 21012, 491, 34996, 5096, -1000, -1000, 1605,
	1605, 5096, 5096, 1474, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1276, -1000, 255, 3078, -1000, -1000, -1000, -1000, -1000,
	1997, 1993, 1992, 43509, 43509, 34996, 2031, 43509, 623, 43509,
	43509, 43509, 43509, 43509, -1000, 2521, 1445, -1000, 2987, 43509,
	43509, 43509, 1132, -1000, -1000, 17957, 1444, 1132, -1000, 1709,
	-1000, 10005, 13073, -258, 10005, 13073, 13073, 10005, 13073, -1000,
	10005, 207, -1000, -1000, -1000, -1000, 1990, -1000, 1989, -1000,
	-1000, -1000, -1000, -1000, 2201, 2201, -1000, 1987, -1000, -1000,
	-1000, -1000, 1985, -1000, -1000, 1983, -1000, -1000, -1000, -1000,
	-178, 2348, 990, -1000, 2200, 2797, -238, -1000, 19183, 43509,
	43509, 383, -331, 166, -1000, -238, -1000, 18570, 43509, 3078,
	-1000, -241, 2978, 10005, 43509, -1000, 3069, -1000, -1000, 248,
	-1000, 413, 343, -1000, -1000, -1000, -1000, -1000, -1000, 1416,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1274,
	-1000, 43509, -1000, -1000, 289, 34996, 36820, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 229, -1000, -1000, 189, -1000, 651,
	169, 1555, -1000, -1000, 206, 203, 132, 830, 2022, -1000,
	1736, 1736, 1739, -1000, 639, -1000, -1000, -1000, -1000, 2520,
	-1000, -1000, -1000, 1811, 1720, -1000, 1590, 1590, 1347, 1347,
	1347, 1347, 1347, 1731, 1731, -1000, -1000, -1000, 5716, 2519,
	11841, 11841, 11841, 11841, 735, 735, 3697, 3678, -1000, -1000,
	-1000, -1000, 10005, 160, 1697, -1000, 10005, 2261, 1186, 2047,
	1562, 1409, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2347, 2342, 2173, 3159, 2341, 10005, -1000, -1000,
	1553, 1547, 1540, -1000, 1995, 8781, -1000, -1000, -1000, 2339,
	1404, 2337, -1000, -1000, -1000, 2336, 1537, 1065, 2334, 2647,
	2327, 2326, 2324, 2323, 1246, 10005, 10005, 10005, 10005, 2321,
	1534, 1530, 10005, 10005, 10005, 10005, 2318, 10005, 10005, 10005,
	10005, 10005, 10005, 10005, 10005, 10005, 10005, 92, 92, 92,
	1242, 1237, -1000, -1000, 1528, -1000, 2022, -1000, -1000, 2978,
	-1000, 2514, 1981, 1221, -1000, -1000, -308, 2150, -1000, -1000,
	926, 904, 935, 3068, 2986, 43509, 994, 2512, 43509, 43509,
	43509, 202, -1000, -1000, 1092, -1000, 169, -37, 381, 1002,
	2787, 3155, -140, 43509, 43509, 43509, 43509, 3002, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 38645, -1000, 2510, 1513,
	-1000, -1000, 1385, 1385, 2022, 2786, 43509, 43509, 3143, 3143,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1677, 3143, 3143,
	1338, 1581, 1677, -1000, -1000, 1677, -1000, -1000, 1677, -1000,
	-1000, 1393, -1000, 43509, -1000, -1000, -1000, 3000, 2476, 1208,
	-1000, -1000, -1000, 3124, 985, 580, 580, 835, 443, 3123,
	16741, -1000, 1586, 939, 648, 2898, 254, -1000, 1586, -173,
	588, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 468, 459,
	1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
	1586, 946, 1586, 1586, 1586, 1586, 1586, -1000, 1586, 2507,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 513, 193, -1000,
	3033, 293, 291, 1092, 3024, 300, 2746, 1160, -1000, -1000,
	-1000, -1000, 25268, 25268, 20404, 25268, -1000, 205, 5, 19,
	-1000, -1000, 1198, 5096, 1198, 5096, -1000, -1000, 647, -1000,
	-1000, 1002, -1000, 43509, 43509, -1000, -1000, 2499, 1670, -1000,
	-1000, 14299, -1000, 5096, 5096, -1000, -1000, 25876, 43509, -1000,
	-32, -1000, -13, 2978, -1000, -1000, -1000, 1175, -1000, -1000,
	1183, 1002, 2794, 43509, 1175, 1175, 1175, -1000, -1000, 16133,
	43509, 43509, -1000, -1000, -1000, 3143, 8164, -1000, 32564, -1000,
	-1000, 38036, -1000, 37428, 3143, 1693, -1000, 13073, 1818, 182,
	-1000, 232, -316, 177, 1734, 176, 2022, -1000, -1000, 2316,
	2315, 1503, -1000, 1502, 2314, 1496, 1484, 1979, -1000, 41,
	-1000, 2961, 1004, -1000, 2498, -1000, 1470, 2838, -1000, 1163,
	-1000, 1657, 1458, -1000, -1000, 10005, -1000, 1004, 1391, 2832,
	1163, 2978, 2190, -1000, 1159, -1000, 2028, 1388, 143, -1000,
	-1000, -1000, 43509, 2194, 1386, 36820, 1025, -1000, 635, 1379,
	1344, -1000, 34996, 238, 34996, -1000, 34996, -1000, -1000, 390,
	-1000, 43509, 2970, -1000, -1000, -1000, 2150, 1654, -336, 43509,
	-1000, -1000, -1000, -1000, -1000, 1352, -1000, 735, 735, 3697,
	3621, -1000, 11841, -1000, 11841, 3174, -1000, 1692, -1000, 10005,
	1793, 46554, 10005, 46554, 1737, 24052, 43509, -1000, -1000, 10005,
	10005, -1000, 3131, -1000, -1000, -1000, -1000, 10005, 10005, 2094,
	-1000, 43509, -1000, -1000, -1000, -1000, 24052, -1000, 11841, -1000,
	-1000, -1000, -1000, 10005, 1197, 1197, 3127, 1350, 92, 92,
	92, 3055, 3038, 2999, 1342, 92, 2957, 2935, 2900, 2865,
	2834, 2815, 2811, 2803, 2796, 2791, -1000, 2497, -1000, -1000,
	1809, 10617, 7552, -1000, -1000, 271, 1119, 1973, 2188, 128,
	-1000, 1651, -1000, -1000, -1000, 902, 347, -1000, 225, 2308,
	1113, -1000, -1000, 43509, -1000, -1000, -1000, 16133, 2476, 2491,
	2476, 91, 1586, 595, 34996, 481, -1000, 43509, 1998, 1650,
	2793, 684, 2929, 43509, 2489, 355, 2486, 2485, 2998, 360,
	47012, 43509, 1126, -1000, 1333, 3712, -1000, 43509, -1000, 2031,
	-1000, 1581, -1000, -1000, 3143, -1000, -1000, 10005, 10005, 3143,
	1581, 1581, 1677, 43509, -1000, 360, 47012, 2994, 46641, 488,
	2210, -1000, 43509, -1000, -1000, -1000, 833, -1000, 836, 619,
	43509, 1787, 836, 1774, 2482, -1000, -1000, 43509, 43509, 43509,
	43509, -1000, -1000, 43509, -1000, 43509, 43509, 43509, 43509, 43509,
	36212, -1000, 43509, 43509, -1000, 43509, 1773, 43509, 1771, 2924,
	-1000, 1586, 1586, 857, -1000, -1000, 546, -1000, 36212, 1969,
	1958, 1956, 1954, 2186, 2185, 2177, 1586, 1586, 1953, 2174,
	35604, 2167, 1050, 1950, 1943, 1926, 1965, 2165, 715, -1000,
	2164, 1963, 1960, 1940, 43509, 2478, 2109, -1000, -1000, 91,
	1586, 284, 43509, 1648, 595, 369, 2009, 21620, 43509, 32564,
	32564, 32564, 32564, -1000, 2821, 2820, -1000, 2817, 2807, 2881,
	43509, 32564, 2476, -1000, 35604, -1000, -1000, -1000, 1277, 1340,
	3003, 964, 10005, -1000, -1000, -7, -21, -1000, -1000, -1000,
	34996, 2155, 491, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3064, 43509, 43509, 573, 2306, 1104, -1000, -1000, -1000, 47012,
	2462, 2462, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2462, 2462, 2473, -1000, -1000, 2458, 2458, 2458, 2392,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2466, 2466, 2467, 2467, 2466, -1000, -1000, 3140, -1000, 1071,
	-1000, -1000, 1324, -1000, 3140, 1702, -317, 13073, 1671, 1655,
	-1000, 10005, 13073, 10005, -259, 269, -262, -1000, -1000, -1000,
	2154, -1000, -1000, -1000, 1919, -1000, 1917, -1000, 111, 131,
	1745, -238, 7552, 375, 43509, -238, 43509, 7552, -1000, 43509,
	156, 359, -238, 3064, 41, 10005, 2885, -1000, -1000, 43509,
	1902, -1000, -1000, -1000, 3152, 34996, 2031, 1519, 34388, -1000,
	240, -1000, 224, 559, 2152, -1000, 712, 126, 2151, 2150,
	-1000, -1000, -1000, -1000, 11841, 1385, -1000, -1000, -1000, 2022,
	10005, 2304, -1000, 888, 888, 1962, 2302, 2297, -1000, 2462,
	2462, -1000, 2392, 2458, 2392, 888, 888, 2295, -1000, 1908,
	2750, -1000, 2736, 2716, 10005, -1000, 2294, 3415, 1151, -51,
	-206, 92, 92, -1000, -1000, -1000, -1000, 92, 92, 92,
	92, -1000, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 587, -119, -294, -120, -295, -1000, 2284, 1068,
	-1000, -1000, -1000, -1000, -1000, 3897, 1061, -1000, -1000, 2150,
	2144, -1000, -1000, -1000, 43509, 2141, 2139, 994, 47012, 2278,
	2993, 15525, 2991, 2010, -1000, -1000, -1000, 33780, 514, -1000,
	-1000, -1000, 637, 237, 1892, 533, -1000, 43509, 300, 2867,
	1644, 2138, 43509, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2929, -1000, 923, 345, 31348, 13691, -1000, 388, 43509, 15525,
	15525, 388, 348, 1647, -1000, 578, 1041, 134, 32564, 43509,
	-1000, 31956, 2277, -1000, 1002, 3143, -1000, 2022, 2022, -1000,
	3143, 3143, 1581, -1000, 348, -1000, 388, -1000, 1055, 17349,
	409, 485, 461, -1000, 566, -1000, -1000, 568, 2969, 47012,
	-1000, 43509, -1000, 43509, -1000, 43509, 43509, 619, 10005, 2969,
	43509, 632, -1000, -1000, 1011, 338, 328, 650, 650, 1037,
	-1000, 2967, -1000, -1000, 1029, -1000, -1000, -1000, -1000, 43509,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 24052, 24052, 3022,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2135, 2133, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 43509, 1322, -1000, 1643, 2010, 33780,
	1640, 1605, 2131, 514, 1998, 1636, -1000, 2124, -1000, 1005,
	43509, 43509, -1000, 1138, -1000, 1635, 2762, 2792, 2762, -1000,
	-1000, -1000, -1000, 2819, -1000, 2813, -1000, -1000, 1138, -1000,
	-1000, -1000, -1000, -1000, 964, -1000, 3062, 836, 836, 836,
	2276, -1000, -1000, -1000, 1025, 2274, -1000, -1000, -1000, 3166,
	-1000, -1000, -1000, -1000, -1000, -1000, 16133, 2915, 3132, 3122,
	33172, 3132, -1000, -317, 1672, -1000, 1780, 174, 1729, 43509,
	-1000, -1000, -1000, 2273, 2272, -244, 135, 3121, 3118, 819,
	-1000, 2270, 1023, -238, -1000, -1000, 1004, -1000, -1000, -1000,
	-1000, -238, -1000, 1004, -1000, 111, -1000, -1000, 2891, -1000,
	-1000, 2031, -1000, 221, -1000, -1000, -1000, -1000, -1000, -1000,
	159, -1000, 43509, -1000, 1013, 125, -1000, 2022, -1000, -1000,
	-1000, -1000, -1000, 46554, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 10005, -1000, -1000, -1000, 2532,
	-1000, -1000, 10005, 2269, 2122, 2267, 2115, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3172, -1000, 3116, 1312, 2266, 2265, 1301,
	2262, 2257, -1000, 10005, 2255, 3897, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 718, 388, 2254, 1006, -1000, -1000, -1000,
	-1000, 388, -1000, 2113, 165, -1000, -1000, -1000, 2112, 2111,
	1891, -1000, -1000, 1905, 1313, 181, -1000, -1000, -1000, -1000,
	-1000, -1000, 2009, 1968, 1624, -338, -1000, 2457, -1000, 1586,
	1586, 1586, 43509, 1297, -1000, 1586, 1586, 2253, -1000, -1000,
	2251, 2250, -152, 560, 1623, 1621, -1000, 1889, 25268, 32564,
	31956, 1123, -1000, 1318, -1000, -1000, -1000, -1000, -1000, 3143,
	560, -1000, 393, 1888, 11841, 2455, 11841, 2454, 412, 2451,
	1296, -1000, 43509, -1000, -1000, 43509, 294, 2448, -1000, 2446,
	2785, 396, 2441, 2440, 43509, 2487, -1000, 2969, 43509, 641,
	2914, -1000, -1000, -1000, 319, -1000, -1000, 420, -1000, 43509,
	-1000, 43509, -1000, 1356, -1000, 24052, -1000, -1000, 1288, -1000,
	2109, 2107, -1000, 165, 2105, 5096, -1000, -1000, 2867, 2104,
	-1000, 43509, 1005, 1005, 3172, 43509, 7552, -1000, -1000, 10005,
	2439, -1000, 10005, -1000, -1000, -1000, -1000, -1000, 2424, 2939,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1653, -1000, 10005,
	10005, -1000, -1000, 583, 13073, -272, 268, -1000, -1000, -1000,
	-247, 2103, -1000, -1000, 3113, 2098, 2026, 43509, -1000, -1000,
	1004, 1004, -244, -1000, -1000, 1002, -1000, -1000, 954, 471,
	-1000, 2247, 2464, -1000, 2328, 92, -1000, 92, -1000, 212,
	10005, -1000, 2096, -1000, -1000, -1000, 2093, -1000, -1000, 2303,
	-1000, 2242, 47012, -160, -152, 15525, -160, -1000, -1000, 389,
	-1000, -1000, 305, -1000, -1000, 1867, 554, -1000, -1000, -1000,
	1620, 1796, 2049, 29524, 24052, 24660, 2092, -1000, -1000, 31348,
	1653, 1653, 47156, 245, 47384, -1000, 2412, 957, 1610, -1000,
	1887, -1000, 1885, -1000, 3143, 1123, 133, -1000, -1000, 1517,
	-1000, 957, 2210, 3112, -1000, 3331, 43509, 3233, 43509, 2402,
	1619, 11841, -1000, 568, 2830, -1000, -1000, 294, -1000, -1000,
	1794, 11841, -1000, -1000, 2091, 24660, 738, 1606, 1600, 759,
	2396, -1000, 423, 3165, -1000, -1000, -1000, 850, 2395, -1000,
	1744, 1724, -1000, 43509, -1000, 29524, 29524, 661, 661, 29524,
	29524, 2393, 650, -1000, -1000, 11841, -1000, -1000, 1586, -1000,
	-1000, -1000, 1586, 1346, -1000, -1000, -1000, -1000, -1000, -1000,
	1968, -1000, -1000, 3078, -1000, -1000, 2022, 43509, 2022, 30740,
	-1000, 3111, 3107, -1000, 2022, 990, -1000, -317, 43509, 43509,
	-249, 1882, -1000, 2084, 130, -1000, -1000, 1001, -247, -252,
	51, 24052, 1598, -1000, -1000, -1000, -1000, -1000, 2241, -1000,
	969, -1000, -1000, -1000, 990, 2227, 2226, -1000, -1000, -126,
	-1000, -1000, 399, -1000, -1000, -1000, 531, 2078, -1000, -1000,
	292, -1000, -1000, 2077, -1000, -1000, 124, -1000, 1588, 1286,
	-1000, 2392, 10005, -1000, -1000, -1000, -1000, -1000, -1000, 557,
	-1000, 388, 47231, -1000, 939, -1000, 954, 557, 28308, 530,
	277, -1000, 1878, -1000, -1000, 3172, -1000, 519, -1000, 394,
	-1000, 1285, -1000, 1282, 30132, 1877, 3153, -1000, 47074, 716,
	-1000, -1000, 3697, -1000, -1000, -1000, -1000, -1000, -1000, 2076,
	2074, -1000, -1000, -1000, -1000, -1000, 1876, 2379, -16, 3020,
	2066, -1000, -1000, 2375, 1280, 1243, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1227, 1225, 29524, -1000, -1000,
	3697, 1870, 24052, 1586, -1000, -1000, 1191, 1182, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2374, -1000, -1000, 3104, -249,
	-1000, 2065, 110, 118, -1000, 2055, -1000, -1000, 706, -239,
	86, 84, 79, -1000, -1000, -1000, 10005, -1000, -1000, 43509,
	397, -1000, -1000, -1000, 154, -1000, -1000, -1000, -1000, 2049,
	2041, -1000, 29524, 2967, 2204, 392, 3101, -1000, 47384, -1000,
	1586, -1000, 392, 1176, -1000, 1586, 1586, -1000, 361, -1000,
	1573, -1000, 1868, -1000, 3078, -1000, 354, -1000, 403, -1000,
	-1000, -1000, 1174, -1000, -1000, -1000, 47074, 407, -1000, 555,
	2373, -1000, -1000, 2224, 10005, 2372, 1586, 2223, -122, 29524,
	2777, 2770, 2763, 2718, 1158, -1000, -1000, 24052, -1000, -1000,
	28916, 43509, 2026, -1000, -1000, 614, 122, 118, -1000, 3099,
	123, 3096, 3095, 978, 1722, -1000, 96, 82, 76, -1000,
	-1000, -1000, -1000, 507, -1000, 239, -1000, -1000, -1000, 297,
	-1000, -1000, 2967, -1000, 3092, 488, -1000, 24052, -1000, -1000,
	28308, 1653, 1653, -1000, -1000, 1865, -1000, -1000, -1000, -1000,
	1864, -1000, -1000, -1000, 1153, -1000, 43509, 764, 6940, -1000,
	2134, -1000, 43509, -1000, 2753, -1000, 213, 1100, 297, 661,
	297, 661, 297, 661, 297, 661, 234, -1000, -1000, -1000,
	1099, -1000, -1000, 2370, 1843, 135, 119, 3086, -1000, 2026,
	3080, 2026, 2026, -1000, 101, 706, -1000, -1000, -1000, 2038,
	-1000, -1000, -1000, -1000, 1586, 1586, 2034, 2033, 337, -1000,
	-1000, -1000, 27700, 409, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 407, 47384, -1000, 6940, 1088, -1000, 2022, -1000, 650,
	-1000, -1000, 2535, 2317, 3147, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 43509, 3012, 23444, 107, -1000,
	-1000, -1000, 2030, -1000, 2026, -1000, -1000, 1583, -1000, -292,
	1842, 1824, -1000, -1000, 43509, -1000, 43509, 393, -1000, 47384,
	1082, -1000, 6940, -1000, -1000, 3163, -1000, 3154, 825, 825,
	297, 297, 297, 297, -1000, -1000, 43509, -1000, 1072, -1000,
	-1000, -1000, 1304, -1000, -1000, -1000, -1000, 2025, -1000, -1000,
	2015, -1000, -1000, -1000, 1057, 2210, -1000, -1000, -1000, -1000,
	-1000, 1895, 434, -1000, 971, -1000, 1563, -1000, 27092, 43509,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 43509, 6328, -1000,
	1292, -1000, -1000, 2022, 43509, -1000,
}

var yyPgo = [...]int{
	0, 176, 3184, 252, 173, 3876, 106, 249, 228, 224,
	243, 3873, 3869, 3868, 3866, 2943, 2910, 3865, 3864, 3861,
	3860, 3859, 3858, 3856, 3855, 3854, 3853, 3851, 3850, 3848,
	3847, 3846, 3831, 3828, 3827, 3814, 3813, 3812, 3810, 3809,
	3808, 3807, 3805, 3804, 3803, 3802, 3801, 242, 3800, 3799,
	3798, 3797, 3795, 3787, 3782, 3781, 3776, 3775, 3774, 3772,
	3771, 3770, 3756, 3755, 3753, 3751, 3749, 3748, 3747, 3744,
	3742, 3741, 3738, 3737, 3736, 3735, 3724, 3723, 3722, 3720,
	3719, 3718, 221, 3717, 2905, 3716, 3715, 3714, 3713, 3711,
	3710, 3709, 238, 3707, 3706, 3705, 3704, 3703, 3702, 3700,
	3699, 3696, 3695, 3694, 244, 3693, 3691, 3687, 3682, 245,
	3681, 231, 3680, 169, 153, 3678, 3676, 3674, 3673, 3672,
	3671, 246, 188, 71, 3670, 45, 3669, 3668, 218, 3667,
	147, 3666, 141, 3660, 3650, 3649, 3648, 3647, 3646, 3645,
	3644, 3642, 3640, 3639, 3638, 3637, 3636, 3635, 3633, 3632,
	3631, 91, 3630, 261, 3629, 72, 3628, 3625, 124, 102,
	132, 251, 194, 257, 254, 186, 179, 101, 3624, 336,
	3622, 150, 225, 148, 29, 3621, 130, 3618, 262, 50,
	35, 247, 138, 57, 160, 127, 3615, 212, 107, 105,
	3612, 3611, 137, 3610, 232, 180, 3606, 95, 3604, 3602,
	3601, 3600, 3599, 203, 189, 3598, 3597, 123, 3596, 3595,
	136, 3594, 75, 116, 166, 115, 3593, 100, 113, 120,
	121, 93, 3592, 175, 3583, 3582, 3581, 3580, 182, 3578,
	3577, 128, 74, 3574, 3571, 3570, 68, 3569, 73, 3566,
	27, 3565, 65, 3564, 3547, 3546, 3545, 3544, 3543, 3542,
	3541, 3540, 3539, 3538, 3536, 51, 3534, 3533, 7, 10,
	16, 3531, 26, 3530, 163, 3529, 3525, 3524, 3523, 3522,
	90, 85, 3520, 86, 158, 3519, 8, 28, 69, 3518,
	3517, 217, 213, 98, 142, 3507, 320, 3506, 3505, 3504,
	151, 3503, 248, 3502, 3499, 3497, 3496, 3494, 3493, 134,
	3491, 214, 42, 3488, 125, 144, 3487, 40, 48, 211,
	219, 3486, 3484, 3482, 624, 193, 97, 60, 0, 3481,
	177, 3480, 3466, 3465, 259, 3464, 241, 240, 178, 237,
	260, 302, 3461, 3460, 58, 3458, 152, 36, 52, 133,
	223, 20, 263, 3457, 994, 9, 192, 3456, 207, 3455,
	394, 17, 318, 143, 3454, 3452, 32, 264, 3451, 3448,
	3447, 131, 3446, 3445, 172, 82, 3444, 3443, 3441, 3438,
	37, 3436, 39, 12, 3433, 117, 3432, 239, 3429, 250,
	129, 183, 181, 168, 229, 226, 79, 77, 3428, 1689,
	165, 96, 15, 3427, 220, 3426, 300, 126, 3424, 81,
	3423, 235, 265, 204, 3421, 185, 13, 46, 38, 30,
	44, 11, 234, 205, 3420, 3419, 21, 49, 3417, 54,
	3413, 19, 3412, 3411, 3410, 67, 5, 3409, 3408, 18,
	25, 3407, 34, 206, 167, 118, 88, 64, 3406, 3405,
	47, 159, 3404, 146, 157, 149, 3402, 76, 3401, 3400,
	3397, 1664, 3395, 255, 3393, 3392, 3391, 3390, 3387, 3386,
	3366, 3363, 215, 3362, 110, 43, 3359, 3358, 3356, 3354,
	84, 139, 3353, 3351, 3349, 3348, 31, 135, 3347, 14,
	3346, 24, 22, 33, 3345, 94, 3344, 3, 184, 3338,
	3337, 4, 3336, 3334, 1, 2, 3333, 3332, 122, 3331,
	89, 23, 162, 104, 3329, 3328, 83, 210, 140, 3327,
	3326, 92, 233, 198, 3325, 99, 227, 258, 3314, 209,
	3313, 3312, 3307, 3306, 3283, 3281, 1059, 3278, 3277, 230,
	70, 78, 114, 3276, 3274, 3273, 3259, 87, 154, 112,
	108, 59, 80, 3255, 111, 190, 3254, 196, 3253, 3251,
	3250, 103, 3249, 3245, 3234, 3228, 187, 3225, 3223, 191,
	222, 3222, 3219, 319, 3217, 3207, 3205, 3204, 3201, 3199,
	3196, 3194, 3193, 3192, 236, 326, 3186,
}

//line mysql_sql.y:11894
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObejectInfo {
	v, _ := st.union.(tree.ObejectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 569, 572, 572, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 119, 119, 148, 548, 548, 118,
	554, 554, 554, 555, 555, 115, 137, 136, 139, 139,
	138, 138, 135, 135, 131, 134, 134, 133, 133, 132,
	127, 129, 129, 128, 130, 130, 116, 104, 117, 497,
	497, 496, 496, 495, 495, 448, 448, 494, 494, 494,
	493, 493, 493, 492, 492, 491, 491, 490, 490, 488,
	488, 489, 487, 486, 486, 486, 484, 484, 484, 480,
	480, 482, 481, 481, 483, 475, 475, 478, 478, 476,
	476, 476, 476, 479, 474, 474, 474, 473, 473, 103,
	103, 103, 391, 391, 102, 102, 405, 405, 405, 405,
	405, 403, 403, 403, 403, 403, 403, 402, 402, 401,
	401, 406, 406, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 93, 93, 93, 93, 93, 98,
	98, 98, 560, 560, 559, 559, 561, 561, 561, 561,
	562, 562, 96, 96, 96, 97, 400, 400, 400, 94,
	95, 95, 390, 390, 395, 395, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 399,
	399, 399, 397, 397, 396, 396, 398, 398, 87, 87,
	87, 90, 89, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 88, 88, 88, 88, 88, 88, 83, 83,
	83, 83, 83, 82, 82, 84, 84, 387, 387, 386,
	99, 99, 100, 557, 557, 556, 558, 558, 558, 558,
	101, 107, 107, 107, 107, 107, 107, 107, 106, 106,
	109, 109, 108, 110, 92, 92, 92, 92, 92, 92,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 522, 522, 522, 524, 524, 322, 323,
	573, 325, 321, 321, 321, 518, 518, 519, 520, 521,
	521, 521, 105, 14, 193, 193, 423, 423, 11, 11,
	11, 11, 11, 11, 11, 11, 13, 81, 86, 86,
	263, 263, 268, 268, 269, 269, 269, 274, 274, 275,
	275, 264, 264, 264, 264, 264, 264, 264, 264, 264,
	264, 264, 264, 264, 264, 264, 264, 264, 264, 264,
	264, 264, 264, 250, 250, 250, 245, 245, 245, 245,
	246, 246, 247, 247, 248, 248, 248, 248, 249, 249,
	315, 315, 270, 270, 270, 272, 272, 271, 267, 265,
	265, 265, 265, 265, 265, 265, 266, 266, 266, 266,
	273, 273, 79, 85, 85, 85, 536, 536, 80, 547,
	547, 451, 451, 336, 336, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 456, 457, 332, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 54, 57, 58, 53,
	53, 53, 376, 376, 52, 574, 574, 310, 310, 67,
	66, 56, 68, 69, 70, 71, 72, 73, 51, 65,
	65, 65, 65, 65, 65, 65, 65, 76, 469, 469,
	576, 576, 576, 74, 75, 450, 450, 450, 64, 63,
	62, 61, 60, 60, 50, 50, 49, 49, 55, 143,
	59, 144, 144, 329, 329, 329, 331, 331, 327, 575,
	575, 419, 419, 330, 330, 48, 48, 48, 48, 77,
	328, 328, 309, 326, 326, 326, 12, 12, 10, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 26, 27, 29, 384, 384, 381,
	28, 20, 19, 19, 23, 22, 18, 18, 21, 24,
	25, 25, 9, 9, 9, 9, 15, 15, 16, 166,
	166, 218, 218, 530, 530, 526, 526, 527, 527, 527,
	528, 528, 529, 529, 111, 463, 463, 463, 463, 463,
	463, 8, 8, 188, 188, 462, 462, 462, 462, 462,
	462, 388, 388, 388, 507, 507, 507, 508, 187, 187,
	182, 182, 464, 464, 353, 509, 509, 472, 472, 471,
	471, 470, 470, 185, 185, 186, 186, 169, 169, 122,
	122, 477, 477, 477, 477, 485, 485, 447, 447, 255,
	255, 302, 302, 303, 303, 159, 159, 160, 160, 160,
	160, 160, 160, 563, 563, 564, 565, 566, 566, 567,
	567, 567, 568, 568, 568, 568, 568, 515, 515, 517,
	517, 516, 184, 184, 180, 180, 181, 181, 181, 179,
	179, 178, 177, 177, 176, 174, 174, 174, 175, 175,
	175, 192, 192, 162, 162, 162, 161, 161, 161, 161,
	161, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 163, 163, 523, 523, 523, 452, 452,
	452, 459, 459, 283, 283, 284, 284, 282, 282, 164,
	164, 165, 165, 165, 165, 281, 281, 280, 167, 167,
	173, 172, 172, 168, 168, 168, 168, 291, 291, 290,
	290, 290, 290, 114, 120, 120, 121, 191, 191, 289,
	288, 288, 288, 190, 190, 189, 189, 183, 183, 171,
	171, 171, 171, 287, 170, 285, 553, 553, 552, 552,
	551, 549, 549, 549, 550, 550, 550, 550, 499, 499,
	499, 499, 499, 316, 316, 316, 320, 320, 319, 319,
	319, 319, 319, 324, 7, 7, 7, 7, 7, 7,
	7, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 39, 202, 203, 40, 204, 204,
	205, 205, 206, 206, 207, 208, 209, 209, 209, 209,
	38, 194, 194, 195, 195, 196, 196, 197, 198, 198,
	198, 201, 199, 200, 200, 571, 571, 570, 37, 37,
	30, 152, 152, 153, 153, 153, 155, 155, 251, 251,
	251, 154, 154, 156, 156, 156, 531, 534, 534, 535,
	532, 532, 537, 537, 537, 538, 538, 538, 538, 539,
	539, 31, 140, 145, 542, 542, 542, 541, 541, 543,
	543, 544, 544, 306, 306, 307, 307, 150, 151, 151,
	147, 142, 158, 158, 158, 158, 158, 141, 146, 149,
	533, 540, 540, 540, 385, 385, 382, 383, 383, 380,
	379, 379, 379, 546, 546, 545, 545, 545, 317, 317,
	32, 375, 375, 377, 378, 378, 378, 369, 369, 369,
	369, 36, 373, 373, 374, 374, 374, 374, 374, 374,
	374, 370, 370, 372, 372, 368, 368, 368, 368, 368,
	368, 368, 35, 157, 157, 367, 367, 364, 364, 362,
	362, 363, 363, 361, 361, 361, 365, 365, 43, 78,
	44, 45, 46, 42, 366, 366, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 124, 123, 123, 123, 123,
	123, 126, 126, 305, 305, 304, 304, 125, 252, 252,
	41, 230, 230, 439, 439, 434, 434, 434, 434, 434,
	454, 454, 454, 435, 435, 435, 436, 436, 436, 438,
	438, 438, 437, 437, 437, 437, 437, 453, 453, 455,
	455, 455, 407, 407, 408, 408, 408, 411, 411, 426,
	426, 427, 427, 425, 425, 432, 432, 431, 431, 430,
	430, 429, 429, 428, 428, 428, 428, 422, 422, 421,
	421, 409, 409, 409, 409, 409, 410, 410, 410, 420,
	420, 424, 424, 279, 279, 278, 278, 238, 238, 239,
	239, 277, 277, 236, 236, 237, 237, 237, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 505, 505, 506, 241, 241, 253, 253,
	253, 253, 253, 253, 240, 240, 242, 242, 219, 219,
	217, 217, 217, 217, 210, 210, 211, 211, 212, 212,
	212, 216, 216, 215, 215, 215, 215, 213, 213, 214,
	214, 214, 214, 214, 214, 393, 393, 502, 502, 503,
	503, 498, 498, 498, 501, 501, 501, 501, 501, 501,
	501, 504, 504, 504, 500, 500, 220, 300, 300, 300,
	318, 318, 318, 318, 299, 299, 299, 235, 235, 234,
	234, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 392, 392, 333, 333, 334, 334, 262,
	261, 261, 261, 261, 261, 259, 260, 258, 258, 258,
	258, 258, 257, 257, 256, 256, 256, 371, 371, 254,
	254, 244, 244, 244, 243, 243, 243, 433, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 297, 297, 297,
	298, 298, 298, 298, 298, 298, 298, 298, 343, 343,
	349, 349, 514, 514, 513, 221, 221, 221, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 231, 231, 231,
	416, 416, 416, 416, 417, 417, 417, 417, 418, 418,
	418, 414, 414, 415, 415, 354, 355, 355, 460, 460,
	461, 461, 412, 412, 413, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 468, 468, 468,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 525, 525, 525, 510,
	510, 510, 511, 511, 511, 511, 511, 511, 511, 511,
	511, 511, 511, 511, 512, 512, 512, 512, 512, 512,
	512, 512, 512, 512, 512, 512, 512, 512, 512, 512,
	512, 295, 295, 295, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 356, 356, 357, 357, 465, 465, 465, 465,
	465, 465, 466, 466, 467, 467, 467, 467, 458, 458,
	458, 458, 458, 458, 458, 458, 458, 458, 458, 458,
	458, 458, 458, 458, 458, 458, 458, 458, 458, 458,
	458, 458, 458, 458, 458, 458, 458, 341, 292, 292,
	292, 358, 350, 350, 351, 351, 352, 352, 344, 344,
	344, 344, 344, 344, 345, 345, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 346, 346,
	348, 348, 360, 360, 360, 359, 359, 359, 359, 359,
	359, 359, 233, 233, 233, 233, 338, 338, 338, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 337,
	337, 223, 223, 223, 223, 227, 227, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 228, 228, 228, 228, 228, 226, 226, 226, 226,
	226, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 112,
	113, 113, 225, 301, 301, 440, 440, 443, 443, 441,
	441, 442, 444, 444, 444, 445, 445, 445, 446, 446,
	446, 449, 449, 308, 308, 308, 314, 314, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 6, 1, 2, 4,
	0, 1, 1, 0, 1, 5, 2, 2, 6, 9,
	6, 9, 4, 7, 8, 0, 1, 1, 2, 4,
	6, 1, 2, 4, 0, 2, 10, 10, 2, 0,
	2, 1, 3, 3, 3, 0, 2, 1, 3, 5,
	0, 2, 3, 1, 3, 1, 1, 1, 3, 1,
	1, 1, 1, 0, 3, 3, 0, 3, 3, 0,
	1, 3, 0, 1, 3, 0, 2, 1, 2, 3,
	4, 3, 3, 1, 0, 1, 1, 0, 1, 8,
	5, 7, 0, 3, 8, 5, 1, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	4, 1, 3, 1, 2, 2, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 2, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 2, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 1, 1, 2, 2, 1,
	1, 1, 3, 2, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 1, 3, 3, 1, 2, 2, 2, 1,
	2, 2, 3, 4, 4, 6, 1, 1, 1, 2,
	4, 6, 1, 4, 1, 3, 3, 4, 4, 4,
	4, 3, 3, 2, 4, 4, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 2, 2, 0, 1, 4, 2, 4, 1, 5,
	3, 2, 1, 2, 2, 4, 4, 5, 2, 1,
	3, 4, 4, 1, 2, 9, 7, 1, 3, 3,
	1, 1, 3, 1, 3, 2, 1, 2, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 4, 4,
	2, 4, 3, 3, 1, 1, 1, 1, 1, 1,
	2, 3, 4, 7, 2, 3, 3, 4, 5, 3,
	4, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 1, 1,
	1, 1, 6, 4, 1, 1, 0, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 10, 7, 4, 4,
	1, 3, 1, 6, 3, 3, 3, 1, 1, 1,
	3, 2, 4, 5, 5, 6, 5, 5, 3, 2,
	2, 1, 3, 4, 3, 7, 5, 8, 2, 2,
	1, 3, 2, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 2, 1, 3, 2, 1, 2,
	2, 1, 2, 3, 2, 2, 3, 6, 3, 3,
	1, 1, 7, 7, 8, 8, 0, 4, 7, 0,
	3, 0, 2, 0, 1, 1, 1, 1, 4, 2,
	2, 3, 3, 4, 5, 3, 4, 4, 2, 2,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 3, 2,
	5, 5, 0, 2, 7, 0, 1, 0, 1, 5,
	5, 3, 3, 2, 4, 4, 4, 4, 4, 1,
	1, 1, 3, 3, 1, 1, 1, 6, 0, 1,
	1, 1, 1, 5, 5, 0, 1, 1, 3, 3,
	3, 4, 6, 7, 4, 4, 7, 8, 3, 3,
	2, 3, 4, 0, 2, 2, 0, 2, 2, 1,
	1, 1, 1, 0, 1, 4, 4, 5, 4, 3,
	1, 3, 1, 1, 3, 5, 2, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 4, 4, 1, 3, 1,
	4, 6, 6, 4, 4, 4, 4, 4, 3, 6,
	3, 5, 1, 1, 2, 2, 11, 8, 9, 1,
	3, 2, 4, 0, 2, 0, 1, 1, 1, 1,
	0, 1, 0, 1, 4, 2, 1, 5, 4, 4,
	2, 5, 5, 1, 3, 2, 1, 5, 4, 4,
	2, 0, 5, 4, 0, 1, 3, 3, 1, 3,
	1, 3, 1, 3, 4, 0, 1, 0, 1, 1,
	3, 1, 1, 0, 4, 1, 3, 2, 1, 0,
	8, 0, 4, 7, 4, 0, 2, 0, 2, 0,
	2, 0, 4, 1, 3, 1, 1, 6, 4, 5,
	7, 4, 5, 0, 1, 3, 8, 0, 6, 0,
	4, 6, 1, 1, 1, 1, 1, 2, 3, 1,
	3, 6, 0, 3, 0, 1, 2, 4, 4, 0,
	1, 3, 1, 3, 3, 0, 1, 1, 0, 2,
	2, 0, 2, 3, 3, 3, 1, 3, 3, 3,
	3, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 7, 7, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 2, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 3,
	1, 1, 1, 4, 4, 4, 3, 2, 2, 2,
	3, 2, 3, 4, 1, 3, 4, 0, 2, 1,
	1, 2, 2, 0, 1, 2, 4, 1, 3, 1,
	3, 2, 3, 1, 4, 3, 0, 1, 1, 2,
	5, 2, 2, 2, 0, 2, 3, 3, 0, 1,
	3, 1, 3, 0, 1, 2, 1, 1, 0, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 1, 7, 1, 3,
	0, 1, 1, 3, 1, 3, 0, 1, 1, 1,
	14, 1, 3, 0, 1, 1, 3, 1, 1, 2,
	4, 1, 1, 1, 1, 0, 1, 2, 9, 9,
	7, 1, 2, 3, 3, 3, 0, 4, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 4,
	1, 1, 3, 4, 3, 0, 1, 1, 1, 0,
	2, 7, 8, 8, 0, 3, 3, 0, 3, 0,
	3, 0, 5, 1, 3, 0, 3, 3, 0, 2,
	9, 6, 0, 2, 2, 3, 3, 4, 4, 4,
	1, 0, 2, 2, 1, 3, 2, 1, 3, 2,
	1, 3, 2, 0, 1, 3, 4, 3, 1, 1,
	4, 1, 3, 1, 1, 1, 1, 0, 1, 1,
	1, 11, 0, 2, 3, 3, 2, 2, 3, 1,
	1, 1, 3, 3, 4, 0, 2, 2, 2, 2,
	2, 2, 6, 0, 4, 1, 1, 0, 3, 0,
	1, 1, 2, 4, 4, 4, 0, 1, 8, 2,
	4, 4, 4, 9, 0, 2, 11, 9, 11, 8,
	6, 9, 7, 10, 7, 2, 2, 9, 4, 5,
	3, 0, 4, 1, 3, 0, 3, 6, 0, 2,
	10, 0, 2, 0, 2, 0, 3, 2, 4, 3,
	0, 2, 1, 0, 2, 3, 0, 2, 3, 0,
	2, 1, 0, 3, 2, 4, 3, 0, 1, 0,
	1, 1, 0, 6, 0, 3, 5, 0, 4, 0,
	3, 1, 3, 4, 5, 0, 3, 1, 3, 2,
	3, 1, 2, 0, 4, 6, 5, 0, 2, 0,
	2, 4, 5, 4, 5, 1, 5, 6, 5, 0,
	3, 0, 1, 1, 3, 3, 3, 0, 4, 1,
	3, 3, 3, 0, 1, 1, 3, 2, 3, 3,
	3, 4, 4, 3, 3, 3, 3, 4, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 5, 4, 1, 3, 3, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 4, 6, 0, 1, 1, 3, 1, 1,
	1, 1, 1, 7, 9, 7, 9, 2, 1, 7,
	9, 7, 9, 8, 5, 0, 1, 0, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 3, 1, 3, 5,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	2, 1, 2, 2, 1, 1, 2, 2, 2, 3,
	3, 2, 2, 1, 5, 6, 4, 1, 1, 1,
	5, 4, 1, 1, 2, 0, 1, 1, 2, 5,
	0, 1, 1, 2, 2, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 2, 2, 2, 0, 3, 0,
	3, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 3, 5, 2, 2, 2, 2,
	4, 1, 1, 2, 5, 6, 8, 6, 6, 6,
	1, 1, 1, 1, 1, 1, 3, 4, 4, 4,
	7, 9, 7, 7, 7, 9, 7, 7, 0, 2,
	0, 1, 1, 2, 4, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 2, 2, 2, 0, 1, 1,
	1, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 5, 0, 1, 3, 0, 1, 0, 2,
	0, 2, 0, 1, 6, 8, 8, 6, 6, 5,
	5, 5, 6, 6, 6, 6, 5, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 1, 1, 1,
	4, 4, 6, 8, 6, 4, 5, 4, 4, 4,
	3, 4, 6, 6, 7, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 8, 4, 2, 3, 2, 4, 2,
	2, 4, 6, 2, 2, 4, 6, 4, 2, 4,
	4, 4, 0, 1, 2, 3, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 3, 0, 1, 1, 3, 1, 3, 3, 3,
	3, 3, 2, 1, 1, 1, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 1, 3, 4, 4,
	5, 4, 5, 3, 4, 5, 6, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	2, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 4, 4, 1, 2,
	3, 5, 1, 1, 3, 0, 1, 0, 3, 0,
	3, 3, 0, 3, 5, 0, 3, 5, 0, 1,
	1, 0, 1, 1, 2, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -569, -572, -2, -5, 620, -1, -4, -113, -87,
	-7, -14, -115, -116, -8, -111, -9, -10, -12, -91,
	-106, -108, -110, -109, -47, -11, -105, -82, -83, -93,
	-99, -102, -103, -104, -117, -112, -114, -159, -118, -119,
	610, -88, -89, -90, -33, -32, -31, -30, -140, -145,
	-148, 544, 616, 447, 14, 496, -15, -16, -515, -17,
	259, -321, -322, -323, -325, -573, -48, -49, -50, -60,
	-61, -62, -63, -64, -74, -75, -76, -51, -52, -53,
	-56, -54, -67, -66, -68, -69, -70, -71, -72, -73,
	-55, -59, -143, -144, -77, -57, -78, -58, -80, -79,
	-85, -81, -86, -142, -147, -13, 234, -84, 76, -94,
	-95, -96, -97, -98, -100, -101, 371, 377, 434, 609,
	61, -160, -162, 626, 627, 159, 160, 162, 163, -34,
	-35, -36, -37, -38, -39, -41, -40, -42, -43, -44,
	-45, -46, 230, 16, 539, -18, -21, -19, -22, -20,
	-28, -29, -27, -24, -26, -141, -25, -146, -23, -149,
	254, 253, 38, 320, 321, 322, 375, 252, 231, 15,
	31, 42, 351, -161, 82, 531, 532, 534, 232, -163,
	13, 631, -6, -3, -2, -127, -131, -135, -138, -139,
	-136, -137, -4, -113, 117, 244, 611, -318, 367, 612,
	614, 613, 85, 93, -311, -313, 447, 259, 371, 377,
	609, 627, 546, 547, 548, 549, 550, 551, 552, 553,
	555, 556, 557, 558, 559, 560, 561, 571, 572, 562,
	563, 564, 565, 566, 567, 568, 569, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 499, 596, 597, 598, 599, 527, 554, 590, 591,
	592, 593, 349, 350, 536, 271, 295, 402, 301, 308,
	159, 178, 172, 200, 192, 532, 167, 275, 313, 276,
	92, 162, 482, 107, 459, 431, 165, 290, 292, 294,
	528, 529, 361, 297, 526, 296, 298, 300, 530, 277,
	352, 188, 183, 289, 273, 181, 278, 40, 279, 205,
	280, 281, 541, 455, 348, 461, 305, 52, 429, 182,
	456, 293, 458, 209, 213, 473, 474, 176, 177, 463,
	476, 204, 207, 208, 251, 345, 346, 43, 538, 263,
	477, 211, 203, 199, 485, 309, 307, 202, 175, 198,
	274, 65, 215, 214, 216, 425, 426, 427, 428, 282,
	283, 365, 472, 195, 184, 353, 168, 23, 480, 258,
	460, 378, 284, 302, 310, 210, 212, 265, 270, 540,
	531, 433, 269, 306, 478, 180, 262, 291, 257, 481,
	169, 534, 380, 285, 163, 299, 475, 484, 64, 393,
	174, 166, 248, 160, 267, 272, 286, 287, 288, 525,
	312, 311, 303, 533, 196, 264, 201, 186, 173, 197,
	161, 266, 483, 394, 607, 351, 412, 194, 191, 268,
	241, 479, 462, 164, 416, 395, 189, 314, 603, 604,
	605, 366, 344, 315, 316, 187, 255, 453, 454, 319,
	422, 335, 396, 432, 403, 397, 222, 223, 323, 465,
	467, 206, 606, 324, 325, 326, 457, 327, 328, 329,
	330, 370, 56, 58, 94, 97, 96, 628, 629, 63,
	29, 356, 359, 391, 398, 337, 608, 537, 334, 338,
	339, 360, 25, 414, 382, 418, 417, 48, 49, 50,
	53, 54, 55, 57, 59, 60, 51, 524, 375, 388,
	486, 45, 47, 385, 27, 362, 413, 435, 333, 415,
	446, 46, 444, 445, 466, 26, 364, 363, 62, 44,
	421, 423, 424, 317, 331, 373, 617, 487, 368, 384,
	387, 369, 336, 358, 389, 67, 66, 381, 618, 376,
	374, 332, 542, 543, 340, 570, 354, 430, 521, 520,
	519, 518, 517, 516, 515, 514, 320, 321, 322, 399,
	400, 401, 411, 404, 405, 406, 407, 408, 409, 410,
	449, 450, 619, 468, 470, 471, 469, 236, 630, 355,
	239, 621, 622, 95, 623, 625, 624, 28, -398, -396,
	-318, 532, 609, 377, 531, 534, 371, 351, 627, 375,
	259, 320, 321, 322, 447, 349, -204, -318, 630, -169,
	243, 39, -217, -318, -169, -84, -16, -15, -161, -162,
	-217, 238, -326, 24, 429, -92, 430, 234, 82, 77,
	-318, -9, -104, -8, -111, -82, -159, 434, -324, -318,
	320, 320, -324, 238, -318, 269, 410, -451, 244, -402,
	-375, 270, -401, -377, -404, -378, 32, 230, 232, 231,
	544, 266, 16, 375, 240, 14, 13, 376, 252, 25,
	26, 28, 15, 377, 379, 29, 380, 383, 384, 385,
	42, 388, 389, 259, 85, 93, 88, 277, -203, -318,
	-352, -344, 114, -347, -339, -340, -342, -494, -488, -337,
	82, 141, 142, 149, 115, 632, -341, -433, 36, 117,
	550, 554, 590, 497, -293, -294, -295, -296, -297, -298,
	-318, -489, -487, 88, 98, 100, 104, 105, 103, 101,
	153, 185, 102, 89, 154, -162, 85, -510, 560, -312,
	583, 596, 597, 598, 599, 582, 61, -458, -467, 237,
	-465, 152, 190, 255, 186, 14, 147, 422, 187, 591,
	592, 593, 557, 579, 499, 561, 571, 586, 552, 553,
	555, 547, 548, 549, 551, 562, 564, 578, -468, 574,
	584, 585, 570, 594, 595, 587, 588, 589, 625, 87,
	86, 577, 576, 563, 558, 559, 565, 546, 556, 566,
	567, 575, 580, 581, 359, 107, 360, 361, 489, 352,
	362, 244, 429, 70, 363, 364, 365, 366, 367, 496,
	368, 71, 369, 358, 259, 412, 370, 189, 206, 501,
	500, 502, 493, 490, 488, 491, 492, 494, 495, 568,
	569, 573, -120, -121, 601, -563, -286, -564, 6, 7,
	8, 9, -565, 154, -554, 431, 540, 88, 164, 161,
	-389, 164, 113, 169, 168, -389, 166, 323, 265, -366,
	-152, 349, 412, 327, 94, 269, -369, -367, 528, -453,
	317, 313, 289, 239, 110, -153, 249, 248, 108, 489,
	237, 386, 308, 56, 58, -526, -527, 227, 228, 229,
	-517, 522, -516, -318, 361, 96, 97, 27, 238, 372,
	265, 467, 465, 466, 468, 469, 470, 471, -65, -469,
	-450, 462, 461, -330, 454, 460, 452, 464, 455, 350,
	329, 544, 328, 230, 621, 529, 523, -308, 396, 432,
	486, 487, 373, 433, 473, 475, 456, 107, 193, 190,
	239, 241, 238, 349, 489, 412, 94, 327, -526, 161,
	473, 475, 269, 410, 41, -395, 422, -394, -396, 474,
	485, 86, 87, 472, -308, 107, 453, 453, -563, -286,
	-160, -162, -114, -515, 530, 530, 530, 239, 349, 412,
	269, 240, 238, 525, 528, 241, 489, 237, 320, 372,
	265, 327, 94, 166, -452, -523, 32, -459, 224, 225,
	226, 33, 34, -1, 121, 631, -344, -344, -6, 634,
	-6, -344, -318, -318, 156, -223, -227, -224, -226, -225,
	-229, -228, 190, 191, 152, 194, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 207, 208, 205, 31, 206,
	255, 186, 187, 188, 189, 209, 172, 192, 537, 217,
	173, 218, 174, 219, 175, 220, 176, 177, 221, 178,
	181, 182, 183, 184, 180, 155, -193, 88, 32, 82,
	155, 88, -185, 261, -169, -217, 155, 632, -185, -563,
	-178, -179, 11, -217, -299, -318, 431, 124, -92, 77,
	-92, 430, 77, -518, -519, -520, -522, 234, 430, 429,
	-109, 155, 277, 17, -324, -324, 80, -217, -377, 269,
	-402, -375, 36, 79, 156, 242, 156, 79, 82, 373,
	349, 412, 374, 489, 238, 386, 241, 269, 387, 349,
	412, 238, 241, 489, 269, 349, 238, 241, 412, 269,
	387, 349, 452, 453, 241, 27, 378, 381, 382, 453,
	-473, 485, 156, 113, 110, 111, 112, -344, 131, -359,
	124, 125, 126, 127, 128, 129, 130, 138, 137, 148,
	141, 142, 143, 144, 145, 146, 147, 139, 140, 134,
	114, 132, 136, 133, 116, 151, -162, -344, -352, 61,
	-342, -342, -342, -342, -318, -433, -349, -344, 82, 82,
	82, 82, 155, 101, 88, -344, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, -466, 82,
	82, -356, -357, 82, 82, -337, -299, 82, 88, 88,
	82, 82, 82, 88, 82, 82, 82, -357, -357, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, -179, 156, -178, 82, -178, -179,
	-163, -162, 32, 33, 32, 33, 32, 33, 32, 33,
	-566, 618, 82, 98, 628, 222, 478, 539, 167, 168,
	169, -364, 244, -202, -318, -204, 372, 241, 525, 241,
	-153, -364, -364, -364, -364, -364, 240, -364, 24, 238,
	238, 238, 238, -364, 496, 124, 124, 59, -528, 171,
	156, -517, -184, 82, -329, 132, 136, -329, -282, 18,
	24, 267, 267, 267, -329, 307, -574, -575, 17, 134,
	-327, -575, -327, -327, -329, -576, 240, 463, 43, 268,
	267, -180, -181, 22, -180, 457, 453, -419, 458, 459,
	-331, -575, -330, -329, -329, -330, -329, -329, -329, 32,
	238, 241, 489, 327, 622, -574, -574, 31, 31, -451,
	-451, -217, -451, 523, -309, -318, -451, -451, -451, -529,
	243, -560, -559, 476, -562, 478, 161, -396, 161, -396,
	-377, 269, 269, 156, 124, 24, -397, 124, 135, -396,
	-396, -397, -397, -240, 41, -317, 152, -318, 88, -240,
	41, -557, -556, -217, -179, -163, -162, 83, 83, 83,
	533, 533, 533, -451, -451, -451, -451, -451, -453, -451,
	-451, -451, -451, -451, -324, -194, -318, -204, 244, -451,
	-451, -451, -164, -165, 143, -344, -318, -164, -3, -129,
	-128, 118, 119, 121, 612, 367, 611, 615, 609, -396,
	41, -446, 394, 393, -440, -442, 82, -441, 82, -441,
	-441, -441, -441, -441, 82, 82, -443, 82, -443, -443,
	-440, -444, 82, -444, -445, 82, -445, -444, -318, -423,
	539, -350, -352, -318, 39, -462, 61, -159, 82, 31,
	82, -185, -318, -344, -463, 61, -159, 82, 31, -179,
	-122, 39, -181, 21, 155, 98, 88, -109, -92, 77,
	-109, 83, 156, -521, 104, 105, -524, 204, 196, -318,
	-107, 88, -7, -8, -9, -10, -47, -82, -159, -490,
	-488, 82, 32, 421, 79, 17, -403, 238, 489, 372,
	265, 241, 349, -401, -384, -381, -379, -317, -377, -380,
	-379, -406, -299, 453, -123, 436, 435, 319, -344, -344,
	-344, -344, -344, 103, 114, 344, 104, 105, -339, -360,
	32, 315, 316, -340, -340, -340, -340, -340, -340, -340,
	-340, -340, -340, -340, -340, -348, -358, -433, 82, 134,
	132, 136, 133, 116, -342, -342, -340, -340, -242, -317,
	152, 83, 156, -344, -514, -513, 118, -344, -344, -344,
	-344, -318, -511, -512, 503, 504, 505, 506, 507, 508,
	509, 510, 511, 512, 513, 363, 358, 364, 362, 352,
	370, 365, 366, 189, 520, 521, 514, 515, 516, 517,
	518, 519, -350, -350, -344, -511, -350, -292, 33, 32,
	-352, -352, -352, 83, -344, -525, 342, 341, 343, -182,
	-318, -350, 83, 83, 83, 98, -352, -352, -350, -340,
	-350, -350, -350, -350, -512, -292, -292, -292, -292, 143,
	-352, -352, -292, -292, -292, -292, 143, -292, -292, -292,
	-292, -292, -292, -292, -292, -292, -292, 83, 83, 83,
	143, -352, -180, -121, -471, -470, -344, 41, -122, -181,
	-567, 619, 82, -299, -555, 88, 88, 632, 479, 480,
	165, 168, 167, -318, 114, 35, 82, -194, -364, -364,
	-364, -534, -318, 89, -385, -382, -379, -318, -318, -375,
	-318, -318, -217, -364, -364, -364, -364, -217, -251, 53,
	54, 55, -379, -154, 56, 57, -529, -516, 35, -183,
	-318, -282, -342, -342, -344, -379, 269, -574, -329, -329,
	-310, -309, -331, -326, -331, -331, -282, -327, -329, -329,
	-344, -331, -327, -282, -318, 453, -282, -282, -419, -329,
	-328, -318, -328, -364, -309, -310, -310, -217, -217, -263,
	-268, -264, -269, 261, 235, 356, 357, 233, 231, 11,
	232, -276, 308, -365, 497, -246, -247, 77, 42, -249,
	259, 398, 391, 271, 275, 92, 276, 431, 277, 240,
	279, 280, 281, 296, 298, 251, 282, 283, 284, 422,
	285, 160, 297, 286, 287, 288, 374, -241, 6, 330,
	41, 51, 52, 445, 444, 542, 539, 272, -531, -318,
	-531, 31, 31, -385, -318, -318, -172, -167, -171, -168,
	-173, -285, -287, -170, 82, -217, -162, -318, 156, 477,
	479, 480, -560, -397, -560, -397, 32, 421, -400, 421,
	32, -375, -394, 473, 475, -390, 88, 422, -380, -399,
	79, 152, -470, -397, -397, -399, -399, 151, 156, -558,
	478, 479, 227, -180, 98, 98, 98, -219, -217, -531,
	-384, -375, -318, -451, -219, -219, -219, -318, -318, 82,
	155, 36, -318, -318, -318, -281, 156, -280, 17, -319,
	-318, 35, 88, 155, -281, -130, -128, 120, -344, -6,
	611, -344, -6, -6, -344, -6, -344, -449, 395, 98,
	98, -301, 88, -301, 98, 98, 98, 545, 83, 88,
	-388, 79, -464, -353, -509, 601, -187, 83, -182, -507,
	-508, -182, -186, -318, -462, 632, 633, -464, -187, 83,
	-507, -180, 602, -122, -177, -176, -344, -318, 24, -109,
	-92, -519, 155, 156, -183, -403, -383, -380, -405, 143,
	-318, -391, 156, 539, 635, 86, 242, -546, -545, 413,
	83, 156, -474, 243, 496, 88, 632, 429, 222, 223,
	103, 344, 104, 105, -433, -352, -348, -342, -342, -340,
	-340, -346, 256, -346, 113, -344, 633, -343, -513, 120,
	-344, 35, 156, 35, 156, 80, 155, 83, 83, 17,
	17, 83, -344, 83, 83, 83, 83, 17, 17, -344,
	83, 155, 83, 83, 83, 83, 80, 83, 156, 83,
	83, 83, 83, 156, -352, -352, -344, -352, 83, 83,
	83, -344, -344, -344, -352, 83, -344, -344, -344, -344,
	-344, -344, -344, -344, -344, -344, -413, 448, -413, -413,
	156, 156, 156, 83, -122, 82, 98, 156, 629, -305,
	-304, 88, 166, 169, 169, 168, 24, 36, -203, -205,
	-206, -207, -208, -209, 134, 157, 158, 82, -217, -217,
	-217, -535, 399, -547, 156, 41, -545, 489, -150, 319,
	-368, 80, -157, 17, 539, -217, -217, -217, -217, -230,
	35, 17, -166, -218, -318, 82, 83, 156, -376, 80,
	-318, -310, -282, -282, -331, -282, -282, 156, 23, -329,
	-331, -331, -327, 155, -309, -439, 35, -184, 156, 21,
	261, -216, -315, -213, -215, 246, -334, -214, 249, -503,
	247, 245, 108, 250, 304, 109, 240, -315, -315, 246,
	-250, 242, 35, -315, -266, 240, 347, 304, 247, 21,
	261, -265, 240, 109, -318, 246, 250, 247, 245, -314,
	124, -308, 151, 242, 43, 374, -314, 543, 261, -314,
	-314, -314, -314, -314, -314, -314, 278, 278, -314, -314,
	-314, -314, -314, -314, -314, -314, -314, -314, -314, 161,
	-314, -314, -314, -314, -314, -314, 82, 273, 274, -536,
	399, 31, 355, 355, -547, 31, -158, 349, 31, -288,
	-289, -290, -291, 68, 72, 74, 69, 70, 71, 75,
	31, 156, -316, -320, 35, -318, 88, -316, -162, -167,
	-172, -316, 82, -559, -561, 481, 478, 484, -399, -399,
	242, 82, 124, -399, -399, 41, -317, -556, 485, 479,
	-122, 156, 79, -219, -195, -196, -197, -198, -223, -299,
	191, 194, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 207, 208, 205, 206, 255, 186, 187, 188, 189,
	209, 172, 192, 537, 173, 174, 175, 176, 177, 178,
	181, 182, 183, 184, 180, -318, -204, -282, -165, -167,
	-318, 88, -318, 143, -282, 121, -6, 119, -134, -133,
	-132, 122, 609, 615, 121, 121, 121, 83, 83, 83,
	156, 83, 83, 83, 156, 83, 156, 98, -477, 458,
	40, 156, 82, 83, 156, 61, 156, 124, 83, 156,
	-344, 83, 61, -122, 88, 156, -174, 37, 38, 155,
	431, -318, -488, 83, -405, 156, 242, 155, 155, -381,
	377, -317, -383, 21, 539, -299, 39, -305, 124, 632,
	-318, 83, -346, -346, 113, -342, -339, 83, 121, -344,
	119, -221, -223, 393, 394, -344, -221, -222, -228, 152,
	190, 255, 189, 188, 186, 393, 394, -240, -318, -344,
	-344, 83, -344, -344, 17, -318, -240, -340, -344, -179,
	-179, 83, 83, -412, -413, -412, -412, 83, 83, 83,
	83, -412, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 82, 98, 100, 98, 100, -470, -568, 63,
	617, 62, 421, 103, 309, 156, 98, 88, 633, 156,
	124, 169, -548, 313, 349, 385, 83, 156, -299, -195,
	-184, 82, -184, -538, 460, 401, 411, -314, -336, -335,
	351, 42, -456, 422, 407, 408, -382, 269, -318, -544,
	95, 124, 79, 334, 338, 339, 335, 336, 337, -362,
	-363, -361, -365, -531, 82, 82, -159, 35, 132, 82,
	82, 35, -434, 324, -223, -217, -166, -318, 17, 156,
	-530, 155, -1, -318, -375, -329, -282, -344, -344, -282,
	-329, -329, -331, -318, -434, -223, 35, -264, 235, 232,
	-409, 306, 307, -410, -424, 309, -426, 82, -220, -299,
	-214, -502, -503, -364, -318, 109, -502, 109, 82, -220,
	-299, -299, -267, -328, -299, -318, -318, -318, -318, -272,
	-271, -299, -274, 32, -275, -318, -318, -318, -318, 109,
	-318, 109, -245, 41, 48, 49, 50, -314, -314, 193,
	-248, 41, 421, 423, 424, -274, 98, 98, 98, 98,
	88, 88, 88, -314, -314, 98, 88, -320, 88, -504,
	168, 45, 46, 98, 98, 98, 98, 41, 88, -253,
	41, 289, 293, 290, 291, 292, 88, 98, 41, 98,
	41, 98, 41, -318, 82, -505, -506, 88, -538, -314,
	355, -396, 124, -336, -543, 319, -151, 92, 32, -188,
	235, 232, -531, -387, -386, -299, -171, -171, -171, -171,
	68, 68, 68, 73, 68, 73, 68, -290, -387, -173,
	-184, -320, 83, -553, -552, -551, -549, 76, 243, 77,
	-350, 478, 482, 483, -383, -332, 88, -390, -192, 24,
	-217, -217, -455, 299, 300, 83, 156, -223, -284, 19,
	155, -284, 117, -6, -130, -132, -344, -6, -344, 611,
	367, 612, 88, 98, 98, -485, 442, 437, 439, 109,
	-353, -472, -471, 61, -159, -182, -464, -508, -470, -318,
	633, 61, -159, -464, -192, -477, -176, -175, 44, -318,
	98, 17, -380, -375, 143, 143, -318, 378, -391, 88,
	400, 88, 238, 633, 88, -305, -339, -344, 83, -231,
	177, 176, -231, 35, 83, 83, -441, -441, -440, -443,
	-440, -231, -231, 83, 83, 24, 83, 83, 83, -344,
	83, 83, 156, -460, 498, -461, 572, -412, -412, -412,
	-412, -412, -412, -412, -412, -412, -412, -412, -412, -412,
	-412, -412, -412, -355, -354, 261, 443, 624, 624, 443,
	624, 624, 83, 156, -511, 156, -304, 88, -318, 88,
	88, -207, -223, 83, 35, -210, -211, -212, -220, -213,
	-215, 35, -539, 92, -532, 88, -318, -540, 92, 402,
	154, 353, 41, 403, 404, 419, 348, 98, 98, 409,
	-533, -318, -158, -542, 52, 124, 88, -217, -361, -308,
	151, 280, 327, -279, -278, -318, 88, -210, -159, -217,
	-210, -210, -159, -435, 326, 21, 98, 142, -185, 80,
	155, -167, -218, -318, 143, 83, -282, -282, -282, -329,
	-435, -159, -421, 310, 82, -419, 82, -419, 109, 335,
	-427, -425, 261, -270, 45, 47, -223, -500, -318, -498,
	-500, -318, -498, -498, -364, -344, -270, -220, 242, 31,
	232, -273, 332, 333, 338, -392, 305, 114, -392, 156,
	-174, 156, -318, -240, -240, 31, 88, 88, -219, 83,
	156, 124, -539, -532, 124, -397, 88, -540, -544, 124,
	88, 156, -188, -188, -282, 156, 124, -190, -189, 79,
	80, -191, 79, -189, 68, 68, -282, -551, -550, 24,
	-503, -503, -503, 83, 83, 15, -197, 41, -283, 20,
	21, 143, -283, 121, 119, 121, 121, -318, 83, 83,
	-447, 603, -481, -483, 437, 21, 21, 15, 243, 83,
	-464, -464, -485, 45, 46, -375, -391, 422, -217, 156,
	633, -221, -344, 83, -344, 83, 88, 83, 88, -179,
	21, 83, 156, 83, 83, 83, 156, 83, 83, -344,
	83, -511, 236, -159, 83, 156, -159, 88, -537, 413,
	88, 88, 98, 41, 98, 154, 405, -457, -151, -541,
	92, 124, 632, 82, -314, -314, -314, -318, 83, 156,
	-314, -314, 83, 83, 83, -238, 539, -436, 260, 98,
	142, 98, 142, 98, -316, -167, -318, -282, -530, 155,
	-282, -436, -411, 311, 98, -340, 82, -340, 82, -420,
	308, 82, 83, 156, -318, -299, -235, -234, -232, 103,
	114, 41, 391, -233, 92, 151, 294, 297, 296, 272,
	295, -262, -333, 79, 397, 332, 333, -365, 603, 527,
	245, 108, 109, 379, -334, 82, 82, 80, 314, 82,
	82, -500, 83, -270, -299, 41, -273, 41, 345, 305,
	-271, -318, 151, -240, 83, -506, 88, -537, 88, -399,
	-542, 88, -531, -179, -386, -470, -344, 82, -344, 82,
	68, 11, 19, -337, -344, -352, 244, -6, 612, 367,
	-255, 604, 88, 21, 88, -479, 88, -387, -447, -125,
	-252, -308, 277, 83, 83, 83, -412, -412, -415, -414,
	-418, 443, 306, 451, -352, 88, 88, 83, 83, -199,
	-223, -155, 539, -238, -212, -155, 21, 539, 352, 41,
	98, 41, 406, 124, 104, 105, -306, -307, 88, -370,
	-372, -299, 82, -240, -242, 88, -278, -337, -337, -236,
	-159, 35, -237, -276, -365, -124, -123, -236, 82, -437,
	160, 98, 142, 98, 98, -282, -282, -437, -426, 21,
	83, -406, 83, -406, 82, 124, -340, -425, -428, 61,
	-232, 103, -340, 88, -242, -243, 41, 293, 289, 124,
	124, -244, 41, 273, 274, -254, 82, 304, 15, 193,
	82, 109, 109, -217, -370, -370, -501, 334, 335, 336,
	340, 338, 339, 337, -501, -370, -370, 82, -393, -392,
	-340, -314, -314, 151, -541, -180, -183, -499, -318, 245,
	21, 21, -318, -318, -302, 605, 98, 88, 439, -255,
	-448, 606, -475, -419, -240, 124, 83, -417, 116, 405,
	409, -338, -341, 98, 100, 185, 154, 83, 83, 538,
	-156, 60, 485, 88, 400, 88, 352, 88, 633, 156,
	124, 83, 156, -440, -344, -407, 261, -159, 156, -276,
	-308, -125, -407, -239, -277, -318, 88, -454, 168, 325,
	539, 98, 142, 98, -179, -438, 168, 325, -410, 83,
	83, 83, -406, 98, 83, -432, -429, 82, -276, 263,
	134, 88, 88, 98, 82, -465, 31, 88, -371, 82,
	83, 83, 83, 83, -370, 98, -240, -314, 83, 83,
	156, 82, 21, -302, 88, -484, 442, -478, -476, 437,
	438, 439, 440, 88, -416, -417, 409, -338, -341, 601,
	449, 449, 449, -201, -318, 304, 422, -307, 88, -373,
	-372, -174, 83, -408, 313, 21, -276, -314, -408, 83,
	156, -314, -314, 325, 98, 142, 98, -180, 325, -422,
	312, 83, -432, -276, -431, -430, 311, 264, 82, 83,
	-344, -356, -314, 83, -257, -256, 535, -370, -373, 80,
	-373, 80, -373, 80, -373, 80, 83, -240, -318, 245,
	-303, -318, -479, -486, 243, -482, -483, 441, -476, 21,
	439, 21, 21, -126, 156, 113, 450, 450, 450, -200,
	35, 444, 378, -374, 251, 345, 346, 92, 539, 332,
	333, -174, 21, -409, -240, -277, -337, -337, 98, 98,
	83, 156, -318, 260, 82, -351, -345, -344, 260, 83,
	-318, -261, -259, -260, 79, 456, 302, 303, 83, -501,
	-501, -501, -501, -262, 83, 156, -493, 82, 98, -481,
	-480, -482, 21, -479, 21, -479, -479, 446, -416, 88,
	-314, -314, 88, 88, 331, -299, 82, -421, -430, -429,
	-351, 83, 156, -392, -260, 79, -259, 79, 16, 15,
	-373, -373, -373, -373, -318, -497, 31, 83, -492, -491,
	-300, -487, -318, 442, 443, 88, -479, 124, -571, -570,
	623, 98, 98, -318, -406, -411, 83, -345, -258, 299,
	300, 31, 168, -258, -496, -495, -494, 83, 156, 155,
	88, 88, 83, -426, 103, 41, 301, 156, 124, -491,
	-318, -495, 41, -344, 155, -318,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	0, 268, 269, 270, 874, 875, 876, 877, 878, 879,
	880, 0, 0, 0, 0, 0, 632, 633, 0, 598,
	0, 0, 0, 0, 0, 0, 484, 485, 486, 487,
	488, 489, 490, 491, 492, 493, 494, 495, 496, 497,
	498, 499, 500, 501, 502, 503, 504, 505, 506, 507,
	508, 509, 510, 511, 512, 513, 514, 515, 368, 369,
	370, 371, 372, 373, 374, 375, 0, 293, 289, 214,
	215, 216, 217, 218, 300, 301, 461, 0, 0, 0,
	0, 715, -2, 60, 0, 282, 0, 273, 273, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, -2, 645, 0, 599, 600, 601, 602, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	352, 353, 354, 348, 349, 351, 350, -2, 0, 645,
	0, 0, 0, 723, 0, 0, 0, 0, 0, 766,
	788, 23, 0, 7, 9, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 0, 0, 19, 0, 19, 0,
	0, 0, 1280, 1281, 1282, 1283, 2061, 2031, -2, 1804,
	1781, 1956, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097,
	2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107,
	2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117,
	2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127,
	2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137,
	2138, 2139, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745,
	1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755,
	1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765,
	1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
	1776, 1777, 1778, 1779, 1780, 1782, 1783, 1784, 1785, 1786,
	1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
	1797, 1798, 1799, 1800, 1801, 1802, 1803, 1805, 1806, 1807,
	1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817,
	1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827,
	1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837,
	1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847,
	1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857,
	1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
	1868, 1869, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878,
	1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888,
	1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898,
	1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
	1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918,
	1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928,
	1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938,
	1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948,
	1949, 1950, 1951, 1952, 1953, 1954, 1955, 1957, 1958, 1959,
	1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
	1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
	1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, -2, 1989,
	1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
	2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
	2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
	2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
	2030, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, -2, -2, -2, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
	2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071,
	2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 0, 266,
	264, 1751, 1781, 1804, 1858, 1869, 1870, 1904, 1956, 1988,
	2031, 2047, 2048, 2049, 2061, 0, 0, 898, 0, 693,
	0, 0, 698, 1230, 693, 294, 634, 635, 723, 749,
	596, 0, 330, 0, 1795, 334, 2038, 0, 0, 0,
	593, 324, 325, 326, 327, 328, 329, 0, 0, 873,
	0, 0, 320, 0, 288, 1860, 2060, 0, 0, 0,
	0, 0, 157, 1011, 159, 1013, 163, 171, 0, 0,
	0, 176, 177, 180, 181, 182, 183, 184, 0, 188,
	0, 190, 193, 0, 195, 196, 0, 199, 200, 201,
	0, 211, 212, 213, 1014, 1015, 1016, -2, 88, 896,
	1709, 1596, 0, 1603, 1616, 1627, 1360, 1361, 1362, 1363,
	0, 0, 0, 0, 0, 0, 1371, 1372, 0, 1400,
	2094, 2135, 2136, 0, 1380, 1381, 1382, 1383, 1384, 1385,
	97, 109, 110, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
	0, 1657, 1658, 1659, 1567, 1347, 1280, 0, 2103, 0,
	2125, 2130, 2131, 2132, 2133, 2124, 0, 0, 1552, 0,
	1542, 0, 0, -2, -2, 0, 0, 1929, -2, 2137,
	2138, 2139, 2100, 2121, 2129, 2104, 2105, 2128, 2096, 2097,
	2098, 2091, 2092, 2093, 2095, 2107, 2109, 2120, 0, 2116,
	2126, 2127, 2036, 0, 0, 0, 0, 0, 2077, 111,
	112, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1563, -2,
	-2, 1566, -2, 1569, -2, -2, -2, -2, 1574, 1575,
	-2, 1577, -2, -2, -2, -2, -2, -2, -2, 1554,
	1555, 1556, 1557, 1546, 1547, 1548, 1549, 1550, 1551, -2,
	-2, -2, 749, 824, 0, 749, 0, 724, 771, 774,
	777, 780, 727, 0, 0, 61, 62, 0, 283, 284,
	272, 274, 0, 278, 0, 271, 1047, 0, 0, 0,
	0, 1047, 1047, 1047, 1047, 1047, 0, 1047, 0, 0,
	0, 0, 0, 1047, 0, 931, 1018, 1019, 1020, 1045,
	1046, 1118, 0, 0, 0, 650, 646, 647, 648, 649,
	737, 0, 739, 742, 573, 573, 797, 519, 0, 0,
	0, 573, 0, 533, 525, 0, 0, 0, 573, 0,
	0, 744, 744, 0, 576, 583, 573, 573, -2, 573,
	573, 570, 573, 0, 0, 1059, 539, 540, 541, 525,
	525, 544, 545, 546, 556, 557, 584, 1733, 0, 0,
	461, 461, 0, 461, 0, 461, 461, 461, 652, 1899,
	1802, 1875, 1860, 2060, 0, 239, 1929, 244, 0, 1803,
	1822, 0, 0, 1840, 0, -2, 0, 310, 749, 0,
	0, 723, 0, 0, 0, 0, 0, 461, 461, 461,
	461, 461, 1117, 461, 461, 461, 461, 461, 0, 0,
	0, 461, 461, 461, 0, 0, 789, 790, 785, 786,
	787, 791, 792, 5, 6, 19, 0, 0, 0, 0,
	0, 0, 67, 66, 0, 1710, 1728, 1662, 1663, 1664,
	1715, 1666, 1719, 1719, 1719, 1719, 1695, 1696, 1697, 1698,
	1699, 1700, 1701, 1702, 1703, 1719, 1719, 0, 0, 1708,
	1686, 1717, 1717, 1717, 1715, 1712, 1667, 1668, 1669, 1670,
	1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680,
	1722, 1722, 1725, 1725, 1722, 0, 366, 364, 365, 1592,
	0, 0, 0, 0, 693, 697, 0, 0, 0, 749,
	-2, 0, 0, 597, 331, 1284, 0, 0, 335, 0,
	336, 0, 0, 0, 355, 0, 358, 343, 344, 345,
	339, 0, 137, 0, 322, 323, 0, 0, 290, 0,
	0, 0, 462, 0, 0, 0, 0, 0, 0, 168,
	164, 172, 175, 185, 192, 0, 204, 206, 209, 165,
	173, 178, 179, 186, 207, 166, 169, 170, 174, 208,
	210, 167, 187, 191, 205, 189, 194, 197, 198, 203,
	0, 138, 0, 0, 0, 0, 0, 1602, 0, 0,
	1635, 1636, 1637, 1638, 1639, 1640, 1641, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 1596, 0, 0,
	1366, 1367, 1368, 1369, 0, 1373, 0, 1401, 0, 0,
	0, 0, 0, 1656, 1660, 0, 1592, 1592, 0, 1592,
	1588, 0, 0, 0, 0, 0, 0, 1592, 1525, 0,
	0, 1527, 1543, 0, 0, 1529, 1530, 0, 1533, 1534,
	1592, 0, 1592, 1538, 1592, 1592, 1592, 1521, 1522, 0,
	1588, 1588, 1588, 1588, 0, 0, 1588, 1588, 1588, 1588,
	1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
	0, 0, 0, 0, 744, 0, 750, 0, -2, 0,
	768, 770, 772, 773, 775, 776, 778, 779, 781, 782,
	729, 0, 0, 63, 0, 0, 0, 0, 276, 0,
	281, 0, 0, 0, 895, 0, 0, 1047, 1047, 1047,
	932, 0, 0, 0, 0, 0, 0, 0, 0, 1047,
	1047, 1047, 1047, 0, 1065, 0, 0, 0, 652, 651,
	0, 738, 0, 0, 797, 0, 0, 517, 518, 0,
	0, 525, 573, 573, 531, 532, 527, 526, 579, 580,
	576, 0, 576, 576, 797, 0, 550, 551, 552, 573,
	573, 558, 745, 0, 559, 560, 576, 0, 581, 582,
	797, 0, 0, 797, 797, 0, 568, 569, 571, 573,
	0, 0, 1047, 0, 589, 527, 527, 1734, 1735, 0,
	0, 1056, 0, 0, 0, 592, 0, 0, 0, 0,
	653, 219, 222, 0, 225, 0, 1899, 0, 1899, 0,
	232, 0, 0, 0, 0, 0, 0, 262, 263, 0,
	0, 0, 0, 253, 256, 1224, 1225, 1008, 1009, 257,
	258, 302, 303, 0, 744, 767, 769, 763, 764, 765,
	0, 0, 0, 0, 0, 0, 0, 0, 461, 0,
	0, 0, 0, 0, 628, 0, 911, 630, 0, 0,
	0, 0, 805, 799, 801, 868, 97, 805, 8, 84,
	81, 0, 19, 0, 0, 19, 19, 0, 19, 267,
	0, 1731, 1729, 1730, 1665, 1716, 0, 1691, 0, 1692,
	1693, 1694, 1704, 1705, 0, 0, 1687, 0, 1688, 1689,
	1690, 1681, 0, 1682, 1683, 0, 1684, 1685, 265, 363,
	0, 0, 1593, 899, 0, 671, 685, 666, 0, 674,
	0, 0, 1231, 0, 654, 685, 656, 0, 674, 744,
	721, 0, 699, 0, 0, 332, 0, 340, 337, 0,
	341, 0, 0, 357, 359, 360, 361, 346, 347, 594,
	318, 319, 311, 312, 313, 314, 315, 316, 317, 321,
	107, 0, 291, 292, 0, 0, 0, 151, 152, 153,
	154, 155, 156, 158, 142, 617, 619, 1000, 1012, 0,
	1003, 0, 161, 202, 134, 0, 0, 0, 1597, 1598,
	1599, 1600, 1601, 1606, 0, 1608, 1610, 1612, 1614, 0,
	1632, -2, -2, 1348, 1349, 1350, 1351, 1352, 1353, 1354,
	1355, 1356, 1357, 1358, 1359, 1617, 1630, 1631, 0, 0,
	0, 0, 0, 0, 1628, 1628, 1623, 0, 1386, 1226,
	1227, 1364, 0, 0, 1398, 1402, 0, 0, 0, 0,
	0, 98, 1587, 1492, 1493, 1494, 1495, 1496, 1497, 1498,
	1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
	1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518,
	1519, 1520, 0, 0, 1596, 0, 0, 0, 1589, 1590,
	0, 0, 0, 1480, 0, 0, 1486, 1487, 1488, 0,
	680, 0, 1553, 1526, 1544, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 823, 825, 0, 689, 691, 692, 718, 699,
	725, 0, 0, 0, 59, 64, 0, 1085, 285, 286,
	0, 0, 280, 0, 0, 0, -2, 0, 0, 0,
	0, 0, 947, 948, 459, 994, 0, 0, 0, 1010,
	1035, 1043, 0, 0, 0, 0, 0, 1091, 933, 938,
	939, 940, 934, 935, 941, 942, 0, 740, 0, 0,
	837, 516, 574, 575, 798, 522, 1860, 527, 797, 797,
	534, 528, 535, 578, 536, 537, 538, 576, 797, 797,
	746, 573, 576, 561, 577, 576, 564, 565, 0, 572,
	585, 590, 586, 0, 588, 542, 543, 1093, 742, 378,
	379, 380, 382, 0, 430, 430, 430, 413, 430, 0,
	0, 401, 1736, 0, 0, 0, 0, 410, 1736, 0,
	0, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 0, 0,
	1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736,
	1736, 0, 1736, 1736, 1736, 1736, 1736, 1210, 1736, 0,
	1057, 420, 421, 422, 423, 428, 429, 0, 456, 946,
	0, 0, 0, 459, 0, 982, 810, 0, 811, 812,
	808, 839, 863, 863, 0, 863, 843, 1230, 0, 0,
	230, 231, 220, 0, 221, 0, 233, 234, 0, 236,
	237, 238, 245, 1802, 1875, 240, 242, 0, 0, 246,
	259, 260, 261, 0, 0, 251, 252, 0, 0, 305,
	306, 308, 0, 699, 1060, 1061, 1062, 614, 1228, 615,
	616, 620, 0, 0, 623, 624, 625, 626, 627, 913,
	0, 0, 987, 988, 989, 797, 0, 806, 0, 802,
	869, 0, 871, 0, 797, 0, 82, 19, 0, 75,
	72, 0, 0, 0, 0, 0, 1711, 1661, 1732, 0,
	0, 0, 1713, 0, 0, 0, 0, 0, 65, 701,
	661, 0, 665, 682, 0, 686, 0, 0, 678, 670,
	675, 0, 0, 695, 662, 0, 1232, 655, 0, 0,
	660, 699, 0, 722, 751, 752, 755, 1285, 0, 342,
	338, 356, 0, 0, 0, 0, 145, 997, 0, 146,
	150, 140, 0, 0, 0, 1002, 0, 999, 1004, 0,
	160, 0, 0, 135, 136, 1076, 1085, 0, 0, 0,
	1607, 1609, 1611, 1613, 1615, 0, 1618, 1628, 1628, 1624,
	0, 1619, 0, 1621, 0, 1597, 1370, 0, 1403, 0,
	0, 0, 0, 0, 0, 0, 0, 1470, 1471, 0,
	0, 1475, 0, 1477, 1478, 1479, 1481, 0, 0, 0,
	1485, 0, 1524, 1545, 1528, 1531, 0, 1535, 0, 1537,
	1539, 1540, 1541, 0, 749, 749, 0, 0, 1442, 1442,
	1442, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1387, 0, 1388, 1389,
	0, 0, 0, 826, 719, 0, 0, 0, 0, 0,
	1083, 0, 287, 275, 277, 0, 0, 1048, 0, 0,
	901, 902, 904, 0, 907, 908, 909, 913, 742, 0,
	742, 955, 1736, 463, 0, 0, 996, 0, 971, 0,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 1095,
	0, 0, 0, 639, 643, 23, 743, 0, 520, 0,
	521, 573, 529, 530, 797, 553, 554, 0, 0, 797,
	573, 573, 576, 0, 587, 1095, 0, 0, 1056, 1161,
	1129, 391, 0, 1241, 1242, 431, 0, 1248, 1257, 1047,
	1317, 0, 1257, 0, 0, 1259, 1260, 0, 0, 0,
	0, 414, 415, 0, 400, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 441, 0, 0, 0, 0, 0,
	1737, 1736, 1736, 0, 408, 409, 0, 412, 0, 0,
	0, 0, 0, 0, 0, 0, 1736, 1736, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1201,
	0, 0, 0, 0, 0, 0, 0, 1216, 1217, 955,
	1736, 0, 0, 0, 463, 969, 978, 0, 0, 0,
	0, 0, 0, 830, 0, 0, 829, 0, 0, 0,
	0, 0, 742, 864, 0, 866, 867, 841, -2, 0,
	810, 846, 1592, 223, 224, 0, 0, 229, 247, 249,
	0, 0, 0, 248, 250, 254, 255, 304, 307, 309,
	761, 0, 0, 1119, 0, 914, 915, 917, 918, 0,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1786, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 912, 631, 795, 800, 807,
	870, 872, 98, 803, 795, 0, 85, 19, 84, 76,
	77, 0, 19, 0, 0, 0, 0, 1721, 1720, 1706,
	0, 1707, 1718, 1723, 0, 1726, 0, 367, 705, 0,
	0, 685, 687, 0, 0, 685, 0, 0, 694, 0,
	0, 0, 685, 761, 701, 0, 758, 756, 757, 0,
	0, 595, 108, 362, 0, 0, 0, 0, 0, 618,
	0, 1001, 142, 0, 0, 162, 0, 0, 0, 1085,
	1080, 1591, 1620, 1622, 0, 1629, 1625, 1365, 1374, 1399,
	0, 0, 1405, 1417, 1417, 0, 0, 0, 1408, 1719,
	1719, 1411, 1715, 1717, 1715, 1417, 1417, 0, 99, 0,
	0, 1476, 0, 0, 0, 681, 0, 0, 0, 1438,
	1440, 1442, 1442, 1449, 1443, 1450, 1451, 1442, 1442, 1442,
	1442, 1456, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442,
	1442, 1442, 1436, 0, 0, 1650, 1651, 690, 0, 0,
	732, 733, 734, 735, 736, 0, 0, 54, 55, 1085,
	0, 279, 56, 57, 0, 0, 0, 906, 0, 0,
	0, 1234, 0, 959, 956, 957, 958, 0, 991, 464,
	465, 466, 467, 0, 0, 0, 995, 0, 982, 964,
	0, 0, 0, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	-2, 1051, 0, 0, 0, 1234, 1070, 0, 0, 1234,
	1234, 0, 1103, 0, 1092, 693, 0, -2, 0, 0,
	641, 0, 0, 838, 523, 797, 547, 747, 748, 562,
	797, 797, 573, 591, 1103, 1094, 0, 381, 430, 0,
	1149, 0, 0, 1155, 0, 1162, 384, 0, 432, 0,
	1247, 1274, 1258, 1274, 1318, 1274, 1274, 1047, 0, 432,
	0, 0, 402, 438, 0, 0, 0, 0, 0, 398,
	435, 755, 385, 387, 388, 389, 439, 440, 442, 0,
	444, 445, 404, 416, 417, 418, 419, 0, 0, 0,
	411, 424, 425, 426, 427, 386, 1178, 1179, 1180, 1183,
	1184, 1185, 1186, 0, 0, 1189, 1190, 1191, 1192, 1193,
	1271, 1272, 1273, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1218, 1219, 1220, 1221, 1222, 1223, 1202, 1203, 1204, 1205,
	1206, 1207, 1208, 1209, 0, 0, 1213, 0, 959, 0,
	0, 0, 0, 991, 971, 0, 981, 0, 983, 984,
	0, 0, 663, 797, 297, 0, 833, 827, 0, 816,
	831, 832, 819, 0, 821, 0, 817, 818, 797, 809,
	840, 865, 842, 845, 847, 848, 854, 0, 0, 0,
	0, 226, 227, 228, 235, 0, 483, 241, 717, 0,
	1229, 621, 622, 1120, 1121, 629, 0, 919, 793, 0,
	0, 793, 80, 83, 0, 78, 0, 0, 0, 0,
	70, 68, 1714, 0, 0, 707, 122, 0, 0, 0,
	683, 0, 688, 685, 669, 679, 668, 676, 677, 696,
	1233, 685, 659, 658, 720, 705, 753, 754, 0, 1286,
	333, 0, 998, 142, 147, 148, 149, 143, 141, 1005,
	0, 1007, 0, 1078, 0, 0, 1626, 1404, 1375, 1406,
	1418, 1419, 1407, 0, 1377, 1378, 1409, 1410, 1412, 1413,
	1414, 1415, 1416, 1379, 1472, 0, 1474, 1482, 1483, 0,
	1532, 1536, 0, 0, 0, 0, 0, 1447, 1448, 1452,
	1453, 1454, 1455, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	1464, 1465, 1466, 749, 1437, 0, 0, 0, 0, 0,
	0, 0, 730, 0, 0, 0, 1084, 1086, 58, 894,
	897, 903, 905, 0, 0, 0, 1235, 1236, 1238, 1239,
	1240, 0, 930, 0, 0, 950, 951, 961, 0, 0,
	0, 469, 470, 0, 0, 0, 482, 478, 479, 480,
	460, 990, 978, 967, 0, 0, 977, 0, 1052, 1736,
	1736, 1736, 0, 0, 1163, 1736, 1736, 0, 1072, 1074,
	0, 0, 1167, 1106, 0, 0, 1097, 0, 863, 0,
	0, 797, 640, 643, 644, 741, 524, 566, 563, 797,
	1106, 377, 1127, 0, 0, 0, 0, 0, 1159, 0,
	0, 1131, 0, 403, 433, 0, -2, 0, 1275, 0,
	1261, 1275, 0, 0, 1274, 0, 392, 432, 0, 0,
	0, 446, 450, 451, 0, 448, 1313, 0, 449, 0,
	437, 0, 443, 1181, 1182, 0, 1187, 1188, 0, 1212,
	0, 0, 452, 0, 0, 0, 453, 458, 964, 0,
	979, 0, 985, 986, 749, 0, 0, 813, 834, 0,
	0, 814, 0, 815, 820, 822, 296, 849, 0, 0,
	851, 852, 853, 844, 243, 762, 916, 0, 783, 0,
	0, 804, 784, 0, 19, 0, 0, 73, 1724, 1727,
	709, 0, 706, 123, 0, 0, 0, 0, 673, 684,
	667, 657, 707, 759, 760, 144, 139, 1006, 1088, 0,
	1079, 0, 0, 1484, 0, 1442, 1439, 1442, 1441, 1433,
	0, 1390, 0, 1392, 1393, 1394, 0, 1396, 1397, 0,
	728, 0, 0, 936, 1167, 0, 936, 960, 949, 0,
	992, 993, 0, 471, 472, 0, 475, 481, 962, 963,
	0, 0, 975, 0, 0, 0, 0, 1044, 1058, 0,
	0, 0, -2, 0, -2, 1069, 0, 1112, 0, 1104,
	0, 1096, 0, 1099, 797, 797, -2, 637, 642, 0,
	567, 1112, 1129, 0, 1150, 0, 0, 0, 0, 0,
	0, 0, 1130, 0, 1143, 434, 1276, -2, 1289, 1291,
	0, 1057, 1294, 1295, 0, 0, 0, 0, 0, 0,
	1339, 1303, 0, 0, 1307, 1308, 1309, 0, 0, 1312,
	0, 1644, 1645, 0, 1316, 0, 0, 0, 0, 0,
	0, 0, 1255, 393, 394, 0, 396, 397, 1736, 1314,
	436, 390, 1736, 406, 1211, 1214, 1215, 457, 454, 455,
	967, 970, 664, 744, 298, 299, 835, 0, 828, 858,
	855, 0, 0, 920, 794, 796, 74, 79, 0, 0,
	711, 0, 708, 0, 702, 704, 133, 672, 709, 95,
	125, 0, 0, 1376, 1473, 1523, 1445, 1446, 0, 1434,
	0, 1428, 1429, 1430, 1435, 0, 0, 731, 726, 0,
	922, 929, 943, 1063, 1237, 928, 0, 0, 468, 473,
	0, 476, 477, 0, 965, 966, 0, 973, 0, 0,
	1031, 1715, 0, 1053, 1054, 1055, 1164, 1165, 1166, 1122,
	1071, 0, -2, 1175, 0, 1067, 1088, 1122, 0, 1100,
	0, 1107, 0, 1105, 1098, 749, 638, 1109, 383, 1161,
	1151, 0, 1153, 0, 0, 0, 0, 1132, -2, 0,
	1290, 1292, 1293, 1296, 1297, 1298, 1344, 1345, 1346, 0,
	0, 1301, 1341, 1342, 1343, 1302, 0, 0, 0, 0,
	0, 1642, 1643, 1337, 0, 0, 1262, 1264, 1265, 1266,
	1267, 1268, 1269, 1270, 1263, 0, 0, 0, 1254, 1256,
	395, 0, 0, 1736, 980, 295, 0, 0, 859, 861,
	856, 857, 69, 71, 86, 0, 710, 124, 0, 711,
	87, 0, 116, 0, 1089, 0, 1444, 1431, 0, 0,
	0, 0, 0, 1646, 1647, 1648, 0, 1391, 1395, 0,
	0, 944, 945, 952, 0, 954, 474, 968, 972, 975,
	0, 1022, 0, 755, 0, 1124, 0, 1073, 1056, 1177,
	1736, 1075, 1124, 0, 1169, 1736, 1736, 1090, 0, 1102,
	0, 1114, 0, 1108, 744, 376, 0, 1111, 1147, 1152,
	1154, 1156, 0, 1160, 1158, 1133, -2, 0, 1141, 0,
	0, 1299, 1300, 0, 0, 1542, 1736, 0, 1332, 0,
	1022, 1022, 1022, 1022, 0, 447, 405, 0, 836, 850,
	0, 0, 0, 700, 96, 113, 0, 126, 127, 0,
	0, 0, 0, 1081, 0, 1420, 0, 0, 0, 1424,
	1425, 1426, 1427, 0, 921, 0, 953, 974, 976, 1021,
	1032, 1033, 755, 1066, 0, 1161, 1176, 0, 1068, 1168,
	0, 0, 0, 1101, 1113, 0, 1116, 636, 1110, 1128,
	0, 1157, 1134, 1142, 0, 1137, 0, 0, 0, 1340,
	0, 1306, 0, 1311, 1320, 1333, 0, 0, 1243, 0,
	1245, 0, 1249, 0, 1251, 0, 0, 407, 860, 862,
	0, 713, 703, 100, 0, 122, 119, 0, 128, 0,
	0, 0, 0, 1077, 0, 0, 1421, 1422, 1423, 0,
	923, 924, 937, 1023, 1736, 1736, 0, 0, 0, 1029,
	1030, 1034, 0, 1149, 1181, 1170, 1171, 1172, 1115, 1148,
	1136, 0, -2, 1144, 0, 0, 1594, 1604, 1605, 1304,
	1310, 1319, 1321, 1322, 0, 1334, 1335, 1336, 1338, 1022,
	1022, 1022, 1022, 1253, 712, 0, 89, 0, 0, 117,
	118, 120, 0, 129, 0, 131, 132, 0, 1432, 925,
	0, 0, 1026, 1027, 0, 1125, 0, 1127, 1138, -2,
	0, 1146, 0, 1305, 1323, 0, 1324, 0, 0, 0,
	1244, 1246, 1250, 1252, 714, 1087, 0, 101, 0, 103,
	105, 106, 1277, 114, 115, 121, 130, 0, 910, 926,
	0, 1024, 1025, 1028, 0, 1129, 1145, 1595, 1325, 1327,
	1328, 0, 0, 1326, 90, 91, 0, 102, 0, 0,
	1082, 927, 1126, 1123, 1329, 1331, 1330, 0, 0, 104,
	1278, 92, 93, 94, 0, 1279,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 115, 3, 3, 3, 146, 138, 3,
	82, 83, 143, 141, 156, 142, 155, 144, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 634, 631,
	125, 124, 126, 3, 635, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 148, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 632, 137, 633, 149,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 116, 117, 118, 119, 120, 121, 122, 123, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 139,
	140, 145, 147, 150, 151, 152, 153, 154, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:808
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:815
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:821
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:829
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:835
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:839
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:854
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:858
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:864
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:869
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:873
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:906
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:915
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option)
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:924
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option)
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:935
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Obeject:     yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:945
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:955
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:968
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:988
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:994
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1001
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1009
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1015
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1024
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1034
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1042
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1050
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1058
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1068
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1076
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1086
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1093
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1102
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1112
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1116
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1122
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1126
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1132
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1141
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1151
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1155
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1161
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1170
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1174
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1180
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1201
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1214
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1221
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1225
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1231
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1235
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1241
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1248
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1256
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1260
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1274
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1280
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1286
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin(), yyDollar[5].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1293
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1297
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1301
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1307
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1316
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1327
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1331
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1337
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1341
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1347
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1351
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1357
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1381
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1400
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1404
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1408
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1413
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1417
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1426
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1436
		{
			yyVAL.str = ""
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1443
		{
			yyVAL.str = yyDollar[3].str
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1448
		{
			yyVAL.str = "\n"
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1455
		{
			yyVAL.str = yyDollar[3].str
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1460
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1464
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1492
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1496
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1502
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1510
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1530
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1549
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1574
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1578
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1582
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1587
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1591
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1597
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1610
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1621
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1634
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1638
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1648
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1661
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1674
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1680
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1686
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1693
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1701
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1710
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1714
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1718
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1722
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1726
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1730
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1737
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1741
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1747
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1754
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1763
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1767
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1773
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1777
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1781
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1785
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1789
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1793
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1797
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1801
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1805
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1809
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1813
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1817
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1821
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1825
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1829
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1833
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1837
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1841
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1845
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1849
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1853
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1857
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1861
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1865
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1869
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1873
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1877
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1881
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1885
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1889
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1893
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1897
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1901
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1905
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1909
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1913
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1917
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1921
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1925
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1929
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1933
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1937
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1941
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1945
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1949
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1953
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1957
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1961
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1965
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1969
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1973
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1986
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1993
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2000
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2010
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2014
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2020
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2027
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2035
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2039
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2043
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2047
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2053
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2057
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2063
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2070
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2077
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2086
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2116
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2120
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2124
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2130
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2136
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2140
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2147
		{
			yyVAL.str = yyDollar[3].str
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2153
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2157
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2163
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2171
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2180
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2189
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2197
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2205
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2228
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2251
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2258
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2265
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2273
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2280
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2287
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2296
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2300
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2304
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2310
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2314
		{
			yyVAL.str = yyDollar[1].str
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2320
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2324
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2330
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2334
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2345
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2351
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2356
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2360
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2364
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2368
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2372
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2376
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2380
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2384
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2388
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2394
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2398
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2402
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2406
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2411
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2416
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2422
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2435
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2448
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2461
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2474
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2490
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2497
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2508
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2519
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2523
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2529
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2539
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2545
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2549
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2555
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2561
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2565
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2569
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2573
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2579
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2591
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2597
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2601
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2607
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2611
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2617
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2623
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2634
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2640
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2644
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2648
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2652
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2656
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2660
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2668
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2676
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2686
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2698
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2702
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2710
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2718
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2757
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2761
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2767
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2773
		{
			yyVAL.str = yyDollar[1].str
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2778
		{
			yyVAL.str = "true"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2779
		{
			yyVAL.str = "false"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2780
		{
			yyVAL.str = yyDollar[1].str
		}
	case 362:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2785
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2791
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2800
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2807
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2815
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2819
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2842
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2865
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2875
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2882
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2891
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2895
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2901
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2905
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2929
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2939
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2955
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2973
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2977
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2983
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2987
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2993
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2999
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3007
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3017
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3025
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3035
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3045
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3055
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3062
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3066
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3070
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3074
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3078
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3085
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3091
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3095
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3099
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3103
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3107
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3111
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3115
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3119
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3124
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3155
		{
			yyVAL.str = ""
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3159
		{
			yyVAL.str = string("COLUMN")
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3164
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3170
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3176
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3184
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3188
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3194
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3202
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3209
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3215
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3221
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3227
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3233
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3240
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3247
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3255
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3261
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3273
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3279
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3287
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3291
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3298
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3316
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3330
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3344
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3357
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3363
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3374
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3387
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3391
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3399
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3403
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3408
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3412
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3428
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3432
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3436
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3440
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3447
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3451
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3455
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3459
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3466
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3470
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3477
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3481
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3485
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3489
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3496
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3503
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3509
		{
			yyVAL.item = nil
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3514
		{
			yyVAL.item = nil
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3557
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3566
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3574
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3582
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3586
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3590
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3601
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3605
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3611
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3616
		{
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3620
		{
		}
	case 529:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3625
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3635
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3645
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3653
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3659
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3665
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3671
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3677
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3683
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3689
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3698
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3702
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3706
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3710
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3714
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3718
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3722
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3726
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3732
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3741
		{
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3743
		{
		}
	case 553:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3752
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3762
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3771
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3775
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3779
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3785
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3791
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3797
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3803
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3812
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3822
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3834
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3838
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3844
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3856
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3870
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3876
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3882
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3889
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3893
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3898
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3902
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3906
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3911
		{
			yyVAL.str = ""
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3915
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3921
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3934
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3938
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3944
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3949
		{
			yyLOCAL = &tree.ShowCreateView{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3953
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3957
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3963
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3969
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3973
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3979
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3985
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3989
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3993
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3999
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4003
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4029
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4037
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4045
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4053
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4057
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4063
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4076
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4084
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4093
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4099
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4107
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4115
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4123
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4129
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4137
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4143
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4151
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4157
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4167
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4172
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4179
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4195
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4208
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4219
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4223
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4229
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4234
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4241
		{
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4243
		{
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4246
		{
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4255
		{
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4259
		{
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4264
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4273
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4280
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4286
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4294
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4301
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4308
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4328
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4336
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4346
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4350
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4356
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4363
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4369
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4377
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4384
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4391
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4410
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4414
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4418
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4423
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4427
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4431
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4437
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4446
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4450
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4456
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4460
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4466
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4470
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4476
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4481
		{
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4485
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4492
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4496
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4503
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4508
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4512
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4518
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4522
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4528
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4532
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4537
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4541
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4554
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4565
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4576
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4598
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4621
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4629
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4638
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4642
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4655
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4659
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4664
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4668
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4675
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4680
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4687
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4693
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4697
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4701
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4705
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4709
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4713
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4718
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4722
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4728
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4738
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4753
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4757
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4771
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4775
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4781
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4790
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4794
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4798
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4802
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4806
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4812
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4819
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4828
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4832
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4838
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4846
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4850
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4855
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4859
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4865
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4869
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4873
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4878
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4882
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4888
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4894
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4898
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:4904
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4909
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4913
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4917
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4922
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4926
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4930
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4935
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4939
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4947
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4951
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4955
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4969
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4973
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4983
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4993
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5003
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5015
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5023
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5031
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5040
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5048
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5056
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5064
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5072
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5080
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5088
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5096
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5104
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5114
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5125
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5139
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5143
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5147
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5152
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5156
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5160
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5169
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5173
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5178
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5182
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5187
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5191
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5197
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5201
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5207
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5211
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5216
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5220
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5225
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5233
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5239
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5247
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5255
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5265
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5271
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5280
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5289
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5298
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5308
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5312
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5322
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5326
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5330
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5334
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 823:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5340
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5350
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5354
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5360
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5366
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5370
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5376
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5382
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5386
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5390
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5396
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5400
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5406
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5410
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5416
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5420
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5426
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5430
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5440
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5453
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5459
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5465
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: tree.NewCStrUseOrigin(yyDollar[1].cstrUnion().Origin(), yylex.(*Lexer).useOrigin),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5479
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5490
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5497
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5501
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5507
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5517
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5521
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5525
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5530
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5534
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5538
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5542
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5547
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5551
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5555
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5559
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5563
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5568
		{
			yyVAL.str = ""
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5572
		{
			yyVAL.str = yyDollar[1].str
		}
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5576
		{
			yyVAL.str = yyDollar[2].str
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5582
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 868:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5588
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5592
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5596
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5600
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5604
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5610
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 894:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5650
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5663
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5669
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 897:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5675
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5688
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5693
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5699
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5706
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5710
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5716
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5722
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5727
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5731
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5735
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5739
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5746
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5779
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5784
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5790
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5797
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5801
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5807
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5813
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5817
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5821
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5827
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5833
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5839
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5843
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5849
		{
			yyVAL.str = ""
		}
	case 927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5856
		{
			yyVAL.str = yyDollar[2].str
		}
	case 928:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5862
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5877
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5894
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5911
		{
			yyVAL.str = yyDollar[1].str
		}
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5915
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 933:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5921
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 934:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5925
		{
			yyVAL.str = "DEFINER = "
		}
	case 935:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5929
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 936:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5934
		{
			yyVAL.str = ""
		}
	case 937:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:5938
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 943:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5952
		{
			yyVAL.str = ""
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5960
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5966
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5971
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:5977
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].str
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5990
		{
			yyVAL.str = yyDollar[1].str
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5994
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6000
		{
			var Typ = tree.AccountIdentifiedByPassword
			var Str = yyDollar[3].str
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6009
		{
			var Typ = tree.AccountIdentifiedByRandomPassword
			var Str string
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6018
		{
			var Typ = tree.AccountIdentifiedWithSSL
			var Str = yyDollar[3].str
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6028
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6034
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6041
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6048
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6056
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6062
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6071
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6088
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6105
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6123
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6129
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6136
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6144
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6150
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6158
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6164
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6172
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6178
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6187
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6191
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6196
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6200
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6207
		{
			yyVAL.str = yyDollar[3].str
		}
	case 978:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6212
		{
			yyVAL.str = ""
		}
	case 979:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6216
		{
			yyVAL.str = yyDollar[2].str
		}
	case 980:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6222
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6235
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var comment = yyDollar[6].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, comment)
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6244
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6248
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6254
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6260
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6266
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6275
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6283
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6291
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6299
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 991:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6304
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6316
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6327
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6436
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6440
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6446
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6459
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6463
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6469
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6482
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6486
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6490
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6495
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6499
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6505
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6512
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6518
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6527
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1010:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6534
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6545
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6549
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6555
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6564
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6568
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6572
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6577
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6581
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6585
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6589
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6595
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6626
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6630
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6656
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6662
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6674
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6680
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6686
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6692
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6698
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6706
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6710
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6716
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6730
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6744
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6748
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6752
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6756
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6760
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6764
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6768
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6774
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6789
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6793
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6804
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6808
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6813
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6817
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6823
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6827
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6833
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6842
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6851
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6857
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6861
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6867
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6878
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6884
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6902
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6920
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6938
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6954
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6958
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6967
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6979
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6988
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7000
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7010
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7020
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7031
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7041
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7052
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7062
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7069
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7079
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7092
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7100
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7109
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7118
		{
			yyVAL.str = ""
		}
	case 1082:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7122
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7128
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7132
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7137
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7141
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7148
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7160
		{
			yyVAL.str = ""
		}
	case 1089:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7164
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1090:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7170
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7191
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7205
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7209
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7213
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7219
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7223
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7230
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7237
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7244
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7251
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7255
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7259
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7263
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7267
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7274
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7281
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7285
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7292
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7299
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7303
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7309
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7315
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7319
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7326
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7333
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7340
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7347
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7351
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7356
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7360
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7364
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7369
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7373
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7386
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7390
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7398
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7406
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7410
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7422
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7426
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7432
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7436
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7442
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7455
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7469
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7473
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7479
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7483
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7489
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7498
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7509
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7513
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7518
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7522
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7528
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7533
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7541
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7545
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7555
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7559
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7570
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7578
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7586
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7594
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7605
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7614
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7624
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7634
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7638
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7643
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7647
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7653
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7657
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7663
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7672
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7682
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7686
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7692
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7696
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7702
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7711
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7721
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7725
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7731
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7735
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7739
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7745
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7749
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7753
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7757
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7761
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7765
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7769
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7774
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7778
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7782
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7786
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7790
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7794
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7798
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7802
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7806
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7810
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7814
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7818
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7822
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7828
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7834
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7838
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7842
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7846
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7850
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7856
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7862
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7868
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7874
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7880
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7886
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7890
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7894
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7898
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7905
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7909
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:7915
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7926
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7930
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7936
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7940
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7944
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7948
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7952
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7956
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7970
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7974
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7983
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7988
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7993
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			atTs := &tree.AtTimeStamp{
				Expr: yyDollar[3].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8001
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			atTs := &tree.AtTimeStamp{
				Expr: yyDollar[5].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8010
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8017
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8021
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8027
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8031
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8035
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8041
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8045
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8051
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8064
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8077
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8116
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8156
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8170
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8176
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8189
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8202
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8215
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8228
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8243
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8253
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8259
		{
			yyVAL.str = ""
		}
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8263
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8273
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8279
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8285
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8306
		{
			yyVAL.str = ""
		}
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8310
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8316
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8322
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8328
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8334
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin(), yyDollar[5].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8342
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8346
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8350
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8354
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8360
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8366
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8372
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin(), yyDollar[5].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8379
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8383
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8389
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8393
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8399
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8403
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8407
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8411
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8415
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8419
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8424
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8428
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8432
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8436
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8440
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8444
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8448
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8452
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8456
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8460
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[3].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8474
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8478
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8482
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8486
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8490
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8494
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8500
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8504
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8509
		{
			yyVAL.str = ""
		}
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8513
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8519
		{
			yyVAL.str = ""
		}
	case 1318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8523
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1319:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8529
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8546
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8553
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8560
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8567
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8574
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8583
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8589
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8595
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8599
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8603
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8607
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8611
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8616
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8623
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8627
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8631
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8636
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8640
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8645
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8649
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8665
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8671
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8675
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8679
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8683
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8687
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8691
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8695
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8699
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8703
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8707
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8711
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8715
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8719
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8725
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8729
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8733
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8737
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8741
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8745
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8749
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8753
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8757
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8761
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8803
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8807
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8811
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8816
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8824
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8828
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8832
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8836
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8840
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8850
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8854
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8858
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8862
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8866
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8870
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8874
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8880
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8889
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8898
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8909
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8919
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8929
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8938
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8948
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8958
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8968
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8977
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8987
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8991
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8996
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9000
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9006
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9010
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9016
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9025
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9037
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9054
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9071
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9084
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9097
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9109
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9123
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9138
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9153
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9170
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9185
		{
		}
	case 1421:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9192
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9196
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9200
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9206
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9210
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9214
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9218
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9224
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9228
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9232
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9238
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9246
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9256
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9260
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9267
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9272
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9276
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9281
		{
			yyVAL.str = ","
		}
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9285
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9290
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9294
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1442:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9299
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9306
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9332
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9344
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9356
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9367
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9378
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9389
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9399
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9409
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9420
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9431
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9442
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9453
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9464
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9475
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9486
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9497
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9508
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9519
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9530
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9541
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9552
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9563
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9581
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9590
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9599
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9608
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9617
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9628
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9637
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9647
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9656
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9665
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9674
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9683
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9695
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9706
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9719
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9731
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9754
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1521:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9790
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9803
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9816
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9828
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9837
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9845
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9853
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9866
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9875
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9886
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9897
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9906
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9918
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9928
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9938
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9947
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9958
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9967
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9977
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9986
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9995
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10005
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10009
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10015
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10019
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10038
		{
		}
	case 1553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10040
		{
		}
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10081
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10093
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10097
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10101
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10107
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10112
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10116
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10122
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10126
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10132
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10136
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10143
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10147
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10151
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin("concat", yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10160
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10164
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10168
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10173
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10177
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10183
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10187
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10191
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10195
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10199
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10203
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10207
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10211
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10215
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10219
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10227
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10231
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10235
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10239
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10243
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10247
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10251
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10255
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10259
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10263
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10269
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10273
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10279
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10283
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10290
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10294
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10298
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10304
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10308
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10312
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10316
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10320
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10324
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10328
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10334
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10338
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10342
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10346
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10352
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10365
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10370
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10376
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10380
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10393
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10398
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10402
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10406
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10410
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10414
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10421
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10425
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10429
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10433
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10440
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10451
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10456
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10462
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10474
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10486
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10498
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10511
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10524
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10537
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10550
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10563
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10576
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10589
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10602
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10615
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10628
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10643
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10670
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10712
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10748
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10784
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10801
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10813
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10833
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10853
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10873
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10889
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10902
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10915
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10928
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10941
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10953
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10965
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10977
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10989
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11001
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11013
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11025
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11037
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11049
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11062
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11075
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11088
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11101
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11116
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11124
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11133
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11143
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11166
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11171
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11177
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11184
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11188
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11193
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11197
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11203
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11209
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11216
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11223
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11232
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11239
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11246
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11255
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11259
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11263
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11269
		{
		}
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11271
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11281
		{
			yyVAL.str = ""
		}
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11285
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
