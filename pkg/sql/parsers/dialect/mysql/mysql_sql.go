// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const OF = 57367
const CONNECT = 57368
const MANAGE = 57369
const GRANTS = 57370
const OWNERSHIP = 57371
const REFERENCE = 57372
const LOWER_THAN_SET = 57373
const SET = 57374
const ALL = 57375
const DISTINCT = 57376
const DISTINCTROW = 57377
const AS = 57378
const EXISTS = 57379
const ASC = 57380
const DESC = 57381
const INTO = 57382
const DUPLICATE = 57383
const DEFAULT = 57384
const LOCK = 57385
const KEYS = 57386
const NULLS = 57387
const FIRST = 57388
const LAST = 57389
const AFTER = 57390
const INSTANT = 57391
const INPLACE = 57392
const COPY = 57393
const DISABLE = 57394
const ENABLE = 57395
const UNDEFINED = 57396
const MERGE = 57397
const TEMPTABLE = 57398
const DEFINER = 57399
const INVOKER = 57400
const SQL = 57401
const SECURITY = 57402
const CASCADED = 57403
const VALUES = 57404
const NEXT = 57405
const VALUE = 57406
const SHARE = 57407
const MODE = 57408
const SQL_NO_CACHE = 57409
const SQL_CACHE = 57410
const JOIN = 57411
const STRAIGHT_JOIN = 57412
const LEFT = 57413
const RIGHT = 57414
const INNER = 57415
const OUTER = 57416
const CROSS = 57417
const NATURAL = 57418
const USE = 57419
const FORCE = 57420
const CENTROIDX = 57421
const APPLY = 57422
const DEDUP = 57423
const LOWER_THAN_ON = 57424
const ON = 57425
const USING = 57426
const SUBQUERY_AS_EXPR = 57427
const LOWER_THAN_STRING = 57428
const ID = 57429
const AT_ID = 57430
const AT_AT_ID = 57431
const STRING = 57432
const VALUE_ARG = 57433
const LIST_ARG = 57434
const COMMENT = 57435
const COMMENT_KEYWORD = 57436
const QUOTE_ID = 57437
const STAGE = 57438
const CREDENTIALS = 57439
const STAGES = 57440
const SNAPSHOTS = 57441
const INTEGRAL = 57442
const HEX = 57443
const FLOAT = 57444
const HEXNUM = 57445
const BIT_LITERAL = 57446
const NULL = 57447
const TRUE = 57448
const FALSE = 57449
const LOWER_THAN_CHARSET = 57450
const CHARSET = 57451
const UNIQUE = 57452
const KEY = 57453
const OR = 57454
const PIPE_CONCAT = 57455
const XOR = 57456
const AND = 57457
const NOT = 57458
const BETWEEN = 57459
const CASE = 57460
const WHEN = 57461
const THEN = 57462
const ELSE = 57463
const END = 57464
const ELSEIF = 57465
const LOWER_THAN_EQ = 57466
const LE = 57467
const GE = 57468
const NE = 57469
const NULL_SAFE_EQUAL = 57470
const IS = 57471
const LIKE = 57472
const REGEXP = 57473
const IN = 57474
const ASSIGNMENT = 57475
const ILIKE = 57476
const SHIFT_LEFT = 57477
const SHIFT_RIGHT = 57478
const DIV = 57479
const MOD = 57480
const UNARY = 57481
const COLLATE = 57482
const BINARY = 57483
const UNDERSCORE_BINARY = 57484
const INTERVAL = 57485
const OUT = 57486
const INOUT = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const WORK = 57493
const CONSISTENT = 57494
const SNAPSHOT = 57495
const SAVEPOINT = 57496
const CHAIN = 57497
const NO = 57498
const RELEASE = 57499
const PRIORITY = 57500
const QUICK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const DECIMAL_VALUE = 57515
const TIME = 57516
const TIMESTAMP = 57517
const DATETIME = 57518
const YEAR = 57519
const CHAR = 57520
const VARCHAR = 57521
const BOOL = 57522
const CHARACTER = 57523
const VARBINARY = 57524
const NCHAR = 57525
const TEXT = 57526
const TINYTEXT = 57527
const MEDIUMTEXT = 57528
const LONGTEXT = 57529
const DATALINK = 57530
const BLOB = 57531
const TINYBLOB = 57532
const MEDIUMBLOB = 57533
const LONGBLOB = 57534
const JSON = 57535
const ENUM = 57536
const UUID = 57537
const VECF32 = 57538
const VECF64 = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const INT1 = 57548
const INT2 = 57549
const INT3 = 57550
const INT4 = 57551
const INT8 = 57552
const S3OPTION = 57553
const STAGEOPTION = 57554
const SQL_SMALL_RESULT = 57555
const SQL_BIG_RESULT = 57556
const SQL_BUFFER_RESULT = 57557
const SQL_CALC_FOUND_ROWS = 57558
const LOW_PRIORITY = 57559
const HIGH_PRIORITY = 57560
const DELAYED = 57561
const CREATE = 57562
const ALTER = 57563
const DROP = 57564
const RENAME = 57565
const ANALYZE = 57566
const PHYPLAN = 57567
const ADD = 57568
const RETURNS = 57569
const SCHEMA = 57570
const TABLE = 57571
const SEQUENCE = 57572
const INDEX = 57573
const VIEW = 57574
const TO = 57575
const IGNORE = 57576
const IF = 57577
const PRIMARY = 57578
const COLUMN = 57579
const CONSTRAINT = 57580
const SPATIAL = 57581
const FULLTEXT = 57582
const FOREIGN = 57583
const KEY_BLOCK_SIZE = 57584
const SHOW = 57585
const DESCRIBE = 57586
const EXPLAIN = 57587
const DATE = 57588
const ESCAPE = 57589
const REPAIR = 57590
const OPTIMIZE = 57591
const TRUNCATE = 57592
const MAXVALUE = 57593
const PARTITION = 57594
const REORGANIZE = 57595
const LESS = 57596
const THAN = 57597
const PROCEDURE = 57598
const TRIGGER = 57599
const STATUS = 57600
const VARIABLES = 57601
const ROLE = 57602
const PROXY = 57603
const AVG_ROW_LENGTH = 57604
const STORAGE = 57605
const DISK = 57606
const MEMORY = 57607
const CHECKSUM = 57608
const COMPRESSION = 57609
const DATA = 57610
const DIRECTORY = 57611
const DELAY_KEY_WRITE = 57612
const ENCRYPTION = 57613
const ENGINE = 57614
const MAX_ROWS = 57615
const MIN_ROWS = 57616
const PACK_KEYS = 57617
const ROW_FORMAT = 57618
const STATS_AUTO_RECALC = 57619
const STATS_PERSISTENT = 57620
const STATS_SAMPLE_PAGES = 57621
const DYNAMIC = 57622
const COMPRESSED = 57623
const REDUNDANT = 57624
const COMPACT = 57625
const FIXED = 57626
const COLUMN_FORMAT = 57627
const AUTO_RANDOM = 57628
const ENGINE_ATTRIBUTE = 57629
const SECONDARY_ENGINE_ATTRIBUTE = 57630
const INSERT_METHOD = 57631
const RESTRICT = 57632
const CASCADE = 57633
const ACTION = 57634
const PARTIAL = 57635
const SIMPLE = 57636
const CHECK = 57637
const ENFORCED = 57638
const RANGE = 57639
const LIST = 57640
const ALGORITHM = 57641
const LINEAR = 57642
const PARTITIONS = 57643
const SUBPARTITION = 57644
const SUBPARTITIONS = 57645
const CLUSTER = 57646
const TYPE = 57647
const ANY = 57648
const SOME = 57649
const EXTERNAL = 57650
const LOCALFILE = 57651
const URL = 57652
const PREPARE = 57653
const DEALLOCATE = 57654
const RESET = 57655
const EXTENSION = 57656
const RETENTION = 57657
const PERIOD = 57658
const INCREMENT = 57659
const CYCLE = 57660
const MINVALUE = 57661
const PUBLICATION = 57662
const SUBSCRIPTIONS = 57663
const PUBLICATIONS = 57664
const PROPERTIES = 57665
const PARSER = 57666
const VISIBLE = 57667
const INVISIBLE = 57668
const BTREE = 57669
const HASH = 57670
const RTREE = 57671
const BSI = 57672
const IVFFLAT = 57673
const MASTER = 57674
const HNSW = 57675
const ZONEMAP = 57676
const LEADING = 57677
const BOTH = 57678
const TRAILING = 57679
const UNKNOWN = 57680
const LISTS = 57681
const OP_TYPE = 57682
const REINDEX = 57683
const EF_SEARCH = 57684
const EF_CONSTRUCTION = 57685
const M = 57686
const QUANTIZATION = 57687
const EXPIRE = 57688
const ACCOUNT = 57689
const ACCOUNTS = 57690
const UNLOCK = 57691
const DAY = 57692
const NEVER = 57693
const PUMP = 57694
const MYSQL_COMPATIBILITY_MODE = 57695
const UNIQUE_CHECK_ON_AUTOINCR = 57696
const MODIFY = 57697
const CHANGE = 57698
const SECOND = 57699
const ASCII = 57700
const COALESCE = 57701
const COLLATION = 57702
const HOUR = 57703
const MICROSECOND = 57704
const MINUTE = 57705
const MONTH = 57706
const QUARTER = 57707
const REPEAT = 57708
const REVERSE = 57709
const ROW_COUNT = 57710
const WEEK = 57711
const REVOKE = 57712
const FUNCTION = 57713
const PRIVILEGES = 57714
const TABLESPACE = 57715
const EXECUTE = 57716
const SUPER = 57717
const GRANT = 57718
const OPTION = 57719
const REFERENCES = 57720
const REPLICATION = 57721
const SLAVE = 57722
const CLIENT = 57723
const USAGE = 57724
const RELOAD = 57725
const FILE = 57726
const TEMPORARY = 57727
const ROUTINE = 57728
const EVENT = 57729
const SHUTDOWN = 57730
const NULLX = 57731
const AUTO_INCREMENT = 57732
const APPROXNUM = 57733
const SIGNED = 57734
const UNSIGNED = 57735
const ZEROFILL = 57736
const ENGINES = 57737
const LOW_CARDINALITY = 57738
const AUTOEXTEND_SIZE = 57739
const ADMIN_NAME = 57740
const RANDOM = 57741
const SUSPEND = 57742
const ATTRIBUTE = 57743
const HISTORY = 57744
const REUSE = 57745
const CURRENT = 57746
const OPTIONAL = 57747
const FAILED_LOGIN_ATTEMPTS = 57748
const PASSWORD_LOCK_TIME = 57749
const UNBOUNDED = 57750
const SECONDARY = 57751
const RESTRICTED = 57752
const USER = 57753
const IDENTIFIED = 57754
const CIPHER = 57755
const ISSUER = 57756
const X509 = 57757
const SUBJECT = 57758
const SAN = 57759
const REQUIRE = 57760
const SSL = 57761
const NONE = 57762
const PASSWORD = 57763
const SHARED = 57764
const EXCLUSIVE = 57765
const MAX_QUERIES_PER_HOUR = 57766
const MAX_UPDATES_PER_HOUR = 57767
const MAX_CONNECTIONS_PER_HOUR = 57768
const MAX_USER_CONNECTIONS = 57769
const FORMAT = 57770
const VERBOSE = 57771
const CONNECTION = 57772
const TRIGGERS = 57773
const PROFILES = 57774
const LOAD = 57775
const INLINE = 57776
const INFILE = 57777
const TERMINATED = 57778
const OPTIONALLY = 57779
const ENCLOSED = 57780
const ESCAPED = 57781
const STARTING = 57782
const LINES = 57783
const ROWS = 57784
const IMPORT = 57785
const DISCARD = 57786
const JSONTYPE = 57787
const MODUMP = 57788
const OVER = 57789
const PRECEDING = 57790
const FOLLOWING = 57791
const GROUPS = 57792
const DATABASES = 57793
const TABLES = 57794
const SEQUENCES = 57795
const EXTENDED = 57796
const FULL = 57797
const PROCESSLIST = 57798
const FIELDS = 57799
const COLUMNS = 57800
const OPEN = 57801
const ERRORS = 57802
const WARNINGS = 57803
const INDEXES = 57804
const SCHEMAS = 57805
const NODE = 57806
const LOCKS = 57807
const ROLES = 57808
const TABLE_NUMBER = 57809
const COLUMN_NUMBER = 57810
const TABLE_VALUES = 57811
const TABLE_SIZE = 57812
const NAMES = 57813
const GLOBAL = 57814
const PERSIST = 57815
const SESSION = 57816
const ISOLATION = 57817
const LEVEL = 57818
const READ = 57819
const WRITE = 57820
const ONLY = 57821
const REPEATABLE = 57822
const COMMITTED = 57823
const UNCOMMITTED = 57824
const SERIALIZABLE = 57825
const LOCAL = 57826
const EVENTS = 57827
const PLUGINS = 57828
const CURRENT_TIMESTAMP = 57829
const DATABASE = 57830
const CURRENT_TIME = 57831
const LOCALTIME = 57832
const LOCALTIMESTAMP = 57833
const UTC_DATE = 57834
const UTC_TIME = 57835
const UTC_TIMESTAMP = 57836
const REPLACE = 57837
const CONVERT = 57838
const SEPARATOR = 57839
const TIMESTAMPDIFF = 57840
const CURRENT_DATE = 57841
const CURRENT_USER = 57842
const CURRENT_ROLE = 57843
const SECOND_MICROSECOND = 57844
const MINUTE_MICROSECOND = 57845
const MINUTE_SECOND = 57846
const HOUR_MICROSECOND = 57847
const HOUR_SECOND = 57848
const HOUR_MINUTE = 57849
const DAY_MICROSECOND = 57850
const DAY_SECOND = 57851
const DAY_MINUTE = 57852
const DAY_HOUR = 57853
const YEAR_MONTH = 57854
const SQL_TSI_HOUR = 57855
const SQL_TSI_DAY = 57856
const SQL_TSI_WEEK = 57857
const SQL_TSI_MONTH = 57858
const SQL_TSI_QUARTER = 57859
const SQL_TSI_YEAR = 57860
const SQL_TSI_SECOND = 57861
const SQL_TSI_MINUTE = 57862
const RECURSIVE = 57863
const CONFIG = 57864
const DRAINER = 57865
const SOURCE = 57866
const STREAM = 57867
const HEADERS = 57868
const CONNECTOR = 57869
const CONNECTORS = 57870
const DAEMON = 57871
const PAUSE = 57872
const CANCEL = 57873
const TASK = 57874
const RESUME = 57875
const MATCH = 57876
const AGAINST = 57877
const BOOLEAN = 57878
const LANGUAGE = 57879
const WITH = 57880
const QUERY = 57881
const EXPANSION = 57882
const WITHOUT = 57883
const VALIDATION = 57884
const UPGRADE = 57885
const RETRY = 57886
const ADDDATE = 57887
const BIT_AND = 57888
const BIT_OR = 57889
const BIT_XOR = 57890
const CAST = 57891
const COUNT = 57892
const APPROX_COUNT = 57893
const APPROX_COUNT_DISTINCT = 57894
const SERIAL_EXTRACT = 57895
const APPROX_PERCENTILE = 57896
const CURDATE = 57897
const CURTIME = 57898
const DATE_ADD = 57899
const DATE_SUB = 57900
const EXTRACT = 57901
const GROUP_CONCAT = 57902
const MAX = 57903
const MID = 57904
const MIN = 57905
const NOW = 57906
const POSITION = 57907
const SESSION_USER = 57908
const STD = 57909
const STDDEV = 57910
const MEDIAN = 57911
const CLUSTER_CENTERS = 57912
const KMEANS = 57913
const STDDEV_POP = 57914
const STDDEV_SAMP = 57915
const SUBDATE = 57916
const SUBSTR = 57917
const SUBSTRING = 57918
const SUM = 57919
const SYSDATE = 57920
const SYSTEM_USER = 57921
const TRANSLATE = 57922
const TRIM = 57923
const VARIANCE = 57924
const VAR_POP = 57925
const VAR_SAMP = 57926
const AVG = 57927
const RANK = 57928
const ROW_NUMBER = 57929
const DENSE_RANK = 57930
const BIT_CAST = 57931
const BITMAP_BIT_POSITION = 57932
const BITMAP_BUCKET_NUMBER = 57933
const BITMAP_COUNT = 57934
const BITMAP_CONSTRUCT_AGG = 57935
const BITMAP_OR_AGG = 57936
const NEXTVAL = 57937
const SETVAL = 57938
const CURRVAL = 57939
const LASTVAL = 57940
const ARROW = 57941
const ROW = 57942
const OUTFILE = 57943
const HEADER = 57944
const MAX_FILE_SIZE = 57945
const FORCE_QUOTE = 57946
const PARALLEL = 57947
const STRICT = 57948
const UNUSED = 57949
const BINDINGS = 57950
const DO = 57951
const DECLARE = 57952
const LOOP = 57953
const WHILE = 57954
const LEAVE = 57955
const ITERATE = 57956
const UNTIL = 57957
const CALL = 57958
const PREV = 57959
const SLIDING = 57960
const FILL = 57961
const SPBEGIN = 57962
const BACKEND = 57963
const SERVERS = 57964
const HANDLER = 57965
const PERCENT = 57966
const SAMPLE = 57967
const MO_TS = 57968
const PITR = 57969
const RECOVERY_WINDOW = 57970
const CDC = 57971
const GROUPING = 57972
const SETS = 57973
const CUBE = 57974
const ROLLUP = 57975
const LOGSERVICE = 57976
const REPLICAS = 57977
const STORES = 57978
const SETTINGS = 57979
const KILL = 57980
const BACKUP = 57981
const FILESYSTEM = 57982
const PARALLELISM = 57983
const RESTORE = 57984
const QUERY_RESULT = 57985

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"OF",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CENTROIDX",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"SAVEPOINT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"SQL_CALC_FOUND_ROWS",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"HNSW",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EF_SEARCH",
	"EF_CONSTRUCTION",
	"M",
	"QUANTIZATION",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"RECOVERY_WINDOW",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12964

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 142,
	11, 811,
	22, 811,
	-2, 804,
	-1, 167,
	246, 1245,
	248, 1139,
	-2, 1191,
	-1, 194,
	44, 634,
	248, 634,
	275, 641,
	276, 641,
	479, 634,
	-2, 669,
	-1, 234,
	664, 2023,
	-2, 533,
	-1, 548,
	664, 2147,
	-2, 412,
	-1, 606,
	664, 2206,
	-2, 410,
	-1, 607,
	664, 2207,
	-2, 411,
	-1, 608,
	664, 2208,
	-2, 413,
	-1, 748,
	327, 181,
	451, 181,
	452, 181,
	-2, 1920,
	-1, 815,
	86, 1705,
	-2, 2083,
	-1, 816,
	86, 1724,
	-2, 2054,
	-1, 820,
	86, 1725,
	-2, 2082,
	-1, 854,
	86, 1632,
	-2, 2286,
	-1, 855,
	86, 1633,
	-2, 2285,
	-1, 856,
	86, 1634,
	-2, 2275,
	-1, 857,
	86, 2247,
	-2, 2268,
	-1, 858,
	86, 2248,
	-2, 2269,
	-1, 859,
	86, 2249,
	-2, 2277,
	-1, 860,
	86, 2250,
	-2, 2257,
	-1, 861,
	86, 2251,
	-2, 2266,
	-1, 862,
	86, 2252,
	-2, 2278,
	-1, 863,
	86, 2253,
	-2, 2279,
	-1, 864,
	86, 2254,
	-2, 2284,
	-1, 865,
	86, 2255,
	-2, 2289,
	-1, 866,
	86, 2256,
	-2, 2290,
	-1, 867,
	86, 1701,
	-2, 2121,
	-1, 868,
	86, 1702,
	-2, 1904,
	-1, 869,
	86, 1703,
	-2, 2130,
	-1, 870,
	86, 1704,
	-2, 1913,
	-1, 872,
	86, 1707,
	-2, 1921,
	-1, 874,
	86, 1709,
	-2, 2154,
	-1, 876,
	86, 1712,
	-2, 1942,
	-1, 878,
	86, 1714,
	-2, 2166,
	-1, 879,
	86, 1715,
	-2, 2165,
	-1, 880,
	86, 1716,
	-2, 1989,
	-1, 881,
	86, 1717,
	-2, 2078,
	-1, 884,
	86, 1720,
	-2, 2177,
	-1, 886,
	86, 1722,
	-2, 2180,
	-1, 887,
	86, 1723,
	-2, 2182,
	-1, 888,
	86, 1726,
	-2, 2190,
	-1, 889,
	86, 1727,
	-2, 2063,
	-1, 890,
	86, 1728,
	-2, 2108,
	-1, 891,
	86, 1729,
	-2, 2073,
	-1, 892,
	86, 1730,
	-2, 2098,
	-1, 903,
	86, 1610,
	-2, 2280,
	-1, 904,
	86, 1611,
	-2, 2281,
	-1, 905,
	86, 1612,
	-2, 2282,
	-1, 1010,
	474, 669,
	475, 669,
	-2, 635,
	-1, 1061,
	128, 1904,
	139, 1904,
	159, 1904,
	-2, 1878,
	-1, 1182,
	22, 838,
	-2, 787,
	-1, 1292,
	11, 811,
	22, 811,
	-2, 1487,
	-1, 1376,
	22, 838,
	-2, 787,
	-1, 1735,
	86, 1777,
	-2, 2080,
	-1, 1736,
	86, 1778,
	-2, 2081,
	-1, 1911,
	87, 1011,
	-2, 1017,
	-1, 2366,
	111, 1183,
	155, 1183,
	195, 1183,
	198, 1183,
	288, 1183,
	-2, 1176,
	-1, 2530,
	11, 811,
	22, 811,
	-2, 952,
	-1, 2564,
	87, 1864,
	160, 1864,
	-2, 2065,
	-1, 2565,
	87, 1864,
	160, 1864,
	-2, 2064,
	-1, 2566,
	87, 1840,
	160, 1840,
	-2, 2051,
	-1, 2567,
	87, 1841,
	160, 1841,
	-2, 2056,
	-1, 2568,
	87, 1842,
	160, 1842,
	-2, 1977,
	-1, 2569,
	87, 1843,
	160, 1843,
	-2, 1970,
	-1, 2570,
	87, 1844,
	160, 1844,
	-2, 1894,
	-1, 2571,
	87, 1845,
	160, 1845,
	-2, 2053,
	-1, 2572,
	87, 1846,
	160, 1846,
	-2, 1975,
	-1, 2573,
	87, 1847,
	160, 1847,
	-2, 1969,
	-1, 2574,
	87, 1848,
	160, 1848,
	-2, 1957,
	-1, 2575,
	87, 1864,
	160, 1864,
	-2, 1958,
	-1, 2576,
	87, 1864,
	160, 1864,
	-2, 1959,
	-1, 2578,
	87, 1853,
	160, 1853,
	-2, 2098,
	-1, 2579,
	87, 1830,
	160, 1830,
	-2, 2083,
	-1, 2580,
	87, 1862,
	160, 1862,
	-2, 2054,
	-1, 2581,
	87, 1862,
	160, 1862,
	-2, 2082,
	-1, 2582,
	87, 1862,
	160, 1862,
	-2, 1922,
	-1, 2583,
	87, 1860,
	160, 1860,
	-2, 2073,
	-1, 2584,
	87, 1857,
	160, 1857,
	-2, 1947,
	-1, 2585,
	86, 1811,
	87, 1811,
	160, 1811,
	409, 1811,
	410, 1811,
	411, 1811,
	-2, 1893,
	-1, 2586,
	86, 1812,
	87, 1812,
	160, 1812,
	409, 1812,
	410, 1812,
	411, 1812,
	-2, 1895,
	-1, 2587,
	86, 1813,
	87, 1813,
	160, 1813,
	409, 1813,
	410, 1813,
	411, 1813,
	-2, 2126,
	-1, 2588,
	86, 1815,
	87, 1815,
	160, 1815,
	409, 1815,
	410, 1815,
	411, 1815,
	-2, 2055,
	-1, 2589,
	86, 1817,
	87, 1817,
	160, 1817,
	409, 1817,
	410, 1817,
	411, 1817,
	-2, 2033,
	-1, 2590,
	86, 1819,
	87, 1819,
	160, 1819,
	409, 1819,
	410, 1819,
	411, 1819,
	-2, 1976,
	-1, 2591,
	86, 1821,
	87, 1821,
	160, 1821,
	409, 1821,
	410, 1821,
	411, 1821,
	-2, 1953,
	-1, 2592,
	86, 1822,
	87, 1822,
	160, 1822,
	409, 1822,
	410, 1822,
	411, 1822,
	-2, 1954,
	-1, 2593,
	86, 1824,
	87, 1824,
	160, 1824,
	409, 1824,
	410, 1824,
	411, 1824,
	-2, 1892,
	-1, 2594,
	87, 1867,
	160, 1867,
	409, 1867,
	410, 1867,
	411, 1867,
	-2, 1927,
	-1, 2595,
	87, 1867,
	160, 1867,
	409, 1867,
	410, 1867,
	411, 1867,
	-2, 1943,
	-1, 2596,
	87, 1870,
	160, 1870,
	409, 1870,
	410, 1870,
	411, 1870,
	-2, 1923,
	-1, 2597,
	87, 1870,
	160, 1870,
	409, 1870,
	410, 1870,
	411, 1870,
	-2, 1992,
	-1, 2598,
	87, 1867,
	160, 1867,
	409, 1867,
	410, 1867,
	411, 1867,
	-2, 2015,
	-1, 2819,
	111, 1183,
	155, 1183,
	195, 1183,
	198, 1183,
	288, 1183,
	-2, 1177,
	-1, 2837,
	84, 731,
	160, 731,
	-2, 1361,
	-1, 3267,
	198, 1183,
	312, 1450,
	-2, 1422,
	-1, 3456,
	111, 1183,
	155, 1183,
	195, 1183,
	198, 1183,
	-2, 1301,
	-1, 3458,
	111, 1183,
	155, 1183,
	195, 1183,
	198, 1183,
	-2, 1301,
	-1, 3470,
	84, 731,
	160, 731,
	-2, 1361,
	-1, 3491,
	198, 1183,
	312, 1450,
	-2, 1423,
	-1, 3646,
	111, 1183,
	155, 1183,
	195, 1183,
	198, 1183,
	-2, 1302,
	-1, 3674,
	87, 1263,
	160, 1263,
	-2, 1183,
	-1, 3820,
	87, 1263,
	160, 1263,
	-2, 1183,
	-1, 3989,
	87, 1267,
	160, 1267,
	-2, 1183,
	-1, 4044,
	87, 1268,
	160, 1268,
	-2, 1183,
}

const yyPrivate = 57344

const yyLast = 55449

var yyAct = [...]int{
	782, 758, 4098, 784, 4066, 2868, 223, 4090, 1637, 3993,
	1999, 3999, 1715, 3476, 3576, 4000, 3887, 3287, 3992, 3820,
	3253, 767, 3910, 3945, 3867, 3364, 3702, 3505, 2862, 1711,
	760, 1549, 3767, 3798, 3858, 3819, 1328, 3365, 3888, 3634,
	1775, 812, 2865, 3736, 2781, 37, 648, 3580, 1183, 1481,
	3438, 1060, 3789, 3868, 3870, 3571, 3443, 1762, 1944, 1487,
	3262, 3492, 2416, 666, 1177, 672, 672, 3655, 3643, 3224,
	1718, 672, 690, 699, 2840, 3210, 699, 3186, 2981, 3616,
	3362, 756, 3648, 3459, 208, 2980, 3213, 3430, 1780, 2094,
	2891, 2957, 3282, 3271, 2097, 68, 2979, 2562, 3264, 3461,
	2976, 2133, 3407, 2059, 1777, 2524, 2688, 3049, 2560, 711,
	3009, 2807, 2207, 1959, 2968, 3327, 2165, 696, 2419, 3191,
	2653, 3270, 3193, 3187, 3233, 3189, 2377, 707, 2110, 3188,
	3184, 2820, 1542, 2345, 2321, 1173, 3157, 141, 2320, 750,
	36, 3097, 1622, 2631, 1638, 2191, 2203, 1626, 3023, 2173,
	2174, 1873, 2613, 940, 1627, 2138, 2166, 2202, 2525, 755,
	2090, 1630, 2796, 2063, 2060, 1446, 2791, 2893, 2508, 2503,
	981, 2376, 2873, 2558, 219, 8, 2417, 2237, 1989, 218,
	7, 6, 2366, 1920, 1121, 1709, 2204, 759, 1589, 1776,
	2832, 1659, 665, 1558, 1527, 2357, 2412, 1521, 749, 648,
	1958, 1714, 1769, 1749, 2725, 768, 2360, 1700, 27, 1199,
	2172, 1490, 2169, 1641, 2154, 23, 1596, 1916, 1708, 1053,
	704, 1470, 2532, 223, 1054, 223, 1526, 1112, 1113, 1919,
	681, 2504, 980, 1523, 672, 1580, 1781, 1466, 907, 714,
	757, 209, 24, 25, 17, 16, 1019, 713, 10, 1092,
	1615, 1482, 698, 15, 957, 1398, 1005, 978, 201, 710,
	963, 971, 33, 972, 205, 909, 910, 3877, 1329, 3786,
	647, 2211, 1374, 1260, 1261, 1262, 1259, 2761, 2761, 2761,
	695, 1109, 2534, 3373, 751, 3473, 668, 1260, 1261, 1262,
	1259, 1260, 1261, 1262, 1259, 3240, 684, 3066, 1069, 3065,
	1413, 1178, 952, 2221, 3607, 3446, 1179, 1108, 2676, 1110,
	2616, 3357, 1886, 2619, 1105, 2617, 966, 691, 962, 2614,
	1599, 1603, 207, 2724, 1104, 694, 667, 677, 702, 2319,
	1393, 1456, 3845, 14, 692, 1449, 1450, 1451, 1525, 1105,
	1066, 1367, 929, 1068, 1039, 927, 206, 64, 197, 168,
	1105, 3167, 673, 2325, 1652, 1178, 2329, 1887, 1396, 3152,
	3150, 3147, 3149, 4078, 1504, 198, 1880, 1389, 3569, 3045,
	3043, 1601, 189, 2143, 943, 3853, 199, 1260, 1261, 1262,
	1259, 751, 8, 3743, 3737, 3572, 3363, 7, 2188, 1103,
	1323, 2753, 2751, 3872, 2168, 140, 1260, 1261, 1262, 1259,
	908, 3126, 2160, 2457, 4104, 693, 3866, 4075, 3805, 919,
	126, 3751, 1258, 3586, 4028, 3617, 1222, 2662, 3621, 202,
	2208, 206, 3460, 2670, 2368, 2367, 3971, 1636, 1404, 3864,
	206, 64, 197, 168, 3773, 2755, 3749, 2706, 3921, 1566,
	1403, 1402, 928, 206, 2826, 926, 1401, 1421, 1438, 968,
	929, 961, 3806, 206, 927, 1070, 3124, 206, 1399, 206,
	965, 964, 709, 2974, 1087, 206, 206, 1064, 1065, 2361,
	1952, 3775, 206, 64, 197, 168, 1645, 946, 1657, 2219,
	2552, 953, 206, 64, 197, 168, 1491, 1257, 1650, 1405,
	1889, 2780, 1034, 1032, 2824, 1033, 148, 149, 2553, 150,
	151, 960, 3069, 202, 152, 3016, 1642, 153, 1654, 1682,
	1649, 1528, 2776, 1530, 3057, 140, 202, 2107, 920, 2073,
	970, 924, 3017, 3018, 2632, 959, 202, 2074, 2075, 958,
	1644, 1500, 1656, 1028, 1501, 945, 1088, 1668, 202, 202,
	3257, 951, 3151, 3148, 2827, 202, 898, 3255, 897, 899,
	900, 1478, 901, 902, 1973, 202, 1717, 2449, 1898, 1899,
	206, 64, 197, 168, 1488, 1489, 2778, 1255, 949, 1063,
	167, 195, 204, 196, 124, 1701, 3875, 1062, 1705, 206,
	64, 197, 168, 1040, 4003, 4004, 1420, 2773, 1950, 3968,
	3596, 2793, 3874, 194, 188, 187, 206, 64, 197, 168,
	70, 2794, 1704, 3873, 1250, 1237, 969, 2308, 1238, 2777,
	1036, 1082, 1077, 1072, 1076, 1080, 1602, 1600, 1230, 3875,
	3959, 1232, 1503, 2539, 3964, 1194, 2538, 3874, 3958, 2540,
	2774, 4027, 950, 202, 206, 3947, 1240, 3873, 3957, 1085,
	4070, 4071, 3366, 1075, 1191, 2756, 3947, 3950, 2223, 1233,
	2792, 3884, 202, 1815, 167, 195, 204, 196, 3856, 3050,
	1486, 190, 191, 192, 1485, 1488, 1489, 3740, 1721, 202,
	672, 672, 3973, 3974, 1038, 3366, 3051, 194, 3052, 2657,
	1188, 672, 1187, 140, 2091, 3380, 3969, 3970, 2799, 3977,
	3976, 3975, 3978, 1706, 1083, 3859, 3860, 3861, 3862, 200,
	2498, 699, 699, 1086, 672, 2085, 2912, 202, 2081, 967,
	1197, 3206, 1202, 1205, 1696, 3431, 2215, 1703, 3626, 3436,
	136, 2969, 2492, 1235, 193, 3087, 137, 2356, 2151, 1951,
	1073, 696, 696, 696, 969, 3595, 1226, 2783, 3966, 1422,
	2220, 3777, 3778, 3597, 1115, 3204, 4002, 3517, 956, 1514,
	2779, 1037, 1609, 1608, 1084, 1476, 3085, 1252, 2667, 1392,
	193, 745, 1228, 2215, 747, 2754, 2455, 1300, 1225, 746,
	3876, 2775, 3785, 3570, 1231, 1234, 3044, 2105, 2106, 2963,
	3383, 3091, 2760, 138, 1069, 3200, 1186, 1236, 1179, 2494,
	1502, 3782, 1720, 1719, 1074, 3623, 63, 3411, 1179, 2501,
	1227, 3201, 3202, 3759, 1179, 3760, 1247, 3730, 3285, 1180,
	3286, 2209, 2209, 2555, 1187, 2209, 3211, 3203, 1217, 1253,
	1254, 3754, 3067, 1248, 1249, 922, 1066, 2326, 664, 1068,
	3587, 1888, 2495, 2496, 1702, 3532, 3064, 3283, 3284, 4035,
	2242, 3903, 3222, 3898, 1332, 65, 2210, 1105, 944, 1105,
	942, 1105, 3234, 752, 1105, 3529, 1105, 1069, 1179, 3762,
	1105, 3804, 1202, 1205, 1239, 3259, 2833, 2959, 923, 1242,
	3810, 1081, 1243, 2222, 2487, 3802, 701, 1229, 700, 2972,
	146, 203, 2363, 147, 3522, 3972, 1452, 3158, 169, 2615,
	1035, 3761, 3889, 61, 695, 695, 695, 3905, 3477, 1066,
	1245, 3198, 1068, 3731, 3911, 1206, 1294, 1078, 1604, 697,
	1079, 3776, 3254, 3750, 2867, 1196, 1204, 1203, 1333, 697,
	3484, 908, 2863, 2864, 1395, 2867, 1397, 2340, 1488, 1489,
	3422, 691, 691, 691, 3212, 1488, 1489, 1465, 1409, 694,
	694, 694, 1412, 1181, 1065, 1214, 1418, 666, 692, 692,
	692, 1182, 3622, 1210, 1211, 1372, 1175, 2671, 1377, 139,
	45, 1651, 2752, 169, 1691, 203, 62, 1692, 1216, 3771,
	5, 65, 169, 2422, 1400, 1301, 3289, 3613, 1890, 3419,
	981, 65, 1190, 1192, 1195, 169, 1477, 1241, 143, 144,
	3883, 3174, 145, 1193, 2490, 169, 3533, 697, 3421, 169,
	3693, 169, 4110, 1296, 1297, 1298, 1299, 169, 169, 925,
	1089, 2798, 1071, 971, 169, 972, 697, 3212, 3682, 693,
	693, 693, 2555, 2467, 169, 2466, 1246, 2226, 2228, 2229,
	2092, 3583, 3811, 697, 3207, 672, 1029, 3803, 1516, 2941,
	4093, 1208, 672, 2970, 2488, 2489, 648, 648, 3965, 3088,
	2805, 1244, 1538, 1537, 1484, 1215, 648, 648, 1463, 65,
	1553, 1553, 3688, 672, 1462, 3779, 1204, 1203, 2802, 2803,
	2435, 3759, 3912, 3760, 1106, 1107, 2415, 2438, 65, 1111,
	3220, 797, 142, 2801, 699, 1581, 666, 142, 3790, 1551,
	1551, 1592, 1555, 1344, 1345, 65, 1461, 3260, 3627, 1480,
	1479, 2913, 169, 2914, 2915, 3263, 223, 1174, 3824, 2084,
	3146, 3199, 2082, 1560, 2421, 648, 2458, 3991, 1697, 2423,
	1031, 169, 3755, 1030, 3462, 2415, 3756, 3762, 3567, 1727,
	1730, 1731, 934, 3369, 2437, 2432, 1414, 1291, 169, 1419,
	1728, 3703, 3704, 3705, 3709, 3707, 3708, 3710, 3706, 709,
	678, 1515, 3944, 142, 3279, 3283, 3284, 3011, 3013, 3761,
	2811, 2815, 2816, 2817, 2812, 2814, 2813, 1634, 1524, 3028,
	3029, 3288, 1639, 2424, 3162, 1378, 169, 2663, 2544, 1648,
	2436, 4094, 1376, 938, 1222, 2453, 2212, 2080, 936, 935,
	1547, 1548, 2057, 1411, 1430, 2766, 3318, 3090, 1436, 2425,
	1435, 1892, 3695, 1434, 1433, 1423, 1041, 703, 1680, 1424,
	3424, 2910, 3280, 3221, 975, 976, 977, 2341, 3408, 1643,
	1472, 1473, 1553, 1443, 1553, 1187, 1655, 2224, 2225, 2647,
	1658, 3099, 3098, 2335, 2334, 2770, 973, 1445, 1448, 696,
	2333, 3823, 696, 696, 1415, 1416, 2238, 2932, 2933, 1408,
	1425, 1426, 1427, 1428, 1429, 1690, 1431, 934, 1029, 1505,
	1506, 1901, 1437, 1902, 1492, 937, 941, 1495, 1610, 1069,
	1532, 1534, 970, 3684, 1221, 2227, 1069, 3683, 1582, 3605,
	1545, 1546, 1406, 1407, 1067, 3164, 1624, 1625, 1536, 142,
	1675, 1676, 1553, 2332, 2942, 2944, 2945, 2946, 2943, 3990,
	1900, 3689, 3690, 930, 142, 3656, 142, 2479, 933, 1187,
	1779, 1647, 4106, 936, 935, 4091, 4092, 1629, 931, 1458,
	1633, 1763, 1810, 1811, 1828, 1814, 1632, 1567, 677, 1716,
	1561, 3012, 1573, 1829, 2426, 1457, 1579, 2276, 1184, 1605,
	2275, 1593, 1031, 4112, 2348, 1030, 1836, 1594, 1838, 2431,
	1839, 1840, 1841, 2429, 2522, 1737, 1738, 1739, 1740, 1741,
	1742, 1743, 1744, 1745, 1746, 1747, 1748, 2349, 2350, 3370,
	1713, 1760, 1761, 1613, 2931, 1616, 1617, 1729, 3954, 1457,
	2838, 1258, 2359, 1679, 4100, 2217, 3324, 1618, 1619, 2132,
	3755, 1187, 1678, 4088, 3869, 2555, 4046, 1891, 4014, 3320,
	1694, 1894, 695, 1896, 1813, 695, 695, 1666, 2422, 2425,
	1669, 1903, 1905, 1258, 1906, 4011, 1908, 1909, 1689, 3281,
	1837, 1581, 1871, 1710, 2767, 1732, 1917, 1553, 1922, 1923,
	1893, 1925, 1516, 672, 1042, 1661, 3239, 1222, 672, 691,
	2634, 1553, 691, 691, 2395, 981, 1699, 694, 1945, 3427,
	694, 694, 1688, 1684, 1687, 1686, 692, 4101, 1683, 692,
	692, 1553, 1712, 1818, 1819, 1820, 4047, 1516, 1707, 4047,
	1874, 4015, 690, 1029, 1827, 4005, 1834, 2523, 1184, 1835,
	2422, 2425, 2523, 1467, 1471, 1471, 1471, 1258, 4012, 3987,
	1667, 1751, 1972, 1670, 1671, 1882, 1848, 1849, 3382, 3938,
	2358, 1979, 1979, 2313, 1516, 1698, 1516, 1516, 1467, 1467,
	672, 672, 2839, 2046, 1917, 2050, 1870, 2452, 1553, 2054,
	2055, 3324, 3435, 2839, 2070, 2662, 648, 693, 1758, 1759,
	693, 693, 2130, 3937, 3293, 1260, 1261, 1262, 1259, 1924,
	648, 3931, 1553, 1685, 2426, 1926, 3291, 3156, 2252, 2421,
	2415, 2420, 3154, 2418, 2423, 1976, 2523, 1031, 1219, 3031,
	1030, 2785, 3988, 3906, 2757, 2410, 2652, 3894, 1877, 672,
	1917, 1553, 1258, 2115, 2639, 672, 672, 672, 707, 707,
	3843, 2394, 1220, 1842, 2208, 2125, 2126, 2127, 2128, 1222,
	3842, 2072, 2134, 3837, 2001, 1260, 1261, 1262, 1259, 223,
	3836, 3835, 223, 223, 2408, 223, 1258, 1263, 2424, 2318,
	2108, 2048, 1872, 2312, 2252, 1293, 2426, 1982, 1100, 1101,
	1102, 2421, 2415, 2420, 1303, 2418, 2423, 1373, 1921, 1878,
	2311, 912, 913, 914, 915, 1220, 2217, 2100, 2101, 2251,
	3895, 3122, 1937, 3834, 3814, 1828, 1828, 2176, 2086, 2283,
	1312, 2199, 1099, 3844, 2103, 1096, 1912, 1828, 1828, 2056,
	1444, 1766, 1953, 2381, 2193, 2077, 2252, 2079, 3813, 1260,
	1261, 1262, 1259, 2252, 2252, 3788, 1941, 1942, 2098, 2099,
	2424, 2114, 1960, 2142, 1962, 1963, 2145, 2146, 2093, 2148,
	1801, 1539, 4119, 1643, 1947, 1948, 1945, 1965, 1969, 1955,
	1553, 2206, 1961, 2117, 2118, 2119, 1983, 1984, 2187, 1970,
	4102, 3473, 1564, 2178, 3720, 2250, 2252, 2217, 696, 2053,
	3538, 3035, 1913, 1914, 1915, 2841, 2665, 1260, 1261, 1262,
	1259, 2047, 1978, 1980, 1928, 1929, 1930, 1931, 2664, 2656,
	1069, 2217, 2402, 1069, 3536, 2271, 2058, 2052, 2252, 2256,
	2071, 3486, 1069, 2198, 2200, 3452, 2137, 3400, 2076, 2087,
	2078, 3396, 3301, 2123, 785, 795, 1663, 142, 142, 142,
	1067, 2183, 1710, 2248, 786, 1309, 787, 791, 794, 790,
	788, 789, 1066, 917, 1946, 1068, 3006, 2112, 1207, 2113,
	1171, 2743, 2731, 2555, 1066, 2171, 1166, 1068, 2120, 2121,
	2723, 1291, 2102, 1981, 1275, 3244, 1964, 2171, 912, 913,
	914, 915, 2139, 2678, 932, 1093, 1094, 1095, 1098, 2660,
	1097, 4113, 1971, 3082, 3487, 1974, 1975, 2648, 3453, 792,
	3401, 2641, 1817, 1816, 3397, 3302, 2156, 2636, 2235, 2236,
	2628, 1541, 1468, 1292, 2626, 1543, 2624, 2622, 1069, 2380,
	2314, 1817, 1816, 2189, 2290, 2289, 1544, 4074, 2450, 2523,
	2274, 2177, 793, 1797, 2381, 1258, 1945, 2265, 2186, 2184,
	1794, 3878, 1455, 1258, 1796, 1793, 1795, 1799, 1800, 3787,
	1464, 695, 1798, 2197, 2195, 2264, 1258, 1474, 2323, 2324,
	1066, 2327, 2381, 1068, 2330, 1493, 1494, 2231, 1496, 1497,
	2637, 1498, 2263, 2253, 2642, 2336, 2201, 2216, 1672, 3235,
	2637, 750, 3747, 2629, 672, 672, 672, 2627, 691, 2623,
	2623, 2214, 2381, 2313, 2306, 2254, 694, 1258, 1258, 672,
	672, 672, 672, 1258, 3899, 692, 3686, 2239, 3685, 2230,
	1258, 3657, 2378, 3465, 1591, 1540, 1854, 1499, 1467, 3463,
	1453, 2382, 2383, 2384, 1454, 2387, 1516, 2232, 1258, 1751,
	917, 3671, 1471, 1469, 3630, 1847, 939, 2140, 3445, 2196,
	3325, 2244, 3316, 3308, 1471, 1258, 2252, 3303, 3900, 3215,
	2217, 1673, 1516, 2966, 2965, 3658, 2809, 3466, 2284, 2285,
	3236, 2287, 1379, 3464, 2762, 2233, 2234, 2675, 2294, 2444,
	2640, 1843, 1844, 1845, 1846, 2546, 693, 1850, 1851, 1852,
	1853, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 2181, 2180, 1757, 2179, 1804, 1805, 1806, 1807,
	1808, 1809, 1802, 1803, 3237, 1260, 1261, 1262, 1259, 2399,
	1754, 1756, 1753, 2401, 1755, 2403, 3358, 1440, 2696, 1770,
	1453, 1439, 1189, 2451, 1454, 2614, 3355, 672, 1979, 1278,
	1279, 1280, 1281, 1282, 1275, 2685, 2527, 2527, 2070, 2527,
	2315, 2307, 2309, 2310, 2608, 3036, 1907, 1165, 1161, 1162,
	1163, 1164, 1770, 2701, 2245, 2700, 2699, 2697, 3956, 648,
	648, 1260, 1261, 1262, 1259, 2404, 1259, 1187, 1260, 1261,
	1262, 1259, 2618, 1553, 672, 1262, 1259, 3356, 1597, 2342,
	2140, 3698, 1722, 1723, 1724, 1725, 1726, 672, 2414, 3697,
	3053, 2902, 2413, 1187, 2599, 666, 2900, 1332, 2879, 2877,
	3677, 1592, 2550, 2070, 4084, 2715, 2604, 4083, 2606, 3631,
	3632, 223, 1260, 1261, 1262, 1259, 2745, 1562, 2746, 1311,
	1597, 678, 2407, 4082, 1767, 2698, 2388, 4080, 1771, 1772,
	1773, 1774, 1310, 1069, 3624, 4109, 4079, 2541, 1812, 2542,
	4018, 2531, 2529, 3986, 2533, 3985, 1822, 2391, 3115, 3433,
	3901, 2644, 2397, 2953, 2951, 2398, 2782, 142, 2547, 2548,
	2427, 2428, 3839, 2433, 1260, 1261, 1262, 1259, 2400, 2658,
	3827, 1333, 2206, 2687, 2535, 1066, 3101, 3439, 1068, 1553,
	3817, 1553, 3807, 1553, 1260, 1261, 1262, 1259, 1187, 1260,
	1261, 1262, 1259, 2610, 3625, 2609, 2677, 2563, 1598, 1875,
	4108, 3996, 1260, 1261, 1262, 1259, 2603, 3738, 3660, 3434,
	2668, 3114, 3659, 2952, 2950, 2557, 2808, 3478, 2497, 2949,
	2938, 1832, 1553, 1187, 2502, 142, 3444, 2709, 1260, 1261,
	1262, 1259, 142, 2654, 2655, 3601, 1833, 2536, 1260, 1261,
	1262, 1259, 2716, 3467, 2267, 142, 3432, 1553, 142, 142,
	3192, 1551, 3304, 2704, 1260, 1261, 1262, 1259, 2389, 2390,
	3205, 142, 1260, 1261, 1262, 1259, 3078, 2551, 2392, 2393,
	2554, 2702, 2703, 3048, 3047, 2936, 1551, 2259, 2717, 2948,
	2937, 1949, 2068, 1532, 1534, 2935, 2934, 2600, 2926, 2602,
	2920, 2919, 2672, 2918, 2917, 2758, 2764, 2765, 2630, 2543,
	2768, 2317, 2159, 2720, 2721, 2158, 2157, 1968, 2153, 1260,
	1261, 1262, 1259, 2152, 2266, 2689, 2109, 2689, 1187, 1956,
	1957, 1897, 1187, 1895, 1664, 1391, 2693, 3780, 3781, 1553,
	2718, 2674, 1516, 3589, 4105, 4103, 1966, 1967, 2050, 4085,
	2669, 1260, 1261, 1262, 1259, 2707, 2837, 671, 671, 2650,
	3577, 4072, 2843, 679, 4034, 2844, 1977, 2659, 2661, 3588,
	1260, 1261, 1262, 1259, 2666, 3526, 1875, 4033, 4030, 3962,
	2683, 1875, 1875, 2854, 1260, 1261, 1262, 1259, 2749, 2249,
	1710, 2679, 2680, 1187, 1169, 2825, 1260, 1261, 1262, 1259,
	3961, 2876, 1260, 1261, 1262, 1259, 3768, 3942, 1187, 1187,
	1187, 1979, 3886, 3635, 1187, 2695, 2886, 2887, 2888, 2889,
	1187, 2896, 2705, 2897, 2898, 3880, 2899, 745, 2901, 2821,
	747, 2141, 2786, 3388, 2144, 746, 2563, 2147, 1535, 2896,
	2149, 2601, 3863, 1471, 2822, 1069, 3854, 3831, 3826, 2855,
	3118, 2527, 2834, 1168, 3825, 2806, 3784, 3770, 3769, 2682,
	1260, 1261, 1262, 1259, 3739, 2954, 3679, 1260, 1261, 1262,
	1259, 2001, 3639, 3628, 3610, 648, 2845, 1260, 1261, 1262,
	1259, 3117, 2050, 3608, 2857, 3606, 1187, 2070, 2070, 2070,
	2070, 2070, 2070, 3603, 3600, 3599, 2192, 2871, 2788, 3575,
	2790, 3573, 3546, 1187, 2070, 2787, 3543, 2527, 1260, 1261,
	1262, 1259, 2871, 2882, 2883, 2960, 2870, 2874, 2885, 3540,
	2958, 2874, 2804, 3014, 2892, 1553, 679, 2836, 3429, 3416,
	3409, 2881, 2828, 3393, 8, 3391, 672, 672, 3386, 7,
	1921, 2842, 3336, 3314, 2456, 3313, 3311, 2459, 2460, 2461,
	2462, 2463, 2464, 2465, 3116, 3310, 2468, 2469, 2470, 2471,
	2472, 2473, 2474, 2475, 2476, 2477, 2478, 2859, 2480, 2481,
	2482, 2483, 2484, 2872, 2485, 2878, 2856, 3305, 3299, 3298,
	2884, 1260, 1261, 1262, 1259, 2069, 2742, 3216, 3002, 3179,
	2982, 223, 2853, 2726, 2727, 3178, 223, 3177, 3168, 2732,
	2241, 3166, 3163, 3161, 2246, 3015, 2916, 2982, 2322, 2928,
	3092, 3089, 2255, 1260, 1261, 1262, 1259, 3068, 1828, 3046,
	1828, 3021, 2947, 3063, 2939, 1274, 1273, 1283, 1284, 1276,
	1277, 1278, 1279, 1280, 1281, 1282, 1275, 3077, 2961, 2929,
	2967, 3032, 2927, 1553, 2278, 2923, 3084, 2247, 2922, 2262,
	2921, 2983, 2984, 2985, 2986, 2987, 2988, 2269, 2771, 2763,
	142, 2759, 3058, 142, 142, 3005, 142, 3003, 2999, 2651,
	3004, 853, 852, 2869, 3070, 3037, 2337, 2331, 2328, 2286,
	3041, 2162, 3019, 2155, 2291, 2292, 2293, 3022, 1885, 2296,
	2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2964,
	2875, 1884, 1665, 2847, 1624, 1625, 1067, 1340, 2850, 142,
	1874, 708, 1069, 2741, 1336, 3062, 1335, 1172, 1067, 921,
	4111, 4060, 2740, 3918, 1069, 1260, 1261, 1262, 1259, 3914,
	1629, 3764, 3763, 1633, 142, 3060, 2739, 3752, 3748, 1632,
	1260, 1261, 1262, 1259, 3602, 3039, 3071, 3038, 3165, 1260,
	1261, 1262, 1259, 3081, 2738, 3169, 3170, 3171, 3173, 3584,
	3175, 3176, 3086, 1260, 1261, 1262, 1259, 3056, 3059, 3061,
	1187, 3054, 2737, 3556, 3458, 3073, 3195, 3457, 3074, 3072,
	3456, 1260, 1261, 1262, 1259, 4059, 3209, 3426, 2736, 3080,
	3405, 672, 3403, 3402, 3399, 3093, 1617, 3398, 3392, 1260,
	1261, 1262, 1259, 2735, 3225, 1187, 1618, 1619, 672, 3113,
	1187, 1187, 3390, 3100, 1292, 1260, 1261, 1262, 1259, 2070,
	2378, 3094, 3243, 3107, 3109, 3110, 3155, 3106, 3371, 3108,
	1260, 1261, 1262, 1259, 3361, 3360, 2396, 1260, 1261, 1262,
	1259, 3347, 2444, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1275, 3346, 3228, 3219, 3269, 3245, 3272, 3232, 3272, 3272,
	3182, 3153, 3120, 1187, 3181, 1266, 1267, 1268, 1269, 1270,
	1271, 1272, 1264, 3111, 2871, 3103, 3160, 3159, 3102, 3096,
	3030, 3294, 2821, 206, 3252, 197, 168, 3290, 2784, 1553,
	1553, 3197, 2625, 2621, 2795, 3247, 2734, 2620, 2295, 3180,
	1069, 2288, 1069, 3256, 3258, 2282, 2281, 1069, 2280, 2871,
	2279, 1875, 2277, 1875, 2871, 2871, 2273, 2272, 1551, 1551,
	3295, 3296, 3241, 1260, 1261, 1262, 1259, 3104, 3105, 2270,
	2261, 3218, 1875, 1875, 1069, 3227, 672, 2258, 2257, 2161,
	3230, 3231, 1066, 3195, 1868, 1068, 3242, 3268, 2733, 3267,
	1867, 3238, 1866, 1831, 2730, 1516, 202, 4017, 2050, 2050,
	3277, 3251, 671, 1176, 1591, 1830, 2414, 2871, 1821, 1565,
	2413, 2729, 1563, 1185, 3936, 1260, 1261, 1262, 1259, 3273,
	3274, 1260, 1261, 1262, 1259, 1330, 3278, 3913, 3849, 2908,
	2909, 2728, 3846, 3292, 206, 3833, 1213, 3828, 1260, 1261,
	1262, 1259, 3733, 3732, 2924, 2925, 3714, 3696, 3692, 3670,
	3654, 3557, 1187, 2643, 3554, 2646, 2709, 3524, 1260, 1261,
	1262, 1259, 3523, 3520, 3359, 3519, 3127, 3128, 3485, 3482,
	2962, 3480, 3129, 3130, 3131, 3132, 3447, 3133, 3134, 3135,
	3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 1283, 1284,
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 1275, 3321, 3322,
	2722, 3306, 3312, 3315, 3300, 3307, 3112, 202, 3319, 1612,
	1623, 672, 1614, 1628, 1631, 4052, 3818, 3309, 2712, 2686,
	1620, 3332, 2692, 3333, 1447, 2993, 2955, 1260, 1261, 1262,
	1259, 2880, 2830, 2710, 2711, 2708, 2829, 2823, 2789, 3340,
	2744, 2713, 2714, 2635, 2545, 1260, 1261, 1262, 1259, 2486,
	3343, 3344, 3345, 2379, 2351, 2316, 2563, 2719, 1752, 202,
	3349, 2122, 1260, 1261, 1262, 1259, 1911, 1881, 1695, 2530,
	1274, 1273, 1283, 1284, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1275, 1646, 1621, 2134, 3413, 1722, 1875, 3415, 1390,
	1375, 1371, 3417, 2684, 3372, 1370, 1369, 3423, 3246, 1368,
	3275, 3375, 1367, 3248, 3249, 1366, 3374, 1365, 1364, 3378,
	1363, 1362, 1361, 3394, 3379, 3930, 3668, 1765, 1360, 2689,
	1260, 1261, 1262, 1259, 1359, 1358, 1357, 1356, 3384, 1355,
	1354, 1353, 672, 2050, 2069, 1352, 1351, 3418, 1350, 3420,
	1349, 1348, 142, 3451, 1260, 1261, 1262, 1259, 1347, 3425,
	1346, 1343, 1342, 1341, 1339, 1338, 3428, 1337, 1334, 2527,
	2070, 3470, 1327, 1326, 1324, 3406, 3666, 1323, 2848, 2849,
	1274, 1273, 1283, 1284, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1275, 3410, 1322, 3488, 3412, 1321, 1187, 1320, 1319,
	1318, 1317, 1316, 1315, 1314, 2846, 3269, 1313, 1308, 1069,
	1187, 1307, 1306, 1305, 2851, 2852, 1069, 1304, 1224, 1170,
	3328, 3329, 1187, 3928, 3535, 3926, 3924, 3521, 1553, 2386,
	1274, 1273, 1283, 1284, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1275, 3323, 3442, 2365, 1212, 4050, 4001, 3472, 672,
	3331, 2050, 2810, 2556, 2164, 1187, 1223, 1551, 3001, 3537,
	3518, 2991, 3338, 2996, 3339, 3337, 2994, 3479, 2997, 3481,
	3440, 2995, 2990, 3469, 3468, 3334, 2998, 1511, 2517, 2518,
	3511, 3475, 3000, 2989, 1522, 3559, 125, 223, 67, 3955,
	3865, 66, 3675, 3560, 2649, 2638, 1441, 2505, 3547, 3525,
	1187, 3489, 3550, 3530, 3076, 1559, 3214, 3527, 1939, 1940,
	2454, 3561, 3534, 2904, 3528, 1934, 1935, 1936, 3531, 1875,
	2905, 2906, 2907, 3541, 3539, 3542, 2892, 3350, 3265, 3544,
	3266, 2039, 3545, 3551, 2512, 2516, 2517, 2518, 2513, 2521,
	2514, 2519, 3604, 3558, 2515, 1606, 2520, 3549, 3376, 3377,
	3552, 2633, 2673, 3612, 1660, 674, 1640, 675, 1187, 2982,
	676, 2654, 2655, 3582, 2338, 2124, 1218, 3190, 3183, 2858,
	2831, 3568, 2406, 2374, 1943, 1910, 4063, 3548, 1187, 1553,
	1553, 142, 1817, 1816, 3225, 3578, 3579, 1386, 1387, 1384,
	1385, 142, 1382, 1383, 3609, 3830, 3611, 3647, 3040, 3647,
	3042, 1380, 1381, 3297, 2982, 2499, 2493, 2051, 1551, 1763,
	3637, 1187, 3664, 1187, 1508, 3641, 3642, 1507, 3636, 1875,
	1251, 2182, 3342, 3667, 1875, 3669, 3024, 2339, 3563, 2194,
	1553, 1460, 3644, 1459, 1432, 3619, 2192, 3638, 3620, 1483,
	3618, 4024, 4022, 3979, 3952, 3951, 3629, 3949, 672, 3890,
	1187, 1187, 3615, 3640, 1187, 1187, 3850, 3652, 3651, 1763,
	3728, 3727, 2871, 3665, 3574, 2178, 3395, 3368, 3367, 3352,
	3598, 3095, 3353, 3663, 3716, 3472, 2439, 2409, 3673, 3711,
	1662, 3034, 1069, 3676, 3518, 1945, 1457, 3680, 3725, 3414,
	3700, 3701, 4054, 4053, 3712, 3713, 3079, 3672, 2769, 3119,
	3734, 3735, 2367, 3471, 3511, 2260, 1394, 3678, 1209, 4053,
	4054, 3694, 3474, 1553, 3348, 1716, 1184, 1716, 2069, 2069,
	2069, 2069, 2069, 2069, 210, 3, 1475, 75, 2, 1286,
	3722, 1290, 3721, 4076, 4077, 2069, 3765, 1, 2750, 1879,
	1388, 3717, 1551, 3723, 3746, 916, 3758, 1287, 1289, 1285,
	911, 1288, 1274, 1273, 1283, 1284, 1276, 1277, 1278, 1279,
	1280, 1281, 1282, 1275, 1529, 3741, 2537, 912, 913, 914,
	915, 3745, 1184, 2104, 1557, 1883, 918, 3007, 3753, 3757,
	981, 3008, 3341, 3010, 2772, 3799, 2213, 3793, 3772, 1274,
	1273, 1283, 1284, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1275, 1187, 2512, 2516, 2517, 2518, 2513, 2521, 2514, 2519,
	3783, 2971, 2515, 3816, 2520, 3822, 2491, 2355, 3208, 1442,
	974, 3791, 142, 1823, 1677, 1201, 1674, 142, 1200, 3795,
	3794, 1198, 1768, 3582, 799, 3796, 2167, 2956, 3812, 2930,
	3808, 3724, 4062, 4097, 3590, 1187, 3591, 4016, 142, 4065,
	1553, 1693, 783, 3943, 3855, 4020, 3857, 3744, 2218, 1256,
	142, 3055, 3121, 1001, 3276, 840, 3829, 810, 1325, 1653,
	3250, 1069, 3125, 3123, 809, 1927, 3437, 2800, 3729, 1551,
	1932, 3840, 3027, 3801, 1002, 3838, 2150, 3852, 3742, 1607,
	1611, 2405, 3809, 3909, 1509, 1510, 3674, 1512, 1513, 3261,
	1517, 1518, 1519, 2866, 3882, 1716, 3871, 3448, 3449, 3450,
	1635, 3904, 3483, 3454, 3455, 3851, 1274, 1273, 1283, 1284,
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 1275, 3594, 3592,
	3661, 3662, 3593, 3891, 1568, 1569, 1570, 1571, 1572, 715,
	1574, 1575, 1576, 1577, 1578, 2083, 3879, 646, 1584, 1585,
	1586, 1587, 1985, 1986, 1051, 3715, 3885, 2163, 716, 2385,
	3967, 3908, 3832, 954, 1187, 3893, 2364, 955, 947, 2819,
	2818, 1733, 1553, 1265, 1750, 3933, 3144, 3145, 1302, 754,
	3940, 3923, 3925, 3927, 3929, 2243, 3907, 2797, 3902, 3506,
	3020, 74, 73, 72, 71, 3941, 3916, 231, 801, 230,
	3766, 1551, 3633, 3932, 3922, 3939, 4067, 3847, 3848, 780,
	779, 2111, 778, 777, 776, 775, 2510, 2111, 2111, 2111,
	2511, 2509, 3948, 1553, 3946, 2507, 3799, 2506, 2065, 2064,
	3033, 3351, 2129, 2131, 3223, 2895, 1067, 2890, 142, 1990,
	3960, 1988, 3989, 142, 1520, 2434, 2441, 1987, 3997, 3980,
	2069, 3998, 1551, 3385, 3981, 3585, 3919, 3983, 3984, 3982,
	3920, 3691, 2940, 3581, 1933, 2430, 2007, 2911, 2004, 2003,
	142, 2903, 3687, 3681, 2035, 4013, 3797, 3646, 3490, 3491,
	3497, 4006, 2373, 4007, 1120, 4008, 1116, 4009, 2681, 4010,
	1118, 1119, 1117, 2694, 4023, 3317, 4025, 4026, 2411, 3387,
	4021, 4019, 3185, 2347, 2346, 2344, 3389, 2343, 3871, 1417,
	1187, 4029, 1274, 1273, 1283, 1284, 1276, 1277, 1278, 1279,
	1280, 1281, 1282, 1275, 3881, 3963, 3614, 2561, 2559, 1167,
	3822, 4042, 3330, 3326, 2175, 3335, 2992, 2190, 3404, 4044,
	4045, 4043, 4051, 3075, 4048, 4049, 4061, 2066, 4069, 2062,
	2061, 4068, 1091, 4055, 4056, 4057, 4058, 1090, 1588, 2973,
	2500, 3774, 1938, 948, 2362, 109, 4081, 41, 122, 4073,
	989, 108, 1187, 185, 59, 2240, 3495, 184, 58, 120,
	182, 57, 103, 102, 4086, 3908, 4087, 4089, 119, 180,
	56, 215, 4095, 214, 217, 4099, 216, 213, 4096, 1274,
	1273, 1283, 1284, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1275, 2611, 2612, 212, 4040, 1595, 211, 3507, 3953, 3650,
	3718, 3935, 906, 4107, 3719, 44, 43, 186, 42, 110,
	3498, 60, 4069, 4115, 40, 4068, 4114, 39, 38, 34,
	13, 3493, 985, 986, 4099, 4116, 3515, 3516, 12, 35,
	4120, 22, 3494, 1029, 1273, 1283, 1284, 1276, 1277, 1278,
	1279, 1280, 1281, 1282, 1275, 21, 1681, 20, 206, 64,
	197, 168, 26, 32, 31, 135, 1716, 134, 30, 133,
	132, 131, 130, 129, 128, 127, 29, 198, 19, 3499,
	51, 50, 49, 1875, 189, 48, 47, 46, 199, 9,
	123, 118, 116, 28, 117, 114, 115, 113, 112, 1875,
	111, 106, 3553, 104, 86, 3555, 85, 140, 84, 99,
	98, 97, 96, 95, 94, 92, 93, 1000, 83, 82,
	81, 80, 126, 79, 101, 107, 3562, 1031, 105, 90,
	1030, 202, 100, 91, 89, 88, 87, 78, 77, 76,
	166, 165, 164, 163, 162, 160, 2352, 2353, 2354, 161,
	159, 158, 157, 156, 155, 154, 52, 53, 54, 55,
	176, 2369, 2370, 2371, 2372, 175, 177, 179, 181, 1015,
	178, 183, 173, 171, 174, 172, 170, 3514, 990, 2420,
	69, 11, 121, 18, 4, 142, 0, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 0, 0, 3841, 0,
	0, 0, 0, 0, 3503, 992, 0, 0, 148, 149,
	0, 150, 151, 0, 0, 0, 152, 0, 0, 153,
	0, 0, 0, 0, 0, 2116, 3500, 3504, 3502, 3501,
	0, 0, 0, 2036, 0, 0, 0, 0, 0, 0,
	206, 2069, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3645, 0, 0, 3509, 3510, 0, 2039,
	1014, 1012, 3892, 0, 0, 0, 0, 3896, 3897, 0,
	0, 0, 167, 195, 204, 196, 124, 0, 0, 1522,
	0, 0, 0, 0, 0, 0, 0, 1011, 0, 0,
	0, 0, 0, 0, 0, 194, 188, 187, 3917, 984,
	0, 0, 70, 202, 0, 0, 0, 0, 0, 3517,
	991, 1024, 0, 2013, 0, 0, 0, 0, 0, 0,
	0, 3496, 0, 0, 0, 0, 1559, 3508, 0, 0,
	0, 0, 0, 0, 1020, 0, 0, 0, 0, 2111,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 191, 192, 0, 0, 0, 0,
	1021, 1025, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2029, 0, 0, 0, 0, 0, 0, 0, 0,
	1008, 0, 1006, 1010, 1028, 0, 0, 0, 1007, 1004,
	1003, 200, 1009, 994, 995, 993, 996, 997, 998, 999,
	0, 1026, 0, 1027, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 1022, 1023, 193, 0, 137, 0,
	0, 0, 0, 0, 0, 0, 4031, 4032, 0, 0,
	0, 0, 2036, 4036, 4037, 4038, 4039, 1997, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 3513, 0, 0,
	0, 1018, 0, 0, 0, 2017, 0, 1017, 0, 0,
	0, 0, 0, 0, 0, 0, 2023, 0, 2039, 2006,
	0, 0, 1013, 0, 0, 138, 0, 0, 2040, 2041,
	0, 0, 0, 0, 0, 0, 2011, 2045, 63, 0,
	2012, 2014, 2016, 0, 2018, 2019, 2020, 2024, 2025, 2026,
	2028, 2031, 2032, 2033, 2005, 0, 0, 0, 0, 0,
	0, 2021, 2030, 2022, 0, 0, 1312, 0, 0, 0,
	0, 0, 2013, 3512, 0, 0, 0, 0, 0, 0,
	0, 0, 727, 726, 733, 723, 0, 65, 0, 0,
	0, 0, 0, 0, 0, 730, 731, 2037, 732, 736,
	1016, 0, 717, 0, 0, 0, 987, 988, 982, 0,
	0, 0, 741, 983, 0, 0, 0, 0, 0, 0,
	0, 2036, 146, 203, 0, 147, 1997, 0, 0, 0,
	169, 0, 3915, 0, 0, 61, 0, 0, 2835, 0,
	2029, 0, 0, 0, 0, 0, 0, 2034, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2039, 2006, 0,
	0, 0, 0, 0, 2010, 0, 0, 2040, 2041, 0,
	0, 2009, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2005, 0, 2027, 0, 0, 0, 0,
	0, 139, 45, 0, 2015, 0, 0, 0, 62, 0,
	0, 2013, 0, 0, 1996, 1998, 1995, 3994, 0, 1992,
	0, 0, 0, 0, 2017, 0, 0, 0, 0, 0,
	143, 144, 0, 0, 145, 2023, 0, 0, 0, 0,
	0, 0, 0, 2008, 0, 1991, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2011, 2045, 0, 0, 2012,
	2014, 2016, 0, 2018, 2019, 2020, 2024, 2025, 2026, 2028,
	2031, 2032, 2033, 0, 0, 0, 0, 0, 0, 2029,
	2021, 2030, 2022, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2000, 0, 0, 3994, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 718, 720, 719, 0,
	0, 0, 3649, 0, 0, 0, 2037, 725, 3025, 3026,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 729,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 0,
	0, 0, 0, 722, 0, 0, 0, 0, 1993, 1994,
	0, 3994, 0, 1996, 2861, 1995, 0, 0, 2860, 0,
	0, 0, 0, 2017, 0, 0, 2034, 0, 0, 0,
	0, 0, 0, 0, 2023, 0, 0, 1260, 1261, 1262,
	1259, 0, 0, 2010, 0, 0, 0, 0, 0, 0,
	2009, 0, 0, 0, 2011, 2045, 0, 0, 2012, 2014,
	2016, 0, 2018, 2019, 2020, 2024, 2025, 2026, 2028, 2031,
	2032, 2033, 0, 0, 2027, 0, 0, 4118, 0, 2021,
	2030, 2022, 0, 2015, 0, 0, 0, 0, 0, 0,
	0, 2000, 1139, 0, 0, 0, 2043, 2042, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2037, 0, 1801, 0, 0,
	724, 728, 734, 0, 735, 737, 0, 0, 738, 739,
	740, 0, 0, 742, 743, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1993, 1994, 2002,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2034, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2010, 0, 0, 0, 0, 0, 0, 2009,
	1139, 2038, 0, 0, 2044, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2027, 0, 0, 1124, 0, 0, 0,
	0, 0, 2015, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3217, 0, 2043, 2042, 1147, 1151, 1153,
	1155, 1157, 1158, 1160, 0, 1165, 1161, 1162, 1163, 1164,
	3229, 1142, 1143, 1144, 1145, 1122, 1123, 1148, 0, 1125,
	0, 1127, 1128, 1129, 1130, 1126, 1131, 1132, 1133, 1134,
	1135, 1138, 1140, 1136, 1137, 1146, 0, 0, 0, 0,
	0, 0, 0, 1150, 1152, 1154, 1156, 1159, 2002, 721,
	1797, 0, 0, 0, 0, 0, 0, 1794, 0, 0,
	0, 1796, 1793, 1795, 1799, 1800, 0, 0, 0, 1798,
	0, 0, 0, 0, 1124, 0, 0, 0, 1114, 0,
	0, 0, 0, 1141, 0, 0, 0, 0, 0, 0,
	2038, 0, 0, 2044, 0, 1147, 1151, 1153, 1155, 1157,
	1158, 1160, 0, 1165, 1161, 1162, 1163, 1164, 0, 1142,
	1143, 1144, 1145, 1122, 1123, 1148, 0, 1125, 0, 1127,
	1128, 1129, 1130, 1126, 1131, 1132, 1133, 1134, 1135, 1138,
	1140, 1136, 1137, 1146, 0, 0, 0, 0, 2111, 0,
	0, 1150, 1152, 1154, 1156, 1159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
	1790, 1791, 1792, 1804, 1805, 1806, 1807, 1808, 1809, 1802,
	1803, 0, 0, 0, 0, 0, 0, 0, 0, 2690,
	2691, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 401, 0, 0, 532,
	565, 554, 638, 520, 0, 0, 0, 0, 0, 0,
	769, 0, 0, 3381, 336, 0, 0, 369, 569, 551,
	561, 552, 537, 538, 539, 546, 348, 540, 541, 542,
	512, 543, 513, 544, 545, 808, 568, 519, 434, 385,
	586, 585, 0, 0, 877, 885, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 761,
	0, 0, 798, 853, 852, 785, 795, 0, 0, 309,
	229, 514, 634, 516, 515, 786, 0, 787, 791, 794,
	790, 788, 789, 0, 868, 0, 0, 0, 0, 0,
	0, 753, 765, 0, 770, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1149, 0, 0, 0, 0, 762, 763,
	0, 0, 0, 0, 818, 0, 764, 0, 0, 813,
	792, 796, 0, 0, 2111, 0, 299, 441, 460, 310,
	429, 473, 315, 437, 452, 305, 400, 426, 0, 0,
	301, 458, 436, 382, 359, 360, 300, 0, 420, 334,
	350, 331, 398, 793, 816, 820, 330, 891, 814, 468,
	303, 0, 467, 397, 454, 459, 383, 376, 0, 302,
	456, 381, 375, 363, 340, 892, 364, 365, 354, 409,
	373, 410, 355, 387, 386, 388, 0, 0, 0, 0,
	0, 496, 497, 0, 0, 645, 0, 0, 0, 0,
	0, 1149, 0, 0, 0, 0, 0, 627, 811, 0,
	631, 0, 470, 0, 0, 875, 0, 0, 0, 440,
	0, 0, 366, 0, 0, 0, 815, 0, 423, 403,
	888, 2111, 0, 421, 371, 455, 411, 461, 442, 469,
	417, 412, 294, 443, 333, 384, 306, 308, 328, 335,
	337, 341, 342, 393, 394, 406, 428, 445, 446, 447,
	332, 316, 422, 317, 352, 318, 295, 324, 322, 325,
	430, 326, 297, 407, 451, 0, 347, 418, 379, 298,
	378, 408, 450, 449, 307, 477, 483, 484, 573, 0,
	489, 660, 661, 662, 498, 0, 413, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 1825, 1824, 1826, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 655,
	872, 399, 596, 629, 630, 521, 0, 887, 867, 869,
	870, 874, 878, 879, 880, 881, 882, 884, 886, 890,
	654, 0, 575, 590, 658, 589, 651, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 889, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 819, 571, 572, 389, 390, 391, 392, 876, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 663, 0, 620, 621,
	3699, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 898, 871, 897,
	899, 900, 896, 901, 902, 883, 774, 0, 826, 894,
	893, 895, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	652, 649, 453, 653, 781, 293, 527, 370, 0, 414,
	343, 592, 593, 0, 644, 860, 833, 834, 835, 771,
	836, 830, 831, 772, 832, 861, 824, 857, 858, 800,
	827, 837, 856, 838, 859, 862, 863, 903, 904, 844,
	828, 257, 905, 841, 864, 855, 854, 839, 825, 865,
	866, 807, 802, 842, 843, 829, 848, 849, 850, 773,
	821, 822, 823, 845, 846, 803, 804, 805, 806, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 650,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 851, 639, 438, 439, 0,
	847, 642, 643, 640, 374, 425, 444, 432, 817, 656,
	517, 518, 657, 628, 0, 766, 0, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 769, 0, 0, 0, 336, 1876, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 808, 568, 519, 434,
	385, 586, 585, 0, 0, 877, 885, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 2095, 0, 0,
	761, 0, 0, 798, 853, 852, 785, 795, 0, 0,
	309, 229, 514, 634, 516, 515, 786, 0, 787, 791,
	794, 790, 788, 789, 0, 868, 0, 0, 0, 0,
	0, 0, 753, 765, 0, 770, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 762,
	763, 0, 0, 0, 0, 818, 0, 764, 0, 0,
	2096, 792, 796, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 793, 816, 820, 330, 891, 814,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 892, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 811,
	0, 631, 0, 470, 0, 0, 875, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 815, 0, 423,
	403, 888, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 872, 399, 596, 629, 630, 521, 0, 887, 867,
	869, 870, 874, 878, 879, 880, 881, 882, 884, 886,
	890, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 889, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 819, 571, 572, 389, 390, 391, 392, 876,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 898, 871,
	897, 899, 900, 896, 901, 902, 883, 774, 0, 826,
	894, 893, 895, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 781, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 860, 833, 834, 835,
	771, 836, 830, 831, 772, 832, 861, 824, 857, 858,
	800, 827, 837, 856, 838, 859, 862, 863, 903, 904,
	844, 828, 257, 905, 841, 864, 855, 854, 839, 825,
	865, 866, 807, 802, 842, 843, 829, 848, 849, 850,
	773, 821, 822, 823, 845, 846, 803, 804, 805, 806,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 851, 639, 438, 439,
	0, 847, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 0, 766, 206, 817, 0,
	0, 0, 0, 0, 0, 0, 0, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 769, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 1295, 568, 519, 434,
	385, 586, 585, 0, 0, 877, 885, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	761, 0, 0, 798, 853, 852, 785, 795, 0, 0,
	309, 229, 514, 634, 516, 515, 786, 0, 787, 791,
	794, 790, 788, 789, 0, 868, 0, 0, 0, 0,
	0, 0, 753, 765, 0, 770, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 762,
	763, 0, 0, 0, 0, 818, 0, 764, 0, 0,
	813, 792, 796, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 793, 816, 820, 330, 891, 814,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 892, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 811,
	0, 631, 0, 470, 0, 0, 875, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 815, 0, 423,
	403, 888, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 872, 399, 596, 629, 630, 521, 0, 887, 867,
	869, 870, 874, 878, 879, 880, 881, 882, 884, 886,
	890, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 889, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 819, 571, 572, 389, 390, 391, 392, 876,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 898, 871,
	897, 899, 900, 896, 901, 902, 883, 774, 0, 826,
	894, 893, 895, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 781, 293, 527, 370, 169,
	414, 343, 592, 593, 0, 644, 860, 833, 834, 835,
	771, 836, 830, 831, 772, 832, 861, 824, 857, 858,
	800, 827, 837, 856, 838, 859, 862, 863, 903, 904,
	844, 828, 257, 905, 841, 864, 855, 854, 839, 825,
	865, 866, 807, 802, 842, 843, 829, 848, 849, 850,
	773, 821, 822, 823, 845, 846, 803, 804, 805, 806,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 851, 639, 438, 439,
	0, 847, 642, 643, 640, 374, 425, 444, 432, 817,
	656, 517, 518, 657, 628, 0, 766, 0, 401, 0,
	0, 532, 565, 554, 638, 520, 0, 0, 0, 0,
	0, 0, 769, 0, 0, 0, 336, 4117, 0, 369,
	569, 551, 561, 552, 537, 538, 539, 546, 348, 540,
	541, 542, 512, 543, 513, 544, 545, 808, 568, 519,
	434, 385, 586, 585, 0, 0, 877, 885, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 761, 0, 0, 798, 853, 852, 785, 795, 0,
	0, 309, 229, 514, 634, 516, 515, 786, 0, 787,
	791, 794, 790, 788, 789, 0, 868, 0, 0, 0,
	0, 0, 0, 753, 765, 0, 770, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	762, 763, 0, 0, 0, 0, 818, 0, 764, 0,
	0, 813, 792, 796, 0, 0, 0, 0, 299, 441,
	460, 310, 429, 473, 315, 437, 452, 305, 400, 426,
	0, 0, 301, 458, 436, 382, 359, 360, 300, 0,
	420, 334, 350, 331, 398, 793, 816, 820, 330, 891,
	814, 468, 303, 0, 467, 397, 454, 459, 383, 376,
	0, 302, 456, 381, 375, 363, 340, 892, 364, 365,
	354, 409, 373, 410, 355, 387, 386, 388, 0, 0,
	0, 0, 0, 496, 497, 0, 0, 645, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 627,
	811, 0, 631, 0, 470, 0, 0, 875, 0, 0,
	0, 440, 0, 0, 366, 0, 0, 0, 815, 0,
	423, 403, 888, 0, 0, 421, 371, 455, 411, 461,
	442, 469, 417, 412, 294, 443, 333, 384, 306, 308,
	328, 335, 337, 341, 342, 393, 394, 406, 428, 445,
	446, 447, 332, 316, 422, 317, 352, 318, 295, 324,
	322, 325, 430, 326, 297, 407, 451, 0, 347, 418,
	379, 298, 378, 408, 450, 449, 307, 477, 483, 484,
	573, 0, 489, 660, 661, 662, 498, 0, 413, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 655, 872, 399, 596, 629, 630, 521, 0, 887,
	867, 869, 870, 874, 878, 879, 880, 881, 882, 884,
	886, 890, 654, 0, 575, 590, 658, 589, 651, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 889, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 819, 571, 572, 389, 390, 391, 392,
	876, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 663, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 898,
	871, 897, 899, 900, 896, 901, 902, 883, 774, 0,
	826, 894, 893, 895, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 652, 649, 453, 653, 781, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 860, 833, 834,
	835, 771, 836, 830, 831, 772, 832, 861, 824, 857,
	858, 800, 827, 837, 856, 838, 859, 862, 863, 903,
	904, 844, 828, 257, 905, 841, 864, 855, 854, 839,
	825, 865, 866, 807, 802, 842, 843, 829, 848, 849,
	850, 773, 821, 822, 823, 845, 846, 803, 804, 805,
	806, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 650, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 851, 639, 438,
	439, 0, 847, 642, 643, 640, 374, 425, 444, 432,
	817, 656, 517, 518, 657, 628, 0, 766, 0, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 769, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 808, 568,
	519, 434, 385, 586, 585, 0, 0, 877, 885, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 0,
	0, 0, 761, 0, 0, 798, 853, 852, 785, 795,
	0, 0, 309, 229, 514, 634, 516, 515, 786, 0,
	787, 791, 794, 790, 788, 789, 0, 868, 0, 0,
	0, 0, 0, 0, 753, 765, 0, 770, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 762, 763, 0, 0, 0, 0, 818, 0, 764,
	0, 0, 813, 792, 796, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 793, 816, 820, 330,
	891, 814, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 892, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 811, 0, 631, 0, 470, 0, 0, 875, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 815,
	0, 423, 403, 888, 3995, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 872, 399, 596, 629, 630, 521, 0,
	887, 867, 869, 870, 874, 878, 879, 880, 881, 882,
	884, 886, 890, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 889, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 819, 571, 572, 389, 390, 391,
	392, 876, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	898, 871, 897, 899, 900, 896, 901, 902, 883, 774,
	0, 826, 894, 893, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 781, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 860, 833,
	834, 835, 771, 836, 830, 831, 772, 832, 861, 824,
	857, 858, 800, 827, 837, 856, 838, 859, 862, 863,
	903, 904, 844, 828, 257, 905, 841, 864, 855, 854,
	839, 825, 865, 866, 807, 802, 842, 843, 829, 848,
	849, 850, 773, 821, 822, 823, 845, 846, 803, 804,
	805, 806, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 851, 639,
	438, 439, 0, 847, 642, 643, 640, 374, 425, 444,
	432, 817, 656, 517, 518, 657, 628, 0, 766, 0,
	401, 0, 0, 532, 565, 554, 638, 520, 0, 0,
	0, 0, 0, 0, 769, 0, 0, 0, 336, 1876,
	0, 369, 569, 551, 561, 552, 537, 538, 539, 546,
	348, 540, 541, 542, 512, 543, 513, 544, 545, 808,
	568, 519, 434, 385, 586, 585, 0, 0, 877, 885,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 0, 761, 0, 0, 798, 853, 852, 785,
	795, 0, 0, 309, 229, 514, 634, 516, 515, 786,
	0, 787, 791, 794, 790, 788, 789, 0, 868, 0,
	0, 0, 0, 0, 0, 753, 765, 0, 770, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 762, 763, 0, 0, 0, 0, 818, 0,
	764, 0, 0, 813, 792, 796, 0, 0, 0, 0,
	299, 441, 460, 310, 429, 473, 315, 437, 452, 305,
	400, 426, 0, 0, 301, 458, 436, 382, 359, 360,
	300, 0, 420, 334, 350, 331, 398, 793, 816, 820,
	330, 891, 814, 468, 303, 0, 467, 397, 454, 459,
	383, 376, 0, 302, 456, 381, 375, 363, 340, 892,
	364, 365, 354, 409, 373, 410, 355, 387, 386, 388,
	0, 0, 0, 0, 0, 496, 497, 0, 0, 645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 811, 0, 631, 0, 470, 0, 0, 875,
	0, 0, 0, 440, 0, 0, 366, 0, 0, 0,
	815, 0, 423, 403, 888, 0, 0, 421, 371, 455,
	411, 461, 442, 469, 417, 412, 294, 443, 333, 384,
	306, 308, 328, 335, 337, 341, 342, 393, 394, 406,
	428, 445, 446, 447, 332, 316, 422, 317, 352, 318,
	295, 324, 322, 325, 430, 326, 297, 407, 451, 0,
	347, 418, 379, 298, 378, 408, 450, 449, 307, 477,
	483, 484, 573, 0, 489, 660, 661, 662, 498, 0,
	413, 503, 504, 505, 507, 508, 509, 510, 574, 591,
	558, 528, 491, 582, 525, 529, 530, 357, 594, 0,
	0, 0, 482, 367, 368, 0, 339, 338, 380, 416,
	345, 291, 292, 655, 872, 399, 596, 629, 630, 521,
	0, 887, 867, 869, 870, 874, 878, 879, 880, 881,
	882, 884, 886, 890, 654, 0, 575, 590, 658, 589,
	651, 405, 0, 427, 587, 534, 0, 579, 553, 0,
	580, 549, 584, 0, 523, 0, 435, 463, 475, 492,
	495, 524, 609, 610, 611, 296, 494, 613, 614, 615,
	616, 617, 618, 619, 612, 889, 556, 533, 559, 474,
	536, 535, 0, 0, 570, 819, 571, 572, 389, 390,
	391, 392, 876, 597, 314, 493, 415, 0, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 563, 560,
	663, 0, 620, 621, 0, 0, 487, 488, 344, 351,
	506, 353, 313, 404, 346, 472, 361, 0, 499, 564,
	500, 623, 626, 624, 625, 396, 356, 358, 431, 362,
	372, 419, 471, 402, 424, 311, 462, 433, 377, 550,
	577, 898, 871, 897, 899, 900, 896, 901, 902, 883,
	774, 0, 826, 894, 893, 895, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 604, 603,
	602, 601, 600, 599, 598, 0, 0, 547, 448, 323,
	285, 319, 320, 327, 652, 649, 453, 653, 781, 293,
	527, 370, 0, 414, 343, 592, 593, 0, 644, 860,
	833, 834, 835, 771, 836, 830, 831, 772, 832, 861,
	824, 857, 858, 800, 827, 837, 856, 838, 859, 862,
	863, 903, 904, 844, 828, 257, 905, 841, 864, 855,
	854, 839, 825, 865, 866, 807, 802, 842, 843, 829,
	848, 849, 850, 773, 821, 822, 823, 845, 846, 803,
	804, 805, 806, 0, 0, 0, 478, 479, 480, 502,
	0, 464, 526, 650, 0, 0, 0, 0, 0, 0,
	0, 576, 588, 622, 0, 632, 633, 635, 637, 851,
	639, 438, 439, 0, 847, 642, 643, 640, 374, 425,
	444, 432, 817, 656, 517, 518, 657, 628, 0, 766,
	0, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 769, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	808, 568, 519, 434, 385, 586, 585, 0, 0, 877,
	885, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 761, 0, 0, 798, 853, 852,
	785, 795, 0, 0, 309, 229, 514, 634, 516, 515,
	786, 0, 787, 791, 794, 790, 788, 789, 0, 868,
	0, 0, 0, 0, 0, 0, 753, 765, 0, 770,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 762, 763, 1590, 0, 0, 0, 818,
	0, 764, 0, 0, 813, 792, 796, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 793, 816,
	820, 330, 891, 814, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	892, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 811, 0, 631, 0, 470, 0, 0,
	875, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 815, 0, 423, 403, 888, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 872, 399, 596, 629, 630,
	521, 0, 887, 867, 869, 870, 874, 878, 879, 880,
	881, 882, 884, 886, 890, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 889, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 819, 571, 572, 389,
	390, 391, 392, 876, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 898, 871, 897, 899, 900, 896, 901, 902,
	883, 774, 0, 826, 894, 893, 895, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 781,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	860, 833, 834, 835, 771, 836, 830, 831, 772, 832,
	861, 824, 857, 858, 800, 827, 837, 856, 838, 859,
	862, 863, 903, 904, 844, 828, 257, 905, 841, 864,
	855, 854, 839, 825, 865, 866, 807, 802, 842, 843,
	829, 848, 849, 850, 773, 821, 822, 823, 845, 846,
	803, 804, 805, 806, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	851, 639, 438, 439, 0, 847, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 817,
	766, 0, 2268, 0, 0, 0, 0, 0, 401, 0,
	0, 532, 565, 554, 638, 520, 0, 0, 0, 0,
	0, 0, 769, 0, 0, 0, 336, 0, 0, 369,
	569, 551, 561, 552, 537, 538, 539, 546, 348, 540,
	541, 542, 512, 543, 513, 544, 545, 808, 568, 519,
	434, 385, 586, 585, 0, 0, 877, 885, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 761, 0, 0, 798, 853, 852, 785, 795, 0,
	0, 309, 229, 514, 634, 516, 515, 786, 0, 787,
	791, 794, 790, 788, 789, 0, 868, 0, 0, 0,
	0, 0, 0, 753, 765, 0, 770, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	762, 763, 0, 0, 0, 0, 818, 0, 764, 0,
	0, 813, 792, 796, 0, 0, 0, 0, 299, 441,
	460, 310, 429, 473, 315, 437, 452, 305, 400, 426,
	0, 0, 301, 458, 436, 382, 359, 360, 300, 0,
	420, 334, 350, 331, 398, 793, 816, 820, 330, 891,
	814, 468, 303, 0, 467, 397, 454, 459, 383, 376,
	0, 302, 456, 381, 375, 363, 340, 892, 364, 365,
	354, 409, 373, 410, 355, 387, 386, 388, 0, 0,
	0, 0, 0, 496, 497, 0, 0, 645, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 627,
	811, 0, 631, 0, 470, 0, 0, 875, 0, 0,
	0, 440, 0, 0, 366, 0, 0, 0, 815, 0,
	423, 403, 888, 0, 0, 421, 371, 455, 411, 461,
	442, 469, 417, 412, 294, 443, 333, 384, 306, 308,
	328, 335, 337, 341, 342, 393, 394, 406, 428, 445,
	446, 447, 332, 316, 422, 317, 352, 318, 295, 324,
	322, 325, 430, 326, 297, 407, 451, 0, 347, 418,
	379, 298, 378, 408, 450, 449, 307, 477, 483, 484,
	573, 0, 489, 660, 661, 662, 498, 0, 413, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 655, 872, 399, 596, 629, 630, 521, 0, 887,
	867, 869, 870, 874, 878, 879, 880, 881, 882, 884,
	886, 890, 654, 0, 575, 590, 658, 589, 651, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 889, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 819, 571, 572, 389, 390, 391, 392,
	876, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 663, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 898,
	871, 897, 899, 900, 896, 901, 902, 883, 774, 0,
	826, 894, 893, 895, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 652, 649, 453, 653, 781, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 860, 833, 834,
	835, 771, 836, 830, 831, 772, 832, 861, 824, 857,
	858, 800, 827, 837, 856, 838, 859, 862, 863, 903,
	904, 844, 828, 257, 905, 841, 864, 855, 854, 839,
	825, 865, 866, 807, 802, 842, 843, 829, 848, 849,
	850, 773, 821, 822, 823, 845, 846, 803, 804, 805,
	806, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 650, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 851, 639, 438,
	439, 0, 847, 642, 643, 640, 374, 425, 444, 432,
	817, 656, 517, 518, 657, 628, 0, 766, 0, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 769, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 808, 568,
	519, 434, 385, 586, 585, 0, 0, 877, 885, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 0,
	0, 0, 761, 0, 0, 798, 853, 852, 785, 795,
	0, 0, 309, 229, 514, 634, 516, 515, 786, 0,
	787, 791, 794, 790, 788, 789, 0, 868, 0, 0,
	0, 0, 0, 0, 753, 765, 0, 770, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 762, 763, 1869, 0, 0, 0, 818, 0, 764,
	0, 0, 813, 792, 796, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 793, 816, 820, 330,
	891, 814, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 892, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 811, 0, 631, 0, 470, 0, 0, 875, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 815,
	0, 423, 403, 888, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 872, 399, 596, 629, 630, 521, 0,
	887, 867, 869, 870, 874, 878, 879, 880, 881, 882,
	884, 886, 890, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 889, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 819, 571, 572, 389, 390, 391,
	392, 876, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	898, 871, 897, 899, 900, 896, 901, 902, 883, 774,
	0, 826, 894, 893, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 781, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 860, 833,
	834, 835, 771, 836, 830, 831, 772, 832, 861, 824,
	857, 858, 800, 827, 837, 856, 838, 859, 862, 863,
	903, 904, 844, 828, 257, 905, 841, 864, 855, 854,
	839, 825, 865, 866, 807, 802, 842, 843, 829, 848,
	849, 850, 773, 821, 822, 823, 845, 846, 803, 804,
	805, 806, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 851, 639,
	438, 439, 0, 847, 642, 643, 640, 374, 425, 444,
	432, 817, 656, 517, 518, 657, 628, 0, 766, 0,
	401, 0, 0, 532, 565, 554, 638, 520, 0, 0,
	0, 0, 0, 0, 769, 0, 0, 0, 336, 0,
	0, 369, 569, 551, 561, 552, 537, 538, 539, 546,
	348, 540, 541, 542, 512, 543, 513, 544, 545, 808,
	568, 519, 434, 385, 586, 585, 0, 0, 877, 885,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 0, 761, 0, 0, 798, 853, 852, 785,
	795, 0, 0, 309, 229, 514, 634, 516, 515, 786,
	0, 787, 791, 794, 790, 788, 789, 0, 868, 0,
	0, 0, 0, 0, 0, 753, 765, 0, 770, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 762, 763, 0, 0, 0, 0, 818, 0,
	764, 0, 0, 813, 792, 796, 0, 0, 0, 0,
	299, 441, 460, 310, 429, 473, 315, 437, 452, 305,
	400, 426, 0, 0, 301, 458, 436, 382, 359, 360,
	300, 0, 420, 334, 350, 331, 398, 793, 816, 820,
	330, 891, 814, 468, 303, 0, 467, 397, 454, 459,
	383, 376, 0, 302, 456, 381, 375, 363, 340, 892,
	364, 365, 354, 409, 373, 410, 355, 387, 386, 388,
	0, 0, 0, 0, 0, 496, 497, 0, 0, 645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 811, 0, 631, 0, 470, 0, 0, 875,
	0, 0, 0, 440, 0, 0, 366, 0, 0, 0,
	815, 0, 423, 403, 888, 0, 0, 421, 371, 455,
	411, 461, 442, 469, 417, 412, 294, 443, 333, 384,
	306, 308, 328, 335, 337, 341, 342, 393, 394, 406,
	428, 445, 446, 447, 332, 316, 422, 317, 352, 318,
	295, 324, 322, 325, 430, 326, 297, 407, 451, 0,
	347, 418, 379, 298, 378, 408, 450, 449, 307, 477,
	483, 484, 573, 0, 489, 660, 661, 662, 498, 0,
	413, 503, 504, 505, 507, 508, 509, 510, 574, 591,
	558, 528, 491, 582, 525, 529, 530, 357, 594, 0,
	0, 0, 482, 367, 368, 0, 339, 338, 380, 416,
	345, 291, 292, 655, 872, 399, 596, 629, 630, 521,
	0, 887, 867, 869, 870, 874, 878, 879, 880, 881,
	882, 884, 886, 890, 654, 0, 575, 590, 658, 589,
	651, 405, 0, 427, 587, 534, 0, 579, 553, 0,
	580, 549, 584, 0, 523, 0, 435, 463, 475, 492,
	495, 524, 609, 610, 611, 296, 494, 613, 614, 615,
	616, 617, 618, 619, 612, 889, 556, 533, 559, 474,
	536, 535, 0, 0, 570, 819, 571, 572, 389, 390,
	391, 392, 876, 597, 314, 493, 415, 0, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 563, 560,
	663, 0, 620, 621, 0, 0, 487, 488, 344, 351,
	506, 353, 313, 404, 346, 472, 361, 0, 499, 564,
	500, 623, 626, 624, 625, 396, 356, 358, 431, 362,
	372, 419, 471, 402, 424, 311, 462, 433, 377, 550,
	577, 898, 871, 897, 899, 900, 896, 901, 902, 883,
	774, 0, 826, 894, 893, 895, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 604, 603,
	602, 601, 600, 599, 598, 0, 0, 547, 448, 323,
	285, 319, 320, 327, 652, 649, 453, 653, 781, 293,
	527, 370, 0, 414, 343, 592, 593, 0, 644, 860,
	833, 834, 835, 771, 836, 830, 831, 772, 832, 861,
	824, 857, 858, 800, 827, 837, 856, 838, 859, 862,
	863, 903, 904, 844, 828, 257, 905, 841, 864, 855,
	854, 839, 825, 865, 866, 807, 802, 842, 843, 829,
	848, 849, 850, 773, 821, 822, 823, 845, 846, 803,
	804, 805, 806, 0, 0, 0, 478, 479, 480, 502,
	0, 464, 526, 650, 0, 0, 0, 0, 0, 0,
	0, 576, 588, 622, 0, 632, 633, 635, 637, 851,
	639, 438, 439, 0, 847, 642, 643, 640, 374, 425,
	444, 432, 817, 656, 517, 518, 657, 628, 0, 766,
	0, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 769, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	808, 568, 519, 434, 385, 586, 585, 0, 0, 877,
	885, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 761, 0, 0, 798, 853, 852,
	785, 795, 0, 0, 309, 229, 514, 634, 516, 515,
	786, 0, 787, 791, 794, 790, 788, 789, 0, 868,
	0, 0, 0, 0, 0, 0, 753, 765, 0, 770,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 762, 763, 0, 0, 0, 0, 818,
	0, 764, 0, 0, 813, 792, 796, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 793, 816,
	820, 330, 891, 814, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	892, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 811, 0, 631, 0, 470, 0, 0,
	875, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 815, 0, 423, 403, 888, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 872, 399, 596, 629, 630,
	521, 0, 887, 867, 869, 870, 874, 878, 879, 880,
	881, 882, 884, 886, 890, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 889, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 819, 571, 572, 389,
	390, 391, 392, 876, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 898, 871, 897, 899, 900, 896, 901, 902,
	883, 774, 0, 826, 894, 893, 895, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 781,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	860, 833, 834, 835, 771, 836, 830, 831, 772, 832,
	861, 824, 857, 858, 800, 827, 837, 856, 838, 859,
	862, 863, 903, 904, 844, 828, 257, 905, 841, 864,
	855, 854, 839, 825, 865, 866, 807, 802, 842, 843,
	829, 848, 849, 850, 773, 821, 822, 823, 845, 846,
	803, 804, 805, 806, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	851, 639, 438, 439, 0, 3564, 642, 3565, 3566, 374,
	425, 444, 432, 817, 656, 517, 518, 657, 628, 0,
	766, 0, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 0, 0, 0, 0, 0, 769, 0, 0, 0,
	336, 0, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 808, 568, 519, 434, 385, 586, 585, 0, 0,
	877, 885, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 761, 0, 0, 798, 853,
	852, 785, 795, 0, 0, 309, 229, 514, 634, 516,
	515, 2747, 0, 2748, 791, 794, 790, 788, 789, 0,
	868, 0, 0, 0, 0, 0, 0, 753, 765, 0,
	770, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 762, 763, 0, 0, 0, 0,
	818, 0, 764, 0, 0, 813, 792, 796, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 301, 458, 436, 382,
	359, 360, 300, 0, 420, 334, 350, 331, 398, 793,
	816, 820, 330, 891, 814, 468, 303, 0, 467, 397,
	454, 459, 383, 376, 0, 302, 456, 381, 375, 363,
	340, 892, 364, 365, 354, 409, 373, 410, 355, 387,
	386, 388, 0, 0, 0, 0, 0, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 811, 0, 631, 0, 470, 0,
	0, 875, 0, 0, 0, 440, 0, 0, 366, 0,
	0, 0, 815, 0, 423, 403, 888, 0, 0, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 0, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 660, 661, 662,
	498, 0, 413, 503, 504, 505, 507, 508, 509, 510,
	574, 591, 558, 528, 491, 582, 525, 529, 530, 357,
	594, 0, 0, 0, 482, 367, 368, 0, 339, 338,
	380, 416, 345, 291, 292, 655, 872, 399, 596, 629,
	630, 521, 0, 887, 867, 869, 870, 874, 878, 879,
	880, 881, 882, 884, 886, 890, 654, 0, 575, 590,
	658, 589, 651, 405, 0, 427, 587, 534, 0, 579,
	553, 0, 580, 549, 584, 0, 523, 0, 435, 463,
	475, 492, 495, 524, 609, 610, 611, 296, 494, 613,
	614, 615, 616, 617, 618, 619, 612, 889, 556, 533,
	559, 474, 536, 535, 0, 0, 570, 819, 571, 572,
	389, 390, 391, 392, 876, 597, 314, 493, 415, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	563, 560, 663, 0, 620, 621, 0, 0, 487, 488,
	344, 351, 506, 353, 313, 404, 346, 472, 361, 0,
	499, 564, 500, 623, 626, 624, 625, 396, 356, 358,
	431, 362, 372, 419, 471, 402, 424, 311, 462, 433,
	377, 550, 577, 898, 871, 897, 899, 900, 896, 901,
	902, 883, 774, 0, 826, 894, 893, 895, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	604, 603, 602, 601, 600, 599, 598, 0, 0, 547,
	448, 323, 285, 319, 320, 327, 652, 649, 453, 653,
	781, 293, 527, 370, 0, 414, 343, 592, 593, 0,
	644, 860, 833, 834, 835, 771, 836, 830, 831, 772,
	832, 861, 824, 857, 858, 800, 827, 837, 856, 838,
	859, 862, 863, 903, 904, 844, 828, 257, 905, 841,
	864, 855, 854, 839, 825, 865, 866, 807, 802, 842,
	843, 829, 848, 849, 850, 773, 821, 822, 823, 845,
	846, 803, 804, 805, 806, 0, 0, 0, 478, 479,
	480, 502, 0, 464, 526, 650, 0, 0, 0, 0,
	0, 0, 0, 576, 588, 622, 0, 632, 633, 635,
	637, 851, 639, 438, 439, 0, 847, 642, 643, 640,
	374, 425, 444, 432, 817, 656, 517, 518, 657, 628,
	0, 766, 0, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 1734, 0, 0, 0, 769, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 808, 568, 519, 434, 385, 586, 585, 0,
	0, 877, 885, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 761, 0, 0, 798,
	853, 852, 785, 795, 0, 0, 309, 229, 514, 634,
	516, 515, 786, 0, 787, 791, 794, 790, 788, 789,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 765,
	0, 770, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 762, 763, 0, 0, 0,
	0, 818, 0, 764, 0, 0, 813, 792, 796, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	793, 816, 820, 330, 891, 814, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 892, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 811, 0, 631, 0, 470,
	0, 0, 875, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 815, 0, 423, 403, 888, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 1735, 1736, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 872, 399, 596,
	629, 630, 521, 0, 887, 867, 869, 870, 874, 878,
	879, 880, 881, 882, 884, 886, 890, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 889, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 819, 571,
	572, 389, 390, 391, 392, 876, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 898, 871, 897, 899, 900, 896,
	901, 902, 883, 774, 0, 826, 894, 893, 895, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 781, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 860, 833, 834, 835, 771, 836, 830, 831,
	772, 832, 861, 824, 857, 858, 800, 827, 837, 856,
	838, 859, 862, 863, 903, 904, 844, 828, 257, 905,
	841, 864, 855, 854, 839, 825, 865, 866, 807, 802,
	842, 843, 829, 848, 849, 850, 773, 821, 822, 823,
	845, 846, 803, 804, 805, 806, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 851, 639, 438, 439, 0, 847, 642, 643,
	640, 374, 425, 444, 432, 817, 656, 517, 518, 657,
	628, 0, 766, 0, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 769, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 808, 568, 519, 434, 385, 586, 585,
	0, 0, 877, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 0, 761, 0, 0,
	798, 853, 852, 785, 795, 0, 0, 309, 229, 514,
	634, 516, 515, 786, 0, 787, 791, 794, 790, 788,
	789, 0, 868, 0, 0, 0, 0, 0, 0, 0,
	765, 0, 770, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 762, 763, 0, 0,
	0, 0, 818, 0, 764, 0, 0, 813, 792, 796,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 793, 816, 820, 330, 891, 814, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 892, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 811, 0, 631, 0,
	470, 0, 0, 875, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 815, 0, 423, 403, 888, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 660,
	661, 662, 498, 0, 413, 503, 504, 505, 507, 508,
	509, 510, 574, 591, 558, 528, 491, 582, 525, 529,
	530, 357, 594, 0, 0, 0, 482, 367, 368, 0,
	339, 338, 380, 416, 345, 291, 292, 655, 872, 399,
	596, 629, 630, 521, 0, 887, 867, 869, 870, 874,
	878, 879, 880, 881, 882, 884, 886, 890, 654, 0,
	575, 590, 658, 589, 651, 405, 0, 427, 587, 534,
	0, 579, 553, 0, 580, 549, 584, 0, 523, 0,
	435, 463, 475, 492, 495, 524, 609, 610, 611, 296,
	494, 613, 614, 615, 616, 617, 618, 619, 612, 889,
	556, 533, 559, 474, 536, 535, 0, 0, 570, 819,
	571, 572, 389, 390, 391, 392, 876, 597, 314, 493,
	415, 0, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 560, 663, 0, 620, 621, 0, 0,
	487, 488, 344, 351, 506, 353, 313, 404, 346, 472,
	361, 0, 499, 564, 500, 623, 626, 624, 625, 396,
	356, 358, 431, 362, 372, 419, 471, 402, 424, 311,
	462, 433, 377, 550, 577, 898, 871, 897, 899, 900,
	896, 901, 902, 883, 774, 0, 826, 894, 893, 895,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 604, 603, 602, 601, 600, 599, 598, 0,
	0, 547, 448, 323, 285, 319, 320, 327, 652, 649,
	453, 653, 781, 293, 527, 370, 0, 414, 343, 592,
	593, 0, 644, 860, 833, 834, 835, 771, 836, 830,
	831, 772, 832, 861, 824, 857, 858, 800, 827, 837,
	856, 838, 859, 862, 863, 903, 904, 844, 828, 257,
	905, 841, 864, 855, 854, 839, 825, 865, 866, 807,
	802, 842, 843, 829, 848, 849, 850, 773, 821, 822,
	823, 845, 846, 803, 804, 805, 806, 0, 0, 0,
	478, 479, 480, 502, 0, 464, 526, 650, 0, 0,
	0, 0, 0, 0, 0, 576, 588, 622, 0, 632,
	633, 635, 637, 851, 639, 438, 439, 0, 847, 642,
	643, 640, 374, 425, 444, 432, 817, 656, 517, 518,
	657, 628, 0, 766, 0, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 769,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 808, 568, 519, 434, 385, 586,
	585, 0, 0, 877, 885, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 0, 0,
	0, 798, 853, 852, 785, 795, 0, 0, 309, 229,
	514, 634, 516, 515, 786, 0, 787, 791, 794, 790,
	788, 789, 0, 868, 0, 0, 0, 0, 0, 0,
	753, 765, 0, 770, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 762, 763, 0,
	0, 0, 0, 818, 0, 764, 0, 0, 813, 792,
	796, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 793, 816, 820, 330, 891, 814, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 892, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 811, 0, 631,
	0, 470, 0, 0, 875, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 815, 0, 423, 403, 888,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 872,
	399, 596, 629, 630, 521, 0, 887, 867, 869, 870,
	874, 878, 879, 880, 881, 882, 884, 886, 890, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	889, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	819, 571, 572, 389, 390, 391, 392, 876, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 898, 871, 897, 899,
	900, 896, 901, 902, 883, 774, 0, 826, 894, 893,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 781, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 860, 833, 834, 835, 771, 836,
	830, 831, 772, 832, 861, 824, 857, 858, 800, 827,
	837, 856, 838, 859, 862, 863, 903, 904, 844, 828,
	257, 905, 841, 864, 855, 854, 839, 825, 865, 866,
	807, 802, 842, 843, 829, 848, 849, 850, 773, 821,
	822, 823, 845, 846, 803, 804, 805, 806, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 851, 639, 438, 439, 0, 847,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 0, 766, 206, 64, 197, 168, 0,
	0, 0, 0, 0, 0, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 198, 0, 0, 0, 0, 0,
	0, 189, 0, 336, 0, 199, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 140, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 167,
	195, 204, 196, 124, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 221, 0, 0, 0, 440, 0,
	0, 366, 194, 188, 187, 486, 0, 423, 403, 233,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	606, 607, 608, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 465, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 224, 578, 581, 511, 234,
	0, 575, 590, 548, 589, 235, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 138, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 232, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 65, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 239,
	304, 453, 240, 0, 293, 527, 370, 169, 414, 343,
	592, 593, 61, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 236, 45,
	222, 225, 227, 226, 0, 62, 576, 588, 622, 5,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 143, 237, 517,
	518, 238, 628, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 140, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 2422, 2425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 2426, 470,
	0, 0, 0, 2421, 0, 2420, 440, 2418, 2423, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 2424, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 169, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1331, 0, 0, 228, 0, 0,
	785, 795, 0, 0, 309, 229, 514, 634, 516, 515,
	786, 0, 787, 791, 794, 790, 788, 789, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 792, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 793, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 206,
	64, 197, 168, 0, 0, 0, 0, 0, 0, 401,
	682, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 689, 0, 0, 0, 0, 0,
	0, 0, 688, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 686, 687, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 683, 685, 314, 493, 415, 697, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 169, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 1139, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1124, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 2585, 2588, 2589, 2590, 2591, 2592, 2593, 0, 2598,
	2594, 2595, 2596, 2597, 0, 2580, 2581, 2582, 2583, 1122,
	2564, 2586, 0, 2565, 397, 2566, 2567, 2568, 2569, 1126,
	2570, 2571, 2572, 2573, 2574, 2577, 2578, 2575, 2576, 2584,
	409, 373, 410, 355, 387, 386, 388, 1150, 1152, 1154,
	1156, 1159, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 2579, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 2587, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 2422, 2425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	2426, 470, 0, 0, 0, 2421, 0, 2420, 440, 2418,
	2423, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 2424, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 2443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 2442, 470,
	0, 0, 0, 2448, 2445, 2447, 440, 0, 2446, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 2440,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 2443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 2442, 470, 0, 0,
	0, 2448, 2445, 2447, 440, 0, 2446, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 2135, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 2136, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	1260, 1261, 1262, 1259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 206, 656, 517, 518, 657, 628, 0, 0, 0,
	0, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	140, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 2185, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 169, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 206, 656, 517, 518, 657, 628, 0,
	0, 0, 0, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 140, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 2170, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 169, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	1050, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 1057, 1058,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1061,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 1044, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 1031, 468, 303, 1030, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 1048, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 1049, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 1052, 571, 572, 389,
	390, 391, 392, 349, 597, 1047, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 1059, 1045, 1055, 1046,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 1056,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 1043,
	425, 444, 432, 206, 656, 517, 518, 657, 628, 0,
	0, 0, 0, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 140, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2067, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 169, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 1057, 1058,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1061,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 1031, 468, 303, 1030, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 1059, 2088, 1055, 2089,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 1056,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 2975,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 2978, 0, 0, 0, 2977,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 1556, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 1554, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1552, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 1550, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 1554, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1552, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4064, 0, 228,
	853, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	1554, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1552, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 2487, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 979, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 1554, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1764, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 2526, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 2528, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 2135, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 2136, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	3194, 3196, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 2549, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 1554, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 670, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 669, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 853, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4041, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	3800, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 3934,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1778, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3815,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 3726, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	3226, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3244, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2067, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 3441, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3354, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 1554, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 2528, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 2894, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	2645, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2607, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 2605, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 2375,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 1918, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	2049, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 1554, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 1954, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 1583, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 670, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 680, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 979, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 3172, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 1904, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 1533, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 1531, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 1410, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 748,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 705,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 706, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 1139, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 1124, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 0, 0, 0, 0, 0, 0, 1147,
	1151, 1153, 1155, 1157, 1158, 1160, 0, 1165, 1161, 1162,
	1163, 1164, 0, 1142, 1143, 1144, 1145, 1122, 1123, 1148,
	0, 1125, 0, 1127, 1128, 1129, 1130, 1126, 1131, 1132,
	1133, 1134, 1135, 1138, 1140, 1136, 1137, 1146, 727, 726,
	733, 723, 0, 0, 0, 1150, 1152, 1154, 1156, 1159,
	0, 730, 731, 0, 732, 736, 0, 0, 717, 2036,
	0, 0, 727, 726, 733, 723, 0, 0, 741, 0,
	0, 0, 0, 0, 0, 730, 731, 0, 732, 736,
	0, 0, 717, 0, 0, 1141, 0, 0, 0, 0,
	0, 0, 741, 0, 0, 2039, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 745, 0, 0, 747, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 745, 3821,
	0, 747, 0, 0, 0, 0, 746, 0, 0, 2013,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2029, 0, 0,
	2036, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2039, 0, 0, 0,
	0, 0, 718, 720, 719, 0, 0, 0, 0, 0,
	0, 0, 0, 725, 0, 0, 0, 0, 0, 2036,
	0, 0, 0, 0, 0, 729, 718, 720, 719, 0,
	0, 0, 744, 0, 0, 0, 0, 725, 0, 722,
	0, 2017, 0, 712, 0, 0, 0, 0, 0, 729,
	2013, 0, 2023, 0, 0, 2039, 744, 0, 0, 0,
	0, 0, 0, 722, 0, 0, 0, 0, 0, 0,
	0, 0, 2011, 2045, 0, 0, 2012, 2014, 2016, 0,
	2018, 2019, 2020, 2024, 2025, 2026, 2028, 2031, 2032, 2033,
	0, 0, 0, 0, 0, 0, 0, 2021, 2030, 2022,
	0, 0, 0, 1801, 0, 0, 0, 0, 0, 2013,
	0, 0, 0, 0, 3792, 1149, 0, 0, 2029, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2037, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 724, 728, 734, 0,
	735, 737, 0, 0, 738, 739, 740, 0, 0, 742,
	743, 0, 0, 0, 0, 0, 0, 2029, 0, 0,
	724, 728, 734, 2034, 735, 737, 0, 0, 738, 739,
	740, 0, 0, 742, 743, 0, 0, 0, 0, 0,
	2010, 0, 2017, 0, 0, 0, 0, 2009, 0, 0,
	0, 0, 0, 2023, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2027, 0, 2011, 2045, 0, 0, 2012, 2014, 2016,
	2015, 2018, 2019, 2020, 2024, 2025, 2026, 2028, 2031, 2032,
	2033, 0, 0, 0, 0, 0, 0, 0, 2021, 2030,
	2022, 2017, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2023, 0, 0, 0, 1797, 0, 0, 0,
	0, 0, 0, 1794, 0, 0, 0, 1796, 1793, 1795,
	1799, 1800, 2011, 2045, 2037, 1798, 2012, 2014, 2016, 0,
	2018, 2019, 2020, 2024, 2025, 2026, 2028, 2031, 2032, 2033,
	0, 0, 0, 0, 0, 0, 0, 2021, 2030, 2022,
	0, 0, 0, 0, 0, 721, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2034, 0, 0, 0, 3653, 721,
	0, 0, 0, 2037, 0, 0, 0, 0, 0, 0,
	0, 2010, 0, 0, 0, 0, 0, 0, 2009, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2027, 0, 0, 0, 0, 0, 0, 0,
	0, 2015, 0, 2034, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2010, 0, 0, 0, 0, 0, 0, 2009, 1782, 1783,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1804,
	1805, 1806, 1807, 1808, 1809, 1802, 1803, 0, 0, 0,
	0, 2027, 0, 0, 0, 0, 0, 0, 0, 0,
	2015, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3653,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3653,
}

var yyPact = [...]int{
	333, -1000, -1000, -1000, -339, 15002, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 49486, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 464, 49486, -334, 30984, 47572, -1000, -1000, 2890, -1000,
	48210, 16936, 49486, 550, 548, 49486, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 961, -1000, 53952, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 897, 54645, 53314, 11147,
	-217, -1000, 1802, -38, 2647, 504, -201, -204, 1135, 1153,
	1140, 1015, 49486, 1095, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 204, 980, 48848,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4012, 246, 960, 980, 22048, 108,
	100, 1802, 453, -91, 366, -1000, 1585, 4125, 199, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11147, 11147, 15002, -383, 15002, 11147, 49486, 49486, -1000, -1000,
	-1000, -1000, -334, 48210, 897, 54645, 11147, 2647, 504, -201,
	-204, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -91, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 100, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 5048, -1000, 1637, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2381, 3203, 1631, 2645, 838, 47572,
	49486, -1000, 142, 838, -1000, -1000, -1000, 1802, 3631, -1000,
	49486, 49486, 233, 1924, -1000, 566, 547, 469, 621, 369,
	1629, -1000, -1000, -1000, -1000, -1000, -1000, 756, 3561, -1000,
	49486, 49486, 3231, 49486, -1000, 2358, 778, -1000, 54669, 3399,
	1475, 1024, 3243, -1000, -1000, 3202, -1000, 379, 372, 359,
	623, 442, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 355,
	-1000, 3462, -1000, -1000, 363, -1000, -1000, 422, -1000, -1000,
	-1000, 98, -1000, -1000, -1000, -1000, -1000, -1000, -14, -1000,
	-1000, 1221, 2743, 11147, 2757, -1000, 3481, 1646, -1000, -1000,
	-1000, 6654, 13711, 13711, 13711, 13711, 49486, -1000, -1000, 3053,
	11147, 3201, 3197, 3196, 3195, -1000, -1000, -1000, -1000, -1000,
	-1000, 3192, 1616, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2057, -1000, -1000, -1000, 14352, -1000, 3191, 3188,
	3187, 3186, 3185, 3184, 3183, 3182, 3180, 3177, 3161, 3158,
	3157, 3156, 2919, 16288, 3152, 2644, 2642, 3151, 3149, 3148,
	2635, 3147, 3146, 3145, 2919, 2919, 3144, 3142, 3135, 3134,
	3132, 3130, 3129, 3125, 3124, 3123, 3121, 3120, 3119, 3118,
	3112, 3106, 3105, 3104, 3102, 3101, 3099, 3096, 3093, 3090,
	3089, 3085, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1467, -1000, 3084, 3575,
	3001, -1000, 3438, 3429, 3426, 3424, -268, 3083, 2253, -1000,
	-1000, 102, 3559, 49486, -286, 49486, 425, -103, -108, -109,
	-1000, -66, -1000, -1000, 1110, -1000, 1075, 52676, 943, -1000,
	-1000, 49486, 884, 884, 884, 49486, 49486, 198, 956, 884,
	884, 884, 884, 884, 946, 884, 3480, 958, 957, 954,
	952, 884, -64, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1923, 1919, 3306, 1047, -1000, -1000, -1000, -1000, 1500, 49486,
	-1000, 3018, 425, -317, 1814, 1814, 3538, 3538, 3479, 3477,
	821, 789, 783, 1814, 622, -1000, 1825, 1825, 1825, 1825,
	1814, 507, 824, 3487, 3487, 191, 1825, 61, 1814, 1814,
	61, 1814, 1814, -1000, 1914, 285, -275, -1000, -1000, -1000,
	-1000, 1825, 1825, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3455, 3452, 897, 897, 49486, 897, 210, 49486, 897, 897,
	897, 49486, 917, -316, 19, 52038, 51400, 2369, 2358, 776,
	775, 1531, 1817, -1000, 1717, 49486, 49486, 1717, 1717, 25242,
	24604, -1000, 49486, -1000, 3575, 3001, 2905, 1625, 2902, 3001,
	-110, 425, 897, 897, 897, 897, 897, 332, 897, 897,
	897, 897, 897, 49486, 49486, 46934, 897, 897, 897, 897,
	9218, 1585, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15002, 2028, 2105, 195, -12,
	-311, 282, -1000, -1000, 49486, 3373, 343, -1000, -1000, -1000,
	3003, -1000, 3006, 3006, 3006, 3006, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3006, 3006, 3014, 3077,
	-1000, -1000, 3004, 3004, 3004, 3003, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3007, 3007, 3008, 3008, 3007, 49486, -128, -1000, -1000,
	11147, 49486, 3386, 444, 3076, 838, -1000, -1000, 49486, 318,
	446, 3575, 3384, 3487, 3529, -1000, -1000, 1607, 2252, 2630,
	-1000, 369, -1000, 459, 369, -1000, 583, 583, 1821, -1000,
	1182, -1000, -1000, -1000, -1000, -1000, -1000, 49486, -14, 417,
	-1000, -1000, 2601, 3062, -1000, 681, 1422, 1429, -1000, 329,
	4619, 39916, 2358, 39916, 49486, -1000, -1000, -1000, -1000, -1000,
	-1000, 87, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 341, -1000, 11147, 11147,
	11147, 11147, 11147, -1000, 1022, 13070, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 13711, 13711, 13711, 13711, 13711, 13711, 13711,
	13711, 13711, 13711, 13711, 13711, 3052, 1904, 13711, 13711, 13711,
	13711, 27794, 1625, 3110, 1501, 304, 1646, 1646, 1646, 1646,
	11147, -1000, 1927, 2743, 11147, 11147, 11147, 11147, 34174, 49486,
	-1000, -1000, 4813, 11147, 11147, 54789, 11147, 3419, 11147, 11147,
	11147, 2901, 5363, 49486, 11147, -1000, 2898, 2886, -1000, -1000,
	2164, 11147, -1000, -1000, 11147, -1000, -1000, 11147, 13711, 11147,
	-1000, 11147, 11147, 11147, -1000, -1000, 1496, 3419, 3419, 3419,
	1818, 11147, 11147, 3419, 3419, 3419, 1799, 3419, 3419, 3419,
	3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 2885, 2883,
	2877, 10506, 3487, -217, -1000, 8577, 3384, 3487, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -270, 3061,
	49486, 2629, 2616, -350, 187, 473, 49486, 1184, -1000, -1000,
	49486, 2251, 49486, 2249, 63, 1131, 1088, 1091, -1000, -1000,
	49486, 50762, -1000, 49486, 1958, 49486, 49486, 3409, -1000, 3060,
	49486, 884, 884, 884, -1000, 45020, 39916, 49486, 49486, 2358,
	49486, 49486, 49486, 884, 884, 884, 884, 49486, -1000, 3331,
	39916, 3321, 917, -1000, 49486, 1500, 3408, 49486, -1000, -1000,
	-1000, -1000, 3538, 13711, 13711, -1000, -1000, 11147, -1000, 224,
	46296, 1825, 1814, 1814, -1000, -1000, 49486, -1000, -1000, -1000,
	1825, 49486, 1825, 1825, 3538, 1825, -1000, -1000, -1000, 1814,
	1814, -1000, -1000, 11147, -1000, -1000, 1825, 1825, -1000, -1000,
	3538, 49486, 85, 3538, 3538, 90, -1000, -1000, -1000, 1814,
	49486, 49486, 884, 49486, -1000, 49486, 49486, -1000, -1000, 49486,
	49486, 4526, 49486, 45020, 45658, 3445, -1000, 39916, 49486, 49486,
	1499, -1000, 942, 37364, -1000, 49486, 1431, -1000, 26, -1000,
	32, 19, 1717, 19, 1717, 937, -1000, 675, 672, 23328,
	592, 39916, 6004, -1000, -1000, 1717, 1717, 6004, 6004, 1647,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1494, -1000, 283,
	3487, -1000, -1000, -1000, -1000, -1000, 2244, -1000, 49486, 45020,
	39916, 2358, 49486, 897, 49486, 49486, 49486, 49486, 49486, -1000,
	3055, 1604, -1000, 3398, 49486, 49486, 49486, 49486, 1372, -1000,
	-1000, 20126, 1597, -1000, -1000, 1986, -1000, 11147, 15002, -255,
	11147, 15002, 15002, 11147, 15002, -1000, 11147, 317, -1000, -1000,
	-1000, -1000, 2241, -1000, 2236, -1000, -1000, -1000, -1000, -1000,
	2611, 2611, -1000, 2234, -1000, -1000, -1000, -1000, 2233, -1000,
	-1000, 2230, -1000, -1000, -1000, -1000, -159, 2872, 1221, -1000,
	2609, 3241, -223, -1000, 21410, 49486, 49486, 444, -356, 1897,
	1895, 1894, 3466, -1000, -223, -1000, 20768, 49486, 3487, -1000,
	-230, 3384, 11147, 49486, -1000, 3475, -1000, -1000, 369, -1000,
	-1000, -1000, 583, 471, -1000, -1000, -1000, -1000, -1000, -1000,
	1594, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -92, -96, 1491, -1000, 49486, -1000, -1000, 329, 39916,
	41830, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 260, -1000,
	-1000, 181, -1000, 936, 287, 1820, -1000, -1000, 228, 211,
	203, 999, 2743, -1000, 1989, 1989, 1979, -1000, 920, -1000,
	-1000, -1000, -1000, 3053, -1000, -1000, -1000, 2925, 3982, -1000,
	1912, 1912, 1652, 1652, 1652, 1652, 1652, 2718, 2718, -1000,
	-1000, -1000, 6654, 3052, 13711, 13711, 13711, 13711, 982, 982,
	3518, 3928, -1000, -1000, -1000, -1000, 11147, 177, 1960, -1000,
	11147, 2631, 1613, 2373, 1555, 1816, -1000, 3003, 11147, 1590,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2871, 2870, 2290, 3558, 2863, 11147, -1000, -1000, 1815, 1798,
	1780, -1000, 2257, 9865, -1000, -1000, -1000, 2862, 1586, 2850,
	-1000, -1000, -1000, 2849, 1773, 1253, 2845, 2504, 2843, 2841,
	2839, 2838, 1489, 11147, 11147, 11147, 11147, 2834, 1768, 1767,
	11147, 11147, 11147, 11147, 2831, 11147, 11147, 11147, 11147, 11147,
	11147, 11147, 11147, 11147, 11147, 49486, 143, 143, 143, 1470,
	1453, -1000, -1000, 1763, -1000, 2743, -1000, -1000, 3384, -1000,
	3049, 2229, 1449, -1000, -1000, -329, 2536, 49486, 49486, 183,
	49486, 2606, -288, 49486, -1000, -1000, 2605, -1000, -1000, -1000,
	1123, 1066, 1060, -1000, 49486, -1000, 2604, 3397, 3473, 903,
	49486, 1206, 3048, 49486, 49486, 49486, 312, -1000, -1000, 1340,
	-1000, 287, -36, 555, 1277, 3230, 3555, -131, 49486, 49486,
	49486, 49486, 3407, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 44382, -1000, 3047, 1762, -1000, -1000, 1646, 1646, 2743,
	49486, 49486, 49486, 3215, 49486, 49486, 3538, 3538, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1825, 3538, 3538, 1421, 1814,
	1825, -1000, -1000, 1825, -356, -1000, 1825, -1000, -356, 1583,
	-356, 49486, -1000, -1000, -1000, 3406, 3018, 1444, -1000, -1000,
	-1000, 3526, 1296, 871, 871, 1099, 822, 3525, 18850, -1000,
	1730, 1362, 935, 3336, 376, -1000, 1730, -156, 847, 1730,
	1730, 1730, 1730, 1730, 1730, 1730, 739, 737, 1730, 1730,
	1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1142,
	1730, 1730, 1730, 1730, 1730, -1000, 1730, 3043, 542, -1000,
	-1000, -1000, -1000, -1000, -1000, 763, 680, 307, 3444, 419,
	-1000, 462, 1340, 334, 3443, 435, 49486, 49486, 3335, 1322,
	-1000, -1000, -1000, -1000, -1000, 28432, 28432, 22690, 28432, -1000,
	196, 1717, 19, 129, -1000, -1000, 1431, 6004, 1431, 6004,
	2227, -1000, -1000, 928, -1000, -1000, 1277, -1000, 49486, 49486,
	-1000, -1000, 3038, 1877, -1000, -1000, 16288, -1000, 6004, 6004,
	-1000, -1000, 30346, 49486, -1000, -21, -1000, 3, 3384, -1000,
	1235, -1000, -1000, 1424, 1277, 3240, 49486, 1235, 1235, 1235,
	-1000, -1000, 17574, 49486, 49486, -1000, -1000, -1000, -1000, 3538,
	9218, -1000, 37364, -1000, -1000, 43744, -1000, 43106, 1949, -1000,
	15002, 2100, 193, -1000, 263, -322, 190, 1977, 188, 2743,
	-1000, -1000, 2830, 2826, 1760, -1000, 1759, 2825, 1757, 1753,
	2226, -1000, 50, -1000, 3380, 1280, -1000, 3037, -1000, 1750,
	3303, -1000, 1414, -1000, 1872, 1744, -1000, -1000, -1000, 11147,
	42468, 11147, 1037, 1280, 1740, 3302, 1414, 3384, 2597, -1000,
	1406, -1000, 2225, 1580, 232, -1000, -1000, -1000, 49486, 2601,
	1732, 41830, 1365, -1000, 927, 1579, 1567, -1000, 39916, 365,
	39916, -1000, 39916, -1000, -1000, 402, -1000, 49486, 3382, -1000,
	-1000, -1000, 2536, 1869, -354, 49486, -1000, -1000, -1000, -1000,
	-1000, 1726, -1000, 982, 982, 3518, 3841, -1000, 13711, -1000,
	13711, 3086, -1000, 1940, -1000, 11147, 2080, 4950, 11147, 4950,
	1892, 26518, 34174, -115, 3393, 3028, 49486, -1000, -1000, 11147,
	11147, -1000, 3011, -1000, -1000, -1000, -1000, 11147, 11147, 2118,
	-1000, 49486, -1000, -1000, -1000, -1000, 26518, -1000, 13711, -1000,
	-1000, -1000, -1000, 11147, 1327, 1327, 2993, 1713, 143, 143,
	143, 2924, 2904, 2887, 1705, 143, 2881, 2829, 2736, 2721,
	2705, 2687, 2669, 2655, 2646, 2519, 1704, -1000, 3034, -1000,
	-1000, 2044, 12429, 8577, -1000, -1000, 328, 1404, 2223, 2589,
	119, -1000, 1866, -1000, 2587, 49486, 49486, 1178, -1000, 49486,
	3551, -1000, -1000, -1000, -1000, 1061, -1000, 2586, -1000, 266,
	245, 2084, 336, 2821, 1401, -1000, -1000, 49486, -1000, -1000,
	-1000, 17574, 3018, 3032, 3018, 174, 1730, 645, 39916, 773,
	-1000, 49486, 2147, 1858, 3239, 816, 3359, 49486, 3031, 408,
	3030, 3026, 3404, 532, 54442, 49486, 1363, -1000, 1566, 4125,
	-1000, 49486, -1000, -1000, 49486, -1000, 2358, -1000, 1814, -1000,
	-1000, 3538, -1000, -1000, 11147, 11147, 3538, 1814, 1814, -1000,
	1825, -1000, 49486, -1000, -356, 532, 54442, 3403, 4665, 608,
	2607, -1000, 49486, -1000, -1000, -1000, 861, -1000, 1086, 884,
	49486, 2016, 1086, 2015, 3025, -1000, -1000, 49486, 49486, 49486,
	49486, -1000, -1000, 49486, -1000, 49486, 49486, 49486, 49486, 49486,
	41192, -1000, 49486, 49486, -1000, 49486, 2013, 49486, 2008, 3341,
	-1000, 1730, 1730, 1013, -1000, -1000, 664, -1000, 41192, 2222,
	2221, 2219, 2218, 2578, 2576, 2573, 1730, 1730, 2216, 2570,
	40554, 2567, 1201, 2214, 2213, 2203, 2208, 2552, 997, -1000,
	2550, 2207, 2142, 2141, 49486, 3020, 2448, 534, -1000, -1000,
	2084, 174, 1730, 409, 49486, 1856, 1855, 645, 625, 552,
	-42, 23966, -1000, -1000, -1000, 49486, 37364, 37364, 37364, 37364,
	37364, 37364, -1000, 3284, 3262, 3019, -1000, 3267, 3264, 3277,
	3283, 3248, 49486, 37364, 3018, -1000, 40554, -1000, -1000, -1000,
	1625, 1699, 3603, 1080, 11147, 6004, -1000, -1000, 11, 24,
	-1000, -1000, -1000, -1000, 39916, 2549, 592, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3472, 49486, 49486, 862, 2813, 1399,
	-1000, -1000, -1000, 54442, 3006, 3006, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3006, 3006, 3014, -1000, -1000,
	3004, 3004, 3004, 3003, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3007, 3007, 3008, 3008, 3007, -1000,
	-1000, 3532, -1000, 1396, -1000, -1000, 1562, -1000, 1954, -347,
	15002, 1843, 1929, -1000, 11147, 15002, 11147, -258, 393, -260,
	-1000, -1000, -1000, 2547, -1000, -1000, -1000, 2202, -1000, 2201,
	-1000, 201, 223, 2007, -223, 8577, 452, 49486, -223, 49486,
	8577, -1000, 49486, 173, -364, -366, 159, 2545, 440, -223,
	3472, 50, 11147, 3329, -1000, -1000, 49486, 2194, -1000, -1000,
	-1000, 3549, 39916, 2358, 1676, 39278, -1000, 362, -1000, 257,
	633, 2539, -1000, 951, 118, 2538, 2536, -1000, -1000, -1000,
	-1000, 13711, 1646, -1000, -1000, -1000, 2743, 11147, 2812, -1000,
	1050, 1050, 2170, 2811, 2808, -1000, 3006, 3006, -1000, 3003,
	3004, 3003, 1050, 1050, 2806, -1000, 3000, -1000, 3393, -1000,
	2154, 2487, -1000, 2414, 2383, 11147, -1000, 2795, 3645, 1481,
	-58, -187, 143, 143, -1000, -1000, -1000, -1000, 143, 143,
	143, 143, -1000, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 841, -98, -279, -99, -282, -1000,
	2794, 1392, -1000, -1000, -1000, -1000, -1000, 54789, 1387, 565,
	565, 2536, 2531, -1000, 924, 2530, 1115, 49486, 2529, -293,
	-1000, 2526, -1000, -1000, 49486, 49486, 49486, 50124, 677, 49486,
	49486, 2525, -1000, 2523, 2517, 1206, 54442, 2793, 3402, 18212,
	3401, 2184, -1000, -1000, -1000, 29708, 625, -1000, -1000, -1000,
	743, 382, 2188, 609, -1000, 49486, 570, 3323, 1851, 2515,
	49486, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3359,
	-1000, 925, 505, 36088, 15650, -1000, 430, 49486, -1000, 18212,
	18212, 430, 516, 1888, -1000, 838, 1352, 136, 37364, 49486,
	-1000, 36726, 2788, -1000, -1000, 1277, 3538, -1000, 2743, 2743,
	-356, 3538, 3538, 1814, -1000, -1000, 516, -1000, 430, -1000,
	1368, 19488, 594, 461, 454, -1000, 752, -1000, -1000, 836,
	3352, 54442, -1000, 49486, -1000, 49486, -1000, 49486, 49486, 884,
	11147, 3352, 49486, 904, -1000, 1180, 495, 460, 858, 858,
	1386, -1000, 3393, -1000, -1000, 1374, -1000, -1000, -1000, -1000,
	49486, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26518, 26518,
	3441, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2507, 2506, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 49486, 1675, -1000, 1849, 2180,
	2505, 2184, 29708, 1845, 1717, 2483, 2474, 625, -1000, 2473,
	2471, 2147, 1844, 950, 49486, -1000, 1239, 49486, 49486, -1000,
	1361, -1000, 1842, 3207, 3237, 3207, -1000, 3207, -1000, -1000,
	-1000, -1000, 3276, 2470, -1000, 3266, -1000, 3263, -1000, -1000,
	-1000, -1000, 1361, -1000, -1000, -1000, -1000, -1000, 1080, -1000,
	3468, 1086, 1086, 1086, 2784, -1000, -1000, -1000, -1000, 1365,
	2774, -1000, -1000, -1000, 3569, -1000, -1000, -1000, -1000, -1000,
	-1000, 17574, 3355, 3519, 3521, 38640, -1000, -347, 1931, -1000,
	1984, 186, 1921, 49486, -1000, -1000, -1000, 2768, 2767, -233,
	222, 3517, 3516, 1118, -1000, 2761, 1343, -223, -1000, -1000,
	1280, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -380, -223,
	-1000, 1280, -1000, 201, -1000, -1000, 3372, -1000, -1000, 2358,
	-1000, 256, -1000, -1000, -1000, -1000, -1000, -1000, 247, -1000,
	49486, -1000, 1338, 117, -1000, 2743, -1000, -1000, -1000, -1000,
	-1000, 4950, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2466, -1000, -1000, 11147, -1000, -1000, -1000, 2366,
	-1000, -1000, 11147, 2745, 2463, 2731, 2461, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3575, -1000, 3515, 1674, 2730, 2727,
	1670, 2726, 2725, -1000, 11147, 2723, 54789, 1026, 2458, 1026,
	-1000, -1000, 433, 29070, 49486, 3542, -1000, 49486, 2457, -1000,
	-1000, 49486, 2084, 665, 2084, 684, 49486, -1000, -1000, -1000,
	-1000, -1000, 966, 430, 2720, 1289, -1000, -1000, -1000, -1000,
	430, -1000, 2456, 286, -1000, -1000, -1000, -1000, 2174, -1000,
	-1000, 2137, 1364, 298, -1000, -1000, -1000, -1000, -1000, -1000,
	2111, 49486, 38002, 2160, 1840, -357, -1000, 2970, -1000, 1730,
	1730, 1730, 49486, 1668, -1000, 1730, 1730, 2713, -1000, -1000,
	2710, 2707, -133, 856, 1847, 1841, -1000, 2171, 28432, 37364,
	36726, 1317, -1000, 1552, -1000, -1000, -1000, -1000, -1000, -1000,
	3538, 856, -1000, 579, 2145, 13711, 2965, 13711, 2963, 604,
	2962, 1664, -1000, 49486, -1000, -1000, 49486, 4004, 2959, -1000,
	2957, 3213, 562, 2956, 2951, 49486, 2308, -1000, 3352, 49486,
	813, 3346, -1000, -1000, -1000, 479, -1000, -1000, -1000, 683,
	-1000, 49486, -1000, 49486, -1000, 1589, -1000, 26518, -1000, -1000,
	1633, -1000, 2448, 2447, 54789, -1000, -1000, 286, 2434, 6004,
	-1000, -1000, -1000, -1000, -1000, 3323, 2430, 2111, 49486, -1000,
	49486, 1239, 1239, 3575, 49486, 8577, -1000, -1000, 11147, 2948,
	-1000, 11147, -1000, -1000, -1000, 2706, -1000, -1000, -1000, -1000,
	-1000, 2945, 3344, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1672, -1000, 11147, 11788, -1000, 876, 15002, -261, 390, -1000,
	-1000, -1000, -235, 2429, -1000, -1000, 3513, 2427, 2288, 49486,
	-1000, -1000, 1280, -1000, 1280, -233, -1000, -1000, 1277, -1000,
	-1000, 1147, 746, -1000, 2692, 275, -1000, 2302, -1000, 2276,
	143, -1000, 143, -1000, 276, 11147, -1000, 2423, -1000, -1000,
	-1000, 2422, -1000, -1000, 2178, -1000, 2677, -1000, 2421, -1000,
	-1000, 49486, -1000, -1000, 1109, 2413, -358, -1000, 2411, 2084,
	2402, 2084, 49486, 663, 54442, -140, -133, 18212, -140, -1000,
	-1000, 397, 428, -1000, -1000, 2122, 676, -1000, -1000, 2401,
	653, -1000, 1239, -1000, 1836, 2031, 2341, 34174, 26518, 27794,
	2400, -1000, -1000, 36088, 1672, 1672, 4307, 341, 54893, -1000,
	2944, 1141, 1839, -1000, 2140, -1000, 2136, -1000, 3538, 1317,
	126, -1000, -1000, 1658, -1000, 1141, 2607, 3512, -1000, 3159,
	49486, 3109, 49486, 2943, 1833, 13711, -1000, 836, 3300, -1000,
	-1000, 4004, -1000, -1000, 2023, 13711, -1000, -1000, 2394, 27794,
	976, 1810, 1808, 1020, 2942, -1000, 688, 3566, -1000, -1000,
	-1000, 1004, 2941, -1000, 2006, 1998, -1000, 49486, -1000, 34174,
	34174, 797, 797, 34174, 34174, 2940, 858, -1000, -1000, 13711,
	-1000, -1000, 1730, -1000, -1000, -1000, 1730, 1559, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2160, -1000, -1000, 1235, -1000,
	3487, -1000, -1000, 2743, 49486, 2743, -1000, 35450, -1000, 3510,
	3509, -1000, 2743, 252, 255, 2937, 2936, -1000, -347, 49486,
	49486, -237, 2135, -1000, 2392, 212, -1000, -1000, 1226, -235,
	-239, 90, 26518, 1784, -1000, 2671, 360, -145, -1000, -1000,
	-1000, -1000, 2670, -1000, 701, -1000, -1000, -1000, 1221, 2665,
	2664, -1000, -1000, -1000, -1000, 49486, -1000, 2334, -1000, 2386,
	-1000, 2385, 655, 2084, -120, -1000, -1000, 410, -1000, -1000,
	-1000, 649, 2265, -1000, -1000, 424, -1000, -1000, -1000, 2111,
	2384, -1000, -1000, 109, -1000, 1751, 1588, -1000, -1000, -1000,
	-1000, -1000, -1000, 819, -1000, 430, 54834, -1000, 1362, 27156,
	-1000, 1147, 819, 542, 32898, 702, 306, -1000, 2110, -1000,
	-1000, 3575, -1000, 697, -1000, 597, -1000, 1581, -1000, 1557,
	34812, 2108, 3009, -1000, 54673, 970, -1000, -1000, 3518, -1000,
	-1000, -1000, -1000, -1000, -1000, 2382, 2376, -1000, -1000, -1000,
	-1000, -1000, 2098, 2931, 42, 3433, 2375, -1000, -1000, 2929,
	1556, 1514, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1513, 1506, 34174, -1000, -1000, 3518, 2090, 26518,
	1730, -1000, -1000, 1503, 1493, -1000, -1000, -1000, -1000, -1000,
	-318, 2926, 11147, 11147, -1000, -1000, -1000, 2922, -1000, -1000,
	3505, -237, -248, 2374, 200, 242, -1000, 2370, -1000, -125,
	3294, -151, -1000, -1000, 969, -224, 138, 127, 111, -1000,
	-1000, -1000, 11147, -1000, -1000, -1000, 107, -1000, 1743, -1000,
	-1000, 2084, 2353, 49486, 678, -1000, -1000, -1000, -1000, 213,
	-1000, -1000, -1000, -1000, -1000, -1000, 2341, 2340, -1000, 571,
	3498, -1000, 54893, -1000, 1730, -1000, 571, 1480, -1000, 1730,
	1730, -1000, 508, -1000, 1832, -1000, 2078, -1000, 3487, -1000,
	506, -1000, 577, -1000, -1000, -1000, 1476, -1000, -1000, -1000,
	54673, 585, -1000, 800, 2921, -1000, -1000, 2662, 11147, 2919,
	1730, 2656, -113, 34174, 3212, 3211, 3209, 3111, 1454, -1000,
	-1000, 26518, -1000, -1000, 33536, -1000, 2908, 1446, 1412, 49486,
	2288, -1000, -1000, 2335, -1000, 901, 189, 242, -1000, 3496,
	192, 3494, 3493, 1218, 3293, -1000, -1000, 1971, -1000, 172,
	162, 154, -1000, -1000, -1000, -1000, -1000, 2334, 2328, 2307,
	-1000, 588, -1000, 344, -1000, -1000, -1000, 330, -1000, 3492,
	608, -1000, 26518, -1000, -1000, 32898, 1672, 1672, -1000, -1000,
	2073, -1000, -1000, -1000, -1000, 2071, -1000, -1000, -1000, 1402,
	-1000, 49486, 1031, 7936, -1000, 2144, -1000, 49486, -1000, 3234,
	-1000, 274, 1388, 330, 797, 330, 797, 330, 797, 330,
	797, 352, -1000, -1000, -1000, 1328, 11147, -1000, -1000, 1311,
	-1000, -1000, -1000, 2891, 2068, 222, 178, 3491, -1000, 2288,
	3490, 2288, 2288, -1000, 169, -141, 969, -1000, -1000, -1000,
	-1000, -1000, -1000, 2306, -1000, -1000, -1000, -1000, 1730, 1730,
	2305, 2292, 498, -1000, -1000, 1730, 1730, 1730, 1730, 32260,
	594, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 585, 54893,
	-1000, 7936, 1309, -1000, 2743, -1000, 858, -1000, -1000, 3233,
	3012, 3547, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2719, 2654, -1000, 49486, 3414, 25880, 182, -1000,
	-1000, -1000, 2289, -1000, 2288, -1000, -1000, 1729, -149, -1000,
	-277, 2064, 2055, -1000, -1000, 49486, 2051, 2035, 2032, 2277,
	-1000, 49486, 579, -1000, 54893, 1306, -1000, 7936, -1000, -1000,
	3565, -1000, 3563, 1008, 1008, 330, 330, 330, 330, 11147,
	-1000, -1000, -1000, 49486, -1000, 1297, -1000, -1000, -1000, 1551,
	-1000, -1000, -1000, -1000, 2273, -153, -1000, -1000, 2272, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1225, 2607, -1000, -1000,
	-1000, -1000, -1000, 2123, 693, -1000, 2653, 1183, -1000, 1693,
	-1000, 31622, 49486, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 49486, 7295, -1000, 1533, -1000, -1000, 2743, 49486,
	-1000,
}

var yyPgo = [...]int{
	0, 181, 3594, 241, 179, 4264, 84, 248, 333, 245,
	244, 243, 4263, 4262, 4261, 3361, 3358, 4260, 4256, 4255,
	4254, 4253, 4252, 4251, 4250, 4248, 4247, 4246, 4245, 4240,
	4239, 4238, 4237, 4236, 4235, 4234, 4233, 4232, 4231, 4230,
	4229, 4225, 4224, 4223, 4222, 4221, 4220, 242, 4219, 4218,
	4217, 4216, 4215, 4214, 4213, 4212, 4209, 4208, 4205, 4204,
	4203, 4201, 4200, 4199, 4198, 4197, 4196, 4195, 4194, 4193,
	4192, 4191, 4190, 4189, 4188, 4186, 4184, 4183, 4181, 4180,
	4178, 4177, 4176, 4175, 4174, 208, 4173, 3356, 4172, 4171,
	4170, 4169, 4167, 4166, 4165, 4162, 4161, 4160, 4158, 296,
	4156, 4155, 4154, 4153, 4152, 4151, 4150, 4149, 4148, 4147,
	4145, 4144, 4143, 262, 4142, 4137, 4136, 4135, 215, 4121,
	253, 4119, 174, 140, 4118, 4110, 4109, 4108, 4107, 4104,
	4101, 4099, 4098, 4097, 4096, 4095, 4092, 4091, 238, 191,
	70, 4089, 47, 4088, 4086, 216, 4085, 155, 4083, 152,
	4082, 4081, 4067, 4066, 4064, 4063, 4061, 4060, 4059, 4058,
	4053, 4052, 4051, 4050, 4049, 4048, 4047, 4044, 4043, 4041,
	4038, 4037, 4035, 4034, 50, 4033, 260, 4032, 79, 4031,
	182, 4030, 75, 4029, 45, 137, 258, 1081, 264, 4028,
	188, 4027, 4022, 249, 171, 4020, 4019, 286, 4017, 164,
	222, 163, 103, 120, 4013, 145, 4007, 272, 48, 49,
	251, 150, 4006, 4005, 58, 165, 135, 4004, 212, 100,
	115, 4003, 4002, 148, 3999, 235, 173, 3998, 108, 3997,
	3996, 3995, 3994, 3979, 198, 192, 3977, 3975, 133, 3974,
	3973, 64, 130, 3972, 77, 129, 176, 125, 3968, 2312,
	126, 128, 3965, 123, 106, 3963, 97, 3962, 3961, 3960,
	3956, 184, 3954, 3952, 141, 61, 3950, 3949, 3948, 68,
	3947, 83, 3946, 31, 3944, 57, 3943, 3942, 3941, 3939,
	3938, 3937, 3936, 3935, 3934, 3933, 3932, 3931, 55, 3930,
	3926, 3925, 3923, 7, 11, 15, 3921, 27, 3917, 178,
	3916, 3915, 169, 3914, 197, 3911, 3909, 98, 90, 3907,
	92, 167, 3905, 10, 33, 69, 3904, 3903, 3902, 331,
	3901, 3900, 3899, 266, 3898, 3897, 3895, 168, 3891, 3890,
	3886, 653, 3885, 3884, 3883, 3882, 3880, 3879, 104, 3876,
	1, 214, 43, 3875, 134, 138, 3872, 39, 32, 3870,
	51, 113, 200, 136, 102, 3869, 3868, 3867, 557, 196,
	105, 29, 0, 101, 220, 158, 3864, 3863, 3862, 252,
	3861, 230, 221, 231, 886, 256, 211, 3860, 3859, 62,
	3857, 162, 30, 54, 159, 81, 21, 240, 3855, 853,
	9, 177, 3849, 203, 3848, 8, 18, 144, 156, 3847,
	3846, 36, 268, 3844, 3843, 3841, 131, 3840, 3839, 300,
	82, 3838, 3837, 3836, 3833, 40, 3832, 189, 16, 3830,
	109, 3829, 239, 3828, 201, 146, 185, 183, 157, 218,
	229, 78, 85, 3827, 1814, 160, 112, 17, 3825, 219,
	3824, 224, 132, 3817, 89, 3815, 247, 259, 207, 3809,
	186, 12, 52, 38, 28, 42, 13, 323, 204, 3802,
	3799, 24, 53, 3798, 59, 3782, 20, 3781, 3780, 44,
	3773, 60, 5, 3769, 3766, 19, 22, 3763, 35, 205,
	190, 124, 99, 67, 3762, 3761, 147, 250, 3760, 142,
	154, 161, 3759, 80, 3758, 3757, 3756, 3754, 2731, 254,
	3753, 3752, 3748, 3747, 3746, 3744, 3743, 3742, 213, 3739,
	116, 41, 3738, 3737, 3735, 3733, 94, 151, 3731, 3729,
	3728, 3727, 34, 143, 3726, 14, 3725, 25, 23, 37,
	3724, 107, 3723, 3, 187, 3722, 3721, 4, 3719, 3717,
	2, 3713, 3712, 121, 3711, 93, 26, 172, 118, 3709,
	3707, 91, 210, 149, 3706, 3704, 88, 236, 202, 3702,
	95, 232, 257, 3701, 209, 3698, 3696, 3695, 3694, 3693,
	1236, 3690, 3689, 233, 74, 96, 3688, 217, 122, 3687,
	3686, 87, 166, 119, 114, 56, 86, 3681, 111, 206,
	3656, 195, 3654, 255, 3653, 3652, 110, 3651, 3647, 3646,
	3645, 193, 3644, 3643, 194, 226, 3636, 3634, 265, 3620,
	3615, 3610, 3609, 3608, 3607, 3604, 3603, 3598, 3597, 237,
	486, 3596,
}

//line mysql_sql.y:12964
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectOptionUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectOptionsUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 614, 617, 617, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 128,
	128, 353, 353, 354, 354, 130, 349, 349, 348, 348,
	131, 132, 133, 593, 593, 134, 135, 165, 592, 592,
	592, 592, 592, 167, 167, 167, 167, 167, 167, 167,
	469, 129, 129, 129, 129, 129, 171, 171, 171, 171,
	171, 127, 599, 599, 599, 600, 600, 124, 154, 153,
	156, 156, 155, 155, 152, 152, 148, 151, 151, 150,
	150, 149, 144, 146, 146, 145, 147, 147, 125, 113,
	126, 542, 542, 541, 541, 540, 540, 494, 494, 495,
	495, 340, 340, 340, 539, 539, 539, 538, 538, 537,
	537, 536, 536, 534, 534, 535, 533, 532, 532, 532,
	530, 530, 530, 526, 526, 528, 527, 527, 529, 521,
	521, 524, 524, 522, 522, 522, 522, 525, 520, 520,
	520, 519, 519, 112, 112, 112, 436, 436, 111, 111,
	450, 450, 450, 450, 450, 448, 448, 448, 448, 448,
	448, 447, 447, 446, 446, 451, 451, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 100, 100,
	100, 100, 100, 100, 100, 107, 105, 105, 105, 106,
	605, 605, 604, 604, 606, 606, 606, 606, 607, 607,
	103, 103, 103, 104, 445, 445, 445, 101, 102, 102,
	435, 435, 440, 440, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 444, 444, 444,
	442, 442, 441, 441, 443, 443, 91, 91, 91, 91,
	91, 91, 95, 96, 97, 97, 97, 97, 94, 93,
	434, 434, 434, 434, 434, 434, 434, 434, 434, 92,
	92, 92, 92, 92, 92, 86, 86, 86, 86, 86,
	85, 85, 87, 87, 432, 432, 431, 108, 108, 109,
	602, 602, 601, 603, 603, 603, 603, 110, 116, 116,
	116, 116, 116, 116, 116, 116, 115, 115, 118, 118,
	117, 119, 99, 99, 99, 99, 99, 99, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 567, 567, 567, 567, 568, 568,
	367, 368, 618, 370, 366, 366, 366, 563, 563, 564,
	565, 566, 566, 566, 114, 14, 224, 224, 468, 468,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	13, 84, 89, 89, 90, 303, 303, 304, 298, 298,
	305, 305, 170, 306, 306, 306, 311, 311, 312, 312,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 283, 283, 283, 278, 278, 278, 278, 279,
	279, 280, 280, 281, 281, 281, 281, 282, 282, 359,
	359, 307, 307, 307, 309, 309, 308, 302, 300, 300,
	300, 300, 300, 300, 300, 301, 301, 301, 301, 301,
	310, 310, 82, 88, 88, 88, 88, 580, 580, 83,
	83, 591, 591, 498, 498, 381, 381, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 503, 504, 377, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 79, 80, 81, 54, 57, 58,
	169, 172, 172, 172, 172, 53, 53, 53, 421, 421,
	52, 619, 619, 352, 352, 67, 66, 56, 68, 69,
	70, 71, 72, 73, 51, 65, 65, 65, 65, 65,
	65, 65, 65, 76, 515, 515, 621, 621, 621, 74,
	75, 497, 497, 497, 64, 63, 62, 61, 60, 60,
	50, 50, 49, 49, 55, 160, 59, 161, 161, 374,
	374, 374, 376, 376, 372, 620, 620, 464, 464, 375,
	375, 48, 48, 48, 48, 77, 373, 373, 351, 371,
	371, 371, 12, 12, 10, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 26, 27, 29, 429, 429, 426, 28, 20,
	19, 19, 23, 22, 18, 18, 21, 24, 25, 25,
	9, 9, 9, 9, 15, 15, 16, 194, 194, 250,
	250, 574, 574, 570, 570, 571, 571, 571, 572, 572,
	573, 573, 120, 509, 509, 509, 509, 509, 509, 8,
	8, 219, 219, 508, 508, 508, 508, 508, 508, 433,
	433, 433, 552, 552, 552, 553, 218, 218, 211, 211,
	510, 510, 398, 554, 554, 518, 518, 517, 517, 516,
	516, 216, 216, 217, 217, 197, 197, 139, 139, 523,
	523, 523, 523, 531, 531, 493, 493, 288, 288, 342,
	342, 343, 343, 184, 184, 185, 185, 185, 185, 185,
	185, 608, 608, 609, 610, 611, 611, 612, 612, 612,
	613, 613, 613, 613, 613, 560, 560, 562, 562, 561,
	215, 215, 209, 209, 210, 210, 210, 208, 208, 207,
	206, 206, 205, 203, 203, 203, 204, 204, 204, 223,
	223, 187, 187, 187, 186, 186, 186, 186, 186, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 188, 191, 191, 192, 192, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 320, 320, 321, 321,
	321, 321, 321, 137, 137, 502, 502, 319, 319, 189,
	189, 190, 190, 190, 190, 318, 318, 317, 202, 202,
	201, 200, 200, 200, 195, 195, 195, 195, 195, 196,
	329, 329, 328, 328, 327, 327, 327, 327, 330, 123,
	136, 136, 138, 222, 222, 213, 212, 326, 325, 325,
	325, 325, 221, 221, 220, 220, 214, 214, 199, 199,
	199, 199, 324, 198, 322, 598, 598, 597, 597, 596,
	594, 594, 594, 595, 595, 595, 595, 544, 544, 544,
	544, 544, 360, 360, 360, 365, 365, 363, 363, 363,
	363, 363, 369, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 39, 233, 234, 40, 235,
	235, 236, 236, 237, 237, 238, 239, 240, 240, 240,
	240, 38, 225, 225, 226, 226, 227, 227, 228, 229,
	229, 229, 232, 230, 231, 231, 616, 616, 615, 37,
	37, 30, 175, 175, 176, 176, 176, 178, 178, 284,
	284, 284, 177, 177, 179, 179, 179, 575, 577, 577,
	579, 578, 578, 578, 581, 581, 581, 581, 581, 582,
	582, 582, 582, 583, 583, 31, 157, 157, 182, 182,
	162, 586, 586, 586, 585, 585, 587, 587, 588, 588,
	346, 346, 347, 347, 173, 174, 174, 164, 159, 181,
	181, 181, 181, 181, 183, 183, 252, 252, 158, 163,
	166, 168, 576, 584, 584, 584, 430, 430, 427, 428,
	428, 425, 424, 424, 424, 590, 590, 589, 589, 589,
	361, 361, 32, 420, 420, 422, 423, 423, 423, 414,
	414, 414, 414, 36, 418, 418, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 415, 415, 417,
	417, 413, 413, 413, 413, 413, 413, 413, 413, 35,
	180, 180, 412, 412, 409, 409, 407, 407, 408, 408,
	406, 406, 406, 410, 410, 43, 78, 44, 45, 46,
	42, 411, 411, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 141, 140, 140, 140, 140, 140, 143,
	143, 345, 345, 344, 344, 142, 285, 285, 41, 263,
	263, 485, 485, 480, 480, 480, 480, 480, 500, 500,
	500, 481, 481, 481, 482, 482, 482, 484, 484, 484,
	483, 483, 483, 483, 483, 499, 499, 501, 501, 501,
	452, 452, 453, 453, 453, 456, 456, 472, 472, 473,
	473, 471, 471, 478, 478, 477, 477, 476, 476, 475,
	475, 474, 474, 474, 474, 467, 467, 466, 466, 454,
	454, 454, 454, 454, 455, 455, 455, 465, 465, 470,
	470, 316, 316, 315, 315, 271, 271, 272, 272, 314,
	314, 269, 269, 270, 270, 270, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 550, 550, 551, 274, 274, 286, 286, 286,
	286, 286, 286, 273, 273, 275, 275, 251, 251, 249,
	249, 241, 241, 241, 241, 241, 241, 242, 242, 243,
	243, 244, 244, 244, 248, 248, 247, 247, 247, 247,
	245, 245, 246, 246, 246, 246, 246, 246, 438, 438,
	547, 547, 548, 548, 543, 543, 543, 546, 546, 546,
	546, 546, 546, 546, 546, 549, 549, 549, 545, 545,
	253, 339, 339, 339, 362, 362, 362, 362, 364, 338,
	338, 338, 268, 268, 267, 267, 265, 265, 265, 265,
	265, 265, 265, 265, 265, 265, 265, 265, 265, 265,
	265, 265, 265, 265, 265, 265, 265, 265, 437, 437,
	378, 378, 379, 379, 297, 296, 296, 296, 296, 296,
	294, 295, 293, 293, 293, 293, 293, 290, 290, 289,
	289, 289, 291, 291, 291, 291, 291, 416, 416, 287,
	287, 277, 277, 277, 276, 276, 276, 479, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 292, 336,
	336, 336, 337, 337, 337, 337, 337, 337, 337, 337,
	388, 388, 394, 394, 559, 559, 558, 254, 254, 254,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 264,
	264, 264, 461, 461, 461, 461, 462, 462, 462, 462,
	463, 463, 463, 459, 459, 460, 460, 399, 400, 400,
	506, 506, 507, 507, 457, 457, 458, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	514, 514, 514, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 569,
	569, 569, 555, 555, 555, 556, 556, 556, 556, 556,
	556, 556, 556, 556, 556, 556, 556, 557, 557, 557,
	557, 557, 557, 557, 557, 557, 557, 557, 557, 557,
	557, 557, 557, 557, 334, 334, 334, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 401, 401, 402, 402, 511,
	511, 511, 511, 511, 511, 512, 512, 513, 513, 513,
	513, 505, 505, 505, 505, 505, 505, 505, 505, 505,
	505, 505, 505, 505, 505, 505, 505, 505, 505, 505,
	505, 505, 505, 505, 505, 505, 505, 505, 505, 505,
	505, 386, 331, 331, 331, 403, 395, 395, 396, 396,
	397, 397, 389, 389, 389, 389, 389, 389, 390, 390,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 391, 391, 393, 393, 405, 405, 405, 404,
	404, 404, 404, 404, 404, 404, 266, 266, 266, 266,
	383, 383, 383, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 256, 256, 256, 256, 260,
	260, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 261, 261, 261, 261, 261,
	259, 259, 259, 259, 259, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 121, 122, 122, 258, 341, 341,
	486, 486, 489, 489, 487, 487, 488, 490, 490, 490,
	491, 491, 491, 492, 492, 492, 496, 496, 350, 350,
	350, 358, 358, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	1, 2, 3, 9, 9, 10, 10, 11, 7, 12,
	1, 5, 6, 8, 10, 9, 5, 7, 9, 8,
	6, 4, 0, 1, 1, 0, 1, 5, 2, 2,
	6, 9, 6, 9, 4, 7, 8, 0, 1, 1,
	2, 4, 6, 1, 2, 4, 0, 2, 10, 11,
	2, 0, 2, 1, 3, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 3,
	0, 3, 3, 0, 1, 3, 0, 1, 3, 0,
	2, 1, 2, 3, 4, 3, 3, 1, 0, 1,
	1, 0, 1, 8, 5, 7, 0, 3, 8, 5,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 1, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 3, 4, 4, 5,
	1, 3, 3, 1, 2, 2, 2, 1, 2, 2,
	3, 4, 4, 6, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 3, 4, 5, 4, 2, 2,
	0, 1, 4, 2, 4, 1, 5, 3, 2, 1,
	2, 2, 4, 4, 5, 2, 1, 3, 4, 4,
	1, 2, 9, 7, 1, 3, 3, 1, 1, 3,
	1, 3, 2, 1, 2, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 2, 4,
	3, 3, 1, 1, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 3, 4, 4, 5,
	3, 4, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	1, 1, 1, 1, 6, 4, 1, 1, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	10, 7, 4, 4, 3, 1, 3, 3, 1, 3,
	1, 6, 7, 3, 3, 3, 1, 1, 1, 3,
	2, 4, 5, 5, 6, 5, 5, 3, 2, 2,
	1, 3, 4, 3, 7, 5, 8, 2, 2, 1,
	3, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 2, 1, 3, 2, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 6, 3, 3, 3,
	1, 1, 7, 7, 7, 8, 8, 0, 4, 7,
	6, 0, 3, 0, 2, 0, 1, 1, 1, 1,
	4, 2, 2, 3, 3, 4, 5, 3, 4, 4,
	2, 2, 2, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 4, 3, 3,
	3, 4, 5, 6, 5, 2, 5, 5, 0, 2,
	7, 0, 1, 0, 1, 5, 5, 3, 3, 2,
	4, 4, 4, 4, 4, 1, 1, 1, 3, 3,
	1, 1, 1, 6, 0, 1, 1, 1, 1, 5,
	5, 0, 1, 1, 3, 3, 3, 4, 7, 7,
	5, 4, 7, 8, 3, 3, 2, 3, 4, 0,
	2, 2, 0, 2, 2, 1, 1, 1, 1, 0,
	1, 5, 5, 6, 4, 3, 1, 3, 1, 1,
	3, 5, 2, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 4, 1, 3, 1, 4, 6,
	6, 4, 4, 4, 4, 4, 3, 6, 3, 5,
	1, 1, 2, 2, 11, 8, 9, 1, 3, 2,
	4, 0, 2, 0, 1, 1, 1, 1, 0, 1,
	0, 1, 4, 2, 1, 5, 4, 4, 2, 5,
	5, 1, 3, 2, 1, 5, 4, 4, 2, 0,
	5, 4, 0, 1, 3, 3, 1, 3, 1, 3,
	1, 3, 4, 0, 1, 0, 1, 1, 3, 1,
	1, 0, 4, 1, 3, 2, 1, 0, 8, 0,
	4, 7, 4, 0, 2, 0, 2, 0, 2, 0,
	4, 1, 3, 1, 1, 6, 4, 5, 7, 4,
	5, 0, 1, 3, 8, 0, 6, 0, 4, 6,
	1, 1, 1, 1, 1, 2, 3, 1, 3, 6,
	0, 3, 0, 1, 2, 4, 4, 0, 1, 3,
	1, 3, 3, 0, 1, 1, 0, 2, 2, 0,
	2, 3, 3, 3, 1, 3, 3, 3, 3, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 7, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 4,
	7, 6, 6, 3, 5, 0, 2, 0, 2, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 3,
	1, 1, 1, 1, 4, 4, 4, 3, 4, 3,
	2, 2, 2, 2, 2, 3, 2, 3, 2, 4,
	1, 3, 4, 0, 2, 1, 3, 1, 1, 2,
	2, 3, 0, 1, 2, 4, 1, 3, 1, 3,
	2, 3, 1, 4, 3, 0, 1, 1, 2, 5,
	2, 2, 2, 0, 2, 3, 3, 0, 1, 3,
	1, 3, 0, 1, 2, 1, 1, 0, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 1, 7, 1,
	3, 0, 1, 1, 3, 1, 3, 0, 1, 1,
	1, 14, 1, 3, 0, 1, 1, 3, 1, 1,
	2, 4, 1, 1, 1, 1, 0, 1, 2, 9,
	9, 7, 1, 2, 3, 3, 3, 0, 4, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	4, 1, 1, 1, 3, 3, 4, 3, 3, 0,
	1, 1, 1, 0, 2, 7, 8, 10, 2, 2,
	8, 0, 3, 3, 0, 3, 0, 3, 0, 5,
	1, 3, 0, 3, 3, 0, 2, 9, 8, 0,
	2, 2, 3, 3, 0, 2, 0, 2, 4, 4,
	4, 4, 1, 0, 2, 2, 1, 3, 2, 1,
	3, 2, 1, 3, 2, 0, 1, 3, 4, 3,
	1, 1, 4, 1, 3, 1, 1, 1, 1, 0,
	1, 1, 1, 11, 0, 2, 3, 3, 2, 2,
	3, 1, 1, 3, 3, 3, 3, 1, 3, 3,
	4, 0, 2, 2, 2, 2, 2, 2, 2, 6,
	0, 4, 1, 1, 0, 3, 0, 1, 1, 2,
	4, 4, 4, 0, 1, 8, 2, 4, 4, 4,
	9, 0, 2, 11, 9, 11, 8, 6, 9, 7,
	10, 7, 6, 2, 2, 9, 4, 5, 3, 0,
	4, 1, 3, 0, 3, 6, 0, 2, 10, 0,
	2, 0, 2, 0, 3, 2, 4, 3, 0, 2,
	1, 0, 2, 3, 0, 2, 3, 0, 2, 1,
	0, 3, 2, 4, 3, 0, 1, 0, 1, 1,
	0, 6, 0, 3, 5, 0, 4, 0, 3, 1,
	3, 4, 5, 0, 3, 1, 3, 2, 3, 1,
	2, 0, 4, 6, 5, 0, 2, 0, 2, 4,
	5, 4, 5, 1, 5, 6, 5, 0, 3, 0,
	1, 1, 3, 3, 3, 0, 4, 1, 3, 3,
	3, 0, 1, 1, 3, 2, 3, 3, 3, 4,
	4, 3, 3, 3, 3, 4, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 5,
	4, 5, 1, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	4, 0, 5, 5, 5, 5, 6, 0, 1, 1,
	3, 1, 1, 1, 1, 1, 7, 9, 7, 9,
	2, 1, 7, 9, 7, 9, 8, 5, 0, 1,
	0, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	3, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 2, 1, 2, 2, 1,
	1, 2, 2, 2, 3, 3, 2, 2, 1, 5,
	6, 4, 1, 1, 1, 5, 4, 1, 1, 2,
	0, 1, 1, 2, 5, 0, 1, 1, 2, 2,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 2,
	2, 2, 0, 4, 7, 3, 3, 0, 3, 0,
	3, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 3, 5, 2, 2, 2, 2,
	4, 1, 1, 2, 5, 6, 8, 6, 6, 6,
	1, 1, 1, 1, 1, 1, 3, 9, 1, 4,
	4, 4, 7, 9, 7, 7, 7, 9, 7, 7,
	0, 2, 0, 1, 1, 2, 4, 1, 2, 2,
	1, 2, 2, 1, 2, 2, 2, 2, 2, 0,
	1, 1, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 5, 0, 1, 3, 0, 1,
	0, 2, 0, 2, 0, 1, 6, 8, 8, 6,
	6, 5, 5, 5, 6, 6, 6, 6, 5, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	1, 1, 1, 4, 4, 6, 8, 6, 4, 5,
	4, 4, 4, 3, 4, 6, 6, 7, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 8, 4, 2, 3,
	2, 4, 2, 2, 4, 6, 2, 2, 4, 6,
	4, 2, 4, 4, 4, 0, 1, 2, 3, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 3, 0, 1, 1, 3,
	1, 3, 3, 3, 3, 3, 2, 1, 1, 1,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	1, 3, 4, 4, 5, 4, 5, 3, 4, 5,
	6, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 2, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 4, 4, 1, 2, 3, 5, 1, 1, 3,
	0, 1, 0, 3, 0, 3, 3, 0, 3, 5,
	0, 3, 5, 0, 1, 1, 0, 1, 1, 2,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -614, -617, -2, -5, 637, -1, -4, -122, -91,
	-7, -14, -124, -125, -8, -120, -9, -10, -12, -98,
	-115, -117, -119, -118, -47, -11, -114, -85, -86, -100,
	-108, -111, -112, -113, -126, -121, -123, -184, -127, -128,
	-129, -171, -132, -134, -135, 627, -92, -93, -94, -95,
	-96, -97, -33, -32, -31, -30, -157, -162, -165, -167,
	-130, 560, 633, 463, 14, 512, -15, -16, -560, -17,
	267, -366, -367, -368, -370, -618, -48, -49, -50, -60,
	-61, -62, -63, -64, -74, -75, -76, -51, -52, -53,
	-56, -54, -67, -66, -68, -69, -70, -71, -72, -73,
	-55, -59, -160, -161, -77, -57, -78, -58, -169, -172,
	-131, -79, -80, -81, -83, -82, -88, -84, -89, -159,
	-164, -13, -170, -90, 241, -87, 77, -101, -102, -103,
	-104, -105, -106, -107, -109, -110, 387, 393, 450, 626,
	62, -185, -187, 655, 656, 659, 547, 550, 163, 164,
	166, 167, 171, 174, -34, -35, -36, -37, -38, -39,
	-41, -40, -42, -43, -44, -45, -46, 237, 16, 555,
	-18, -21, -19, -22, -20, -28, -29, -27, -24, -26,
	-158, -25, -163, -23, -166, -168, -133, 262, 261, 39,
	328, 329, 330, 391, 260, 238, 240, 15, 32, 43,
	366, -186, 86, 548, 239, -188, 13, 661, -6, -3,
	-2, -144, -148, -152, -155, -156, -153, -154, -4, -122,
	121, 252, 628, -362, 383, 629, 631, 630, 89, 97,
	-355, -357, 463, 267, 387, 393, 626, 656, 659, 547,
	550, 562, 563, 564, 565, 566, 567, 568, 569, 571,
	572, 573, 574, 575, 576, 577, 587, 588, 578, 579,
	580, 581, 582, 583, 584, 585, 589, 590, 591, 592,
	593, 594, 595, 596, 597, 598, 599, 600, 601, 602,
	515, 612, 613, 614, 615, 543, 570, 606, 607, 608,
	609, 364, 365, 552, 279, 303, 418, 309, 316, 163,
	183, 177, 206, 197, 548, 172, 283, 321, 284, 96,
	166, 498, 111, 475, 447, 169, 298, 300, 302, 544,
	545, 377, 305, 542, 304, 306, 308, 546, 285, 367,
	193, 188, 297, 281, 186, 286, 41, 287, 360, 359,
	211, 288, 289, 557, 471, 363, 477, 313, 53, 445,
	187, 472, 301, 474, 215, 219, 489, 350, 490, 181,
	182, 479, 492, 210, 213, 214, 259, 356, 357, 44,
	554, 271, 493, 217, 651, 209, 204, 501, 317, 315,
	361, 208, 180, 203, 282, 66, 221, 220, 222, 441,
	442, 443, 444, 290, 291, 381, 488, 200, 189, 368,
	173, 23, 496, 266, 476, 394, 292, 310, 318, 216,
	218, 273, 278, 333, 556, 449, 362, 277, 314, 494,
	185, 270, 299, 265, 497, 652, 174, 396, 293, 167,
	307, 491, 654, 500, 65, 409, 179, 170, 644, 645,
	256, 164, 275, 280, 653, 294, 295, 296, 541, 320,
	319, 311, 171, 549, 201, 272, 207, 191, 178, 202,
	165, 274, 499, 410, 624, 366, 428, 199, 196, 276,
	249, 495, 478, 168, 432, 411, 194, 322, 619, 620,
	621, 382, 355, 323, 324, 192, 263, 469, 470, 327,
	438, 345, 412, 448, 419, 413, 228, 229, 331, 481,
	483, 212, 622, 334, 335, 336, 473, 337, 338, 339,
	340, 386, 57, 59, 98, 101, 100, 657, 658, 64,
	30, 372, 375, 407, 414, 347, 625, 553, 344, 348,
	349, 376, 26, 430, 398, 434, 433, 49, 50, 51,
	54, 55, 56, 58, 60, 61, 52, 540, 391, 404,
	502, 46, 48, 401, 28, 378, 429, 451, 343, 431,
	462, 47, 460, 461, 482, 27, 380, 379, 63, 45,
	437, 439, 440, 325, 341, 389, 634, 503, 384, 400,
	403, 385, 346, 374, 405, 68, 67, 397, 635, 392,
	390, 342, 558, 559, 351, 586, 369, 446, 537, 536,
	535, 534, 533, 532, 531, 530, 328, 329, 330, 415,
	416, 417, 427, 420, 421, 422, 423, 424, 425, 426,
	465, 466, 636, 484, 486, 487, 485, 244, 660, 370,
	371, 247, 638, 639, 99, 640, 642, 641, 29, 643,
	650, 647, 648, 649, 561, 232, -443, -441, -362, 548,
	626, 393, 547, 550, 387, 366, 656, 659, 391, 267,
	328, 329, 330, 463, 364, -235, -362, 660, -197, 251,
	40, -249, -362, -197, -87, -16, -15, -186, -187, -249,
	246, -371, 24, 445, -99, 446, 241, 242, 86, 78,
	-362, -9, -113, -8, -120, -85, -184, 450, -369, -362,
	328, 328, -369, 246, -364, 277, 426, -362, -498, 252,
	-447, -420, 278, -446, -422, -449, -423, 33, 237, 239,
	238, 560, 274, 16, 391, 248, 14, 13, 392, 260,
	26, 27, 29, 15, 393, 395, 30, 396, 399, 400,
	401, 43, 404, 405, 267, 89, 97, 92, 285, -234,
	-362, -397, -389, 118, -392, -384, -385, -387, -340, -534,
	-382, 86, 145, 146, 153, 119, 662, -386, -479, 37,
	121, 566, 570, 606, 513, -332, -333, -334, -335, -336,
	-337, 551, -362, -535, -533, 92, 102, 104, 108, 109,
	107, 105, 157, 190, 106, 93, 158, -187, 89, -555,
	576, -356, 599, 612, 613, 614, 615, 598, 62, -505,
	-513, 245, -511, 156, 195, 263, 191, 14, 151, 438,
	192, 607, 608, 609, 573, 595, 515, 577, 587, 602,
	568, 569, 571, 563, 564, 565, 567, 578, 580, 594,
	-514, 590, 600, 601, 586, 610, 611, 647, 603, 604,
	605, 642, 91, 90, 593, 592, 579, 574, 575, 581,
	562, 572, 582, 583, 591, 596, 597, 375, 111, 376,
	377, 505, 367, 81, 378, 252, 445, 71, 379, 380,
	381, 382, 383, 512, 384, 72, 385, 374, 267, 428,
	386, 194, 212, 517, 516, 518, 509, 506, 504, 507,
	508, 510, 511, 584, 585, 589, -136, -138, 617, -608,
	-323, -609, 6, 7, 8, 9, -610, 158, -599, 447,
	556, 92, 321, 364, 17, 505, 646, 546, 646, 546,
	168, 165, -434, 168, 117, 174, 173, 250, 168, -434,
	-362, 171, 646, 170, 644, 331, 273, -411, -175, 364,
	428, 337, 98, 277, -414, -412, 544, -499, 325, 321,
	297, 247, 114, -176, 257, 256, 112, 505, 245, 402,
	316, 57, 59, -570, -571, 234, 235, 236, -562, 538,
	-561, -362, 646, 651, 377, 100, 101, 644, 645, 28,
	246, 388, 273, 483, 481, 482, 484, 485, 486, 487,
	-65, -515, -497, 478, 477, -375, 470, 476, 468, 480,
	471, 365, 339, 560, 338, 237, 638, 545, 539, -350,
	412, 448, 502, 503, 389, 449, 489, 491, 472, 111,
	198, 195, 247, 249, 246, 644, 364, 505, 428, 98,
	337, 246, -570, 651, 165, 489, 491, 447, 277, 426,
	42, -440, 438, -439, -441, 490, 501, 90, 91, 488,
	-350, 111, 469, 469, -608, -323, -185, -187, -123, -560,
	546, 646, 247, 364, 428, 277, 248, 246, 541, 544,
	249, 505, 245, 328, 388, 273, 337, 98, 170, 644,
	-191, -192, -193, 230, 231, 232, 70, 235, 233, 67,
	33, 34, 35, -1, 125, 661, -389, -389, -6, 664,
	-6, -389, -362, -362, 160, -256, -260, -257, -259, -258,
	-262, -261, 195, 196, 156, 199, 205, 201, 202, 203,
	204, 206, 207, 208, 209, 210, 213, 214, 211, 32,
	212, 263, 191, 192, 193, 194, 215, 177, 197, 553,
	223, 178, 224, 179, 225, 180, 226, 181, 182, 227,
	183, 186, 187, 188, 189, 185, 159, -224, 92, 33,
	86, 159, 92, -216, 269, -197, -249, -241, 159, 662,
	-216, -608, -207, -208, 11, -249, -338, -362, 447, 128,
	-99, 78, -99, 446, 78, -99, 446, 241, -563, -564,
	-565, -567, 241, 446, 445, 242, -118, 159, 285, 17,
	-369, -369, 84, -249, -422, 277, -447, -420, 37, 83,
	160, 250, 160, 83, 86, 389, 364, 428, 390, 505,
	246, 402, 249, 277, 403, 364, 428, 246, 249, 505,
	277, 364, 246, 249, 428, 277, 403, 364, 468, 469,
	249, 28, 394, 397, 398, 469, -519, 501, 160, 117,
	114, 115, 116, -389, 135, -404, 128, 129, 130, 131,
	132, 133, 134, 142, 141, 152, 145, 146, 147, 148,
	149, 150, 151, 143, 144, 138, 118, 136, 140, 137,
	120, 155, -187, -389, -397, 62, -387, -387, -387, -387,
	-362, -479, -394, -389, 86, 86, 86, 86, 86, 159,
	105, 92, -389, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, -512, 86, 86, -401, -402,
	86, 86, -382, -338, 86, 92, 92, 86, 86, 86,
	92, 86, 86, 86, -402, -402, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, -208, 160, -207, 86, -207, -208, -188, -187,
	33, 34, 33, 34, 33, 34, 33, 34, -611, 635,
	86, 102, 657, 228, 17, -362, 644, -362, -593, 33,
	549, 549, 549, 549, 494, 555, 172, 173, 174, -362,
	171, 250, -362, -409, 252, -409, -409, -233, -362, -235,
	388, 249, 541, 249, -176, -409, -409, -409, -409, -409,
	248, -409, 24, 246, 246, 246, 246, -409, 512, 128,
	128, 60, -572, 176, 160, -562, -215, 86, -593, 652,
	653, 654, -374, 136, 140, -374, -319, 18, -319, 24,
	24, 275, 275, 275, -374, 315, -619, -620, 17, 138,
	-372, -620, -372, -372, -374, -621, 248, 479, 44, 276,
	275, -209, -210, 22, -209, 473, 469, -464, 474, 475,
	-376, -620, -375, -374, -374, -375, -374, -374, -374, 33,
	246, 249, 505, 337, 639, -619, -619, 32, 32, -498,
	-498, -249, -498, -498, 539, -351, -362, -498, -498, -498,
	-303, -304, -249, -573, 251, 654, -605, -604, 492, -607,
	494, 165, -441, 165, -441, 89, -422, 277, 277, 160,
	128, 24, -442, 128, 139, -441, -441, -442, -442, -273,
	42, -361, 156, -362, 92, -273, 42, -602, -601, -249,
	-208, -188, -187, 87, 87, 87, 549, -593, -498, -498,
	-498, -498, -498, -499, -498, -498, -498, -498, -498, -369,
	-225, -362, -235, 252, -498, -498, -498, -498, -189, -190,
	147, -389, -362, -193, -3, -146, -145, 122, 123, 125,
	629, 383, 628, 632, 626, -441, 42, -492, 410, 409,
	-486, -488, 86, -487, 86, -487, -487, -487, -487, -487,
	86, 86, -489, 86, -489, -489, -486, -490, 86, -490,
	-491, 86, -491, -490, -362, -468, 555, -395, -397, -362,
	40, -508, 62, -184, 86, 32, 86, -216, -362, 192,
	170, 643, 36, -509, 62, -184, 86, 32, -208, -139,
	40, -210, 21, 159, 102, 92, -118, -99, 78, -118,
	-99, -99, 87, 160, -566, 108, 109, -568, 210, 201,
	-362, -116, 92, -7, -11, -8, -9, -10, -47, -85,
	-184, 547, 550, -536, -534, 86, 33, 437, 83, 17,
	-448, 246, 505, 388, 273, 249, 364, -446, -429, -426,
	-424, -361, -422, -425, -424, -451, -338, 469, -140, 452,
	451, 327, -389, -389, -389, -389, -389, 107, 118, 355,
	108, 109, -384, -405, 33, 323, 324, -385, -385, -385,
	-385, -385, -385, -385, -385, -385, -385, -385, -385, -393,
	-403, -479, 86, 138, 136, 140, 137, 120, -387, -387,
	-385, -385, -275, -361, 156, 87, 160, -389, -559, -558,
	122, -389, -389, -389, -389, -415, -417, -338, 86, -362,
	-556, -557, 519, 520, 521, 522, 523, 524, 525, 526,
	527, 528, 529, 379, 374, 380, 378, 367, 386, 381,
	382, 194, 536, 537, 530, 531, 532, 533, 534, 535,
	-395, -395, -389, -556, -395, -331, 34, 33, -397, -397,
	-397, 87, -389, -569, 353, 352, 354, -211, -362, -395,
	87, 87, 87, 102, -397, -397, -395, -385, -395, -395,
	-395, -395, -557, -331, -331, -331, -331, 147, -397, -397,
	-331, -331, -331, -331, 147, -331, -331, -331, -331, -331,
	-331, -331, -331, -331, -331, -331, 87, 87, 87, 147,
	-397, -209, -138, -517, -516, -389, 42, -139, -210, -612,
	636, 86, -338, -600, 92, 92, 662, 170, 644, 17,
	505, -362, 17, 246, -362, 102, -362, 102, 495, 496,
	169, 173, 172, -362, 171, -362, -362, 118, -362, -362,
	36, 86, -225, -409, -409, -409, -577, -362, 93, -430,
	-427, -424, -362, -362, -420, -362, -351, -249, -409, -409,
	-409, -409, -249, -284, 54, 55, 56, -424, -177, 57,
	58, -573, -561, 36, -214, -362, -319, -387, -387, -389,
	364, 505, 246, -424, 277, -619, -374, -374, -352, -351,
	-376, -371, -376, -376, -319, -372, -374, -374, -389, -376,
	-372, -319, -362, 469, -319, -319, -464, -374, -373, -362,
	-373, -409, -351, -352, -352, -249, -249, -298, -305, -299,
	-306, 269, 243, 372, 373, 240, 238, 11, 239, -313,
	316, -410, 513, -279, -280, 78, 43, -282, 267, 414,
	407, 279, 283, 96, 284, 447, 285, 248, 287, 288,
	289, 304, 306, 259, 290, 291, 292, 438, 293, 164,
	305, 294, 295, 296, 390, -274, 6, 340, 555, 42,
	52, 53, 461, 460, 558, 280, -362, -577, -575, 32,
	-362, 32, -430, -424, -362, -362, 160, 250, -200, -202,
	-199, -195, -196, -201, -322, -324, -198, 86, -249, -187,
	-362, -441, 160, 493, 495, 496, -605, -442, -605, -442,
	250, 33, 437, -445, 437, 33, -420, -439, 489, 491,
	-435, 92, 438, -425, -444, 83, 156, -516, -442, -442,
	-444, -444, 155, 160, -603, 494, 495, 234, -209, 102,
	-251, -249, -577, -429, -420, -362, -498, -251, -251, -251,
	-364, -364, 86, 159, 37, -362, -362, -362, -362, -318,
	160, -317, 17, -363, -362, 36, 92, 159, -147, -145,
	124, -389, -6, 628, -389, -6, -6, -389, -6, -389,
	-496, 411, 102, 102, -341, 92, -341, 102, 102, 102,
	561, 87, 92, -433, 83, -510, -398, -554, 617, -218,
	87, -211, -552, -553, -211, -217, -362, -508, -241, 128,
	128, 128, 25, -510, -218, 87, -552, -209, 618, -139,
	-206, -205, -389, -362, 24, -118, -99, -564, 159, 160,
	-214, -448, -428, -425, -450, 147, -362, -436, 160, 555,
	665, 90, 250, -590, -589, 429, 87, 160, -520, 251,
	512, 92, 662, 445, 228, 229, 107, 355, 108, 109,
	-479, -397, -393, -387, -387, -385, -385, -391, 264, -391,
	117, -389, 663, -388, -558, 124, -389, 36, 160, 36,
	160, 84, 160, 87, -486, -389, 159, 87, 87, 17,
	17, 87, -389, 87, 87, 87, 87, 17, 17, -389,
	87, 159, 87, 87, 87, 87, 84, 87, 160, 87,
	87, 87, 87, 160, -397, -397, -389, -397, 87, 87,
	87, -389, -389, -389, -397, 87, -389, -389, -389, -389,
	-389, -389, -389, -389, -389, -389, -214, -458, 464, -458,
	-458, 160, 160, 160, 87, -139, 86, 102, 160, 658,
	-345, -344, 92, -362, -362, 170, 644, -362, 92, 644,
	-362, 92, 170, 174, 174, 173, -362, 92, 37, 24,
	24, 314, -234, -236, -237, -238, -239, -240, 138, 161,
	162, 86, -249, -249, -249, -579, 415, -591, 160, 42,
	-589, 505, -173, 327, -413, 84, -180, 17, 555, -249,
	-249, -249, -249, -263, 36, 17, -194, -250, -362, 86,
	87, 160, -362, -362, -362, -421, 84, -362, -352, -319,
	-319, -376, -319, -319, 160, 23, -374, -376, -376, -241,
	-372, -241, 159, -241, -351, -485, 36, -215, 160, 21,
	269, -248, -359, -245, -247, 254, -379, -246, 257, -548,
	255, 253, 112, 258, 312, 113, 248, -359, -359, 254,
	-283, 250, 36, -359, -301, 248, 358, 312, 255, 21,
	269, -300, 248, 113, -362, 254, 258, 255, 253, -358,
	128, -350, 155, 250, 44, 390, -358, 559, 269, -358,
	-358, -358, -358, -358, -358, -358, 286, 286, -358, -358,
	-358, -358, -358, -358, -358, -358, -358, -358, -358, 165,
	-358, -358, -358, -358, -358, -358, 86, 332, 281, 282,
	314, -580, 415, 32, 370, 370, 371, -591, 366, 32,
	-181, 364, -304, -302, -373, 32, -325, -326, -327, -328,
	-330, -329, 69, 73, 75, 79, 70, 71, 72, 76,
	81, 74, 32, 160, -360, -365, 36, -362, 92, -360,
	-187, -202, -200, -360, 86, -442, -604, -606, 497, 494,
	500, -444, -444, 102, 250, 86, 128, -444, -444, 42,
	-361, -601, 501, 495, -139, 160, 83, -251, -226, -227,
	-228, -229, -256, -338, 196, 199, 201, 202, 203, 204,
	206, 207, 208, 209, 210, 213, 214, 211, 212, 263,
	191, 192, 193, 194, 215, 177, 197, 553, 178, 179,
	180, 181, 182, 183, 186, 187, 188, 189, 185, -362,
	-235, -319, -190, -202, -362, 92, -362, 147, 125, -6,
	123, -151, -150, -149, 126, 626, 632, 125, 125, 125,
	87, 87, 87, 160, 87, 87, 87, 160, 87, 160,
	102, -523, 474, 41, 160, 86, 87, 160, 62, 160,
	128, 87, 160, -389, -362, 92, -389, 192, 87, 62,
	-139, 92, 160, -203, 38, 39, 159, 447, -362, -534,
	87, -450, 160, 250, 159, 159, -426, 393, -361, -428,
	21, 555, -338, 40, -345, 128, 662, -362, 87, -391,
	-391, 117, -387, -384, 87, 125, -389, 123, -254, -256,
	409, 410, -389, -254, -255, -261, 156, 195, 263, 194,
	193, 191, 409, 410, -273, -417, 552, -203, 87, -362,
	-389, -389, 87, -389, -389, 17, -362, -273, -385, -389,
	-208, -208, 87, 87, -457, -458, -457, -457, 87, 87,
	87, 87, -457, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 86, 102, 104, 102, 104, -516,
	-613, 64, 634, 63, 437, 107, 317, 160, 102, 92,
	663, 160, 128, 92, -362, -362, 17, 246, -362, 17,
	174, 92, -592, 321, 364, 505, 246, 364, 321, 505,
	246, -469, 102, 401, 87, 160, -338, -226, -215, 86,
	-215, -582, 476, 417, 427, -358, -381, -380, 366, 43,
	-503, 438, 423, 424, -427, 277, -351, -588, 99, 128,
	83, 344, 348, 350, 349, 345, 346, 347, -407, -408,
	-406, -410, -575, 86, 86, -184, 36, 136, -180, 86,
	86, 36, -480, 334, -256, -249, -194, -362, 17, 160,
	-574, 159, -1, -362, -362, -420, -374, -319, -389, -389,
	-319, -374, -374, -376, -362, -241, -480, -256, 36, -299,
	243, 239, -454, 314, 315, -455, -470, 317, -472, 86,
	-253, -338, -246, -547, -548, -409, -362, 113, -547, 113,
	86, -253, -338, -338, -302, -338, -362, -362, -362, -362,
	-309, -308, -338, -311, 33, -312, -362, -362, -362, -362,
	113, -362, 113, -278, 42, 49, 50, 51, -358, -358,
	198, -281, 42, 437, 439, 440, -311, 102, 102, 102,
	102, 92, 92, 92, -358, -358, 102, 92, -365, 92,
	-549, 173, 46, 47, 102, 102, 102, 102, 42, 92,
	-286, 42, 297, 301, 298, 299, 300, 92, 102, 42,
	102, 42, 102, 42, -362, 86, -550, -551, 92, 333,
	-469, -582, -358, 370, -441, 128, 128, -381, -584, 96,
	418, -587, 327, -183, 505, 33, -219, 243, 239, -575,
	-432, -431, -338, -199, -199, -199, -199, -199, -199, 69,
	80, 69, -212, 86, 69, 74, 69, 74, 69, -327,
	69, 80, -432, -201, -215, -365, 87, -598, -597, -596,
	-594, 77, 251, 78, -395, -444, 494, 498, 499, -428,
	-377, 92, -435, -223, 24, -249, -249, -501, 307, 308,
	87, 160, -256, -321, 19, 159, 121, -6, -147, -149,
	-389, -6, -389, 628, 383, 629, 92, 102, 102, -531,
	458, 453, 455, 113, -398, -518, -517, 62, -184, -211,
	-510, -553, -516, -362, 663, 663, 663, 663, 92, 62,
	-184, -510, -223, -523, -205, -204, 45, -362, 102, 17,
	-425, -420, 147, 147, -362, 394, -436, 92, 416, 92,
	246, 663, 92, -345, -384, -389, 87, -264, 182, 181,
	-264, 36, 87, 87, -487, -487, -486, -489, -486, -264,
	-264, 87, 86, -203, 87, 24, 87, 87, 87, -389,
	87, 87, 160, -506, 514, -507, 588, -457, -457, -457,
	-457, -457, -457, -457, -457, -457, -457, -457, -457, -457,
	-457, -457, -457, -457, -400, -399, 269, 459, 641, 641,
	459, 641, 641, 87, 160, -556, 160, -353, 322, -353,
	-344, 92, 250, 92, 170, -362, 92, 644, 92, -362,
	-362, -362, 314, -362, 314, -362, -362, 92, 92, 92,
	-238, -256, 87, 36, -242, -243, -244, -253, -245, -247,
	36, -583, 96, -578, 92, -362, 93, -584, 158, 368,
	42, 419, 420, 435, 363, 102, 102, 425, -576, -362,
	-182, 246, 364, -586, 53, 128, 92, -249, -406, -350,
	155, 288, 337, -316, -315, -362, 92, -242, -184, -249,
	-242, -242, -184, -481, 336, 21, 102, 146, -216, 84,
	159, -202, -250, -362, 147, 87, -319, -241, -319, -319,
	-374, -481, -184, -466, 318, 86, -464, 86, -464, 113,
	345, -473, -471, 269, -307, 46, 48, -256, -545, -362,
	-543, -545, -362, -543, -543, -409, -389, -307, -253, 250,
	32, 239, -310, 342, 343, 348, 350, -437, 313, 118,
	-437, 160, -203, 160, -362, -273, -273, 32, 92, 92,
	-251, 87, 160, 128, 102, 92, -583, -578, 128, -442,
	92, 92, -584, 92, 92, -588, 128, -252, 246, -351,
	160, -219, -219, -319, 160, 128, -221, -220, 83, 84,
	-222, 83, -220, -220, 69, -213, 92, 69, 69, -319,
	-596, -595, 24, -548, -548, -548, 87, 87, 15, -228,
	42, -320, 20, 21, 147, 125, 123, 125, 125, -362,
	87, 87, -493, 619, -527, -529, 453, 21, 21, 15,
	251, 87, -510, 663, -510, -531, 46, 47, -420, -436,
	438, -249, 160, 663, -254, -292, 92, -389, 87, -389,
	87, 92, 87, 92, -208, 21, 87, 160, 87, 87,
	87, 160, 87, 87, -389, 87, -556, -354, 192, 92,
	-354, 364, -363, -362, 17, -362, 92, -362, -469, 314,
	-469, 314, 246, -362, 244, -184, 87, 160, -184, 92,
	-581, 429, 102, 42, 102, 158, 421, -504, -174, 96,
	-251, 33, -219, -585, 96, 128, 662, 86, -358, -358,
	-358, -362, 87, 160, -358, -358, 87, 87, 87, -271,
	555, -482, 268, 102, 146, 102, 146, 102, -360, -202,
	-362, -319, -574, 159, -319, -482, -456, 319, 102, -385,
	86, -385, 86, -465, 316, 86, 87, 160, -362, -338,
	-268, -267, -265, 107, 118, 42, 407, -266, 96, 155,
	302, 305, 304, 280, 303, -297, -378, 83, 413, 342,
	343, -410, 619, 543, 253, 112, 113, 395, -379, 86,
	86, 84, 322, 86, 86, -545, 87, -307, -338, 42,
	-310, 42, 356, 313, -308, -362, 155, -273, 87, -551,
	92, -556, -581, 92, -444, -586, 92, -174, -251, -575,
	-208, -431, -516, -389, 86, -389, 87, 86, 69, 11,
	19, -382, -389, -397, 647, 649, 650, 252, -6, 629,
	383, -288, 620, 92, 21, 92, -525, 92, -432, -493,
	-142, -285, -350, 285, 87, -291, 138, 555, 87, 87,
	-457, -457, -460, -459, -463, 459, 314, 467, -397, 92,
	92, 87, 87, 92, -362, 170, 92, 662, 92, -469,
	92, -469, -362, 314, -230, -256, -178, 555, -271, -244,
	-178, 21, 555, 367, 42, 102, 42, 422, 92, -182,
	128, 108, 109, -346, -347, 92, -415, -273, -275, 92,
	-315, -382, -382, -269, -184, 36, -270, -313, -410, 555,
	-141, -140, -269, 555, 86, -483, 164, 102, 146, 102,
	102, -319, -319, -483, -472, 21, 87, -451, 87, -451,
	86, 128, -385, -471, -474, 62, -265, 107, -385, 92,
	-275, -276, 42, 301, 297, 128, 128, -277, 42, 281,
	282, -287, 86, 312, 15, 198, 86, 113, 113, -249,
	-415, -415, -546, 344, 345, 346, 351, 348, 349, 347,
	350, -546, -415, -415, 86, -438, -437, -385, -358, -358,
	155, -585, -209, -214, -544, -362, 253, 21, 21, -502,
	555, 648, 86, 86, -362, -362, -342, 621, 102, 92,
	455, -288, -494, 622, -521, -464, -273, 128, 87, 76,
	553, 556, 87, -462, 120, 421, 425, -383, -386, 102,
	104, 190, 158, 87, 87, -362, -349, -348, 92, 92,
	92, 314, -469, 554, -179, 61, 501, 92, 93, 416,
	92, 93, 367, -174, 92, 663, 160, 128, 87, -452,
	269, -184, 160, -313, -350, -142, -452, -272, -314, -362,
	92, -500, 173, 335, 555, 102, 146, 102, -208, -484,
	173, 335, -455, 87, 87, 87, -451, 102, 87, -478,
	-475, 86, -313, 271, 138, 92, 92, 102, 86, -511,
	32, 92, -416, 86, 87, 87, 87, 87, -415, 102,
	-273, -358, 87, 87, 160, 650, 86, -397, -397, 86,
	21, -342, -495, 623, 92, -530, 458, -524, -522, 453,
	454, 455, 456, 92, 554, 66, 557, -461, -462, 425,
	-383, -386, 617, 465, 465, 465, 663, 160, 128, -469,
	92, -232, -362, 312, 438, -347, 92, -418, -453, 321,
	21, -313, -358, -453, 87, 160, -358, -358, 335, 102,
	146, 102, -209, 335, -467, 320, 87, -478, -313, -477,
	-476, 319, 272, 86, 87, -389, -401, -358, 87, -290,
	-289, 551, -415, -418, 84, -418, 84, -418, 84, -418,
	84, 87, -273, -362, 253, -137, 86, 87, 87, -343,
	-362, -525, 92, -532, 251, -528, -529, 457, -522, 21,
	455, 21, 21, -143, 160, 66, 117, 466, 466, 466,
	-348, 92, 92, -231, 36, 460, 394, -419, 259, 356,
	357, 96, 555, 342, 343, 361, 360, 359, 362, 21,
	-454, -273, -314, -382, -382, 102, 102, 87, 160, -362,
	268, 86, -396, -390, -389, 268, 87, -362, -296, -294,
	-295, 83, 472, 310, 311, 87, -546, -546, -546, -546,
	-297, 87, 160, -395, 87, 160, -539, 86, 102, -527,
	-526, -528, 21, -525, 21, -525, -525, 462, 555, -461,
	92, -358, -358, 92, 92, 341, -358, -358, -358, -358,
	-338, 86, -466, -476, -475, -396, 87, 160, -437, -295,
	83, -294, 83, 16, 15, -418, -418, -418, -418, 86,
	87, -362, -542, 32, 87, -538, -537, -339, -533, -362,
	458, 459, 92, -525, 128, 556, -616, -615, 640, 102,
	102, -362, 102, 102, 102, 92, -451, -456, 87, -390,
	-293, 307, 308, 32, 173, -293, -395, -541, -540, -340,
	87, 160, 159, 92, 557, 92, 87, -472, 107, 42,
	309, 87, 160, 128, -537, -362, -540, 42, -389, 159,
	-362,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 316, 317, 318, 319,
	320, 321, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 0, 0, 0, 0, 0, 720, 721, 0, 684,
	0, 0, 0, 0, 0, 0, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 588, 589,
	590, 591, 592, 593, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 350, 346, 258, 259, 260,
	261, 262, 263, 264, 357, 358, 533, 0, 0, 0,
	0, 803, -2, 102, 0, 0, 0, 0, 339, 0,
	330, 330, 0, 0, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, -2, 733, 0,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 414, 415, 416,
	410, 411, 413, 412, -2, 0, 0, 733, 0, 0,
	0, 811, 0, 0, 0, 854, 872, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1414, 1415,
	1416, 1417, 2220, 2190, -2, 1952, 1926, 2114, 2115, 2009,
	2022, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265,
	2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275,
	2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285,
	2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295,
	2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305,
	2306, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891,
	1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
	1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
	1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
	1922, 1923, 1924, 1925, 1927, 1928, 1929, 1930, 1931, 1932,
	1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942,
	1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1953,
	1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963,
	1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973,
	1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983,
	1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993,
	1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
	2004, 2005, 2006, 2007, 2008, 2010, 2011, 2012, 2013, 2014,
	2015, 2016, 2017, 2018, 2019, 2020, 2021, 2024, 2025, 2026,
	2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036,
	2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,
	2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
	2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066,
	2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076,
	2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086,
	2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096,
	2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106,
	2107, 2108, 2109, 2110, 2111, 2112, 2113, 2116, 2117, 2118,
	2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128,
	2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138,
	2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, -2, 2148,
	2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158,
	2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168,
	2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178,
	2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188,
	2189, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199,
	2200, 2201, 2202, 2203, 2204, 2205, -2, -2, -2, 2209,
	2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219,
	2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230,
	2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240,
	2241, 2242, 2243, 2244, 2245, 2246, 0, 314, 312, 1896,
	1926, 1952, 2009, 2022, 2023, 2062, 2114, 2115, 2147, 2190,
	2206, 2207, 2208, 2220, 0, 0, 1009, 0, 781, 0,
	0, 786, 1361, 781, 351, 722, 723, 811, 837, 682,
	0, 388, 0, 1942, 392, 2197, 0, 0, 0, 0,
	679, 382, 383, 384, 385, 386, 387, 0, 0, 982,
	0, 0, 378, 0, 345, 2012, 2219, 1418, 0, 0,
	0, 0, 0, 201, 1133, 203, 1135, 207, 215, 0,
	0, 0, 220, 221, 224, 225, 226, 227, 228, 0,
	232, 0, 234, 237, 0, 239, 240, 0, 243, 244,
	245, 0, 255, 256, 257, 1136, 1137, 1138, -2, 130,
	1007, 1854, 1740, 0, 1747, 1760, 1771, 1500, 1501, 1502,
	1503, 0, 0, 0, 0, 0, 0, 1511, 1512, 0,
	1542, 2261, 2302, 2303, 0, 1520, 1521, 1522, 1523, 1524,
	1525, 0, 141, 153, 154, 1793, 1794, 1795, 1796, 1797,
	1798, 1799, 0, 1801, 1802, 1803, 1711, 1487, 1414, 0,
	2270, 0, 2292, 2297, 2298, 2299, 2300, 2291, 0, 0,
	1695, 0, 1685, 0, 0, -2, -2, 0, 0, 2087,
	-2, 2304, 2305, 2306, 2267, 2288, 2296, 2271, 2272, 2295,
	2263, 2264, 2265, 2258, 2259, 2260, 2262, 2274, 2276, 2287,
	0, 2283, 2293, 2294, 2195, 0, 0, 2242, 0, 0,
	0, 2237, 155, 156, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1706, -2, 1708, -2, 1710, -2, 1713, -2, -2,
	-2, -2, 1718, 1719, -2, 1721, -2, -2, -2, -2,
	-2, -2, -2, 1697, 1698, 1699, 1700, 1689, 1690, 1691,
	1692, 1693, 1694, -2, -2, -2, 837, 930, 0, 837,
	0, 812, 859, 862, 865, 868, 815, 0, 0, 103,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	340, 341, 329, 331, 0, 335, 0, 0, 331, 328,
	322, 0, 1174, 1174, 1174, 0, 0, 0, 0, 1174,
	1174, 1174, 1174, 1174, 0, 1174, 0, 0, 0, 0,
	0, 1174, 0, 1042, 1140, 1141, 1142, 1172, 1173, 1246,
	0, 0, 0, 738, 734, 735, 736, 737, 825, 0,
	827, 830, 0, 0, 659, 659, 897, 897, 0, 605,
	0, 0, 0, 659, 0, 619, 611, 0, 0, 0,
	659, 0, 0, 832, 832, 0, 662, 669, 659, 659,
	-2, 659, 659, 656, 659, 0, 0, 1186, 625, 626,
	627, 611, 611, 630, 631, 632, 642, 643, 670, 1878,
	0, 0, 533, 533, 0, 533, 533, 0, 533, 533,
	533, 0, 740, 1968, 2057, 1949, 2028, 1906, 2012, 2219,
	0, 287, 2087, 292, 0, 1951, 1971, 0, 0, 1990,
	0, -2, 0, 367, 837, 0, 0, 811, 0, 0,
	0, 0, 533, 533, 533, 533, 533, 1245, 533, 533,
	533, 533, 533, 0, 0, 0, 533, 533, 533, 533,
	0, 873, 874, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 5, 6, 19, 0, 0, 0, 0,
	0, 0, 109, 108, 0, 1855, 1873, 1806, 1807, 1808,
	1860, 1810, 1864, 1864, 1864, 1864, 1839, 1840, 1841, 1842,
	1843, 1844, 1845, 1846, 1847, 1848, 1864, 1864, 0, 0,
	1853, 1830, 1862, 1862, 1862, 1860, 1857, 1811, 1812, 1813,
	1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
	1824, 1867, 1867, 1870, 1870, 1867, 0, 428, 426, 427,
	1736, 0, 0, 0, 0, 781, 785, 1359, 0, 0,
	0, 837, -2, 0, 0, 683, 389, 1419, 0, 0,
	393, 0, 394, 0, 0, 396, 0, 0, 0, 417,
	0, 420, 404, 405, 406, 407, 400, 0, 181, 0,
	380, 381, 0, 0, 347, 0, 0, 0, 534, 0,
	0, 0, 0, 0, 0, 212, 208, 216, 219, 229,
	236, 0, 248, 250, 253, 209, 217, 222, 223, 230,
	251, 210, 213, 214, 218, 252, 254, 211, 231, 235,
	249, 233, 238, 241, 242, 247, 0, 182, 0, 0,
	0, 0, 0, 1746, 0, 0, 1779, 1780, 1781, 1782,
	1783, 1784, 1785, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -2, 1740, 0, 0, 1506, 1507, 1508, 1509,
	0, 1513, 0, 1543, 0, 0, 0, 0, 0, 0,
	1800, 1804, 0, 1736, 1736, 0, 1736, 1732, 0, 0,
	0, 0, 0, 0, 1736, 1668, 0, 0, 1670, 1686,
	0, 0, 1672, 1673, 0, 1676, 1677, 1736, 0, 1736,
	1681, 1736, 1736, 1736, 1664, 1665, 0, 1732, 1732, 1732,
	1732, 0, 0, 1732, 1732, 1732, 1732, 1732, 1732, 1732,
	1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 0, 0,
	0, 0, 832, 0, 838, 0, -2, 0, 856, 858,
	860, 861, 863, 864, 866, 867, 869, 870, 817, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 71, 73,
	0, 0, 0, 0, 0, 0, 333, 0, 338, 324,
	2049, 0, 323, 0, 0, 0, 0, 0, 1006, 0,
	0, 1174, 1174, 1174, 1043, 0, 0, 0, 0, 0,
	0, 0, 0, 1174, 1174, 1174, 1174, 0, 1192, 0,
	0, 0, 740, 739, 0, 826, 0, 0, 70, 594,
	595, 596, 897, 0, 0, 598, 599, 0, 600, 0,
	0, 611, 659, 659, 617, 618, 613, 612, 665, 666,
	662, 0, 662, 662, 897, 0, 636, 637, 638, 659,
	659, 644, 833, 0, 645, 646, 662, 0, 667, 668,
	897, 0, 0, 897, 897, 0, 654, 655, 657, 659,
	0, 0, 1174, 0, 675, 613, 613, 1879, 1880, 0,
	0, 1183, 0, 0, 0, 0, 678, 0, 0, 0,
	444, 445, 0, 0, 741, 0, 266, 270, 0, 273,
	0, 2057, 0, 2057, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 310, 311, 0, 0, 0, 0, 301,
	304, 1353, 1354, 1130, 1131, 305, 306, 359, 360, 0,
	832, 855, 857, 851, 852, 853, 0, 72, 0, 0,
	0, 0, 0, 533, 0, 0, 0, 0, 0, 716,
	0, 1022, 718, 0, 0, 0, 0, 0, 905, 899,
	901, 977, 141, 875, 8, 126, 123, 0, 19, 0,
	0, 19, 19, 0, 19, 315, 0, 1876, 1874, 1875,
	1809, 1861, 0, 1835, 0, 1836, 1837, 1838, 1849, 1850,
	0, 0, 1831, 0, 1832, 1833, 1834, 1825, 0, 1826,
	1827, 0, 1828, 1829, 313, 425, 0, 0, 1737, 1010,
	0, 759, 773, 754, 0, 762, 0, 0, 1361, 0,
	0, 0, 0, 742, 773, 744, 0, 762, 832, 809,
	0, 787, 0, 0, 390, 0, 401, 395, 0, 402,
	397, 398, 0, 0, 419, 421, 422, 423, 408, 409,
	680, 376, 377, 368, 369, 370, 371, 372, 373, 374,
	375, 0, 0, 379, 151, 0, 348, 349, 0, 0,
	0, 195, 196, 197, 198, 199, 200, 202, 186, 705,
	707, 1122, 1134, 0, 1125, 0, 205, 246, 178, 0,
	0, 0, 1741, 1742, 1743, 1744, 1745, 1750, 0, 1752,
	1754, 1756, 1758, 0, 1776, -2, -2, 1488, 1489, 1490,
	1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1761,
	1774, 1775, 0, 0, 0, 0, 0, 0, 1772, 1772,
	1767, 0, 1526, 1355, 1356, 1504, 0, 0, 1540, 1544,
	0, 0, 0, 0, 0, 0, 1157, 1860, 0, 142,
	1731, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643,
	1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653,
	1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663,
	0, 0, 1740, 0, 0, 0, 1733, 1734, 0, 0,
	0, 1623, 0, 0, 1629, 1630, 1631, 0, 768, 0,
	1696, 1669, 1687, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 929, 931, 0, 777, 779, 780, 806, 787, 813,
	0, 0, 0, 101, 106, 0, 1213, 0, 0, 0,
	0, 0, 0, 0, 74, 1187, 75, 1189, 342, 343,
	0, 0, 337, 325, 2049, 327, 0, 0, 0, 0,
	0, -2, 0, 0, 0, 0, 0, 1058, 1059, 531,
	1116, 0, 0, 0, 1132, 1161, 1170, 0, 0, 0,
	0, 0, 1219, 1044, 1049, 1050, 1051, 1045, 1046, 1052,
	1053, 0, 828, 0, 0, 946, 597, 660, 661, 898,
	601, 0, 0, 608, 2012, 613, 897, 897, 620, 614,
	621, 664, 622, 623, 624, 662, 897, 897, 834, 659,
	662, 647, 663, 662, 1361, 651, 0, 658, 1361, 676,
	1361, 0, 674, 628, 629, 1221, 830, 442, 443, 448,
	450, 0, 499, 499, 499, 482, 499, 0, 0, 470,
	1881, 0, 0, 0, 0, 479, 1881, 0, 0, 1881,
	1881, 1881, 1881, 1881, 1881, 1881, 0, 0, 1881, 1881,
	1881, 1881, 1881, 1881, 1881, 1881, 1881, 1881, 1881, 0,
	1881, 1881, 1881, 1881, 1881, 1338, 1881, 0, 498, 1184,
	489, 490, 491, 492, 497, 0, 0, 527, 0, 0,
	1057, 0, 531, 0, 0, 1099, 0, 0, 910, 0,
	911, 912, 913, 908, 948, 972, 972, 0, 972, 952,
	1361, 0, 0, 0, 278, 279, 267, 0, 268, 0,
	0, 281, 282, 0, 284, 285, 286, 293, 1949, 2028,
	288, 290, 0, 0, 294, 307, 308, 309, 0, 0,
	299, 300, 0, 0, 362, 363, 365, 0, 787, 1188,
	702, 1357, 703, 704, 708, 0, 0, 711, 712, 713,
	714, 715, 1024, 0, 0, 1108, 1109, 1110, 1111, 897,
	0, 906, 0, 902, 978, 0, 980, 0, 0, 124,
	19, 0, 117, 114, 0, 0, 0, 0, 0, 1856,
	1805, 1877, 0, 0, 0, 1858, 0, 0, 0, 0,
	0, 107, 789, 749, 0, 753, 770, 0, 774, 0,
	0, 766, 758, 763, 0, 0, 783, 750, 1360, 0,
	0, 0, 0, 743, 0, 0, 748, 787, 0, 810,
	839, 840, 843, 1420, 0, 403, 399, 418, 0, 0,
	0, 0, 189, 1119, 0, 190, 194, 184, 0, 0,
	0, 1124, 0, 1121, 1126, 0, 204, 0, 0, 179,
	180, 1204, 1213, 0, 0, 0, 1751, 1753, 1755, 1757,
	1759, 0, 1762, 1772, 1772, 1768, 0, 1763, 0, 1765,
	0, 1741, 1510, 0, 1545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 843, 0, 0, 1613, 1614, 0,
	0, 1618, 0, 1620, 1621, 1622, 1624, 0, 0, 0,
	1628, 0, 1667, 1688, 1671, 1674, 0, 1678, 0, 1680,
	1682, 1683, 1684, 0, 837, 837, 0, 0, 1584, 1584,
	1584, 0, 0, 0, 0, 1584, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1529, 0, 1530,
	1531, 0, 0, 0, 932, 807, 0, 0, 0, 0,
	0, 1211, 0, 91, 0, 0, 0, 0, 96, 0,
	0, 76, 344, 332, 334, 0, 326, 0, 1175, 0,
	0, 0, 0, 0, 1012, 1013, 1015, 0, 1018, 1019,
	1020, 1024, 830, 0, 830, 1069, 1881, 535, 0, 0,
	1118, 0, 1088, 0, 0, 0, -2, 0, 0, 1170,
	0, 0, 0, 1223, 0, 0, 0, 727, 731, 23,
	831, 0, 604, 602, 0, 606, 0, 607, 659, 615,
	616, 897, 639, 640, 0, 0, 897, 659, 659, 650,
	662, 671, 0, 672, 1361, 1223, 0, 0, 1183, 1289,
	1257, 460, 0, 1374, 1375, 500, 0, 1381, 1390, 1174,
	1452, 0, 1390, 0, 0, 1392, 1393, 0, 0, 0,
	0, 483, 484, 0, 469, 0, 0, 0, 0, 0,
	0, 468, 0, 0, 510, 0, 0, 0, 0, 0,
	1882, 1881, 1881, 0, 477, 478, 0, 481, 0, 0,
	0, 0, 0, 0, 0, 0, 1881, 1881, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 1346,
	0, 1069, 1881, 0, 0, 0, 0, 535, 1113, 1086,
	1104, 0, 446, 447, 507, 0, 0, 0, 0, 0,
	0, 0, 938, 0, 0, 0, 937, 0, 0, 0,
	0, 0, 0, 0, 830, 973, 0, 975, 976, 950,
	-2, 0, 910, 955, 1736, 0, 271, 272, 0, 0,
	277, 295, 297, 269, 0, 0, 0, 296, 298, 302,
	303, 361, 364, 366, 849, 0, 0, 1247, 0, 1025,
	1026, 1028, 1029, 0, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1933, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1023,
	719, 888, 900, 907, 979, 981, 142, 903, 0, 127,
	19, 126, 118, 119, 0, 19, 0, 0, 0, 0,
	1866, 1865, 1851, 0, 1852, 1863, 1868, 0, 1871, 0,
	429, 793, 0, 0, 773, 775, 0, 0, 773, 0,
	0, 782, 0, 0, 0, 0, 0, 0, 0, 773,
	849, 789, 0, 846, 844, 845, 0, 0, 681, 152,
	424, 0, 0, 0, 0, 0, 706, 0, 1123, 186,
	0, 0, 206, 0, 0, 0, 1213, 1208, 1735, 1764,
	1766, 0, 1773, 1769, 1505, 1514, 1541, 0, 0, 1547,
	1559, 1559, 0, 0, 0, 1550, 1864, 1864, 1553, 1860,
	1862, 1860, 1559, 1559, 0, 1158, 0, 1159, 843, 143,
	0, 0, 1619, 0, 0, 0, 769, 0, 0, 0,
	1580, 1582, 1584, 1584, 1591, 1585, 1592, 1593, 1584, 1584,
	1584, 1584, 1598, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
	1584, 1584, 1584, 1584, 1578, 0, 0, 1794, 1795, 778,
	0, 0, 820, 821, 822, 823, 824, 0, 0, 61,
	61, 1213, 0, 100, 92, 0, 0, 0, 0, 0,
	336, 0, 77, 78, 80, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 0, 1017, 0, 0, 0, 1367,
	0, 1073, 1070, 1071, 1072, 0, 1113, 536, 537, 538,
	539, 0, 0, 0, 1117, 0, 0, 1081, 0, 0,
	0, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, -2,
	1178, 0, 0, 0, 1367, 1197, 0, 0, 1202, 1367,
	1367, 0, 1231, 0, 1220, 781, 0, -2, 0, 0,
	729, 0, 0, 947, 603, 609, 897, 633, 835, 836,
	1361, 897, 897, 659, 677, 673, 1231, 1222, 0, 449,
	499, 0, 1277, 0, 0, 1283, 0, 1290, 453, 0,
	501, 0, 1380, 1408, 1391, 1408, 1453, 1408, 1408, 1174,
	0, 501, 0, 0, 471, 0, 0, 0, 0, 0,
	467, 504, 843, 454, 456, 457, 458, 508, 509, 511,
	0, 513, 514, 473, 485, 486, 487, 488, 0, 0,
	0, 480, 493, 494, 495, 496, 455, 1306, 1307, 1308,
	1311, 1312, 1313, 1314, 0, 0, 1317, 1318, 1319, 1320,
	1321, 1405, 1406, 1407, 1322, 1323, 1324, 1325, 1326, 1327,
	1328, 1347, 1348, 1349, 1350, 1351, 1352, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 1337, 0, 0, 1342, 0, 0,
	0, 1073, 0, 0, 0, 0, 0, 1113, 530, 0,
	0, 1088, 0, 1106, 0, 1100, 1101, 0, 0, 751,
	897, 354, 0, 942, 933, 0, 917, 0, 919, 939,
	920, 940, 0, 0, 924, 0, 926, 0, 922, 923,
	928, 921, 897, 909, 949, 974, 951, 954, 956, 957,
	963, 0, 0, 0, 0, 265, 274, 275, 276, 283,
	0, 555, 289, 805, 0, 1358, 709, 710, 1248, 1249,
	717, 0, 1030, 886, 0, 0, 122, 125, 0, 120,
	0, 0, 0, 0, 112, 110, 1859, 0, 0, 795,
	166, 0, 0, 0, 771, 0, 776, 773, 757, 767,
	756, 764, 765, 784, 1362, 1363, 1364, 1365, 0, 773,
	747, 746, 808, 793, 841, 842, 0, 1421, 391, 0,
	1120, 186, 191, 192, 193, 187, 185, 1127, 0, 1129,
	0, 1206, 0, 0, 1770, 1546, 1515, 1548, 1560, 1561,
	1549, 0, 1517, 1518, 1551, 1552, 1554, 1555, 1556, 1557,
	1558, 1519, 0, 1160, 1615, 0, 1617, 1625, 1626, 0,
	1675, 1679, 0, 0, 0, 0, 0, 1589, 1590, 1594,
	1595, 1596, 1597, 1599, 1600, 1601, 1602, 1603, 1604, 1605,
	1606, 1607, 1608, 1609, 837, 1579, 0, 0, 0, 0,
	0, 0, 0, 818, 0, 0, 0, 63, 0, 63,
	1212, 1214, 0, 977, 0, 0, 97, 0, 0, 79,
	81, 0, 2013, 0, 0, 0, 0, 88, 1005, 1008,
	1014, 1016, 0, 0, 0, 1368, 1369, 1371, 1372, 1373,
	0, 1041, 0, 0, 1061, 1062, 1063, 1075, 0, 541,
	542, 0, 0, 0, 554, 550, 551, 552, 532, 1112,
	1095, 0, 0, 1084, 0, 0, 1094, 0, 1179, 1881,
	1881, 1881, 0, 0, 1291, 1881, 1881, 0, 1199, 1201,
	0, 0, 1295, 1234, 0, 0, 1225, 0, 972, 0,
	0, 897, 728, 731, 732, 829, 610, 648, 652, 649,
	897, 1234, 441, 1255, 0, 0, 0, 0, 0, 1287,
	0, 0, 1259, 0, 472, 502, 0, -2, 0, 1409,
	0, 1394, 1409, 0, 0, 1408, 0, 461, 501, 0,
	0, 0, 515, 520, 521, 0, 517, 518, 1448, 0,
	519, 0, 506, 0, 512, 1309, 1310, 0, 1315, 1316,
	0, 1340, 0, 0, 0, 452, 522, 0, 0, 0,
	523, 524, 529, 1114, 1115, 1081, 0, 1095, 0, 1105,
	0, 1102, 1103, 837, 0, 0, 914, 943, 0, 0,
	915, 0, 916, 918, 941, 0, 935, 925, 927, 353,
	958, 0, 0, 960, 961, 962, 953, 291, 850, 1027,
	0, 871, 0, 0, 904, 0, 19, 0, 0, 115,
	1869, 1872, 797, 0, 794, 167, 0, 0, 0, 0,
	761, 772, 755, 1366, 745, 795, 847, 848, 188, 183,
	1128, 1216, 0, 1207, 0, 1472, 1528, 0, 1627, 0,
	1584, 1581, 1584, 1583, 1575, 0, 1532, 0, 1534, 1535,
	1536, 0, 1538, 1539, 0, 816, 0, 59, 0, 62,
	60, 0, 99, 93, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 1047, 1295, 0, 1047, 1074,
	1060, 0, 0, 543, 544, 0, 547, 553, 1076, 0,
	0, 1078, 1079, 1080, 0, 0, 1092, 0, 0, 0,
	0, 1171, 1185, 0, 0, 0, -2, 0, -2, 1196,
	0, 1240, 0, 1232, 0, 1224, 0, 1227, 897, 897,
	-2, 725, 730, 0, 653, 1240, 1257, 0, 1278, 0,
	0, 0, 0, 0, 0, 0, 1258, 0, 1271, 503,
	1410, -2, 1424, 1426, 0, 1184, 1429, 1430, 0, 0,
	0, 0, 0, 0, 1479, 1438, 0, 0, 1442, 1443,
	1444, 0, 0, 1447, 0, 1788, 1789, 0, 1451, 0,
	0, 0, 0, 0, 0, 0, 1388, 462, 463, 0,
	465, 466, 1881, 1449, 505, 459, 1881, 475, 1339, 1343,
	1344, 1341, 528, 525, 526, 1084, 1087, 1098, 1107, 752,
	832, 355, 356, 944, 0, 934, 936, 967, 964, 0,
	0, 1031, 887, 895, 2242, 2244, 2241, 116, 121, 0,
	0, 799, 0, 796, 0, 790, 792, 177, 760, 797,
	137, 169, 0, 0, 1516, 0, 0, 0, 1616, 1666,
	1587, 1588, 0, 1576, 0, 1570, 1571, 1572, 1577, 0,
	0, 819, 814, 64, 95, 0, 98, 68, 83, 0,
	84, 0, 0, 0, 0, 1033, 1040, 1054, 1190, 1370,
	1039, 0, 0, 540, 545, 0, 548, 549, 1096, 1095,
	0, 1082, 1083, 0, 1090, 0, 0, 1180, 1181, 1182,
	1292, 1293, 1294, 1250, 1198, 0, -2, 1303, 0, 0,
	1194, 1216, 1250, 0, 0, 1228, 0, 1235, 0, 1233,
	1226, 837, 726, 1237, 451, 1289, 1279, 0, 1281, 0,
	0, 0, 0, 1260, -2, 0, 1425, 1427, 1428, 1431,
	1432, 1433, 1484, 1485, 1486, 0, 0, 1436, 1481, 1482,
	1483, 1437, 0, 0, 0, 0, 0, 1786, 1787, 1477,
	0, 0, 1395, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
	1404, 1396, 0, 0, 0, 1387, 1389, 464, 0, 0,
	1881, 1097, 352, 0, 0, 968, 970, 965, 966, 889,
	0, 0, 0, 0, 111, 113, 128, 0, 798, 168,
	0, 799, 139, 0, 160, 0, 1217, 0, 1527, 0,
	0, 0, 1586, 1573, 0, 0, 0, 0, 0, 1790,
	1791, 1792, 0, 1533, 1537, 94, 0, 66, 0, 85,
	86, 0, 0, 0, 0, 1055, 1056, 1064, 1065, 0,
	1067, 1068, 546, 1077, 1085, 1089, 1092, 0, 1144, 1252,
	0, 1200, 1183, 1305, 1881, 1203, 1252, 0, 1297, 1881,
	1881, 1218, 0, 1230, 0, 1242, 0, 1236, 832, 440,
	0, 1239, 1275, 1280, 1282, 1284, 0, 1288, 1286, 1261,
	-2, 0, 1269, 0, 0, 1434, 1435, 0, 0, 1685,
	1881, 0, 1467, 0, 1144, 1144, 1144, 1144, 0, 516,
	474, 0, 945, 959, 0, 896, 0, 0, 0, 0,
	0, 788, 129, 0, 138, 157, 0, 170, 171, 0,
	0, 0, 0, 1209, 0, 1475, 1476, 0, 1562, 0,
	0, 0, 1566, 1567, 1568, 1569, 65, 68, 0, 0,
	87, 0, 1032, 0, 1066, 1091, 1093, 1143, 1193, 0,
	1289, 1304, 0, 1195, 1296, 0, 0, 0, 1229, 1241,
	0, 1244, 724, 1238, 1256, 0, 1285, 1262, 1270, 0,
	1265, 0, 0, 0, 1480, 0, 1441, 0, 1446, 1455,
	1468, 0, 0, 1376, 0, 1378, 0, 1382, 0, 1384,
	0, 0, 476, 969, 971, 0, 1736, 891, 892, 0,
	801, 791, 140, 144, 0, 166, 163, 0, 172, 0,
	0, 0, 0, 1205, 0, 1473, 0, 1563, 1564, 1565,
	67, 69, 89, 0, 1034, 1035, 1048, 1145, 1881, 1881,
	0, 0, 0, 1151, 1152, 1881, 1881, 1881, 1881, 0,
	1277, 1309, 1298, 1299, 1300, 1243, 1276, 1264, 0, -2,
	1272, 0, 0, 1738, 1748, 1749, 1439, 1445, 1454, 1456,
	1457, 0, 1469, 1470, 1471, 1478, 1144, 1144, 1144, 1144,
	1386, 890, 0, 0, 800, 0, 131, 0, 0, 161,
	162, 164, 0, 173, 0, 175, 176, 0, 0, 1574,
	1036, 0, 0, 1148, 1149, 0, 0, 0, 0, 0,
	1253, 0, 1255, 1266, -2, 0, 1274, 0, 1440, 1458,
	0, 1459, 0, 0, 0, 1377, 1379, 1383, 1385, 1736,
	893, 802, 1215, 0, 145, 0, 147, 149, 150, 1411,
	158, 159, 165, 174, 0, 0, 1021, 1037, 0, 1146,
	1147, 1150, 1153, 1154, 1155, 1156, 0, 1257, 1273, 1739,
	1460, 1462, 1463, 0, 0, 1461, 0, 132, 133, 0,
	146, 0, 0, 1210, 1474, 1038, 1254, 1251, 1464, 1466,
	1465, 894, 0, 0, 148, 1412, 134, 135, 136, 0,
	1413,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 119, 3, 3, 3, 150, 142, 3,
	86, 87, 147, 145, 160, 146, 159, 148, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 664, 661,
	129, 128, 130, 3, 665, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 152, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 662, 141, 663, 153,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 120, 121, 122, 123, 124,
	125, 126, 127, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 143, 144, 149, 151, 154, 155, 156,
	157, 158, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:846
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:853
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:859
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:867
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:873
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:877
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:892
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:896
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:902
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:907
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:911
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:944
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:958
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:969
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:981
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:985
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:990
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:994
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1000
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1014
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1018
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1022
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1026
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1033
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1041
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1049
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1055
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1062
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1071
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1079
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1087
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1097
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1107
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1117
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(""),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1127
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELDATABASE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1137
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELTABLE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1149
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1159
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1169
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1180
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1191
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				PitrValue:    yyDollar[10].int64ValUnion(),
				PitrUnit:     yyDollar[11].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1203
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1213
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1228
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1236
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1244
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1252
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1261
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1271
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1283
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1291
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1300
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1310
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1320
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1330
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1350
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1356
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1363
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1371
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1377
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1386
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1396
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1404
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1412
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1420
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1430
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1438
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1448
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1455
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1464
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1474
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1478
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1484
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1488
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1494
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1503
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1513
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1517
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1523
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1532
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1536
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1542
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1563
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1577
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1584
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1588
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1594
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1598
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1604
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1611
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1619
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1623
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1635
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1639
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1653
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1657
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1662
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1669
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1673
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1677
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1683
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1692
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1703
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1707
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1713
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1717
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1723
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1727
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1733
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarExpr{
				Name:   v,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1753
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1772
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1776
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1780
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1785
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1789
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1798
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1808
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1815
		{
			yyVAL.str = yyDollar[3].str
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1820
		{
			yyVAL.str = "\n"
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1827
		{
			yyVAL.str = yyDollar[3].str
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1832
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1836
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1864
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1868
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1874
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1882
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1902
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1921
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1946
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1950
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1954
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1959
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1963
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1969
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1982
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1993
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2006
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2010
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2020
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2033
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2046
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2052
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2058
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2066
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2076
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2086
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2090
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2094
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2098
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2102
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2106
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2113
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2117
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2123
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2130
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2139
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2143
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2149
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2153
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2157
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2161
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2165
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2169
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2173
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2177
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2181
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2185
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2189
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2193
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2197
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2201
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2205
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2209
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2213
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2217
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2221
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2225
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2229
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2233
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2237
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2241
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2245
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2249
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2253
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2257
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2261
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2265
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2269
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2273
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2277
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2281
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2285
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2289
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2293
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2297
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2301
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2305
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2309
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2313
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2317
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2321
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2325
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2329
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2333
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2337
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2341
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2345
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2349
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2364
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2373
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2380
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2387
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2396
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2414
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2418
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2424
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2431
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2439
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2443
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2447
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2451
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2457
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2461
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2467
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2474
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2481
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2490
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2520
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2524
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2528
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2534
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2540
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2544
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2551
		{
			yyVAL.str = yyDollar[3].str
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2557
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2561
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2567
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2575
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2584
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2593
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2601
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2609
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2632
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   v,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2651
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2658
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2665
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2673
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2680
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2687
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2696
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2700
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2704
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2710
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2714
		{
			yyVAL.str = yyDollar[1].str
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2720
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2724
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2730
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2734
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2748
		{
			yyLOCAL = &tree.SavePoint{Name: tree.Identifier(yyDollar[2].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2754
		{
			yyLOCAL = &tree.ReleaseSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2760
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2765
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2770
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[5].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2775
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2781
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2787
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2792
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2796
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2800
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2804
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2808
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2812
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2816
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2820
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2824
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2830
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2834
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2838
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2842
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2847
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2852
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2858
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2871
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2884
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2897
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2910
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2926
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2933
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2944
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2955
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2959
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2965
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2975
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2981
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2985
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2991
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2997
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3001
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3005
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3009
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3015
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3028
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3034
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3038
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3044
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3048
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3054
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3060
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3071
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3077
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3081
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3085
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3089
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3093
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3097
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3105
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3113
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3123
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3131
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3141
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3151
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3167
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3171
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3179
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3187
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3227
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3231
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3237
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3243
		{
			yyVAL.str = yyDollar[1].str
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3248
		{
			yyVAL.str = "true"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3249
		{
			yyVAL.str = "false"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3250
		{
			yyVAL.str = yyDollar[1].str
		}
	case 424:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3255
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3261
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3270
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3277
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3285
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3289
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3314
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3337
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3347
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3354
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3363
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3371
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3375
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3381
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3392
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3396
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3402
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3406
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3430
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3440
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3450
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3466
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3484
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3488
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3494
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3498
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3504
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3510
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3518
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3528
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3536
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3546
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3556
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3566
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3573
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3577
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3581
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3585
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3589
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3596
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3602
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3606
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3610
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3614
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3618
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3622
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3626
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3630
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3635
		{
			yyVAL.str = ""
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3666
		{
			yyVAL.str = ""
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3670
		{
			yyVAL.str = string("COLUMN")
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3675
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3681
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3687
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3695
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3699
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3705
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3713
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3720
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3726
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3732
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3738
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3744
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3751
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3758
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3766
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3772
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3784
		{
			var keyType = tree.INDEX_TYPE_HNSW
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, 0)
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3790
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3796
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3804
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3808
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3815
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3833
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3848
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3863
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3878
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3891
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3897
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3908
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3920
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountUnlock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3933
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3937
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3945
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3949
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3954
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3958
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3974
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3978
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3982
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3986
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3993
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3997
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4001
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4005
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4012
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4016
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4023
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4027
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4031
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4035
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4042
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4049
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4055
		{
			yyVAL.item = nil
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4060
		{
			yyVAL.item = nil
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4109
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4115
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4121
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4127
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4136
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4144
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4152
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4160
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level: tree.RECOVERYWINDOWLEVELACCOUNT,
			}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4166
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4173
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4181
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:       tree.RECOVERYWINDOWLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4190
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4194
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4198
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4209
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4213
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4219
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4224
		{
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4228
		{
		}
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4233
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4243
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4253
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4261
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4267
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4273
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4279
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4285
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4291
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4297
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4306
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4310
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4314
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4318
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4322
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4326
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4330
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4334
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4340
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4349
		{
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4351
		{
		}
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4360
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4370
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4379
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4383
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4387
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4393
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4399
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4405
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4411
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4420
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4431
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4443
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4451
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4457
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4469
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4483
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4489
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4495
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4502
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4506
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4511
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4515
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4519
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4524
		{
			yyVAL.str = ""
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4528
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4534
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4549
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4553
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4559
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4567
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4574
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4582
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4588
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4594
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4599
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4607
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4613
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4618
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4624
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4630
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4634
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4662
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4670
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4678
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4686
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4690
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4696
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4709
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4717
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4726
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4732
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4740
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4748
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4756
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4762
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4770
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4776
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4784
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4790
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4800
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4805
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4812
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4828
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4841
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4852
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4856
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4862
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4868
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4877
		{
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4879
		{
		}
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4882
		{
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4891
		{
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4895
		{
		}
	case 742:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4900
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4909
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4916
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4922
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4930
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4937
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4944
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4964
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4972
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4982
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4986
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4992
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4999
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5005
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5013
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5020
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5027
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5046
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5050
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5054
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5059
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5063
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5067
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:5073
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5082
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5086
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5092
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5096
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5102
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5106
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5112
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5117
		{
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5121
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5128
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5132
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5139
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5144
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5148
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5154
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5158
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5164
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5168
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5173
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5177
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5190
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5201
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5212
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5234
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5257
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5265
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5274
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5278
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5291
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5295
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5300
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5304
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5311
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5316
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5323
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5329
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5333
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5337
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5341
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5345
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5349
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5354
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5358
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5364
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5374
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5389
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5393
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5407
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5411
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5417
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5426
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5430
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5434
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5438
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5442
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5448
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5455
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5464
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5468
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5474
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5482
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5486
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5491
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5495
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5501
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5505
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5509
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5514
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5518
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5524
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5530
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5534
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5540
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5545
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5549
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5553
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5558
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5562
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5566
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5571
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5575
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5583
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5587
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5591
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5605
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5609
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5619
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5629
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5639
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5651
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5659
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5667
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5676
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5684
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5692
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5700
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5708
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5716
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5724
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5732
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5740
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5750
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: tree.QuerySpecOptionDistinct&yyDollar[2].selectOptionsUnion() != 0,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].selectOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5763
		{
			yyLOCAL = tree.QuerySpecOptionNone
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5767
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5773
		{
			yyLOCAL = yyDollar[1].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5777
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion() | yyDollar[2].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5783
		{
			yyLOCAL = tree.QuerySpecOptionSqlSmallResult
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5787
		{
			yyLOCAL = tree.QuerySpecOptionSqlBigResult
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5791
		{
			yyLOCAL = tree.QuerySpecOptionSqlBufferResult
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5795
		{
			yyLOCAL = tree.QuerySpecOptionStraightJoin
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5799
		{
			yyLOCAL = tree.QuerySpecOptionHighPriority
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5803
		{
			yyLOCAL = tree.QuerySpecOptionSqlCalcFoundRows
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5807
		{
			yyLOCAL = tree.QuerySpecOptionSqlNoCache
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5811
		{
			yyLOCAL = tree.QuerySpecOptionAll
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5815
		{
			yyLOCAL = tree.QuerySpecOptionDistinct
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5819
		{
			yyLOCAL = tree.QuerySpecOptionDistinctRow
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5841
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5845
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5850
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5854
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5864
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5873
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5882
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5893
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5897
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5902
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5906
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5911
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5915
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5921
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5925
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5931
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5935
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5939
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5943
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5948
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5956
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5962
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5970
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5980
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5990
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5994
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6000
		{
			if strings.Contains(yyDollar[2].str, ":") {
				ss := strings.SplitN(yyDollar[2].str, ":", 2)
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: ss[0],
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
					Option:   ss[1],
				}
			} else {
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: yyDollar[2].str,
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6020
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6029
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6038
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6046
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:6057
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6067
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 921:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6071
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6077
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6081
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6091
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6095
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6099
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 927:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6103
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6109
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 929:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6115
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6126
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6130
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:6136
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6142
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6146
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6152
		{
			yyVAL.str = yyDollar[1].str
		}
	case 936:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6159
		{
			yyVAL.str = yyDollar[2].str
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6165
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6171
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 939:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6175
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 940:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6179
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 941:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6183
		{
			yyVAL.str = tree.JOIN_TYPE_CENTROIDX + ":" + yyDollar[2].str
		}
	case 942:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6189
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6193
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6199
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6203
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6209
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6213
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6219
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6223
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6233
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6246
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6252
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6258
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6272
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6283
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6290
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6294
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6300
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6310
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6314
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6318
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6323
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6327
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6331
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6335
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6340
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6344
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6348
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6352
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6356
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6361
		{
			yyVAL.str = ""
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6365
		{
			yyVAL.str = yyDollar[1].str
		}
	case 974:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6369
		{
			yyVAL.str = yyDollar[2].str
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6375
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6379
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 977:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6384
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6388
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6392
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6396
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6400
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6406
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1005:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6448
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6461
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6467
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1008:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6473
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6486
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6491
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6498
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6505
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6509
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6515
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6521
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6526
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6530
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6534
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6538
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6545
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6578
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6583
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6590
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6597
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6601
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6607
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6613
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6617
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6621
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6627
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6633
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6639
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6643
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6649
		{
			yyVAL.str = ""
		}
	case 1038:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6656
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1039:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6662
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6677
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6694
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6711
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1043:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6715
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1044:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6721
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1045:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6725
		{
			yyVAL.str = "DEFINER = "
		}
	case 1046:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6729
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1047:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6734
		{
			yyVAL.str = ""
		}
	case 1048:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6738
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1054:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6752
		{
			yyVAL.str = ""
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6760
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6766
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6771
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6777
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6790
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6795
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6800
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6806
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6813
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6820
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6827
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6834
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6842
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6848
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6855
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6862
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6870
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6876
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6885
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6902
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6918
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6937
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6943
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6952
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6970
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6976
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6983
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6991
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6997
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7005
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7011
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7019
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7025
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7034
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7038
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7043
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7047
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:7054
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1095:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7059
		{
			yyVAL.str = ""
		}
	case 1096:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7063
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1097:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7069
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7082
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7093
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7097
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7103
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7109
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7115
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7122
		{
			yyVAL.str = ""
		}
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7126
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7131
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7135
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7141
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7149
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7157
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7165
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7173
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1113:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7178
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7190
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7201
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7310
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7314
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7320
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7333
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7337
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7343
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7356
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7360
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7364
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7369
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7373
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7379
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7386
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7392
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7401
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1132:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7408
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7419
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7423
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7429
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7438
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7442
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7446
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7451
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7455
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7459
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7463
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7469
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7500
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7504
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				} else if opt2.HnswM > 0 {
					opt1.HnswM = opt2.HnswM
				} else if opt2.HnswEfConstruction > 0 {
					opt1.HnswEfConstruction = opt2.HnswEfConstruction
				} else if len(opt2.HnswQuantization) > 0 {
					opt1.HnswQuantization = opt2.HnswQuantization
				} else if opt2.HnswEfSearch > 0 {
					opt1.HnswEfSearch = opt2.HnswEfSearch
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7538
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7544
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7556
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7562
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7568
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7574
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7580
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7586
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("M should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswM = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7597
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_CONSTRUCTION should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfConstruction = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7608
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_SEARCH should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfSearch = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7619
		{
			io := tree.NewIndexOption()
			io.HnswQuantization = yyDollar[3].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7628
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7632
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7638
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7652
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7666
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7670
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7674
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7678
		{
			yyLOCAL = tree.INDEX_TYPE_HNSW
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7682
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7686
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7690
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7694
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7700
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7715
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7719
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7730
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7734
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7739
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7743
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7749
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7753
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7759
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7768
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7777
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7783
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7787
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7793
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7804
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7810
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7828
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7846
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7864
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7880
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7884
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7893
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7905
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7914
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7926
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7936
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7946
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7957
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7967
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7978
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7986
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7997
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8004
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8014
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8027
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8035
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8044
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8053
		{
			yyVAL.str = ""
		}
	case 1210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:8057
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8063
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8067
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8072
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8076
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:8083
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8095
		{
			yyVAL.str = ""
		}
	case 1217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8099
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1218:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8105
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8126
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8140
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8144
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8148
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8154
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8158
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8165
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8172
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8179
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8186
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8190
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8194
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8198
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8202
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8209
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8216
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8220
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8227
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8234
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8238
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8244
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8250
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8254
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8261
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8268
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8275
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8282
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8286
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8291
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8295
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8299
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8304
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8308
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8321
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8325
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8333
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8341
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8345
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8357
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8361
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8367
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8371
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8377
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8390
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8404
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8408
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8414
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8418
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8424
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8433
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8444
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8448
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8453
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8457
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8463
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8468
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8476
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8480
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8490
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8494
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8505
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8513
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8521
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8529
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8540
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8549
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8559
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8569
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8573
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8578
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8582
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8588
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8592
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8598
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8607
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8617
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8621
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8627
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8631
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8637
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8646
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8656
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8660
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8666
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8670
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8674
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8680
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8684
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8688
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8692
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8696
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8700
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8704
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8709
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8713
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8717
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8721
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8725
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8729
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8733
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8737
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8741
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8745
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8749
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8753
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8757
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8763
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8769
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8773
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8777
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8781
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8785
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8791
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8797
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8803
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8809
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8815
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8821
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8825
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8829
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8833
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8838
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8849
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8853
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8859
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8870
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8874
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8880
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8884
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8888
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8892
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8896
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8900
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8914
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8918
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8927
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8933
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8941
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8945
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8952
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8961
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8969
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8976
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ASOFTIMESTAMP,
				Expr: tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8984
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8991
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8995
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9001
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9005
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9009
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9015
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9019
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9025
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9038
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9051
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9092
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9134
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9148
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9154
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9167
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9180
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9193
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9206
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9221
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9231
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9237
		{
			yyVAL.str = ""
		}
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9241
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9251
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9257
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9263
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9285
		{
			yyVAL.str = ""
		}
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9289
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1410:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9295
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9301
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9305
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9310
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9318
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9322
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9326
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9330
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9336
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9342
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9346
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9351
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9358
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9362
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9368
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9372
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9378
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9382
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9386
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9390
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9394
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9398
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9403
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9407
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9411
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9415
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9419
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9423
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9427
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9431
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9435
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9439
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9453
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9457
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9461
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9465
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9469
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9473
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9479
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9483
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9488
		{
			yyVAL.str = ""
		}
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9492
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9498
		{
			yyVAL.str = ""
		}
	case 1453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9502
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1454:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9508
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9525
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9532
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9539
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9546
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9553
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9562
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9568
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9574
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9578
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9582
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9586
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9590
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9595
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9602
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9606
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9610
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9615
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9619
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9623
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9627
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9631
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9636
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9640
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9645
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9649
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9665
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9671
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9675
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9679
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9683
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9687
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9691
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9695
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9699
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9703
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9707
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9711
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9715
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9719
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9725
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9729
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9733
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9737
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9741
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9745
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9749
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9753
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9757
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9761
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9803
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9807
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9811
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9816
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9824
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9828
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9832
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9836
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9840
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9850
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9854
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9858
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9862
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9866
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9870
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9874
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9878
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9891
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9897
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9906
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9915
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9926
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9936
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9946
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9955
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9965
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9975
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9985
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9994
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10004
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10008
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10013
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10017
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10023
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10027
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:10033
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10042
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1548:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10054
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10071
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10088
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10101
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10114
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10126
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10140
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10155
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10170
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10187
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10202
		{
		}
	case 1563:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10209
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10213
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10217
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10223
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10227
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10231
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10235
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10241
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10245
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10249
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10255
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10263
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10273
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10277
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10284
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10289
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10293
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10298
		{
			yyVAL.str = ","
		}
	case 1581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10302
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10307
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10311
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1584:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10316
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10323
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10349
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10361
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10373
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10384
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10395
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10406
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10416
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10426
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10437
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10448
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10459
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10470
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10481
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10492
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10503
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10514
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10525
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10536
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10547
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10558
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10569
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10580
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10591
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10615
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10624
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10633
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10642
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10651
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10662
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10671
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10681
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10690
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10699
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10708
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10717
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10729
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10740
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10753
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10765
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10788
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1664:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10824
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10837
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10850
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10862
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10871
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10879
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10887
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10900
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10909
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10920
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10931
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10940
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10952
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10962
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10972
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10981
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10992
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11001
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11011
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11020
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11029
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11039
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11043
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11049
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11053
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11072
		{
		}
	case 1696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:11074
		{
		}
	case 1731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11116
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11128
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11132
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11136
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:11142
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11147
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11151
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11157
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11161
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11167
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11171
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11178
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11182
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11186
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11195
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11199
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11203
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11208
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11212
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11218
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11222
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11226
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11230
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11234
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11238
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11242
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11246
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11250
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11254
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11262
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11266
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11270
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11274
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11278
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11282
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11286
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11290
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11294
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11298
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11304
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11308
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11314
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11318
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11325
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11329
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11333
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11339
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11343
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11347
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11351
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11355
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11359
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11363
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11369
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11373
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11377
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11381
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11387
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11400
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11405
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11411
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11415
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11428
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11433
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11437
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11441
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11445
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11449
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11456
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11460
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11464
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11468
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11475
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11486
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11491
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11497
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11509
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11521
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11533
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11546
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11559
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11572
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11585
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11598
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11611
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11624
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11637
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11650
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11663
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11678
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11705
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11747
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11783
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11819
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11836
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11848
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11868
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11888
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11908
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11924
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11937
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11950
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11963
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11976
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11988
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12000
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12012
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12024
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12036
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12048
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1846:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12060
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12072
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12084
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12096
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12109
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1851:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12122
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1852:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12135
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1853:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12148
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12163
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1855:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12171
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1856:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12180
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12190
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12213
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1859:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12218
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1860:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12224
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1862:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12231
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1863:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12235
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1864:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12240
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1865:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12244
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1866:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12250
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1867:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12256
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1868:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12263
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1869:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12270
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1870:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12279
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1871:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12286
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1872:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12293
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1873:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12302
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1874:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12306
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1875:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12310
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1876:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12316
		{
		}
	case 1877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12318
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1881:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12328
		{
			yyVAL.str = ""
		}
	case 1882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12332
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
