// Copyright 2021 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// unaryops.go is generated by unaryops.template and overloadGenerate.go, do not edit it directly.

package operator

import (
	"github.com/matrixorigin/matrixone/pkg/container/nulls"
	"github.com/matrixorigin/matrixone/pkg/container/vector"
	"github.com/matrixorigin/matrixone/pkg/encoding"
	"github.com/matrixorigin/matrixone/pkg/vectorize/neg"
	"github.com/matrixorigin/matrixone/pkg/vm/process"
)

// unaryMinus operator's evaluation for arguments: [int8]
func FdsOpUnaryMinusInt8(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	v := vecs[0]
	rtl := 1
	vs := v.Col.([]int8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(vs)), v.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt8Slice(vec.Data)
	rs = rs[:len(vs)]
	vec.Col = rs
	nulls.Set(vec.Nsp, v.Nsp)
	vector.SetCol(vec, neg.Int8Neg(vs, rs))
	return vec, nil
}

// unaryMinus operator's evaluation for arguments: [int16]
func FdsOpUnaryMinusInt16(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	v := vecs[0]
	rtl := 2
	vs := v.Col.([]int16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(vs)), v.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt16Slice(vec.Data)
	rs = rs[:len(vs)]
	vec.Col = rs
	nulls.Set(vec.Nsp, v.Nsp)
	vector.SetCol(vec, neg.Int16Neg(vs, rs))
	return vec, nil
}

// unaryMinus operator's evaluation for arguments: [int32]
func FdsOpUnaryMinusInt32(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	v := vecs[0]
	rtl := 4
	vs := v.Col.([]int32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(vs)), v.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt32Slice(vec.Data)
	rs = rs[:len(vs)]
	vec.Col = rs
	nulls.Set(vec.Nsp, v.Nsp)
	vector.SetCol(vec, neg.Int32Neg(vs, rs))
	return vec, nil
}

// unaryMinus operator's evaluation for arguments: [int64]
func FdsOpUnaryMinusInt64(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	v := vecs[0]
	rtl := 8
	vs := v.Col.([]int64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(vs)), v.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(vs)]
	vec.Col = rs
	nulls.Set(vec.Nsp, v.Nsp)
	vector.SetCol(vec, neg.Int64Neg(vs, rs))
	return vec, nil
}

// unaryMinus operator's evaluation for arguments: [float32]
func FdsOpUnaryMinusFloat32(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	v := vecs[0]
	rtl := 4
	vs := v.Col.([]float32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(vs)), v.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat32Slice(vec.Data)
	rs = rs[:len(vs)]
	vec.Col = rs
	nulls.Set(vec.Nsp, v.Nsp)
	vector.SetCol(vec, neg.Float32Neg(vs, rs))
	return vec, nil
}

// unaryMinus operator's evaluation for arguments: [float64]
func FdsOpUnaryMinusFloat64(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	v := vecs[0]
	rtl := 8
	vs := v.Col.([]float64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(vs)), v.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat64Slice(vec.Data)
	rs = rs[:len(vs)]
	vec.Col = rs
	nulls.Set(vec.Nsp, v.Nsp)
	vector.SetCol(vec, neg.Float64Neg(vs, rs))
	return vec, nil
}
