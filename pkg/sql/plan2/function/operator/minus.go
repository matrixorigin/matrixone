// Copyright 2021 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// minus.go is generated by minus.template and overloadGenerate.go, do not edit it directly.

package operator

import (
	"github.com/matrixorigin/matrixone/pkg/container/nulls"
	"github.com/matrixorigin/matrixone/pkg/container/types"
	"github.com/matrixorigin/matrixone/pkg/container/vector"
	"github.com/matrixorigin/matrixone/pkg/encoding"
	"github.com/matrixorigin/matrixone/pkg/vectorize/sub"
	"github.com/matrixorigin/matrixone/pkg/vm/process"
)

// minus operator's evaluation for arguments: [int8,int8]
func FdsOpMinusInt8Int8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int8), rv.Col.([]int8)
	rtl := 1
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt8Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Int8SubScalar(lvs[0], rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt8Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Int8SubByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt8Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Int8Sub(lvs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [int16,int16]
func FdsOpMinusInt16Int16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int16), rv.Col.([]int16)
	rtl := 2
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt16Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Int16SubScalar(lvs[0], rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt16Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Int16SubByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt16Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Int16Sub(lvs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [int32,int32]
func FdsOpMinusInt32Int32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int32), rv.Col.([]int32)
	rtl := 4
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt32Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Int32SubScalar(lvs[0], rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt32Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Int32SubByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt32Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Int32Sub(lvs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [int64,int64]
func FdsOpMinusInt64Int64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int64), rv.Col.([]int64)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Int64SubScalar(lvs[0], rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Int64SubByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Int64Sub(lvs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [uint8,uint8]
func FdsOpMinusUint8Uint8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint8), rv.Col.([]uint8)
	rtl := 1
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint8Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Uint8SubScalar(lvs[0], rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint8Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Uint8SubByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint8Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Uint8Sub(lvs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [uint16,uint16]
func FdsOpMinusUint16Uint16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint16), rv.Col.([]uint16)
	rtl := 2
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint16Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Uint16SubScalar(lvs[0], rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint16Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Uint16SubByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint16Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Uint16Sub(lvs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [uint32,uint32]
func FdsOpMinusUint32Uint32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint32), rv.Col.([]uint32)
	rtl := 4
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint32Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Uint32SubScalar(lvs[0], rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint32Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Uint32SubByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint32Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Uint32Sub(lvs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [uint64,uint64]
func FdsOpMinusUint64Uint64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint64), rv.Col.([]uint64)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint64Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Uint64SubScalar(lvs[0], rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint64Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Uint64SubByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Uint64Sub(lvs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [float32,float32]
func FdsOpMinusFloat32Float32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]float32), rv.Col.([]float32)
	rtl := 4
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeFloat32Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Float32SubScalar(lvs[0], rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeFloat32Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Float32SubByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat32Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Float32Sub(lvs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [float64,float64]
func FdsOpMinusFloat64Float64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]float64), rv.Col.([]float64)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeFloat64Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Float64SubScalar(lvs[0], rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeFloat64Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Float64SubByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat64Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Float64Sub(lvs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [decimal64,decimal64]
func FdsOpMinusDecimal64Decimal64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]types.Decimal64), rv.Col.([]types.Decimal64)
	lvScale, rvScale := lv.Typ.Scale, rv.Typ.Scale
	resultScale := lvScale
	if lvScale < rvScale {
		resultScale = rvScale
	}
	resultTyp := types.Type{Oid: types.T_decimal64, Size: 8, Width: 18, Scale: resultScale}
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(resultTyp.Size)*int64(len(rvs)), resultTyp)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeDecimal64Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Decimal64SubScalar(lvs[0], rvs, lvScale, rvScale, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(resultTyp.Size)*int64(len(lvs)), resultTyp)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeDecimal64Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Decimal64SubScalar(rvs[0], lvs, rvScale, lvScale, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(resultTyp.Size)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeDecimal64Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Decimal64Sub(lvs, rvs, lv.Typ.Scale, rv.Typ.Scale, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [decimal128,decimal128]
func FdsOpMinusDecimal128Decimal128(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]types.Decimal128), rv.Col.([]types.Decimal128)
	lvScale := lv.Typ.Scale
	rvScale := rv.Typ.Scale
	resultScale := lvScale
	if lvScale < rvScale {
		resultScale = rvScale
	}
	resultTyp := types.Type{Oid: types.T_decimal128, Size: 16, Width: 38, Scale: resultScale}
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(resultTyp.Size)*int64(len(rvs)), resultTyp)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeDecimal128Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Decimal128SubScalar(lvs[0], rvs, lvScale, rvScale, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(resultTyp.Size)*int64(len(lvs)), resultTyp)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeDecimal128Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Decimal128SubScalar(rvs[0], lvs, rvScale, lvScale, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(resultTyp.Size)*int64(len(lvs)), resultTyp)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeDecimal128Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Decimal128Sub(lvs, rvs, lv.Typ.Scale, rv.Typ.Scale, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Int8,Int16]
func FdsOpMinusInt8Int16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int8), rv.Col.([]int16)
	rtl := 2
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt16Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Int16SubScalar(int16(lvs[0]), rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt16Slice(vec.Data)
		rs = rs[:len(lvs)]
		for i := range rs {
			rs[i] = int16(lvs[i])
		}
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Int16SubByScalar(int16(rvs[0]), rs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt16Slice(vec.Data)
	rs = rs[:len(rvs)]
	for i := range rs {
		rs[i] = int16(lvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Int16Sub(rs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Int8,Int32]
func FdsOpMinusInt8Int32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int8), rv.Col.([]int32)
	rtl := 4
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt32Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Int32SubScalar(int32(lvs[0]), rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt32Slice(vec.Data)
		rs = rs[:len(lvs)]
		for i := range rs {
			rs[i] = int32(lvs[i])
		}
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Int32SubByScalar(int32(rvs[0]), rs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt32Slice(vec.Data)
	rs = rs[:len(rvs)]
	for i := range rs {
		rs[i] = int32(lvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Int32Sub(rs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Int16,Int32]
func FdsOpMinusInt16Int32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int16), rv.Col.([]int32)
	rtl := 4
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt32Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Int32SubScalar(int32(lvs[0]), rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt32Slice(vec.Data)
		rs = rs[:len(lvs)]
		for i := range rs {
			rs[i] = int32(lvs[i])
		}
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Int32SubByScalar(int32(rvs[0]), rs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt32Slice(vec.Data)
	rs = rs[:len(rvs)]
	for i := range rs {
		rs[i] = int32(lvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Int32Sub(rs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Int8,Int64]
func FdsOpMinusInt8Int64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int8), rv.Col.([]int64)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Int64SubScalar(int64(lvs[0]), rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		for i := range rs {
			rs[i] = int64(lvs[i])
		}
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Int64SubByScalar(int64(rvs[0]), rs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(rvs)]
	for i := range rs {
		rs[i] = int64(lvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Int64Sub(rs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Int16,Int64]
func FdsOpMinusInt16Int64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int16), rv.Col.([]int64)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Int64SubScalar(int64(lvs[0]), rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		for i := range rs {
			rs[i] = int64(lvs[i])
		}
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Int64SubByScalar(int64(rvs[0]), rs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(rvs)]
	for i := range rs {
		rs[i] = int64(lvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Int64Sub(rs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Int32,Int64]
func FdsOpMinusInt32Int64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int32), rv.Col.([]int64)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Int64SubScalar(int64(lvs[0]), rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		for i := range rs {
			rs[i] = int64(lvs[i])
		}
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Int64SubByScalar(int64(rvs[0]), rs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(rvs)]
	for i := range rs {
		rs[i] = int64(lvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Int64Sub(rs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Uint8,Uint16]
func FdsOpMinusUint8Uint16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint8), rv.Col.([]uint16)
	rtl := 2
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint16Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Uint16SubScalar(uint16(lvs[0]), rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint16Slice(vec.Data)
		rs = rs[:len(lvs)]
		for i := range rs {
			rs[i] = uint16(lvs[i])
		}
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Uint16SubByScalar(uint16(rvs[0]), rs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint16Slice(vec.Data)
	rs = rs[:len(rvs)]
	for i := range rs {
		rs[i] = uint16(lvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Uint16Sub(rs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Uint8,Uint32]
func FdsOpMinusUint8Uint32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint8), rv.Col.([]uint32)
	rtl := 4
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint32Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Uint32SubScalar(uint32(lvs[0]), rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint32Slice(vec.Data)
		rs = rs[:len(lvs)]
		for i := range rs {
			rs[i] = uint32(lvs[i])
		}
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Uint32SubByScalar(uint32(rvs[0]), rs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint32Slice(vec.Data)
	rs = rs[:len(rvs)]
	for i := range rs {
		rs[i] = uint32(lvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Uint32Sub(rs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Uint16,Uint32]
func FdsOpMinusUint16Uint32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint16), rv.Col.([]uint32)
	rtl := 4
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint32Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Uint32SubScalar(uint32(lvs[0]), rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint32Slice(vec.Data)
		rs = rs[:len(lvs)]
		for i := range rs {
			rs[i] = uint32(lvs[i])
		}
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Uint32SubByScalar(uint32(rvs[0]), rs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint32Slice(vec.Data)
	rs = rs[:len(rvs)]
	for i := range rs {
		rs[i] = uint32(lvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Uint32Sub(rs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Uint8,Uint64]
func FdsOpMinusUint8Uint64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint8), rv.Col.([]uint64)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint64Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Uint64SubScalar(uint64(lvs[0]), rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint64Slice(vec.Data)
		rs = rs[:len(lvs)]
		for i := range rs {
			rs[i] = uint64(lvs[i])
		}
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Uint64SubByScalar(uint64(rvs[0]), rs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(rvs)]
	for i := range rs {
		rs[i] = uint64(lvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Uint64Sub(rs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Uint16,Uint64]
func FdsOpMinusUint16Uint64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint16), rv.Col.([]uint64)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint64Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Uint64SubScalar(uint64(lvs[0]), rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint64Slice(vec.Data)
		rs = rs[:len(lvs)]
		for i := range rs {
			rs[i] = uint64(lvs[i])
		}
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Uint64SubByScalar(uint64(rvs[0]), rs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(rvs)]
	for i := range rs {
		rs[i] = uint64(lvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Uint64Sub(rs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Uint32,Uint64]
func FdsOpMinusUint32Uint64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint32), rv.Col.([]uint64)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint64Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Uint64SubScalar(uint64(lvs[0]), rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint64Slice(vec.Data)
		rs = rs[:len(lvs)]
		for i := range rs {
			rs[i] = uint64(lvs[i])
		}
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Uint64SubByScalar(uint64(rvs[0]), rs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(rvs)]
	for i := range rs {
		rs[i] = uint64(lvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Uint64Sub(rs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Float32,Float64]
func FdsOpMinusFloat32Float64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]float32), rv.Col.([]float64)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeFloat64Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Float64SubScalar(float64(lvs[0]), rvs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeFloat64Slice(vec.Data)
		rs = rs[:len(lvs)]
		for i := range rs {
			rs[i] = float64(lvs[i])
		}
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Float64SubByScalar(float64(rvs[0]), rs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat64Slice(vec.Data)
	rs = rs[:len(rvs)]
	for i := range rs {
		rs[i] = float64(lvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Float64Sub(rs, rvs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Int16,Int8]
func FdsOpMinusInt16Int8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int16), rv.Col.([]int8)
	rtl := 2
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt16Slice(vec.Data)
		rs = rs[:len(rvs)]
		for i := range rs {
			rs[i] = int16(rvs[i])
		}
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Int16SubScalar(lvs[0], rs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt16Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Int16SubByScalar(int16(rvs[0]), lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt16Slice(vec.Data)
	rs = rs[:len(lvs)]
	for i := range rs {
		rs[i] = int16(rvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Int16Sub(lvs, rs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Int32,Int8]
func FdsOpMinusInt32Int8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int32), rv.Col.([]int8)
	rtl := 4
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt32Slice(vec.Data)
		rs = rs[:len(rvs)]
		for i := range rs {
			rs[i] = int32(rvs[i])
		}
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Int32SubScalar(lvs[0], rs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt32Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Int32SubByScalar(int32(rvs[0]), lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt32Slice(vec.Data)
	rs = rs[:len(lvs)]
	for i := range rs {
		rs[i] = int32(rvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Int32Sub(lvs, rs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Int32,Int16]
func FdsOpMinusInt32Int16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int32), rv.Col.([]int16)
	rtl := 4
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt32Slice(vec.Data)
		rs = rs[:len(rvs)]
		for i := range rs {
			rs[i] = int32(rvs[i])
		}
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Int32SubScalar(lvs[0], rs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt32Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Int32SubByScalar(int32(rvs[0]), lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt32Slice(vec.Data)
	rs = rs[:len(lvs)]
	for i := range rs {
		rs[i] = int32(rvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Int32Sub(lvs, rs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Int64,Int8]
func FdsOpMinusInt64Int8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int64), rv.Col.([]int8)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		for i := range rs {
			rs[i] = int64(rvs[i])
		}
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Int64SubScalar(lvs[0], rs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Int64SubByScalar(int64(rvs[0]), lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	for i := range rs {
		rs[i] = int64(rvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Int64Sub(lvs, rs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Int64,Int16]
func FdsOpMinusInt64Int16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int64), rv.Col.([]int16)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		for i := range rs {
			rs[i] = int64(rvs[i])
		}
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Int64SubScalar(lvs[0], rs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Int64SubByScalar(int64(rvs[0]), lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	for i := range rs {
		rs[i] = int64(rvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Int64Sub(lvs, rs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Int64,Int32]
func FdsOpMinusInt64Int32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int64), rv.Col.([]int32)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		for i := range rs {
			rs[i] = int64(rvs[i])
		}
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Int64SubScalar(lvs[0], rs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Int64SubByScalar(int64(rvs[0]), lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	for i := range rs {
		rs[i] = int64(rvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Int64Sub(lvs, rs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Uint16,Uint8]
func FdsOpMinusUint16Uint8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint16), rv.Col.([]uint8)
	rtl := 2
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint16Slice(vec.Data)
		rs = rs[:len(rvs)]
		for i := range rs {
			rs[i] = uint16(rvs[i])
		}
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Uint16SubScalar(lvs[0], rs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint16Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Uint16SubByScalar(uint16(rvs[0]), lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint16Slice(vec.Data)
	rs = rs[:len(lvs)]
	for i := range rs {
		rs[i] = uint16(rvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Uint16Sub(lvs, rs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Uint32,Uint8]
func FdsOpMinusUint32Uint8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint32), rv.Col.([]uint8)
	rtl := 4
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint32Slice(vec.Data)
		rs = rs[:len(rvs)]
		for i := range rs {
			rs[i] = uint32(rvs[i])
		}
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Uint32SubScalar(lvs[0], rs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint32Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Uint32SubByScalar(uint32(rvs[0]), lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint32Slice(vec.Data)
	rs = rs[:len(lvs)]
	for i := range rs {
		rs[i] = uint32(rvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Uint32Sub(lvs, rs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Uint32,Uint16]
func FdsOpMinusUint32Uint16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint32), rv.Col.([]uint16)
	rtl := 4
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint32Slice(vec.Data)
		rs = rs[:len(rvs)]
		for i := range rs {
			rs[i] = uint32(rvs[i])
		}
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Uint32SubScalar(lvs[0], rs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint32Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Uint32SubByScalar(uint32(rvs[0]), lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint32Slice(vec.Data)
	rs = rs[:len(lvs)]
	for i := range rs {
		rs[i] = uint32(rvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Uint32Sub(lvs, rs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Uint64,Uint8]
func FdsOpMinusUint64Uint8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint64), rv.Col.([]uint8)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint64Slice(vec.Data)
		rs = rs[:len(rvs)]
		for i := range rs {
			rs[i] = uint64(rvs[i])
		}
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Uint64SubScalar(lvs[0], rs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint64Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Uint64SubByScalar(uint64(rvs[0]), lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(lvs)]
	for i := range rs {
		rs[i] = uint64(rvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Uint64Sub(lvs, rs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Uint64,Uint16]
func FdsOpMinusUint64Uint16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint64), rv.Col.([]uint16)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint64Slice(vec.Data)
		rs = rs[:len(rvs)]
		for i := range rs {
			rs[i] = uint64(rvs[i])
		}
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Uint64SubScalar(lvs[0], rs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint64Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Uint64SubByScalar(uint64(rvs[0]), lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(lvs)]
	for i := range rs {
		rs[i] = uint64(rvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Uint64Sub(lvs, rs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Uint64,Uint32]
func FdsOpMinusUint64Uint32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint64), rv.Col.([]uint32)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint64Slice(vec.Data)
		rs = rs[:len(rvs)]
		for i := range rs {
			rs[i] = uint64(rvs[i])
		}
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Uint64SubScalar(lvs[0], rs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint64Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Uint64SubByScalar(uint64(rvs[0]), lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(lvs)]
	for i := range rs {
		rs[i] = uint64(rvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Uint64Sub(lvs, rs, rs))
	return vec, nil
}

// minus operator's evaluation for arguments: [Float64,Float32]
func FdsOpMinusFloat64Float32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]float64), rv.Col.([]float32)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeFloat64Slice(vec.Data)
		rs = rs[:len(rvs)]
		for i := range rs {
			rs[i] = float64(rvs[i])
		}
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, sub.Float64SubScalar(lvs[0], rs, rs))
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeFloat64Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, sub.Float64SubByScalar(float64(rvs[0]), lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat64Slice(vec.Data)
	rs = rs[:len(lvs)]
	for i := range rs {
		rs[i] = float64(rvs[i])
	}
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	vector.SetCol(vec, sub.Float64Sub(lvs, rs, rs))
	return vec, nil
}
