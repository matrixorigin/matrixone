// Copyright 2021 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// like.go is generated by like.template and overloadGenerate.go, do not edit it directly.

package operator

import (
	"errors"
	"github.com/matrixorigin/matrixone/pkg/container/nulls"
	"github.com/matrixorigin/matrixone/pkg/container/types"
	"github.com/matrixorigin/matrixone/pkg/container/vector"
	"github.com/matrixorigin/matrixone/pkg/encoding"
	"github.com/matrixorigin/matrixone/pkg/vectorize/like"
	"github.com/matrixorigin/matrixone/pkg/vm/process"
)

var (
	errUnexpected = errors.New("unexpected case for LIKE operator")
)

// like operator's evaluation for arguments: [char,char]
func FdsOpLikeCharChar(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.(*types.Bytes), rv.Col.(*types.Bytes)
	rtl := int64(SelsType.Size) //Type(T_sel).Length
	switch {
	// 1. []string Reg expr
	case !lc && rc:
		vec, err := process.Get(proc, int64(len(lvs.Lengths))*rtl, SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs.Lengths)]
		if nulls.Any(lv.Nsp) {
			rs, err = like.BtSliceNullAndConst(lvs, rvs.Get(0), lv.Nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = lv.Nsp
		} else {
			rs, err = like.BtSliceAndConst(lvs, rvs.Get(0), rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
		}
		return vec, nil
	// 2. string Reg expr
	case lc && rc: // in our design, this case should deal while pruning extends.
		vec, err := process.Get(proc, rtl, SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:1]
		rs, err = like.BtConstAndConst(lvs.Get(0), rvs.Get(0), rs)
		if err != nil {
			return nil, err
		}
		vector.SetCol(vec, rs)
		return vec, nil
	// 3. string Reg []expr
	case lc && !rc:
		vec, err := process.Get(proc, int64(len(rvs.Lengths))*rtl, SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs.Lengths)]
		if nulls.Any(rv.Nsp) {
			rs, err = like.BtConstAndSliceNull(lvs.Get(0), rvs, rv.Nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = rv.Nsp
		} else {
			rs, err = like.BtConstAndSlice(lvs.Get(0), rvs, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
		}
		return vec, nil
	// 4. []string Reg []expr
	case !lc && !rc:
		vec, err := process.Get(proc, int64(len(lvs.Lengths))*rtl, SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs.Lengths)]
		if nulls.Any(rv.Nsp) && nulls.Any(lv.Nsp) {
			nsp := lv.Nsp.Or(rv.Nsp)
			rs, err = like.BtSliceNullAndSliceNull(lvs, rvs, nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = nsp
		} else if nulls.Any(rv.Nsp) && !nulls.Any(lv.Nsp) {
			rs, err = like.BtSliceNullAndSliceNull(lvs, rvs, rv.Nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = rv.Nsp
		} else if !nulls.Any(rv.Nsp) && nulls.Any(lv.Nsp) {
			rs, err = like.BtSliceNullAndSliceNull(lvs, rvs, lv.Nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = lv.Nsp
		} else {
			rs, err = like.BtSliceAndSlice(lvs, rvs, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
		}
		return vec, nil
	}
	return nil, errUnexpected
}

// like operator's evaluation for arguments: [char,varchar]
func FdsOpLikeCharVarchar(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.(*types.Bytes), rv.Col.(*types.Bytes)
	rtl := int64(SelsType.Size) //Type(T_sel).Length
	switch {
	// 1. []string Reg expr
	case !lc && rc:
		vec, err := process.Get(proc, int64(len(lvs.Lengths))*rtl, SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs.Lengths)]
		if nulls.Any(lv.Nsp) {
			rs, err = like.BtSliceNullAndConst(lvs, rvs.Get(0), lv.Nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = lv.Nsp
		} else {
			rs, err = like.BtSliceAndConst(lvs, rvs.Get(0), rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
		}
		return vec, nil
	// 2. string Reg expr
	case lc && rc: // in our design, this case should deal while pruning extends.
		vec, err := process.Get(proc, rtl, SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:1]
		rs, err = like.BtConstAndConst(lvs.Get(0), rvs.Get(0), rs)
		if err != nil {
			return nil, err
		}
		vector.SetCol(vec, rs)
		return vec, nil
	// 3. string Reg []expr
	case lc && !rc:
		vec, err := process.Get(proc, int64(len(rvs.Lengths))*rtl, SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs.Lengths)]
		if nulls.Any(rv.Nsp) {
			rs, err = like.BtConstAndSliceNull(lvs.Get(0), rvs, rv.Nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = rv.Nsp
		} else {
			rs, err = like.BtConstAndSlice(lvs.Get(0), rvs, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
		}
		return vec, nil
	// 4. []string Reg []expr
	case !lc && !rc:
		vec, err := process.Get(proc, int64(len(lvs.Lengths))*rtl, SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs.Lengths)]
		if nulls.Any(rv.Nsp) && nulls.Any(lv.Nsp) {
			nsp := lv.Nsp.Or(rv.Nsp)
			rs, err = like.BtSliceNullAndSliceNull(lvs, rvs, nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = nsp
		} else if nulls.Any(rv.Nsp) && !nulls.Any(lv.Nsp) {
			rs, err = like.BtSliceNullAndSliceNull(lvs, rvs, rv.Nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = rv.Nsp
		} else if !nulls.Any(rv.Nsp) && nulls.Any(lv.Nsp) {
			rs, err = like.BtSliceNullAndSliceNull(lvs, rvs, lv.Nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = lv.Nsp
		} else {
			rs, err = like.BtSliceAndSlice(lvs, rvs, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
		}
		return vec, nil
	}
	return nil, errUnexpected
}

// like operator's evaluation for arguments: [varchar,char]
func FdsOpLikeVarcharChar(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.(*types.Bytes), rv.Col.(*types.Bytes)
	rtl := int64(SelsType.Size) //Type(T_sel).Length
	switch {
	// 1. []string Reg expr
	case !lc && rc:
		vec, err := process.Get(proc, int64(len(lvs.Lengths))*rtl, SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs.Lengths)]
		if nulls.Any(lv.Nsp) {
			rs, err = like.BtSliceNullAndConst(lvs, rvs.Get(0), lv.Nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = lv.Nsp
		} else {
			rs, err = like.BtSliceAndConst(lvs, rvs.Get(0), rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
		}
		return vec, nil
	// 2. string Reg expr
	case lc && rc: // in our design, this case should deal while pruning extends.
		vec, err := process.Get(proc, rtl, SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:1]
		rs, err = like.BtConstAndConst(lvs.Get(0), rvs.Get(0), rs)
		if err != nil {
			return nil, err
		}
		vector.SetCol(vec, rs)
		return vec, nil
	// 3. string Reg []expr
	case lc && !rc:
		vec, err := process.Get(proc, int64(len(rvs.Lengths))*rtl, SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs.Lengths)]
		if nulls.Any(rv.Nsp) {
			rs, err = like.BtConstAndSliceNull(lvs.Get(0), rvs, rv.Nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = rv.Nsp
		} else {
			rs, err = like.BtConstAndSlice(lvs.Get(0), rvs, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
		}
		return vec, nil
	// 4. []string Reg []expr
	case !lc && !rc:
		vec, err := process.Get(proc, int64(len(lvs.Lengths))*rtl, SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs.Lengths)]
		if nulls.Any(rv.Nsp) && nulls.Any(lv.Nsp) {
			nsp := lv.Nsp.Or(rv.Nsp)
			rs, err = like.BtSliceNullAndSliceNull(lvs, rvs, nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = nsp
		} else if nulls.Any(rv.Nsp) && !nulls.Any(lv.Nsp) {
			rs, err = like.BtSliceNullAndSliceNull(lvs, rvs, rv.Nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = rv.Nsp
		} else if !nulls.Any(rv.Nsp) && nulls.Any(lv.Nsp) {
			rs, err = like.BtSliceNullAndSliceNull(lvs, rvs, lv.Nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = lv.Nsp
		} else {
			rs, err = like.BtSliceAndSlice(lvs, rvs, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
		}
		return vec, nil
	}
	return nil, errUnexpected
}

// like operator's evaluation for arguments: [varchar,varchar]
func FdsOpLikeVarcharVarchar(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.(*types.Bytes), rv.Col.(*types.Bytes)
	rtl := int64(SelsType.Size) //Type(T_sel).Length
	switch {
	// 1. []string Reg expr
	case !lc && rc:
		vec, err := process.Get(proc, int64(len(lvs.Lengths))*rtl, SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs.Lengths)]
		if nulls.Any(lv.Nsp) {
			rs, err = like.BtSliceNullAndConst(lvs, rvs.Get(0), lv.Nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = lv.Nsp
		} else {
			rs, err = like.BtSliceAndConst(lvs, rvs.Get(0), rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
		}
		return vec, nil
	// 2. string Reg expr
	case lc && rc: // in our design, this case should deal while pruning extends.
		vec, err := process.Get(proc, rtl, SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:1]
		rs, err = like.BtConstAndConst(lvs.Get(0), rvs.Get(0), rs)
		if err != nil {
			return nil, err
		}
		vector.SetCol(vec, rs)
		return vec, nil
	// 3. string Reg []expr
	case lc && !rc:
		vec, err := process.Get(proc, int64(len(rvs.Lengths))*rtl, SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs.Lengths)]
		if nulls.Any(rv.Nsp) {
			rs, err = like.BtConstAndSliceNull(lvs.Get(0), rvs, rv.Nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = rv.Nsp
		} else {
			rs, err = like.BtConstAndSlice(lvs.Get(0), rvs, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
		}
		return vec, nil
	// 4. []string Reg []expr
	case !lc && !rc:
		vec, err := process.Get(proc, int64(len(lvs.Lengths))*rtl, SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs.Lengths)]
		if nulls.Any(rv.Nsp) && nulls.Any(lv.Nsp) {
			nsp := lv.Nsp.Or(rv.Nsp)
			rs, err = like.BtSliceNullAndSliceNull(lvs, rvs, nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = nsp
		} else if nulls.Any(rv.Nsp) && !nulls.Any(lv.Nsp) {
			rs, err = like.BtSliceNullAndSliceNull(lvs, rvs, rv.Nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = rv.Nsp
		} else if !nulls.Any(rv.Nsp) && nulls.Any(lv.Nsp) {
			rs, err = like.BtSliceNullAndSliceNull(lvs, rvs, lv.Nsp.Np, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
			vec.Nsp = lv.Nsp
		} else {
			rs, err = like.BtSliceAndSlice(lvs, rvs, rs)
			if err != nil {
				return nil, err
			}
			vector.SetCol(vec, rs)
		}
		return vec, nil
	}
	return nil, errUnexpected
}
